#LET COOL

    let id_1 : type_1 [- expr_1], ...., id_n : type_n [- expr_n] in expr

#LET CIL

    expr_1.locals
    LOCAL id_1
    ...
    expr_n.locals
    LOCAL id_n
    expr.locals
    LOCAL value


    expr_1.code
    id_1 = expr_1.value
    ...
    expr_n.code
    id_n = expr_n.value
    expr.code
    value = expr.value
}

#BLOCK COOL
    { expr_1; ...; expr_n; }

#BLOCK CIL

    expr_1.locals
    ...
    expr_n.locals
    LOCAL value


    expr_1.code
    ...
    expr_n.code
    value = expr_n.value 
}

#LOOP COOL
	while <expr1> loop <expr2> pool
	
#LOOP CIL

function{
	expr_1.locals
	LOCAL local
	LOCAL value

	LABEL label_1
	expr_1.code
	local = expr.value
	IF local_1 GOTO label_2
	GOTO label_3
	LABEL label_2
	expr_2.code
	GOTO label_1
	LABEL label_3
	value = 0
}

#CONDITIONAL COOL

	if <expr_1> then <expr_2> else <expr_3> fi

#CONDITIONAL
	expr_1.locals
	LOCAL local_1
	LOACAL value
	expr_3.locals
	expr_2.locals

	expr_1.code
	local_1 = expr_1.value
	IF local_1 GOTO label_1
	expr_3.code
	value = expr_3.value
	GOTO label_2
	LABEL label_1
	expr_2.code
	value = expr_2.value
	LABEL label_2
	
#CASE COOL
	case <expr_0> of
		<id_1> : <type_1> => <expr_1>;
		...
		<id_n> : <type_n> => <expr_n>;
	esac

#CASE CIL
	expr_0.locals
	LOCAL value
	LOCAL local_1
	LOCAL local_2
	LOCAL id_1
	expr_1.locals
	...
	LOCAL local_n+1
	LOCAL local_n+2
	OCAL id_n
	expr_n.locals

	expr_0.code
	local = TYPEOF expr_0.value
	
	local_1 = type_1
	local_2 = local - local_1
	IF local_2 GOTO label_1
	id_1 = expr_0.value
	expr_1.code
	value = expr_1.value
	GOTO label_n
	
	LABEL label_1
	...
	
	local_n+1 = type_n
	local_n+2 = local - local_3
	IF local_n+2 GOTO label_n
	id_n = expr_0.value
	expr_n.code
	value = expr_n.value
	GOTO label_n
	
	LABEL label_n

#NEW COOL
	new <type>

#NEW CIL
	LOCAL local_1
	value

	local_1 = ALLOCATE type
	ARG local_1
	value = VCALL type init
	
#ISVOID COOL
	isvoid <expr>
	
#ISVOID CIL
	expr.locals
	local_1
	local_2
	value

	expr.code
	local_1 = TYPEOF expr.value
	local_2 = local_1 - void
	IF local_2 GOTO label_1
	value = 1
	GOTO label_2
	LABEL label_1
	value = 0
	LABEL label_2
	
#BINARYNODE COOL
	<expr_1> op <expr_2>
	
#BINARYNODE CIL
	LOCAL local_1
	LOCAL local_2
	LOCAL value
	
	expr_1.code
	local_1 = expr_1.value
	
	expr_2.code
	local_2 = expr_2.value
	
	value = local_1 op local_2
	
#EQUAL CIL
	LOCAL local_1
	LOCAL local_2
	LOCAL local_3
	LOCAL value
	
	expr_1.code
	local_1 = expr_1.value
	
	expr_2.code
	local_2 = expr_2.value
	
	local_3 = local_1 - local_2
	
	IF local_3 GOTO label_1
	value = 1
	GOTO label_2
	LABEL label_1
	value = 0
	LABEL label_2
	
#LESS CIL
	LOCAL local_1
	LOCAL local_2
	LOCAL value
	
	expr_1.code
	local_1 = expr_1.value
	
	expr_2.code
	
	local_2 = expr_2.value
	local_3 = local_1 / local_2
	
	IF local_3 GOTO label_1
	value = 1
	GOTO label_2
	LABEL label_1
	value = 0
	LABEL label_2
	
#LEQUAL CIL
	LOCAL local_1
	LOCAL local_2
	LOCAL local_3
	LOCAL local_4
	LOCAL value
	
	expr_1.code
	local_1 = expr_1.value
	
	expr_2.code
	local_2 = expr_2.value
	
	local_3 = local_1 / local_2
	
	IF local_3 GOTO label_1
	value = 1
	GOTO label_2
	
	LABEL label_1
	
	local_4 = local_1 - local_2
	
	IF local_4 GOTO label_3
	value = 1
	GOTO label_2
	
	LABEL label_3
	value = 0
	
	LABEL label_2

	


