# Genereted MIPS
.text 
__get_ra:
move $v0, $ra
addi $v0, $v0, 8
jr $ra
__copy:
move $t0, $a0
lw $t1, 0($t0)
lw $a0, 4($t1)
li $v0, 9
syscall
move $t1, $a0
srl $t1, $t1, 2
move $t3, $v0
__start_copy_loop:
ble $t1, $zero, __end_copy_loop
lw $t2, 0($t0)
sw $t2, 0($t3)
addi $t0, $t0, 4
addi $t3, $t3, 4
addi $t1, $t1, -1
j __start_copy_loop
__end_copy_loop:
jr $ra
__string_length:
# Actual String address
lw $a0, 4($a0)
# v0 = current length
li $v0, 0
__string_length_start_loop:
lb $t0, 0($a0)
beq $t0, $zero, __string_length_end_loop
addi $v0, $v0, 1
addi $a0, $a0, 1
j __string_length_start_loop
__string_length_end_loop:
jr $ra
__string_substring:
# Save arguments
addi $sp, $sp, -16
# Save arguments
sw $a0, 0($sp)
# Save arguments
sw $a1, 4($sp)
# Save arguments
sw $a2, 8($sp)
# Save arguments
sw $ra, 12($sp)
# $v0 = length of string
jal __string_length
# Restore arguments
lw $a0, 0($sp)
# Restore arguments
lw $a1, 4($sp)
# Restore arguments
lw $a2, 8($sp)
# Restore arguments
lw $ra, 12($sp)
# Restore arguments
addi $sp, $sp, 16
# Actual String address
lw $a0, 4($a0)
# If index >= length(string) then abort
bge $a1, $v0, __string_substring_abort
# t0 = index + length
add $t0, $a1, $a2
# If index + length >= length(string) then abort
bgt $t0, $v0, __string_substring_abort
# If 0 < 0 then abort
blt $a2, $zero, __string_substring_abort
# Saving the string address
move $t1, $a0
# a0 = length + 1. Extra space for null character
addi $a0, $a2, 1
li $v0, 9
syscall
# Saving the new string address
move $t2, $v0
# Removing the last null space from copy
addi $a0, $a0, -1
# Advance index positions in original string
add $t1, $t1, $a1
__string_substring_start_copy:
ble $a0, $zero, __string_substring_end_copy
lb $t3, 0($t1)
sb $t3, 0($t2)
addi $t1, $t1, 1
addi $t2, $t2, 1
addi $a0, $a0, -1
j __string_substring_start_copy
__string_substring_end_copy:
# Saving String Address
move $v1, $v0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $v1, 4($v0)
# Return the address of the new String
jr $ra
__string_substring_abort:
addi $v0, $zero, 10
syscall
__type_name:
# $t0 = type name address
lw $t0, 8($a0)
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Return the address of the String
jr $ra
__concat:
addi $sp, $sp, -12
sw $a0, 0($sp)
sw $a1, 4($sp)
sw $ra, 8($sp)
jal __string_length
lw $a0, 0($sp)
lw $a1, 4($sp)
lw $ra, 8($sp)
addi $sp, $sp, 12
move $t1, $a0
move $a0, $a1
move $a1, $t1
move $t0, $v0
addi $sp, $sp, -16
sw $a0, 0($sp)
sw $a1, 4($sp)
sw $t0, 8($sp)
sw $ra, 12($sp)
jal __string_length
lw $a0, 0($sp)
lw $a1, 4($sp)
lw $t0, 8($sp)
lw $ra, 12($sp)
addi $sp, $sp, 16
move $t1, $a0
move $a0, $a1
move $a1, $t1
lw $a0, 4($a0)
lw $a1, 4($a1)
move $t1, $a0
add $t2, $v0, $t0
addi $a0, $t2, 1
move $t2, $v0
li $v0, 9
syscall
# Save string address
move $v1, $v0
__concat_string1_copy_start_copy:
ble $t0, $zero, __concat_string1_copy_end_copy
lb $t3, 0($t1)
sb $t3, 0($v1)
addi $t1, $t1, 1
addi $v1, $v1, 1
addi $t0, $t0, -1
j __concat_string1_copy_start_copy
__concat_string1_copy_end_copy:
__concat_string2_copy_start_copy:
ble $t2, $zero, __concat_string2_copy_end_copy
lb $t3, 0($a1)
sb $t3, 0($v1)
addi $a1, $a1, 1
addi $v1, $v1, 1
addi $t2, $t2, -1
j __concat_string2_copy_start_copy
__concat_string2_copy_end_copy:
sb $zero, 0($v1)
# Save string address
move $v1, $v0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $v1, 4($v0)
# Returns the concatenated string instance in v0
jr $ra
__string_equal:
# Actual String address
lw $t0, 4($a0)
# Actual String address
lw $t1, 4($a1)
__string_equal_start_loop:
# Load string1 char
lb $t2, 0($t0)
# Load string2 char
lb $t3, 0($t1)
# Equal chars?
seq $t4, $t2, $t3
# If not equal then
beq $t4, $zero, __string_equal_end_loop
# Both strings ended
beq $t2, $zero, __string_equal_end_loop
# Next char
addi $t0, $t0, 1
# Next char
addi $t1, $t1, 1
j __string_equal_start_loop
__string_equal_end_loop:
# Assign return value
move $v0, $t4
jr $ra
__object_equal:
# Compare obj by address
seq $v0, $a0, $a1
# Equal Address or Value obj are equal
bne $v0, $zero, __object_equal_end
# Check if first obj is null
seq $t0, $zero, $a0
# Set v0 to False and return
bne $t0, $zero, __object_equal_false_section
# Check if second obj is null
seq $t0, $zero, $a1
# Set v0 to False and return
bne $t0, $zero, __object_equal_false_section
# t0 = left object
move $t0, $a0
# t1 = right object
move $t1, $a1
# t0=left objType
lw $t0, 0($t0)
# t1=right objType
lw $t1, 0($t1)
# Loading String type address for comparison
la $t2, String
# t0 = left type == String
seq $t0, $t0, $t2
# t1 = right type == String
seq $t1, $t1, $t2
# Both types are equal to String
and $t0, $t0, $t1
# If not equal return 0
beq $t0, $zero, __object_equal_false_section
addi $sp, $sp, -12
sw $ra, 0($sp)
sw $a0, 4($sp)
sw $a1, 8($sp)
jal __string_equal
lw $ra, 0($sp)
lw $a0, 4($sp)
lw $a1, 8($sp)
addi $sp, $sp, 12
# Go to end
j __object_equal_end
# Do Obj cmp
__object_equal_false_section:
# Not equal objects
move $v0, $zero
# End cmp
__object_equal_end:
jr $ra
# Remove Final Char
__remove_last_char:
# Actual String address
lw $t0, 4($a0)
# Get current char
lb $t1, 0($t0)
# if char is null then return
beq $t1, $zero, __remove_last_char_return
# Initial loop
__remove_last_char_start:
# Get current char
lb $t1, 0($t0)
# if char is null then break
beq $t1, $zero, __remove_last_char_end
# Increment address
addi $t0, $t0, 1
j __remove_last_char_start
# End loop, removing last char
__remove_last_char_end:
# Back one char to last one
addi $t0, $t0, -1
# Store null character
sb $zero, 0($t0)
# Return, removing last char
__remove_last_char_return:
jr $ra
# Program Node
main:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Instantiate Node
la $a0, Main
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 8($fp)
# Instantiate Node
lw $t0, 8($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Main_type
# Instantiate Node
sw $v0, 8($fp)
lw $t0, 8($fp)
addi $sp, $sp, -4
sw $t0, 0($sp)
# Program Node
jal function_main_at_Main
# Program Node
sw $v0, 4($fp)
# Program Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 12
# Program Node
jr $ra
# Program Node
type_distance:
# Program Node
addi $sp, $sp, -16
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Program Node
sw $zero, 12($fp)
# Program Node
li $t0, 0
# Program Node
sw $t0, 0($fp)
# Program Node
distance_label_0:
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t1, 16($fp)
# Program Node
seq $t2, $t0, $t1
# Program Node
sw $t2, 4($fp)
# Program Node
lw $t0, 4($fp)
# Program Node
bne $t0, $zero, distance_label_1
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t0, 0($t0)
# Program Node
sw $t0, 20($fp)
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t1, 12($fp)
# Program Node
seq $t2, $t0, $t1
# Program Node
sw $t2, 8($fp)
# Program Node
lw $t0, 8($fp)
# Program Node
bne $t0, $zero, distance_label_2
# Program Node
lw $t0, 0($fp)
# Program Node
li $t1, 1
# Program Node
add $t2, $t0, $t1
# Program Node
sw $t2, 0($fp)
# Program Node
j distance_label_0
# Program Node
distance_label_2:
# Program Node
li $t0, -1
# Program Node
sw $t0, 0($fp)
# Program Node
distance_label_1:
# Program Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_length_at_String:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Length Node
lw $a0, 4($fp)
# String Length Node
jal __string_length
# String Length Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_concat_at_String:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Concat Node
lw $a0, 8($fp)
# String Concat Node
lw $a1, 4($fp)
# String Concat Node
jal __concat
# String Concat Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 12
# Program Node
jr $ra
# Program Node
function_substr_at_String:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Substring Node
lw $a0, 12($fp)
# String Substring Node
lw $a1, 8($fp)
# String Substring Node
lw $a2, 4($fp)
# String Substring Node
jal __string_substring
# String Substring Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_abort_at_Bool:
# Program Node
addi $sp, $sp, -20
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_2
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
la $t0, data_10
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 4($fp)
la $t0, data_11
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 8($fp)
# Final abort message
lw $a0, 4($fp)
# Final abort message
lw $a1, 0($fp)
# Final abort message
jal __concat
# Final abort message
sw $v0, 12($fp)
# Final Final abort message
lw $a0, 12($fp)
# Final Final abort message
lw $a1, 8($fp)
# Final Final abort message
jal __concat
# Final Final abort message
sw $v0, 16($fp)
# Print abort info
lw $a0, 16($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Abort Bool
addi $v0, $zero, 10
# Abort Bool
syscall
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_type_name_at_Bool:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_2
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_abort_at_Int:
# Program Node
addi $sp, $sp, -20
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_3
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
la $t0, data_10
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 4($fp)
la $t0, data_11
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 8($fp)
# Final abort message
lw $a0, 4($fp)
# Final abort message
lw $a1, 0($fp)
# Final abort message
jal __concat
# Final abort message
sw $v0, 12($fp)
# Final Final abort message
lw $a0, 12($fp)
# Final Final abort message
lw $a1, 8($fp)
# Final Final abort message
jal __concat
# Final Final abort message
sw $v0, 16($fp)
# Print abort info
lw $a0, 16($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Abort Int
addi $v0, $zero, 10
# Abort Int
syscall
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_type_name_at_Int:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_3
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Init c at Bar
__init_c_at_Bar:
# Init c at Bar
addi $sp, $sp, -8
# Init c at Bar
move $t0, $sp
# Init c at Bar
addi $sp, $sp, -8
# Init c at Bar
sw $ra, 0($sp)
# Init c at Bar
sw $fp, 4($sp)
# Init c at Bar
move $fp, $t0
# Call Node
lw $t0, 8($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 8($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 32($t0)
# Init c at Bar
lw $ra, 0($sp)
# Init c at Bar
lw $fp, 4($sp)
# Init c at Bar
addi $sp, $sp, 8
# Init c at Bar
addi $sp, $sp, 12
# Init c at Bar
jr $ra
# Init d at Bar
__init_d_at_Bar:
# Init d at Bar
addi $sp, $sp, -8
# Init d at Bar
move $t0, $sp
# Init d at Bar
addi $sp, $sp, -8
# Init d at Bar
sw $ra, 0($sp)
# Init d at Bar
sw $fp, 4($sp)
# Init d at Bar
move $fp, $t0
# Call Node
lw $t0, 8($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 8($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 36($t0)
# Init d at Bar
lw $ra, 0($sp)
# Init d at Bar
lw $fp, 4($sp)
# Init d at Bar
addi $sp, $sp, 8
# Init d at Bar
addi $sp, $sp, 12
# Init d at Bar
jr $ra
# Init a at Foo
__init_a_at_Foo:
# Init a at Foo
addi $sp, $sp, -72
# Init a at Foo
move $t0, $sp
# Init a at Foo
addi $sp, $sp, -8
# Init a at Foo
sw $ra, 0($sp)
# Init a at Foo
sw $fp, 4($sp)
# Init a at Foo
move $fp, $t0
# Case Node void isVoid
sw $zero, 8($fp)
# Case Node equal isVoid value isVoid
lw $t0, 72($fp)
# Case Node equal isVoid value isVoid
lw $t1, 8($fp)
# Case Node equal isVoid value isVoid
seq $t2, $t0, $t1
# Case Node equal isVoid value isVoid
sw $t2, 8($fp)
# Case Node gotoif isVoid abort_label
lw $t0, 8($fp)
# Case Node gotoif isVoid abort_label
bne $t0, $zero, _init_a_at_Foo_label_0
# Case Node typeof value
lw $t0, 72($fp)
# Case Node typeof value
lw $t0, 0($t0)
# Case Node typeof value
sw $t0, 4($fp)
# Case Node array declaration
li $a0, 12
# Case Node array declaration
li $v0, 9
# Case Node array declaration
syscall
# Case Node array declaration
sw $v0, 12($fp)
# Case Node array setindex 0
li $t2, 0
# Case Node array setindex 0
la $t3, Razz
# Case Node array setindex 0
lw $t1, 12($fp)
# Case Node array setindex 0
add $t1, $t1, $t2
# Case Node array setindex 0
sw $t3, 0($t1)
# Case Node array setindex 1
li $t2, 4
# Case Node array setindex 1
la $t3, Foo
# Case Node array setindex 1
lw $t1, 12($fp)
# Case Node array setindex 1
add $t1, $t1, $t2
# Case Node array setindex 1
sw $t3, 0($t1)
# Case Node array setindex 2
li $t2, 8
# Case Node array setindex 2
la $t3, Bar
# Case Node array setindex 2
lw $t1, 12($fp)
# Case Node array setindex 2
add $t1, $t1, $t2
# Case Node array setindex 2
sw $t3, 0($t1)
# Case Node assign index -1
li $t0, -1
# Case Node assign index -1
sw $t0, 16($fp)
# Case Node assign minim -2
li $t0, -2
# Case Node assign minim -2
sw $t0, 24($fp)
# Case Node start label
_init_a_at_Foo_label_1:
# Case Node plus index 1
lw $t0, 16($fp)
# Case Node plus index 1
li $t1, 1
# Case Node plus index 1
add $t2, $t0, $t1
# Case Node plus index 1
sw $t2, 16($fp)
# Case Node equal stop_for index checks
lw $t0, 16($fp)
# Case Node equal stop_for index checks
li $t1, 3
# Case Node equal stop_for index checks
seq $t2, $t0, $t1
# Case Node equal stop_for index checks
sw $t2, 36($fp)
# Case Node gotoif stop_for end_label
lw $t0, 36($fp)
# Case Node gotoif stop_for end_label
bne $t0, $zero, _init_a_at_Foo_label_3
# Case Node get_index array_types index
lw $t0, 16($fp)
# Case Node get_index array_types index
li $t2, 4
# Case Node get_index array_types index
mul $t2, $t2, $t0
# Case Node get_index array_types index
lw $t1, 12($fp)
# Case Node get_index array_types index
add $t1, $t1, $t2
# Case Node get_index array_types index
lw $t2, 0($t1)
# Case Node get_index array_types index
sw $t2, 32($fp)
# Case Node arg type_value
lw $t0, 4($fp)
# Case Node arg type_value
addi $sp, $sp, -4
# Case Node arg type_value
sw $t0, 0($sp)
# Case Node arg current_type
lw $t0, 32($fp)
# Case Node arg current_type
addi $sp, $sp, -4
# Case Node arg current_type
sw $t0, 0($sp)
# Case Node static_call type_distance
jal type_distance
# Case Node static_call type_distance
sw $v0, 28($fp)
# Case Node equal not_valid_distance distance -1
lw $t0, 28($fp)
# Case Node equal not_valid_distance distance -1
li $t1, -1
# Case Node equal not_valid_distance distance -1
seq $t2, $t0, $t1
# Case Node equal not_valid_distance distance -1
sw $t2, 40($fp)
# Case Node gotoif not_valid_distance start_label
lw $t0, 40($fp)
# Case Node gotoif not_valid_distance start_label
bne $t0, $zero, _init_a_at_Foo_label_1
# Case Node equal minim_cond minim -2
lw $t0, 24($fp)
# Case Node equal minim_cond minim -2
li $t1, -2
# Case Node equal minim_cond minim -2
seq $t2, $t0, $t1
# Case Node equal minim_cond minim -2
sw $t2, 44($fp)
# Case Node gotoif minim_cond minim_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond minim_label
bne $t0, $zero, _init_a_at_Foo_label_2
# Case Node greater minim_cond minim distance
lw $t0, 24($fp)
# Case Node greater minim_cond minim distance
lw $t1, 28($fp)
# Case Node greater minim_cond minim distance
sgt $t2, $t0, $t1
# Case Node greater minim_cond minim distance
sw $t2, 44($fp)
# Case Node gotoif minim_cond minim_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond minim_label
bne $t0, $zero, _init_a_at_Foo_label_2
# Case Node goto start_label
j _init_a_at_Foo_label_1
# Case Node minim label
_init_a_at_Foo_label_2:
# Case Node assign minim distance
lw $t0, 28($fp)
# Case Node assign minim distance
sw $t0, 24($fp)
# Case Node assign minim_index index
lw $t0, 16($fp)
# Case Node assign minim_index index
sw $t0, 20($fp)
# Case Node goto start_label
j _init_a_at_Foo_label_1
# Case Node end label
_init_a_at_Foo_label_3:
# Case Node equal minim_cond minim -2
lw $t0, 24($fp)
# Case Node equal minim_cond minim -2
li $t1, -2
# Case Node equal minim_cond minim -2
seq $t2, $t0, $t1
# Case Node equal minim_cond minim -2
sw $t2, 44($fp)
# Case Node gotoif minim_cond abort_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond abort_label
bne $t0, $zero, _init_a_at_Foo_label_0
# Case Node get_index array_types minim_index
lw $t0, 20($fp)
# Case Node get_index array_types minim_index
li $t2, 4
# Case Node get_index array_types minim_index
mul $t2, $t2, $t0
# Case Node get_index array_types minim_index
lw $t1, 12($fp)
# Case Node get_index array_types minim_index
add $t1, $t1, $t2
# Case Node get_index array_types minim_index
lw $t2, 0($t1)
# Case Node get_index array_types minim_index
sw $t2, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
la $t0, Razz
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_a_at_Foo_label_5
# Check Node
lw $t0, 72($fp)
# Check Node
sw $t0, 52($fp)
# Instantiate Node
la $a0, Bar
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 56($fp)
# Instantiate Node
lw $t0, 56($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Bar_type
# Instantiate Node
sw $v0, 56($fp)
# Case Node assign final_result result
lw $t0, 56($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_a_at_Foo_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff8190344e0>
_init_a_at_Foo_label_5:
# Case Node equal not_equal_types param.type.name current_type
la $t0, Foo
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_a_at_Foo_label_6
# Check Node
lw $t0, 72($fp)
# Check Node
sw $t0, 60($fp)
# Instantiate Node
la $a0, Razz
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 64($fp)
# Instantiate Node
lw $t0, 64($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Razz_type
# Instantiate Node
sw $v0, 64($fp)
# Case Node assign final_result result
lw $t0, 64($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_a_at_Foo_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff8190345c0>
_init_a_at_Foo_label_6:
# Case Node equal not_equal_types param.type.name current_type
la $t0, Bar
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_a_at_Foo_label_7
# Check Node
lw $t0, 72($fp)
# Check Node
sw $t0, 68($fp)
# Case Node assign final_result result
lw $t0, 68($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_a_at_Foo_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff819034630>
_init_a_at_Foo_label_7:
# Case Node abort label
_init_a_at_Foo_label_0:
# Case Node abort
addi $v0, $zero, 10
# Case Node abort
syscall
# Case Node final_label
_init_a_at_Foo_label_4:
# Attr Declaration Node
lw $t0, 72($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 16($t0)
# Init a at Foo
lw $ra, 0($sp)
# Init a at Foo
lw $fp, 4($sp)
# Init a at Foo
addi $sp, $sp, 8
# Init a at Foo
addi $sp, $sp, 76
# Init a at Foo
jr $ra
# Init b at Foo
__init_b_at_Foo:
# Init b at Foo
addi $sp, $sp, -52
# Init b at Foo
move $t0, $sp
# Init b at Foo
addi $sp, $sp, -8
# Init b at Foo
sw $ra, 0($sp)
# Init b at Foo
sw $fp, 4($sp)
# Init b at Foo
move $fp, $t0
# Variable Node
lw $t0, 52($fp)
# Variable Node
lw $t0, 16($t0)
# Variable Node
sw $t0, 0($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Variable Node
lw $t0, 52($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 20($fp)
# Call Node
lw $t0, 20($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 16($fp)
# Plus Node
lw $t0, 4($fp)
# Plus Node
lw $t1, 16($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 24($fp)
# Call Node
lw $t0, 52($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 52($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 32($fp)
# Call Node
lw $t0, 32($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 28($fp)
# Plus Node
lw $t0, 24($fp)
# Plus Node
lw $t1, 28($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 36($fp)
# Call Node
lw $t0, 52($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 52($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 44($fp)
# Call Node
lw $t0, 44($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 40($fp)
# Plus Node
lw $t0, 36($fp)
# Plus Node
lw $t1, 40($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 48($fp)
# Attr Declaration Node
lw $t0, 52($fp)
# Attr Declaration Node
lw $t1, 48($fp)
# Attr Declaration Node
sw $t1, 20($t0)
# Init b at Foo
lw $ra, 0($sp)
# Init b at Foo
lw $fp, 4($sp)
# Init b at Foo
addi $sp, $sp, 8
# Init b at Foo
addi $sp, $sp, 56
# Init b at Foo
jr $ra
# Program Node
function_doh_at_Foo:
# Program Node
addi $sp, $sp, -20
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 20($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 4($fp)
# Var Declaration Node
lw $t0, 4($fp)
# Var Declaration Node
sw $t0, 0($fp)
# Variable Node
lw $t0, 20($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 12($fp)
# Plus Node
lw $t0, 12($fp)
# Plus Node
li $t1, 2
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 16($fp)
# Assign Node
lw $t0, 20($fp)
# Assign Node
lw $t1, 16($fp)
# Assign Node
sw $t1, 4($t0)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Init e at Razz
__init_e_at_Razz:
# Init e at Razz
addi $sp, $sp, -64
# Init e at Razz
move $t0, $sp
# Init e at Razz
addi $sp, $sp, -8
# Init e at Razz
sw $ra, 0($sp)
# Init e at Razz
sw $fp, 4($sp)
# Init e at Razz
move $fp, $t0
# Case Node void isVoid
sw $zero, 8($fp)
# Case Node equal isVoid value isVoid
lw $t0, 64($fp)
# Case Node equal isVoid value isVoid
lw $t1, 8($fp)
# Case Node equal isVoid value isVoid
seq $t2, $t0, $t1
# Case Node equal isVoid value isVoid
sw $t2, 8($fp)
# Case Node gotoif isVoid abort_label
lw $t0, 8($fp)
# Case Node gotoif isVoid abort_label
bne $t0, $zero, _init_e_at_Razz_label_0
# Case Node typeof value
lw $t0, 64($fp)
# Case Node typeof value
lw $t0, 0($t0)
# Case Node typeof value
sw $t0, 4($fp)
# Case Node array declaration
li $a0, 8
# Case Node array declaration
li $v0, 9
# Case Node array declaration
syscall
# Case Node array declaration
sw $v0, 12($fp)
# Case Node array setindex 0
li $t2, 0
# Case Node array setindex 0
la $t3, Razz
# Case Node array setindex 0
lw $t1, 12($fp)
# Case Node array setindex 0
add $t1, $t1, $t2
# Case Node array setindex 0
sw $t3, 0($t1)
# Case Node array setindex 1
li $t2, 4
# Case Node array setindex 1
la $t3, Bar
# Case Node array setindex 1
lw $t1, 12($fp)
# Case Node array setindex 1
add $t1, $t1, $t2
# Case Node array setindex 1
sw $t3, 0($t1)
# Case Node assign index -1
li $t0, -1
# Case Node assign index -1
sw $t0, 16($fp)
# Case Node assign minim -2
li $t0, -2
# Case Node assign minim -2
sw $t0, 24($fp)
# Case Node start label
_init_e_at_Razz_label_1:
# Case Node plus index 1
lw $t0, 16($fp)
# Case Node plus index 1
li $t1, 1
# Case Node plus index 1
add $t2, $t0, $t1
# Case Node plus index 1
sw $t2, 16($fp)
# Case Node equal stop_for index checks
lw $t0, 16($fp)
# Case Node equal stop_for index checks
li $t1, 2
# Case Node equal stop_for index checks
seq $t2, $t0, $t1
# Case Node equal stop_for index checks
sw $t2, 36($fp)
# Case Node gotoif stop_for end_label
lw $t0, 36($fp)
# Case Node gotoif stop_for end_label
bne $t0, $zero, _init_e_at_Razz_label_3
# Case Node get_index array_types index
lw $t0, 16($fp)
# Case Node get_index array_types index
li $t2, 4
# Case Node get_index array_types index
mul $t2, $t2, $t0
# Case Node get_index array_types index
lw $t1, 12($fp)
# Case Node get_index array_types index
add $t1, $t1, $t2
# Case Node get_index array_types index
lw $t2, 0($t1)
# Case Node get_index array_types index
sw $t2, 32($fp)
# Case Node arg type_value
lw $t0, 4($fp)
# Case Node arg type_value
addi $sp, $sp, -4
# Case Node arg type_value
sw $t0, 0($sp)
# Case Node arg current_type
lw $t0, 32($fp)
# Case Node arg current_type
addi $sp, $sp, -4
# Case Node arg current_type
sw $t0, 0($sp)
# Case Node static_call type_distance
jal type_distance
# Case Node static_call type_distance
sw $v0, 28($fp)
# Case Node equal not_valid_distance distance -1
lw $t0, 28($fp)
# Case Node equal not_valid_distance distance -1
li $t1, -1
# Case Node equal not_valid_distance distance -1
seq $t2, $t0, $t1
# Case Node equal not_valid_distance distance -1
sw $t2, 40($fp)
# Case Node gotoif not_valid_distance start_label
lw $t0, 40($fp)
# Case Node gotoif not_valid_distance start_label
bne $t0, $zero, _init_e_at_Razz_label_1
# Case Node equal minim_cond minim -2
lw $t0, 24($fp)
# Case Node equal minim_cond minim -2
li $t1, -2
# Case Node equal minim_cond minim -2
seq $t2, $t0, $t1
# Case Node equal minim_cond minim -2
sw $t2, 44($fp)
# Case Node gotoif minim_cond minim_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond minim_label
bne $t0, $zero, _init_e_at_Razz_label_2
# Case Node greater minim_cond minim distance
lw $t0, 24($fp)
# Case Node greater minim_cond minim distance
lw $t1, 28($fp)
# Case Node greater minim_cond minim distance
sgt $t2, $t0, $t1
# Case Node greater minim_cond minim distance
sw $t2, 44($fp)
# Case Node gotoif minim_cond minim_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond minim_label
bne $t0, $zero, _init_e_at_Razz_label_2
# Case Node goto start_label
j _init_e_at_Razz_label_1
# Case Node minim label
_init_e_at_Razz_label_2:
# Case Node assign minim distance
lw $t0, 28($fp)
# Case Node assign minim distance
sw $t0, 24($fp)
# Case Node assign minim_index index
lw $t0, 16($fp)
# Case Node assign minim_index index
sw $t0, 20($fp)
# Case Node goto start_label
j _init_e_at_Razz_label_1
# Case Node end label
_init_e_at_Razz_label_3:
# Case Node equal minim_cond minim -2
lw $t0, 24($fp)
# Case Node equal minim_cond minim -2
li $t1, -2
# Case Node equal minim_cond minim -2
seq $t2, $t0, $t1
# Case Node equal minim_cond minim -2
sw $t2, 44($fp)
# Case Node gotoif minim_cond abort_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond abort_label
bne $t0, $zero, _init_e_at_Razz_label_0
# Case Node get_index array_types minim_index
lw $t0, 20($fp)
# Case Node get_index array_types minim_index
li $t2, 4
# Case Node get_index array_types minim_index
mul $t2, $t2, $t0
# Case Node get_index array_types minim_index
lw $t1, 12($fp)
# Case Node get_index array_types minim_index
add $t1, $t1, $t2
# Case Node get_index array_types minim_index
lw $t2, 0($t1)
# Case Node get_index array_types minim_index
sw $t2, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
la $t0, Razz
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_e_at_Razz_label_5
# Check Node
lw $t0, 64($fp)
# Check Node
sw $t0, 52($fp)
# Instantiate Node
la $a0, Bar
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 56($fp)
# Instantiate Node
lw $t0, 56($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Bar_type
# Instantiate Node
sw $v0, 56($fp)
# Case Node assign final_result result
lw $t0, 56($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_e_at_Razz_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff819031d30>
_init_e_at_Razz_label_5:
# Case Node equal not_equal_types param.type.name current_type
la $t0, Bar
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_e_at_Razz_label_6
# Check Node
lw $t0, 64($fp)
# Check Node
sw $t0, 60($fp)
# Case Node assign final_result result
lw $t0, 60($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_e_at_Razz_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff819031eb8>
_init_e_at_Razz_label_6:
# Case Node abort label
_init_e_at_Razz_label_0:
# Case Node abort
addi $v0, $zero, 10
# Case Node abort
syscall
# Case Node final_label
_init_e_at_Razz_label_4:
# Attr Declaration Node
lw $t0, 64($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 24($t0)
# Init e at Razz
lw $ra, 0($sp)
# Init e at Razz
lw $fp, 4($sp)
# Init e at Razz
addi $sp, $sp, 8
# Init e at Razz
addi $sp, $sp, 68
# Init e at Razz
jr $ra
# Init f at Razz
__init_f_at_Razz:
# Init f at Razz
addi $sp, $sp, -64
# Init f at Razz
move $t0, $sp
# Init f at Razz
addi $sp, $sp, -8
# Init f at Razz
sw $ra, 0($sp)
# Init f at Razz
sw $fp, 4($sp)
# Init f at Razz
move $fp, $t0
# Variable Node
lw $t0, 64($fp)
# Variable Node
lw $t0, 16($t0)
# Variable Node
sw $t0, 0($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
jal function_doh_at_Bazz
# Call Node
sw $v0, 4($fp)
# Variable Node
lw $t0, 64($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 16($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 12($fp)
# Plus Node
lw $t0, 4($fp)
# Plus Node
lw $t1, 12($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 20($fp)
# Variable Node
lw $t0, 64($fp)
# Variable Node
lw $t0, 24($t0)
# Variable Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 32($fp)
# Call Node
lw $t0, 32($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 28($fp)
# Plus Node
lw $t0, 20($fp)
# Plus Node
lw $t1, 28($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 36($fp)
# Call Node
lw $t0, 64($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 64($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 44($fp)
# Call Node
lw $t0, 44($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 40($fp)
# Plus Node
lw $t0, 36($fp)
# Plus Node
lw $t1, 40($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 48($fp)
# Call Node
lw $t0, 64($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 64($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 56($fp)
# Call Node
lw $t0, 56($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 52($fp)
# Plus Node
lw $t0, 48($fp)
# Plus Node
lw $t1, 52($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 60($fp)
# Attr Declaration Node
lw $t0, 64($fp)
# Attr Declaration Node
lw $t1, 60($fp)
# Attr Declaration Node
sw $t1, 28($t0)
# Init f at Razz
lw $ra, 0($sp)
# Init f at Razz
lw $fp, 4($sp)
# Init f at Razz
addi $sp, $sp, 8
# Init f at Razz
addi $sp, $sp, 68
# Init f at Razz
jr $ra
# Program Node
function_out_string_at_IO:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# IO Out String Node
lw $a0, 0($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_out_int_at_IO:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# IO Out Int Node
lw $a0, 0($fp)
# IO Out Int Node
addi $v0, $zero, 1
# IO Out Int Node
syscall
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_in_string_at_IO:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# a1 = Allocated length Save the length in a1
li $a1, 1024
# Allocates 1024 bytes and return the address un v0
move $a0, $a1
# Allocates 1024 bytes and return the address un v0
li $v0, 9
# Allocates 1024 bytes and return the address un v0
syscall
# a0 = v0 Save the address in a0
move $a0, $v0
# 8 System call code for read string
addi $v0, $zero, 8
# Fills the address in a0 with the string
syscall
# a1 = a0 Save the address in a1
move $a1, $a0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $a1, 4($v0)
# a0 = v0 Get the string instance address
move $a0, $v0
addi $sp, $sp, -4
sw $ra, 0($sp)
# Remove last char
jal __remove_last_char
lw $ra, 0($sp)
addi $sp, $sp, 4
# Save the address in the final destination
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_in_int_at_IO:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# IO In Int Node
addi $v0, $zero, 5
# IO In Int Node
syscall
# IO In Int Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Init h at Bazz
__init_h_at_Bazz:
# Init h at Bazz
addi $sp, $sp, 0
# Init h at Bazz
move $t0, $sp
# Init h at Bazz
addi $sp, $sp, -8
# Init h at Bazz
sw $ra, 0($sp)
# Init h at Bazz
sw $fp, 4($sp)
# Init h at Bazz
move $fp, $t0
# Attr Declaration Node
lw $t0, 0($fp)
# Attr Declaration Node
li $t1, 1
# Attr Declaration Node
sw $t1, 4($t0)
# Init h at Bazz
lw $ra, 0($sp)
# Init h at Bazz
lw $fp, 4($sp)
# Init h at Bazz
addi $sp, $sp, 8
# Init h at Bazz
addi $sp, $sp, 4
# Init h at Bazz
jr $ra
# Init g at Bazz
__init_g_at_Bazz:
# Init g at Bazz
addi $sp, $sp, -80
# Init g at Bazz
move $t0, $sp
# Init g at Bazz
addi $sp, $sp, -8
# Init g at Bazz
sw $ra, 0($sp)
# Init g at Bazz
sw $fp, 4($sp)
# Init g at Bazz
move $fp, $t0
# Case Node void isVoid
sw $zero, 8($fp)
# Case Node equal isVoid value isVoid
lw $t0, 80($fp)
# Case Node equal isVoid value isVoid
lw $t1, 8($fp)
# Case Node equal isVoid value isVoid
seq $t2, $t0, $t1
# Case Node equal isVoid value isVoid
sw $t2, 8($fp)
# Case Node gotoif isVoid abort_label
lw $t0, 8($fp)
# Case Node gotoif isVoid abort_label
bne $t0, $zero, _init_g_at_Bazz_label_0
# Case Node typeof value
lw $t0, 80($fp)
# Case Node typeof value
lw $t0, 0($t0)
# Case Node typeof value
sw $t0, 4($fp)
# Case Node array declaration
li $a0, 16
# Case Node array declaration
li $v0, 9
# Case Node array declaration
syscall
# Case Node array declaration
sw $v0, 12($fp)
# Case Node array setindex 0
li $t2, 0
# Case Node array setindex 0
la $t3, Bazz
# Case Node array setindex 0
lw $t1, 12($fp)
# Case Node array setindex 0
add $t1, $t1, $t2
# Case Node array setindex 0
sw $t3, 0($t1)
# Case Node array setindex 1
li $t2, 4
# Case Node array setindex 1
la $t3, Razz
# Case Node array setindex 1
lw $t1, 12($fp)
# Case Node array setindex 1
add $t1, $t1, $t2
# Case Node array setindex 1
sw $t3, 0($t1)
# Case Node array setindex 2
li $t2, 8
# Case Node array setindex 2
la $t3, Foo
# Case Node array setindex 2
lw $t1, 12($fp)
# Case Node array setindex 2
add $t1, $t1, $t2
# Case Node array setindex 2
sw $t3, 0($t1)
# Case Node array setindex 3
li $t2, 12
# Case Node array setindex 3
la $t3, Bar
# Case Node array setindex 3
lw $t1, 12($fp)
# Case Node array setindex 3
add $t1, $t1, $t2
# Case Node array setindex 3
sw $t3, 0($t1)
# Case Node assign index -1
li $t0, -1
# Case Node assign index -1
sw $t0, 16($fp)
# Case Node assign minim -2
li $t0, -2
# Case Node assign minim -2
sw $t0, 24($fp)
# Case Node start label
_init_g_at_Bazz_label_1:
# Case Node plus index 1
lw $t0, 16($fp)
# Case Node plus index 1
li $t1, 1
# Case Node plus index 1
add $t2, $t0, $t1
# Case Node plus index 1
sw $t2, 16($fp)
# Case Node equal stop_for index checks
lw $t0, 16($fp)
# Case Node equal stop_for index checks
li $t1, 4
# Case Node equal stop_for index checks
seq $t2, $t0, $t1
# Case Node equal stop_for index checks
sw $t2, 36($fp)
# Case Node gotoif stop_for end_label
lw $t0, 36($fp)
# Case Node gotoif stop_for end_label
bne $t0, $zero, _init_g_at_Bazz_label_3
# Case Node get_index array_types index
lw $t0, 16($fp)
# Case Node get_index array_types index
li $t2, 4
# Case Node get_index array_types index
mul $t2, $t2, $t0
# Case Node get_index array_types index
lw $t1, 12($fp)
# Case Node get_index array_types index
add $t1, $t1, $t2
# Case Node get_index array_types index
lw $t2, 0($t1)
# Case Node get_index array_types index
sw $t2, 32($fp)
# Case Node arg type_value
lw $t0, 4($fp)
# Case Node arg type_value
addi $sp, $sp, -4
# Case Node arg type_value
sw $t0, 0($sp)
# Case Node arg current_type
lw $t0, 32($fp)
# Case Node arg current_type
addi $sp, $sp, -4
# Case Node arg current_type
sw $t0, 0($sp)
# Case Node static_call type_distance
jal type_distance
# Case Node static_call type_distance
sw $v0, 28($fp)
# Case Node equal not_valid_distance distance -1
lw $t0, 28($fp)
# Case Node equal not_valid_distance distance -1
li $t1, -1
# Case Node equal not_valid_distance distance -1
seq $t2, $t0, $t1
# Case Node equal not_valid_distance distance -1
sw $t2, 40($fp)
# Case Node gotoif not_valid_distance start_label
lw $t0, 40($fp)
# Case Node gotoif not_valid_distance start_label
bne $t0, $zero, _init_g_at_Bazz_label_1
# Case Node equal minim_cond minim -2
lw $t0, 24($fp)
# Case Node equal minim_cond minim -2
li $t1, -2
# Case Node equal minim_cond minim -2
seq $t2, $t0, $t1
# Case Node equal minim_cond minim -2
sw $t2, 44($fp)
# Case Node gotoif minim_cond minim_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond minim_label
bne $t0, $zero, _init_g_at_Bazz_label_2
# Case Node greater minim_cond minim distance
lw $t0, 24($fp)
# Case Node greater minim_cond minim distance
lw $t1, 28($fp)
# Case Node greater minim_cond minim distance
sgt $t2, $t0, $t1
# Case Node greater minim_cond minim distance
sw $t2, 44($fp)
# Case Node gotoif minim_cond minim_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond minim_label
bne $t0, $zero, _init_g_at_Bazz_label_2
# Case Node goto start_label
j _init_g_at_Bazz_label_1
# Case Node minim label
_init_g_at_Bazz_label_2:
# Case Node assign minim distance
lw $t0, 28($fp)
# Case Node assign minim distance
sw $t0, 24($fp)
# Case Node assign minim_index index
lw $t0, 16($fp)
# Case Node assign minim_index index
sw $t0, 20($fp)
# Case Node goto start_label
j _init_g_at_Bazz_label_1
# Case Node end label
_init_g_at_Bazz_label_3:
# Case Node equal minim_cond minim -2
lw $t0, 24($fp)
# Case Node equal minim_cond minim -2
li $t1, -2
# Case Node equal minim_cond minim -2
seq $t2, $t0, $t1
# Case Node equal minim_cond minim -2
sw $t2, 44($fp)
# Case Node gotoif minim_cond abort_label
lw $t0, 44($fp)
# Case Node gotoif minim_cond abort_label
bne $t0, $zero, _init_g_at_Bazz_label_0
# Case Node get_index array_types minim_index
lw $t0, 20($fp)
# Case Node get_index array_types minim_index
li $t2, 4
# Case Node get_index array_types minim_index
mul $t2, $t2, $t0
# Case Node get_index array_types minim_index
lw $t1, 12($fp)
# Case Node get_index array_types minim_index
add $t1, $t1, $t2
# Case Node get_index array_types minim_index
lw $t2, 0($t1)
# Case Node get_index array_types minim_index
sw $t2, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
la $t0, Bazz
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_g_at_Bazz_label_5
# Check Node
lw $t0, 80($fp)
# Check Node
sw $t0, 52($fp)
# Instantiate Node
la $a0, Foo
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 56($fp)
# Instantiate Node
lw $t0, 56($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Foo_type
# Instantiate Node
sw $v0, 56($fp)
# Case Node assign final_result result
lw $t0, 56($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_g_at_Bazz_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff8190316d8>
_init_g_at_Bazz_label_5:
# Case Node equal not_equal_types param.type.name current_type
la $t0, Razz
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_g_at_Bazz_label_6
# Check Node
lw $t0, 80($fp)
# Check Node
sw $t0, 60($fp)
# Instantiate Node
la $a0, Bar
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 64($fp)
# Instantiate Node
lw $t0, 64($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Bar_type
# Instantiate Node
sw $v0, 64($fp)
# Case Node assign final_result result
lw $t0, 64($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_g_at_Bazz_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff8190317f0>
_init_g_at_Bazz_label_6:
# Case Node equal not_equal_types param.type.name current_type
la $t0, Foo
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_g_at_Bazz_label_7
# Check Node
lw $t0, 80($fp)
# Check Node
sw $t0, 68($fp)
# Instantiate Node
la $a0, Razz
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 72($fp)
# Instantiate Node
lw $t0, 72($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Razz_type
# Instantiate Node
sw $v0, 72($fp)
# Case Node assign final_result result
lw $t0, 72($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_g_at_Bazz_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff819031748>
_init_g_at_Bazz_label_7:
# Case Node equal not_equal_types param.type.name current_type
la $t0, Bar
# Case Node equal not_equal_types param.type.name current_type
lw $t1, 32($fp)
# Case Node equal not_equal_types param.type.name current_type
seq $t2, $t0, $t1
# Case Node equal not_equal_types param.type.name current_type
sw $t2, 48($fp)
# Case Node not not_equal_types not_equal_types
lw $t0, 48($fp)
# Case Node not not_equal_types not_equal_types
seq $t0, $t0, $zero
# Case Node not not_equal_types not_equal_types
sw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
lw $t0, 48($fp)
# Case Node gotoif not_equal_types lbl.label
bne $t0, $zero, _init_g_at_Bazz_label_8
# Check Node
lw $t0, 80($fp)
# Check Node
sw $t0, 76($fp)
# Case Node assign final_result result
lw $t0, 76($fp)
# Case Node assign final_result result
sw $t0, 0($fp)
# Case Node goto final_label
j _init_g_at_Bazz_label_4
# Case Node end_label <cool.ast.cool_ast.CheckNode object at 0x7ff819031780>
_init_g_at_Bazz_label_8:
# Case Node abort label
_init_g_at_Bazz_label_0:
# Case Node abort
addi $v0, $zero, 10
# Case Node abort
syscall
# Case Node final_label
_init_g_at_Bazz_label_4:
# Attr Declaration Node
lw $t0, 80($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 8($t0)
# Init g at Bazz
lw $ra, 0($sp)
# Init g at Bazz
lw $fp, 4($sp)
# Init g at Bazz
addi $sp, $sp, 8
# Init g at Bazz
addi $sp, $sp, 84
# Init g at Bazz
jr $ra
# Init i at Bazz
__init_i_at_Bazz:
# Init i at Bazz
addi $sp, $sp, -8
# Init i at Bazz
move $t0, $sp
# Init i at Bazz
addi $sp, $sp, -8
# Init i at Bazz
sw $ra, 0($sp)
# Init i at Bazz
sw $fp, 4($sp)
# Init i at Bazz
move $fp, $t0
# Call Node
lw $t0, 8($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 8($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 12($t0)
# Init i at Bazz
lw $ra, 0($sp)
# Init i at Bazz
lw $fp, 4($sp)
# Init i at Bazz
addi $sp, $sp, 8
# Init i at Bazz
addi $sp, $sp, 12
# Init i at Bazz
jr $ra
# Program Node
function_printh_at_Bazz:
# Program Node
addi $sp, $sp, -16
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 16($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 4($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 32($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 20
# Program Node
jr $ra
# Program Node
function_doh_at_Bazz:
# Program Node
addi $sp, $sp, -20
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 20($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 4($fp)
# Var Declaration Node
lw $t0, 4($fp)
# Var Declaration Node
sw $t0, 0($fp)
# Variable Node
lw $t0, 20($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 12($fp)
# Plus Node
lw $t0, 12($fp)
# Plus Node
li $t1, 1
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 16($fp)
# Assign Node
lw $t0, 20($fp)
# Assign Node
lw $t1, 16($fp)
# Assign Node
sw $t1, 4($t0)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_abort_at_Object:
# Program Node
addi $sp, $sp, -24
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Assign object type
lw $t0, 24($fp)
# Assign object type
lw $t0, 0($t0)
# Assign object type
sw $t0, 0($fp)
# Get type name
lw $a0, 0($fp)
# Get type name
jal __type_name
# Get type name
sw $v0, 4($fp)
la $t0, data_10
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 8($fp)
la $t0, data_11
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 12($fp)
# Final abort message
lw $a0, 8($fp)
# Final abort message
lw $a1, 4($fp)
# Final abort message
jal __concat
# Final abort message
sw $v0, 16($fp)
# Final Final abort message
lw $a0, 16($fp)
# Final Final abort message
lw $a1, 12($fp)
# Final Final abort message
jal __concat
# Final Final abort message
sw $v0, 20($fp)
# Print abort info
lw $a0, 20($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Abort Object
addi $v0, $zero, 10
# Abort Object
syscall
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 28
# Program Node
jr $ra
# Program Node
function_type_name_at_Object:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Object Type Name Node
lw $t0, 4($fp)
# Object Type Name Node
lw $t0, 0($t0)
# Object Type Name Node
sw $t0, 0($fp)
# Object Type Name Node
lw $a0, 0($fp)
# Object Type Name Node
jal __type_name
# Object Type Name Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_copy_at_Object:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Object Copy Node
lw $a0, 4($fp)
# Object Copy Node
jal __copy
# Object Copy Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Init a at Main
__init_a_at_Main:
# Init a at Main
addi $sp, $sp, -4
# Init a at Main
move $t0, $sp
# Init a at Main
addi $sp, $sp, -8
# Init a at Main
sw $ra, 0($sp)
# Init a at Main
sw $fp, 4($sp)
# Init a at Main
move $fp, $t0
# Instantiate Node
la $a0, Bazz
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Bazz_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 4($t0)
# Init a at Main
lw $ra, 0($sp)
# Init a at Main
lw $fp, 4($sp)
# Init a at Main
addi $sp, $sp, 8
# Init a at Main
addi $sp, $sp, 8
# Init a at Main
jr $ra
# Init b at Main
__init_b_at_Main:
# Init b at Main
addi $sp, $sp, -4
# Init b at Main
move $t0, $sp
# Init b at Main
addi $sp, $sp, -8
# Init b at Main
sw $ra, 0($sp)
# Init b at Main
sw $fp, 4($sp)
# Init b at Main
move $fp, $t0
# Instantiate Node
la $a0, Foo
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Foo_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 8($t0)
# Init b at Main
lw $ra, 0($sp)
# Init b at Main
lw $fp, 4($sp)
# Init b at Main
addi $sp, $sp, 8
# Init b at Main
addi $sp, $sp, 8
# Init b at Main
jr $ra
# Init c at Main
__init_c_at_Main:
# Init c at Main
addi $sp, $sp, -4
# Init c at Main
move $t0, $sp
# Init c at Main
addi $sp, $sp, -8
# Init c at Main
sw $ra, 0($sp)
# Init c at Main
sw $fp, 4($sp)
# Init c at Main
move $fp, $t0
# Instantiate Node
la $a0, Razz
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Razz_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 12($t0)
# Init c at Main
lw $ra, 0($sp)
# Init c at Main
lw $fp, 4($sp)
# Init c at Main
addi $sp, $sp, 8
# Init c at Main
addi $sp, $sp, 8
# Init c at Main
jr $ra
# Init d at Main
__init_d_at_Main:
# Init d at Main
addi $sp, $sp, -4
# Init d at Main
move $t0, $sp
# Init d at Main
addi $sp, $sp, -8
# Init d at Main
sw $ra, 0($sp)
# Init d at Main
sw $fp, 4($sp)
# Init d at Main
move $fp, $t0
# Instantiate Node
la $a0, Bar
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Bar_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 16($t0)
# Init d at Main
lw $ra, 0($sp)
# Init d at Main
lw $fp, 4($sp)
# Init d at Main
addi $sp, $sp, 8
# Init d at Main
addi $sp, $sp, 8
# Init d at Main
jr $ra
# Program Node
function_main_at_Main:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Node
la $t0, data_12
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Class Declaration Node
__init_Object_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Object
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_String_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, String
sw $t1, 0($t0)
la $t1, __empty_string
sw $t1, 4($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Bool_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Bool
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Int_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Int
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_IO_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, IO
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Foo_type:
# Class Declaration Node
addi $sp, $sp, -20
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 20($fp)
la $t1, Foo
sw $t1, 0($t0)
# arg node
lw $t0, 20($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_h_at_Bazz
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 20($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_g_at_Bazz
# Initialize arg function
sw $v0, 4($fp)
# arg node
lw $t0, 20($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_i_at_Bazz
# Initialize arg function
sw $v0, 8($fp)
# arg node
lw $t0, 20($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_a_at_Foo
# Initialize arg function
sw $v0, 12($fp)
# arg node
lw $t0, 20($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_b_at_Foo
# Initialize arg function
sw $v0, 16($fp)
# return node
lw $v0, 20($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 24
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Bar_type:
# Class Declaration Node
addi $sp, $sp, -36
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 36($fp)
la $t1, Bar
sw $t1, 0($t0)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_h_at_Bazz
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_g_at_Bazz
# Initialize arg function
sw $v0, 4($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_i_at_Bazz
# Initialize arg function
sw $v0, 8($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_a_at_Foo
# Initialize arg function
sw $v0, 12($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_b_at_Foo
# Initialize arg function
sw $v0, 16($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_e_at_Razz
# Initialize arg function
sw $v0, 20($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_f_at_Razz
# Initialize arg function
sw $v0, 24($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_c_at_Bar
# Initialize arg function
sw $v0, 28($fp)
# arg node
lw $t0, 36($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_d_at_Bar
# Initialize arg function
sw $v0, 32($fp)
# return node
lw $v0, 36($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 40
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Razz_type:
# Class Declaration Node
addi $sp, $sp, -28
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 28($fp)
la $t1, Razz
sw $t1, 0($t0)
# arg node
lw $t0, 28($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_h_at_Bazz
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 28($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_g_at_Bazz
# Initialize arg function
sw $v0, 4($fp)
# arg node
lw $t0, 28($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_i_at_Bazz
# Initialize arg function
sw $v0, 8($fp)
# arg node
lw $t0, 28($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_a_at_Foo
# Initialize arg function
sw $v0, 12($fp)
# arg node
lw $t0, 28($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_b_at_Foo
# Initialize arg function
sw $v0, 16($fp)
# arg node
lw $t0, 28($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_e_at_Razz
# Initialize arg function
sw $v0, 20($fp)
# arg node
lw $t0, 28($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_f_at_Razz
# Initialize arg function
sw $v0, 24($fp)
# return node
lw $v0, 28($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 32
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Bazz_type:
# Class Declaration Node
addi $sp, $sp, -12
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 12($fp)
la $t1, Bazz
sw $t1, 0($t0)
# arg node
lw $t0, 12($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_h_at_Bazz
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 12($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_g_at_Bazz
# Initialize arg function
sw $v0, 4($fp)
# arg node
lw $t0, 12($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_i_at_Bazz
# Initialize arg function
sw $v0, 8($fp)
# return node
lw $v0, 12($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 16
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Main_type:
# Class Declaration Node
addi $sp, $sp, -16
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 16($fp)
la $t1, Main
sw $t1, 0($t0)
# arg node
lw $t0, 16($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_a_at_Main
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 16($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_b_at_Main
# Initialize arg function
sw $v0, 4($fp)
# arg node
lw $t0, 16($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_c_at_Main
# Initialize arg function
sw $v0, 8($fp)
# arg node
lw $t0, 16($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_d_at_Main
# Initialize arg function
sw $v0, 12($fp)
# return node
lw $v0, 16($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 20
# Class Declaration Node
jr $ra
.data 
data_0: .asciiz "Object"
data_1: .asciiz "String"
data_2: .asciiz "Bool"
data_3: .asciiz "Int"
data_4: .asciiz "IO"
data_5: .asciiz "Foo"
data_6: .asciiz "Bar"
data_7: .asciiz "Razz"
data_8: .asciiz "Bazz"
data_9: .asciiz "Main"
data_10: .asciiz "Abort called from class "
data_11: .asciiz "\n"
data_12: .asciiz "do nothing"
__empty_string: .asciiz ""
# Program Node
Object: .word 0, 4, data_0, __init_Object_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Program Node
String: .word Object, 4, data_1, __init_String_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_length_at_String, function_concat_at_String, function_substr_at_String
# Program Node
Bool: .word Object, 4, data_2, __init_Bool_type, function_abort_at_Bool, function_type_name_at_Bool, function_copy_at_Object
# Program Node
Int: .word Object, 4, data_3, __init_Int_type, function_abort_at_Int, function_type_name_at_Int, function_copy_at_Object
# Program Node
IO: .word Object, 4, data_4, __init_IO_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Program Node
Foo: .word Bazz, 24, data_5, __init_Foo_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_h_at_Bazz, __init_g_at_Bazz, __init_i_at_Bazz, function_printh_at_Bazz, function_doh_at_Foo, __init_a_at_Foo, __init_b_at_Foo
# Program Node
Bar: .word Razz, 40, data_6, __init_Bar_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_h_at_Bazz, __init_g_at_Bazz, __init_i_at_Bazz, function_printh_at_Bazz, function_doh_at_Foo, __init_a_at_Foo, __init_b_at_Foo, __init_e_at_Razz, __init_f_at_Razz, __init_c_at_Bar, __init_d_at_Bar
# Program Node
Razz: .word Foo, 32, data_7, __init_Razz_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_h_at_Bazz, __init_g_at_Bazz, __init_i_at_Bazz, function_printh_at_Bazz, function_doh_at_Foo, __init_a_at_Foo, __init_b_at_Foo, __init_e_at_Razz, __init_f_at_Razz
# Program Node
Bazz: .word IO, 16, data_8, __init_Bazz_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_h_at_Bazz, __init_g_at_Bazz, __init_i_at_Bazz, function_printh_at_Bazz, function_doh_at_Bazz
# Program Node
Main: .word Object, 20, data_9, __init_Main_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, __init_a_at_Main, __init_b_at_Main, __init_c_at_Main, __init_d_at_Main, function_main_at_Main