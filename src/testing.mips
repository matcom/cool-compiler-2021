# Genereted MIPS
.text
j main
__get_ra:
move $v0, $ra
addi $v0, $v0, 8
jr $ra
__copy:
move $t0, $a0
lw $t1, 0($t0)
lw $a0, 4($t1)
li $v0, 9
syscall
move $t1, $a0
srl $t1, $t1, 2
move $t3, $v0
__start_copy_loop:
ble $t1, $zero, __end_copy_loop
lw $t2, 0($t0)
sw $t2, 0($t3)
addi $t0, $t0, 4
addi $t3, $t3, 4
addi $t1, $t1, -1
j __start_copy_loop
__end_copy_loop:
jr $ra
__string_length:
# Actual String address
lw $a0, 4($a0)
# v0 = current length
li $v0, 0
__string_length_start_loop:
lb $t0, 0($a0)
beq $t0, $zero, __string_length_end_loop
addi $v0, $v0, 1
addi $a0, $a0, 1
j __string_length_start_loop
__string_length_end_loop:
jr $ra
__string_substring:
# Save arguments
addi $sp, $sp, -16
# Save arguments
sw $a0, 0($sp)
# Save arguments
sw $a1, 4($sp)
# Save arguments
sw $a2, 8($sp)
# Save arguments
sw $ra, 12($sp)
# $v0 = length of string
jal __string_length
# Restore arguments
lw $a0, 0($sp)
# Restore arguments
lw $a1, 4($sp)
# Restore arguments
lw $a2, 8($sp)
# Restore arguments
lw $ra, 12($sp)
# Restore arguments
addi $sp, $sp, 16
# Actual String address
lw $a0, 4($a0)
# If index >= length(string) then abort
bge $a1, $v0, __string_substring_abort
# t0 = index + length
add $t0, $a1, $a2
# If index + length >= length(string) then abort
bgt $t0, $v0, __string_substring_abort
# If 0 < 0 then abort
blt $a2, $zero, __string_substring_abort
# Saving the string address
move $t1, $a0
# a0 = length + 1. Extra space for null character
addi $a0, $a2, 1
li $v0, 9
syscall
# Saving the new string address
move $t2, $v0
# Removing the last null space from copy
addi $a0, $a0, -1
# Advance index positions in original string
add $t1, $t1, $a1
__string_substring_start_copy:
ble $a0, $zero, __string_substring_end_copy
lb $t3, 0($t1)
sb $t3, 0($t2)
addi $t1, $t1, 1
addi $t2, $t2, 1
addi $a0, $a0, -1
j __string_substring_start_copy
__string_substring_end_copy:
# Saving String Address
move $v1, $v0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $v1, 4($v0)
# Return the address of the new String
jr $ra
__string_substring_abort:
addi $v0, $zero, 10
syscall
__type_name:
# $t0 = type name address
lw $t0, 8($a0)
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Return the address of the String
jr $ra
__concat:
addi $sp, $sp, -12
sw $a0, 0($sp)
sw $a1, 4($sp)
sw $ra, 8($sp)
jal __string_length
lw $a0, 0($sp)
lw $a1, 4($sp)
lw $ra, 8($sp)
addi $sp, $sp, 12
move $t1, $a0
move $a0, $a1
move $a1, $t1
move $t0, $v0
addi $sp, $sp, -16
sw $a0, 0($sp)
sw $a1, 4($sp)
sw $t0, 8($sp)
sw $ra, 12($sp)
jal __string_length
lw $a0, 0($sp)
lw $a1, 4($sp)
lw $t0, 8($sp)
lw $ra, 12($sp)
addi $sp, $sp, 16
move $t1, $a0
move $a0, $a1
move $a1, $t1
lw $a0, 4($a0)
lw $a1, 4($a1)
move $t1, $a0
add $t2, $v0, $t0
addi $a0, $t2, 1
move $t2, $v0
li $v0, 9
syscall
# Save string address
move $v1, $v0
__concat_string1_copy_start_copy:
ble $t0, $zero, __concat_string1_copy_end_copy
lb $t3, 0($t1)
sb $t3, 0($v1)
addi $t1, $t1, 1
addi $v1, $v1, 1
addi $t0, $t0, -1
j __concat_string1_copy_start_copy
__concat_string1_copy_end_copy:
__concat_string2_copy_start_copy:
ble $t2, $zero, __concat_string2_copy_end_copy
lb $t3, 0($a1)
sb $t3, 0($v1)
addi $a1, $a1, 1
addi $v1, $v1, 1
addi $t2, $t2, -1
j __concat_string2_copy_start_copy
__concat_string2_copy_end_copy:
sb $zero, 0($v1)
# Save string address
move $v1, $v0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $v1, 4($v0)
# Returns the concatenated string instance in v0
jr $ra
# Program Node
main:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Instantiate Node
la $a0, Main
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 8($fp)
# Instantiate Node
lw $t0, 8($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Main_type
# Instantiate Node
sw $v0, 8($fp)
lw $t0, 8($fp)
addi $sp, $sp, -4
sw $t0, 0($sp)
# Program Node
jal function_main_at_Main
# Program Node
sw $v0, 4($fp)
# Program Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 12
# Program Node
jr $ra
# Program Node
type_distance:
# Program Node
addi $sp, $sp, -16
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Program Node
sw $zero, 12($fp)
# Program Node
li $t0, 0
# Program Node
sw $t0, 0($fp)
# Program Node
distance_label_0:
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t1, 16($fp)
seq $t2, $t0, $t1
# Program Node
sw $t2, 4($fp)
# Program Node
lw $t0, 4($fp)
# Program Node
bne $t0, $zero, distance_label_1
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t0, 0($t0)
# Program Node
sw $t0, 20($fp)
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t1, 12($fp)
seq $t2, $t0, $t1
# Program Node
sw $t2, 8($fp)
# Program Node
lw $t0, 8($fp)
# Program Node
bne $t0, $zero, distance_label_2
# Program Node
lw $t0, 0($fp)
# Program Node
li $t1, 1
add $t2, $t0, $t1
# Program Node
sw $t2, 0($fp)
# Program Node
j distance_label_0
# Program Node
distance_label_2:
# Program Node
li $t0, -1
# Program Node
sw $t0, 0($fp)
# Program Node
distance_label_1:
# Program Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Class Declaration Node
__init_Object_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Object
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
function_abort_at_Object:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Object Abort Node
addi $v0, $zero, 10
# Object Abort Node
syscall
# Func Declaration Node
li $v0, 0
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
function_type_name_at_Object:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Object Type Name Node
lw $t0, 4($fp)
# Object Type Name Node
lw $t0, 0($t0)
# Object Type Name Node
sw $t0, 0($fp)
# Object Type Name Node
lw $a0, 0($fp)
# Object Type Name Node
jal __type_name
# Object Type Name Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
function_copy_at_Object:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Object Copy Node
lw $a0, 4($fp)
# Object Copy Node
jal __copy
# Object Copy Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_String_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, String
sw $t1, 0($t0)
la $t1, __empty_string
sw $t1, 4($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
function_length_at_String:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# String Length Node
lw $a0, 4($fp)
# String Length Node
jal __string_length
# String Length Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
function_concat_at_String:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# String Concat Node
lw $a0, 8($fp)
# String Concat Node
lw $a1, 4($fp)
# String Concat Node
jal __concat
# String Concat Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 12
# Class Declaration Node
jr $ra
# Class Declaration Node
function_substr_at_String:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# String Substring Node
lw $a0, 12($fp)
# String Substring Node
lw $a1, 8($fp)
# String Substring Node
lw $a2, 4($fp)
# String Substring Node
jal __string_substring
# String Substring Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 16
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Bool_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Bool
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Int_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Int
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_IO_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, IO
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
function_out_string_at_IO:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# IO Out String Node
lw $a0, 0($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Func Declaration Node
lw $v0, 4($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
function_out_int_at_IO:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# IO Out Int Node
lw $a0, 0($fp)
# IO Out Int Node
addi $v0, $zero, 1
# IO Out Int Node
syscall
# Func Declaration Node
lw $v0, 4($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
function_in_string_at_IO:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# a1 = Allocated length Save the length in a1
li $a1, 1024
# Allocates 1024 bytes and return the address un v0
move $a0, $a1
# Allocates 1024 bytes and return the address un v0
li $v0, 9
# Allocates 1024 bytes and return the address un v0
syscall
# a0 = v0 Save the address in a0
move $a0, $v0
# 8 System call code for read string
addi $v0, $zero, 8
# Fills the address in a0 with the string
syscall
# a1 = a0 Save the address in a1
move $a1, $a0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $a1, 4($v0)
# Save the address in the final destination
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
function_in_int_at_IO:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# IO In Int Node
addi $v0, $zero, 5
# IO In Int Node
syscall
# IO In Int Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_A_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, A
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_B_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, B
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Main_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Main
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
function_main_at_Main:
# Class Declaration Node
addi $sp, $sp, -64
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Instantiate Node
la $a0, B
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_B_type
# Instantiate Node
sw $v0, 0($fp)
# Case Node typeof
lw $t0, 0($fp)
# Case Node typeof
lw $t0, 0($t0)
# Case Node typeof
sw $t0, 4($fp)
# Case Node array declaration
li $a0, 8
# Case Node array declaration
li $v0, 9
# Case Node array declaration
syscall
# Case Node array declaration
sw $v0, 8($fp)
# Case Node array setindex
li $t2, 0
# Case Node array setindex
la $t3, A
# Case Node array setindex
lw $t1, 8($fp)
# Case Node array setindex
add $t1, $t1, $t2
# Case Node array setindex
sw $t3, 0($t1)
# Case Node array setindex
li $t2, 4
# Case Node array setindex
la $t3, B
# Case Node array setindex
lw $t1, 8($fp)
# Case Node array setindex
add $t1, $t1, $t2
# Case Node array setindex
sw $t3, 0($t1)
# Case Node assign index
li $t0, -1
# Case Node assign index
sw $t0, 12($fp)
# Case Node assign minim
li $t0, -2
# Case Node assign minim
sw $t0, 20($fp)
# Case Node start label
main_at_Main_label_0:
# Case Node plus index
lw $t0, 12($fp)
# Case Node plus index
li $t1, 1
add $t2, $t0, $t1
# Case Node plus index
sw $t2, 12($fp)
# Case Node equal stop for
lw $t0, 12($fp)
# Case Node equal stop for
li $t1, 2
seq $t2, $t0, $t1
# Case Node equal stop for
sw $t2, 32($fp)
# Case Node goto if stop for
lw $t0, 32($fp)
# Case Node goto if stop for
bne $t0, $zero, main_at_Main_label_2
# Case Node get index
lw $t0, 12($fp)
# Case Node get index
li $t2, 4
# Case Node get index
mul $t2, $t2, $t0
# Case Node get index
lw $t1, 8($fp)
# Case Node get index
add $t1, $t1, $t2
# Case Node get index
lw $t2, 0($t1)
# Case Node get index
sw $t2, 28($fp)
# Case Node arg type value
lw $t0, 4($fp)
# Case Node arg type value
addi $sp, $sp, -4
# Case Node arg type value
sw $t0, 0($sp)
# Case Node arg current type
lw $t0, 28($fp)
# Case Node arg current type
addi $sp, $sp, -4
# Case Node arg current type
sw $t0, 0($sp)
# Case Node static call type distance
jal type_distance
# Case Node static call type distance
sw $v0, 24($fp)
# Case Node equal not valid distance
lw $t0, 24($fp)
# Case Node equal not valid distance
li $t1, -1
seq $t2, $t0, $t1
# Case Node equal not valid distance
sw $t2, 36($fp)
# Case Node goto if not valid distance
lw $t0, 36($fp)
# Case Node goto if not valid distance
bne $t0, $zero, main_at_Main_label_0
# Case Node equal minim cond
lw $t0, 20($fp)
# Case Node equal minim cond
li $t1, -2
seq $t2, $t0, $t1
# Case Node equal minim cond
sw $t2, 40($fp)
# Case Node goto if minim cond
lw $t0, 40($fp)
# Case Node goto if minim cond
bne $t0, $zero, main_at_Main_label_1
# Case Node greater minim cond
lw $t0, 20($fp)
# Case Node greater minim cond
lw $t1, 24($fp)
sgt $t2, $t0, $t1
# Case Node greater minim cond
sw $t2, 40($fp)
# Case Node goto if minim cond
lw $t0, 40($fp)
# Case Node goto if minim cond
bne $t0, $zero, main_at_Main_label_1
# Case Node goto start label
j main_at_Main_label_0
# Case Node minim label
main_at_Main_label_1:
# Case Node assign minim
lw $t0, 24($fp)
# Case Node assign minim
sw $t0, 20($fp)
# Case Node assign minim index
lw $t0, 12($fp)
# Case Node assign minim index
sw $t0, 16($fp)
# Case Node goto start label
j main_at_Main_label_0
# Case Node end label
main_at_Main_label_2:
# Case Node equal minim cond
lw $t0, 20($fp)
# Case Node equal minim cond
li $t1, -2
seq $t2, $t0, $t1
# Case Node equal minim cond
sw $t2, 40($fp)
# Case Node goto if minim cond
lw $t0, 40($fp)
# Case Node goto if minim cond
bne $t0, $zero, main_at_Main_label_3
# Case Node get index
lw $t0, 16($fp)
# Case Node get index
li $t2, 4
# Case Node get index
mul $t2, $t2, $t0
# Case Node get index
lw $t1, 8($fp)
# Case Node get index
add $t1, $t1, $t2
# Case Node get index
lw $t2, 0($t1)
# Case Node get index
sw $t2, 28($fp)
# Case Node equal not equal types
la $t0, A
# Case Node equal not equal types
lw $t1, 28($fp)
seq $t2, $t0, $t1
# Case Node equal not equal types
sw $t2, 44($fp)
# Case Node not not equal types
lw $t0, 44($fp)
# Case Node not not equal types
nor $t0, $t0, $t0
# Case Node not not equal types
sw $t0, 44($fp)
# Case Node goto if not equal types
lw $t0, 44($fp)
# Case Node goto if not equal types
bne $t0, $zero, main_at_Main_label_5
# Check Node
lw $t0, 0($fp)
# Check Node
sw $t0, 48($fp)
# Case Node assign value
li $t0, 1
# Case Node assign value
sw $t0, 0($fp)
# Case Node goto final label
j main_at_Main_label_4
# Case Node
main_at_Main_label_5:
# Case Node equal not equal types
la $t0, B
# Case Node equal not equal types
lw $t1, 28($fp)
seq $t2, $t0, $t1
# Case Node equal not equal types
sw $t2, 44($fp)
# Case Node not not equal types
lw $t0, 44($fp)
# Case Node not not equal types
nor $t0, $t0, $t0
# Case Node not not equal types
sw $t0, 44($fp)
# Case Node goto if not equal types
lw $t0, 44($fp)
# Case Node goto if not equal types
bne $t0, $zero, main_at_Main_label_6
# Check Node
lw $t0, 0($fp)
# Check Node
sw $t0, 52($fp)
# Case Node assign value
li $t0, 2
# Case Node assign value
sw $t0, 0($fp)
# Case Node goto final label
j main_at_Main_label_4
# Case Node
main_at_Main_label_6:
# Case Node abort label
main_at_Main_label_3:
# Case Node abort
addi $v0, $zero, 10
# Case Node abort
syscall
# Case Node final label
main_at_Main_label_4:
# Call Node
lw $t0, 64($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 64($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 60($fp)
# Call Node
lw $t0, 60($fp)
# Call Node
lw $t0, 32($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 56($fp)
# Func Declaration Node
lw $v0, 56($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 68
# Class Declaration Node
jr $ra
.data 
data_0: .asciiz "Object"
data_1: .asciiz "String"
data_2: .asciiz "Bool"
data_3: .asciiz "Int"
data_4: .asciiz "IO"
data_5: .asciiz "A"
data_6: .asciiz "B"
data_7: .asciiz "Main"
__empty_string: .asciiz ""
# Program Node
Object: .word 0, 4, data_0, __init_Object_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Program Node
String: .word Object, 4, data_1, __init_String_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_length_at_String, function_concat_at_String, function_substr_at_String
# Program Node
Bool: .word Object, 4, data_2, __init_Bool_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Program Node
Int: .word Object, 4, data_3, __init_Int_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Program Node
IO: .word Object, 4, data_4, __init_IO_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Program Node
A: .word Object, 4, data_5, __init_A_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Program Node
B: .word A, 4, data_6, __init_B_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Program Node
Main: .word IO, 4, data_7, __init_Main_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, function_main_at_Main
