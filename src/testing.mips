# Genereted MIPS
.text 
__get_ra:
move $v0, $ra
addi $v0, $v0, 8
jr $ra
__copy:
move $t0, $a0
lw $t1, 0($t0)
lw $a0, 4($t1)
li $v0, 9
syscall
move $t1, $a0
srl $t1, $t1, 2
move $t3, $v0
__start_copy_loop:
ble $t1, $zero, __end_copy_loop
lw $t2, 0($t0)
sw $t2, 0($t3)
addi $t0, $t0, 4
addi $t3, $t3, 4
addi $t1, $t1, -1
j __start_copy_loop
__end_copy_loop:
jr $ra
__string_length:
# Actual String address
lw $a0, 4($a0)
# v0 = current length
li $v0, 0
__string_length_start_loop:
lb $t0, 0($a0)
beq $t0, $zero, __string_length_end_loop
addi $v0, $v0, 1
addi $a0, $a0, 1
j __string_length_start_loop
__string_length_end_loop:
jr $ra
__string_substring:
# Save arguments
addi $sp, $sp, -16
# Save arguments
sw $a0, 0($sp)
# Save arguments
sw $a1, 4($sp)
# Save arguments
sw $a2, 8($sp)
# Save arguments
sw $ra, 12($sp)
# $v0 = length of string
jal __string_length
# Restore arguments
lw $a0, 0($sp)
# Restore arguments
lw $a1, 4($sp)
# Restore arguments
lw $a2, 8($sp)
# Restore arguments
lw $ra, 12($sp)
# Restore arguments
addi $sp, $sp, 16
# Actual String address
lw $a0, 4($a0)
# If index >= length(string) then abort
bge $a1, $v0, __string_substring_abort
# t0 = index + length
add $t0, $a1, $a2
# If index + length >= length(string) then abort
bgt $t0, $v0, __string_substring_abort
# If 0 < 0 then abort
blt $a2, $zero, __string_substring_abort
# Saving the string address
move $t1, $a0
# a0 = length + 1. Extra space for null character
addi $a0, $a2, 1
li $v0, 9
syscall
# Saving the new string address
move $t2, $v0
# Removing the last null space from copy
addi $a0, $a0, -1
# Advance index positions in original string
add $t1, $t1, $a1
__string_substring_start_copy:
ble $a0, $zero, __string_substring_end_copy
lb $t3, 0($t1)
sb $t3, 0($t2)
addi $t1, $t1, 1
addi $t2, $t2, 1
addi $a0, $a0, -1
j __string_substring_start_copy
__string_substring_end_copy:
# Saving String Address
move $v1, $v0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $v1, 4($v0)
# Return the address of the new String
jr $ra
__string_substring_abort:
addi $v0, $zero, 10
syscall
__type_name:
# $t0 = type name address
lw $t0, 8($a0)
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Return the address of the String
jr $ra
__concat:
addi $sp, $sp, -12
sw $a0, 0($sp)
sw $a1, 4($sp)
sw $ra, 8($sp)
jal __string_length
lw $a0, 0($sp)
lw $a1, 4($sp)
lw $ra, 8($sp)
addi $sp, $sp, 12
move $t1, $a0
move $a0, $a1
move $a1, $t1
move $t0, $v0
addi $sp, $sp, -16
sw $a0, 0($sp)
sw $a1, 4($sp)
sw $t0, 8($sp)
sw $ra, 12($sp)
jal __string_length
lw $a0, 0($sp)
lw $a1, 4($sp)
lw $t0, 8($sp)
lw $ra, 12($sp)
addi $sp, $sp, 16
move $t1, $a0
move $a0, $a1
move $a1, $t1
lw $a0, 4($a0)
lw $a1, 4($a1)
move $t1, $a0
add $t2, $v0, $t0
addi $a0, $t2, 1
move $t2, $v0
li $v0, 9
syscall
# Save string address
move $v1, $v0
__concat_string1_copy_start_copy:
ble $t0, $zero, __concat_string1_copy_end_copy
lb $t3, 0($t1)
sb $t3, 0($v1)
addi $t1, $t1, 1
addi $v1, $v1, 1
addi $t0, $t0, -1
j __concat_string1_copy_start_copy
__concat_string1_copy_end_copy:
__concat_string2_copy_start_copy:
ble $t2, $zero, __concat_string2_copy_end_copy
lb $t3, 0($a1)
sb $t3, 0($v1)
addi $a1, $a1, 1
addi $v1, $v1, 1
addi $t2, $t2, -1
j __concat_string2_copy_start_copy
__concat_string2_copy_end_copy:
sb $zero, 0($v1)
# Save string address
move $v1, $v0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $v1, 4($v0)
# Returns the concatenated string instance in v0
jr $ra
__string_equal:
# Actual String address
lw $t0, 4($a0)
# Actual String address
lw $t1, 4($a1)
__string_equal_start_loop:
# Load string1 char
lb $t2, 0($t0)
# Load string2 char
lb $t3, 0($t1)
# Equal chars?
seq $t4, $t2, $t3
# If not equal then
beq $t4, $zero, __string_equal_end_loop
# Both strings ended
beq $t2, $zero, __string_equal_end_loop
# Next char
addi $t0, $t0, 1
# Next char
addi $t1, $t1, 1
j __string_equal_start_loop
__string_equal_end_loop:
# Assign return value
move $v0, $t4
jr $ra
__object_equal:
# Compare obj by address
seq $v0, $a0, $a1
# Equal Address or Value obj are equal
bne $v0, $zero, __object_equal_end
# Check if first obj is null
seq $t0, $zero, $a0
# Set v0 to False and return
bne $t0, $zero, __object_equal_false_section
# Check if second obj is null
seq $t0, $zero, $a1
# Set v0 to False and return
bne $t0, $zero, __object_equal_false_section
# t0 = left object
move $t0, $a0
# t1 = right object
move $t1, $a1
# t0=left objType
lw $t0, 0($t0)
# t1=right objType
lw $t1, 0($t1)
# Loading String type address for comparison
la $t2, String
# t0 = left type == String
seq $t0, $t0, $t2
# t1 = right type == String
seq $t1, $t1, $t2
# Both types are equal to String
and $t0, $t0, $t1
# If not equal return 0
beq $t0, $zero, __object_equal_false_section
addi $sp, $sp, -12
sw $ra, 0($sp)
sw $a0, 4($sp)
sw $a1, 8($sp)
jal __string_equal
lw $ra, 0($sp)
lw $a0, 4($sp)
lw $a1, 8($sp)
addi $sp, $sp, 12
# Go to end
j __object_equal_end
# Do Obj cmp
__object_equal_false_section:
# Not equal objects
move $v0, $zero
# End cmp
__object_equal_end:
jr $ra
# Remove Final Char
__remove_last_char:
# Actual String address
lw $t0, 4($a0)
# Get current char
lb $t1, 0($t0)
# if char is null then return
beq $t1, $zero, __remove_last_char_return
# Initial loop
__remove_last_char_start:
# Get current char
lb $t1, 0($t0)
# if char is null then break
beq $t1, $zero, __remove_last_char_end
# Increment address
addi $t0, $t0, 1
j __remove_last_char_start
# End loop, removing last char
__remove_last_char_end:
# Back one char to last one
addi $t0, $t0, -1
# Store null character
sb $zero, 0($t0)
# Return, removing last char
__remove_last_char_return:
jr $ra
# Program Node
main:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Instantiate Node
la $a0, Main
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 8($fp)
# Instantiate Node
lw $t0, 8($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Main_type
# Instantiate Node
sw $v0, 8($fp)
lw $t0, 8($fp)
addi $sp, $sp, -4
sw $t0, 0($sp)
# Program Node
jal function_main_at_Main
# Program Node
sw $v0, 4($fp)
# Program Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 12
# Program Node
jr $ra
# Program Node
type_distance:
# Program Node
addi $sp, $sp, -16
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Program Node
sw $zero, 12($fp)
# Program Node
li $t0, 0
# Program Node
sw $t0, 0($fp)
# Program Node
distance_label_0:
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t1, 16($fp)
# Program Node
seq $t2, $t0, $t1
# Program Node
sw $t2, 4($fp)
# Program Node
lw $t0, 4($fp)
# Program Node
bne $t0, $zero, distance_label_1
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t0, 0($t0)
# Program Node
sw $t0, 20($fp)
# Program Node
lw $t0, 20($fp)
# Program Node
lw $t1, 12($fp)
# Program Node
seq $t2, $t0, $t1
# Program Node
sw $t2, 8($fp)
# Program Node
lw $t0, 8($fp)
# Program Node
bne $t0, $zero, distance_label_2
# Program Node
lw $t0, 0($fp)
# Program Node
li $t1, 1
# Program Node
add $t2, $t0, $t1
# Program Node
sw $t2, 0($fp)
# Program Node
j distance_label_0
# Program Node
distance_label_2:
# Program Node
li $t0, -1
# Program Node
sw $t0, 0($fp)
# Program Node
distance_label_1:
# Program Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_length_at_String:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Length Node
lw $a0, 4($fp)
# String Length Node
jal __string_length
# String Length Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_concat_at_String:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Concat Node
lw $a0, 8($fp)
# String Concat Node
lw $a1, 4($fp)
# String Concat Node
jal __concat
# String Concat Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 12
# Program Node
jr $ra
# Program Node
function_substr_at_String:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Substring Node
lw $a0, 12($fp)
# String Substring Node
lw $a1, 8($fp)
# String Substring Node
lw $a2, 4($fp)
# String Substring Node
jal __string_substring
# String Substring Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_abort_at_Bool:
# Program Node
addi $sp, $sp, -20
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_2
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
la $t0, data_15
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 4($fp)
la $t0, data_16
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 8($fp)
# Final abort message
lw $a0, 4($fp)
# Final abort message
lw $a1, 0($fp)
# Final abort message
jal __concat
# Final abort message
sw $v0, 12($fp)
# Final Final abort message
lw $a0, 12($fp)
# Final Final abort message
lw $a1, 8($fp)
# Final Final abort message
jal __concat
# Final Final abort message
sw $v0, 16($fp)
# Print abort info
lw $a0, 16($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Abort Bool
addi $v0, $zero, 10
# Abort Bool
syscall
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_type_name_at_Bool:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_2
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_abort_at_Int:
# Program Node
addi $sp, $sp, -20
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_3
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
la $t0, data_15
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 4($fp)
la $t0, data_16
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 8($fp)
# Final abort message
lw $a0, 4($fp)
# Final abort message
lw $a1, 0($fp)
# Final abort message
jal __concat
# Final abort message
sw $v0, 12($fp)
# Final Final abort message
lw $a0, 12($fp)
# Final Final abort message
lw $a1, 8($fp)
# Final Final abort message
jal __concat
# Final Final abort message
sw $v0, 16($fp)
# Print abort info
lw $a0, 16($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Abort Int
addi $v0, $zero, 10
# Abort Int
syscall
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_type_name_at_Int:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
la $t0, data_3
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Init vertices at Graph
__init_vertices_at_Graph:
# Init vertices at Graph
addi $sp, $sp, -4
# Init vertices at Graph
move $t0, $sp
# Init vertices at Graph
addi $sp, $sp, -8
# Init vertices at Graph
sw $ra, 0($sp)
# Init vertices at Graph
sw $fp, 4($sp)
# Init vertices at Graph
move $fp, $t0
# Instantiate Node
la $a0, VList
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_VList_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 4($t0)
# Init vertices at Graph
lw $ra, 0($sp)
# Init vertices at Graph
lw $fp, 4($sp)
# Init vertices at Graph
addi $sp, $sp, 8
# Init vertices at Graph
addi $sp, $sp, 8
# Init vertices at Graph
jr $ra
# Init edges at Graph
__init_edges_at_Graph:
# Init edges at Graph
addi $sp, $sp, -4
# Init edges at Graph
move $t0, $sp
# Init edges at Graph
addi $sp, $sp, -8
# Init edges at Graph
sw $ra, 0($sp)
# Init edges at Graph
sw $fp, 4($sp)
# Init edges at Graph
move $fp, $t0
# Instantiate Node
la $a0, EList
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_EList_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 8($t0)
# Init edges at Graph
lw $ra, 0($sp)
# Init edges at Graph
lw $fp, 4($sp)
# Init edges at Graph
addi $sp, $sp, 8
# Init edges at Graph
addi $sp, $sp, 8
# Init edges at Graph
jr $ra
# Program Node
function_add_vertice_at_Graph:
# Program Node
addi $sp, $sp, -36
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Call Node
lw $t0, 36($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 36($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 52($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Variable Node
lw $t0, 40($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 12($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 20($fp)
# Call Node
lw $t0, 20($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 16($fp)
# Assign Node
lw $t0, 40($fp)
# Assign Node
lw $t1, 16($fp)
# Assign Node
sw $t1, 8($t0)
# Variable Node
lw $t0, 40($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 36($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 32($fp)
# Call Node
lw $t0, 32($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 28($fp)
# Assign Node
lw $t0, 40($fp)
# Assign Node
lw $t1, 28($fp)
# Assign Node
sw $t1, 4($t0)
# Func Declaration Node
lw $v0, 28($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 44
# Program Node
jr $ra
# Program Node
function_print_E_at_Graph:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 12($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 0($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 68($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_print_V_at_Graph:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 12($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 0($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Init num at Vertice
__init_num_at_Vertice:
# Init num at Vertice
addi $sp, $sp, 0
# Init num at Vertice
move $t0, $sp
# Init num at Vertice
addi $sp, $sp, -8
# Init num at Vertice
sw $ra, 0($sp)
# Init num at Vertice
sw $fp, 4($sp)
# Init num at Vertice
move $fp, $t0
# Attr Declaration Node
lw $t0, 0($fp)
# Attr Declaration Node
li $t1, 0
# Attr Declaration Node
sw $t1, 4($t0)
# Init num at Vertice
lw $ra, 0($sp)
# Init num at Vertice
lw $fp, 4($sp)
# Init num at Vertice
addi $sp, $sp, 8
# Init num at Vertice
addi $sp, $sp, 4
# Init num at Vertice
jr $ra
# Init out at Vertice
__init_out_at_Vertice:
# Init out at Vertice
addi $sp, $sp, -4
# Init out at Vertice
move $t0, $sp
# Init out at Vertice
addi $sp, $sp, -8
# Init out at Vertice
sw $ra, 0($sp)
# Init out at Vertice
sw $fp, 4($sp)
# Init out at Vertice
move $fp, $t0
# Instantiate Node
la $a0, EList
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_EList_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 8($t0)
# Init out at Vertice
lw $ra, 0($sp)
# Init out at Vertice
lw $fp, 4($sp)
# Init out at Vertice
addi $sp, $sp, 8
# Init out at Vertice
addi $sp, $sp, 8
# Init out at Vertice
jr $ra
# Program Node
function_outgoing_at_Vertice:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 4($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_number_at_Vertice:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 4($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_init_at_Vertice:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Assign Node
lw $t0, 8($fp)
# Assign Node
lw $t1, 4($fp)
# Assign Node
sw $t1, 4($t0)
# Func Declaration Node
lw $v0, 8($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 12
# Program Node
jr $ra
# Program Node
function_add_out_at_Vertice:
# Program Node
addi $sp, $sp, -16
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 20($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Assign Node
lw $t0, 20($fp)
# Assign Node
lw $t1, 8($fp)
# Assign Node
sw $t1, 8($t0)
# Func Declaration Node
lw $v0, 20($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 24
# Program Node
jr $ra
# Program Node
function_print_at_Vertice:
# Program Node
addi $sp, $sp, -28
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 4($fp)
# Call Node
lw $t0, 28($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 28($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 32($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 16($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 68($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 20($fp)
# Func Declaration Node
lw $v0, 20($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 32
# Program Node
jr $ra
# Init from at Edge
__init_from_at_Edge:
# Init from at Edge
addi $sp, $sp, 0
# Init from at Edge
move $t0, $sp
# Init from at Edge
addi $sp, $sp, -8
# Init from at Edge
sw $ra, 0($sp)
# Init from at Edge
sw $fp, 4($sp)
# Init from at Edge
move $fp, $t0
# Attr Declaration Node
lw $t0, 0($fp)
# Attr Declaration Node
li $t1, 0
# Attr Declaration Node
sw $t1, 4($t0)
# Init from at Edge
lw $ra, 0($sp)
# Init from at Edge
lw $fp, 4($sp)
# Init from at Edge
addi $sp, $sp, 8
# Init from at Edge
addi $sp, $sp, 4
# Init from at Edge
jr $ra
# Init to at Edge
__init_to_at_Edge:
# Init to at Edge
addi $sp, $sp, 0
# Init to at Edge
move $t0, $sp
# Init to at Edge
addi $sp, $sp, -8
# Init to at Edge
sw $ra, 0($sp)
# Init to at Edge
sw $fp, 4($sp)
# Init to at Edge
move $fp, $t0
# Attr Declaration Node
lw $t0, 0($fp)
# Attr Declaration Node
li $t1, 0
# Attr Declaration Node
sw $t1, 8($t0)
# Init to at Edge
lw $ra, 0($sp)
# Init to at Edge
lw $fp, 4($sp)
# Init to at Edge
addi $sp, $sp, 8
# Init to at Edge
addi $sp, $sp, 4
# Init to at Edge
jr $ra
# Init weight at Edge
__init_weight_at_Edge:
# Init weight at Edge
addi $sp, $sp, 0
# Init weight at Edge
move $t0, $sp
# Init weight at Edge
addi $sp, $sp, -8
# Init weight at Edge
sw $ra, 0($sp)
# Init weight at Edge
sw $fp, 4($sp)
# Init weight at Edge
move $fp, $t0
# Attr Declaration Node
lw $t0, 0($fp)
# Attr Declaration Node
li $t1, 0
# Attr Declaration Node
sw $t1, 12($t0)
# Init weight at Edge
lw $ra, 0($sp)
# Init weight at Edge
lw $fp, 4($sp)
# Init weight at Edge
addi $sp, $sp, 8
# Init weight at Edge
addi $sp, $sp, 4
# Init weight at Edge
jr $ra
# Program Node
function_init_at_Edge:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Assign Node
lw $t0, 16($fp)
# Assign Node
lw $t1, 12($fp)
# Assign Node
sw $t1, 4($t0)
# Assign Node
lw $t0, 16($fp)
# Assign Node
lw $t1, 8($fp)
# Assign Node
sw $t1, 8($t0)
# Assign Node
lw $t0, 16($fp)
# Assign Node
lw $t1, 4($fp)
# Assign Node
sw $t1, 12($t0)
# Func Declaration Node
lw $v0, 16($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 20
# Program Node
jr $ra
# Program Node
function_print_at_Edge:
# Program Node
addi $sp, $sp, -76
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Node
la $t0, data_17
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 4($fp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Variable Node
lw $t0, 76($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 16($fp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 32($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 20($fp)
# String Node
la $t0, data_18
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 28($fp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 28($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 36($fp)
# Call Node
lw $t0, 36($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 32($fp)
# Variable Node
lw $t0, 76($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 40($fp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 40($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 48($fp)
# Call Node
lw $t0, 48($fp)
# Call Node
lw $t0, 32($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 44($fp)
# String Node
la $t0, data_19
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 52($fp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 52($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 60($fp)
# Call Node
lw $t0, 60($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 56($fp)
# Variable Node
lw $t0, 76($fp)
# Variable Node
lw $t0, 12($t0)
# Variable Node
sw $t0, 64($fp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 64($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 72($fp)
# Call Node
lw $t0, 72($fp)
# Call Node
lw $t0, 32($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 68($fp)
# Func Declaration Node
lw $v0, 68($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 80
# Program Node
jr $ra
# Init car at EList
__init_car_at_EList:
# Init car at EList
addi $sp, $sp, -4
# Init car at EList
move $t0, $sp
# Init car at EList
addi $sp, $sp, -8
# Init car at EList
sw $ra, 0($sp)
# Init car at EList
sw $fp, 4($sp)
# Init car at EList
move $fp, $t0
# Instantiate Node
sw $zero, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 4($t0)
# Init car at EList
lw $ra, 0($sp)
# Init car at EList
lw $fp, 4($sp)
# Init car at EList
addi $sp, $sp, 8
# Init car at EList
addi $sp, $sp, 8
# Init car at EList
jr $ra
# Program Node
function_isNil_at_EList:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Func Declaration Node
li $v0, 1
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 4
# Program Node
jr $ra
# Program Node
function_head_at_EList:
# Program Node
addi $sp, $sp, -16
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 16($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Variable Node
lw $t0, 16($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 12($fp)
# Func Declaration Node
lw $v0, 12($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 20
# Program Node
jr $ra
# Program Node
function_tail_at_EList:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 16($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 12($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_cons_at_EList:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Instantiate Node
la $a0, ECons
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_ECons_type
# Instantiate Node
sw $v0, 0($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 76($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 20
# Program Node
jr $ra
# Program Node
function_append_at_EList:
# Program Node
addi $sp, $sp, -44
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Call Node
lw $t0, 48($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 48($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 48($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Conditional Node
lw $t0, 4($fp)
# Conditional Node
bne $t0, $zero, append_at_EList_label_0
# Call Node
lw $t0, 48($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 48($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 16($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 44($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 20($fp)
# Call Node
lw $t0, 48($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 48($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 32($fp)
# Call Node
lw $t0, 32($fp)
# Call Node
lw $t0, 52($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 28($fp)
# Call Node
lw $t0, 20($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 28($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 20($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 40($fp)
# Call Node
lw $t0, 40($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 36($fp)
# Conditional Node
lw $t0, 36($fp)
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
j append_at_EList_label_1
# Conditional Node
append_at_EList_label_0:
# Conditional Node
lw $t0, 44($fp)
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
append_at_EList_label_1:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 52
# Program Node
jr $ra
# Program Node
function_print_at_EList:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Node
la $t0, data_20
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Init cdr at ECons
__init_cdr_at_ECons:
# Init cdr at ECons
addi $sp, $sp, -4
# Init cdr at ECons
move $t0, $sp
# Init cdr at ECons
addi $sp, $sp, -8
# Init cdr at ECons
sw $ra, 0($sp)
# Init cdr at ECons
sw $fp, 4($sp)
# Init cdr at ECons
move $fp, $t0
# Instantiate Node
sw $zero, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 8($t0)
# Init cdr at ECons
lw $ra, 0($sp)
# Init cdr at ECons
lw $fp, 4($sp)
# Init cdr at ECons
addi $sp, $sp, 8
# Init cdr at ECons
addi $sp, $sp, 8
# Init cdr at ECons
jr $ra
# Program Node
function_isNil_at_ECons:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 4
# Program Node
jr $ra
# Program Node
function_head_at_ECons:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 4($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_tail_at_ECons:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 4($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_init_at_ECons:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Assign Node
lw $t0, 12($fp)
# Assign Node
lw $t1, 8($fp)
# Assign Node
sw $t1, 4($t0)
# Assign Node
lw $t0, 12($fp)
# Assign Node
lw $t1, 4($fp)
# Assign Node
sw $t1, 8($t0)
# Func Declaration Node
lw $v0, 12($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_print_at_ECons:
# Program Node
addi $sp, $sp, -28
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 16($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 68($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 20($fp)
# Func Declaration Node
lw $v0, 20($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 32
# Program Node
jr $ra
# Init car at VList
__init_car_at_VList:
# Init car at VList
addi $sp, $sp, -4
# Init car at VList
move $t0, $sp
# Init car at VList
addi $sp, $sp, -8
# Init car at VList
sw $ra, 0($sp)
# Init car at VList
sw $fp, 4($sp)
# Init car at VList
move $fp, $t0
# Instantiate Node
sw $zero, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 4($t0)
# Init car at VList
lw $ra, 0($sp)
# Init car at VList
lw $fp, 4($sp)
# Init car at VList
addi $sp, $sp, 8
# Init car at VList
addi $sp, $sp, 8
# Init car at VList
jr $ra
# Program Node
function_isNil_at_VList:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Func Declaration Node
li $v0, 1
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 4
# Program Node
jr $ra
# Program Node
function_head_at_VList:
# Program Node
addi $sp, $sp, -16
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 16($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Variable Node
lw $t0, 16($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 12($fp)
# Func Declaration Node
lw $v0, 12($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 20
# Program Node
jr $ra
# Program Node
function_tail_at_VList:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 16($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 12($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_cons_at_VList:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Instantiate Node
la $a0, VCons
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_VCons_type
# Instantiate Node
sw $v0, 0($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 72($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 20
# Program Node
jr $ra
# Program Node
function_print_at_VList:
# Program Node
addi $sp, $sp, -12
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Node
la $t0, data_21
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 8($fp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 4($fp)
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Init cdr at VCons
__init_cdr_at_VCons:
# Init cdr at VCons
addi $sp, $sp, -4
# Init cdr at VCons
move $t0, $sp
# Init cdr at VCons
addi $sp, $sp, -8
# Init cdr at VCons
sw $ra, 0($sp)
# Init cdr at VCons
sw $fp, 4($sp)
# Init cdr at VCons
move $fp, $t0
# Instantiate Node
sw $zero, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 8($t0)
# Init cdr at VCons
lw $ra, 0($sp)
# Init cdr at VCons
lw $fp, 4($sp)
# Init cdr at VCons
addi $sp, $sp, 8
# Init cdr at VCons
addi $sp, $sp, 8
# Init cdr at VCons
jr $ra
# Program Node
function_isNil_at_VCons:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 4
# Program Node
jr $ra
# Program Node
function_head_at_VCons:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 4($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_tail_at_VCons:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 4($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_init_at_VCons:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Assign Node
lw $t0, 12($fp)
# Assign Node
lw $t1, 8($fp)
# Assign Node
sw $t1, 4($t0)
# Assign Node
lw $t0, 12($fp)
# Assign Node
lw $t1, 4($fp)
# Assign Node
sw $t1, 8($t0)
# Func Declaration Node
lw $v0, 12($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_print_at_VCons:
# Program Node
addi $sp, $sp, -28
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 68($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 16($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 20($fp)
# Func Declaration Node
lw $v0, 20($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 32
# Program Node
jr $ra
# Program Node
function_out_string_at_IO:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# IO Out String Node
lw $a0, 0($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_out_int_at_IO:
# Program Node
addi $sp, $sp, 0
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# IO Out Int Node
lw $a0, 0($fp)
# IO Out Int Node
addi $v0, $zero, 1
# IO Out Int Node
syscall
# Func Declaration Node
lw $v0, 4($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_in_string_at_IO:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# a1 = Allocated length Save the length in a1
li $a1, 1024
# Allocates 1024 bytes and return the address un v0
move $a0, $a1
# Allocates 1024 bytes and return the address un v0
li $v0, 9
# Allocates 1024 bytes and return the address un v0
syscall
# a0 = v0 Save the address in a0
move $a0, $v0
# 8 System call code for read string
addi $v0, $zero, 8
# Fills the address in a0 with the string
syscall
# a1 = a0 Save the address in a1
move $a1, $a0
# Type address into $a0
la $t0, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t0, 0($v0)
# Store String Address
sw $a1, 4($v0)
# a0 = v0 Get the string instance address
move $a0, $v0
addi $sp, $sp, -4
sw $ra, 0($sp)
# Remove last char
jal __remove_last_char
lw $ra, 0($sp)
addi $sp, $sp, 4
# Save the address in the final destination
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_in_int_at_IO:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# IO In Int Node
addi $v0, $zero, 5
# IO In Int Node
syscall
# IO In Int Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Init boolop at Parse
__init_boolop_at_Parse:
# Init boolop at Parse
addi $sp, $sp, -4
# Init boolop at Parse
move $t0, $sp
# Init boolop at Parse
addi $sp, $sp, -8
# Init boolop at Parse
sw $ra, 0($sp)
# Init boolop at Parse
sw $fp, 4($sp)
# Init boolop at Parse
move $fp, $t0
# Instantiate Node
la $a0, BoolOp
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 0($fp)
# Instantiate Node
lw $t0, 0($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_BoolOp_type
# Instantiate Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 4($t0)
# Init boolop at Parse
lw $ra, 0($sp)
# Init boolop at Parse
lw $fp, 4($sp)
# Init boolop at Parse
addi $sp, $sp, 8
# Init boolop at Parse
addi $sp, $sp, 8
# Init boolop at Parse
jr $ra
# Init rest at Parse
__init_rest_at_Parse:
# Init rest at Parse
addi $sp, $sp, -4
# Init rest at Parse
move $t0, $sp
# Init rest at Parse
addi $sp, $sp, -8
# Init rest at Parse
sw $ra, 0($sp)
# Init rest at Parse
sw $fp, 4($sp)
# Init rest at Parse
move $fp, $t0
# String Node
la $t0, data_22
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 4($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 8($t0)
# Init rest at Parse
lw $ra, 0($sp)
# Init rest at Parse
lw $fp, 4($sp)
# Init rest at Parse
addi $sp, $sp, 8
# Init rest at Parse
addi $sp, $sp, 8
# Init rest at Parse
jr $ra
# Program Node
function_read_input_at_Parse:
# Program Node
addi $sp, $sp, -92
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Instantiate Node
la $a0, Graph
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 4($fp)
# Instantiate Node
lw $t0, 4($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Graph_type
# Instantiate Node
sw $v0, 4($fp)
# Var Declaration Node
lw $t0, 4($fp)
# Var Declaration Node
sw $t0, 0($fp)
# Call Node
lw $t0, 92($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 92($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 20($fp)
# Call Node
lw $t0, 20($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 16($fp)
# Var Declaration Node
lw $t0, 16($fp)
# Var Declaration Node
sw $t0, 12($fp)
# Void Node
sw $zero, 24($fp)
# While Node
read_input_at_Parse_label_0:
# Variable Node
lw $t0, 92($fp)
# Variable Node
lw $t0, 4($t0)
# Variable Node
sw $t0, 28($fp)
# String Node
la $t0, data_23
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 40($fp)
# a0 = left object
lw $a0, 12($fp)
# a1 = right object
lw $a1, 40($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 36($fp)
# Not Node
lw $t0, 36($fp)
# Not Node
seq $t0, $t0, $zero
# Not Node
sw $t0, 32($fp)
# String Node
la $t0, data_24
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 52($fp)
# a0 = left object
lw $a0, 12($fp)
# a1 = right object
lw $a1, 52($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 48($fp)
# Not Node
lw $t0, 48($fp)
# Not Node
seq $t0, $t0, $zero
# Not Node
sw $t0, 44($fp)
# Call Node
lw $t0, 28($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 32($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 44($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 28($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 60($fp)
# Call Node
lw $t0, 60($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 56($fp)
# While Node
lw $t0, 56($fp)
# While Node
bne $t0, $zero, read_input_at_Parse_label_1
# While Node
j read_input_at_Parse_label_2
# While Node
read_input_at_Parse_label_1:
# Call Node
lw $t0, 92($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 12($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 92($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 72($fp)
# Call Node
lw $t0, 72($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 68($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 68($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 80($fp)
# Call Node
lw $t0, 80($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 76($fp)
# Call Node
lw $t0, 92($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 92($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 88($fp)
# Call Node
lw $t0, 88($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 84($fp)
# Assign Node
lw $t0, 84($fp)
# Assign Node
sw $t0, 12($fp)
# While Node
j read_input_at_Parse_label_0
# While Node
read_input_at_Parse_label_2:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 96
# Program Node
jr $ra
# Program Node
function_parse_line_at_Parse:
# Program Node
addi $sp, $sp, -116
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Instantiate Node
la $a0, Vertice
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 4($fp)
# Instantiate Node
lw $t0, 4($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Vertice_type
# Instantiate Node
sw $v0, 4($fp)
# Call Node
lw $t0, 120($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 116($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 120($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 8($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 20($fp)
# Call Node
lw $t0, 20($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 16($fp)
# Var Declaration Node
lw $t0, 16($fp)
# Var Declaration Node
sw $t0, 0($fp)
# Void Node
sw $zero, 28($fp)
# While Node
parse_line_at_Parse_label_0:
# Variable Node
lw $t0, 120($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 40($fp)
# Call Node
lw $t0, 40($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 40($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 48($fp)
# Call Node
lw $t0, 48($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 44($fp)
# Equal Node
lw $t0, 44($fp)
# Equal Node
li $t1, 0
# Equal Node
seq $t2, $t0, $t1
# Equal Node
sw $t2, 36($fp)
# Not Node
lw $t0, 36($fp)
# Not Node
seq $t0, $t0, $zero
# Not Node
sw $t0, 32($fp)
# While Node
lw $t0, 32($fp)
# While Node
bne $t0, $zero, parse_line_at_Parse_label_1
# While Node
j parse_line_at_Parse_label_2
# While Node
parse_line_at_Parse_label_1:
# Variable Node
lw $t0, 120($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 60($fp)
# Call Node
lw $t0, 120($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 60($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 120($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 68($fp)
# Call Node
lw $t0, 68($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 64($fp)
# Var Declaration Node
lw $t0, 64($fp)
# Var Declaration Node
sw $t0, 56($fp)
# Variable Node
lw $t0, 120($fp)
# Variable Node
lw $t0, 8($t0)
# Variable Node
sw $t0, 76($fp)
# Call Node
lw $t0, 120($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 120($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 84($fp)
# Call Node
lw $t0, 84($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 80($fp)
# Var Declaration Node
lw $t0, 80($fp)
# Var Declaration Node
sw $t0, 72($fp)
# Instantiate Node
la $a0, Edge
# Instantiate Node
lw $a0, 4($a0)
li $v0, 9
syscall
sw $v0, 88($fp)
# Instantiate Node
lw $t0, 88($fp)
# Instantiate Node
addi $sp, $sp, -4
# Instantiate Node
sw $t0, 0($sp)
# Instantiate Node
jal __init_Edge_type
# Instantiate Node
sw $v0, 88($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 96($fp)
# Call Node
lw $t0, 96($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 92($fp)
# Call Node
lw $t0, 88($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 92($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 56($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 72($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 88($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 104($fp)
# Call Node
lw $t0, 104($fp)
# Call Node
lw $t0, 56($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 100($fp)
# Call Node
lw $t0, 0($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 100($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 0($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 112($fp)
# Call Node
lw $t0, 112($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 108($fp)
# While Node
j parse_line_at_Parse_label_0
# While Node
parse_line_at_Parse_label_2:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 124
# Program Node
jr $ra
# Program Node
function_c2i_at_Parse:
# Program Node
addi $sp, $sp, -132
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# String Node
la $t0, data_25
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 8($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 8($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 4($fp)
# Conditional Node
lw $t0, 4($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_0
# String Node
la $t0, data_26
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 20($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 20($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 16($fp)
# Conditional Node
lw $t0, 16($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_2
# String Node
la $t0, data_27
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 32($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 32($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 28($fp)
# Conditional Node
lw $t0, 28($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_4
# String Node
la $t0, data_28
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 44($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 44($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 40($fp)
# Conditional Node
lw $t0, 40($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_6
# String Node
la $t0, data_29
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 56($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 56($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 52($fp)
# Conditional Node
lw $t0, 52($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_8
# String Node
la $t0, data_30
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 68($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 68($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 64($fp)
# Conditional Node
lw $t0, 64($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_10
# String Node
la $t0, data_31
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 80($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 80($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 76($fp)
# Conditional Node
lw $t0, 76($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_12
# String Node
la $t0, data_32
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 92($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 92($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 88($fp)
# Conditional Node
lw $t0, 88($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_14
# String Node
la $t0, data_33
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 104($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 104($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 100($fp)
# Conditional Node
lw $t0, 100($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_16
# String Node
la $t0, data_34
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 116($fp)
# a0 = left object
lw $a0, 132($fp)
# a1 = right object
lw $a1, 116($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 112($fp)
# Conditional Node
lw $t0, 112($fp)
# Conditional Node
bne $t0, $zero, c2i_at_Parse_label_18
# Call Node
lw $t0, 136($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 136($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 128($fp)
# Call Node
lw $t0, 128($fp)
# Call Node
lw $t0, 16($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 124($fp)
# Conditional Node
li $t0, 0
# Conditional Node
sw $t0, 108($fp)
# Conditional Node
j c2i_at_Parse_label_19
# Conditional Node
c2i_at_Parse_label_18:
# Conditional Node
li $t0, 9
# Conditional Node
sw $t0, 108($fp)
# Conditional Node
c2i_at_Parse_label_19:
# Conditional Node
lw $t0, 108($fp)
# Conditional Node
sw $t0, 96($fp)
# Conditional Node
j c2i_at_Parse_label_17
# Conditional Node
c2i_at_Parse_label_16:
# Conditional Node
li $t0, 8
# Conditional Node
sw $t0, 96($fp)
# Conditional Node
c2i_at_Parse_label_17:
# Conditional Node
lw $t0, 96($fp)
# Conditional Node
sw $t0, 84($fp)
# Conditional Node
j c2i_at_Parse_label_15
# Conditional Node
c2i_at_Parse_label_14:
# Conditional Node
li $t0, 7
# Conditional Node
sw $t0, 84($fp)
# Conditional Node
c2i_at_Parse_label_15:
# Conditional Node
lw $t0, 84($fp)
# Conditional Node
sw $t0, 72($fp)
# Conditional Node
j c2i_at_Parse_label_13
# Conditional Node
c2i_at_Parse_label_12:
# Conditional Node
li $t0, 6
# Conditional Node
sw $t0, 72($fp)
# Conditional Node
c2i_at_Parse_label_13:
# Conditional Node
lw $t0, 72($fp)
# Conditional Node
sw $t0, 60($fp)
# Conditional Node
j c2i_at_Parse_label_11
# Conditional Node
c2i_at_Parse_label_10:
# Conditional Node
li $t0, 5
# Conditional Node
sw $t0, 60($fp)
# Conditional Node
c2i_at_Parse_label_11:
# Conditional Node
lw $t0, 60($fp)
# Conditional Node
sw $t0, 48($fp)
# Conditional Node
j c2i_at_Parse_label_9
# Conditional Node
c2i_at_Parse_label_8:
# Conditional Node
li $t0, 4
# Conditional Node
sw $t0, 48($fp)
# Conditional Node
c2i_at_Parse_label_9:
# Conditional Node
lw $t0, 48($fp)
# Conditional Node
sw $t0, 36($fp)
# Conditional Node
j c2i_at_Parse_label_7
# Conditional Node
c2i_at_Parse_label_6:
# Conditional Node
li $t0, 3
# Conditional Node
sw $t0, 36($fp)
# Conditional Node
c2i_at_Parse_label_7:
# Conditional Node
lw $t0, 36($fp)
# Conditional Node
sw $t0, 24($fp)
# Conditional Node
j c2i_at_Parse_label_5
# Conditional Node
c2i_at_Parse_label_4:
# Conditional Node
li $t0, 2
# Conditional Node
sw $t0, 24($fp)
# Conditional Node
c2i_at_Parse_label_5:
# Conditional Node
lw $t0, 24($fp)
# Conditional Node
sw $t0, 12($fp)
# Conditional Node
j c2i_at_Parse_label_3
# Conditional Node
c2i_at_Parse_label_2:
# Conditional Node
li $t0, 1
# Conditional Node
sw $t0, 12($fp)
# Conditional Node
c2i_at_Parse_label_3:
# Conditional Node
lw $t0, 12($fp)
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
j c2i_at_Parse_label_1
# Conditional Node
c2i_at_Parse_label_0:
# Conditional Node
li $t0, 0
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
c2i_at_Parse_label_1:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 140
# Program Node
jr $ra
# Program Node
function_a2i_at_Parse:
# Program Node
addi $sp, $sp, -124
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Equal Node
lw $t0, 8($fp)
# Equal Node
li $t1, 0
# Equal Node
seq $t2, $t0, $t1
# Equal Node
sw $t2, 4($fp)
# Conditional Node
lw $t0, 4($fp)
# Conditional Node
bne $t0, $zero, a2i_at_Parse_label_0
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 0
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 1
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 28($fp)
# Call Node
lw $t0, 28($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 24($fp)
# String Node
la $t0, data_35
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 32($fp)
# a0 = left object
lw $a0, 24($fp)
# a1 = right object
lw $a1, 32($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 20($fp)
# Conditional Node
lw $t0, 20($fp)
# Conditional Node
bne $t0, $zero, a2i_at_Parse_label_2
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 0
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 1
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 48($fp)
# Call Node
lw $t0, 48($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 44($fp)
# String Node
la $t0, data_36
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 52($fp)
# a0 = left object
lw $a0, 44($fp)
# a1 = right object
lw $a1, 52($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 40($fp)
# Conditional Node
lw $t0, 40($fp)
# Conditional Node
bne $t0, $zero, a2i_at_Parse_label_4
# Call Node
lw $t0, 128($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 128($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 60($fp)
# Call Node
lw $t0, 60($fp)
# Call Node
lw $t0, 68($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 56($fp)
# Conditional Node
lw $t0, 56($fp)
# Conditional Node
sw $t0, 36($fp)
# Conditional Node
j a2i_at_Parse_label_5
# Conditional Node
a2i_at_Parse_label_4:
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 68($fp)
# Call Node
lw $t0, 68($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 64($fp)
# Minus Node
lw $t0, 64($fp)
# Minus Node
li $t1, 1
# Minus Node
sub $t2, $t0, $t1
# Minus Node
sw $t2, 72($fp)
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 1
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 72($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 80($fp)
# Call Node
lw $t0, 80($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 76($fp)
# Call Node
lw $t0, 128($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 128($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 88($fp)
# Call Node
lw $t0, 88($fp)
# Call Node
lw $t0, 64($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 84($fp)
# Conditional Node
lw $t0, 84($fp)
# Conditional Node
sw $t0, 36($fp)
# Conditional Node
a2i_at_Parse_label_5:
# Conditional Node
lw $t0, 36($fp)
# Conditional Node
sw $t0, 16($fp)
# Conditional Node
j a2i_at_Parse_label_3
# Conditional Node
a2i_at_Parse_label_2:
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 100($fp)
# Call Node
lw $t0, 100($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 96($fp)
# Minus Node
lw $t0, 96($fp)
# Minus Node
li $t1, 1
# Minus Node
sub $t2, $t0, $t1
# Minus Node
sw $t2, 104($fp)
# Call Node
lw $t0, 124($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 1
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 104($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 124($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 112($fp)
# Call Node
lw $t0, 112($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 108($fp)
# Call Node
lw $t0, 128($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 108($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 128($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 120($fp)
# Call Node
lw $t0, 120($fp)
# Call Node
lw $t0, 68($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 116($fp)
# Roof Node
li $t0, 0
# Roof Node
lw $t1, 116($fp)
# Roof Node
sub $t2, $t0, $t1
# Roof Node
sw $t2, 92($fp)
# Conditional Node
lw $t0, 92($fp)
# Conditional Node
sw $t0, 16($fp)
# Conditional Node
a2i_at_Parse_label_3:
# Conditional Node
lw $t0, 16($fp)
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
j a2i_at_Parse_label_1
# Conditional Node
a2i_at_Parse_label_0:
# Conditional Node
li $t0, 0
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
a2i_at_Parse_label_1:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 132
# Program Node
jr $ra
# Program Node
function_a2i_aux_at_Parse:
# Program Node
addi $sp, $sp, -180
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Var Declaration Node
li $t0, 0
# Var Declaration Node
sw $t0, 0($fp)
# Call Node
lw $t0, 180($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 180($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 16($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 12($fp)
# Var Declaration Node
lw $t0, 12($fp)
# Var Declaration Node
sw $t0, 8($fp)
# Var Declaration Node
li $t0, 0
# Var Declaration Node
sw $t0, 20($fp)
# Void Node
sw $zero, 24($fp)
# While Node
a2i_aux_at_Parse_label_0:
# Lesser Node
lw $t0, 20($fp)
# Lesser Node
lw $t1, 8($fp)
# Lesser Node
slt $t2, $t0, $t1
# Lesser Node
sw $t2, 28($fp)
# While Node
lw $t0, 28($fp)
# While Node
bne $t0, $zero, a2i_aux_at_Parse_label_1
# While Node
j a2i_aux_at_Parse_label_2
# While Node
a2i_aux_at_Parse_label_1:
# Call Node
lw $t0, 180($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 20($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 1
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 180($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 40($fp)
# Call Node
lw $t0, 40($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 36($fp)
# Var Declaration Node
lw $t0, 36($fp)
# Var Declaration Node
sw $t0, 32($fp)
# String Node
la $t0, data_37
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 52($fp)
# a0 = left object
lw $a0, 32($fp)
# a1 = right object
lw $a1, 52($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 48($fp)
# Conditional Node
lw $t0, 48($fp)
# Conditional Node
bne $t0, $zero, a2i_aux_at_Parse_label_3
# String Node
la $t0, data_38
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 64($fp)
# a0 = left object
lw $a0, 32($fp)
# a1 = right object
lw $a1, 64($fp)
addi $sp, $sp, -4
sw $ra, 0($sp)
jal __object_equal
lw $ra, 0($sp)
addi $sp, $sp, 4
# Saving equal result
sw $v0, 60($fp)
# Conditional Node
lw $t0, 60($fp)
# Conditional Node
bne $t0, $zero, a2i_aux_at_Parse_label_5
# Star Node
lw $t0, 0($fp)
# Star Node
li $t1, 10
# Star Node
mul $t2, $t0, $t1
# Star Node
sw $t2, 72($fp)
# Call Node
lw $t0, 180($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 20($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
li $t0, 1
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 180($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 80($fp)
# Call Node
lw $t0, 80($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 76($fp)
# Call Node
lw $t0, 184($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 76($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 184($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 88($fp)
# Call Node
lw $t0, 88($fp)
# Call Node
lw $t0, 60($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 84($fp)
# Plus Node
lw $t0, 72($fp)
# Plus Node
lw $t1, 84($fp)
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 92($fp)
# Assign Node
lw $t0, 92($fp)
# Assign Node
sw $t0, 0($fp)
# Plus Node
lw $t0, 20($fp)
# Plus Node
li $t1, 1
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 96($fp)
# Assign Node
lw $t0, 96($fp)
# Assign Node
sw $t0, 20($fp)
# Equal Node
lw $t0, 20($fp)
# Equal Node
lw $t1, 8($fp)
# Equal Node
seq $t2, $t0, $t1
# Equal Node
sw $t2, 104($fp)
# Conditional Node
lw $t0, 104($fp)
# Conditional Node
bne $t0, $zero, a2i_aux_at_Parse_label_7
# String Node
la $t0, data_39
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 108($fp)
# Conditional Node
lw $t0, 108($fp)
# Conditional Node
sw $t0, 100($fp)
# Conditional Node
j a2i_aux_at_Parse_label_8
# Conditional Node
a2i_aux_at_Parse_label_7:
# String Node
la $t0, data_40
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 112($fp)
# Assign Node
lw $t0, 184($fp)
# Assign Node
lw $t1, 112($fp)
# Assign Node
sw $t1, 8($t0)
# Conditional Node
lw $t0, 112($fp)
# Conditional Node
sw $t0, 100($fp)
# Conditional Node
a2i_aux_at_Parse_label_8:
# Conditional Node
lw $t0, 100($fp)
# Conditional Node
sw $t0, 56($fp)
# Conditional Node
j a2i_aux_at_Parse_label_6
# Conditional Node
a2i_aux_at_Parse_label_5:
# Plus Node
lw $t0, 20($fp)
# Plus Node
li $t1, 1
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 120($fp)
# Call Node
lw $t0, 180($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 180($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 128($fp)
# Call Node
lw $t0, 128($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 124($fp)
# Minus Node
lw $t0, 124($fp)
# Minus Node
lw $t1, 20($fp)
# Minus Node
sub $t2, $t0, $t1
# Minus Node
sw $t2, 132($fp)
# Minus Node
lw $t0, 132($fp)
# Minus Node
li $t1, 1
# Minus Node
sub $t2, $t0, $t1
# Minus Node
sw $t2, 136($fp)
# Call Node
lw $t0, 180($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 120($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 136($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 180($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 144($fp)
# Call Node
lw $t0, 144($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 140($fp)
# Assign Node
lw $t0, 184($fp)
# Assign Node
lw $t1, 140($fp)
# Assign Node
sw $t1, 8($t0)
# Assign Node
lw $t0, 8($fp)
# Assign Node
sw $t0, 20($fp)
# Conditional Node
lw $t0, 20($fp)
# Conditional Node
sw $t0, 56($fp)
# Conditional Node
a2i_aux_at_Parse_label_6:
# Conditional Node
lw $t0, 56($fp)
# Conditional Node
sw $t0, 44($fp)
# Conditional Node
j a2i_aux_at_Parse_label_4
# Conditional Node
a2i_aux_at_Parse_label_3:
# Plus Node
lw $t0, 20($fp)
# Plus Node
li $t1, 1
# Plus Node
add $t2, $t0, $t1
# Plus Node
sw $t2, 152($fp)
# Call Node
lw $t0, 180($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 180($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 160($fp)
# Call Node
lw $t0, 160($fp)
# Call Node
lw $t0, 28($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 156($fp)
# Minus Node
lw $t0, 156($fp)
# Minus Node
lw $t1, 20($fp)
# Minus Node
sub $t2, $t0, $t1
# Minus Node
sw $t2, 164($fp)
# Minus Node
lw $t0, 164($fp)
# Minus Node
li $t1, 1
# Minus Node
sub $t2, $t0, $t1
# Minus Node
sw $t2, 168($fp)
# Call Node
lw $t0, 180($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 152($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 168($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 180($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 176($fp)
# Call Node
lw $t0, 176($fp)
# Call Node
lw $t0, 36($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 172($fp)
# Assign Node
lw $t0, 184($fp)
# Assign Node
lw $t1, 172($fp)
# Assign Node
sw $t1, 8($t0)
# Assign Node
lw $t0, 8($fp)
# Assign Node
sw $t0, 20($fp)
# Conditional Node
lw $t0, 20($fp)
# Conditional Node
sw $t0, 44($fp)
# Conditional Node
a2i_aux_at_Parse_label_4:
# While Node
j a2i_aux_at_Parse_label_0
# While Node
a2i_aux_at_Parse_label_2:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 188
# Program Node
jr $ra
# Init g at Main
__init_g_at_Main:
# Init g at Main
addi $sp, $sp, -8
# Init g at Main
move $t0, $sp
# Init g at Main
addi $sp, $sp, -8
# Init g at Main
sw $ra, 0($sp)
# Init g at Main
sw $fp, 4($sp)
# Init g at Main
move $fp, $t0
# Call Node
lw $t0, 8($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 8($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 52($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 0($fp)
# Attr Declaration Node
lw $t0, 8($fp)
# Attr Declaration Node
lw $t1, 0($fp)
# Attr Declaration Node
sw $t1, 12($t0)
# Init g at Main
lw $ra, 0($sp)
# Init g at Main
lw $fp, 4($sp)
# Init g at Main
addi $sp, $sp, 8
# Init g at Main
addi $sp, $sp, 12
# Init g at Main
jr $ra
# Program Node
function_main_at_Main:
# Program Node
addi $sp, $sp, -28
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 12($t0)
# Variable Node
sw $t0, 4($fp)
# Call Node
lw $t0, 4($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 4($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 12($fp)
# Call Node
lw $t0, 12($fp)
# Call Node
lw $t0, 44($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 8($fp)
# Variable Node
lw $t0, 28($fp)
# Variable Node
lw $t0, 12($t0)
# Variable Node
sw $t0, 16($fp)
# Call Node
lw $t0, 16($fp)
# Call Node
addi $sp, $sp, -4
# Call Node
sw $t0, 0($sp)
# Call Node
lw $t0, 16($fp)
# Call Node
lw $t0, 0($t0)
# Call Node
sw $t0, 24($fp)
# Call Node
lw $t0, 24($fp)
# Call Node
lw $t0, 40($t0)
# Call Node
jal __get_ra
# Call Node
move $ra, $v0
# Call Node
jr $t0
# Call Node
sw $v0, 20($fp)
# Func Declaration Node
lw $v0, 20($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 32
# Program Node
jr $ra
# Program Node
function_abort_at_Object:
# Program Node
addi $sp, $sp, -24
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Assign object type
lw $t0, 24($fp)
# Assign object type
lw $t0, 0($t0)
# Assign object type
sw $t0, 0($fp)
# Get type name
lw $a0, 0($fp)
# Get type name
jal __type_name
# Get type name
sw $v0, 4($fp)
la $t0, data_15
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 8($fp)
la $t0, data_16
# Type address into $a0
la $t1, String
# If String the is type and address
li $a0, 8
li $v0, 9
syscall
# Store String Type
sw $t1, 0($v0)
# Store String Address
sw $t0, 4($v0)
# Save string instance
sw $v0, 12($fp)
# Final abort message
lw $a0, 8($fp)
# Final abort message
lw $a1, 4($fp)
# Final abort message
jal __concat
# Final abort message
sw $v0, 16($fp)
# Final Final abort message
lw $a0, 16($fp)
# Final Final abort message
lw $a1, 12($fp)
# Final Final abort message
jal __concat
# Final Final abort message
sw $v0, 20($fp)
# Print abort info
lw $a0, 20($fp)
# Getting the String address
lw $a0, 4($a0)
# 4 System call code for print string
addi $v0, $zero, 4
syscall
# Abort Object
addi $v0, $zero, 10
# Abort Object
syscall
# Func Declaration Node
li $v0, 0
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 28
# Program Node
jr $ra
# Program Node
function_type_name_at_Object:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Object Type Name Node
lw $t0, 4($fp)
# Object Type Name Node
lw $t0, 0($t0)
# Object Type Name Node
sw $t0, 0($fp)
# Object Type Name Node
lw $a0, 0($fp)
# Object Type Name Node
jal __type_name
# Object Type Name Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_copy_at_Object:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Object Copy Node
lw $a0, 4($fp)
# Object Copy Node
jal __copy
# Object Copy Node
sw $v0, 0($fp)
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 8
# Program Node
jr $ra
# Program Node
function_and_at_BoolOp:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Conditional Node
lw $t0, 8($fp)
# Conditional Node
bne $t0, $zero, and_at_BoolOp_label_0
# Conditional Node
li $t0, 0
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
j and_at_BoolOp_label_1
# Conditional Node
and_at_BoolOp_label_0:
# Conditional Node
lw $t0, 4($fp)
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
and_at_BoolOp_label_1:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Program Node
function_or_at_BoolOp:
# Program Node
addi $sp, $sp, -4
# Program Node
move $t0, $sp
# Program Node
addi $sp, $sp, -8
# Program Node
sw $ra, 0($sp)
# Program Node
sw $fp, 4($sp)
# Program Node
move $fp, $t0
# Conditional Node
lw $t0, 8($fp)
# Conditional Node
bne $t0, $zero, or_at_BoolOp_label_0
# Conditional Node
lw $t0, 4($fp)
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
j or_at_BoolOp_label_1
# Conditional Node
or_at_BoolOp_label_0:
# Conditional Node
li $t0, 1
# Conditional Node
sw $t0, 0($fp)
# Conditional Node
or_at_BoolOp_label_1:
# Func Declaration Node
lw $v0, 0($fp)
# Program Node
lw $ra, 0($sp)
# Program Node
lw $fp, 4($sp)
# Program Node
addi $sp, $sp, 8
# Program Node
addi $sp, $sp, 16
# Program Node
jr $ra
# Class Declaration Node
__init_Object_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
lw $t0, 0($fp)
la $t1, Object
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_String_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 0($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_Object_type
sw $v0, 0($fp)
lw $t0, 0($fp)
la $t1, String
sw $t1, 0($t0)
la $t1, __empty_string
sw $t1, 4($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Bool_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 0($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_Object_type
sw $v0, 0($fp)
lw $t0, 0($fp)
la $t1, Bool
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Int_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 0($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_Object_type
sw $v0, 0($fp)
lw $t0, 0($fp)
la $t1, Int
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_IO_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 0($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_Object_type
sw $v0, 0($fp)
lw $t0, 0($fp)
la $t1, IO
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Graph_type:
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 8($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_Object_type
sw $v0, 8($fp)
lw $t0, 8($fp)
la $t1, Graph
sw $t1, 0($t0)
# arg node
lw $t0, 8($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_vertices_at_Graph
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 8($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_edges_at_Graph
# Initialize arg function
sw $v0, 4($fp)
# return node
lw $v0, 8($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 12
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Vertice_type:
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 8($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_IO_type
sw $v0, 8($fp)
lw $t0, 8($fp)
la $t1, Vertice
sw $t1, 0($t0)
# arg node
lw $t0, 8($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_num_at_Vertice
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 8($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_out_at_Vertice
# Initialize arg function
sw $v0, 4($fp)
# return node
lw $v0, 8($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 12
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Edge_type:
# Class Declaration Node
addi $sp, $sp, -12
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 12($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_IO_type
sw $v0, 12($fp)
lw $t0, 12($fp)
la $t1, Edge
sw $t1, 0($t0)
# arg node
lw $t0, 12($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_from_at_Edge
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 12($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_to_at_Edge
# Initialize arg function
sw $v0, 4($fp)
# arg node
lw $t0, 12($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_weight_at_Edge
# Initialize arg function
sw $v0, 8($fp)
# return node
lw $v0, 12($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 16
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_EList_type:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 4($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_IO_type
sw $v0, 4($fp)
lw $t0, 4($fp)
la $t1, EList
sw $t1, 0($t0)
# arg node
lw $t0, 4($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_car_at_EList
# Initialize arg function
sw $v0, 0($fp)
# return node
lw $v0, 4($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_ECons_type:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 4($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_EList_type
sw $v0, 4($fp)
lw $t0, 4($fp)
la $t1, ECons
sw $t1, 0($t0)
# arg node
lw $t0, 4($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_cdr_at_ECons
# Initialize arg function
sw $v0, 0($fp)
# return node
lw $v0, 4($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_VList_type:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 4($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_IO_type
sw $v0, 4($fp)
lw $t0, 4($fp)
la $t1, VList
sw $t1, 0($t0)
# arg node
lw $t0, 4($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_car_at_VList
# Initialize arg function
sw $v0, 0($fp)
# return node
lw $v0, 4($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_VCons_type:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 4($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_VList_type
sw $v0, 4($fp)
lw $t0, 4($fp)
la $t1, VCons
sw $t1, 0($t0)
# arg node
lw $t0, 4($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_cdr_at_VCons
# Initialize arg function
sw $v0, 0($fp)
# return node
lw $v0, 4($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Parse_type:
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 8($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_IO_type
sw $v0, 8($fp)
lw $t0, 8($fp)
la $t1, Parse
sw $t1, 0($t0)
# arg node
lw $t0, 8($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_boolop_at_Parse
# Initialize arg function
sw $v0, 0($fp)
# arg node
lw $t0, 8($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_rest_at_Parse
# Initialize arg function
sw $v0, 4($fp)
# return node
lw $v0, 8($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 12
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_Main_type:
# Class Declaration Node
addi $sp, $sp, -4
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 4($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_Parse_type
sw $v0, 4($fp)
lw $t0, 4($fp)
la $t1, Main
sw $t1, 0($t0)
# arg node
lw $t0, 4($fp)
# arg node
addi $sp, $sp, -4
# arg node
sw $t0, 0($sp)
# Initialize arg function
jal __init_g_at_Main
# Initialize arg function
sw $v0, 0($fp)
# return node
lw $v0, 4($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
jr $ra
# Class Declaration Node
__init_BoolOp_type:
# Class Declaration Node
addi $sp, $sp, 0
# Class Declaration Node
move $t0, $sp
# Class Declaration Node
addi $sp, $sp, -8
# Class Declaration Node
sw $ra, 0($sp)
# Class Declaration Node
sw $fp, 4($sp)
# Class Declaration Node
move $fp, $t0
# Calling father init function
lw $t0, 0($fp)
# Calling father init function
addi $sp, $sp, -4
# Calling father init function
sw $t0, 0($sp)
jal __init_Object_type
sw $v0, 0($fp)
lw $t0, 0($fp)
la $t1, BoolOp
sw $t1, 0($t0)
# return node
lw $v0, 0($fp)
# Class Declaration Node
lw $ra, 0($sp)
# Class Declaration Node
lw $fp, 4($sp)
# Class Declaration Node
addi $sp, $sp, 8
# Class Declaration Node
addi $sp, $sp, 4
# Class Declaration Node
jr $ra
.data 
data_0: .asciiz "Object"
data_1: .asciiz "String"
data_2: .asciiz "Bool"
data_3: .asciiz "Int"
data_4: .asciiz "IO"
data_5: .asciiz "Graph"
data_6: .asciiz "Vertice"
data_7: .asciiz "Edge"
data_8: .asciiz "EList"
data_9: .asciiz "ECons"
data_10: .asciiz "VList"
data_11: .asciiz "VCons"
data_12: .asciiz "Parse"
data_13: .asciiz "Main"
data_14: .asciiz "BoolOp"
data_15: .asciiz "Abort called from class "
data_16: .asciiz "\n"
data_17: .asciiz " ("
data_18: .asciiz ","
data_19: .asciiz ")"
data_20: .asciiz "\n"
data_21: .asciiz "\n"
data_22: .asciiz ""
data_23: .asciiz "\n"
data_24: .asciiz ""
data_25: .asciiz "0"
data_26: .asciiz "1"
data_27: .asciiz "2"
data_28: .asciiz "3"
data_29: .asciiz "4"
data_30: .asciiz "5"
data_31: .asciiz "6"
data_32: .asciiz "7"
data_33: .asciiz "8"
data_34: .asciiz "9"
data_35: .asciiz "-"
data_36: .asciiz " "
data_37: .asciiz " "
data_38: .asciiz ","
data_39: .asciiz ""
data_40: .asciiz ""
__empty_string: .asciiz ""
# Program Node
Object: .word 0, 4, data_0, __init_Object_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object
# Program Node
String: .word Object, 4, data_1, __init_String_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_length_at_String, function_concat_at_String, function_substr_at_String
# Program Node
Bool: .word Object, 4, data_2, __init_Bool_type, function_abort_at_Bool, function_type_name_at_Bool, function_copy_at_Object
# Program Node
Int: .word Object, 4, data_3, __init_Int_type, function_abort_at_Int, function_type_name_at_Int, function_copy_at_Object
# Program Node
IO: .word Object, 4, data_4, __init_IO_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO
# Program Node
Graph: .word Object, 12, data_5, __init_Graph_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, __init_vertices_at_Graph, __init_edges_at_Graph, function_add_vertice_at_Graph, function_print_E_at_Graph, function_print_V_at_Graph
# Program Node
Vertice: .word IO, 12, data_6, __init_Vertice_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_num_at_Vertice, __init_out_at_Vertice, function_outgoing_at_Vertice, function_number_at_Vertice, function_init_at_Vertice, function_add_out_at_Vertice, function_print_at_Vertice
# Program Node
Edge: .word IO, 16, data_7, __init_Edge_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_from_at_Edge, __init_to_at_Edge, __init_weight_at_Edge, function_init_at_Edge, function_print_at_Edge
# Program Node
EList: .word IO, 8, data_8, __init_EList_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_car_at_EList, function_isNil_at_EList, function_head_at_EList, function_tail_at_EList, function_cons_at_EList, function_append_at_EList, function_print_at_EList
# Program Node
ECons: .word EList, 12, data_9, __init_ECons_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_car_at_EList, function_isNil_at_ECons, function_head_at_ECons, function_tail_at_ECons, function_cons_at_EList, function_append_at_EList, function_print_at_ECons, __init_cdr_at_ECons, function_init_at_ECons
# Program Node
VList: .word IO, 8, data_10, __init_VList_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_car_at_VList, function_isNil_at_VList, function_head_at_VList, function_tail_at_VList, function_cons_at_VList, function_print_at_VList
# Program Node
VCons: .word VList, 12, data_11, __init_VCons_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_car_at_VList, function_isNil_at_VCons, function_head_at_VCons, function_tail_at_VCons, function_cons_at_VList, function_print_at_VCons, __init_cdr_at_VCons, function_init_at_VCons
# Program Node
Parse: .word IO, 12, data_12, __init_Parse_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_boolop_at_Parse, __init_rest_at_Parse, function_read_input_at_Parse, function_parse_line_at_Parse, function_c2i_at_Parse, function_a2i_at_Parse, function_a2i_aux_at_Parse
# Program Node
Main: .word Parse, 16, data_13, __init_Main_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_out_string_at_IO, function_out_int_at_IO, function_in_string_at_IO, function_in_int_at_IO, __init_boolop_at_Parse, __init_rest_at_Parse, function_read_input_at_Parse, function_parse_line_at_Parse, function_c2i_at_Parse, function_a2i_at_Parse, function_a2i_aux_at_Parse, __init_g_at_Main, function_main_at_Main
# Program Node
BoolOp: .word Object, 4, data_14, __init_BoolOp_type, function_abort_at_Object, function_type_name_at_Object, function_copy_at_Object, function_and_at_BoolOp, function_or_at_BoolOp