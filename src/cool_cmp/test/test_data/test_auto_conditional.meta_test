"{\"name\": \"test_auto_conditional\", \"result\": 1, \"errors\": []}"

class Base {
    base():AUTO_TYPE {
        self
    };
};

class OtraBase {
    otraBase():AUTO_TYPE {
        self
    };
};

class ConcBase1 inherits Base {

};

class ConcBase2 inherits OtraBase {

};

class Main {
    a:AUTO_TYPE;
    main() : AUTO_TYPE
    {
        {
            a:AUTO_TYPE <- 
                if true then
                    new OtraBase
                else
                    new ConcBase2
                fi;
            b:AUTO_TYPE <-
                if true then
                    new ConcBase2
                else
                    new ConcBase2
                fi;
            c:AUTO_TYPE <-
                if true then
                    new ConcBase1
                else
                    new ConcBase2
                fi;
            d:AUTO_TYPE <-
                if true then
                    ret1()
                else
                    ret2()
                fi;
            e:AUTO_TYPE <-
                if true then
                    ret1(new ConcBase1) 
                else
                    ret2(new ConcBase2)
                fi;
            1;
        }
    };

    ret1():AUTO_TYPE
    {
        c:AUTO_TYPE <-
            if true then
                new ConcBase1
            else
                new ConcBase2
            fi
    };

    ret2():AUTO_TYPE
    {
        c:AUTO_TYPE <-
            if true then
                new OtraBase
            else
                new ConcBase2
            fi
    };

    ret1(param:AUTO_TYPE):AUTO_TYPE
    {
        {
            c:AUTO_TYPE <- param.base(); 
            a:AUTO_TYPE <- case param of
                b:Base => if true then b else param fi;
                b:OtraBase => if false then b else param fi;
            esac;
        }
    };

    ret2(param:AUTO_TYPE):AUTO_TYPE
    {
        {
            c:AUTO_TYPE <- param.otraBase(); 
            a:AUTO_TYPE <- case param of
                b:Base => if true then b else b fi;
                b:ConcBase1 => if true then b else b fi;
            esac;
        }
    };

};