	.data
	.align 4
type: .word 8

	.data
_Graph: .asciiz "Graph\n"
	.data
	.align 4
Graph: .word 12 _Graph Init_Graph abort_Object type_name_Object copy_Object add_vertice_Graph print_E_Graph print_V_Graph

	.data
_Vertice: .asciiz "Vertice\n"
	.data
	.align 4
Vertice: .word 12 _Vertice Init_Vertice abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO outgoing_Vertice number_Vertice init_Vertice add_out_Vertice print_Vertice

	.data
_Edge: .asciiz "Edge\n"
	.data
	.align 4
Edge: .word 16 _Edge Init_Edge abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO init_Edge print_Edge

	.data
_EList: .asciiz "EList\n"
	.data
	.align 4
EList: .word 8 _EList Init_EList abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO isNil_EList head_EList tail_EList cons_EList append_EList print_EList

	.data
_ECons: .asciiz "ECons\n"
	.data
	.align 4
ECons: .word 12 _ECons Init_ECons abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO isNil_ECons head_ECons tail_ECons cons_EList append_EList print_ECons init_ECons

	.data
_VList: .asciiz "VList\n"
	.data
	.align 4
VList: .word 8 _VList Init_VList abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO isNil_VList head_VList tail_VList cons_VList print_VList

	.data
_VCons: .asciiz "VCons\n"
	.data
	.align 4
VCons: .word 12 _VCons Init_VCons abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO isNil_VCons head_VCons tail_VCons cons_VList print_VCons init_VCons

	.data
_Parse: .asciiz "Parse\n"
	.data
	.align 4
Parse: .word 12 _Parse Init_Parse abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO read_input_Parse parse_line_Parse c2i_Parse a2i_Parse a2i_aux_Parse

	.data
_Main: .asciiz "Main\n"
	.data
	.align 4
Main: .word 16 _Main Init_Main abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO read_input_Parse parse_line_Parse c2i_Parse a2i_Parse a2i_aux_Parse main_Main

	.data
_BoolOp: .asciiz "BoolOp\n"
	.data
	.align 4
BoolOp: .word 4 _BoolOp Init_BoolOp abort_Object type_name_Object copy_Object and_BoolOp or_BoolOp

	.data
_Object: .asciiz "Object\n"
	.data
	.align 4
Object: .word 4 _Object Init_Object abort_Object type_name_Object copy_Object

	.data
_Int: .asciiz "Int\n"
	.data
	.align 4
Int: .word 8 _Int Init_Int abort_Object type_name_Object copy_Object

	.data
_String: .asciiz "String\n"
	.data
	.align 4
String: .word 8 _String Init_String abort_Object type_name_Object copy_Object length_String concat_String substr_String

	.data
_Bool: .asciiz "Bool\n"
	.data
	.align 4
Bool: .word 8 _Bool Init_Bool abort_Object type_name_Object copy_Object

	.data
_IO: .asciiz "IO\n"
	.data
	.align 4
IO: .word 4 _IO Init_IO abort_Object type_name_Object copy_Object out_string_IO out_int_IO in_string_IO in_int_IO

	.data
ObjectAbortMessage : .asciiz "Abort called from class "
	.data
IO_Buffer : .space 1001
	.data
str_empty: .asciiz ""

	.data
str_0: .asciiz " ("

	.data
str_1: .asciiz ","

	.data
str_2: .asciiz ")"

	.data
str_3: .asciiz "\n"

	.data
str_4: .asciiz "\n"

	.data
str_5: .asciiz "\n"

	.data
str_6: .asciiz ""

	.data
str_7: .asciiz "0"

	.data
str_8: .asciiz "1"

	.data
str_9: .asciiz "2"

	.data
str_10: .asciiz "3"

	.data
str_11: .asciiz "4"

	.data
str_12: .asciiz "5"

	.data
str_13: .asciiz "6"

	.data
str_14: .asciiz "7"

	.data
str_15: .asciiz "8"

	.data
str_16: .asciiz "9"

	.data
str_17: .asciiz "-"

	.data
str_18: .asciiz " "

	.data
str_19: .asciiz " "

	.data
str_20: .asciiz ","

	.data
str_21: .asciiz ""

	.data
str_22: .asciiz ""

	.text
main:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 12
	
	# assign (add here the expr.to_string) to m0
	li $a0, 16
	li $v0, 9
	syscall
	la $a0, Main
	sw $a0,  0($v0)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to m1
	# calling the method Init_Main of type Main
	#load the variable m0
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to m2
	# calling the method main of type Main
	#load the variable m1
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 60($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# return the value of the function in the register $v0
	#load the variable m2
	lw $v0, -8($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 12
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	li $v0, 10
	syscall
	
	.text
add_vertice_Graph:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 44
	
	# assign (add here the expr.to_string) to t_5
	#load the variable v_4
	lw $v0, 12($fp)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_6
	# calling the method outgoing of type Vertice
	#load the variable t_5
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 40($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_7
	#load the variable t_6
	lw $v0, -4($fp)
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_8
	lw $v1, 16($fp)
	lw $v0, 8($v1)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_9
	#load the variable t_8
	lw $v0, -12($fp)
	sw $v0, -16($fp)
	
	lw $v0, -8($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_10
	# calling the method append of type EList
	#load the variable t_7
	lw $v0, -8($fp)
	lw $t0, 0($v0)
	lw $v1, 56($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# Setting value of the attribute edges in the instance self_Graph to t_10
	#load the variable t_10
	lw $v0, -20($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 8($v1)
	
	# assign (add here the expr.to_string) to t_11
	lw $v1, 16($fp)
	lw $v0, 4($v1)
	sw $v0, -24($fp)
	
	# assign (add here the expr.to_string) to t_12
	#load the variable t_11
	lw $v0, -24($fp)
	sw $v0, -28($fp)
	
	# assign (add here the expr.to_string) to t_13
	#load the variable v_4
	lw $v0, 12($fp)
	sw $v0, -32($fp)
	
	lw $v0, -28($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -32($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_14
	# calling the method cons of type VList
	#load the variable t_12
	lw $v0, -28($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -36($fp)
	
	# Setting value of the attribute vertices in the instance self_Graph to t_14
	#load the variable t_14
	lw $v0, -36($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 4($v1)
	
	# assign (add here the expr.to_string) to t_15
	#load the variable t_14
	lw $v0, -36($fp)
	sw $v0, -40($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_15
	lw $v0, -40($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 44
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_E_Graph:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 16
	
	# assign (add here the expr.to_string) to t_16
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_17
	#load the variable t_16
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_18
	# calling the method print of type EList
	#load the variable t_17
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 60($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_19
	#load the variable t_18
	lw $v0, -8($fp)
	sw $v0, -12($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_19
	lw $v0, -12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 16
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_V_Graph:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 16
	
	# assign (add here the expr.to_string) to t_20
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_21
	#load the variable t_20
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_22
	# calling the method print of type VList
	#load the variable t_21
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 56($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_23
	#load the variable t_22
	lw $v0, -8($fp)
	sw $v0, -12($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_23
	lw $v0, -12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 16
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Graph:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 16
	
	# assign (add here the expr.to_string) to t_0
	li $a0, 8
	li $v0, 9
	syscall
	la $a0, VList
	sw $a0,  0($v0)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_1
	# calling the method Init_VList of type VList
	#load the variable t_0
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	# Setting value of the attribute vertices in the instance self_Graph to t_1
	#load the variable t_1
	lw $v0, -4($fp)
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 4($v1)
	
	# assign (add here the expr.to_string) to t_2
	li $a0, 8
	li $v0, 9
	syscall
	la $a0, EList
	sw $a0,  0($v0)
	sw $v0, -8($fp)
	
	lw $v0, -8($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_3
	# calling the method Init_EList of type EList
	#load the variable t_2
	lw $v0, -8($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -12($fp)
	
	# Setting value of the attribute edges in the instance self_Graph to t_3
	#load the variable t_3
	lw $v0, -12($fp)
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 8($v1)
	
	# return the value of the function in the register $v0
	#load the variable self_Graph
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 16
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
outgoing_Vertice:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_26
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_27
	#load the variable t_26
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_27
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
number_Vertice:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_28
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_29
	#load the variable t_28
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_29
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
init_Vertice:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 4
	
	# Setting value of the attribute num in the instance self_Vertice to n_30
	#load the variable n_30
	lw $v0, 12($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 4($v1)
	
	# assign (add here the expr.to_string) to t_31
	#load the variable self_Vertice
	lw $v0, 16($fp)
	sw $v0, -0($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_31
	lw $v0, -0($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 4
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
add_out_Vertice:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 20
	
	# assign (add here the expr.to_string) to t_33
	lw $v1, 16($fp)
	lw $v0, 8($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_34
	#load the variable t_33
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_35
	#load the variable s_32
	lw $v0, 12($fp)
	sw $v0, -8($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -8($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_36
	# calling the method cons of type EList
	#load the variable t_34
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -12($fp)
	
	# Setting value of the attribute out in the instance self_Vertice to t_36
	#load the variable t_36
	lw $v0, -12($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 8($v1)
	
	# assign (add here the expr.to_string) to t_37
	#load the variable self_Vertice
	lw $v0, 16($fp)
	sw $v0, -16($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_37
	lw $v0, -16($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 20
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_Vertice:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 28
	
	# assign (add here the expr.to_string) to t_38
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_39
	#load the variable t_38
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_40
	# calling the method out_int of type Vertice
	#load the variable self_Vertice
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 28($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_41
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_42
	#load the variable t_41
	lw $v0, -12($fp)
	sw $v0, -16($fp)
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_43
	# calling the method print of type EList
	#load the variable t_42
	lw $v0, -16($fp)
	lw $t0, 0($v0)
	lw $v1, 60($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_44
	#load the variable t_43
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_44
	lw $v0, -24($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 28
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Vertice:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_Vertice
	jal Init_IO
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	# Setting value of the attribute num in the instance self_Vertice to 0
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 4($v1)
	
	# assign (add here the expr.to_string) to t_24
	li $a0, 8
	li $v0, 9
	syscall
	la $a0, EList
	sw $a0,  0($v0)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_25
	# calling the method Init_EList of type EList
	#load the variable t_24
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	# Setting value of the attribute out in the instance self_Vertice to t_25
	#load the variable t_25
	lw $v0, -4($fp)
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 8($v1)
	
	# return the value of the function in the register $v0
	#load the variable self_Vertice
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
init_Edge:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 4
	
	# Setting value of the attribute from in the instance self_Edge to f_45
	#load the variable f_45
	lw $v0, 20($fp)
	move $s2, $v0
	lw $v1, 24($fp)
	sw $s2, 4($v1)
	
	# Setting value of the attribute to in the instance self_Edge to t_46
	#load the variable t_46
	lw $v0, 16($fp)
	move $s2, $v0
	lw $v1, 24($fp)
	sw $s2, 8($v1)
	
	# Setting value of the attribute weight in the instance self_Edge to w_47
	#load the variable w_47
	lw $v0, 12($fp)
	move $s2, $v0
	lw $v1, 24($fp)
	sw $s2, 12($v1)
	
	# assign (add here the expr.to_string) to t_48
	#load the variable self_Edge
	lw $v0, 24($fp)
	sw $v0, -0($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_48
	lw $v0, -0($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 4
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_Edge:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 76
	
	# assign (add here the expr.to_string) to t_49
	#load the string str_0
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_0
	sw $v1, 4($v0)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_50
	#load the variable t_49
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_51
	# calling the method out_string of type Edge
	#load the variable self_Edge
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_52
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_53
	#load the variable t_52
	lw $v0, -12($fp)
	sw $v0, -16($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_54
	# calling the method out_int of type Edge
	#load the variable self_Edge
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 28($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_55
	#load the string str_1
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_1
	sw $v1, 4($v0)
	sw $v0, -24($fp)
	
	# assign (add here the expr.to_string) to t_56
	#load the variable t_55
	lw $v0, -24($fp)
	sw $v0, -28($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -28($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_57
	# calling the method out_string of type Edge
	#load the variable self_Edge
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -32($fp)
	
	# assign (add here the expr.to_string) to t_58
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -36($fp)
	
	# assign (add here the expr.to_string) to t_59
	#load the variable t_58
	lw $v0, -36($fp)
	sw $v0, -40($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -40($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_60
	# calling the method out_int of type Edge
	#load the variable self_Edge
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 28($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -44($fp)
	
	# assign (add here the expr.to_string) to t_61
	#load the string str_2
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_2
	sw $v1, 4($v0)
	sw $v0, -48($fp)
	
	# assign (add here the expr.to_string) to t_62
	#load the variable t_61
	lw $v0, -48($fp)
	sw $v0, -52($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -52($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_63
	# calling the method out_string of type Edge
	#load the variable self_Edge
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -56($fp)
	
	# assign (add here the expr.to_string) to t_64
	lw $v1, 12($fp)
	lw $v0, 12($v1)
	sw $v0, -60($fp)
	
	# assign (add here the expr.to_string) to t_65
	#load the variable t_64
	lw $v0, -60($fp)
	sw $v0, -64($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -64($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_66
	# calling the method out_int of type Edge
	#load the variable self_Edge
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 28($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -68($fp)
	
	# assign (add here the expr.to_string) to t_67
	#load the variable t_66
	lw $v0, -68($fp)
	sw $v0, -72($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_67
	lw $v0, -72($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 76
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Edge:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_Edge
	jal Init_IO
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	# Setting value of the attribute from in the instance self_Edge to 0
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 4($v1)
	
	# Setting value of the attribute to in the instance self_Edge to 0
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 8($v1)
	
	# Setting value of the attribute weight in the instance self_Edge to 0
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 12($v1)
	
	# return the value of the function in the register $v0
	#load the variable self_Edge
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
isNil_EList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_68
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_69
	#load the variable t_68
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_69
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
head_EList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 12
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_70
	# calling the method abort of type EList
	#load the variable self_EList
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 12($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_71
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_72
	#load the variable t_71
	lw $v0, -4($fp)
	sw $v0, -8($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_72
	lw $v0, -8($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 12
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
tail_EList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_73
	# calling the method abort of type EList
	#load the variable self_EList
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 12($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_74
	#load the variable self_EList
	lw $v0, 12($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_74
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
cons_EList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 28
	
	# assign (add here the expr.to_string) to t_76
	li $a0, 12
	li $v0, 9
	syscall
	la $a0, ECons
	sw $a0,  0($v0)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_77
	# calling the method Init_ECons of type ECons
	#load the variable t_76
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_78
	#load the variable t_77
	lw $v0, -4($fp)
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_79
	#load the variable e_75
	lw $v0, 12($fp)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_80
	#load the variable self_EList
	lw $v0, 16($fp)
	sw $v0, -16($fp)
	
	lw $v0, -8($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_81
	# calling the method init of type ECons
	#load the variable t_78
	lw $v0, -8($fp)
	lw $t0, 0($v0)
	lw $v1, 64($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_82
	#load the variable t_81
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_82
	lw $v0, -24($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 28
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
append_EList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 48
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_84
	# calling the method isNil of type EList
	#load the variable self_EList
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 40($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_85
	#load the variable t_84
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $t1, -4($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_0
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_87
	# calling the method tail of type EList
	#load the variable self_EList
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 48($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_88
	#load the variable t_87
	lw $v0, -12($fp)
	sw $v0, -16($fp)
	
	# assign (add here the expr.to_string) to t_89
	#load the variable l_83
	lw $v0, 12($fp)
	sw $v0, -20($fp)
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -20($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_90
	# calling the method append of type EList
	#load the variable t_88
	lw $v0, -16($fp)
	lw $t0, 0($v0)
	lw $v1, 56($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -24($fp)
	
	# assign (add here the expr.to_string) to t_91
	#load the variable t_90
	lw $v0, -24($fp)
	sw $v0, -28($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_92
	# calling the method head of type EList
	#load the variable self_EList
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 44($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -32($fp)
	
	# assign (add here the expr.to_string) to t_93
	#load the variable t_92
	lw $v0, -32($fp)
	sw $v0, -36($fp)
	
	lw $v0, -28($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -36($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_94
	# calling the method cons of type EList
	#load the variable t_91
	lw $v0, -28($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -40($fp)
	
	# assign (add here the expr.to_string) to t_86
	#load the variable t_94
	lw $v0, -40($fp)
	sw $v0, -8($fp)
	
	j ifend_0
	then_0:
	# assign (add here the expr.to_string) to t_86
	#load the variable l_83
	lw $v0, 12($fp)
	sw $v0, -8($fp)
	
	ifend_0:
	# assign (add here the expr.to_string) to t_95
	#load the variable t_86
	lw $v0, -8($fp)
	sw $v0, -44($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_95
	lw $v0, -44($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 48
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_EList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 16
	
	# assign (add here the expr.to_string) to t_96
	#load the string str_3
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_3
	sw $v1, 4($v0)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_97
	#load the variable t_96
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_98
	# calling the method out_string of type EList
	#load the variable self_EList
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_99
	#load the variable t_98
	lw $v0, -8($fp)
	sw $v0, -12($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_99
	lw $v0, -12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 16
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_EList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_EList
	jal Init_IO
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	# return the value of the function in the register $v0
	#load the variable self_EList
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
isNil_ECons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_100
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_101
	#load the variable t_100
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_101
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
head_ECons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_102
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_103
	#load the variable t_102
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_103
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
tail_ECons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_104
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_105
	#load the variable t_104
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_105
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
init_ECons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 4
	
	# Setting value of the attribute car in the instance self_ECons to e_106
	#load the variable e_106
	lw $v0, 16($fp)
	move $s2, $v0
	lw $v1, 20($fp)
	sw $s2, 4($v1)
	
	# Setting value of the attribute cdr in the instance self_ECons to rest_107
	#load the variable rest_107
	lw $v0, 12($fp)
	move $s2, $v0
	lw $v1, 20($fp)
	sw $s2, 8($v1)
	
	# assign (add here the expr.to_string) to t_108
	#load the variable self_ECons
	lw $v0, 20($fp)
	sw $v0, -0($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_108
	lw $v0, -0($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 4
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_ECons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 28
	
	# assign (add here the expr.to_string) to t_109
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_110
	#load the variable t_109
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_111
	# calling the method print of type Edge
	#load the variable t_110
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 44($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_112
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_113
	#load the variable t_112
	lw $v0, -12($fp)
	sw $v0, -16($fp)
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_114
	# calling the method print of type EList
	#load the variable t_113
	lw $v0, -16($fp)
	lw $t0, 0($v0)
	lw $v1, 60($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_115
	#load the variable t_114
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_115
	lw $v0, -24($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 28
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_ECons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_ECons
	jal Init_EList
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	# return the value of the function in the register $v0
	#load the variable self_ECons
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
isNil_VList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_116
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_117
	#load the variable t_116
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_117
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
head_VList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 12
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_118
	# calling the method abort of type VList
	#load the variable self_VList
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 12($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_119
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_120
	#load the variable t_119
	lw $v0, -4($fp)
	sw $v0, -8($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_120
	lw $v0, -8($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 12
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
tail_VList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_121
	# calling the method abort of type VList
	#load the variable self_VList
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 12($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_122
	#load the variable self_VList
	lw $v0, 12($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_122
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
cons_VList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 28
	
	# assign (add here the expr.to_string) to t_124
	li $a0, 12
	li $v0, 9
	syscall
	la $a0, VCons
	sw $a0,  0($v0)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_125
	# calling the method Init_VCons of type VCons
	#load the variable t_124
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_126
	#load the variable t_125
	lw $v0, -4($fp)
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_127
	#load the variable v_123
	lw $v0, 12($fp)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_128
	#load the variable self_VList
	lw $v0, 16($fp)
	sw $v0, -16($fp)
	
	lw $v0, -8($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_129
	# calling the method init of type VCons
	#load the variable t_126
	lw $v0, -8($fp)
	lw $t0, 0($v0)
	lw $v1, 60($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_130
	#load the variable t_129
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_130
	lw $v0, -24($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 28
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_VList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 16
	
	# assign (add here the expr.to_string) to t_131
	#load the string str_4
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_4
	sw $v1, 4($v0)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_132
	#load the variable t_131
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_133
	# calling the method out_string of type VList
	#load the variable self_VList
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_134
	#load the variable t_133
	lw $v0, -8($fp)
	sw $v0, -12($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_134
	lw $v0, -12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 16
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_VList:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_VList
	jal Init_IO
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	# return the value of the function in the register $v0
	#load the variable self_VList
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
isNil_VCons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_135
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_136
	#load the variable t_135
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_136
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
head_VCons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_137
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_138
	#load the variable t_137
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_138
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
tail_VCons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 8
	
	# assign (add here the expr.to_string) to t_139
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_140
	#load the variable t_139
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_140
	lw $v0, -4($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 8
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
init_VCons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 4
	
	# Setting value of the attribute car in the instance self_VCons to v_141
	#load the variable v_141
	lw $v0, 16($fp)
	move $s2, $v0
	lw $v1, 20($fp)
	sw $s2, 4($v1)
	
	# Setting value of the attribute cdr in the instance self_VCons to rest_142
	#load the variable rest_142
	lw $v0, 12($fp)
	move $s2, $v0
	lw $v1, 20($fp)
	sw $s2, 8($v1)
	
	# assign (add here the expr.to_string) to t_143
	#load the variable self_VCons
	lw $v0, 20($fp)
	sw $v0, -0($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_143
	lw $v0, -0($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 4
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
print_VCons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 28
	
	# assign (add here the expr.to_string) to t_144
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_145
	#load the variable t_144
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_146
	# calling the method print of type Vertice
	#load the variable t_145
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 56($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_147
	lw $v1, 12($fp)
	lw $v0, 8($v1)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_148
	#load the variable t_147
	lw $v0, -12($fp)
	sw $v0, -16($fp)
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_149
	# calling the method print of type VList
	#load the variable t_148
	lw $v0, -16($fp)
	lw $t0, 0($v0)
	lw $v1, 56($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_150
	#load the variable t_149
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_150
	lw $v0, -24($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 28
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_VCons:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_VCons
	jal Init_VList
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	# return the value of the function in the register $v0
	#load the variable self_VCons
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
read_input_Parse:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 108
	
	# assign (add here the expr.to_string) to t_154
	li $a0, 12
	li $v0, 9
	syscall
	la $a0, Graph
	sw $a0,  0($v0)
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_155
	# calling the method Init_Graph of type Graph
	#load the variable t_154
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to g_153
	#load the variable t_155
	lw $v0, -8($fp)
	sw $v0, -0($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_157
	# calling the method in_string of type Parse
	#load the variable self_Parse
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -16($fp)
	
	# assign (add here the expr.to_string) to line_156
	#load the variable t_157
	lw $v0, -16($fp)
	sw $v0, -12($fp)
	
	while_0:
	# assign (add here the expr.to_string) to t_158
	lw $v1, 12($fp)
	lw $v0, 4($v1)
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_159
	#load the variable t_158
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	# assign (add here the expr.to_string) to t_160
	#load the string str_5
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_5
	sw $v1, 4($v0)
	sw $v0, -28($fp)
	
	# assign (add here the expr.to_string) to t_161
	#load the variable line_156
	lw $v0, -12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_160
	lw $v0, -28($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -32($fp)
	
	# assign (add here the expr.to_string) to t_162
	#load the variable t_161
	lw $v0, -32($fp)
	sw $v0, -36($fp)
	
	# assign (add here the expr.to_string) to t_163
	#load the variable t_162
	lw $v0, -36($fp)
	lw $t0, 4($v0)
	li $t1, 1
	xor $t0, $t0, $t1
	andi $t0, $t0, 0x01
	sw $t0, 4($v0)
	sw $v0, -40($fp)
	
	# assign (add here the expr.to_string) to t_164
	#load the variable t_163
	lw $v0, -40($fp)
	sw $v0, -44($fp)
	
	# assign (add here the expr.to_string) to t_165
	#load the string str_6
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_6
	sw $v1, 4($v0)
	sw $v0, -48($fp)
	
	# assign (add here the expr.to_string) to t_166
	#load the variable line_156
	lw $v0, -12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_165
	lw $v0, -48($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -52($fp)
	
	# assign (add here the expr.to_string) to t_167
	#load the variable t_166
	lw $v0, -52($fp)
	sw $v0, -56($fp)
	
	# assign (add here the expr.to_string) to t_168
	#load the variable t_167
	lw $v0, -56($fp)
	lw $t0, 4($v0)
	li $t1, 1
	xor $t0, $t0, $t1
	andi $t0, $t0, 0x01
	sw $t0, 4($v0)
	sw $v0, -60($fp)
	
	# assign (add here the expr.to_string) to t_169
	#load the variable t_168
	lw $v0, -60($fp)
	sw $v0, -64($fp)
	
	lw $v0, -24($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -44($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -64($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_170
	# calling the method and of type BoolOp
	#load the variable t_159
	lw $v0, -24($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -68($fp)
	
	# assign (add here the expr.to_string) to t_171
	#load the variable t_170
	lw $v0, -68($fp)
	sw $v0, -72($fp)
	
	lw $t1, -72($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, body_0
	j pool_0
	body_0:
	# assign (add here the expr.to_string) to t_173
	#load the variable g_153
	lw $v0, -0($fp)
	sw $v0, -80($fp)
	
	# assign (add here the expr.to_string) to t_174
	#load the variable line_156
	lw $v0, -12($fp)
	sw $v0, -84($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -84($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_175
	# calling the method parse_line of type Parse
	#load the variable self_Parse
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 44($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -88($fp)
	
	# assign (add here the expr.to_string) to t_176
	#load the variable t_175
	lw $v0, -88($fp)
	sw $v0, -92($fp)
	
	lw $v0, -80($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -92($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_177
	# calling the method add_vertice of type Graph
	#load the variable t_173
	lw $v0, -80($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -96($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_178
	# calling the method in_string of type Parse
	#load the variable self_Parse
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -100($fp)
	
	# assign (add here the expr.to_string) to line_156
	#load the variable t_178
	lw $v0, -100($fp)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_172
	#load the variable line_156
	lw $v0, -12($fp)
	sw $v0, -76($fp)
	
	j while_0
	pool_0:
	# assign (add here the expr.to_string) to t_179
	#load the variable g_153
	lw $v0, -0($fp)
	sw $v0, -104($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_179
	lw $v0, -104($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 108
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
parse_line_Parse:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 148
	
	# assign (add here the expr.to_string) to t_182
	li $a0, 12
	li $v0, 9
	syscall
	la $a0, Vertice
	sw $a0,  0($v0)
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_183
	# calling the method Init_Vertice of type Vertice
	#load the variable t_182
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_184
	#load the variable t_183
	lw $v0, -8($fp)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_185
	#load the variable s_180
	lw $v0, 12($fp)
	sw $v0, -16($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_186
	# calling the method a2i of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_187
	#load the variable t_186
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	lw $v0, -12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -24($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_188
	# calling the method init of type Vertice
	#load the variable t_184
	lw $v0, -12($fp)
	lw $t0, 0($v0)
	lw $v1, 48($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -28($fp)
	
	# assign (add here the expr.to_string) to v_181
	#load the variable t_188
	lw $v0, -28($fp)
	sw $v0, -0($fp)
	
	while_1:
	# assign (add here the expr.to_string) to t_189
	lw $v1, 16($fp)
	lw $v0, 8($v1)
	sw $v0, -32($fp)
	
	# assign (add here the expr.to_string) to t_190
	#load the variable t_189
	lw $v0, -32($fp)
	sw $v0, -36($fp)
	
	lw $v0, -36($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_191
	# calling the method length of type String
	#load the variable t_190
	lw $v0, -36($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -40($fp)
	
	# assign (add here the expr.to_string) to t_192
	#load the variable t_191
	lw $v0, -40($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -44($fp)
	
	# assign (add here the expr.to_string) to t_193
	#load the variable t_192
	lw $v0, -44($fp)
	sw $v0, -48($fp)
	
	# assign (add here the expr.to_string) to t_194
	#load the variable t_193
	lw $v0, -48($fp)
	lw $t0, 4($v0)
	li $t1, 1
	xor $t0, $t0, $t1
	andi $t0, $t0, 0x01
	sw $t0, 4($v0)
	sw $v0, -52($fp)
	
	# assign (add here the expr.to_string) to t_195
	#load the variable t_194
	lw $v0, -52($fp)
	sw $v0, -56($fp)
	
	lw $t1, -56($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, body_1
	j pool_1
	body_1:
	# assign (add here the expr.to_string) to t_198
	lw $v1, 16($fp)
	lw $v0, 8($v1)
	sw $v0, -68($fp)
	
	# assign (add here the expr.to_string) to t_199
	#load the variable t_198
	lw $v0, -68($fp)
	sw $v0, -72($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -72($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_200
	# calling the method a2i of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -76($fp)
	
	# assign (add here the expr.to_string) to succ_197
	#load the variable t_200
	lw $v0, -76($fp)
	sw $v0, -64($fp)
	
	# assign (add here the expr.to_string) to t_202
	lw $v1, 16($fp)
	lw $v0, 8($v1)
	sw $v0, -84($fp)
	
	# assign (add here the expr.to_string) to t_203
	#load the variable t_202
	lw $v0, -84($fp)
	sw $v0, -88($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -88($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_204
	# calling the method a2i of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -92($fp)
	
	# assign (add here the expr.to_string) to weight_201
	#load the variable t_204
	lw $v0, -92($fp)
	sw $v0, -80($fp)
	
	# assign (add here the expr.to_string) to t_205
	#load the variable v_181
	lw $v0, -0($fp)
	sw $v0, -96($fp)
	
	# assign (add here the expr.to_string) to t_206
	li $a0, 16
	li $v0, 9
	syscall
	la $a0, Edge
	sw $a0,  0($v0)
	sw $v0, -100($fp)
	
	lw $v0, -100($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_207
	# calling the method Init_Edge of type Edge
	#load the variable t_206
	lw $v0, -100($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -104($fp)
	
	# assign (add here the expr.to_string) to t_208
	#load the variable t_207
	lw $v0, -104($fp)
	sw $v0, -108($fp)
	
	# assign (add here the expr.to_string) to t_209
	#load the variable v_181
	lw $v0, -0($fp)
	sw $v0, -112($fp)
	
	lw $v0, -112($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_210
	# calling the method number of type Vertice
	#load the variable t_209
	lw $v0, -112($fp)
	lw $t0, 0($v0)
	lw $v1, 44($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -116($fp)
	
	# assign (add here the expr.to_string) to t_211
	#load the variable t_210
	lw $v0, -116($fp)
	sw $v0, -120($fp)
	
	# assign (add here the expr.to_string) to t_212
	#load the variable succ_197
	lw $v0, -64($fp)
	sw $v0, -124($fp)
	
	# assign (add here the expr.to_string) to t_213
	#load the variable weight_201
	lw $v0, -80($fp)
	sw $v0, -128($fp)
	
	lw $v0, -108($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -120($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -124($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -128($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_214
	# calling the method init of type Edge
	#load the variable t_208
	lw $v0, -108($fp)
	lw $t0, 0($v0)
	lw $v1, 40($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -132($fp)
	
	# assign (add here the expr.to_string) to t_215
	#load the variable t_214
	lw $v0, -132($fp)
	sw $v0, -136($fp)
	
	lw $v0, -96($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -136($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_216
	# calling the method add_out of type Vertice
	#load the variable t_205
	lw $v0, -96($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -140($fp)
	
	# assign (add here the expr.to_string) to t_196
	#load the variable t_216
	lw $v0, -140($fp)
	sw $v0, -60($fp)
	
	j while_1
	pool_1:
	# assign (add here the expr.to_string) to t_217
	#load the variable v_181
	lw $v0, -0($fp)
	sw $v0, -144($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_217
	lw $v0, -144($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 148
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
c2i_Parse:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 168
	
	# assign (add here the expr.to_string) to t_219
	#load the string str_7
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_7
	sw $v1, 4($v0)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_220
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_219
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_221
	#load the variable t_220
	lw $v0, -4($fp)
	sw $v0, -8($fp)
	
	lw $t1, -8($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_1
	# assign (add here the expr.to_string) to t_223
	#load the string str_8
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_8
	sw $v1, 4($v0)
	sw $v0, -16($fp)
	
	# assign (add here the expr.to_string) to t_224
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_223
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_225
	#load the variable t_224
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	lw $t1, -24($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_2
	# assign (add here the expr.to_string) to t_227
	#load the string str_9
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_9
	sw $v1, 4($v0)
	sw $v0, -32($fp)
	
	# assign (add here the expr.to_string) to t_228
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_227
	lw $v0, -32($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -36($fp)
	
	# assign (add here the expr.to_string) to t_229
	#load the variable t_228
	lw $v0, -36($fp)
	sw $v0, -40($fp)
	
	lw $t1, -40($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_3
	# assign (add here the expr.to_string) to t_231
	#load the string str_10
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_10
	sw $v1, 4($v0)
	sw $v0, -48($fp)
	
	# assign (add here the expr.to_string) to t_232
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_231
	lw $v0, -48($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -52($fp)
	
	# assign (add here the expr.to_string) to t_233
	#load the variable t_232
	lw $v0, -52($fp)
	sw $v0, -56($fp)
	
	lw $t1, -56($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_4
	# assign (add here the expr.to_string) to t_235
	#load the string str_11
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_11
	sw $v1, 4($v0)
	sw $v0, -64($fp)
	
	# assign (add here the expr.to_string) to t_236
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_235
	lw $v0, -64($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -68($fp)
	
	# assign (add here the expr.to_string) to t_237
	#load the variable t_236
	lw $v0, -68($fp)
	sw $v0, -72($fp)
	
	lw $t1, -72($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_5
	# assign (add here the expr.to_string) to t_239
	#load the string str_12
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_12
	sw $v1, 4($v0)
	sw $v0, -80($fp)
	
	# assign (add here the expr.to_string) to t_240
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_239
	lw $v0, -80($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -84($fp)
	
	# assign (add here the expr.to_string) to t_241
	#load the variable t_240
	lw $v0, -84($fp)
	sw $v0, -88($fp)
	
	lw $t1, -88($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_6
	# assign (add here the expr.to_string) to t_243
	#load the string str_13
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_13
	sw $v1, 4($v0)
	sw $v0, -96($fp)
	
	# assign (add here the expr.to_string) to t_244
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_243
	lw $v0, -96($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -100($fp)
	
	# assign (add here the expr.to_string) to t_245
	#load the variable t_244
	lw $v0, -100($fp)
	sw $v0, -104($fp)
	
	lw $t1, -104($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_7
	# assign (add here the expr.to_string) to t_247
	#load the string str_14
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_14
	sw $v1, 4($v0)
	sw $v0, -112($fp)
	
	# assign (add here the expr.to_string) to t_248
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_247
	lw $v0, -112($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -116($fp)
	
	# assign (add here the expr.to_string) to t_249
	#load the variable t_248
	lw $v0, -116($fp)
	sw $v0, -120($fp)
	
	lw $t1, -120($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_8
	# assign (add here the expr.to_string) to t_251
	#load the string str_15
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_15
	sw $v1, 4($v0)
	sw $v0, -128($fp)
	
	# assign (add here the expr.to_string) to t_252
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_251
	lw $v0, -128($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -132($fp)
	
	# assign (add here the expr.to_string) to t_253
	#load the variable t_252
	lw $v0, -132($fp)
	sw $v0, -136($fp)
	
	lw $t1, -136($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_9
	# assign (add here the expr.to_string) to t_255
	#load the string str_16
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_16
	sw $v1, 4($v0)
	sw $v0, -144($fp)
	
	# assign (add here the expr.to_string) to t_256
	#load the variable char_218
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_255
	lw $v0, -144($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -148($fp)
	
	# assign (add here the expr.to_string) to t_257
	#load the variable t_256
	lw $v0, -148($fp)
	sw $v0, -152($fp)
	
	lw $t1, -152($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_10
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_259
	# calling the method abort of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 12($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -160($fp)
	
	# assign (add here the expr.to_string) to t_258
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -156($fp)
	
	j ifend_10
	then_10:
	# assign (add here the expr.to_string) to t_258
	# Creating Int instance for atomic 9
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 9
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -156($fp)
	
	ifend_10:
	# assign (add here the expr.to_string) to t_254
	#load the variable t_258
	lw $v0, -156($fp)
	sw $v0, -140($fp)
	
	j ifend_9
	then_9:
	# assign (add here the expr.to_string) to t_254
	# Creating Int instance for atomic 8
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 8
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -140($fp)
	
	ifend_9:
	# assign (add here the expr.to_string) to t_250
	#load the variable t_254
	lw $v0, -140($fp)
	sw $v0, -124($fp)
	
	j ifend_8
	then_8:
	# assign (add here the expr.to_string) to t_250
	# Creating Int instance for atomic 7
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 7
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -124($fp)
	
	ifend_8:
	# assign (add here the expr.to_string) to t_246
	#load the variable t_250
	lw $v0, -124($fp)
	sw $v0, -108($fp)
	
	j ifend_7
	then_7:
	# assign (add here the expr.to_string) to t_246
	# Creating Int instance for atomic 6
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 6
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -108($fp)
	
	ifend_7:
	# assign (add here the expr.to_string) to t_242
	#load the variable t_246
	lw $v0, -108($fp)
	sw $v0, -92($fp)
	
	j ifend_6
	then_6:
	# assign (add here the expr.to_string) to t_242
	# Creating Int instance for atomic 5
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 5
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -92($fp)
	
	ifend_6:
	# assign (add here the expr.to_string) to t_238
	#load the variable t_242
	lw $v0, -92($fp)
	sw $v0, -76($fp)
	
	j ifend_5
	then_5:
	# assign (add here the expr.to_string) to t_238
	# Creating Int instance for atomic 4
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 4
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -76($fp)
	
	ifend_5:
	# assign (add here the expr.to_string) to t_234
	#load the variable t_238
	lw $v0, -76($fp)
	sw $v0, -60($fp)
	
	j ifend_4
	then_4:
	# assign (add here the expr.to_string) to t_234
	# Creating Int instance for atomic 3
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 3
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -60($fp)
	
	ifend_4:
	# assign (add here the expr.to_string) to t_230
	#load the variable t_234
	lw $v0, -60($fp)
	sw $v0, -44($fp)
	
	j ifend_3
	then_3:
	# assign (add here the expr.to_string) to t_230
	# Creating Int instance for atomic 2
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 2
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -44($fp)
	
	ifend_3:
	# assign (add here the expr.to_string) to t_226
	#load the variable t_230
	lw $v0, -44($fp)
	sw $v0, -28($fp)
	
	j ifend_2
	then_2:
	# assign (add here the expr.to_string) to t_226
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -28($fp)
	
	ifend_2:
	# assign (add here the expr.to_string) to t_222
	#load the variable t_226
	lw $v0, -28($fp)
	sw $v0, -12($fp)
	
	j ifend_1
	then_1:
	# assign (add here the expr.to_string) to t_222
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -12($fp)
	
	ifend_1:
	# assign (add here the expr.to_string) to t_260
	#load the variable t_222
	lw $v0, -12($fp)
	sw $v0, -164($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_260
	lw $v0, -164($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 168
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
a2i_Parse:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 176
	
	# assign (add here the expr.to_string) to t_262
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_263
	# calling the method length of type String
	#load the variable t_262
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to t_264
	#load the variable t_263
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_265
	#load the variable t_264
	lw $v0, -8($fp)
	sw $v0, -12($fp)
	
	lw $t1, -12($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_11
	# assign (add here the expr.to_string) to t_267
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_268
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -24($fp)
	
	# assign (add here the expr.to_string) to t_269
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -28($fp)
	
	lw $v0, -20($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -24($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -28($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_270
	# calling the method substr of type String
	#load the variable t_267
	lw $v0, -20($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -32($fp)
	
	# assign (add here the expr.to_string) to t_271
	#load the string str_17
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_17
	sw $v1, 4($v0)
	sw $v0, -36($fp)
	
	# assign (add here the expr.to_string) to t_272
	#load the variable t_270
	lw $v0, -32($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_271
	lw $v0, -36($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -40($fp)
	
	# assign (add here the expr.to_string) to t_273
	#load the variable t_272
	lw $v0, -40($fp)
	sw $v0, -44($fp)
	
	lw $t1, -44($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_12
	# assign (add here the expr.to_string) to t_275
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -52($fp)
	
	# assign (add here the expr.to_string) to t_276
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -56($fp)
	
	# assign (add here the expr.to_string) to t_277
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -60($fp)
	
	lw $v0, -52($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -56($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -60($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_278
	# calling the method substr of type String
	#load the variable t_275
	lw $v0, -52($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -64($fp)
	
	# assign (add here the expr.to_string) to t_279
	#load the string str_18
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_18
	sw $v1, 4($v0)
	sw $v0, -68($fp)
	
	# assign (add here the expr.to_string) to t_280
	#load the variable t_278
	lw $v0, -64($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_279
	lw $v0, -68($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -72($fp)
	
	# assign (add here the expr.to_string) to t_281
	#load the variable t_280
	lw $v0, -72($fp)
	sw $v0, -76($fp)
	
	lw $t1, -76($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_13
	# assign (add here the expr.to_string) to t_283
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -84($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -84($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_284
	# calling the method a2i_aux of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 56($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -88($fp)
	
	# assign (add here the expr.to_string) to t_282
	#load the variable t_284
	lw $v0, -88($fp)
	sw $v0, -80($fp)
	
	j ifend_13
	then_13:
	# assign (add here the expr.to_string) to t_285
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -92($fp)
	
	# assign (add here the expr.to_string) to t_286
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -96($fp)
	
	# assign (add here the expr.to_string) to t_287
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -100($fp)
	
	lw $v0, -100($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_288
	# calling the method length of type String
	#load the variable t_287
	lw $v0, -100($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -104($fp)
	
	# assign (add here the expr.to_string) to t_289
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable t_288
	lw $v0, -104($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sub $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -108($fp)
	
	# assign (add here the expr.to_string) to t_290
	#load the variable t_289
	lw $v0, -108($fp)
	sw $v0, -112($fp)
	
	lw $v0, -92($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -96($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -112($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_291
	# calling the method substr of type String
	#load the variable t_285
	lw $v0, -92($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -116($fp)
	
	# assign (add here the expr.to_string) to t_292
	#load the variable t_291
	lw $v0, -116($fp)
	sw $v0, -120($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -120($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_293
	# calling the method a2i of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 52($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -124($fp)
	
	# assign (add here the expr.to_string) to t_282
	#load the variable t_293
	lw $v0, -124($fp)
	sw $v0, -80($fp)
	
	ifend_13:
	# assign (add here the expr.to_string) to t_274
	#load the variable t_282
	lw $v0, -80($fp)
	sw $v0, -48($fp)
	
	j ifend_12
	then_12:
	# assign (add here the expr.to_string) to t_294
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -128($fp)
	
	# assign (add here the expr.to_string) to t_295
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -132($fp)
	
	# assign (add here the expr.to_string) to t_296
	#load the variable s_261
	lw $v0, 12($fp)
	sw $v0, -136($fp)
	
	lw $v0, -136($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_297
	# calling the method length of type String
	#load the variable t_296
	lw $v0, -136($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -140($fp)
	
	# assign (add here the expr.to_string) to t_298
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable t_297
	lw $v0, -140($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sub $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -144($fp)
	
	# assign (add here the expr.to_string) to t_299
	#load the variable t_298
	lw $v0, -144($fp)
	sw $v0, -148($fp)
	
	lw $v0, -128($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -132($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -148($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_300
	# calling the method substr of type String
	#load the variable t_294
	lw $v0, -128($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -152($fp)
	
	# assign (add here the expr.to_string) to t_301
	#load the variable t_300
	lw $v0, -152($fp)
	sw $v0, -156($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -156($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_302
	# calling the method a2i_aux of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 56($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -160($fp)
	
	# assign (add here the expr.to_string) to t_303
	#load the variable t_302
	lw $v0, -160($fp)
	sw $v0, -164($fp)
	
	# assign (add here the expr.to_string) to t_304
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_303
	lw $v0, -164($fp)
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sub $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -168($fp)
	
	# assign (add here the expr.to_string) to t_274
	#load the variable t_304
	lw $v0, -168($fp)
	sw $v0, -48($fp)
	
	ifend_12:
	# assign (add here the expr.to_string) to t_266
	#load the variable t_274
	lw $v0, -48($fp)
	sw $v0, -16($fp)
	
	j ifend_11
	then_11:
	# assign (add here the expr.to_string) to t_266
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -16($fp)
	
	ifend_11:
	# assign (add here the expr.to_string) to t_305
	#load the variable t_266
	lw $v0, -16($fp)
	sw $v0, -172($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_305
	lw $v0, -172($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 176
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
a2i_aux_Parse:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 216
	
	# assign (add here the expr.to_string) to int_307
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_309
	#load the variable s_306
	lw $v0, 12($fp)
	sw $v0, -8($fp)
	
	lw $v0, -8($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_310
	# calling the method length of type String
	#load the variable t_309
	lw $v0, -8($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to j_308
	#load the variable t_310
	lw $v0, -12($fp)
	sw $v0, -4($fp)
	
	# assign (add here the expr.to_string) to i_311
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -16($fp)
	
	while_2:
	# assign (add here the expr.to_string) to t_312
	#load the variable i_311
	lw $v0, -16($fp)
	move $t1, $v0
	lw $t1, 4($t1)
	# push $t1 to the stack
	sw $t1, 0($sp)
	addi $sp $sp -4
	
	#load the variable j_308
	lw $v0, -4($fp)
	# pop the top of the stack to $t1
	addi $sp $sp 4
	lw $t1, 0($sp)
	
	move $t2, $v0
	lw $t2, 4($t2)
	slt $t3, $t1, $t2
	la $t4, Bool
	li $a0, 8
	li $v0, 9
	syscall
	sw $t4, 0($v0)
	sw $t3, 4($v0)
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_313
	#load the variable t_312
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	lw $t1, -24($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, body_2
	j pool_2
	body_2:
	# assign (add here the expr.to_string) to t_316
	#load the variable s_306
	lw $v0, 12($fp)
	sw $v0, -36($fp)
	
	# assign (add here the expr.to_string) to t_317
	#load the variable i_311
	lw $v0, -16($fp)
	sw $v0, -40($fp)
	
	# assign (add here the expr.to_string) to t_318
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -44($fp)
	
	lw $v0, -36($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -40($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -44($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_319
	# calling the method substr of type String
	#load the variable t_316
	lw $v0, -36($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -48($fp)
	
	# assign (add here the expr.to_string) to c_315
	#load the variable t_319
	lw $v0, -48($fp)
	sw $v0, -32($fp)
	
	# assign (add here the expr.to_string) to t_320
	#load the string str_19
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_19
	sw $v1, 4($v0)
	sw $v0, -52($fp)
	
	# assign (add here the expr.to_string) to t_321
	#load the variable c_315
	lw $v0, -32($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_320
	lw $v0, -52($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -56($fp)
	
	# assign (add here the expr.to_string) to t_322
	#load the variable t_321
	lw $v0, -56($fp)
	sw $v0, -60($fp)
	
	lw $t1, -60($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_14
	# assign (add here the expr.to_string) to t_324
	#load the string str_20
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_20
	sw $v1, 4($v0)
	sw $v0, -68($fp)
	
	# assign (add here the expr.to_string) to t_325
	#load the variable c_315
	lw $v0, -32($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_324
	lw $v0, -68($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -72($fp)
	
	# assign (add here the expr.to_string) to t_326
	#load the variable t_325
	lw $v0, -72($fp)
	sw $v0, -76($fp)
	
	lw $t1, -76($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_15
	# assign (add here the expr.to_string) to t_328
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable int_307
	lw $v0, -0($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 10
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 10
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	mult $t0, $t1
	mflo $t0
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -84($fp)
	
	# assign (add here the expr.to_string) to t_329
	#load the variable s_306
	lw $v0, 12($fp)
	sw $v0, -88($fp)
	
	# assign (add here the expr.to_string) to t_330
	#load the variable i_311
	lw $v0, -16($fp)
	sw $v0, -92($fp)
	
	# assign (add here the expr.to_string) to t_331
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	sw $v0, -96($fp)
	
	lw $v0, -88($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -92($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -96($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_332
	# calling the method substr of type String
	#load the variable t_329
	lw $v0, -88($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -100($fp)
	
	# assign (add here the expr.to_string) to t_333
	#load the variable t_332
	lw $v0, -100($fp)
	sw $v0, -104($fp)
	
	lw $v0, 16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -104($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_334
	# calling the method c2i of type Parse
	#load the variable self_Parse
	lw $v0, 16($fp)
	lw $t0, 0($v0)
	lw $v1, 48($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -108($fp)
	
	# assign (add here the expr.to_string) to t_335
	# computes the sum of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable t_328
	lw $v0, -84($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	#load the variable t_334
	lw $v0, -108($fp)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	lw $t1, 4($v0)
	add $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -112($fp)
	
	# assign (add here the expr.to_string) to int_307
	#load the variable t_335
	lw $v0, -112($fp)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_336
	# computes the sum of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable i_311
	lw $v0, -16($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	lw $t1, 4($v0)
	add $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -116($fp)
	
	# assign (add here the expr.to_string) to i_311
	#load the variable t_336
	lw $v0, -116($fp)
	sw $v0, -16($fp)
	
	# assign (add here the expr.to_string) to t_337
	#load the variable i_311
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	#load the variable j_308
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -120($fp)
	
	# assign (add here the expr.to_string) to t_338
	#load the variable t_337
	lw $v0, -120($fp)
	sw $v0, -124($fp)
	
	lw $t1, -124($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_16
	# assign (add here the expr.to_string) to t_340
	#load the string str_21
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_21
	sw $v1, 4($v0)
	sw $v0, -132($fp)
	
	# assign (add here the expr.to_string) to t_339
	#load the variable t_340
	lw $v0, -132($fp)
	sw $v0, -128($fp)
	
	j ifend_16
	then_16:
	# assign (add here the expr.to_string) to t_341
	#load the string str_22
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_22
	sw $v1, 4($v0)
	sw $v0, -136($fp)
	
	# Setting value of the attribute rest in the instance self_Parse to t_341
	#load the variable t_341
	lw $v0, -136($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 8($v1)
	
	# assign (add here the expr.to_string) to t_339
	#load the variable t_341
	lw $v0, -136($fp)
	sw $v0, -128($fp)
	
	ifend_16:
	# assign (add here the expr.to_string) to t_327
	#load the variable t_339
	lw $v0, -128($fp)
	sw $v0, -80($fp)
	
	j ifend_15
	then_15:
	# assign (add here the expr.to_string) to t_342
	#load the variable s_306
	lw $v0, 12($fp)
	sw $v0, -140($fp)
	
	# assign (add here the expr.to_string) to t_343
	# computes the sum of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable i_311
	lw $v0, -16($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	lw $t1, 4($v0)
	add $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -144($fp)
	
	# assign (add here the expr.to_string) to t_344
	#load the variable t_343
	lw $v0, -144($fp)
	sw $v0, -148($fp)
	
	# assign (add here the expr.to_string) to t_345
	#load the variable s_306
	lw $v0, 12($fp)
	sw $v0, -152($fp)
	
	lw $v0, -152($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_346
	# calling the method length of type String
	#load the variable t_345
	lw $v0, -152($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -156($fp)
	
	# assign (add here the expr.to_string) to t_347
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable t_346
	lw $v0, -156($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	#load the variable i_311
	lw $v0, -16($fp)
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sub $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -160($fp)
	
	# assign (add here the expr.to_string) to t_348
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable t_347
	lw $v0, -160($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sub $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -164($fp)
	
	# assign (add here the expr.to_string) to t_349
	#load the variable t_348
	lw $v0, -164($fp)
	sw $v0, -168($fp)
	
	lw $v0, -140($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -148($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -168($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_350
	# calling the method substr of type String
	#load the variable t_342
	lw $v0, -140($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -172($fp)
	
	# Setting value of the attribute rest in the instance self_Parse to t_350
	#load the variable t_350
	lw $v0, -172($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 8($v1)
	
	# assign (add here the expr.to_string) to i_311
	#load the variable j_308
	lw $v0, -4($fp)
	sw $v0, -16($fp)
	
	# assign (add here the expr.to_string) to t_327
	#load the variable i_311
	lw $v0, -16($fp)
	sw $v0, -80($fp)
	
	ifend_15:
	# assign (add here the expr.to_string) to t_323
	#load the variable t_327
	lw $v0, -80($fp)
	sw $v0, -64($fp)
	
	j ifend_14
	then_14:
	# assign (add here the expr.to_string) to t_351
	#load the variable s_306
	lw $v0, 12($fp)
	sw $v0, -176($fp)
	
	# assign (add here the expr.to_string) to t_352
	# computes the sum of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable i_311
	lw $v0, -16($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	lw $t1, 4($v0)
	add $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -180($fp)
	
	# assign (add here the expr.to_string) to t_353
	#load the variable t_352
	lw $v0, -180($fp)
	sw $v0, -184($fp)
	
	# assign (add here the expr.to_string) to t_354
	#load the variable s_306
	lw $v0, 12($fp)
	sw $v0, -188($fp)
	
	lw $v0, -188($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_355
	# calling the method length of type String
	#load the variable t_354
	lw $v0, -188($fp)
	lw $t0, 0($v0)
	lw $v1, 24($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -192($fp)
	
	# assign (add here the expr.to_string) to t_356
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable t_355
	lw $v0, -192($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	#load the variable i_311
	lw $v0, -16($fp)
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sub $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -196($fp)
	
	# assign (add here the expr.to_string) to t_357
	# computes the sub of (node.left.to_string) and (node.right.to_string) and stores it at $v0
	#load the variable t_356
	lw $v0, -196($fp)
	lw $t0, 4($v0)
	# push $t0 to the stack
	sw $t0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	lw $t1, 4($v0)
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sub $t0, $t0, $t1
	li $a0, 8
	li $v0, 9
	syscall
	la $t1, Int
	sw $t1, 0($v0)
	sw $t0, 4($v0)
	sw $v0, -200($fp)
	
	# assign (add here the expr.to_string) to t_358
	#load the variable t_357
	lw $v0, -200($fp)
	sw $v0, -204($fp)
	
	lw $v0, -176($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -184($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	lw $v0, -204($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_359
	# calling the method substr of type String
	#load the variable t_351
	lw $v0, -176($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -208($fp)
	
	# Setting value of the attribute rest in the instance self_Parse to t_359
	#load the variable t_359
	lw $v0, -208($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 8($v1)
	
	# assign (add here the expr.to_string) to i_311
	#load the variable j_308
	lw $v0, -4($fp)
	sw $v0, -16($fp)
	
	# assign (add here the expr.to_string) to t_323
	#load the variable i_311
	lw $v0, -16($fp)
	sw $v0, -64($fp)
	
	ifend_14:
	# assign (add here the expr.to_string) to t_314
	#load the variable t_323
	lw $v0, -64($fp)
	sw $v0, -28($fp)
	
	j while_2
	pool_2:
	# assign (add here the expr.to_string) to t_360
	#load the variable int_307
	lw $v0, -0($fp)
	sw $v0, -212($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_360
	lw $v0, -212($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 216
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Parse:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 12
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_Parse
	jal Init_IO
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	# assign (add here the expr.to_string) to t_151
	li $a0, 4
	li $v0, 9
	syscall
	la $a0, BoolOp
	sw $a0,  0($v0)
	sw $v0, -0($fp)
	
	lw $v0, -0($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_152
	# calling the method Init_BoolOp of type BoolOp
	#load the variable t_151
	lw $v0, -0($fp)
	lw $t0, 0($v0)
	lw $v1, 8($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -4($fp)
	
	# Setting value of the attribute boolop in the instance self_Parse to t_152
	#load the variable t_152
	lw $v0, -4($fp)
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 4($v1)
	
	# assign (add here the expr.to_string) to t_361
	#load the string str_empty
	li $a0, 8
	li $v0, 9
	syscall
	la $v1, String
	sw $v1, 0($v0)
	la $v1, str_empty
	sw $v1, 4($v0)
	sw $v0, -8($fp)
	
	# Setting value of the attribute rest in the instance self_Parse to t_361
	#load the variable t_361
	lw $v0, -8($fp)
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 8($v1)
	
	# return the value of the function in the register $v0
	#load the variable self_Parse
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 12
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
main_Main:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 28
	
	# assign (add here the expr.to_string) to t_363
	lw $v1, 12($fp)
	lw $v0, 12($v1)
	sw $v0, -0($fp)
	
	# assign (add here the expr.to_string) to t_364
	#load the variable t_363
	lw $v0, -0($fp)
	sw $v0, -4($fp)
	
	lw $v0, -4($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_365
	# calling the method print_V of type Graph
	#load the variable t_364
	lw $v0, -4($fp)
	lw $t0, 0($v0)
	lw $v1, 32($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_366
	lw $v1, 12($fp)
	lw $v0, 12($v1)
	sw $v0, -12($fp)
	
	# assign (add here the expr.to_string) to t_367
	#load the variable t_366
	lw $v0, -12($fp)
	sw $v0, -16($fp)
	
	lw $v0, -16($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_368
	# calling the method print_E of type Graph
	#load the variable t_367
	lw $v0, -16($fp)
	lw $t0, 0($v0)
	lw $v1, 28($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -20($fp)
	
	# assign (add here the expr.to_string) to t_369
	#load the variable t_368
	lw $v0, -20($fp)
	sw $v0, -24($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_369
	lw $v0, -24($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 28
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Main:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 4
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to self_Main
	jal Init_Parse
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, 12($fp)
	
	lw $v0, 12($fp)
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# assign (add here the expr.to_string) to t_362
	# calling the method read_input of type Main
	#load the variable self_Main
	lw $v0, 12($fp)
	lw $t0, 0($v0)
	lw $v1, 40($t0)
	jal $v1
	# pop the top of the stack to $v1
	addi $sp $sp 4
	lw $v1, 0($sp)
	
	sw $v0, -0($fp)
	
	# Setting value of the attribute g in the instance self_Main to t_362
	#load the variable t_362
	lw $v0, -0($fp)
	move $s2, $v0
	lw $v1, 12($fp)
	sw $s2, 12($v1)
	
	# return the value of the function in the register $v0
	#load the variable self_Main
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 4
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
and_BoolOp:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 16
	
	# assign (add here the expr.to_string) to t_372
	#load the variable b1_370
	lw $v0, 16($fp)
	sw $v0, -0($fp)
	
	lw $t1, -0($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_17
	# assign (add here the expr.to_string) to t_374
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 1
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 1
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_373
	#load the variable t_374
	lw $v0, -8($fp)
	sw $v0, -4($fp)
	
	j ifend_17
	then_17:
	# assign (add here the expr.to_string) to t_373
	#load the variable b2_371
	lw $v0, 12($fp)
	sw $v0, -4($fp)
	
	ifend_17:
	# assign (add here the expr.to_string) to t_375
	#load the variable t_373
	lw $v0, -4($fp)
	sw $v0, -12($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_375
	lw $v0, -12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 16
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
or_BoolOp:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 16
	
	# assign (add here the expr.to_string) to t_378
	#load the variable b1_376
	lw $v0, 16($fp)
	sw $v0, -0($fp)
	
	lw $t1, -0($fp)
	lw $t0, 4($t1)
	bne $t0, $zero, then_18
	# assign (add here the expr.to_string) to t_379
	#load the variable b2_377
	lw $v0, 12($fp)
	sw $v0, -4($fp)
	
	j ifend_18
	then_18:
	# assign (add here the expr.to_string) to t_380
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	# Creating Int instance for atomic 0
	li $a0, 8
	li $v0, 9
	syscall
	la $t0, Int
	li $t1, 0
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	# push $v0 to the stack
	sw $v0, 0($sp)
	addi $sp $sp -4
	
	jal compare
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	# pop the top of the stack to $t0
	addi $sp $sp 4
	lw $t0, 0($sp)
	
	sw $v0, -8($fp)
	
	# assign (add here the expr.to_string) to t_379
	#load the variable t_380
	lw $v0, -8($fp)
	sw $v0, -4($fp)
	
	ifend_18:
	# assign (add here the expr.to_string) to t_381
	#load the variable t_379
	lw $v0, -4($fp)
	sw $v0, -12($fp)
	
	# return the value of the function in the register $v0
	#load the variable t_381
	lw $v0, -12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 16
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_BoolOp:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	# return the value of the function in the register $v0
	#load the variable self_BoolOp
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Object:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	# return the value of the function in the register $v0
	#load the variable self
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Int:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	# Setting value of the attribute value in the instance self to v
	#load the variable v
	lw $v0, 12($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 4($v1)
	
	# return the value of the function in the register $v0
	#load the variable self
	lw $v0, 16($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_String:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	# Setting value of the attribute value in the instance self to v
	#load the variable v
	lw $v0, 12($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 4($v1)
	
	# return the value of the function in the register $v0
	#load the variable self
	lw $v0, 16($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_Bool:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	# Setting value of the attribute value in the instance self to v
	#load the variable v
	lw $v0, 12($fp)
	move $s2, $v0
	lw $v1, 16($fp)
	sw $s2, 4($v1)
	
	# return the value of the function in the register $v0
	#load the variable self
	lw $v0, 16($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
	.text
Init_IO:
	# save the return address and frame pointer
	# push $ra to the stack
	sw $ra, 0($sp)
	addi $sp $sp -4
	
	# push $fp to the stack
	sw $fp, 0($sp)
	addi $sp $sp -4
	
	# update the frame pointer and allocate the frame in the stack
	move $fp $sp
	subu $sp $sp 0
	
	# return the value of the function in the register $v0
	#load the variable self
	lw $v0, 12($fp)
	move $v0, $v0
	
	# restore the stack pointer, frame pointer y return address
	addu $sp $sp 0
	# pop the top of the stack to $fp
	addi $sp $sp 4
	lw $fp, 0($sp)
	
	# pop the top of the stack to $ra
	addi $sp $sp 4
	lw $ra, 0($sp)
	
	jr $ra
	
abort_Object:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp
		
		la $a0, ObjectAbortMessage
		li $v0, 4
		syscall

		lw $t0, 12($fp)
		lw $t0, 0($t0)
		lw $t0, 4($t0)

		move $a0, $t0
		li $v0, 4
		syscall
		
        li $v0, 10
        syscall

        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
       
        jr $ra

copy_Object:
            # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp


        lw $t7, 12($fp) # load the object address
        lw $t6, 0($t7) # get the type info address
        lw $t5, 0($t6) # get the size of the type

        move $a0, $t5
        li $v0, 9
        syscall
        move $t6, $v0
copy_Object_loop:
        lw $t4, 0($t7)
        sw $t4, 0($t6)
        addu $t7, $t7, 4
        addu $t6, $t6, 4
        addu $t5, $t5, -4
        bgtz $t5, copy_Object_loop              
        
        
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
       
        jr $ra



out_string_IO:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp


        lw $a1, 12($fp) # reference to string object
        lw $a0, 4($a1) # get the address of the value of the string 
        li $v0, 4
        syscall

        lw $v0, 16($fp)
        
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
       
        jr $ra

out_int_IO:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $v1, 12($fp)
        lw $a0, 4($v1)
        li $v0, 1
        syscall
        
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
       
        jr $ra

in_string_IO:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        # Read the string to the buffer
        la $a0, IO_Buffer
        li $a1, 1000
        li $v0, 8
        syscall

        # get the length of the string to allocate the memory
        la $t0, IO_Buffer
        sw $t0, 0($sp)
        addi $sp, $sp, -4
	jal strlen
        addi $sp, $sp, 4
        lw $t0, 0($sp) # the length is now in $v0

        addi $v0, $v0, 1
        move $a0, $v0
        li $v0, 9
        syscall # in $v0 is the address of the value string
                
        la $t1, IO_Buffer # copy the string value from the buffer to the heap
        move $t2, $v0
        in_string_IO_loop:
        lb $t3, 0($t1)
        sb $t3, 0($t2)
        addi $t1, $t1, 1
        addi $t2, $t2, 1
        bgtz $t3, in_string_IO_loop
        addi $t2, $t2, -2

        li $t4, 10
        lb $t5, 0($t2)
        bne $t5, $t4, in_string_IO_end
        li $t3, 0
        sb $t3, 0($t2)

        in_string_IO_end:
        move $t0, $v0

        li $a0, 8
        li $v0, 9
        syscall

        la $t1, String
        sw $t0, 4($v0)
        sw $t1, 0($v0)


        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
       
        jr $ra

in_int_IO:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        li $v0, 5
        syscall
        move $t0, $v0

        li $v0, 9
        li $a0, 8
        syscall

        la $t1, Int
        sw $t1, 0($v0)
        sw $t0, 4($v0)


        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
       
        jr $ra
		






		



type_name_Object:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $t7, 12($fp) # get the instance address
        lw $t6, 0($t7) # get the type info address
        lw $t5, 4($t6) # get the type name

        # create the String class instance to return
        li $a0, 8
        li $v0, 9
        syscall   

        la $t1, String
        sw $t1, 0($v0)
        sw $t5, 4($v0)
        
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra

substr_String:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $t7, 20($fp) # get the String instance address
        lw $t0, 4($t7) # get the value of the source String

        lw $t7, 16($fp) # get the start parameter Int instance address
        lw $t1, 4($t7) # get the value of the Int

        lw $t7, 12($fp) # get the length perameter Int instance address
        lw $t2, 4($t7) # get the value of the Int
        
        move $a0, $t2
        addi $a0, $a0, 1
        li $v0, 9	
        syscall # allocate memory for the substring value
        

        li $t3, 0 # current pos in the string

        substr_String_loop1:
        beq $t3, $t1, substr_String_eloop1 # if the current pos == start pos break
        # else move the current pos
        addi $t0, $t0, 1
        addi $t3, $t3, 1
        j substr_String_loop1

        substr_String_eloop1:

        li $t3, 0
        move $t4, $v0 # move the substring address to $t4

        substr_String_loop2:
        beq $t3, $t2, substr_String_eloop2
        lb $t7, 0($t0)
        sb $t7, 0($t4)
        addi $t0, $t0, 1
        addi $t4, $t4, 1
        addi $t3, $t3, 1
        j substr_String_loop2

        substr_String_eloop2:
        sb $zero, 0($t4)
        move $t0, $v0
        la $t1, String
        
        li $a0, 8
        li $v0, 9
        syscall

        sw $t1, 0($v0)
        sw $t0, 4($v0)


        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra


isvoid:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $t0, 12($fp)
        li $t1, 0
        beq $t0, $t1, isvoid_end
        li $t0, 1
        isvoid_end:
                
        li $a0, 8
        li $v0, 9
        syscall

        la $t1, Bool
        sw $t1, 0($v0)
        sw $t0, 4($v0)

        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra

# function to get the length of a string value
strlen:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp


        lw $a0, 12($fp)
        li $t0, 0
strlen_loop:
        lbu $t1, 0($a0)
        beqz $t1, strlen_exit
        addu $a0, $a0, 1
        addu $t0, $t0, 1
        j strlen_loop
        strlen_exit:
        move $v0, $t0
        
        
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra


length_String:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $v0, 12($fp) # get the string instance address
        lw $v1, 4($v0) # get the string value address

        # push the instace in the stack
        sw $v1, 0($sp)
        addi $sp, $sp, -4

        jal strlen # length at v0
        
        addi $sp, $sp, 4
        lw $t0, 0($sp)


        move $t0, $v0

        # allocate space for the Int instace
        li $a0, 8
        li $v0, 9
        syscall

        la $t1, Int
        sw $t1, 0($v0)
        sw $t0, 4($v0)
      
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra

	
compare:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

		lw $t0, 12($fp)
		lw $t1, 16($fp)

		lw $t3, 0($t0)

		la $t4, Int
		beq $t3, $t4, compare_branch1

		la $t4, Bool
		beq $t3, $t4, compare_branch1

                la $t4, type
                beq $t3, $t4, compare_branch1

		la $t4, String
		beq $t3, $t4, compare_branch2

		j compare_values

		compare_branch1:
		lw $t0, 4($t0)
		lw $t1, 4($t1)
		
		compare_values:
		beq $t0, $t1, compare_true
		j compare_false

		
		compare_branch2:
		lw $t0, 4($t0)
		lw $t1, 4($t1)
		compare_str_loop:
		lbu $t3, 0($t0)
		lbu $t4, 0($t1)
		bne $t3, $t4, compare_false
		beq $t3, $zero, compare_true
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		j compare_str_loop

		compare_true:
		li $t0, 1
		j compare_end

		compare_false:
		li $t0, 0

		compare_end:

		li $a0, 8
		li $v0, 9
		syscall
		la $t1, Bool
		sw $t1, 0($v0)
		sw $t0, 4($v0)


        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra


concat_String:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $t0, 16($fp)
        lw $t0, 4($t0) # the value of the first String instance

        # call strlen with the string
        sw $t0, 0($sp)
        addi $sp, $sp, -4
        jal strlen
        addi $sp, $sp, 4
        lw $t0, 0($sp)

        #save the lenght of the first string
        sw $v0, 0($sp)
        addi $sp, $sp, -4


        lw $t0, 16($fp)
        lw $t0, 4($t0) # the value of the second String instance

        # call strlen with the string
        sw $t0, 0($sp)
        addi $sp, $sp, -4
        jal strlen
        addi $sp, $sp, 4
        lw $t0, 0($sp)

        # pop the lenght of the first string from the stack
        addi $sp, $sp, 4
        lw $t0, 0($sp) 
        
        # get the total space for allocating the new string
        addu $t0, $t0, $v0
        addi $t0, $t0, 1

        move $a0, $t0
        li $v0, 9
        syscall # at $v0 is the result string

        lw $t0, 16($fp)
        lw $t0, 4($t0) # the address of the value of the first String instance
        move $t1, $v0 # the address of the value of the result string
        concat_String_loop1:
        lbu $t3, 0($t0)
        beq $t3, $zero, concat_String_eloop1
        sb $t3, 0($t1)
        addi $t0, $t0, 1
        addi $t1, $t1, 1
        j concat_String_loop1

        concat_String_eloop1:

        lw $t0, 12($fp)
        lw $t0, 4($t0)
        concat_String_loop2:
        lbu $t3, 0($t0)
        beq $t3, $zero, concat_String_eloop2
        sb $t3, 0($t1)
        addi $t0, $t0, 1
        addi $t1, $t1, 1
        j concat_String_loop2
        concat_String_eloop2:
        sb $zero, 0($t1)

        la $t0, String
        move $t1, $v0

        li $a0, 8
        li $v0, 9
        syscall

        sw $t0, 0($v0)
        sw $t1, 4($v0)

        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra











		













