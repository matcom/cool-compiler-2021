out_string_IO:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp


        lw $a1, 12($fp) # reference to string object
        lw $a0, 4($a1) # get the address of the value of the string 
        li $v0, 4
        syscall

        lw $v0, 16($fp)
        
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
       
        jr $ra

type_name_Object:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $t7, 12($fp) # get the instance address
        lw $t6, 0($t7) # get the type info address
        lw $t5, 4($t6) # get the type name

        # create the String class instance to return
        li $a0, 8
        li $v0, 9
        syscall   

        la $t1, String
        sw $t1, 0($v0)
        sw $t5, 4($v0)
        
        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra

substr_String:
        # calling conventions
        sw $ra, 0($sp)
        addi $sp, $sp, -4
        sw $fp, 0($sp)
        addi $sp, $sp, -4
        move $fp, $sp

        lw $t7, 20($fp) # get the String instance address
        lw $t0, 4($t7) # get the value of the source String

        lw $t7, 16($fp) # get the start parameter Int instance address
        lw $t1, 4($t7) # get the value of the Int

        lw $t7, 12($fp) # get the length perameter Int instance address
        lw $t2, 4($t7) # get the value of the Int

        move $a0, $t2
        li $v0, 9	
        syscall # allocate memory for the substring value
        

        li $t3, 0 # current pos in the string

        substr_String_loop1:
        beq $t3, $t1, substr_String_eloop1 # if the current pos == start pos break
        # else move the current pos
        addi $t0, $t0, 1
        addi $t3, $t3, 1
        j substr_String_loop1

        substr_String_eloop1:

        li $t3, 0
        move $t4, $v0 # move the substring address to $t4

        substr_String_loop2:
        beq $t3, $t2, substr_String_eloop2
        lb $t7, 0($t0)
        sb $t7, 0($t4)
        addi $t0, $t0, 1
        addi $t4, $t4, 1
        addi $t3, $t3, 1
        j substr_String_loop2

        substr_String_eloop2:

        move $t0, $v0
        la $t1, String
        
        li $a0, 8
        li $v0, 9
        syscall

        sw $t1, 0($v0)
        sw $t0, 4($v0)


        # calling conventions
        addi $sp, $sp, 4
        lw $fp, 0($sp)
        addi $sp, $sp, 4
        lw $ra, 0($sp)
        
        jr $ra













