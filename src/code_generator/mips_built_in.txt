abort_Object:
    sw $ra, 0($sp)
    addu $sp, $sp, -4
    sw $fp, 0($sp)
    addu $sp, $sp, -4
    move $fp, $sp

    li $v0, 55
    move $a0, ObjectErrorMessage
    li $a1, 0
    syscall

    li $v0, 17
    li $a0, 1
    syscall

    move $sp, $fp
    lw $fp, 0($sp)
    addu $sp, $sp, 4
    lw $ra, 0($sp)
    addu $sp, $sp, 4
    jr $ra

typename_Object:
    sw $ra, 0($sp)
    addu $sp, $sp, -4
    sw $fp, 0($sp)
    addu $sp, $sp, -4
    move $fp, $sp

    lw $v7, 12($fp})
    lw $v6, 0($v7)

    lw $a0, 4($v6)
    li $v0, 4
    syscall

    move $sp, $fp
    lw $fp, 0($sp)
    addu $sp, $sp, 4
    lw $ra, 0($sp)
    addu $sp, $sp, 4
    jr $ra

copy_Object:
    sw $ra, 0($sp)
    addu $sp, $sp, -4
    sw $fp, 0($sp)
    addu $sp, $sp, -4
    move $fp, $sp


    lw $v7, 12($fp)
    lw $v6, 0($v7)
    lw $v5, 0($v6)

    move $a0, $v7
    li $v0, 9
    syscall
    move $v6, $v0
copy_Object_loop:
    lw $v4, 0($v7)
    sw $v4, 0($v6)
    addu $v7, $v7, 4
    addu $v6, $v6, 4
    addu $v5, $v5, -4
    bgtz $v5, copy_Object_loop              
    
    move $sp, $fp
    lw $fp, 0($sp)
    addu $sp, $sp, 4
    lw $ra, 0($sp)
    addu $sp, $sp, 4
    jr $ra

out_int_IO:
    sw $ra, 0($sp)
    addu $sp, $sp, -4
    sw $fp, 0($sp)
    addu $sp, $sp, -4
    move $fp, $sp


    lw $v1, 12($fp)
    lw $a0, 4($v1)
    li $v0, 1
    syscall
    
    move $sp, $fp
    lw $fp, 0($sp)
    addu $sp, $sp, 4
    lw $ra, 0($sp)
    addu $sp, $sp, 4
    jr $ra

out_string_IO:
    sw $ra, 0($sp)
    addu $sp, $sp, -4
    sw $fp, 0($sp)
    addu $sp, $sp, -4
    move $fp, $sp


    lw $a1, 12($fp) # reference to string object
    lw $a0, 4($a1) # get the address of the value of the string 
    move $v0, 4
    syscall
    
    move $sp, $fp
    lw $fp, 0($sp)
    addu $sp, $sp, 4
    lw $ra, 0($sp)
    addu $sp, $sp, 4
    jr $ra

strlen_String:
    sw $ra, 0($sp)
    addu $sp, $sp, -4
    sw $fp, 0($sp)
    addu $sp, $sp, -4
    move $fp, $sp


    lw $a0, 12$fp
    li $t0, 0
srtlen_String_loop:
    lb $t1, 0($a0)
    beqz $t1, strlen_String_exit
    addu $a0, $a0, 1
    addu $t0, $t0, 1
    j strlen_String_loop:
    strlen_String_exit:
    move $v0, $t0
    
    move $sp, $fp
    lw $fp, 0($sp)
    addu $sp, $sp, 4
    lw $ra, 0($sp)
    addu $sp, $sp, 4
    jr $ra

strcopy_String:
    sw $ra, 0($sp)
    addu $sp, $sp, -4
    sw $fp, 0($sp)
    addu $sp, $sp, -4
    move $fp, $sp


    lw $a0, 12$fp

    sw $a0, 0($sp) # pass the string address as a parameter
    addu $sp, $sp, -4
    jal strlen_String # len of the string at v0

    # push v0 to stack and save the len
    sw $v0, 0($sp) 
    addu $sp, $sp, -4

    move $a0, $v0 # pass as argument the size to alloc
    li $v0, 9
    syscall # v0 location of the dst string

    lw $v1, 12$fp # load the source string address
    move $v2, $v0 # copy the dst string address

    lw $v3, 0($sp) # pop the len of the string
    addu $sp, $sp, 4
strcopy_String_loop:
    lb $t0, 0($v1) # load the next char
    sb $t0, 0($v2) # copy the char
    addu $v1, $v1, 1
    addu $v2, $v2, 1
    addu $v3, $v3, -1 # decrease the size
    bgtz $v3, strcopy_String_loop

    move $sp, $fp
    lw $fp, 0($sp)
    addu $sp, $sp, 4
    lw $ra, 0($sp)
    addu $sp, $sp, 4
    jr $ra


    


    




