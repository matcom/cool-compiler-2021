
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "rightASSIGNrightNOTnonassocLESSEQ<=left+-left*/rightISVOIDleft~left@left.ASSIGN CASE CLASS ELSE ESAC FALSE FI ID IF IN INHERITS INT ISVOID LESSEQ LET LOOP NEW NOT OF ONELINECOMMENT POOL RET STRING THEN TRUE TYPE WHILEprogram : class_listclass_list : class ';' class_list\n        | class ';'class : CLASS TYPE INHERITS TYPE '{' feature_list '}'\n        | CLASS TYPE '{' feature_list '}'feature_list : attribute ';' feature_list\n        | method ';' feature_list\n        | emptyattribute : ID ':' TYPE ASSIGN expression\n        | ID ':' TYPEmethod : ID '(' params_list ')' ':' TYPE '{' expression '}'\n        |  ID '(' empty ')' ':' TYPE '{' expression '}'params_list : param ',' params_list\n        | paramparam : ID ':' TYPEexpression_list : expression ';' expression_list\n        | expression ';'expression : ID ASSIGN expressionexpression : IF expression THEN expression ELSE expression FIexpression : WHILE expression LOOP expression POOLexpression : '{' expression_list '}'expression : LET let_list IN expressionlet_list : let_single ',' let_list\n        | let_singlelet_single : ID ':' TYPE ASSIGN expression\n        | ID ':' TYPEexpression : CASE expression OF case_list ESACcase_list : case_single case_list\n        | case_singlecase_single : ID ':' TYPE RET expression ';'expression : expression '@' TYPE '.' ID '(' args_list ')'\n        | expression '.' ID '(' args_list ')'\n        | ID '(' args_list ')'expression : expression '@' TYPE '.' ID '(' empty ')'\n        | expression '.' ID '(' empty ')'\n        | ID '(' empty ')'args_list : expression ',' args_list\n        | expressionexpression : NEW TYPEexpression : ISVOID expressionexpression : NOT expressionexpression : '~' expressionexpression : expression '+' expressionexpression : expression '-' expressionexpression : expression '/' expressionexpression : expression '*' expressionexpression : expression '<' expressionexpression : expression LESSEQ expressionexpression : expression '=' expressionexpression : '(' expression ')'expression : STRINGexpression : IDexpression : TRUEexpression : FALSEexpression : INTempty :"
    
_lr_action_items = {'CLASS':([0,5,],[4,4,]),'$end':([1,2,5,7,],[0,-1,-3,-2,]),';':([3,12,13,17,25,30,36,37,48,49,50,51,70,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,114,127,129,132,133,135,136,142,144,145,146,],[5,18,19,-5,-10,-4,-52,-9,-51,-53,-54,-55,98,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-22,-20,-27,-11,-12,-32,-35,-19,-31,-34,147,]),'TYPE':([4,8,20,32,44,53,54,58,101,131,],[6,10,25,52,76,80,81,86,116,139,]),'INHERITS':([6,],[8,]),'{':([6,10,31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,80,81,95,96,98,99,104,105,108,110,126,128,134,143,],[9,16,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,104,105,40,40,40,40,40,40,40,40,40,40,40,40,]),'ID':([9,16,18,19,21,31,35,38,39,40,41,42,43,45,46,47,56,57,59,60,61,62,63,64,65,66,95,96,98,99,100,102,104,105,108,109,110,118,126,128,134,143,147,],[15,15,15,15,26,36,26,36,36,36,73,36,36,36,36,36,36,36,87,36,36,36,36,36,36,36,36,36,36,36,73,119,36,36,36,123,36,119,36,36,36,36,-30,]),'}':([9,11,14,16,18,19,22,23,24,36,48,49,50,51,69,76,77,78,79,82,88,89,90,91,92,93,94,97,98,103,106,107,113,114,120,121,127,129,135,136,142,144,145,],[-56,17,-8,-56,-56,-56,30,-6,-7,-52,-51,-53,-54,-55,97,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-17,-50,-33,-36,-16,-22,132,133,-20,-27,-32,-35,-19,-31,-34,]),':':([15,26,33,34,73,119,],[20,32,53,54,101,131,]),'(':([15,31,36,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,87,95,96,98,99,104,105,108,110,123,126,128,134,143,],[21,43,57,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,110,43,43,43,43,43,43,43,43,134,43,43,43,43,]),')':([21,27,28,29,36,48,49,50,51,52,55,57,75,76,77,78,79,82,83,84,85,88,89,90,91,92,93,94,97,103,106,107,110,114,122,124,125,127,129,134,135,136,140,141,142,144,145,],[-56,33,34,-14,-52,-51,-53,-54,-55,-15,-13,-56,103,-39,-40,-41,-42,-18,106,107,-38,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-56,-22,-37,135,136,-20,-27,-56,-32,-35,144,145,-19,-31,-34,]),'ASSIGN':([25,36,116,],[31,56,128,]),',':([29,36,48,49,50,51,52,72,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,114,116,127,129,135,136,138,142,144,145,],[35,-52,-51,-53,-54,-55,-15,100,-39,-40,-41,-42,-18,108,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-22,-26,-20,-27,-32,-35,-25,-19,-31,-34,]),'IF':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'WHILE':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'LET':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'CASE':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'NEW':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'ISVOID':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'NOT':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'~':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'STRING':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FALSE':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'INT':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'@':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,58,-51,-53,-54,-55,58,58,58,58,58,-39,58,58,58,58,58,58,58,58,58,58,58,58,-21,-50,-33,-36,58,58,58,58,58,-20,-27,-32,-35,58,58,-19,-31,-34,58,]),'.':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,86,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,59,-51,-53,-54,-55,59,59,59,59,59,-39,59,59,59,59,59,109,59,59,59,59,59,59,59,-21,-50,-33,-36,59,59,59,59,59,-20,-27,-32,-35,59,59,-19,-31,-34,59,]),'+':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,60,-51,-53,-54,-55,60,60,60,60,60,-39,-40,60,-42,60,60,-43,-44,-45,-46,60,60,60,-21,-50,-33,-36,60,60,60,60,60,-20,-27,-32,-35,60,60,-19,-31,-34,60,]),'-':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,61,-51,-53,-54,-55,61,61,61,61,61,-39,-40,61,-42,61,61,-43,-44,-45,-46,61,61,61,-21,-50,-33,-36,61,61,61,61,61,-20,-27,-32,-35,61,61,-19,-31,-34,61,]),'/':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,62,-51,-53,-54,-55,62,62,62,62,62,-39,-40,62,-42,62,62,62,62,-45,-46,62,62,62,-21,-50,-33,-36,62,62,62,62,62,-20,-27,-32,-35,62,62,-19,-31,-34,62,]),'*':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,63,-51,-53,-54,-55,63,63,63,63,63,-39,-40,63,-42,63,63,63,63,-45,-46,63,63,63,-21,-50,-33,-36,63,63,63,63,63,-20,-27,-32,-35,63,63,-19,-31,-34,63,]),'<':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,64,-51,-53,-54,-55,64,64,64,64,64,-39,-40,64,-42,64,64,-43,-44,-45,-46,None,None,None,-21,-50,-33,-36,64,64,64,64,64,-20,-27,-32,-35,64,64,-19,-31,-34,64,]),'LESSEQ':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,65,-51,-53,-54,-55,65,65,65,65,65,-39,-40,65,-42,65,65,-43,-44,-45,-46,None,None,None,-21,-50,-33,-36,65,65,65,65,65,-20,-27,-32,-35,65,65,-19,-31,-34,65,]),'=':([36,37,48,49,50,51,67,68,70,74,75,76,77,78,79,82,85,88,89,90,91,92,93,94,97,103,106,107,111,112,114,120,121,127,129,135,136,137,138,142,144,145,146,],[-52,66,-51,-53,-54,-55,66,66,66,66,66,-39,-40,66,-42,66,66,-43,-44,-45,-46,None,None,None,-21,-50,-33,-36,66,66,66,66,66,-20,-27,-32,-35,66,66,-19,-31,-34,66,]),'THEN':([36,48,49,50,51,67,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,114,127,129,135,136,142,144,145,],[-52,-51,-53,-54,-55,95,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-22,-20,-27,-32,-35,-19,-31,-34,]),'LOOP':([36,48,49,50,51,68,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,114,127,129,135,136,142,144,145,],[-52,-51,-53,-54,-55,96,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-22,-20,-27,-32,-35,-19,-31,-34,]),'OF':([36,48,49,50,51,74,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,114,127,129,135,136,142,144,145,],[-52,-51,-53,-54,-55,102,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-22,-20,-27,-32,-35,-19,-31,-34,]),'ELSE':([36,48,49,50,51,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,111,114,127,129,135,136,142,144,145,],[-52,-51,-53,-54,-55,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,126,-22,-20,-27,-32,-35,-19,-31,-34,]),'POOL':([36,48,49,50,51,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,112,114,127,129,135,136,142,144,145,],[-52,-51,-53,-54,-55,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,127,-22,-20,-27,-32,-35,-19,-31,-34,]),'FI':([36,48,49,50,51,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,114,127,129,135,136,137,142,144,145,],[-52,-51,-53,-54,-55,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-22,-20,-27,-32,-35,142,-19,-31,-34,]),'IN':([36,48,49,50,51,71,72,76,77,78,79,82,88,89,90,91,92,93,94,97,103,106,107,114,115,116,127,129,135,136,138,142,144,145,],[-52,-51,-53,-54,-55,99,-24,-39,-40,-41,-42,-18,-43,-44,-45,-46,-47,-48,-49,-21,-50,-33,-36,-22,-23,-26,-20,-27,-32,-35,-25,-19,-31,-34,]),'ESAC':([117,118,130,147,],[129,-29,-28,-30,]),'RET':([139,],[143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,5,],[2,7,]),'class':([0,5,],[3,3,]),'feature_list':([9,16,18,19,],[11,22,23,24,]),'attribute':([9,16,18,19,],[12,12,12,12,]),'method':([9,16,18,19,],[13,13,13,13,]),'empty':([9,16,18,19,21,57,110,134,],[14,14,14,14,28,84,125,141,]),'params_list':([21,35,],[27,55,]),'param':([21,35,],[29,29,]),'expression':([31,38,39,40,42,43,45,46,47,56,57,60,61,62,63,64,65,66,95,96,98,99,104,105,108,110,126,128,134,143,],[37,67,68,70,74,75,77,78,79,82,85,88,89,90,91,92,93,94,111,112,70,114,120,121,85,85,137,138,85,146,]),'expression_list':([40,98,],[69,113,]),'let_list':([41,100,],[71,115,]),'let_single':([41,100,],[72,72,]),'args_list':([57,108,110,134,],[83,122,124,140,]),'case_list':([102,118,],[117,130,]),'case_single':([102,118,],[118,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',62),
  ('class_list -> class ; class_list','class_list',3,'p_class_list','parser.py',66),
  ('class_list -> class ;','class_list',2,'p_class_list','parser.py',67),
  ('class -> CLASS TYPE INHERITS TYPE { feature_list }','class',7,'p_class','parser.py',74),
  ('class -> CLASS TYPE { feature_list }','class',5,'p_class','parser.py',75),
  ('feature_list -> attribute ; feature_list','feature_list',3,'p_feature_list','parser.py',84),
  ('feature_list -> method ; feature_list','feature_list',3,'p_feature_list','parser.py',85),
  ('feature_list -> empty','feature_list',1,'p_feature_list','parser.py',86),
  ('attribute -> ID : TYPE ASSIGN expression','attribute',5,'p_attribute','parser.py',93),
  ('attribute -> ID : TYPE','attribute',3,'p_attribute','parser.py',94),
  ('method -> ID ( params_list ) : TYPE { expression }','method',9,'p_method','parser.py',103),
  ('method -> ID ( empty ) : TYPE { expression }','method',9,'p_method','parser.py',104),
  ('params_list -> param , params_list','params_list',3,'p_params_list','parser.py',109),
  ('params_list -> param','params_list',1,'p_params_list','parser.py',110),
  ('param -> ID : TYPE','param',3,'p_param','parser.py',121),
  ('expression_list -> expression ; expression_list','expression_list',3,'p_expression_list','parser.py',126),
  ('expression_list -> expression ;','expression_list',2,'p_expression_list','parser.py',127),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assigment','parser.py',134),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_then_else','parser.py',139),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_expression_while','parser.py',144),
  ('expression -> { expression_list }','expression',3,'p_expression_block','parser.py',149),
  ('expression -> LET let_list IN expression','expression',4,'p_expression_let_in','parser.py',154),
  ('let_list -> let_single , let_list','let_list',3,'p_let_list','parser.py',159),
  ('let_list -> let_single','let_list',1,'p_let_list','parser.py',160),
  ('let_single -> ID : TYPE ASSIGN expression','let_single',5,'p_let_single','parser.py',167),
  ('let_single -> ID : TYPE','let_single',3,'p_let_single','parser.py',168),
  ('expression -> CASE expression OF case_list ESAC','expression',5,'p_expression_case','parser.py',176),
  ('case_list -> case_single case_list','case_list',2,'p_case_list','parser.py',181),
  ('case_list -> case_single','case_list',1,'p_case_list','parser.py',182),
  ('case_single -> ID : TYPE RET expression ;','case_single',6,'p_case_single','parser.py',189),
  ('expression -> expression @ TYPE . ID ( args_list )','expression',8,'p_expression_dispatch','parser.py',194),
  ('expression -> expression . ID ( args_list )','expression',6,'p_expression_dispatch','parser.py',195),
  ('expression -> ID ( args_list )','expression',4,'p_expression_dispatch','parser.py',196),
  ('expression -> expression @ TYPE . ID ( empty )','expression',8,'p_expression_dispatch_empty','parser.py',210),
  ('expression -> expression . ID ( empty )','expression',6,'p_expression_dispatch_empty','parser.py',211),
  ('expression -> ID ( empty )','expression',4,'p_expression_dispatch_empty','parser.py',212),
  ('args_list -> expression , args_list','args_list',3,'p_args_list','parser.py',226),
  ('args_list -> expression','args_list',1,'p_args_list','parser.py',227),
  ('expression -> NEW TYPE','expression',2,'p_expression_instatiate','parser.py',238),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',243),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',248),
  ('expression -> ~ expression','expression',2,'p_expression_complement','parser.py',253),
  ('expression -> expression + expression','expression',3,'p_expression_plus','parser.py',258),
  ('expression -> expression - expression','expression',3,'p_expression_minus','parser.py',263),
  ('expression -> expression / expression','expression',3,'p_expression_div','parser.py',268),
  ('expression -> expression * expression','expression',3,'p_expression_star','parser.py',273),
  ('expression -> expression < expression','expression',3,'p_expression_less','parser.py',278),
  ('expression -> expression LESSEQ expression','expression',3,'p_expression_lesseq','parser.py',283),
  ('expression -> expression = expression','expression',3,'p_expression_equals','parser.py',288),
  ('expression -> ( expression )','expression',3,'p_expression_parentheses','parser.py',293),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',298),
  ('expression -> ID','expression',1,'p_expression_variable','parser.py',303),
  ('expression -> TRUE','expression',1,'p_expression_true','parser.py',308),
  ('expression -> FALSE','expression',1,'p_expression_false','parser.py',313),
  ('expression -> INT','expression',1,'p_expression_int','parser.py',318),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',323),
]
