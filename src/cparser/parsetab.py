
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programARROW ASSIGN AT BOOL CASE CLASS COLON COMMA DIV DOT ELSE EQUAL ESAC FI ID IF IN INHERITS INT ISVOID LBRACE LESS LESSEQ LET LNOT LOOP LPAREN MINUS NEW NOT OF PLUS POOL RBRACE RPAREN SEMICOLON STAR STRING THEN TYPE WHILEprogram : class_listepsilon :class_list : def_class SEMICOLON class_list\n                      | def_class SEMICOLON def_class : CLASS TYPE LBRACE feature_list RBRACE\n                     | CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACEfeature_list : def_attr SEMICOLON feature_list\n                        | def_func SEMICOLON feature_list\n                        | epsilondef_attr : ID COLON TYPE\n                    | ID COLON TYPE ASSIGN exprdef_func : ID LPAREN params RPAREN COLON TYPE LBRACE expr RBRACEparams : param_list\n                  | param_list_emptyparam_list : param\n                      | param COMMA param_listparam_list_empty : epsilonparam : ID COLON TYPElet_list : let_assign\n                    | let_assign COMMA let_listlet_assign : param ASSIGN expr\n                      | paramexpr : LET let_attrs IN expr\n                | CASE expr OF case_list ESAC\n                | IF expr THEN expr ELSE expr FI\n                | WHILE expr LOOP expr POOLexpr : ID ASSIGN exprexpr : expr AT TYPE DOT ID LPAREN args RPAREN\n                | expr DOT ID LPAREN args RPAREN\n                | ID LPAREN args RPARENexpr : expr PLUS expr\n                | expr MINUS expr\n                | expr STAR expr\n                | expr DIV expr\n                | expr LESS expr\n                | expr LESSEQ expr\n                | expr EQUAL exprexpr : NOT expr\n                | ISVOID expr\n                | LNOT exprexpr : LPAREN expr RPARENexpr : atomlet_attrs : def_attr\n                     | def_attr COMMA let_attrscase_list : case_option SEMICOLON\n                     | case_option SEMICOLON case_listcase_option : ID COLON TYPE ARROW exprargs : arg_list\n                | arg_list_emptyarg_list : expr\n                    | expr COMMA arg_listarg_list_empty : epsilonatom : INTatom : IDatom : BOOLatom : STRINGatom : NEW TYPEatom : blockblock : LBRACE block_list RBRACE block_list : expr SEMICOLON\n                       | expr SEMICOLON block_list'
    
_lr_action_items = {'CLASS':([0,5,],[4,4,]),'$end':([1,2,5,7,],[0,-1,-4,-3,]),'SEMICOLON':([3,11,12,16,24,36,37,38,47,48,49,50,52,75,76,77,78,80,82,90,91,92,93,94,95,96,102,103,106,110,113,122,126,127,129,135,136,137,],[5,17,18,-5,-10,-6,-54,-11,-42,-53,-55,-56,-58,-38,-39,-40,-57,104,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,123,-24,-26,-12,-29,-25,-28,-47,]),'TYPE':([4,9,19,33,51,55,59,124,],[6,15,24,54,78,81,88,131,]),'LBRACE':([6,15,32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,81,97,100,101,104,105,107,109,125,128,134,],[8,21,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,105,53,53,53,53,53,53,53,53,53,53,]),'INHERITS':([6,],[9,]),'ID':([8,17,18,20,21,32,35,39,40,41,42,43,44,45,46,53,57,58,60,61,62,63,64,65,66,67,97,98,99,100,101,104,105,107,108,109,123,125,128,134,],[14,14,14,25,14,37,25,70,37,37,37,37,37,37,37,37,37,37,89,37,37,37,37,37,37,37,37,70,114,37,37,37,37,37,120,37,114,37,37,37,]),'RBRACE':([8,10,13,17,18,21,22,23,31,37,47,48,49,50,52,75,76,77,78,79,82,90,91,92,93,94,95,96,102,103,104,106,110,117,118,122,126,129,135,136,],[-2,16,-9,-2,-2,-2,-7,-8,36,-54,-42,-53,-55,-56,-58,-38,-39,-40,-57,103,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-60,-30,-23,-61,127,-24,-26,-29,-25,-28,]),'COLON':([14,25,34,70,114,],[19,33,55,19,124,]),'LPAREN':([14,32,37,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,89,97,100,101,104,105,107,109,120,125,128,134,],[20,43,58,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,109,43,43,43,43,43,43,43,128,43,43,43,]),'RPAREN':([20,26,27,28,29,30,37,47,48,49,50,52,54,56,58,74,75,76,77,78,82,83,84,85,86,87,90,91,92,93,94,95,96,102,103,106,109,110,119,121,122,126,128,129,133,135,136,],[-2,34,-13,-14,-15,-17,-54,-42,-53,-55,-56,-58,-18,-16,-2,102,-38,-39,-40,-57,-27,106,-48,-49,-50,-52,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-2,-23,-51,129,-24,-26,-2,-29,136,-25,-28,]),'COMMA':([24,29,37,38,47,48,49,50,52,54,69,75,76,77,78,82,86,90,91,92,93,94,95,96,102,103,106,110,122,126,129,135,136,],[-10,35,-54,-11,-42,-53,-55,-56,-58,-18,98,-38,-39,-40,-57,-27,107,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,-24,-26,-29,-25,-28,]),'IN':([24,37,38,47,48,49,50,52,68,69,75,76,77,78,82,90,91,92,93,94,95,96,102,103,106,110,111,122,126,129,135,136,],[-10,-54,-11,-42,-53,-55,-56,-58,97,-43,-38,-39,-40,-57,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,-44,-24,-26,-29,-25,-28,]),'ASSIGN':([24,37,],[32,57,]),'LET':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'CASE':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'IF':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'WHILE':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'NOT':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'ISVOID':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'LNOT':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'INT':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'BOOL':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'STRING':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NEW':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'AT':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,59,-42,-53,-55,-56,-58,59,59,59,59,59,59,59,-57,59,59,59,59,59,59,59,59,59,59,-41,-59,-30,59,59,59,59,-24,-26,-29,59,-25,-28,59,]),'DOT':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,88,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,60,-42,-53,-55,-56,-58,60,60,60,60,60,60,60,-57,60,60,60,108,60,60,60,60,60,60,60,-41,-59,-30,60,60,60,60,-24,-26,-29,60,-25,-28,60,]),'PLUS':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,61,-42,-53,-55,-56,-58,61,61,61,61,61,61,61,-57,61,61,61,61,61,61,61,61,61,61,-41,-59,-30,61,61,61,61,-24,-26,-29,61,-25,-28,61,]),'MINUS':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,62,-42,-53,-55,-56,-58,62,62,62,62,62,62,62,-57,62,62,62,62,62,62,62,62,62,62,-41,-59,-30,62,62,62,62,-24,-26,-29,62,-25,-28,62,]),'STAR':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,63,-42,-53,-55,-56,-58,63,63,63,63,63,63,63,-57,63,63,63,63,63,63,63,63,63,63,-41,-59,-30,63,63,63,63,-24,-26,-29,63,-25,-28,63,]),'DIV':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,64,-42,-53,-55,-56,-58,64,64,64,64,64,64,64,-57,64,64,64,64,64,64,64,64,64,64,-41,-59,-30,64,64,64,64,-24,-26,-29,64,-25,-28,64,]),'LESS':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,65,-42,-53,-55,-56,-58,65,65,65,65,65,65,65,-57,65,65,65,65,65,65,65,65,65,65,-41,-59,-30,65,65,65,65,-24,-26,-29,65,-25,-28,65,]),'LESSEQ':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,66,-42,-53,-55,-56,-58,66,66,66,66,66,66,66,-57,66,66,66,66,66,66,66,66,66,66,-41,-59,-30,66,66,66,66,-24,-26,-29,66,-25,-28,66,]),'EQUAL':([37,38,47,48,49,50,52,71,72,73,74,75,76,77,78,80,82,86,90,91,92,93,94,95,96,102,103,106,110,115,116,118,122,126,129,132,135,136,137,],[-54,67,-42,-53,-55,-56,-58,67,67,67,67,67,67,67,-57,67,67,67,67,67,67,67,67,67,67,-41,-59,-30,67,67,67,67,-24,-26,-29,67,-25,-28,67,]),'OF':([37,47,48,49,50,52,71,75,76,77,78,82,90,91,92,93,94,95,96,102,103,106,110,122,126,129,135,136,],[-54,-42,-53,-55,-56,-58,99,-38,-39,-40,-57,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,-24,-26,-29,-25,-28,]),'THEN':([37,47,48,49,50,52,72,75,76,77,78,82,90,91,92,93,94,95,96,102,103,106,110,122,126,129,135,136,],[-54,-42,-53,-55,-56,-58,100,-38,-39,-40,-57,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,-24,-26,-29,-25,-28,]),'LOOP':([37,47,48,49,50,52,73,75,76,77,78,82,90,91,92,93,94,95,96,102,103,106,110,122,126,129,135,136,],[-54,-42,-53,-55,-56,-58,101,-38,-39,-40,-57,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,-24,-26,-29,-25,-28,]),'ELSE':([37,47,48,49,50,52,75,76,77,78,82,90,91,92,93,94,95,96,102,103,106,110,115,122,126,129,135,136,],[-54,-42,-53,-55,-56,-58,-38,-39,-40,-57,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,125,-24,-26,-29,-25,-28,]),'POOL':([37,47,48,49,50,52,75,76,77,78,82,90,91,92,93,94,95,96,102,103,106,110,116,122,126,129,135,136,],[-54,-42,-53,-55,-56,-58,-38,-39,-40,-57,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,126,-24,-26,-29,-25,-28,]),'FI':([37,47,48,49,50,52,75,76,77,78,82,90,91,92,93,94,95,96,102,103,106,110,122,126,129,132,135,136,],[-54,-42,-53,-55,-56,-58,-38,-39,-40,-57,-27,-31,-32,-33,-34,-35,-36,-37,-41,-59,-30,-23,-24,-26,-29,135,-25,-28,]),'ESAC':([112,123,130,],[122,-45,-46,]),'ARROW':([131,],[134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,5,],[2,7,]),'def_class':([0,5,],[3,3,]),'feature_list':([8,17,18,21,],[10,22,23,31,]),'def_attr':([8,17,18,21,39,98,],[11,11,11,11,69,69,]),'def_func':([8,17,18,21,],[12,12,12,12,]),'epsilon':([8,17,18,20,21,58,109,128,],[13,13,13,30,13,87,87,87,]),'params':([20,],[26,]),'param_list':([20,35,],[27,56,]),'param_list_empty':([20,],[28,]),'param':([20,35,],[29,29,]),'expr':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[38,71,72,73,74,75,76,77,80,82,86,90,91,92,93,94,95,96,110,115,116,80,118,86,86,132,86,137,]),'atom':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'block':([32,40,41,42,43,44,45,46,53,57,58,61,62,63,64,65,66,67,97,100,101,104,105,107,109,125,128,134,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'let_attrs':([39,98,],[68,111,]),'block_list':([53,104,],[79,117,]),'args':([58,109,128,],[83,121,133,]),'arg_list':([58,107,109,128,],[84,119,84,84,]),'arg_list_empty':([58,109,128,],[85,85,85,]),'case_list':([99,123,],[112,130,]),'case_option':([99,123,],[113,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',28),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',32),
  ('class_list -> def_class SEMICOLON class_list','class_list',3,'p_class_list','parser.py',36),
  ('class_list -> def_class SEMICOLON','class_list',2,'p_class_list','parser.py',37),
  ('def_class -> CLASS TYPE LBRACE feature_list RBRACE','def_class',5,'p_def_class','parser.py',41),
  ('def_class -> CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE','def_class',7,'p_def_class','parser.py',42),
  ('feature_list -> def_attr SEMICOLON feature_list','feature_list',3,'p_feature_list','parser.py',50),
  ('feature_list -> def_func SEMICOLON feature_list','feature_list',3,'p_feature_list','parser.py',51),
  ('feature_list -> epsilon','feature_list',1,'p_feature_list','parser.py',52),
  ('def_attr -> ID COLON TYPE','def_attr',3,'p_def_attr','parser.py',56),
  ('def_attr -> ID COLON TYPE ASSIGN expr','def_attr',5,'p_def_attr','parser.py',57),
  ('def_func -> ID LPAREN params RPAREN COLON TYPE LBRACE expr RBRACE','def_func',9,'p_def_func','parser.py',65),
  ('params -> param_list','params',1,'p_params','parser.py',69),
  ('params -> param_list_empty','params',1,'p_params','parser.py',70),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',74),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',75),
  ('param_list_empty -> epsilon','param_list_empty',1,'p_param_list_empty','parser.py',79),
  ('param -> ID COLON TYPE','param',3,'p_param','parser.py',83),
  ('let_list -> let_assign','let_list',1,'p_let_list','parser.py',88),
  ('let_list -> let_assign COMMA let_list','let_list',3,'p_let_list','parser.py',89),
  ('let_assign -> param ASSIGN expr','let_assign',3,'p_let_assign','parser.py',93),
  ('let_assign -> param','let_assign',1,'p_let_assign','parser.py',94),
  ('expr -> LET let_attrs IN expr','expr',4,'p_expr_flow','parser.py',101),
  ('expr -> CASE expr OF case_list ESAC','expr',5,'p_expr_flow','parser.py',102),
  ('expr -> IF expr THEN expr ELSE expr FI','expr',7,'p_expr_flow','parser.py',103),
  ('expr -> WHILE expr LOOP expr POOL','expr',5,'p_expr_flow','parser.py',104),
  ('expr -> ID ASSIGN expr','expr',3,'p_expr_assign','parser.py',117),
  ('expr -> expr AT TYPE DOT ID LPAREN args RPAREN','expr',8,'p_expr_func_call','parser.py',123),
  ('expr -> expr DOT ID LPAREN args RPAREN','expr',6,'p_expr_func_call','parser.py',124),
  ('expr -> ID LPAREN args RPAREN','expr',4,'p_expr_func_call','parser.py',125),
  ('expr -> expr PLUS expr','expr',3,'p_expr_operators_binary','parser.py',141),
  ('expr -> expr MINUS expr','expr',3,'p_expr_operators_binary','parser.py',142),
  ('expr -> expr STAR expr','expr',3,'p_expr_operators_binary','parser.py',143),
  ('expr -> expr DIV expr','expr',3,'p_expr_operators_binary','parser.py',144),
  ('expr -> expr LESS expr','expr',3,'p_expr_operators_binary','parser.py',145),
  ('expr -> expr LESSEQ expr','expr',3,'p_expr_operators_binary','parser.py',146),
  ('expr -> expr EQUAL expr','expr',3,'p_expr_operators_binary','parser.py',147),
  ('expr -> NOT expr','expr',2,'p_expr_operators_unary','parser.py',165),
  ('expr -> ISVOID expr','expr',2,'p_expr_operators_unary','parser.py',166),
  ('expr -> LNOT expr','expr',2,'p_expr_operators_unary','parser.py',167),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','parser.py',177),
  ('expr -> atom','expr',1,'p_expr_atom','parser.py',181),
  ('let_attrs -> def_attr','let_attrs',1,'p_let_attrs','parser.py',185),
  ('let_attrs -> def_attr COMMA let_attrs','let_attrs',3,'p_let_attrs','parser.py',186),
  ('case_list -> case_option SEMICOLON','case_list',2,'p_case_list','parser.py',190),
  ('case_list -> case_option SEMICOLON case_list','case_list',3,'p_case_list','parser.py',191),
  ('case_option -> ID COLON TYPE ARROW expr','case_option',5,'p_case_option','parser.py',195),
  ('args -> arg_list','args',1,'p_args','parser.py',199),
  ('args -> arg_list_empty','args',1,'p_args','parser.py',200),
  ('arg_list -> expr','arg_list',1,'p_arg_list','parser.py',204),
  ('arg_list -> expr COMMA arg_list','arg_list',3,'p_arg_list','parser.py',205),
  ('arg_list_empty -> epsilon','arg_list_empty',1,'p_arg_list_empty','parser.py',209),
  ('atom -> INT','atom',1,'p_atom_int','parser.py',213),
  ('atom -> ID','atom',1,'p_atom_id','parser.py',217),
  ('atom -> BOOL','atom',1,'p_atom_bool','parser.py',221),
  ('atom -> STRING','atom',1,'p_atom_string','parser.py',226),
  ('atom -> NEW TYPE','atom',2,'p_atom_new','parser.py',231),
  ('atom -> block','atom',1,'p_atom_block','parser.py',236),
  ('block -> LBRACE block_list RBRACE','block',3,'p_block','parser.py',240),
  ('block_list -> expr SEMICOLON','block_list',2,'p_block_list','parser.py',244),
  ('block_list -> expr SEMICOLON block_list','block_list',3,'p_block_list','parser.py',245),
]
