.TYPE

type Object{

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
} ;
type IO{

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method out_string : IO_out_string ;
	method out_int : IO_out_int ;
	method in_int : IO_in_int ;
	method in_string : IO_in_string ;
} ;
type String{

	method length : String_lenght ;
	method concat : String_concat ;
	method substr : String_substr ;
	method abort : String_abort ;
	method type_name : String_type_name ;
	method copy : String_copy ;
} ;
type Int{

	method abort : Int_abort ;
	method type_name : Int_type_name ;
	method copy : Int_copy ;
} ;
type Bool{

	method abort : Bool_abort ;
	method type_name : Bool_type_name ;
	method copy : Bool_copy ;
} ;
type A{
	attrubte var : A_var ;

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method value : A_value ;
	method set_var : A_set_var ;
	method method1 : A_method1 ;
	method method2 : A_method2 ;
	method method3 : A_method3 ;
	method method4 : A_method4 ;
	method method5 : A_method5 ;
	method A : A_A ;
} ;
type B{
	attrubte var : A_var ;

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method value : A_value ;
	method set_var : A_set_var ;
	method method1 : A_method1 ;
	method method2 : A_method2 ;
	method method3 : A_method3 ;
	method method4 : A_method4 ;
	method method5 : B_method5 ;
	method A : A_A ;
	method B : B_B ;
} ;
type C{
	attrubte var : A_var ;

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method value : A_value ;
	method set_var : A_set_var ;
	method method1 : A_method1 ;
	method method2 : A_method2 ;
	method method3 : A_method3 ;
	method method4 : A_method4 ;
	method method5 : C_method5 ;
	method A : A_A ;
	method B : B_B ;
	method method6 : C_method6 ;
	method C : C_C ;
} ;
type D{
	attrubte var : A_var ;

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method value : A_value ;
	method set_var : A_set_var ;
	method method1 : A_method1 ;
	method method2 : A_method2 ;
	method method3 : A_method3 ;
	method method4 : A_method4 ;
	method method5 : B_method5 ;
	method A : A_A ;
	method B : B_B ;
	method method7 : D_method7 ;
	method D : D_D ;
} ;
type E{
	attrubte var : A_var ;

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method value : A_value ;
	method set_var : A_set_var ;
	method method1 : A_method1 ;
	method method2 : A_method2 ;
	method method3 : A_method3 ;
	method method4 : A_method4 ;
	method method5 : B_method5 ;
	method A : A_A ;
	method B : B_B ;
	method method7 : D_method7 ;
	method D : D_D ;
	method method6 : E_method6 ;
	method E : E_E ;
} ;
type A2I{

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method c2i : A2I_c2i ;
	method i2c : A2I_i2c ;
	method a2i : A2I_a2i ;
	method a2i_aux : A2I_a2i_aux ;
	method i2a : A2I_i2a ;
	method i2a_aux : A2I_i2a_aux ;
} ;
type Main{
	attrubte char : Main_char ;
	attrubte avar : Main_avar ;
	attrubte a_var : Main_a_var ;
	attrubte flag : Main_flag ;

	method abort : Object_abort ;
	method type_name : Object_type_name ;
	method copy : Object_copy ;
	method out_string : IO_out_string ;
	method out_int : IO_out_int ;
	method in_string : IO_in_string ;
	method in_int : IO_in_int ;
	method menu : Main_menu ;
	method prompt : Main_prompt ;
	method get_int : Main_get_int ;
	method is_even : Main_is_even ;
	method class_type : Main_class_type ;
	method print : Main_print ;
	method main : Main_main ;
	method Main : Main_Main ;
} ;

.DATA

data_0 = "Void" ;
data_1 = "0" ;
data_2 = "1" ;
data_3 = "2" ;
data_4 = "3" ;
data_5 = "4" ;
data_6 = "5" ;
data_7 = "6" ;
data_8 = "7" ;
data_9 = "8" ;
data_10 = "9" ;
data_11 = "" ;
data_12 = "9" ;
data_13 = "8" ;
data_14 = "7" ;
data_15 = "6" ;
data_16 = "5" ;
data_17 = "4" ;
data_18 = "3" ;
data_19 = "2" ;
data_20 = "1" ;
data_21 = "0" ;
data_22 = "-" ;
data_23 = "+" ;
data_24 = "-" ;
data_25 = "0" ;
data_26 = "" ;
data_27 = "" ;
data_28 = "
	To add a number to " ;
data_29 = "...enter a:
" ;
data_30 = "	To negate " ;
data_31 = "...enter b:
" ;
data_32 = "	To find the difference between " ;
data_33 = "and another number...enter c:
" ;
data_34 = "	To find the factorial of " ;
data_35 = "...enter d:
" ;
data_36 = "	To square " ;
data_37 = "...enter e:
" ;
data_38 = "	To cube " ;
data_39 = "...enter f:
" ;
data_40 = "	To find out if " ;
data_41 = "is a multiple of 3...enter g:
" ;
data_42 = "	To divide " ;
data_43 = "by 8...enter h:
" ;
data_44 = "	To get a new number...enter j:
" ;
data_45 = "	To quit...enter q:

" ;
data_46 = "
" ;
data_47 = "Please enter a number...  " ;
data_48 = "Class type is now E
" ;
data_49 = "Class type is now C
" ;
data_50 = "Class type is now D
" ;
data_51 = "Class type is now B
" ;
data_52 = "Class type is now A
" ;
data_53 = "Oooops
" ;
data_54 = " " ;
data_55 = "number " ;
data_56 = "is odd!
" ;
data_57 = "is even!
" ;
data_58 = "a" ;
data_59 = "b" ;
data_60 = "c" ;
data_61 = "d" ;
data_62 = "e" ;
data_63 = "f" ;
data_64 = "g" ;
data_65 = "h" ;
data_66 = "j" ;
data_67 = "q" ;
data_68 = "number " ;
data_69 = "is equal to " ;
data_70 = "times 8 with a remainder of " ;
data_71 = "
" ;
data_72 = "number " ;
data_73 = "is not divisible by 3.
" ;
data_74 = "number " ;
data_75 = "is divisible by 3.
" ;
data_76 = "Oooops
" ;

.CODE

function entry{


	local__internal_0 = ALLOCATE local__internal_0 ;
	None = CALL Main ;
	local__internal_1 = CALL main ;
	RETURN 0 ;
}
function Object_abort{
	PARAM self ;


	local_abort_Object_self_0 = self ;
	EXIT self 0 ;
}
function Object_type_name{
	PARAM self ;


	local_type_name_Object_result_0 = TYPEOF self	RETURN local_type_name_Object_result_0 ;
}
function Object_copy{
	PARAM self ;


	local_copy_Object_result_0 = COPY self ;
	RETURN local_copy_Object_result_0 ;
}
function IO_out_string{
	PARAM self ;
	PARAM word ;


	local_out_string_String_self_0 = self ;
	OUT String word ;
	RETURN local_out_string_String_self_0 ;
}
function IO_out_int{
	PARAM self ;
	PARAM number ;


	local_out_int_IO_self_0 = self ;
	OUT Int number ;
	RETURN local_out_int_IO_self_0 ;
}
function IO_in_int{
	PARAM self ;


	local_in_int_IO_result_0 = READ Int ;
	RETURN local_in_int_IO_result_0 ;
}
function IO_in_string{
	PARAM self ;


	local_in_string_IO_result_0 = READ String ;
	RETURN local_in_string_IO_result_0 ;
}
function String_lenght{
	PARAM self ;


	local_length_String_result_0 = LENGTH self ;
	RETURN local_length_String_result_0 ;
}
function String_concat{
	PARAM self ;
	PARAM word ;


	local_concat_String_result_0 = CONCAT self word ;
	RETURN local_concat_String_result_0 ;
}
function String_substr{
	PARAM self ;
	PARAM begin ;
	PARAM end ;


	local_substr_String_result_0 = SUBSTR self begin end ;
	RETURN local_substr_String_result_0 ;
}
function String_type_name{
	PARAM self ;


	local_type_name_String_result_0 = LOAD type_String ;
	RETURN local_type_name_String_result_0 ;
}
function String_copy{
	PARAM self ;


	local_copy_String_result_0 = CONCAT self None ;
	RETURN local_copy_String_result_0 ;
}
function Int_type_name{
	PARAM self ;


	local_type_name_Int_result_0 = LOAD type_Int ;
	RETURN local_type_name_Int_result_0 ;
}
function Int_copy{
	PARAM self ;


	local_copy_Int_result_0 = self ;
	RETURN local_copy_Int_result_0 ;
}
function Bool_type_name{
	PARAM self ;


	local_type_name_Bool_result_0 = LOAD type_Bool ;
	RETURN local_type_name_Bool_result_0 ;
}
function Bool_copy{
	PARAM self ;


	local_copy_result_Bool_0 = self ;
	RETURN local_copy_result_Bool_0 ;
}
function String_abort{
	PARAM self ;


	self = LOAD string_abort ;
	OUT String self ;
	EXIT self 0 ;
}
function Int_abort{
	PARAM self ;


	self = LOAD int_abort ;
	OUT String self ;
	EXIT self 0 ;
}
function Bool_abort{
	PARAM self ;


	self = LOAD bool_abort ;
	OUT String self ;
	EXIT self 0 ;
}
function A_A{
	PARAM self ;


	SETATTR self var 0 ;
	local__internal_0 = self ;
	RETURN local__internal_0 ;
}
function A_value{
	PARAM self ;


	local__var_0 = GETATTR self var ;
	RETURN local__var_0 ;
}
function A_set_var{
	PARAM self ;
	PARAM num ;


	SETATTR self var num ;
	local__internal_0 = self ;
	RETURN local__internal_0 ;
}
function A_method1{
	PARAM self ;
	PARAM num ;


	RETURN self ;
}
function A_method2{
	PARAM self ;
	PARAM num1 ;
	PARAM num2 ;


	local__x_0 = 0 ;
	local__internal_1 = num1 + num2 ;
	local__x_0 = local__internal_1 ;
	local__internal_2 = ALLOCATE local__internal_2 ;
	local__internal_2 = CALL B ;
	local__internal_4 = TYPEOF local__internal_2	local__internal_5 = LOAD data_0 ;
	local__internal_4 = local__internal_4 == local__internal_5 ;
	IF local__internal_4 GOTO continue__84 ;
	ERROR dispatch_error ;
	LABEL continue__84 ;
	local__internal_3 = VCALL local__internal_2 set_var ;
	local__internal_6 = local__internal_3 ;
	RETURN local__internal_6 ;
}
function A_method3{
	PARAM self ;
	PARAM num ;


	local__x_0 = 0 ;
	local__internal_1 = NOT num ;
	local__x_0 = local__internal_1 ;
	local__internal_2 = ALLOCATE local__internal_2 ;
	local__internal_2 = CALL C ;
	local__internal_4 = TYPEOF local__internal_2	local__internal_5 = LOAD data_0 ;
	local__internal_4 = local__internal_4 == local__internal_5 ;
	IF local__internal_4 GOTO continue__111 ;
	ERROR dispatch_error ;
	LABEL continue__111 ;
	local__internal_3 = VCALL local__internal_2 set_var ;
	local__internal_6 = local__internal_3 ;
	RETURN local__internal_6 ;
}
function A_method4{
	PARAM self ;
	PARAM num1 ;
	PARAM num2 ;


	local__internal_0 = num2 < num1 ;
	IF local__internal_0 GOTO true__130 ;
	local__x_2 = 0 ;
	local__internal_3 = num2 - num1 ;
	local__x_2 = local__internal_3 ;
	local__internal_4 = ALLOCATE local__internal_4 ;
	local__internal_4 = CALL D ;
	local__internal_6 = TYPEOF local__internal_4	local__internal_7 = LOAD data_0 ;
	local__internal_6 = local__internal_6 == local__internal_7 ;
	IF local__internal_6 GOTO continue__143 ;
	ERROR dispatch_error ;
	LABEL continue__143 ;
	local__internal_5 = VCALL local__internal_4 set_var ;
	local__internal_8 = local__internal_5 ;
	local__internal_1 = local__internal_8 ;
	GOTO end__130 ;
	LABEL true__130 ;
	local__x_9 = 0 ;
	local__internal_10 = num1 - num2 ;
	local__x_9 = local__internal_10 ;
	local__internal_11 = ALLOCATE local__internal_11 ;
	local__internal_11 = CALL D ;
	local__internal_13 = TYPEOF local__internal_11	local__internal_14 = LOAD data_0 ;
	local__internal_13 = local__internal_13 == local__internal_14 ;
	IF local__internal_13 GOTO continue__169 ;
	ERROR dispatch_error ;
	LABEL continue__169 ;
	local__internal_12 = VCALL local__internal_11 set_var ;
	local__internal_15 = local__internal_12 ;
	local__internal_1 = local__internal_15 ;
	LABEL end__130 ;
	RETURN local__internal_1 ;
}
function A_method5{
	PARAM self ;
	PARAM num ;


	local__x_0 = 1 ;
	local__y_1 = 1 ;
	local__internal_2	LABEL start__191 ;
	local__internal_3 = local__y_1 <= num ;
	IF local__internal_3 GOTO end__191 ;
	local__internal_4 = local__x_0 * local__y_1 ;
	local__x_0 = local__internal_4 ;
	local__internal_5 = local__y_1 + 1 ;
	local__y_1 = local__internal_5 ;
	local__internal_6 = local__internal_5 ;
	local__internal_2 = local__internal_6 ;
	GOTO start__191 ;
	LABEL end__191 ;
	local__internal_7 = ALLOCATE local__internal_7 ;
	local__internal_7 = CALL E ;
	local__internal_9 = TYPEOF local__internal_7	local__internal_10 = LOAD data_0 ;
	local__internal_9 = local__internal_9 == local__internal_10 ;
	IF local__internal_9 GOTO continue__214 ;
	ERROR dispatch_error ;
	LABEL continue__214 ;
	local__internal_8 = VCALL local__internal_7 set_var ;
	local__internal_11 = local__internal_8 ;
	RETURN local__internal_11 ;
}
function B_B{
	PARAM self ;


	SETATTR self var 0 ;
	local__internal_0 = self ;
	RETURN local__internal_0 ;
}
function B_method5{
	PARAM self ;
	PARAM num ;


	local__x_0 = 0 ;
	local__internal_1 = num * num ;
	local__x_0 = local__internal_1 ;
	local__internal_2 = ALLOCATE local__internal_2 ;
	local__internal_2 = CALL E ;
	local__internal_4 = TYPEOF local__internal_2	local__internal_5 = LOAD data_0 ;
	local__internal_4 = local__internal_4 == local__internal_5 ;
	IF local__internal_4 GOTO continue__247 ;
	ERROR dispatch_error ;
	LABEL continue__247 ;
	local__internal_3 = VCALL local__internal_2 set_var ;
	local__internal_6 = local__internal_3 ;
	RETURN local__internal_6 ;
}
function C_C{
	PARAM self ;


	SETATTR self var 0 ;
	local__internal_0 = self ;
	RETURN local__internal_0 ;
}
function C_method6{
	PARAM self ;
	PARAM num ;


	local__x_0 = 0 ;
	local__internal_1 = NOT num ;
	local__x_0 = local__internal_1 ;
	local__internal_2 = ALLOCATE local__internal_2 ;
	local__internal_2 = CALL A ;
	local__internal_4 = TYPEOF local__internal_2	local__internal_5 = LOAD data_0 ;
	local__internal_4 = local__internal_4 == local__internal_5 ;
	IF local__internal_4 GOTO continue__280 ;
	ERROR dispatch_error ;
	LABEL continue__280 ;
	local__internal_3 = VCALL local__internal_2 set_var ;
	local__internal_6 = local__internal_3 ;
	RETURN local__internal_6 ;
}
function C_method5{
	PARAM self ;
	PARAM num ;


	local__x_0 = 0 ;
	local__internal_2 = num * num ;
	local__internal_1 = local__internal_2 * num ;
	local__x_0 = local__internal_1 ;
	local__internal_3 = ALLOCATE local__internal_3 ;
	local__internal_3 = CALL E ;
	local__internal_5 = TYPEOF local__internal_3	local__internal_6 = LOAD data_0 ;
	local__internal_5 = local__internal_5 == local__internal_6 ;
	IF local__internal_5 GOTO continue__309 ;
	ERROR dispatch_error ;
	LABEL continue__309 ;
	local__internal_4 = VCALL local__internal_3 set_var ;
	local__internal_7 = local__internal_4 ;
	RETURN local__internal_7 ;
}
function D_D{
	PARAM self ;


	SETATTR self var 0 ;
	local__internal_0 = self ;
	RETURN local__internal_0 ;
}
function D_method7{
	PARAM self ;
	PARAM num ;


	local__x_0 = num ;
	local__internal_1 = local__x_0 < 0 ;
	IF local__internal_1 GOTO true__335 ;
	local__internal_3 = 0 == local__x_0 ;
	IF local__internal_3 GOTO true__339 ;
	local__internal_5 = 1 == local__x_0 ;
	IF local__internal_5 GOTO true__343 ;
	local__internal_7 = 2 == local__x_0 ;
	IF local__internal_7 GOTO true__347 ;
	local__internal_9 = local__x_0 - 3 ;
	local__internal_10 = VCALL self method7 ;
	local__internal_8 = local__internal_10 ;
	GOTO end__347 ;
	LABEL true__347 ;
	local__internal_8 = 0 ;
	LABEL end__347 ;
	local__internal_6 = local__internal_8 ;
	GOTO end__343 ;
	LABEL true__343 ;
	local__internal_6 = 0 ;
	LABEL end__343 ;
	local__internal_4 = local__internal_6 ;
	GOTO end__339 ;
	LABEL true__339 ;
	local__internal_4 = 1 ;
	LABEL end__339 ;
	local__internal_2 = local__internal_4 ;
	GOTO end__335 ;
	LABEL true__335 ;
	local__internal_11 = NOT local__x_0 ;
	local__internal_12 = VCALL self method7 ;
	local__internal_2 = local__internal_12 ;
	LABEL end__335 ;
	RETURN local__internal_2 ;
}
function E_E{
	PARAM self ;


	SETATTR self var 0 ;
	local__internal_0 = self ;
	RETURN local__internal_0 ;
}
function E_method6{
	PARAM self ;
	PARAM num ;


	local__x_0 = 0 ;
	local__internal_1 = num / 8 ;
	local__x_0 = local__internal_1 ;
	local__internal_2 = ALLOCATE local__internal_2 ;
	local__internal_2 = CALL A ;
	local__internal_4 = TYPEOF local__internal_2	local__internal_5 = LOAD data_0 ;
	local__internal_4 = local__internal_4 == local__internal_5 ;
	IF local__internal_4 GOTO continue__402 ;
	ERROR dispatch_error ;
	LABEL continue__402 ;
	local__internal_3 = VCALL local__internal_2 set_var ;
	local__internal_6 = local__internal_3 ;
	RETURN local__internal_6 ;
}
function A2I_c2i{
	PARAM self ;
	PARAM char ;


	local__internal_1 = LOAD data_1 ;
	local__internal_0 = char == local__internal_1 ;
	IF local__internal_0 GOTO true__423 ;
	local__internal_4 = LOAD data_2 ;
	local__internal_3 = char == local__internal_4 ;
	IF local__internal_3 GOTO true__430 ;
	local__internal_7 = LOAD data_3 ;
	local__internal_6 = char == local__internal_7 ;
	IF local__internal_6 GOTO true__437 ;
	local__internal_10 = LOAD data_4 ;
	local__internal_9 = char == local__internal_10 ;
	IF local__internal_9 GOTO true__444 ;
	local__internal_13 = LOAD data_5 ;
	local__internal_12 = char == local__internal_13 ;
	IF local__internal_12 GOTO true__451 ;
	local__internal_16 = LOAD data_6 ;
	local__internal_15 = char == local__internal_16 ;
	IF local__internal_15 GOTO true__458 ;
	local__internal_19 = LOAD data_7 ;
	local__internal_18 = char == local__internal_19 ;
	IF local__internal_18 GOTO true__465 ;
	local__internal_22 = LOAD data_8 ;
	local__internal_21 = char == local__internal_22 ;
	IF local__internal_21 GOTO true__472 ;
	local__internal_25 = LOAD data_9 ;
	local__internal_24 = char == local__internal_25 ;
	IF local__internal_24 GOTO true__479 ;
	local__internal_28 = LOAD data_10 ;
	local__internal_27 = char == local__internal_28 ;
	IF local__internal_27 GOTO true__486 ;
	local__internal_30 = VCALL self abort ;
	local__internal_31 = 0 ;
	local__internal_29 = local__internal_31 ;
	GOTO end__486 ;
	LABEL true__486 ;
	local__internal_29 = 9 ;
	LABEL end__486 ;
	local__internal_26 = local__internal_29 ;
	GOTO end__479 ;
	LABEL true__479 ;
	local__internal_26 = 8 ;
	LABEL end__479 ;
	local__internal_23 = local__internal_26 ;
	GOTO end__472 ;
	LABEL true__472 ;
	local__internal_23 = 7 ;
	LABEL end__472 ;
	local__internal_20 = local__internal_23 ;
	GOTO end__465 ;
	LABEL true__465 ;
	local__internal_20 = 6 ;
	LABEL end__465 ;
	local__internal_17 = local__internal_20 ;
	GOTO end__458 ;
	LABEL true__458 ;
	local__internal_17 = 5 ;
	LABEL end__458 ;
	local__internal_14 = local__internal_17 ;
	GOTO end__451 ;
	LABEL true__451 ;
	local__internal_14 = 4 ;
	LABEL end__451 ;
	local__internal_11 = local__internal_14 ;
	GOTO end__444 ;
	LABEL true__444 ;
	local__internal_11 = 3 ;
	LABEL end__444 ;
	local__internal_8 = local__internal_11 ;
	GOTO end__437 ;
	LABEL true__437 ;
	local__internal_8 = 2 ;
	LABEL end__437 ;
	local__internal_5 = local__internal_8 ;
	GOTO end__430 ;
	LABEL true__430 ;
	local__internal_5 = 1 ;
	LABEL end__430 ;
	local__internal_2 = local__internal_5 ;
	GOTO end__423 ;
	LABEL true__423 ;
	local__internal_2 = 0 ;
	LABEL end__423 ;
	RETURN local__internal_2 ;
}
function A2I_i2c{
	PARAM self ;
	PARAM i ;


	local__internal_0 = i == 0 ;
	IF local__internal_0 GOTO true__549 ;
	local__internal_2 = i == 1 ;
	IF local__internal_2 GOTO true__553 ;
	local__internal_4 = i == 2 ;
	IF local__internal_4 GOTO true__557 ;
	local__internal_6 = i == 3 ;
	IF local__internal_6 GOTO true__561 ;
	local__internal_8 = i == 4 ;
	IF local__internal_8 GOTO true__565 ;
	local__internal_10 = i == 5 ;
	IF local__internal_10 GOTO true__569 ;
	local__internal_12 = i == 6 ;
	IF local__internal_12 GOTO true__573 ;
	local__internal_14 = i == 7 ;
	IF local__internal_14 GOTO true__577 ;
	local__internal_16 = i == 8 ;
	IF local__internal_16 GOTO true__581 ;
	local__internal_18 = i == 9 ;
	IF local__internal_18 GOTO true__585 ;
	local__internal_20 = VCALL self abort ;
	local__internal_21 = LOAD data_11 ;
	local__internal_22 = local__internal_21 ;
	local__internal_19 = local__internal_22 ;
	GOTO end__585 ;
	LABEL true__585 ;
	local__internal_23 = LOAD data_12 ;
	local__internal_19 = local__internal_23 ;
	LABEL end__585 ;
	local__internal_17 = local__internal_19 ;
	GOTO end__581 ;
	LABEL true__581 ;
	local__internal_24 = LOAD data_13 ;
	local__internal_17 = local__internal_24 ;
	LABEL end__581 ;
	local__internal_15 = local__internal_17 ;
	GOTO end__577 ;
	LABEL true__577 ;
	local__internal_25 = LOAD data_14 ;
	local__internal_15 = local__internal_25 ;
	LABEL end__577 ;
	local__internal_13 = local__internal_15 ;
	GOTO end__573 ;
	LABEL true__573 ;
	local__internal_26 = LOAD data_15 ;
	local__internal_13 = local__internal_26 ;
	LABEL end__573 ;
	local__internal_11 = local__internal_13 ;
	GOTO end__569 ;
	LABEL true__569 ;
	local__internal_27 = LOAD data_16 ;
	local__internal_11 = local__internal_27 ;
	LABEL end__569 ;
	local__internal_9 = local__internal_11 ;
	GOTO end__565 ;
	LABEL true__565 ;
	local__internal_28 = LOAD data_17 ;
	local__internal_9 = local__internal_28 ;
	LABEL end__565 ;
	local__internal_7 = local__internal_9 ;
	GOTO end__561 ;
	LABEL true__561 ;
	local__internal_29 = LOAD data_18 ;
	local__internal_7 = local__internal_29 ;
	LABEL end__561 ;
	local__internal_5 = local__internal_7 ;
	GOTO end__557 ;
	LABEL true__557 ;
	local__internal_30 = LOAD data_19 ;
	local__internal_5 = local__internal_30 ;
	LABEL end__557 ;
	local__internal_3 = local__internal_5 ;
	GOTO end__553 ;
	LABEL true__553 ;
	local__internal_31 = LOAD data_20 ;
	local__internal_3 = local__internal_31 ;
	LABEL end__553 ;
	local__internal_1 = local__internal_3 ;
	GOTO end__549 ;
	LABEL true__549 ;
	local__internal_32 = LOAD data_21 ;
	local__internal_1 = local__internal_32 ;
	LABEL end__549 ;
	RETURN local__internal_1 ;
}
function A2I_a2i{
	PARAM self ;
	PARAM s ;


	local__internal_2 = TYPEOF s	local__internal_3 = LOAD data_0 ;
	local__internal_2 = local__internal_2 == local__internal_3 ;
	IF local__internal_2 GOTO continue__682 ;
	ERROR dispatch_error ;
	LABEL continue__682 ;
	local__internal_1 = CALL length ;
	local__internal_0 = local__internal_1 == 0 ;
	IF local__internal_0 GOTO true__693 ;
	local__internal_7 = TYPEOF s	local__internal_8 = LOAD data_0 ;
	local__internal_7 = local__internal_7 == local__internal_8 ;
	IF local__internal_7 GOTO continue__700 ;
	ERROR dispatch_error ;
	LABEL continue__700 ;
	local__internal_6 = CALL substr ;
	local__internal_9 = LOAD data_22 ;
	local__internal_5 = local__internal_6 == local__internal_9 ;
	IF local__internal_5 GOTO true__714 ;
	local__internal_13 = TYPEOF s	local__internal_14 = LOAD data_0 ;
	local__internal_13 = local__internal_13 == local__internal_14 ;
	IF local__internal_13 GOTO continue__721 ;
	ERROR dispatch_error ;
	LABEL continue__721 ;
	local__internal_12 = CALL substr ;
	local__internal_15 = LOAD data_23 ;
	local__internal_11 = local__internal_12 == local__internal_15 ;
	IF local__internal_11 GOTO true__735 ;
	local__internal_17 = VCALL self a2i_aux ;
	local__internal_16 = local__internal_17 ;
	GOTO end__735 ;
	LABEL true__735 ;
	local__internal_20 = TYPEOF s	local__internal_21 = LOAD data_0 ;
	local__internal_20 = local__internal_20 == local__internal_21 ;
	IF local__internal_20 GOTO continue__749 ;
	ERROR dispatch_error ;
	LABEL continue__749 ;
	local__internal_19 = CALL length ;
	local__internal_18 = local__internal_19 - 1 ;
	local__internal_23 = TYPEOF s	local__internal_24 = LOAD data_0 ;
	local__internal_23 = local__internal_23 == local__internal_24 ;
	IF local__internal_23 GOTO continue__763 ;
	ERROR dispatch_error ;
	LABEL continue__763 ;
	local__internal_22 = CALL substr ;
	local__internal_25 = VCALL self a2i_aux ;
	local__internal_16 = local__internal_25 ;
	LABEL end__735 ;
	local__internal_10 = local__internal_16 ;
	GOTO end__714 ;
	LABEL true__714 ;
	local__internal_29 = TYPEOF s	local__internal_30 = LOAD data_0 ;
	local__internal_29 = local__internal_29 == local__internal_30 ;
	IF local__internal_29 GOTO continue__787 ;
	ERROR dispatch_error ;
	LABEL continue__787 ;
	local__internal_28 = CALL length ;
	local__internal_27 = local__internal_28 - 1 ;
	local__internal_32 = TYPEOF s	local__internal_33 = LOAD data_0 ;
	local__internal_32 = local__internal_32 == local__internal_33 ;
	IF local__internal_32 GOTO continue__801 ;
	ERROR dispatch_error ;
	LABEL continue__801 ;
	local__internal_31 = CALL substr ;
	local__internal_34 = VCALL self a2i_aux ;
	local__internal_26 = NOT local__internal_34 ;
	local__internal_10 = local__internal_26 ;
	LABEL end__714 ;
	local__internal_4 = local__internal_10 ;
	GOTO end__693 ;
	LABEL true__693 ;
	local__internal_4 = 0 ;
	LABEL end__693 ;
	RETURN local__internal_4 ;
}
function A2I_a2i_aux{
	PARAM self ;
	PARAM s ;


	local_ux_int_0 = 0 ;
	local_ux_internal_3 = TYPEOF s	local_ux_internal_4 = LOAD data_0 ;
	local_ux_internal_3 = local_ux_internal_3 == local_ux_internal_4 ;
	IF local_ux_internal_3 GOTO continue__831 ;
	ERROR dispatch_error ;
	LABEL continue__831 ;
	local_ux_internal_2 = CALL length ;
	local_ux_j_1 = local_ux_internal_2 ;
	local_ux_i_5 = 0 ;
	local_ux_internal_6	LABEL start__844 ;
	local_ux_internal_7 = local_ux_i_5 < local_ux_j_1 ;
	IF local_ux_internal_7 GOTO end__844 ;
	local_ux_internal_9 = local_ux_int_0 * 10 ;
	local_ux_internal_11 = TYPEOF s	local_ux_internal_12 = LOAD data_0 ;
	local_ux_internal_11 = local_ux_internal_11 == local_ux_internal_12 ;
	IF local_ux_internal_11 GOTO continue__858 ;
	ERROR dispatch_error ;
	LABEL continue__858 ;
	local_ux_internal_10 = CALL substr ;
	local_ux_internal_13 = VCALL self c2i ;
	local_ux_internal_8 = local_ux_internal_9 + local_ux_internal_13 ;
	local_ux_int_0 = local_ux_internal_8 ;
	local_ux_internal_14 = local_ux_i_5 + 1 ;
	local_ux_i_5 = local_ux_internal_14 ;
	local_ux_internal_15 = local_ux_internal_14 ;
	local_ux_internal_6 = local_ux_internal_15 ;
	GOTO start__844 ;
	LABEL end__844 ;
	local_ux_internal_16 = local_ux_int_0 ;
	RETURN local_ux_internal_16 ;
}
function A2I_i2a{
	PARAM self ;
	PARAM i ;


	local__internal_0 = i == 0 ;
	IF local__internal_0 GOTO true__889 ;
	local__internal_2 = 0 < i ;
	IF local__internal_2 GOTO true__893 ;
	local__internal_4 = LOAD data_24 ;
	local__internal_6 = NOT 1 ;
	local__internal_5 = i * local__internal_6 ;
	local__internal_7 = VCALL self i2a_aux ;
	local__internal_9 = TYPEOF local__internal_4	local__internal_10 = LOAD data_0 ;
	local__internal_9 = local__internal_9 == local__internal_10 ;
	IF local__internal_9 GOTO continue__909 ;
	ERROR dispatch_error ;
	LABEL continue__909 ;
	local__internal_8 = CALL concat ;
	local__internal_3 = local__internal_8 ;
	GOTO end__893 ;
	LABEL true__893 ;
	local__internal_11 = VCALL self i2a_aux ;
	local__internal_3 = local__internal_11 ;
	LABEL end__893 ;
	local__internal_1 = local__internal_3 ;
	GOTO end__889 ;
	LABEL true__889 ;
	local__internal_12 = LOAD data_25 ;
	local__internal_1 = local__internal_12 ;
	LABEL end__889 ;
	RETURN local__internal_1 ;
}
function A2I_i2a_aux{
	PARAM self ;
	PARAM i ;


	local_ux_internal_0 = i == 0 ;
	IF local_ux_internal_0 GOTO true__942 ;
	local_ux_internal_3 = i / 10 ;
	local_ux_next_2 = local_ux_internal_3 ;
	local_ux_internal_4 = VCALL self i2a_aux ;
	local_ux_internal_6 = local_ux_next_2 * 10 ;
	local_ux_internal_5 = i - local_ux_internal_6 ;
	local_ux_internal_7 = VCALL self i2c ;
	local_ux_internal_9 = TYPEOF local_ux_internal_4	local_ux_internal_10 = LOAD data_0 ;
	local_ux_internal_9 = local_ux_internal_9 == local_ux_internal_10 ;
	IF local_ux_internal_9 GOTO continue__963 ;
	ERROR dispatch_error ;
	LABEL continue__963 ;
	local_ux_internal_8 = CALL concat ;
	local_ux_internal_1 = local_ux_internal_8 ;
	GOTO end__942 ;
	LABEL true__942 ;
	local_ux_internal_11 = LOAD data_26 ;
	local_ux_internal_1 = local_ux_internal_11 ;
	LABEL end__942 ;
	RETURN local_ux_internal_1 ;
}
function Main_Main{
	PARAM self ;


	local__internal_0 = LOAD data_27 ;
	SETATTR self char local__internal_0 ;
	local__avar_1	SETATTR self avar local__avar_1 ;
	local__a_var_2	SETATTR self a_var local__a_var_2 ;
	SETATTR self flag 1 ;
	local__internal_3 = self ;
	RETURN local__internal_3 ;
}
function Main_menu{
	PARAM self ;


	local__internal_0 = LOAD data_28 ;
	local__internal_1 = VCALL self out_string ;
	local__avar_2 = GETATTR self avar ;
	local__internal_3 = VCALL self print ;
	local__internal_4 = LOAD data_29 ;
	local__internal_5 = VCALL self out_string ;
	local__internal_6 = LOAD data_30 ;
	local__internal_7 = VCALL self out_string ;
	local__avar_8 = GETATTR self avar ;
	local__internal_9 = VCALL self print ;
	local__internal_10 = LOAD data_31 ;
	local__internal_11 = VCALL self out_string ;
	local__internal_12 = LOAD data_32 ;
	local__internal_13 = VCALL self out_string ;
	local__avar_14 = GETATTR self avar ;
	local__internal_15 = VCALL self print ;
	local__internal_16 = LOAD data_33 ;
	local__internal_17 = VCALL self out_string ;
	local__internal_18 = LOAD data_34 ;
	local__internal_19 = VCALL self out_string ;
	local__avar_20 = GETATTR self avar ;
	local__internal_21 = VCALL self print ;
	local__internal_22 = LOAD data_35 ;
	local__internal_23 = VCALL self out_string ;
	local__internal_24 = LOAD data_36 ;
	local__internal_25 = VCALL self out_string ;
	local__avar_26 = GETATTR self avar ;
	local__internal_27 = VCALL self print ;
	local__internal_28 = LOAD data_37 ;
	local__internal_29 = VCALL self out_string ;
	local__internal_30 = LOAD data_38 ;
	local__internal_31 = VCALL self out_string ;
	local__avar_32 = GETATTR self avar ;
	local__internal_33 = VCALL self print ;
	local__internal_34 = LOAD data_39 ;
	local__internal_35 = VCALL self out_string ;
	local__internal_36 = LOAD data_40 ;
	local__internal_37 = VCALL self out_string ;
	local__avar_38 = GETATTR self avar ;
	local__internal_39 = VCALL self print ;
	local__internal_40 = LOAD data_41 ;
	local__internal_41 = VCALL self out_string ;
	local__internal_42 = LOAD data_42 ;
	local__internal_43 = VCALL self out_string ;
	local__avar_44 = GETATTR self avar ;
	local__internal_45 = VCALL self print ;
	local__internal_46 = LOAD data_43 ;
	local__internal_47 = VCALL self out_string ;
	local__internal_48 = LOAD data_44 ;
	local__internal_49 = VCALL self out_string ;
	local__internal_50 = LOAD data_45 ;
	local__internal_51 = VCALL self out_string ;
	local__internal_52 = VCALL self in_string ;
	local__internal_53 = local__internal_52 ;
	RETURN local__internal_53 ;
}
function Main_prompt{
	PARAM self ;


	local_pt_internal_0 = LOAD data_46 ;
	local_pt_internal_1 = VCALL self out_string ;
	local_pt_internal_2 = LOAD data_47 ;
	local_pt_internal_3 = VCALL self out_string ;
	local_pt_internal_4 = VCALL self in_string ;
	local_pt_internal_5 = local_pt_internal_4 ;
	RETURN local_pt_internal_5 ;
}
function Main_get_int{
	PARAM self ;


	local_int_internal_1 = ALLOCATE local_int_internal_1 ;
	local_int_z_0 = local_int_internal_1 ;
	local_int_internal_3 = VCALL self prompt ;
	local_int_s_2 = local_int_internal_3 ;
	local_int_internal_5 = TYPEOF local_int_z_0	local_int_internal_6 = LOAD data_0 ;
	local_int_internal_5 = local_int_internal_5 == local_int_internal_6 ;
	IF local_int_internal_5 GOTO continue__1216 ;
	ERROR dispatch_error ;
	LABEL continue__1216 ;
	local_int_internal_4 = VCALL local_int_z_0 a2i ;
	local_int_internal_7 = local_int_internal_4 ;
	RETURN local_int_internal_7 ;
}
function Main_is_even{
	PARAM self ;
	PARAM num ;


	local_ven_x_0 = num ;
	local_ven_internal_1 = local_ven_x_0 < 0 ;
	IF local_ven_internal_1 GOTO true__1236 ;
	local_ven_internal_3 = 0 == local_ven_x_0 ;
	IF local_ven_internal_3 GOTO true__1240 ;
	local_ven_internal_5 = 1 == local_ven_x_0 ;
	IF local_ven_internal_5 GOTO true__1244 ;
	local_ven_internal_7 = local_ven_x_0 - 2 ;
	local_ven_internal_8 = VCALL self is_even ;
	local_ven_internal_6 = local_ven_internal_8 ;
	GOTO end__1244 ;
	LABEL true__1244 ;
	local_ven_internal_6 = 0 ;
	LABEL end__1244 ;
	local_ven_internal_4 = local_ven_internal_6 ;
	GOTO end__1240 ;
	LABEL true__1240 ;
	local_ven_internal_4 = 1 ;
	LABEL end__1240 ;
	local_ven_internal_2 = local_ven_internal_4 ;
	GOTO end__1236 ;
	LABEL true__1236 ;
	local_ven_internal_9 = NOT local_ven_x_0 ;
	local_ven_internal_10 = VCALL self is_even ;
	local_ven_internal_2 = local_ven_internal_10 ;
	LABEL end__1236 ;
	RETURN local_ven_internal_2 ;
}
function Main_class_type{
	PARAM self ;
	PARAM var ;


	local_s_type_internal_1 = TYPEOF var	local_s_type_internal_2 = LOAD data_0 ;
	local_s_type_internal_1 = local_s_type_internal_1 == local_s_type_internal_2 ;
	IF local_s_type_internal_1 GOTO error__1278 ;
	local_s_type_internal_3 = CONFORMTO var E ;
	IF local_s_type_internal_3 GOTO next__1284_0 ;
	local_s_type_e_4 = var ;
	local_s_type_internal_5 = LOAD data_48 ;
	local_s_type_internal_6 = VCALL self out_string ;
	local_s_type_internal_0 = local_s_type_internal_6 ;
	GOTO end__1278 ;
	LABEL next__1284_0 ;
	local_s_type_internal_7 = CONFORMTO var C ;
	IF local_s_type_internal_7 GOTO next__1299_1 ;
	local_s_type_c_8 = var ;
	local_s_type_internal_9 = LOAD data_49 ;
	local_s_type_internal_10 = VCALL self out_string ;
	local_s_type_internal_0 = local_s_type_internal_10 ;
	GOTO end__1278 ;
	LABEL next__1299_1 ;
	local_s_type_internal_11 = CONFORMTO var D ;
	IF local_s_type_internal_11 GOTO next__1314_2 ;
	local_s_type_d_12 = var ;
	local_s_type_internal_13 = LOAD data_50 ;
	local_s_type_internal_14 = VCALL self out_string ;
	local_s_type_internal_0 = local_s_type_internal_14 ;
	GOTO end__1278 ;
	LABEL next__1314_2 ;
	local_s_type_internal_15 = CONFORMTO var B ;
	IF local_s_type_internal_15 GOTO next__1329_3 ;
	local_s_type_b_16 = var ;
	local_s_type_internal_17 = LOAD data_51 ;
	local_s_type_internal_18 = VCALL self out_string ;
	local_s_type_internal_0 = local_s_type_internal_18 ;
	GOTO end__1278 ;
	LABEL next__1329_3 ;
	local_s_type_internal_19 = CONFORMTO var A ;
	IF local_s_type_internal_19 GOTO next__1344_4 ;
	local_s_type_a_20 = var ;
	local_s_type_internal_21 = LOAD data_52 ;
	local_s_type_internal_22 = VCALL self out_string ;
	local_s_type_internal_0 = local_s_type_internal_22 ;
	GOTO end__1278 ;
	LABEL next__1344_4 ;
	local_s_type_internal_23 = CONFORMTO var Object ;
	IF local_s_type_internal_23 GOTO next__1359_5 ;
	local_s_type_o_24 = var ;
	local_s_type_internal_25 = LOAD data_53 ;
	local_s_type_internal_26 = VCALL self out_string ;
	local_s_type_internal_0 = local_s_type_internal_26 ;
	GOTO end__1278 ;
	LABEL next__1359_5 ;
	ERROR case_error ;
	LABEL error__1278 ;
	ERROR case_void_error ;
	LABEL end__1278 ;
	RETURN local_s_type_internal_0 ;
}
function Main_print{
	PARAM self ;
	PARAM var ;


	local_t_internal_1 = ALLOCATE local_t_internal_1 ;
	local_t_z_0 = local_t_internal_1 ;
	local_t_internal_3 = TYPEOF var	local_t_internal_4 = LOAD data_0 ;
	local_t_internal_3 = local_t_internal_3 == local_t_internal_4 ;
	IF local_t_internal_3 GOTO continue__1390 ;
	ERROR dispatch_error ;
	LABEL continue__1390 ;
	local_t_internal_2 = VCALL var value ;
	local_t_internal_6 = TYPEOF local_t_z_0	local_t_internal_7 = LOAD data_0 ;
	local_t_internal_6 = local_t_internal_6 == local_t_internal_7 ;
	IF local_t_internal_6 GOTO continue__1402 ;
	ERROR dispatch_error ;
	LABEL continue__1402 ;
	local_t_internal_5 = VCALL local_t_z_0 i2a ;
	local_t_internal_8 = VCALL self out_string ;
	local_t_internal_9 = LOAD data_54 ;
	local_t_internal_10 = VCALL self out_string ;
	local_t_internal_11 = local_t_internal_10 ;
	RETURN local_t_internal_11 ;
}
function Main_main{
	PARAM self ;


	local__internal_0 = ALLOCATE local__internal_0 ;
	local__internal_0 = CALL A ;
	SETATTR self avar local__internal_0 ;
	local__internal_1	LABEL start__1431 ;
	local__flag_2 = GETATTR self flag ;
	IF local__flag_2 GOTO end__1431 ;
	local__internal_3 = LOAD data_55 ;
	local__internal_4 = VCALL self out_string ;
	local__avar_5 = GETATTR self avar ;
	local__internal_6 = VCALL self print ;
	local__avar_7 = GETATTR self avar ;
	local__internal_9 = TYPEOF local__avar_7	local__internal_10 = LOAD data_0 ;
	local__internal_9 = local__internal_9 == local__internal_10 ;
	IF local__internal_9 GOTO continue__1455 ;
	ERROR dispatch_error ;
	LABEL continue__1455 ;
	local__internal_8 = VCALL local__avar_7 value ;
	local__internal_11 = VCALL self is_even ;
	IF local__internal_11 GOTO true__1468 ;
	local__internal_13 = LOAD data_56 ;
	local__internal_14 = VCALL self out_string ;
	local__internal_12 = local__internal_14 ;
	GOTO end__1468 ;
	LABEL true__1468 ;
	local__internal_15 = LOAD data_57 ;
	local__internal_16 = VCALL self out_string ;
	local__internal_12 = local__internal_16 ;
	LABEL end__1468 ;
	local__avar_17 = GETATTR self avar ;
	local__internal_18 = VCALL self class_type ;
	local__internal_19 = VCALL self menu ;
	SETATTR self char local__internal_19 ;
	local__char_21 = GETATTR self char ;
	local__internal_22 = LOAD data_58 ;
	local__internal_20 = local__char_21 == local__internal_22 ;
	IF local__internal_20 GOTO true__1506 ;
	local__char_25 = GETATTR self char ;
	local__internal_26 = LOAD data_59 ;
	local__internal_24 = local__char_25 == local__internal_26 ;
	IF local__internal_24 GOTO true__1515 ;
	local__char_29 = GETATTR self char ;
	local__internal_30 = LOAD data_60 ;
	local__internal_28 = local__char_29 == local__internal_30 ;
	IF local__internal_28 GOTO true__1524 ;
	local__char_33 = GETATTR self char ;
	local__internal_34 = LOAD data_61 ;
	local__internal_32 = local__char_33 == local__internal_34 ;
	IF local__internal_32 GOTO true__1533 ;
	local__char_37 = GETATTR self char ;
	local__internal_38 = LOAD data_62 ;
	local__internal_36 = local__char_37 == local__internal_38 ;
	IF local__internal_36 GOTO true__1542 ;
	local__char_41 = GETATTR self char ;
	local__internal_42 = LOAD data_63 ;
	local__internal_40 = local__char_41 == local__internal_42 ;
	IF local__internal_40 GOTO true__1551 ;
	local__char_45 = GETATTR self char ;
	local__internal_46 = LOAD data_64 ;
	local__internal_44 = local__char_45 == local__internal_46 ;
	IF local__internal_44 GOTO true__1560 ;
	local__char_49 = GETATTR self char ;
	local__internal_50 = LOAD data_65 ;
	local__internal_48 = local__char_49 == local__internal_50 ;
	IF local__internal_48 GOTO true__1569 ;
	local__char_53 = GETATTR self char ;
	local__internal_54 = LOAD data_66 ;
	local__internal_52 = local__char_53 == local__internal_54 ;
	IF local__internal_52 GOTO true__1578 ;
	local__char_57 = GETATTR self char ;
	local__internal_58 = LOAD data_67 ;
	local__internal_56 = local__char_57 == local__internal_58 ;
	IF local__internal_56 GOTO true__1587 ;
	local__internal_60 = ALLOCATE local__internal_60 ;
	local__internal_60 = CALL A ;
	local__avar_61 = GETATTR self avar ;
	local__internal_63 = TYPEOF local__avar_61	local__internal_64 = LOAD data_0 ;
	local__internal_63 = local__internal_63 == local__internal_64 ;
	IF local__internal_63 GOTO continue__1597 ;
	ERROR dispatch_error ;
	LABEL continue__1597 ;
	local__internal_62 = VCALL local__avar_61 value ;
	local__internal_66 = TYPEOF local__internal_60	local__internal_67 = LOAD data_0 ;
	local__internal_66 = local__internal_66 == local__internal_67 ;
	IF local__internal_66 GOTO continue__1609 ;
	ERROR dispatch_error ;
	LABEL continue__1609 ;
	local__internal_65 = VCALL local__internal_60 method1 ;
	SETATTR self avar local__internal_65 ;
	local__internal_59 = local__internal_65 ;
	GOTO end__1587 ;
	LABEL true__1587 ;
	SETATTR self flag 0 ;
	local__internal_59 = 0 ;
	LABEL end__1587 ;
	local__internal_55 = local__internal_59 ;
	GOTO end__1578 ;
	LABEL true__1578 ;
	local__internal_68 = ALLOCATE local__internal_68 ;
	local__internal_68 = CALL A ;
	SETATTR self avar local__internal_68 ;
	local__internal_55 = local__internal_68 ;
	LABEL end__1578 ;
	local__internal_51 = local__internal_55 ;
	GOTO end__1569 ;
	LABEL true__1569 ;
	local__x_70	local__x_69 = local__x_70 ;
	local__internal_71 = ALLOCATE local__internal_71 ;
	local__internal_71 = CALL E ;
	local__avar_72 = GETATTR self avar ;
	local__internal_74 = TYPEOF local__avar_72	local__internal_75 = LOAD data_0 ;
	local__internal_74 = local__internal_74 == local__internal_75 ;
	IF local__internal_74 GOTO continue__1650 ;
	ERROR dispatch_error ;
	LABEL continue__1650 ;
	local__internal_73 = VCALL local__avar_72 value ;
	local__internal_77 = TYPEOF local__internal_71	local__internal_78 = LOAD data_0 ;
	local__internal_77 = local__internal_77 == local__internal_78 ;
	IF local__internal_77 GOTO continue__1662 ;
	ERROR dispatch_error ;
	LABEL continue__1662 ;
	local__internal_76 = VCALL local__internal_71 method6 ;
	local__x_70 = local__internal_76 ;
	local__avar_81 = GETATTR self avar ;
	local__internal_83 = TYPEOF local__avar_81	local__internal_84 = LOAD data_0 ;
	local__internal_83 = local__internal_83 == local__internal_84 ;
	IF local__internal_83 GOTO continue__1679 ;
	ERROR dispatch_error ;
	LABEL continue__1679 ;
	local__internal_82 = VCALL local__avar_81 value ;
	local__internal_87 = TYPEOF local__x_70	local__internal_88 = LOAD data_0 ;
	local__internal_87 = local__internal_87 == local__internal_88 ;
	IF local__internal_87 GOTO continue__1692 ;
	ERROR dispatch_error ;
	LABEL continue__1692 ;
	local__internal_86 = VCALL local__x_70 value ;
	local__internal_85 = local__internal_86 * 8 ;
	local__internal_80 = local__internal_82 - local__internal_85 ;
	local__r_79 = local__internal_80 ;
	local__internal_89 = LOAD data_68 ;
	local__internal_90 = VCALL self out_string ;
	local__avar_91 = GETATTR self avar ;
	local__internal_92 = VCALL self print ;
	local__internal_93 = LOAD data_69 ;
	local__internal_94 = VCALL self out_string ;
	local__internal_95 = VCALL self print ;
	local__internal_96 = LOAD data_70 ;
	local__internal_97 = VCALL self out_string ;
	local__internal_99 = ALLOCATE local__internal_99 ;
	local__a_98 = local__internal_99 ;
	local__internal_101 = TYPEOF local__a_98	local__internal_102 = LOAD data_0 ;
	local__internal_101 = local__internal_101 == local__internal_102 ;
	IF local__internal_101 GOTO continue__1744 ;
	ERROR dispatch_error ;
	LABEL continue__1744 ;
	local__internal_100 = VCALL local__a_98 i2a ;
	local__internal_103 = VCALL self out_string ;
	local__internal_104 = LOAD data_71 ;
	local__internal_105 = VCALL self out_string ;
	local__internal_106 = local__internal_105 ;
	local__internal_107 = local__internal_106 ;
	SETATTR self avar local__x_70 ;
	local__internal_108 = local__x_70 ;
	local__internal_51 = local__internal_108 ;
	LABEL end__1569 ;
	local__internal_47 = local__internal_51 ;
	GOTO end__1560 ;
	LABEL true__1560 ;
	local__internal_109 = ALLOCATE local__internal_109 ;
	local__internal_109 = CALL D ;
	local__avar_110 = GETATTR self avar ;
	local__internal_112 = TYPEOF local__avar_110	local__internal_113 = LOAD data_0 ;
	local__internal_112 = local__internal_112 == local__internal_113 ;
	IF local__internal_112 GOTO continue__1784 ;
	ERROR dispatch_error ;
	LABEL continue__1784 ;
	local__internal_111 = VCALL local__avar_110 value ;
	local__internal_115 = TYPEOF local__internal_109	local__internal_116 = LOAD data_0 ;
	local__internal_115 = local__internal_115 == local__internal_116 ;
	IF local__internal_115 GOTO continue__1796 ;
	ERROR dispatch_error ;
	LABEL continue__1796 ;
	local__internal_114 = VCALL local__internal_109 method7 ;
	IF local__internal_114 GOTO true__1806 ;
	local__internal_118 = LOAD data_72 ;
	local__internal_119 = VCALL self out_string ;
	local__avar_120 = GETATTR self avar ;
	local__internal_121 = VCALL self print ;
	local__internal_122 = LOAD data_73 ;
	local__internal_123 = VCALL self out_string ;
	local__internal_124 = local__internal_123 ;
	local__internal_117 = local__internal_124 ;
	GOTO end__1806 ;
	LABEL true__1806 ;
	local__internal_125 = LOAD data_74 ;
	local__internal_126 = VCALL self out_string ;
	local__avar_127 = GETATTR self avar ;
	local__internal_128 = VCALL self print ;
	local__internal_129 = LOAD data_75 ;
	local__internal_130 = VCALL self out_string ;
	local__internal_131 = local__internal_130 ;
	local__internal_117 = local__internal_131 ;
	LABEL end__1806 ;
	local__internal_47 = local__internal_117 ;
	LABEL end__1560 ;
	local__internal_43 = local__internal_47 ;
	GOTO end__1551 ;
	LABEL true__1551 ;
	local__internal_132 = ALLOCATE local__internal_132 ;
	local__internal_132 = CALL C ;
	local__avar_133 = GETATTR self avar ;
	local__internal_135 = TYPEOF local__avar_133	local__internal_136 = LOAD data_0 ;
	local__internal_135 = local__internal_135 == local__internal_136 ;
	IF local__internal_135 GOTO continue__1870 ;
	ERROR dispatch_error ;
	LABEL continue__1870 ;
	local__internal_134 = VCALL local__avar_133 value ;
	local__internal_138 = TYPEOF local__internal_132	local__internal_139 = LOAD data_0 ;
	local__internal_138 = local__internal_138 == local__internal_139 ;
	IF local__internal_138 GOTO continue__1882 ;
	ERROR dispatch_error ;
	LABEL continue__1882 ;
	local__internal_137 = CALL method5 ;
	SETATTR self avar local__internal_137 ;
	local__internal_43 = local__internal_137 ;
	LABEL end__1551 ;
	local__internal_39 = local__internal_43 ;
	GOTO end__1542 ;
	LABEL true__1542 ;
	local__internal_140 = ALLOCATE local__internal_140 ;
	local__internal_140 = CALL C ;
	local__avar_141 = GETATTR self avar ;
	local__internal_143 = TYPEOF local__avar_141	local__internal_144 = LOAD data_0 ;
	local__internal_143 = local__internal_143 == local__internal_144 ;
	IF local__internal_143 GOTO continue__1906 ;
	ERROR dispatch_error ;
	LABEL continue__1906 ;
	local__internal_142 = VCALL local__avar_141 value ;
	local__internal_146 = TYPEOF local__internal_140	local__internal_147 = LOAD data_0 ;
	local__internal_146 = local__internal_146 == local__internal_147 ;
	IF local__internal_146 GOTO continue__1918 ;
	ERROR dispatch_error ;
	LABEL continue__1918 ;
	local__internal_145 = CALL method5 ;
	SETATTR self avar local__internal_145 ;
	local__internal_39 = local__internal_145 ;
	LABEL end__1542 ;
	local__internal_35 = local__internal_39 ;
	GOTO end__1533 ;
	LABEL true__1533 ;
	local__internal_148 = ALLOCATE local__internal_148 ;
	local__internal_148 = CALL C ;
	local__avar_149 = GETATTR self avar ;
	local__internal_151 = TYPEOF local__avar_149	local__internal_152 = LOAD data_0 ;
	local__internal_151 = local__internal_151 == local__internal_152 ;
	IF local__internal_151 GOTO continue__1942 ;
	ERROR dispatch_error ;
	LABEL continue__1942 ;
	local__internal_150 = VCALL local__avar_149 value ;
	local__internal_154 = TYPEOF local__internal_148	local__internal_155 = LOAD data_0 ;
	local__internal_154 = local__internal_154 == local__internal_155 ;
	IF local__internal_154 GOTO continue__1954 ;
	ERROR dispatch_error ;
	LABEL continue__1954 ;
	local__internal_153 = CALL method5 ;
	SETATTR self avar local__internal_153 ;
	local__internal_35 = local__internal_153 ;
	LABEL end__1533 ;
	local__internal_31 = local__internal_35 ;
	GOTO end__1524 ;
	LABEL true__1524 ;
	local__internal_156 = ALLOCATE local__internal_156 ;
	local__internal_156 = CALL A ;
	local__internal_157 = VCALL self get_int ;
	local__internal_159 = TYPEOF local__internal_156	local__internal_160 = LOAD data_0 ;
	local__internal_159 = local__internal_159 == local__internal_160 ;
	IF local__internal_159 GOTO continue__1979 ;
	ERROR dispatch_error ;
	LABEL continue__1979 ;
	local__internal_158 = VCALL local__internal_156 set_var ;
	SETATTR self a_var local__internal_158 ;
	local__internal_161 = ALLOCATE local__internal_161 ;
	local__internal_161 = CALL D ;
	local__avar_162 = GETATTR self avar ;
	local__internal_164 = TYPEOF local__avar_162	local__internal_165 = LOAD data_0 ;
	local__internal_164 = local__internal_164 == local__internal_165 ;
	IF local__internal_164 GOTO continue__1998 ;
	ERROR dispatch_error ;
	LABEL continue__1998 ;
	local__internal_163 = VCALL local__avar_162 value ;
	local__a_var_166 = GETATTR self a_var ;
	local__internal_168 = TYPEOF local__a_var_166	local__internal_169 = LOAD data_0 ;
	local__internal_168 = local__internal_168 == local__internal_169 ;
	IF local__internal_168 GOTO continue__2012 ;
	ERROR dispatch_error ;
	LABEL continue__2012 ;
	local__internal_167 = VCALL local__a_var_166 value ;
	local__internal_171 = TYPEOF local__internal_161	local__internal_172 = LOAD data_0 ;
	local__internal_171 = local__internal_171 == local__internal_172 ;
	IF local__internal_171 GOTO continue__2025 ;
	ERROR dispatch_error ;
	LABEL continue__2025 ;
	local__internal_170 = VCALL local__internal_161 method4 ;
	SETATTR self avar local__internal_170 ;
	local__internal_173 = local__internal_170 ;
	local__internal_31 = local__internal_173 ;
	LABEL end__1524 ;
	local__internal_27 = local__internal_31 ;
	GOTO end__1515 ;
	LABEL true__1515 ;
	local__avar_174 = GETATTR self avar ;
	local__internal_176 = TYPEOF local__avar_174	local__internal_177 = LOAD data_0 ;
	local__internal_176 = local__internal_176 == local__internal_177 ;
	IF local__internal_176 GOTO error__2046 ;
	local__internal_178 = CONFORMTO local__avar_174 C ;
	IF local__internal_178 GOTO next__2052_0 ;
	local__c_179 = local__avar_174 ;
	local__internal_181 = TYPEOF local__c_179	local__internal_182 = LOAD data_0 ;
	local__internal_181 = local__internal_181 == local__internal_182 ;
	IF local__internal_181 GOTO continue__2060 ;
	ERROR dispatch_error ;
	LABEL continue__2060 ;
	local__internal_180 = VCALL local__c_179 value ;
	local__internal_184 = TYPEOF local__c_179	local__internal_185 = LOAD data_0 ;
	local__internal_184 = local__internal_184 == local__internal_185 ;
	IF local__internal_184 GOTO continue__2072 ;
	ERROR dispatch_error ;
	LABEL continue__2072 ;
	local__internal_183 = VCALL local__c_179 method6 ;
	SETATTR self avar local__internal_183 ;
	local__internal_175 = local__internal_183 ;
	GOTO end__2046 ;
	LABEL next__2052_0 ;
	local__internal_186 = CONFORMTO local__avar_174 A ;
	IF local__internal_186 GOTO next__2086_1 ;
	local__a_187 = local__avar_174 ;
	local__internal_189 = TYPEOF local__a_187	local__internal_190 = LOAD data_0 ;
	local__internal_189 = local__internal_189 == local__internal_190 ;
	IF local__internal_189 GOTO continue__2094 ;
	ERROR dispatch_error ;
	LABEL continue__2094 ;
	local__internal_188 = VCALL local__a_187 value ;
	local__internal_192 = TYPEOF local__a_187	local__internal_193 = LOAD data_0 ;
	local__internal_192 = local__internal_192 == local__internal_193 ;
	IF local__internal_192 GOTO continue__2106 ;
	ERROR dispatch_error ;
	LABEL continue__2106 ;
	local__internal_191 = VCALL local__a_187 method3 ;
	SETATTR self avar local__internal_191 ;
	local__internal_175 = local__internal_191 ;
	GOTO end__2046 ;
	LABEL next__2086_1 ;
	local__internal_194 = CONFORMTO local__avar_174 Object ;
	IF local__internal_194 GOTO next__2120_2 ;
	local__o_195 = local__avar_174 ;
	local__internal_196 = LOAD data_76 ;
	local__internal_197 = VCALL self out_string ;
	local__internal_198 = VCALL self abort ;
	local__internal_199 = 0 ;
	local__internal_175 = local__internal_199 ;
	GOTO end__2046 ;
	LABEL next__2120_2 ;
	ERROR case_error ;
	LABEL error__2046 ;
	ERROR case_void_error ;
	LABEL end__2046 ;
	local__internal_27 = local__internal_175 ;
	LABEL end__1515 ;
	local__internal_23 = local__internal_27 ;
	GOTO end__1506 ;
	LABEL true__1506 ;
	local__internal_200 = ALLOCATE local__internal_200 ;
	local__internal_200 = CALL A ;
	local__internal_201 = VCALL self get_int ;
	local__internal_203 = TYPEOF local__internal_200	local__internal_204 = LOAD data_0 ;
	local__internal_203 = local__internal_203 == local__internal_204 ;
	IF local__internal_203 GOTO continue__2158 ;
	ERROR dispatch_error ;
	LABEL continue__2158 ;
	local__internal_202 = VCALL local__internal_200 set_var ;
	SETATTR self a_var local__internal_202 ;
	local__internal_205 = ALLOCATE local__internal_205 ;
	local__internal_205 = CALL B ;
	local__avar_206 = GETATTR self avar ;
	local__internal_208 = TYPEOF local__avar_206	local__internal_209 = LOAD data_0 ;
	local__internal_208 = local__internal_208 == local__internal_209 ;
	IF local__internal_208 GOTO continue__2177 ;
	ERROR dispatch_error ;
	LABEL continue__2177 ;
	local__internal_207 = VCALL local__avar_206 value ;
	local__a_var_210 = GETATTR self a_var ;
	local__internal_212 = TYPEOF local__a_var_210	local__internal_213 = LOAD data_0 ;
	local__internal_212 = local__internal_212 == local__internal_213 ;
	IF local__internal_212 GOTO continue__2191 ;
	ERROR dispatch_error ;
	LABEL continue__2191 ;
	local__internal_211 = VCALL local__a_var_210 value ;
	local__internal_215 = TYPEOF local__internal_205	local__internal_216 = LOAD data_0 ;
	local__internal_215 = local__internal_215 == local__internal_216 ;
	IF local__internal_215 GOTO continue__2204 ;
	ERROR dispatch_error ;
	LABEL continue__2204 ;
	local__internal_214 = VCALL local__internal_205 method2 ;
	SETATTR self avar local__internal_214 ;
	local__internal_217 = local__internal_214 ;
	local__internal_23 = local__internal_217 ;
	LABEL end__1506 ;
	local__internal_218 = local__internal_23 ;
	local__internal_1 = local__internal_218 ;
	GOTO start__1431 ;
	LABEL end__1431 ;
	local__internal_219 = local__internal_1 ;
	RETURN local__internal_219 ;
}
