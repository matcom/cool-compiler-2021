.data
Bool_Name: .asciiz "Bool"
Bool: .word  Bool_Name, 2, 
Bool_parents: .word 1, 7, 0

.text
.globl main
main:

la $a0, Bool_parents
li $a1, 7
jal __bool__check__type__
move		$a0, $v0
li		$v0, 1		# system call #4 - print string
syscall				# execute

li		$v0, 10		# system call #4 - print string
syscall				# execute

#Allocate a una class Int
#atributo type_name en puntero + 0
#atributo value en puntero + 4
li $a0, 8
li $v0, 9
syscall  #en $v0 la instancia del nuevo Int
li $t2, 1
sw $t2, 4($v0)  #Guarda en la pocicion 4 de la instancia el valor del la propiedad **value** 
sw $v0, ($sp)

lw $a0, ($sp)
jal __bool__new__
addi $sp, $sp, -4
sw $v0, ($sp)

lw		$a0, 4($v0)
li		$v0, 1		# system call #4 - print string
syscall		

lw $a0, ($sp)
la $a1, true
jal __bool__if_go_to__

li		$v0, 1		# system call #4 - print string
li		$a0, 33333333
syscall				# execute	

true:

lw $a0, 4($sp)
li $t0, 0
sw $t0, 4($a0)

jal __bool__new__

lw		$a0, 4($v0)
li		$v0, 1		# system call #4 - print string
syscall		

lw $a0, 4($sp)
la $a1, false
jal __bool__if_go_to__


#Allocate a una class Int
#atributo type_name en puntero + 0
#atributo value en puntero + 4
li $a0, 8
li $v0, 9
syscall  #en $v0 la instancia del nuevo Int
li $t2, 10000
sw $t2, 4($v0)  #Guarda en la pocicion 4 de la instancia el valor del la propiedad **value** 
sw $v0, ($sp)

lw $a0, ($sp)
jal __bool__new__
addi $sp, $sp, -4
sw $v0, ($sp)


false:
li		$v0, 10		
syscall	

#region
##########################################################################################
__bool__new__:
# En $s6 self
# En $a0 instancia de Int para convertir 	
# Return $v0 la instancia del nuevo Bool

lw $t0, 4($a0) # Guardando el valor la propiedad de **value**

li $t1, 1
beq $t0, $t1, __bool__ok_value__  #Comparando el valor con 1
li $t1, 0
beq $t0, $t1, __bool__ok_value__  #Comparando el valor con 0

# Si el valor no es ni cero ni uno cierra el programa 
li		$v0, 4		# system call #4 - print string
la		$a0, Bool_Name
syscall				# execute
li		$v0, 1		# system call #4 - print string
move	$a0, $t0
syscall				# execute
li		$v0, 10		# system call #4 - print string
syscall				# execute

__bool__ok_value__:
la $t0, Bool     #Carga la direccion de memoria de la definicion de tipo Bool
sw $t0, ($a0)    #Guarda en la pocision cero de la instancia la direccion de la definicion del tipo

move $v0, $a0
# No modifica la pila 
jr $ra # Esta funcion no tiene saltos internos y en $v0 esta la instancia del nuevo Bool

##########################################################################################################
__bool__if_go_to__:
# En $s6 self
# En $a0 instancia de Bool a evaluar 
# En $a1 direccion a la que saltar  
# Return $v0 la instancia del nuevo Bool

lw $t0, 4($a0)  #Guarda el valor de la propiedad **value** del Bool
li $t1, 1       #Guarda 1 en $t0 para comparar con la propiedad **value**

beq	$t0, $t1, __go_to__	# if $t0 == $t1 then __go_to__
jr $ra          #esta funcion solo termina si el bool es false 
__go_to__:
j $a1   # La condicion se cumple salta hacia el segundo parametro

##########################################################################################################
__bool__check__type__:
# En $s6 **self**
# En $a0 direccion de memoria de la lista de ancestro de un typo 
# En $a1 identificador numerico de un tipo

li $v0, 1       # Por default devuelve 1
__check__type__loop__:
    lw $t0, ($a0)       #Lee el id de un typo 
    beq $t0, $zero, __check__type__false__
    beq $t0, $a1, __check__type__end__
    addi $a0, $a0, 4
    j __check__type__loop__

__check__type__false__: 
    li $v0, 0
__check__type__end__:
    jr $ra

#endregion
##########################################################################################################
