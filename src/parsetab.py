
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftNOTnonassocLTLTEQEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightCOMPLEMENTleftATleftDOTACTION ASSIGN AT CASE CLASS COLON COMMA COMPLEMENT DIVIDE DOT ELSE EQ ESAC FALSE FI ID IF IN INHERITS INTEGER ISVOID LBRACE LET LOOP LPAREN LT LTEQ MINUS MULTIPLY NEW NOT OF PLUS POOL RBRACE RPAREN SEMICOLON STRING THEN TRUE TYPE WHILEprogram : class_expresion SEMICOLON class_listclass_list : class_expresion SEMICOLON class_list\n\t\t\t\t\t | emptyclass_expresion : CLASS TYPE LBRACE feature_list\n\t\t\t\t\t\t   | CLASS TYPE INHERITS TYPE LBRACE feature_listfeature_list : method_decl feature_list\n\t\t\t\t\t\t| property_decl feature_list\n\t\t\t\t\t\t| RBRACEproperty_decl : declare_expresion SEMICOLONdeclare_expresion : ID COLON TYPE ASSIGN expr\n\t\t\t\t\t\t\t | ID COLON TYPEmethod_decl : ID LPAREN formal RPAREN COLON TYPE LBRACE expr RBRACE SEMICOLON formal : declare_method formal_a\n\t\t\t\t   | empty formal_a : COMMA declare_method formal_a\n\t\t\t\t\t| emptydeclare_method : ID COLON TYPEexpr : assign_expresion\n\t\t\t\t| while_expresion\n\t\t\t\t| v_exprassign_expresion : ID ASSIGN exprwhile_expresion : WHILE v_expr LOOP expr POOLv_expr : conditional_expresion\n\t\t\t\t  | let_expresion\n\t\t\t\t  | case_expresion\n\t\t\t\t  | dispatch_expresion\n\t\t\t\t  | dispatch_instance\n\t\t\t\t  | block_expresion\n\t\t\t\t  | binary_operator\n\t\t\t\t  | neg\n\t\t\t\t  | compl\n\t\t\t\t  | is_void\n\t\t\t\t  | new_expresion\n\t\t\t\t  | term\n\t\t\t\t  | comparison_expresionconditional_expresion : IF v_expr THEN expr ELSE expr FIlet_expresion : LET let_declr_list IN exprlet_declr_list : declare_expresion let_declr_list_alet_declr_list_a : COMMA declare_expresion let_declr_list_a\n\t\t\t\t\t\t\t| emptycase_expresion : CASE expr OF case_list ESACcase_list : declare_method ACTION expr SEMICOLON case_list_acase_list_a : declare_method ACTION expr SEMICOLON case_list_a\n\t\t\t\t\t   | emptydispatch_expresion : ID LPAREN dispatch_p_list RPAREN dispatch_p_list : v_expr dispatch_p_list_a\n\t\t\t\t\t\t   | emptydispatch_p_list_a : COMMA v_expr dispatch_p_list_a\n\t\t\t\t\t\t\t | emptydispatch_instance : v_expr DOT ID LPAREN dispatch_p_list RPAREN\n\t\t\t\t\t\t\t | v_expr AT TYPE DOT ID LPAREN dispatch_p_list RPAREN block_expresion : LBRACE block_expr RBRACEblock_expr : expr SEMICOLON block_expr_ablock_expr_a : expr SEMICOLON block_expr_a\n\t\t\t\t\t\t| emptybinary_operator : v_expr PLUS v_expr\n\t\t\t\t\t\t   | v_expr MINUS v_expr\n\t\t\t\t\t\t   | v_expr MULTIPLY v_expr\n\t\t\t\t\t\t   | v_expr DIVIDE v_exprneg : NOT exprcompl : COMPLEMENT expris_void : ISVOID exprnew_expresion : NEW TYPEcomparison_expresion : v_expr LT v_expr\n\t\t\t\t\t\t\t\t| v_expr LTEQ v_expr\n\t\t\t\t\t\t\t\t| v_expr EQ v_exprterm : var\n\t\t\t\t| num\n\t\t\t\t| str\n\t\t\t\t| bool\n\t\t\t\t| LPAREN v_expr RPARENvar : IDnum : INTEGERstr : STRINGbool : TRUE\n\t\t        | FALSEempty :'
    
_lr_action_items = {'DOT':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,112,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,93,-75,-72,-35,-76,-26,-74,-29,-61,-62,93,-72,-60,93,-63,93,-52,135,93,93,93,93,93,93,93,93,-21,-71,-37,-45,-41,93,-22,-50,-36,-51,]),'EQ':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,95,-75,-72,-35,-76,-26,-74,-29,-61,-62,95,-72,-60,95,-63,95,-52,-59,None,-57,None,-56,None,-58,95,-21,-71,-37,-45,-41,95,-22,-50,-36,-51,]),'TYPE':([1,6,23,33,38,71,88,],[4,11,31,39,77,102,112,]),'LBRACE':([4,11,37,46,50,55,60,64,66,70,75,77,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[7,19,46,46,46,46,46,46,46,46,46,104,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'COLON':([14,29,32,85,],[23,33,38,23,]),'LT':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,90,-75,-72,-35,-76,-26,-74,-29,-61,-62,90,-72,-60,90,-63,90,-52,-59,None,-57,None,-56,None,-58,90,-21,-71,-37,-45,-41,90,-22,-50,-36,-51,]),'AT':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,88,-75,-72,-35,-76,-26,-74,-29,-61,-62,88,-72,-60,88,-63,88,-52,88,88,88,88,88,88,88,88,-21,-71,-37,-45,-41,88,-22,-50,-36,-51,]),'ACTION':([39,138,167,],[-17,151,168,]),'CASE':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'THEN':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,102,106,113,114,115,116,118,119,120,125,126,132,139,150,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,-61,-62,111,-72,-60,-63,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,-37,-45,-41,-22,-50,-36,-51,]),'POOL':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,87,98,102,106,113,114,115,116,118,119,120,125,126,132,139,143,150,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,-61,-62,-72,-60,-63,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,-37,-45,153,-41,-22,-50,-36,-51,]),'IN':([31,41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,67,68,69,72,73,74,76,81,82,83,84,87,98,102,106,108,109,113,114,115,116,118,119,120,125,126,132,133,139,146,150,153,158,161,164,],[-11,-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-10,-72,-35,-76,-26,-74,-29,-61,-62,107,-77,-72,-60,-63,-52,-38,-40,-59,-64,-57,-65,-56,-66,-58,-21,-71,-37,-77,-45,-39,-41,-22,-50,-36,-51,]),'ELSE':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,87,98,102,106,113,114,115,116,118,119,120,125,126,132,134,139,150,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,-61,-62,-72,-60,-63,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,-37,147,-45,-41,-22,-50,-36,-51,]),'TRUE':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'RBRACE':([7,12,17,19,21,41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,80,81,82,87,98,102,105,106,113,114,115,116,118,119,120,125,126,128,129,130,132,139,145,150,153,154,155,158,161,164,],[15,15,15,15,-9,-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,106,-61,-62,-72,-60,-63,-77,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,144,-53,-55,-37,-45,-77,-41,-22,-12,-54,-50,-36,-51,]),'NOT':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'RPAREN':([22,27,28,30,34,35,39,40,41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,78,81,82,87,98,99,101,102,106,113,114,115,116,118,119,120,122,123,124,125,126,132,136,139,141,142,149,150,152,153,157,158,160,161,162,164,],[-77,-14,32,-77,-13,-16,-17,-77,-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,-15,-61,-62,-72,-60,-77,126,-63,-52,-59,-64,-57,-65,-56,-66,-58,139,-47,-77,-21,-71,-37,-77,-45,-46,-49,158,-41,-77,-22,-77,-50,-48,-36,164,-51,]),'ID':([7,12,17,19,21,22,36,37,46,50,55,58,60,64,66,70,75,89,90,91,92,93,94,95,96,99,100,104,105,107,110,111,121,127,135,136,140,145,147,151,154,157,163,168,170,],[14,14,14,14,-9,29,29,68,68,68,68,85,87,68,68,87,87,87,87,87,87,117,87,87,87,87,68,68,68,68,85,68,29,68,148,87,87,68,68,68,-12,87,29,68,29,]),'LOOP':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,87,98,102,103,106,113,114,115,116,118,119,120,125,126,132,139,150,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,-61,-62,-72,-60,-63,127,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,-37,-45,-41,-22,-50,-36,-51,]),'COMPLEMENT':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'IF':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'LPAREN':([14,37,46,50,55,60,64,66,68,70,75,87,89,90,91,92,94,95,96,99,100,104,105,107,111,117,127,136,140,145,147,148,151,157,168,],[22,70,70,70,70,70,70,70,99,70,70,99,70,70,70,70,70,70,70,70,70,70,70,70,70,136,70,70,70,70,70,157,70,70,70,]),'INTEGER':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'COMMA':([30,31,39,40,41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,67,68,69,72,73,74,76,81,82,84,87,98,102,106,113,114,115,116,118,119,120,124,125,126,132,133,139,150,152,153,158,161,164,],[36,-11,-17,36,-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-10,-72,-35,-76,-26,-74,-29,-61,-62,110,-72,-60,-63,-52,-59,-64,-57,-65,-56,-66,-58,140,-21,-71,-37,110,-45,-41,140,-22,-50,-36,-51,]),'NEW':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'MULTIPLY':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,96,-75,-72,-35,-76,-26,-74,-29,-61,-62,96,-72,-60,96,-63,96,-52,-59,96,96,96,96,96,-58,96,-21,-71,-37,-45,-41,96,-22,-50,-36,-51,]),'$end':([3,5,9,10,18,25,],[0,-77,-1,-3,-77,-2,]),'FALSE':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'MINUS':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,91,-75,-72,-35,-76,-26,-74,-29,-61,-62,91,-72,-60,91,-63,91,-52,-59,91,-57,91,-56,91,-58,91,-21,-71,-37,-45,-41,91,-22,-50,-36,-51,]),'LTEQ':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,92,-75,-72,-35,-76,-26,-74,-29,-61,-62,92,-72,-60,92,-63,92,-52,-59,None,-57,None,-56,None,-58,92,-21,-71,-37,-45,-41,92,-22,-50,-36,-51,]),'SEMICOLON':([2,8,13,15,16,20,24,26,31,41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,67,68,69,72,73,74,76,79,81,82,87,98,102,106,113,114,115,116,118,119,120,125,126,131,132,139,144,150,153,158,159,161,164,169,],[5,18,21,-8,-4,-7,-6,-5,-11,-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-10,-72,-35,-76,-26,-74,-29,105,-61,-62,-72,-60,-63,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,145,-37,-45,154,-41,-22,-50,163,-36,-51,170,]),'ISVOID':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'STRING':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'CLASS':([0,5,18,],[1,1,1,]),'OF':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,87,97,98,102,106,113,114,115,116,118,119,120,125,126,132,139,150,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,-61,-62,-72,121,-60,-63,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,-37,-45,-41,-22,-50,-36,-51,]),'ESAC':([137,163,165,166,170,171,],[150,-77,-44,-42,-77,-43,]),'LET':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'WHILE':([37,46,50,55,64,66,100,104,105,107,111,127,145,147,151,168,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'DIVIDE':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,89,-75,-72,-35,-76,-26,-74,-29,-61,-62,89,-72,-60,89,-63,89,-52,-59,89,89,89,89,89,-58,89,-21,-71,-37,-45,-41,89,-22,-50,-36,-51,]),'ASSIGN':([31,68,],[37,100,]),'INHERITS':([4,],[6,]),'FI':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,87,98,102,106,113,114,115,116,118,119,120,125,126,132,139,150,153,156,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,-20,-75,-72,-35,-76,-26,-74,-29,-61,-62,-72,-60,-63,-52,-59,-64,-57,-65,-56,-66,-58,-21,-71,-37,-45,-41,-22,161,-50,-36,-51,]),'PLUS':([41,42,43,44,45,47,48,49,51,52,53,54,56,57,59,61,62,63,65,68,69,72,73,74,76,81,82,86,87,98,101,102,103,106,113,114,115,116,118,119,120,124,125,126,132,139,150,152,153,158,161,164,],[-19,-70,-68,-32,-33,-67,-18,-31,-28,-73,-69,-25,-34,-27,-24,-23,-30,94,-75,-72,-35,-76,-26,-74,-29,-61,-62,94,-72,-60,94,-63,94,-52,-59,94,-57,94,-56,94,-58,94,-21,-71,-37,-45,-41,94,-22,-50,-36,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'conditional_expresion':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'property_decl':([7,12,17,19,],[12,12,12,12,]),'class_expresion':([0,5,18,],[2,8,8,]),'block_expresion':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'declare_expresion':([7,12,17,19,58,110,],[13,13,13,13,84,133,]),'num':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'dispatch_p_list_a':([124,152,],[141,160,]),'case_list_a':([163,170,],[166,171,]),'v_expr':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[63,63,63,63,86,63,63,101,103,113,114,115,116,118,119,120,124,63,63,63,63,63,63,124,152,63,63,63,124,63,]),'case_list':([121,],[137,]),'is_void':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'new_expresion':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'let_declr_list_a':([84,133,],[108,146,]),'block_expr':([46,],[80,]),'while_expresion':([37,46,50,55,64,66,100,104,105,107,111,127,145,147,151,168,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'formal_a':([30,40,],[34,78,]),'feature_list':([7,12,17,19,],[16,20,24,26,]),'var':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'expr':([37,46,50,55,64,66,100,104,105,107,111,127,145,147,151,168,],[67,79,81,82,97,98,125,128,131,132,134,143,131,156,159,169,]),'let_declr_list':([58,],[83,]),'compl':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'neg':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'empty':([5,18,22,30,40,84,99,105,124,133,136,145,152,157,163,170,],[10,10,27,35,35,109,123,130,142,109,123,130,142,123,165,165,]),'comparison_expresion':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'program':([0,],[3,]),'term':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'str':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'case_expresion':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'bool':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'assign_expresion':([37,46,50,55,64,66,100,104,105,107,111,127,145,147,151,168,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'dispatch_expresion':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'block_expr_a':([105,145,],[129,155,]),'dispatch_instance':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'class_list':([5,18,],[9,25,]),'let_expresion':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'binary_operator':([37,46,50,55,60,64,66,70,75,89,90,91,92,94,95,96,99,100,104,105,107,111,127,136,140,145,147,151,157,168,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'dispatch_p_list':([99,136,157,],[122,149,162,]),'formal':([22,],[28,]),'declare_method':([22,36,121,163,170,],[30,40,138,167,167,]),'method_decl':([7,12,17,19,],[17,17,17,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_expresion SEMICOLON class_list','program',3,'p_program','my_parser.py',38),
  ('class_list -> class_expresion SEMICOLON class_list','class_list',3,'p_class_list','my_parser.py',42),
  ('class_list -> empty','class_list',1,'p_class_list','my_parser.py',43),
  ('class_expresion -> CLASS TYPE LBRACE feature_list','class_expresion',4,'p_class_expresion','my_parser.py',50),
  ('class_expresion -> CLASS TYPE INHERITS TYPE LBRACE feature_list','class_expresion',6,'p_class_expresion','my_parser.py',51),
  ('feature_list -> method_decl feature_list','feature_list',2,'p_feature_list','my_parser.py',58),
  ('feature_list -> property_decl feature_list','feature_list',2,'p_feature_list','my_parser.py',59),
  ('feature_list -> RBRACE','feature_list',1,'p_feature_list','my_parser.py',60),
  ('property_decl -> declare_expresion SEMICOLON','property_decl',2,'p_property_decl','my_parser.py',67),
  ('declare_expresion -> ID COLON TYPE ASSIGN expr','declare_expresion',5,'p_declare_expresion','my_parser.py',71),
  ('declare_expresion -> ID COLON TYPE','declare_expresion',3,'p_declare_expresion','my_parser.py',72),
  ('method_decl -> ID LPAREN formal RPAREN COLON TYPE LBRACE expr RBRACE SEMICOLON','method_decl',10,'p_method_decl','my_parser.py',79),
  ('formal -> declare_method formal_a','formal',2,'p_formal','my_parser.py',83),
  ('formal -> empty','formal',1,'p_formal','my_parser.py',84),
  ('formal_a -> COMMA declare_method formal_a','formal_a',3,'p_formal_a','my_parser.py',91),
  ('formal_a -> empty','formal_a',1,'p_formal_a','my_parser.py',92),
  ('declare_method -> ID COLON TYPE','declare_method',3,'p_declare_method','my_parser.py',99),
  ('expr -> assign_expresion','expr',1,'p_expr','my_parser.py',103),
  ('expr -> while_expresion','expr',1,'p_expr','my_parser.py',104),
  ('expr -> v_expr','expr',1,'p_expr','my_parser.py',105),
  ('assign_expresion -> ID ASSIGN expr','assign_expresion',3,'p_assign_expresion','my_parser.py',109),
  ('while_expresion -> WHILE v_expr LOOP expr POOL','while_expresion',5,'p_while_expresion','my_parser.py',113),
  ('v_expr -> conditional_expresion','v_expr',1,'p_v_expr','my_parser.py',117),
  ('v_expr -> let_expresion','v_expr',1,'p_v_expr','my_parser.py',118),
  ('v_expr -> case_expresion','v_expr',1,'p_v_expr','my_parser.py',119),
  ('v_expr -> dispatch_expresion','v_expr',1,'p_v_expr','my_parser.py',120),
  ('v_expr -> dispatch_instance','v_expr',1,'p_v_expr','my_parser.py',121),
  ('v_expr -> block_expresion','v_expr',1,'p_v_expr','my_parser.py',122),
  ('v_expr -> binary_operator','v_expr',1,'p_v_expr','my_parser.py',123),
  ('v_expr -> neg','v_expr',1,'p_v_expr','my_parser.py',124),
  ('v_expr -> compl','v_expr',1,'p_v_expr','my_parser.py',125),
  ('v_expr -> is_void','v_expr',1,'p_v_expr','my_parser.py',126),
  ('v_expr -> new_expresion','v_expr',1,'p_v_expr','my_parser.py',127),
  ('v_expr -> term','v_expr',1,'p_v_expr','my_parser.py',128),
  ('v_expr -> comparison_expresion','v_expr',1,'p_v_expr','my_parser.py',129),
  ('conditional_expresion -> IF v_expr THEN expr ELSE expr FI','conditional_expresion',7,'p_conditional_expresion','my_parser.py',133),
  ('let_expresion -> LET let_declr_list IN expr','let_expresion',4,'p_let_expresion','my_parser.py',137),
  ('let_declr_list -> declare_expresion let_declr_list_a','let_declr_list',2,'p_let_declr_list','my_parser.py',141),
  ('let_declr_list_a -> COMMA declare_expresion let_declr_list_a','let_declr_list_a',3,'p_let_declr_list_a','my_parser.py',145),
  ('let_declr_list_a -> empty','let_declr_list_a',1,'p_let_declr_list_a','my_parser.py',146),
  ('case_expresion -> CASE expr OF case_list ESAC','case_expresion',5,'p_case_expresion','my_parser.py',153),
  ('case_list -> declare_method ACTION expr SEMICOLON case_list_a','case_list',5,'p_case_list','my_parser.py',157),
  ('case_list_a -> declare_method ACTION expr SEMICOLON case_list_a','case_list_a',5,'p_case_list_a','my_parser.py',161),
  ('case_list_a -> empty','case_list_a',1,'p_case_list_a','my_parser.py',162),
  ('dispatch_expresion -> ID LPAREN dispatch_p_list RPAREN','dispatch_expresion',4,'p_dispatch_expresion','my_parser.py',169),
  ('dispatch_p_list -> v_expr dispatch_p_list_a','dispatch_p_list',2,'p_dispatch_p_list','my_parser.py',173),
  ('dispatch_p_list -> empty','dispatch_p_list',1,'p_dispatch_p_list','my_parser.py',174),
  ('dispatch_p_list_a -> COMMA v_expr dispatch_p_list_a','dispatch_p_list_a',3,'p_dispatch_p_list_a','my_parser.py',181),
  ('dispatch_p_list_a -> empty','dispatch_p_list_a',1,'p_dispatch_p_list_a','my_parser.py',182),
  ('dispatch_instance -> v_expr DOT ID LPAREN dispatch_p_list RPAREN','dispatch_instance',6,'p_dispatch_instance','my_parser.py',189),
  ('dispatch_instance -> v_expr AT TYPE DOT ID LPAREN dispatch_p_list RPAREN','dispatch_instance',8,'p_dispatch_instance','my_parser.py',190),
  ('block_expresion -> LBRACE block_expr RBRACE','block_expresion',3,'p_block_expresion','my_parser.py',197),
  ('block_expr -> expr SEMICOLON block_expr_a','block_expr',3,'p_block_expr','my_parser.py',201),
  ('block_expr_a -> expr SEMICOLON block_expr_a','block_expr_a',3,'p_block_expr_a','my_parser.py',205),
  ('block_expr_a -> empty','block_expr_a',1,'p_block_expr_a','my_parser.py',206),
  ('binary_operator -> v_expr PLUS v_expr','binary_operator',3,'p_binary_operator','my_parser.py',213),
  ('binary_operator -> v_expr MINUS v_expr','binary_operator',3,'p_binary_operator','my_parser.py',214),
  ('binary_operator -> v_expr MULTIPLY v_expr','binary_operator',3,'p_binary_operator','my_parser.py',215),
  ('binary_operator -> v_expr DIVIDE v_expr','binary_operator',3,'p_binary_operator','my_parser.py',216),
  ('neg -> NOT expr','neg',2,'p_neg','my_parser.py',227),
  ('compl -> COMPLEMENT expr','compl',2,'p_compl','my_parser.py',231),
  ('is_void -> ISVOID expr','is_void',2,'p_is_void','my_parser.py',235),
  ('new_expresion -> NEW TYPE','new_expresion',2,'p_new_expresion','my_parser.py',239),
  ('comparison_expresion -> v_expr LT v_expr','comparison_expresion',3,'p_comparison_expresion','my_parser.py',243),
  ('comparison_expresion -> v_expr LTEQ v_expr','comparison_expresion',3,'p_comparison_expresion','my_parser.py',244),
  ('comparison_expresion -> v_expr EQ v_expr','comparison_expresion',3,'p_comparison_expresion','my_parser.py',245),
  ('term -> var','term',1,'p_term','my_parser.py',254),
  ('term -> num','term',1,'p_term','my_parser.py',255),
  ('term -> str','term',1,'p_term','my_parser.py',256),
  ('term -> bool','term',1,'p_term','my_parser.py',257),
  ('term -> LPAREN v_expr RPAREN','term',3,'p_term','my_parser.py',258),
  ('var -> ID','var',1,'p_var','my_parser.py',265),
  ('num -> INTEGER','num',1,'p_num','my_parser.py',269),
  ('str -> STRING','str',1,'p_str','my_parser.py',273),
  ('bool -> TRUE','bool',1,'p_bool','my_parser.py',277),
  ('bool -> FALSE','bool',1,'p_bool','my_parser.py',278),
  ('empty -> <empty>','empty',0,'p_empty','my_parser.py',282),
]
