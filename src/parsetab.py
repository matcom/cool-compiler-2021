
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocdotnonassocarrobanonassoccomplementnonassocisvoidleftstardivleftplusminusnonnasocleqlneqequalleftnotnonassocassignArrowarroba assignArrow case ccur chunkComment class colon comma complement cpar div dot else equal esac false fi id if in inherits isvoid leq let lineComment lneq loop minus new newline not number ocur of opar plus pool rArrow semi space star string tab then true type whileprogram : class_listclass_list : def_class\n                    | def_class class_list\n         def_class : class type ocur feature_list ccur semi\n                    | class type inherits type ocur feature_list ccur semi\n         feature_list : def_attr feature_list\n                        | def_func feature_list\n                        |  \n        def_attr : id colon type semi\n                    | id colon type assignArrow expr semi\n        def_func : id opar arg_list cpar colon type ocur expr ccur semiarg_list : arg\n                    | arg comma arg_list\n                    | \n        arg : id colon typeparam_list : expr_list\n                    | \n        expr_list : expr\n                    | expr comma expr_list\n        chunk : expr semi\n                | expr semi chunk\n        expr : id assignArrow exprexpr : expr dot id opar param_list cpar\n                | expr arroba type dot id opar param_list cpar\n                | id opar param_list cpar\n        expr : if expr then expr else expr fiexpr : while expr loop expr poolexpr : ocur chunk ccurexpr : let decl_list in exprexpr : case expr of case_list esacexpr : new typeexpr : isvoid exprexpr : expr plus expr\n                | expr minus expr\n        expr : expr star expr\n                | expr div expr\n        expr : expr equal expr\n                | expr lneq expr\n                | expr leq expr\n        expr : complement expr\n                | not expr\n        expr : opar expr cparexpr : idexpr : numberexpr : stringexpr : true \n            | falsedecl_list : decl \n                | decl comma decl_listdecl : id colon type\n                | id colon type assignArrow expr\n        case_list : id colon type rArrow expr semi\n                    | id colon type rArrow expr semi case_list\n        '
    
_lr_action_items = {'class':([0,3,20,51,],[4,4,-4,-5,]),'$end':([1,2,3,5,20,51,],[0,-1,-2,-3,-4,-5,]),'type':([4,8,17,28,40,49,56,98,121,],[6,13,21,48,73,77,83,110,127,]),'ocur':([6,13,27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,77,92,93,95,96,100,102,103,117,119,124,131,],[7,19,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,100,37,37,37,37,37,37,37,37,37,37,37,]),'inherits':([6,],[8,]),'ccur':([7,9,10,11,15,16,19,25,26,32,44,45,46,47,54,67,73,74,75,76,78,84,85,86,87,88,89,90,91,94,95,101,107,108,113,118,120,123,128,130,132,],[-8,14,-8,-8,-6,-7,-8,31,-9,-43,-44,-45,-46,-47,-10,94,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-20,-25,-21,-29,122,-27,-30,-23,-11,-26,-24,]),'id':([7,10,11,18,19,26,27,30,34,35,36,37,38,39,41,42,43,52,53,54,55,57,58,59,60,61,62,63,92,93,95,96,97,99,100,102,103,104,117,119,124,128,131,134,],[12,12,12,22,12,-9,32,22,32,32,32,32,71,32,32,32,32,32,32,-10,82,32,32,32,32,32,32,32,32,32,32,32,71,112,32,32,32,116,32,32,32,-11,32,112,]),'colon':([12,22,29,71,112,],[17,28,49,98,121,]),'opar':([12,27,32,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,82,92,93,95,96,100,102,103,116,117,119,124,131,],[18,34,53,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,103,34,34,34,34,34,34,34,124,34,34,34,34,]),'semi':([14,21,31,32,33,44,45,46,47,68,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,108,118,120,122,123,130,132,133,],[20,26,51,-43,54,-44,-45,-46,-47,95,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-29,-27,-30,128,-23,-26,-24,134,]),'cpar':([18,23,24,30,32,44,45,46,47,48,50,53,64,73,74,75,76,78,79,80,81,84,85,86,87,88,89,90,91,94,101,103,108,114,115,118,120,123,124,129,130,132,],[-14,29,-12,-14,-43,-44,-45,-46,-47,-15,-13,-17,91,-31,-32,-40,-41,-22,101,-16,-18,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-17,-29,-19,123,-27,-30,-23,-17,132,-26,-24,]),'assignArrow':([21,32,110,],[27,52,119,]),'comma':([24,32,44,45,46,47,48,70,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,108,110,118,120,123,126,130,132,],[30,-43,-44,-45,-46,-47,-15,97,-31,-32,-40,-41,-22,102,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-29,-50,-27,-30,-23,-51,-26,-24,]),'if':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'while':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'let':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'case':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'new':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'isvoid':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'complement':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'not':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'number':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'string':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'true':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'false':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'dot':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,83,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,55,-44,-45,-46,-47,55,55,55,55,55,-31,-32,-40,-41,-22,55,104,-33,-34,-35,-36,55,55,55,-42,-28,-25,55,55,55,55,-27,-30,-23,55,55,-26,-24,55,]),'arroba':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,56,-44,-45,-46,-47,56,56,56,56,56,-31,-32,-40,-41,-22,56,-33,-34,-35,-36,56,56,56,-42,-28,-25,56,56,56,56,-27,-30,-23,56,56,-26,-24,56,]),'plus':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,57,-44,-45,-46,-47,57,57,57,57,57,-31,57,57,-41,-22,57,-33,-34,57,57,57,57,57,-42,-28,-25,57,57,57,57,-27,-30,-23,57,57,-26,-24,57,]),'minus':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,58,-44,-45,-46,-47,58,58,58,58,58,-31,58,58,-41,-22,58,-33,-34,58,58,58,58,58,-42,-28,-25,58,58,58,58,-27,-30,-23,58,58,-26,-24,58,]),'star':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,59,-44,-45,-46,-47,59,59,59,59,59,-31,59,59,-41,-22,59,-33,-34,-35,-36,59,59,59,-42,-28,-25,59,59,59,59,-27,-30,-23,59,59,-26,-24,59,]),'div':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,60,-44,-45,-46,-47,60,60,60,60,60,-31,60,60,-41,-22,60,-33,-34,-35,-36,60,60,60,-42,-28,-25,60,60,60,60,-27,-30,-23,60,60,-26,-24,60,]),'equal':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,61,-44,-45,-46,-47,61,61,61,61,61,-31,-32,-40,-41,-22,61,-33,-34,-35,-36,61,61,61,-42,-28,-25,61,61,61,61,-27,-30,-23,61,61,-26,-24,61,]),'lneq':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,62,-44,-45,-46,-47,62,62,62,62,62,-31,-32,-40,-41,-22,62,-33,-34,-35,-36,62,62,62,-42,-28,-25,62,62,62,62,-27,-30,-23,62,62,-26,-24,62,]),'leq':([32,33,44,45,46,47,64,65,66,68,72,73,74,75,76,78,81,84,85,86,87,88,89,90,91,94,101,105,106,108,113,118,120,123,125,126,130,132,133,],[-43,63,-44,-45,-46,-47,63,63,63,63,63,-31,-32,-40,-41,-22,63,-33,-34,-35,-36,63,63,63,-42,-28,-25,63,63,63,63,-27,-30,-23,63,63,-26,-24,63,]),'then':([32,44,45,46,47,65,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,108,118,120,123,130,132,],[-43,-44,-45,-46,-47,92,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-29,-27,-30,-23,-26,-24,]),'loop':([32,44,45,46,47,66,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,108,118,120,123,130,132,],[-43,-44,-45,-46,-47,93,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-29,-27,-30,-23,-26,-24,]),'of':([32,44,45,46,47,72,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,108,118,120,123,130,132,],[-43,-44,-45,-46,-47,99,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-29,-27,-30,-23,-26,-24,]),'else':([32,44,45,46,47,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,105,108,118,120,123,130,132,],[-43,-44,-45,-46,-47,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,117,-29,-27,-30,-23,-26,-24,]),'pool':([32,44,45,46,47,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,106,108,118,120,123,130,132,],[-43,-44,-45,-46,-47,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,118,-29,-27,-30,-23,-26,-24,]),'fi':([32,44,45,46,47,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,108,118,120,123,125,130,132,],[-43,-44,-45,-46,-47,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-29,-27,-30,-23,130,-26,-24,]),'in':([32,44,45,46,47,69,70,73,74,75,76,78,84,85,86,87,88,89,90,91,94,101,108,109,110,118,120,123,126,130,132,],[-43,-44,-45,-46,-47,96,-48,-31,-32,-40,-41,-22,-33,-34,-35,-36,-37,-38,-39,-42,-28,-25,-29,-49,-50,-27,-30,-23,-51,-26,-24,]),'esac':([111,134,135,],[120,-52,-53,]),'rArrow':([127,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,3,],[2,5,]),'def_class':([0,3,],[3,3,]),'feature_list':([7,10,11,19,],[9,15,16,25,]),'def_attr':([7,10,11,19,],[10,10,10,10,]),'def_func':([7,10,11,19,],[11,11,11,11,]),'arg_list':([18,30,],[23,50,]),'arg':([18,30,],[24,24,]),'expr':([27,34,35,36,37,39,41,42,43,52,53,57,58,59,60,61,62,63,92,93,95,96,100,102,103,117,119,124,131,],[33,64,65,66,68,72,74,75,76,78,81,84,85,86,87,88,89,90,105,106,68,108,113,81,81,125,126,81,133,]),'chunk':([37,95,],[67,107,]),'decl_list':([38,97,],[69,109,]),'decl':([38,97,],[70,70,]),'param_list':([53,103,124,],[79,115,129,]),'expr_list':([53,102,103,124,],[80,114,80,80,]),'case_list':([99,134,],[111,135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',32),
  ('class_list -> def_class','class_list',1,'p_class_list','parser.py',36),
  ('class_list -> def_class class_list','class_list',2,'p_class_list','parser.py',37),
  ('def_class -> class type ocur feature_list ccur semi','def_class',6,'p_def_class','parser.py',45),
  ('def_class -> class type inherits type ocur feature_list ccur semi','def_class',8,'p_def_class','parser.py',46),
  ('feature_list -> def_attr feature_list','feature_list',2,'p_feature_list_attr','parser.py',54),
  ('feature_list -> def_func feature_list','feature_list',2,'p_feature_list_attr','parser.py',55),
  ('feature_list -> <empty>','feature_list',0,'p_feature_list_attr','parser.py',56),
  ('def_attr -> id colon type semi','def_attr',4,'p_def_attr','parser.py',80),
  ('def_attr -> id colon type assignArrow expr semi','def_attr',6,'p_def_attr','parser.py',81),
  ('def_func -> id opar arg_list cpar colon type ocur expr ccur semi','def_func',10,'p_def_func','parser.py',89),
  ('arg_list -> arg','arg_list',1,'p_arg_list','parser.py',93),
  ('arg_list -> arg comma arg_list','arg_list',3,'p_arg_list','parser.py',94),
  ('arg_list -> <empty>','arg_list',0,'p_arg_list','parser.py',95),
  ('arg -> id colon type','arg',3,'p_arg','parser.py',105),
  ('param_list -> expr_list','param_list',1,'p_param_list','parser.py',109),
  ('param_list -> <empty>','param_list',0,'p_param_list','parser.py',110),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser.py',118),
  ('expr_list -> expr comma expr_list','expr_list',3,'p_expr_list','parser.py',119),
  ('chunk -> expr semi','chunk',2,'p_chunk','parser.py',127),
  ('chunk -> expr semi chunk','chunk',3,'p_chunk','parser.py',128),
  ('expr -> id assignArrow expr','expr',3,'p_expr_assign','parser.py',136),
  ('expr -> expr dot id opar param_list cpar','expr',6,'p_expr_call','parser.py',140),
  ('expr -> expr arroba type dot id opar param_list cpar','expr',8,'p_expr_call','parser.py',141),
  ('expr -> id opar param_list cpar','expr',4,'p_expr_call','parser.py',142),
  ('expr -> if expr then expr else expr fi','expr',7,'p_expr_if','parser.py',152),
  ('expr -> while expr loop expr pool','expr',5,'p_expr_while','parser.py',156),
  ('expr -> ocur chunk ccur','expr',3,'p_expr_chunk','parser.py',160),
  ('expr -> let decl_list in expr','expr',4,'p_expr_let','parser.py',164),
  ('expr -> case expr of case_list esac','expr',5,'p_expr_case','parser.py',168),
  ('expr -> new type','expr',2,'p_expr_instantiate','parser.py',172),
  ('expr -> isvoid expr','expr',2,'p_expr_isvoid','parser.py',176),
  ('expr -> expr plus expr','expr',3,'p_expr_bin1','parser.py',180),
  ('expr -> expr minus expr','expr',3,'p_expr_bin1','parser.py',181),
  ('expr -> expr star expr','expr',3,'p_expr_bin2','parser.py',189),
  ('expr -> expr div expr','expr',3,'p_expr_bin2','parser.py',190),
  ('expr -> expr equal expr','expr',3,'p_expr_bin3','parser.py',198),
  ('expr -> expr lneq expr','expr',3,'p_expr_bin3','parser.py',199),
  ('expr -> expr leq expr','expr',3,'p_expr_bin3','parser.py',200),
  ('expr -> complement expr','expr',2,'p_expr_unary','parser.py',210),
  ('expr -> not expr','expr',2,'p_expr_unary','parser.py',211),
  ('expr -> opar expr cpar','expr',3,'p_expr_par','parser.py',219),
  ('expr -> id','expr',1,'p_expr_id','parser.py',223),
  ('expr -> number','expr',1,'p_expr_int','parser.py',227),
  ('expr -> string','expr',1,'p_expr_string','parser.py',231),
  ('expr -> true','expr',1,'p_expr_boolean','parser.py',235),
  ('expr -> false','expr',1,'p_expr_boolean','parser.py',236),
  ('decl_list -> decl','decl_list',1,'p_decl_list','parser.py',243),
  ('decl_list -> decl comma decl_list','decl_list',3,'p_decl_list','parser.py',244),
  ('decl -> id colon type','decl',3,'p_decl','parser.py',251),
  ('decl -> id colon type assignArrow expr','decl',5,'p_decl','parser.py',252),
  ('case_list -> id colon type rArrow expr semi','case_list',6,'p_case_list','parser.py',260),
  ('case_list -> id colon type rArrow expr semi case_list','case_list',7,'p_case_list','parser.py',261),
]
