.TYPES

type Graph {
	attribute vertices;
	attribute edges;

	method Init_Graph : Init_Graph;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method add_vertice : add_vertice_Graph;
	method print_E : print_E_Graph;
	method print_V : print_V_Graph;
}

type Vertice {
	attribute num;
	attribute out;

	method Init_Vertice : Init_Vertice;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method outgoing : outgoing_Vertice;
	method number : number_Vertice;
	method init : init_Vertice;
	method add_out : add_out_Vertice;
	method print : print_Vertice;
}

type Edge {
	attribute from;
	attribute to;
	attribute weight;

	method Init_Edge : Init_Edge;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method init : init_Edge;
	method print : print_Edge;
}

type EList {
	attribute car;

	method Init_EList : Init_EList;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method isNil : isNil_EList;
	method head : head_EList;
	method tail : tail_EList;
	method cons : cons_EList;
	method append : append_EList;
	method print : print_EList;
}

type ECons {
	attribute car;
	attribute cdr;

	method Init_ECons : Init_ECons;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method isNil : isNil_ECons;
	method head : head_ECons;
	method tail : tail_ECons;
	method cons : cons_EList;
	method append : append_EList;
	method print : print_ECons;
	method init : init_ECons;
}

type VList {
	attribute car;

	method Init_VList : Init_VList;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method isNil : isNil_VList;
	method head : head_VList;
	method tail : tail_VList;
	method cons : cons_VList;
	method print : print_VList;
}

type VCons {
	attribute car;
	attribute cdr;

	method Init_VCons : Init_VCons;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method isNil : isNil_VCons;
	method head : head_VCons;
	method tail : tail_VCons;
	method cons : cons_VList;
	method print : print_VCons;
	method init : init_VCons;
}

type Parse {
	attribute boolop;
	attribute rest;

	method Init_Parse : Init_Parse;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method read_input : read_input_Parse;
	method parse_line : parse_line_Parse;
	method c2i : c2i_Parse;
	method a2i : a2i_Parse;
	method a2i_aux : a2i_aux_Parse;
}

type Main {
	attribute boolop;
	attribute rest;
	attribute g;

	method Init_Main : Init_Main;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method read_input : read_input_Parse;
	method parse_line : parse_line_Parse;
	method c2i : c2i_Parse;
	method a2i : a2i_Parse;
	method a2i_aux : a2i_aux_Parse;
	method main : main_Main;
}

type BoolOp {

	method Init_BoolOp : Init_BoolOp;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method and : and_BoolOp;
	method or : or_BoolOp;
}

type Object {

	method Init_Object : Init_Object;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
}

type Int {
	attribute value;

	method Init_Int : Init_Int;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
}

type String {
	attribute value;

	method Init_String : Init_String;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method length : length_String;
	method concat : concat_String;
	method substr : substr_String;
}

type Bool {
	attribute value;

	method Init_Bool : Init_Bool;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
}

type IO {

	method Init_IO : Init_IO;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
}


.DATA

str_empty = "";
str_0 = " (";
str_1 = ",";
str_2 = ")";
str_3 = "\n";
str_4 = "\n";
str_5 = "\n";
str_6 = "";
str_7 = "0";
str_8 = "1";
str_9 = "2";
str_10 = "3";
str_11 = "4";
str_12 = "5";
str_13 = "6";
str_14 = "7";
str_15 = "8";
str_16 = "9";
str_17 = "-";
str_18 = " ";
str_19 = " ";
str_20 = ",";
str_21 = "";
str_22 = "";

.CODE

function main {

	LOCAL m0;
	LOCAL m1;
	LOCAL m2;

	m0 = ALLOCATE Main;
	ARG m0;
	m1 = VCALL Main Init_Main;
	ARG m1;
	m2 = VCALL Main main;
	RETURN m2;

}


function add_vertice_Graph {
	PARAM self_Graph;
	PARAM v_4;

	LOCAL t_5;
	LOCAL t_6;
	LOCAL t_7;
	LOCAL t_8;
	LOCAL t_9;
	LOCAL t_10;
	LOCAL t_11;
	LOCAL t_12;
	LOCAL t_13;
	LOCAL t_14;
	LOCAL t_15;

	t_5 = v_4;
	ARG t_5;
	t_6 = VCALL Vertice outgoing;
	t_7 = t_6;
	t_8 = GETATTR self_Graph edges;
	t_9 = t_8;
	ARG t_7;
	ARG t_9;
	t_10 = VCALL EList append;
	SETATTR self_Graph edges t_10;
	t_11 = GETATTR self_Graph vertices;
	t_12 = t_11;
	t_13 = v_4;
	ARG t_12;
	ARG t_13;
	t_14 = VCALL VList cons;
	SETATTR self_Graph vertices t_14;
	t_15 = t_14;
	RETURN t_15;

}


function print_E_Graph {
	PARAM self_Graph;

	LOCAL t_16;
	LOCAL t_17;
	LOCAL t_18;
	LOCAL t_19;

	t_16 = GETATTR self_Graph edges;
	t_17 = t_16;
	ARG t_17;
	t_18 = VCALL EList print;
	t_19 = t_18;
	RETURN t_19;

}


function print_V_Graph {
	PARAM self_Graph;

	LOCAL t_20;
	LOCAL t_21;
	LOCAL t_22;
	LOCAL t_23;

	t_20 = GETATTR self_Graph vertices;
	t_21 = t_20;
	ARG t_21;
	t_22 = VCALL VList print;
	t_23 = t_22;
	RETURN t_23;

}


function Init_Graph {
	PARAM self_Graph;

	LOCAL t_0;
	LOCAL t_1;
	LOCAL t_2;
	LOCAL t_3;

	t_0 = ALLOCATE VList;
	ARG t_0;
	t_1 = VCALL VList Init_VList;
	SETATTR self_Graph vertices t_1;
	t_2 = ALLOCATE EList;
	ARG t_2;
	t_3 = VCALL EList Init_EList;
	SETATTR self_Graph edges t_3;
	RETURN self_Graph;

}


function outgoing_Vertice {
	PARAM self_Vertice;

	LOCAL t_26;
	LOCAL t_27;

	t_26 = GETATTR self_Vertice out;
	t_27 = t_26;
	RETURN t_27;

}


function number_Vertice {
	PARAM self_Vertice;

	LOCAL t_28;
	LOCAL t_29;

	t_28 = GETATTR self_Vertice num;
	t_29 = t_28;
	RETURN t_29;

}


function init_Vertice {
	PARAM self_Vertice;
	PARAM n_30;

	LOCAL t_31;

	SETATTR self_Vertice num n_30;
	t_31 = self_Vertice;
	RETURN t_31;

}


function add_out_Vertice {
	PARAM self_Vertice;
	PARAM s_32;

	LOCAL t_33;
	LOCAL t_34;
	LOCAL t_35;
	LOCAL t_36;
	LOCAL t_37;

	t_33 = GETATTR self_Vertice out;
	t_34 = t_33;
	t_35 = s_32;
	ARG t_34;
	ARG t_35;
	t_36 = VCALL EList cons;
	SETATTR self_Vertice out t_36;
	t_37 = self_Vertice;
	RETURN t_37;

}


function print_Vertice {
	PARAM self_Vertice;

	LOCAL t_38;
	LOCAL t_39;
	LOCAL t_40;
	LOCAL t_41;
	LOCAL t_42;
	LOCAL t_43;
	LOCAL t_44;

	t_38 = GETATTR self_Vertice num;
	t_39 = t_38;
	ARG self_Vertice;
	ARG t_39;
	t_40 = VCALL Vertice out_int;
	t_41 = GETATTR self_Vertice out;
	t_42 = t_41;
	ARG t_42;
	t_43 = VCALL EList print;
	t_44 = t_43;
	RETURN t_44;

}


function Init_Vertice {
	PARAM self_Vertice;

	LOCAL t_24;
	LOCAL t_25;

	ARG self_Vertice;
	self_Vertice = CALL Init_IO;
	SETATTR self_Vertice num 0;
	t_24 = ALLOCATE EList;
	ARG t_24;
	t_25 = VCALL EList Init_EList;
	SETATTR self_Vertice out t_25;
	RETURN self_Vertice;

}


function init_Edge {
	PARAM self_Edge;
	PARAM f_45;
	PARAM t_46;
	PARAM w_47;

	LOCAL t_48;

	SETATTR self_Edge from f_45;
	SETATTR self_Edge to t_46;
	SETATTR self_Edge weight w_47;
	t_48 = self_Edge;
	RETURN t_48;

}


function print_Edge {
	PARAM self_Edge;

	LOCAL t_49;
	LOCAL t_50;
	LOCAL t_51;
	LOCAL t_52;
	LOCAL t_53;
	LOCAL t_54;
	LOCAL t_55;
	LOCAL t_56;
	LOCAL t_57;
	LOCAL t_58;
	LOCAL t_59;
	LOCAL t_60;
	LOCAL t_61;
	LOCAL t_62;
	LOCAL t_63;
	LOCAL t_64;
	LOCAL t_65;
	LOCAL t_66;
	LOCAL t_67;

	t_49 = LOAD str_0;
	t_50 = t_49;
	ARG self_Edge;
	ARG t_50;
	t_51 = VCALL Edge out_string;
	t_52 = GETATTR self_Edge from;
	t_53 = t_52;
	ARG self_Edge;
	ARG t_53;
	t_54 = VCALL Edge out_int;
	t_55 = LOAD str_1;
	t_56 = t_55;
	ARG self_Edge;
	ARG t_56;
	t_57 = VCALL Edge out_string;
	t_58 = GETATTR self_Edge to;
	t_59 = t_58;
	ARG self_Edge;
	ARG t_59;
	t_60 = VCALL Edge out_int;
	t_61 = LOAD str_2;
	t_62 = t_61;
	ARG self_Edge;
	ARG t_62;
	t_63 = VCALL Edge out_string;
	t_64 = GETATTR self_Edge weight;
	t_65 = t_64;
	ARG self_Edge;
	ARG t_65;
	t_66 = VCALL Edge out_int;
	t_67 = t_66;
	RETURN t_67;

}


function Init_Edge {
	PARAM self_Edge;


	ARG self_Edge;
	self_Edge = CALL Init_IO;
	SETATTR self_Edge from 0;
	SETATTR self_Edge to 0;
	SETATTR self_Edge weight 0;
	RETURN self_Edge;

}


function isNil_EList {
	PARAM self_EList;

	LOCAL t_68;
	LOCAL t_69;

	t_68 = 0 == 0;
	t_69 = t_68;
	RETURN t_69;

}


function head_EList {
	PARAM self_EList;

	LOCAL t_70;
	LOCAL t_71;
	LOCAL t_72;

	ARG self_EList;
	t_70 = VCALL EList abort;
	t_71 = GETATTR self_EList car;
	t_72 = t_71;
	RETURN t_72;

}


function tail_EList {
	PARAM self_EList;

	LOCAL t_73;
	LOCAL t_74;

	ARG self_EList;
	t_73 = VCALL EList abort;
	t_74 = self_EList;
	RETURN t_74;

}


function cons_EList {
	PARAM self_EList;
	PARAM e_75;

	LOCAL t_76;
	LOCAL t_77;
	LOCAL t_78;
	LOCAL t_79;
	LOCAL t_80;
	LOCAL t_81;
	LOCAL t_82;

	t_76 = ALLOCATE ECons;
	ARG t_76;
	t_77 = VCALL ECons Init_ECons;
	t_78 = t_77;
	t_79 = e_75;
	t_80 = self_EList;
	ARG t_78;
	ARG t_79;
	ARG t_80;
	t_81 = VCALL ECons init;
	t_82 = t_81;
	RETURN t_82;

}


function append_EList {
	PARAM self_EList;
	PARAM l_83;

	LOCAL t_84;
	LOCAL t_85;
	LOCAL t_86;
	LOCAL t_87;
	LOCAL t_88;
	LOCAL t_89;
	LOCAL t_90;
	LOCAL t_91;
	LOCAL t_92;
	LOCAL t_93;
	LOCAL t_94;
	LOCAL t_95;

	ARG self_EList;
	t_84 = VCALL EList isNil;
	t_85 = t_84;
	IF t_85 GOTO then_0;
	ARG self_EList;
	t_87 = VCALL EList tail;
	t_88 = t_87;
	t_89 = l_83;
	ARG t_88;
	ARG t_89;
	t_90 = VCALL EList append;
	t_91 = t_90;
	ARG self_EList;
	t_92 = VCALL EList head;
	t_93 = t_92;
	ARG t_91;
	ARG t_93;
	t_94 = VCALL EList cons;
	t_86 = t_94;
	GOTO ifend_0;
then_0:
	t_86 = l_83;
ifend_0:
	t_95 = t_86;
	RETURN t_95;

}


function print_EList {
	PARAM self_EList;

	LOCAL t_96;
	LOCAL t_97;
	LOCAL t_98;
	LOCAL t_99;

	t_96 = LOAD str_3;
	t_97 = t_96;
	ARG self_EList;
	ARG t_97;
	t_98 = VCALL EList out_string;
	t_99 = t_98;
	RETURN t_99;

}


function Init_EList {
	PARAM self_EList;


	ARG self_EList;
	self_EList = CALL Init_IO;
	RETURN self_EList;

}


function isNil_ECons {
	PARAM self_ECons;

	LOCAL t_100;
	LOCAL t_101;

	t_100 = 0 == 1;
	t_101 = t_100;
	RETURN t_101;

}


function head_ECons {
	PARAM self_ECons;

	LOCAL t_102;
	LOCAL t_103;

	t_102 = GETATTR self_ECons car;
	t_103 = t_102;
	RETURN t_103;

}


function tail_ECons {
	PARAM self_ECons;

	LOCAL t_104;
	LOCAL t_105;

	t_104 = GETATTR self_ECons cdr;
	t_105 = t_104;
	RETURN t_105;

}


function init_ECons {
	PARAM self_ECons;
	PARAM e_106;
	PARAM rest_107;

	LOCAL t_108;

	SETATTR self_ECons car e_106;
	SETATTR self_ECons cdr rest_107;
	t_108 = self_ECons;
	RETURN t_108;

}


function print_ECons {
	PARAM self_ECons;

	LOCAL t_109;
	LOCAL t_110;
	LOCAL t_111;
	LOCAL t_112;
	LOCAL t_113;
	LOCAL t_114;
	LOCAL t_115;

	t_109 = GETATTR self_ECons car;
	t_110 = t_109;
	ARG t_110;
	t_111 = VCALL Edge print;
	t_112 = GETATTR self_ECons cdr;
	t_113 = t_112;
	ARG t_113;
	t_114 = VCALL EList print;
	t_115 = t_114;
	RETURN t_115;

}


function Init_ECons {
	PARAM self_ECons;


	ARG self_ECons;
	self_ECons = CALL Init_EList;
	RETURN self_ECons;

}


function isNil_VList {
	PARAM self_VList;

	LOCAL t_116;
	LOCAL t_117;

	t_116 = 0 == 0;
	t_117 = t_116;
	RETURN t_117;

}


function head_VList {
	PARAM self_VList;

	LOCAL t_118;
	LOCAL t_119;
	LOCAL t_120;

	ARG self_VList;
	t_118 = VCALL VList abort;
	t_119 = GETATTR self_VList car;
	t_120 = t_119;
	RETURN t_120;

}


function tail_VList {
	PARAM self_VList;

	LOCAL t_121;
	LOCAL t_122;

	ARG self_VList;
	t_121 = VCALL VList abort;
	t_122 = self_VList;
	RETURN t_122;

}


function cons_VList {
	PARAM self_VList;
	PARAM v_123;

	LOCAL t_124;
	LOCAL t_125;
	LOCAL t_126;
	LOCAL t_127;
	LOCAL t_128;
	LOCAL t_129;
	LOCAL t_130;

	t_124 = ALLOCATE VCons;
	ARG t_124;
	t_125 = VCALL VCons Init_VCons;
	t_126 = t_125;
	t_127 = v_123;
	t_128 = self_VList;
	ARG t_126;
	ARG t_127;
	ARG t_128;
	t_129 = VCALL VCons init;
	t_130 = t_129;
	RETURN t_130;

}


function print_VList {
	PARAM self_VList;

	LOCAL t_131;
	LOCAL t_132;
	LOCAL t_133;
	LOCAL t_134;

	t_131 = LOAD str_4;
	t_132 = t_131;
	ARG self_VList;
	ARG t_132;
	t_133 = VCALL VList out_string;
	t_134 = t_133;
	RETURN t_134;

}


function Init_VList {
	PARAM self_VList;


	ARG self_VList;
	self_VList = CALL Init_IO;
	RETURN self_VList;

}


function isNil_VCons {
	PARAM self_VCons;

	LOCAL t_135;
	LOCAL t_136;

	t_135 = 0 == 1;
	t_136 = t_135;
	RETURN t_136;

}


function head_VCons {
	PARAM self_VCons;

	LOCAL t_137;
	LOCAL t_138;

	t_137 = GETATTR self_VCons car;
	t_138 = t_137;
	RETURN t_138;

}


function tail_VCons {
	PARAM self_VCons;

	LOCAL t_139;
	LOCAL t_140;

	t_139 = GETATTR self_VCons cdr;
	t_140 = t_139;
	RETURN t_140;

}


function init_VCons {
	PARAM self_VCons;
	PARAM v_141;
	PARAM rest_142;

	LOCAL t_143;

	SETATTR self_VCons car v_141;
	SETATTR self_VCons cdr rest_142;
	t_143 = self_VCons;
	RETURN t_143;

}


function print_VCons {
	PARAM self_VCons;

	LOCAL t_144;
	LOCAL t_145;
	LOCAL t_146;
	LOCAL t_147;
	LOCAL t_148;
	LOCAL t_149;
	LOCAL t_150;

	t_144 = GETATTR self_VCons car;
	t_145 = t_144;
	ARG t_145;
	t_146 = VCALL Vertice print;
	t_147 = GETATTR self_VCons cdr;
	t_148 = t_147;
	ARG t_148;
	t_149 = VCALL VList print;
	t_150 = t_149;
	RETURN t_150;

}


function Init_VCons {
	PARAM self_VCons;


	ARG self_VCons;
	self_VCons = CALL Init_VList;
	RETURN self_VCons;

}


function read_input_Parse {
	PARAM self_Parse;

	LOCAL g_153;
	LOCAL t_154;
	LOCAL t_155;
	LOCAL line_156;
	LOCAL t_157;
	LOCAL t_158;
	LOCAL t_159;
	LOCAL t_160;
	LOCAL t_161;
	LOCAL t_162;
	LOCAL t_163;
	LOCAL t_164;
	LOCAL t_165;
	LOCAL t_166;
	LOCAL t_167;
	LOCAL t_168;
	LOCAL t_169;
	LOCAL t_170;
	LOCAL t_171;
	LOCAL t_172;
	LOCAL t_173;
	LOCAL t_174;
	LOCAL t_175;
	LOCAL t_176;
	LOCAL t_177;
	LOCAL t_178;
	LOCAL t_179;

	t_154 = ALLOCATE Graph;
	ARG t_154;
	t_155 = VCALL Graph Init_Graph;
	g_153 = t_155;
	ARG self_Parse;
	t_157 = VCALL Parse in_string;
	line_156 = t_157;
while_0:
	t_158 = GETATTR self_Parse boolop;
	t_159 = t_158;
	t_160 = LOAD str_5;
	t_161 = line_156 == t_160;
	t_162 = t_161;
	t_163 = ;
	t_164 = t_163;
	t_165 = LOAD str_6;
	t_166 = line_156 == t_165;
	t_167 = t_166;
	t_168 = ;
	t_169 = t_168;
	ARG t_159;
	ARG t_164;
	ARG t_169;
	t_170 = VCALL BoolOp and;
	t_171 = t_170;
	IF t_171 GOTO body_0;
	GOTO pool_0;
body_0:
	t_173 = g_153;
	t_174 = line_156;
	ARG self_Parse;
	ARG t_174;
	t_175 = VCALL Parse parse_line;
	t_176 = t_175;
	ARG t_173;
	ARG t_176;
	t_177 = VCALL Graph add_vertice;
	ARG self_Parse;
	t_178 = VCALL Parse in_string;
	line_156 = t_178;
	t_172 = line_156;
	GOTO while_0;
pool_0:
	t_179 = g_153;
	RETURN t_179;

}


function parse_line_Parse {
	PARAM self_Parse;
	PARAM s_180;

	LOCAL v_181;
	LOCAL t_182;
	LOCAL t_183;
	LOCAL t_184;
	LOCAL t_185;
	LOCAL t_186;
	LOCAL t_187;
	LOCAL t_188;
	LOCAL t_189;
	LOCAL t_190;
	LOCAL t_191;
	LOCAL t_192;
	LOCAL t_193;
	LOCAL t_194;
	LOCAL t_195;
	LOCAL t_196;
	LOCAL succ_197;
	LOCAL t_198;
	LOCAL t_199;
	LOCAL t_200;
	LOCAL weight_201;
	LOCAL t_202;
	LOCAL t_203;
	LOCAL t_204;
	LOCAL t_205;
	LOCAL t_206;
	LOCAL t_207;
	LOCAL t_208;
	LOCAL t_209;
	LOCAL t_210;
	LOCAL t_211;
	LOCAL t_212;
	LOCAL t_213;
	LOCAL t_214;
	LOCAL t_215;
	LOCAL t_216;
	LOCAL t_217;

	t_182 = ALLOCATE Vertice;
	ARG t_182;
	t_183 = VCALL Vertice Init_Vertice;
	t_184 = t_183;
	t_185 = s_180;
	ARG self_Parse;
	ARG t_185;
	t_186 = VCALL Parse a2i;
	t_187 = t_186;
	ARG t_184;
	ARG t_187;
	t_188 = VCALL Vertice init;
	v_181 = t_188;
while_1:
	t_189 = GETATTR self_Parse rest;
	t_190 = t_189;
	ARG t_190;
	t_191 = VCALL String length;
	t_192 = t_191 == 0;
	t_193 = t_192;
	t_194 = ;
	t_195 = t_194;
	IF t_195 GOTO body_1;
	GOTO pool_1;
body_1:
	t_198 = GETATTR self_Parse rest;
	t_199 = t_198;
	ARG self_Parse;
	ARG t_199;
	t_200 = VCALL Parse a2i;
	succ_197 = t_200;
	t_202 = GETATTR self_Parse rest;
	t_203 = t_202;
	ARG self_Parse;
	ARG t_203;
	t_204 = VCALL Parse a2i;
	weight_201 = t_204;
	t_205 = v_181;
	t_206 = ALLOCATE Edge;
	ARG t_206;
	t_207 = VCALL Edge Init_Edge;
	t_208 = t_207;
	t_209 = v_181;
	ARG t_209;
	t_210 = VCALL Vertice number;
	t_211 = t_210;
	t_212 = succ_197;
	t_213 = weight_201;
	ARG t_208;
	ARG t_211;
	ARG t_212;
	ARG t_213;
	t_214 = VCALL Edge init;
	t_215 = t_214;
	ARG t_205;
	ARG t_215;
	t_216 = VCALL Vertice add_out;
	t_196 = t_216;
	GOTO while_1;
pool_1:
	t_217 = v_181;
	RETURN t_217;

}


function c2i_Parse {
	PARAM self_Parse;
	PARAM char_218;

	LOCAL t_219;
	LOCAL t_220;
	LOCAL t_221;
	LOCAL t_222;
	LOCAL t_223;
	LOCAL t_224;
	LOCAL t_225;
	LOCAL t_226;
	LOCAL t_227;
	LOCAL t_228;
	LOCAL t_229;
	LOCAL t_230;
	LOCAL t_231;
	LOCAL t_232;
	LOCAL t_233;
	LOCAL t_234;
	LOCAL t_235;
	LOCAL t_236;
	LOCAL t_237;
	LOCAL t_238;
	LOCAL t_239;
	LOCAL t_240;
	LOCAL t_241;
	LOCAL t_242;
	LOCAL t_243;
	LOCAL t_244;
	LOCAL t_245;
	LOCAL t_246;
	LOCAL t_247;
	LOCAL t_248;
	LOCAL t_249;
	LOCAL t_250;
	LOCAL t_251;
	LOCAL t_252;
	LOCAL t_253;
	LOCAL t_254;
	LOCAL t_255;
	LOCAL t_256;
	LOCAL t_257;
	LOCAL t_258;
	LOCAL t_259;
	LOCAL t_260;

	t_219 = LOAD str_7;
	t_220 = char_218 == t_219;
	t_221 = t_220;
	IF t_221 GOTO then_1;
	t_223 = LOAD str_8;
	t_224 = char_218 == t_223;
	t_225 = t_224;
	IF t_225 GOTO then_2;
	t_227 = LOAD str_9;
	t_228 = char_218 == t_227;
	t_229 = t_228;
	IF t_229 GOTO then_3;
	t_231 = LOAD str_10;
	t_232 = char_218 == t_231;
	t_233 = t_232;
	IF t_233 GOTO then_4;
	t_235 = LOAD str_11;
	t_236 = char_218 == t_235;
	t_237 = t_236;
	IF t_237 GOTO then_5;
	t_239 = LOAD str_12;
	t_240 = char_218 == t_239;
	t_241 = t_240;
	IF t_241 GOTO then_6;
	t_243 = LOAD str_13;
	t_244 = char_218 == t_243;
	t_245 = t_244;
	IF t_245 GOTO then_7;
	t_247 = LOAD str_14;
	t_248 = char_218 == t_247;
	t_249 = t_248;
	IF t_249 GOTO then_8;
	t_251 = LOAD str_15;
	t_252 = char_218 == t_251;
	t_253 = t_252;
	IF t_253 GOTO then_9;
	t_255 = LOAD str_16;
	t_256 = char_218 == t_255;
	t_257 = t_256;
	IF t_257 GOTO then_10;
	ARG self_Parse;
	t_259 = VCALL Parse abort;
	t_258 = 0;
	GOTO ifend_10;
then_10:
	t_258 = 9;
ifend_10:
	t_254 = t_258;
	GOTO ifend_9;
then_9:
	t_254 = 8;
ifend_9:
	t_250 = t_254;
	GOTO ifend_8;
then_8:
	t_250 = 7;
ifend_8:
	t_246 = t_250;
	GOTO ifend_7;
then_7:
	t_246 = 6;
ifend_7:
	t_242 = t_246;
	GOTO ifend_6;
then_6:
	t_242 = 5;
ifend_6:
	t_238 = t_242;
	GOTO ifend_5;
then_5:
	t_238 = 4;
ifend_5:
	t_234 = t_238;
	GOTO ifend_4;
then_4:
	t_234 = 3;
ifend_4:
	t_230 = t_234;
	GOTO ifend_3;
then_3:
	t_230 = 2;
ifend_3:
	t_226 = t_230;
	GOTO ifend_2;
then_2:
	t_226 = 1;
ifend_2:
	t_222 = t_226;
	GOTO ifend_1;
then_1:
	t_222 = 0;
ifend_1:
	t_260 = t_222;
	RETURN t_260;

}


function a2i_Parse {
	PARAM self_Parse;
	PARAM s_261;

	LOCAL t_262;
	LOCAL t_263;
	LOCAL t_264;
	LOCAL t_265;
	LOCAL t_266;
	LOCAL t_267;
	LOCAL t_268;
	LOCAL t_269;
	LOCAL t_270;
	LOCAL t_271;
	LOCAL t_272;
	LOCAL t_273;
	LOCAL t_274;
	LOCAL t_275;
	LOCAL t_276;
	LOCAL t_277;
	LOCAL t_278;
	LOCAL t_279;
	LOCAL t_280;
	LOCAL t_281;
	LOCAL t_282;
	LOCAL t_283;
	LOCAL t_284;
	LOCAL t_285;
	LOCAL t_286;
	LOCAL t_287;
	LOCAL t_288;
	LOCAL t_289;
	LOCAL t_290;
	LOCAL t_291;
	LOCAL t_292;
	LOCAL t_293;
	LOCAL t_294;
	LOCAL t_295;
	LOCAL t_296;
	LOCAL t_297;
	LOCAL t_298;
	LOCAL t_299;
	LOCAL t_300;
	LOCAL t_301;
	LOCAL t_302;
	LOCAL t_303;
	LOCAL t_304;
	LOCAL t_305;

	t_262 = s_261;
	ARG t_262;
	t_263 = VCALL String length;
	t_264 = t_263 == 0;
	t_265 = t_264;
	IF t_265 GOTO then_11;
	t_267 = s_261;
	t_268 = 0;
	t_269 = 1;
	ARG t_267;
	ARG t_268;
	ARG t_269;
	t_270 = VCALL String substr;
	t_271 = LOAD str_17;
	t_272 = t_270 == t_271;
	t_273 = t_272;
	IF t_273 GOTO then_12;
	t_275 = s_261;
	t_276 = 0;
	t_277 = 1;
	ARG t_275;
	ARG t_276;
	ARG t_277;
	t_278 = VCALL String substr;
	t_279 = LOAD str_18;
	t_280 = t_278 == t_279;
	t_281 = t_280;
	IF t_281 GOTO then_13;
	t_283 = s_261;
	ARG self_Parse;
	ARG t_283;
	t_284 = VCALL Parse a2i_aux;
	t_282 = t_284;
	GOTO ifend_13;
then_13:
	t_285 = s_261;
	t_286 = 1;
	t_287 = s_261;
	ARG t_287;
	t_288 = VCALL String length;
	t_289 = t_288 - 1;
	t_290 = t_289;
	ARG t_285;
	ARG t_286;
	ARG t_290;
	t_291 = VCALL String substr;
	t_292 = t_291;
	ARG self_Parse;
	ARG t_292;
	t_293 = VCALL Parse a2i;
	t_282 = t_293;
ifend_13:
	t_274 = t_282;
	GOTO ifend_12;
then_12:
	t_294 = s_261;
	t_295 = 1;
	t_296 = s_261;
	ARG t_296;
	t_297 = VCALL String length;
	t_298 = t_297 - 1;
	t_299 = t_298;
	ARG t_294;
	ARG t_295;
	ARG t_299;
	t_300 = VCALL String substr;
	t_301 = t_300;
	ARG self_Parse;
	ARG t_301;
	t_302 = VCALL Parse a2i_aux;
	t_303 = t_302;
	t_304 = 0 - t_303;
	t_274 = t_304;
ifend_12:
	t_266 = t_274;
	GOTO ifend_11;
then_11:
	t_266 = 0;
ifend_11:
	t_305 = t_266;
	RETURN t_305;

}


function a2i_aux_Parse {
	PARAM self_Parse;
	PARAM s_306;

	LOCAL int_307;
	LOCAL j_308;
	LOCAL t_309;
	LOCAL t_310;
	LOCAL i_311;
	LOCAL t_312;
	LOCAL t_313;
	LOCAL t_314;
	LOCAL c_315;
	LOCAL t_316;
	LOCAL t_317;
	LOCAL t_318;
	LOCAL t_319;
	LOCAL t_320;
	LOCAL t_321;
	LOCAL t_322;
	LOCAL t_323;
	LOCAL t_324;
	LOCAL t_325;
	LOCAL t_326;
	LOCAL t_327;
	LOCAL t_328;
	LOCAL t_329;
	LOCAL t_330;
	LOCAL t_331;
	LOCAL t_332;
	LOCAL t_333;
	LOCAL t_334;
	LOCAL t_335;
	LOCAL t_336;
	LOCAL t_337;
	LOCAL t_338;
	LOCAL t_339;
	LOCAL t_340;
	LOCAL t_341;
	LOCAL t_342;
	LOCAL t_343;
	LOCAL t_344;
	LOCAL t_345;
	LOCAL t_346;
	LOCAL t_347;
	LOCAL t_348;
	LOCAL t_349;
	LOCAL t_350;
	LOCAL t_351;
	LOCAL t_352;
	LOCAL t_353;
	LOCAL t_354;
	LOCAL t_355;
	LOCAL t_356;
	LOCAL t_357;
	LOCAL t_358;
	LOCAL t_359;
	LOCAL t_360;

	int_307 = 0;
	t_309 = s_306;
	ARG t_309;
	t_310 = VCALL String length;
	j_308 = t_310;
	i_311 = 0;
while_2:
	t_312 = i_311 < j_308;
	t_313 = t_312;
	IF t_313 GOTO body_2;
	GOTO pool_2;
body_2:
	t_316 = s_306;
	t_317 = i_311;
	t_318 = 1;
	ARG t_316;
	ARG t_317;
	ARG t_318;
	t_319 = VCALL String substr;
	c_315 = t_319;
	t_320 = LOAD str_19;
	t_321 = c_315 == t_320;
	t_322 = t_321;
	IF t_322 GOTO then_14;
	t_324 = LOAD str_20;
	t_325 = c_315 == t_324;
	t_326 = t_325;
	IF t_326 GOTO then_15;
	t_328 = int_307 * 10;
	t_329 = s_306;
	t_330 = i_311;
	t_331 = 1;
	ARG t_329;
	ARG t_330;
	ARG t_331;
	t_332 = VCALL String substr;
	t_333 = t_332;
	ARG self_Parse;
	ARG t_333;
	t_334 = VCALL Parse c2i;
	t_335 = t_328 + t_334;
	int_307 = t_335;
	t_336 = i_311 + 1;
	i_311 = t_336;
	t_337 = i_311 == j_308;
	t_338 = t_337;
	IF t_338 GOTO then_16;
	t_340 = LOAD str_21;
	t_339 = t_340;
	GOTO ifend_16;
then_16:
	t_341 = LOAD str_22;
	SETATTR self_Parse rest t_341;
	t_339 = t_341;
ifend_16:
	t_327 = t_339;
	GOTO ifend_15;
then_15:
	t_342 = s_306;
	t_343 = i_311 + 1;
	t_344 = t_343;
	t_345 = s_306;
	ARG t_345;
	t_346 = VCALL String length;
	t_347 = t_346 - i_311;
	t_348 = t_347 - 1;
	t_349 = t_348;
	ARG t_342;
	ARG t_344;
	ARG t_349;
	t_350 = VCALL String substr;
	SETATTR self_Parse rest t_350;
	i_311 = j_308;
	t_327 = i_311;
ifend_15:
	t_323 = t_327;
	GOTO ifend_14;
then_14:
	t_351 = s_306;
	t_352 = i_311 + 1;
	t_353 = t_352;
	t_354 = s_306;
	ARG t_354;
	t_355 = VCALL String length;
	t_356 = t_355 - i_311;
	t_357 = t_356 - 1;
	t_358 = t_357;
	ARG t_351;
	ARG t_353;
	ARG t_358;
	t_359 = VCALL String substr;
	SETATTR self_Parse rest t_359;
	i_311 = j_308;
	t_323 = i_311;
ifend_14:
	t_314 = t_323;
	GOTO while_2;
pool_2:
	t_360 = int_307;
	RETURN t_360;

}


function Init_Parse {
	PARAM self_Parse;

	LOCAL t_151;
	LOCAL t_152;
	LOCAL t_361;

	ARG self_Parse;
	self_Parse = CALL Init_IO;
	t_151 = ALLOCATE BoolOp;
	ARG t_151;
	t_152 = VCALL BoolOp Init_BoolOp;
	SETATTR self_Parse boolop t_152;
	t_361 = LOAD str_empty;
	SETATTR self_Parse rest t_361;
	RETURN self_Parse;

}


function main_Main {
	PARAM self_Main;

	LOCAL t_363;
	LOCAL t_364;
	LOCAL t_365;
	LOCAL t_366;
	LOCAL t_367;
	LOCAL t_368;
	LOCAL t_369;

	t_363 = GETATTR self_Main g;
	t_364 = t_363;
	ARG t_364;
	t_365 = VCALL Graph print_V;
	t_366 = GETATTR self_Main g;
	t_367 = t_366;
	ARG t_367;
	t_368 = VCALL Graph print_E;
	t_369 = t_368;
	RETURN t_369;

}


function Init_Main {
	PARAM self_Main;

	LOCAL t_362;

	ARG self_Main;
	self_Main = CALL Init_Parse;
	ARG self_Main;
	t_362 = VCALL Main read_input;
	SETATTR self_Main g t_362;
	RETURN self_Main;

}


function and_BoolOp {
	PARAM self_BoolOp;
	PARAM b1_370;
	PARAM b2_371;

	LOCAL t_372;
	LOCAL t_373;
	LOCAL t_374;
	LOCAL t_375;

	t_372 = b1_370;
	IF t_372 GOTO then_17;
	t_374 = 0 == 1;
	t_373 = t_374;
	GOTO ifend_17;
then_17:
	t_373 = b2_371;
ifend_17:
	t_375 = t_373;
	RETURN t_375;

}


function or_BoolOp {
	PARAM self_BoolOp;
	PARAM b1_376;
	PARAM b2_377;

	LOCAL t_378;
	LOCAL t_379;
	LOCAL t_380;
	LOCAL t_381;

	t_378 = b1_376;
	IF t_378 GOTO then_18;
	t_379 = b2_377;
	GOTO ifend_18;
then_18:
	t_380 = 0 == 0;
	t_379 = t_380;
ifend_18:
	t_381 = t_379;
	RETURN t_381;

}


function Init_BoolOp {
	PARAM self_BoolOp;


	RETURN self_BoolOp;

}


function Init_Object {
	PARAM self;


	RETURN self;

}


function Init_Int {
	PARAM self;
	PARAM v;


	SETATTR self value v;
	RETURN self;

}


function Init_String {
	PARAM self;
	PARAM v;


	SETATTR self value v;
	RETURN self;

}


function Init_Bool {
	PARAM self;
	PARAM v;


	SETATTR self value v;
	RETURN self;

}


function Init_IO {
	PARAM self;


	RETURN self;

}


