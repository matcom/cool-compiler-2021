.TYPES

type Main {

	method Init_Main : Init_Main;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
	method main : main_Main;
	method fib : fib_Main;
}

type Object {

	method Init_Object : Init_Object;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
}

type Int {
	attribute value;

	method Init_Int : Init_Int;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
}

type String {
	attribute value;

	method Init_String : Init_String;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method length : length_String;
	method concat : concat_String;
	method substr : substr_String;
}

type Bool {
	attribute value;

	method Init_Bool : Init_Bool;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
}

type IO {

	method Init_IO : Init_IO;
	method abort : abort_Object;
	method type_name : type_name_Object;
	method copy : copy_Object;
	method out_string : out_string_IO;
	method out_int : out_int_IO;
	method in_string : in_string_IO;
	method in_int : in_int_IO;
}


.DATA

str_empty = "";
str_0 = "Enter n to find nth fibonacci number!\n";
str_1 = "\n";

.CODE

function main {

	LOCAL m0;
	LOCAL m1;
	LOCAL m2;

	m0 = ALLOCATE Main;
	ARG m0;
	m1 = VCALL Main Init_Main;
	ARG m1;
	m2 = VCALL Main main;
	RETURN m2;

}


function main_Main {
	PARAM self_Main;

	LOCAL t_0;
	LOCAL t_1;
	LOCAL t_2;
	LOCAL t_3;
	LOCAL t_4;
	LOCAL t_5;
	LOCAL t_6;
	LOCAL t_7;
	LOCAL t_8;
	LOCAL t_9;
	LOCAL t_10;
	LOCAL t_11;

	t_0 = LOAD str_0;
	t_1 = t_0;
	ARG self_Main;
	ARG t_1;
	t_2 = VCALL Main out_string;
	ARG self_Main;
	t_3 = VCALL Main in_int;
	t_4 = t_3;
	ARG self_Main;
	ARG t_4;
	t_5 = VCALL Main fib;
	t_6 = t_5;
	ARG self_Main;
	ARG t_6;
	t_7 = VCALL Main out_int;
	t_8 = LOAD str_1;
	t_9 = t_8;
	ARG self_Main;
	ARG t_9;
	t_10 = VCALL Main out_string;
	t_11 = t_10;
	RETURN t_11;

}


function fib_Main {
	PARAM self_Main;
	PARAM i_12;

	LOCAL a_13;
	LOCAL b_14;
	LOCAL c_15;
	LOCAL t_16;
	LOCAL t_17;
	LOCAL t_18;
	LOCAL t_19;
	LOCAL t_20;
	LOCAL t_21;
	LOCAL t_22;
	LOCAL t_23;

	a_13 = 1;
	b_14 = 0;
	c_15 = 0;
while_0:
	t_16 = i_12 == 0;
	t_17 = t_16;
	t_18 = ;
	t_19 = t_18;
	IF t_19 GOTO body_0;
	GOTO pool_0;
body_0:
	t_21 = a_13 + b_14;
	c_15 = t_21;
	t_22 = i_12 - 1;
	i_12 = t_22;
	b_14 = a_13;
	a_13 = c_15;
	t_20 = a_13;
	GOTO while_0;
pool_0:
	t_23 = c_15;
	RETURN t_23;

}


function Init_Main {
	PARAM self_Main;


	ARG self_Main;
	self_Main = CALL Init_IO;
	RETURN self_Main;

}


function Init_Object {
	PARAM self;


	RETURN self;

}


function Init_Int {
	PARAM self;
	PARAM v;


	SETATTR self value v;
	RETURN self;

}


function Init_String {
	PARAM self;
	PARAM v;


	SETATTR self value v;
	RETURN self;

}


function Init_Bool {
	PARAM self;
	PARAM v;


	SETATTR self value v;
	RETURN self;

}


function Init_IO {
	PARAM self;


	RETURN self;

}


