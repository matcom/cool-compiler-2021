
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROBA ARROW ASSIGN CASE CBRACE CLASS COLON COMA COMPLEMENT CPAR DIV DOT ELSE EQUAL ESAC FALSE FI ID IF IN INHERITS ISVOID LESS LESSEQUAL LET LOOP MINUS NEW NOT NUMBER OBRACE OF OPAR PLUS POOL SEMI SINGLE_LINE_COMMENT STRING THEN TIMES TRUE TYPE USTRING WHILEprogram : class_listclass_list : class_def class_list\n                  | class_defclass_def : CLASS TYPE OBRACE feature_list CBRACE SEMI \n                 | CLASS TYPE INHERITS TYPE OBRACE feature_list CBRACE SEMIfeature_list : empty\n                    | attribute SEMI feature_list\n                    | method SEMI feature_listattribute : ID COLON TYPE\n                 | ID COLON TYPE ASSIGN exprmethod : ID OPAR CPAR COLON TYPE OBRACE expr CBRACE\n              | ID OPAR param_list CPAR COLON TYPE OBRACE expr CBRACEparam_list : ID COLON TYPE\n                  | ID COLON TYPE COMA param_listexpr : ID ASSIGN expr\n            | OBRACE block CBRACE\n            | WHILE expr LOOP expr POOL\n            | LET declaration_list IN expr\n            | CASE expr OF case_list ESAC\n            | notcompnotcomp : NOT comp\n               | compcomp : comp LESS notarith\n            | comp LESSEQUAL notarith\n            | comp EQUAL notarith\n            | arithnotarith : NOT arith\n                | aritharith : arith PLUS term\n             | arith MINUS term\n             | termterm : term TIMES factor\n            | term DIV factor\n            | factorfactor : ISVOID factor\n              | COMPLEMENT factor\n              | atomatom : ID\n            | NEW TYPE\n            | OPAR expr CPAR\n            | IF expr THEN expr ELSE expr FIatom : function_callatom : STRINGatom : TRUE\n            | FALSEatom : NUMBERblock : expr SEMI\n             | expr SEMI blockdeclaration_list : ID COLON TYPE\n                        | ID COLON TYPE ASSIGN expr\n                        | ID COLON TYPE COMA declaration_list\n                        | ID COLON TYPE ASSIGN expr COMA declaration_listcase_list : ID COLON TYPE ARROW expr SEMI\n                 | ID COLON TYPE ARROW expr SEMI case_listfunction_call : ID OPAR expr_list CPAR\n                     | atom DOT ID OPAR expr_list CPAR\n                     | atom ARROBA TYPE DOT ID OPAR expr_list CPARexpr_list : empty\n                 | list_not_emptylist_not_empty : expr\n                      | expr COMA list_not_emptyempty :'
    
_lr_action_items = {'CLASS':([0,3,21,60,],[4,4,-4,-5,]),'$end':([1,2,3,5,21,60,],[0,-1,-3,-2,-4,-5,]),'TYPE':([4,8,18,30,31,49,59,81,97,134,],[6,14,24,57,58,82,87,109,120,141,]),'OBRACE':([6,14,29,36,37,39,50,51,58,61,62,86,87,94,95,96,111,114,116,124,131,137,143,146,],[7,20,36,36,36,36,36,36,86,36,36,36,114,36,36,36,36,36,36,36,36,36,36,36,]),'INHERITS':([6,],[8,]),'CBRACE':([7,9,10,16,17,20,22,23,28,34,40,42,43,44,45,48,52,53,54,55,56,63,69,70,78,79,82,88,93,94,99,101,102,103,104,105,106,107,110,113,115,117,119,123,128,130,133,142,148,151,],[-62,15,-6,-62,-62,-62,-7,-8,33,-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,93,-21,-38,-35,-36,-39,-15,-16,-47,-23,-28,-24,-25,-29,-30,-32,-33,-40,127,-55,-48,-18,-27,138,-17,-19,-56,-41,-57,]),'ID':([7,16,17,19,20,29,36,37,38,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,80,85,86,94,95,96,98,100,111,114,116,124,125,131,132,137,143,145,146,152,],[13,13,13,25,13,34,34,34,67,34,70,70,70,34,34,34,34,70,70,70,70,70,70,70,108,25,34,34,34,34,122,70,34,34,34,34,136,34,67,34,34,67,34,122,]),'SEMI':([11,12,15,24,33,34,35,40,42,43,44,45,48,52,53,54,55,56,64,69,70,78,79,82,88,93,99,101,102,103,104,105,106,107,110,115,119,123,127,130,133,138,142,148,150,151,],[16,17,21,-9,60,-38,-10,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,94,-21,-38,-35,-36,-39,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,-27,-11,-17,-19,-12,-56,-41,152,-57,]),'COLON':([13,25,26,32,67,122,],[18,30,31,59,97,134,]),'OPAR':([13,29,34,36,37,39,41,46,47,50,51,61,62,70,71,72,73,74,75,76,77,86,94,95,96,100,108,111,114,116,124,131,136,137,143,146,],[19,50,62,50,50,50,50,50,50,50,50,50,50,62,50,50,50,50,50,50,50,50,50,50,50,50,124,50,50,50,50,50,143,50,50,50,]),'CPAR':([19,27,34,40,42,43,44,45,48,52,53,54,55,56,57,62,69,70,78,79,82,83,88,89,90,91,92,93,99,101,102,103,104,105,106,107,110,112,115,119,123,124,129,130,133,135,142,143,147,148,151,],[26,32,-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,-13,-62,-21,-38,-35,-36,-39,110,-15,115,-58,-59,-60,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-14,-55,-18,-27,-62,-61,-17,-19,142,-56,-62,151,-41,-57,]),'ASSIGN':([24,34,120,],[29,61,131,]),'WHILE':([29,36,37,39,50,51,61,62,86,94,95,96,111,114,116,124,131,137,143,146,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'LET':([29,36,37,39,50,51,61,62,86,94,95,96,111,114,116,124,131,137,143,146,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'CASE':([29,36,37,39,50,51,61,62,86,94,95,96,111,114,116,124,131,137,143,146,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'NOT':([29,36,37,39,50,51,61,62,71,72,73,86,94,95,96,111,114,116,124,131,137,143,146,],[41,41,41,41,41,41,41,41,100,100,100,41,41,41,41,41,41,41,41,41,41,41,41,]),'ISVOID':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'COMPLEMENT':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'NEW':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'IF':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'STRING':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'TRUE':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FALSE':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'NUMBER':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'DOT':([34,48,52,53,54,55,56,70,82,109,110,115,142,148,151,],[-38,80,-42,-43,-44,-45,-46,-38,-39,125,-40,-55,-56,-41,-57,]),'ARROBA':([34,48,52,53,54,55,56,70,82,110,115,142,148,151,],[-38,81,-42,-43,-44,-45,-46,-38,-39,-40,-55,-56,-41,-57,]),'TIMES':([34,44,45,48,52,53,54,55,56,70,78,79,82,104,105,106,107,110,115,142,148,151,],[-38,76,-34,-37,-42,-43,-44,-45,-46,-38,-35,-36,-39,76,76,-32,-33,-40,-55,-56,-41,-57,]),'DIV':([34,44,45,48,52,53,54,55,56,70,78,79,82,104,105,106,107,110,115,142,148,151,],[-38,77,-34,-37,-42,-43,-44,-45,-46,-38,-35,-36,-39,77,77,-32,-33,-40,-55,-56,-41,-57,]),'PLUS':([34,43,44,45,48,52,53,54,55,56,70,78,79,82,101,104,105,106,107,110,115,123,142,148,151,],[-38,74,-31,-34,-37,-42,-43,-44,-45,-46,-38,-35,-36,-39,74,-29,-30,-32,-33,-40,-55,74,-56,-41,-57,]),'MINUS':([34,43,44,45,48,52,53,54,55,56,70,78,79,82,101,104,105,106,107,110,115,123,142,148,151,],[-38,75,-31,-34,-37,-42,-43,-44,-45,-46,-38,-35,-36,-39,75,-29,-30,-32,-33,-40,-55,75,-56,-41,-57,]),'LESS':([34,42,43,44,45,48,52,53,54,55,56,69,70,78,79,82,99,101,102,103,104,105,106,107,110,115,123,142,148,151,],[-38,71,-26,-31,-34,-37,-42,-43,-44,-45,-46,71,-38,-35,-36,-39,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-27,-56,-41,-57,]),'LESSEQUAL':([34,42,43,44,45,48,52,53,54,55,56,69,70,78,79,82,99,101,102,103,104,105,106,107,110,115,123,142,148,151,],[-38,72,-26,-31,-34,-37,-42,-43,-44,-45,-46,72,-38,-35,-36,-39,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-27,-56,-41,-57,]),'EQUAL':([34,42,43,44,45,48,52,53,54,55,56,69,70,78,79,82,99,101,102,103,104,105,106,107,110,115,123,142,148,151,],[-38,73,-26,-31,-34,-37,-42,-43,-44,-45,-46,73,-38,-35,-36,-39,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-27,-56,-41,-57,]),'LOOP':([34,40,42,43,44,45,48,52,53,54,55,56,65,69,70,78,79,82,88,93,99,101,102,103,104,105,106,107,110,115,119,123,130,133,142,148,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,95,-21,-38,-35,-36,-39,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,-27,-17,-19,-56,-41,-57,]),'OF':([34,40,42,43,44,45,48,52,53,54,55,56,68,69,70,78,79,82,88,93,99,101,102,103,104,105,106,107,110,115,119,123,130,133,142,148,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,98,-21,-38,-35,-36,-39,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,-27,-17,-19,-56,-41,-57,]),'THEN':([34,40,42,43,44,45,48,52,53,54,55,56,69,70,78,79,82,84,88,93,99,101,102,103,104,105,106,107,110,115,119,123,130,133,142,148,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,-21,-38,-35,-36,-39,111,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,-27,-17,-19,-56,-41,-57,]),'COMA':([34,40,42,43,44,45,48,52,53,54,55,56,57,69,70,78,79,82,88,92,93,99,101,102,103,104,105,106,107,110,115,119,120,123,130,133,139,142,148,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,85,-21,-38,-35,-36,-39,-15,116,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,132,-27,-17,-19,145,-56,-41,-57,]),'POOL':([34,40,42,43,44,45,48,52,53,54,55,56,69,70,78,79,82,88,93,99,101,102,103,104,105,106,107,110,115,118,119,123,130,133,142,148,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,-21,-38,-35,-36,-39,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,130,-18,-27,-17,-19,-56,-41,-57,]),'ELSE':([34,40,42,43,44,45,48,52,53,54,55,56,69,70,78,79,82,88,93,99,101,102,103,104,105,106,107,110,115,119,123,126,130,133,142,148,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,-21,-38,-35,-36,-39,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,-27,137,-17,-19,-56,-41,-57,]),'IN':([34,40,42,43,44,45,48,52,53,54,55,56,66,69,70,78,79,82,88,93,99,101,102,103,104,105,106,107,110,115,119,120,123,130,133,139,140,142,148,149,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,96,-21,-38,-35,-36,-39,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,-49,-27,-17,-19,-50,-51,-56,-41,-52,-57,]),'FI':([34,40,42,43,44,45,48,52,53,54,55,56,69,70,78,79,82,88,93,99,101,102,103,104,105,106,107,110,115,119,123,130,133,142,144,148,151,],[-38,-20,-22,-26,-31,-34,-37,-42,-43,-44,-45,-46,-21,-38,-35,-36,-39,-15,-16,-23,-28,-24,-25,-29,-30,-32,-33,-40,-55,-18,-27,-17,-19,-56,148,-41,-57,]),'ESAC':([121,152,153,],[133,-53,-54,]),'ARROW':([141,],[146,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,3,],[2,5,]),'class_def':([0,3,],[3,3,]),'feature_list':([7,16,17,20,],[9,22,23,28,]),'empty':([7,16,17,20,62,124,143,],[10,10,10,10,90,90,90,]),'attribute':([7,16,17,20,],[11,11,11,11,]),'method':([7,16,17,20,],[12,12,12,12,]),'param_list':([19,85,],[27,112,]),'expr':([29,36,37,39,50,51,61,62,86,94,95,96,111,114,116,124,131,137,143,146,],[35,64,65,68,83,84,88,92,113,64,118,119,126,128,92,92,139,144,92,150,]),'notcomp':([29,36,37,39,50,51,61,62,86,94,95,96,111,114,116,124,131,137,143,146,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'comp':([29,36,37,39,41,50,51,61,62,86,94,95,96,111,114,116,124,131,137,143,146,],[42,42,42,42,69,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'arith':([29,36,37,39,41,50,51,61,62,71,72,73,86,94,95,96,100,111,114,116,124,131,137,143,146,],[43,43,43,43,43,43,43,43,43,101,101,101,43,43,43,43,123,43,43,43,43,43,43,43,43,]),'term':([29,36,37,39,41,50,51,61,62,71,72,73,74,75,86,94,95,96,100,111,114,116,124,131,137,143,146,],[44,44,44,44,44,44,44,44,44,44,44,44,104,105,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'factor':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[45,45,45,45,45,78,79,45,45,45,45,45,45,45,45,45,106,107,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'atom':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'function_call':([29,36,37,39,41,46,47,50,51,61,62,71,72,73,74,75,76,77,86,94,95,96,100,111,114,116,124,131,137,143,146,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'block':([36,94,],[63,117,]),'declaration_list':([38,132,145,],[66,140,149,]),'expr_list':([62,124,143,],[89,135,147,]),'list_not_empty':([62,116,124,143,],[91,129,91,91,]),'notarith':([71,72,73,],[99,102,103,]),'case_list':([98,152,],[121,153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','cool_grammar.py',11),
  ('class_list -> class_def class_list','class_list',2,'p_class_list','cool_grammar.py',16),
  ('class_list -> class_def','class_list',1,'p_class_list','cool_grammar.py',17),
  ('class_def -> CLASS TYPE OBRACE feature_list CBRACE SEMI','class_def',6,'p_class_def','cool_grammar.py',24),
  ('class_def -> CLASS TYPE INHERITS TYPE OBRACE feature_list CBRACE SEMI','class_def',8,'p_class_def','cool_grammar.py',25),
  ('feature_list -> empty','feature_list',1,'p_feature_list','cool_grammar.py',41),
  ('feature_list -> attribute SEMI feature_list','feature_list',3,'p_feature_list','cool_grammar.py',42),
  ('feature_list -> method SEMI feature_list','feature_list',3,'p_feature_list','cool_grammar.py',43),
  ('attribute -> ID COLON TYPE','attribute',3,'p_attribute','cool_grammar.py',51),
  ('attribute -> ID COLON TYPE ASSIGN expr','attribute',5,'p_attribute','cool_grammar.py',52),
  ('method -> ID OPAR CPAR COLON TYPE OBRACE expr CBRACE','method',8,'p_method','cool_grammar.py',60),
  ('method -> ID OPAR param_list CPAR COLON TYPE OBRACE expr CBRACE','method',9,'p_method','cool_grammar.py',61),
  ('param_list -> ID COLON TYPE','param_list',3,'p_param_list','cool_grammar.py',71),
  ('param_list -> ID COLON TYPE COMA param_list','param_list',5,'p_param_list','cool_grammar.py',72),
  ('expr -> ID ASSIGN expr','expr',3,'p_expr','cool_grammar.py',80),
  ('expr -> OBRACE block CBRACE','expr',3,'p_expr','cool_grammar.py',81),
  ('expr -> WHILE expr LOOP expr POOL','expr',5,'p_expr','cool_grammar.py',82),
  ('expr -> LET declaration_list IN expr','expr',4,'p_expr','cool_grammar.py',83),
  ('expr -> CASE expr OF case_list ESAC','expr',5,'p_expr','cool_grammar.py',84),
  ('expr -> notcomp','expr',1,'p_expr','cool_grammar.py',85),
  ('notcomp -> NOT comp','notcomp',2,'p_notcomp','cool_grammar.py',100),
  ('notcomp -> comp','notcomp',1,'p_notcomp','cool_grammar.py',101),
  ('comp -> comp LESS notarith','comp',3,'p_comp','cool_grammar.py',109),
  ('comp -> comp LESSEQUAL notarith','comp',3,'p_comp','cool_grammar.py',110),
  ('comp -> comp EQUAL notarith','comp',3,'p_comp','cool_grammar.py',111),
  ('comp -> arith','comp',1,'p_comp','cool_grammar.py',112),
  ('notarith -> NOT arith','notarith',2,'p_notarith','cool_grammar.py',126),
  ('notarith -> arith','notarith',1,'p_notarith','cool_grammar.py',127),
  ('arith -> arith PLUS term','arith',3,'p_arith','cool_grammar.py',134),
  ('arith -> arith MINUS term','arith',3,'p_arith','cool_grammar.py',135),
  ('arith -> term','arith',1,'p_arith','cool_grammar.py',136),
  ('term -> term TIMES factor','term',3,'p_term','cool_grammar.py',147),
  ('term -> term DIV factor','term',3,'p_term','cool_grammar.py',148),
  ('term -> factor','term',1,'p_term','cool_grammar.py',149),
  ('factor -> ISVOID factor','factor',2,'p_factor','cool_grammar.py',161),
  ('factor -> COMPLEMENT factor','factor',2,'p_factor','cool_grammar.py',162),
  ('factor -> atom','factor',1,'p_factor','cool_grammar.py',163),
  ('atom -> ID','atom',1,'p_atom','cool_grammar.py',175),
  ('atom -> NEW TYPE','atom',2,'p_atom','cool_grammar.py',176),
  ('atom -> OPAR expr CPAR','atom',3,'p_atom','cool_grammar.py',177),
  ('atom -> IF expr THEN expr ELSE expr FI','atom',7,'p_atom','cool_grammar.py',178),
  ('atom -> function_call','atom',1,'p_atom_funccall','cool_grammar.py',191),
  ('atom -> STRING','atom',1,'p_atom_string','cool_grammar.py',197),
  ('atom -> TRUE','atom',1,'p_atom_true','cool_grammar.py',204),
  ('atom -> FALSE','atom',1,'p_atom_true','cool_grammar.py',205),
  ('atom -> NUMBER','atom',1,'p_atom_number','cool_grammar.py',211),
  ('block -> expr SEMI','block',2,'p_block','cool_grammar.py',217),
  ('block -> expr SEMI block','block',3,'p_block','cool_grammar.py',218),
  ('declaration_list -> ID COLON TYPE','declaration_list',3,'p_declaration_list','cool_grammar.py',226),
  ('declaration_list -> ID COLON TYPE ASSIGN expr','declaration_list',5,'p_declaration_list','cool_grammar.py',227),
  ('declaration_list -> ID COLON TYPE COMA declaration_list','declaration_list',5,'p_declaration_list','cool_grammar.py',228),
  ('declaration_list -> ID COLON TYPE ASSIGN expr COMA declaration_list','declaration_list',7,'p_declaration_list','cool_grammar.py',229),
  ('case_list -> ID COLON TYPE ARROW expr SEMI','case_list',6,'p_case_list','cool_grammar.py',242),
  ('case_list -> ID COLON TYPE ARROW expr SEMI case_list','case_list',7,'p_case_list','cool_grammar.py',243),
  ('function_call -> ID OPAR expr_list CPAR','function_call',4,'p_function_call','cool_grammar.py',251),
  ('function_call -> atom DOT ID OPAR expr_list CPAR','function_call',6,'p_function_call','cool_grammar.py',252),
  ('function_call -> atom ARROBA TYPE DOT ID OPAR expr_list CPAR','function_call',8,'p_function_call','cool_grammar.py',253),
  ('expr_list -> empty','expr_list',1,'p_expr_list','cool_grammar.py',263),
  ('expr_list -> list_not_empty','expr_list',1,'p_expr_list','cool_grammar.py',264),
  ('list_not_empty -> expr','list_not_empty',1,'p_list_not_empty','cool_grammar.py',272),
  ('list_not_empty -> expr COMA list_not_empty','list_not_empty',3,'p_list_not_empty','cool_grammar.py',273),
  ('empty -> <empty>','empty',0,'p_empty','cool_grammar.py',281),
]
