.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Object_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Object_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method Object_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type A {
    method Object_abort;
    method A_type_name;
    method Object_copy;
  }
  type B {
    method Object_abort;
    method B_type_name;
    method Object_copy;
  }
  type C {
    method Object_abort;
    method C_type_name;
    method Object_copy;
  }
  type Main {
    attribute test;
    method Object_abort;
    method Main_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_abort_msg = "Program Halted!";
  data_2_type_name_Object = "Object";
  data_3_type_name_Int = "Int";
  data_4_type_name_Bool = "Bool";
  data_5_type_name_String = "String";
  data_6_type_name_IO = "IO";
  data_7_type_name_A = "A";
  data_8_type_name_B = "B";
  data_9_type_name_C = "C";
  data_10_type_name_Main = "Main";
  data_11_string = "Hello World!";

.code

  function Void_init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main_init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Object;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Int;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_Bool;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_String;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_IO;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function A_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_A;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function B_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_type_name_B;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function C_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_9_type_name_C;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_10_type_name_Main;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_out_string {
    PARAM param_str;
    PARAM param_self;


    print(str, param_str
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_length;
    LOCAL local_1;

    param_self = length(local_length)
    ARG local_length;
    local_1 = CALL Int_init;
    RETURN local_1;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_4;

    local_self_len = length(param_self)
    local_other_len = length(param_other)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_4 = CALL String_init;
    RETURN local_4;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_substr;

    local_substr = substr(param_self, param_i, param_l)
    RETURN local_substr;
  }

  function Object_init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function A_init {

    LOCAL local_self;

    local_self = ALLOCATE A;
    RETURN local_self;
  }

  function B_init {

    LOCAL local_self;

    local_self = ALLOCATE B;
    RETURN local_self;
  }

  function C_init {

    LOCAL local_self;

    local_self = ALLOCATE C;
    RETURN local_self;
  }

  function Main_init {

    LOCAL local_self;
    LOCAL local_test;

    local_self = ALLOCATE Main;
    local_test = CALL Main_test_init;
    SETATTR local_self 0 local_test;
    RETURN local_self;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;

    local_1 = LOAD data_11_string;
    ARG local_1;
    local_2 = CALL String_init;
    local_3 = TYPEOF param_self;
    ARG param_self;
    ARG local_2;
    local_0 = VCALL local_3 3;
    RETURN local_0;
  }

  function Main_test_init {

    LOCAL local_x;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;
    LOCAL local_51;
    LOCAL local_52;
    LOCAL local_53;
    LOCAL local_54;
    LOCAL local_55;
    LOCAL local_56;
    LOCAL local_57;
    LOCAL local_58;
    LOCAL local_59;
    LOCAL local_60;

    local_1 = LOAD 1;
    ARG local_1;
    local_2 = CALL Int_init;
    local_3 = GETATTR local_2 0;
    local_4 = LOAD 2;
    ARG local_4;
    local_5 = CALL Int_init;
    local_6 = GETATTR local_5 0;
    local_7 = local_3 / local_6
    local_8 = GETATTR local_7 0;
    local_9 = LOAD 3;
    ARG local_9;
    local_10 = CALL Int_init;
    local_11 = GETATTR local_10 0;
    local_12 = local_8 - local_11
    local_13 = GETATTR local_12 0;
    local_14 = LOAD 4;
    ARG local_14;
    local_15 = CALL Int_init;
    local_16 = GETATTR local_15 0;
    local_17 = local_13 + local_16
    local_18 = GETATTR local_17 0;
    local_22 = CALL A_init;
    local_23 = TYPEOF local_22;
    ARG local_22;
    local_21 = VCALL local_23 1;
    local_26 = CALL B_init;
    local_27 = TYPEOF local_26;
    ARG local_26;
    local_25 = VCALL local_27 1;
    local_29 = CALL C_init;
    local_30 = TYPEOF local_29;
    ARG local_29;
    local_28 = VCALL local_30 1;
    local_31 = TYPEOF local_25;
    ARG local_25;
    ARG local_28;
    local_24 = VCALL local_31 4;
    local_32 = TYPEOF local_21;
    ARG local_21;
    ARG local_24;
    local_20 = VCALL local_32 4;
    local_33 = TYPEOF local_20;
    ARG local_20;
    local_19 = VCALL local_33 3;
    local_34 = GETATTR local_19 0;
    local_35 = local_34 - local_18
    ARG local_35;
    local_36 = CALL Bool_init;
    local_38 = LOAD 1;
    ARG local_38;
    local_39 = CALL Int_init;
    local_40 = GETATTR local_39 0;
    local_44 = CALL A_init;
    local_45 = TYPEOF local_44;
    ARG local_44;
    local_43 = VCALL local_45 1;
    local_48 = CALL B_init;
    local_49 = TYPEOF local_48;
    ARG local_48;
    local_47 = VCALL local_49 1;
    local_51 = CALL C_init;
    local_52 = TYPEOF local_51;
    ARG local_51;
    local_50 = VCALL local_52 1;
    local_53 = TYPEOF local_47;
    ARG local_47;
    ARG local_50;
    local_46 = VCALL local_53 4;
    local_54 = TYPEOF local_43;
    ARG local_43;
    ARG local_46;
    local_42 = VCALL local_54 4;
    local_55 = TYPEOF local_42;
    ARG local_42;
    local_41 = VCALL local_55 3;
    local_56 = GETATTR local_41 0;
    local_57 = local_56 - local_40
    ARG local_57;
    local_58 = CALL Bool_init;
    local_59 = LOAD 1;
    local_37 = local_59 - local_58
    ARG local_37;
    local_60 = CALL Bool_init;
    RETURN local_60;
  }

