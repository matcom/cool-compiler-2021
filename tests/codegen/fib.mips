	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_Main: .asciiz "Main"
data_7_string: .asciiz "Enter n to find nth fibonacci number!\n"
data_8_string: .asciiz "\n"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Int_copy
Bool: .word Object_abort,Bool_type_name,Bool_copy
String: .word Object_abort,String_type_name,String_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,IO_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
Main: .word Object_abort,Main_type_name,Main_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Main_main,Main_fib

	.text
Void___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t1, 0 	#Save value 0 in register
	sw $t1, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Main___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_0_abort_msg 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t7, 4($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_1_type_name_Object 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, Object 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_2_type_name_Int 	#LOAD
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, Int 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_3_type_name_Bool 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, Bool 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_4_type_name_String 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, String 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_5_type_name_IO 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t4, IO 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_6_type_name_Main 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t4, Main 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t6, -4($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t1, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t6, -4($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 5 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 8 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $a0, 0($fp) 	#Calculate Lenght
	li $t5, 0 	#
loop1:
	lb $t7, 0($a0) 	#
	beqz $t7, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t5,  $t5, 1 	#
	j loop1 	#
exit1:
	sw $t5, -4($fp) 	#Save Calculated Length
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $a0, -4($fp) 	#Calculate Lenght
	li $t0, 0 	#
loop2:
	lb $t3, 0($a0) 	#
	beqz $t3, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t0,  $t0, 1 	#
	j loop2 	#
exit2:
	sw $t0, 4($fp) 	#Save Calculated Length
	la $a0, -8($fp) 	#Calculate Lenght
	li $t1, 0 	#
loop3:
	lb $t2, 0($a0) 	#
	beqz $t2, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t1,  $t1, 1 	#
	j loop3 	#
exit3:
	sw $t1, 8($fp) 	#Save Calculated Length
	sw $t0, 4($fp) 	#Value is string
	sw $t9, 8($fp) 	#Value is string
	add $t4,  $t0, $t9 	#Plus
	sw $t4, 12($fp) 	#Save result of plus
	lw $t9, 12($fp) 	#Concat two Strings
	li $v0, 9 	#
	move $a0, $t9 	#
	syscall 	#
	la $t0, 0($a0) 	#
	la $a1, -4($fp) 	#
	la $a2, -8($fp) 	#
loop4:
	lb $t9, 0($a1) 	#
	lb $t9, 0($a0) 	#
	beqz $a1, exit4 	#
	addi $a0,  $a0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t9, 0($a2) 	#
	lb $t9, 0($a0) 	#
	beqz $a2, exit5 	#
	addi $a0,  $a0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t0, 0($fp) 	#Save concated Strings
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -12($fp) 	#Obtain substring
	lw $t5, -8($fp) 	#
	li $v0, 9 	#
	move $a0, $t0 	#
	syscall 	#
	la $t7, 0($a0) 	#
	la $a1, -4($fp) 	#
	add $a1,  $a1, $t6 	#
loop6:
	lb $t0, 0($a1) 	#
	lb $t0, 0($a0) 	#
	beqz $t6, exit6 	#
	addi $a0,  $a0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t6,  $t6, 1 	#
	j loop6 	#
exit6:
	sw $t7, 0($fp) 	#Save substring
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, Object 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, Int 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, -4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t1) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t4, Bool 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, -4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t4) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, String 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, -4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t8) 	#Save value in attribute of index 0
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t7, Main 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 56 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_7_string 	#LOAD
	sw $t8, 4($fp) 	#Save loaded value in destination
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t3, -4($t8) 	#
	sw $t3, 12($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 12($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t9) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Typeof
	lw $t9, -4($t2) 	#
	sw $t9, 28($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 28($fp) 	#get type dir for Dynamic Call
	lw $t6, 24($t3) 	#Get method of index 6
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, -4($fp) 	#Typeof
	lw $t9, -4($t5) 	#
	sw $t9, 32($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 24($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 32($fp) 	#get type dir for Dynamic Call
	lw $t8, 32($t5) 	#Get method of index 8
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 36($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 20($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 36($fp) 	#get type dir for Dynamic Call
	lw $t7, 16($t9) 	#Get method of index 4
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t0, data_8_string 	#LOAD
	sw $t0, 44($fp) 	#Save loaded value in destination
	lw $t4, 44($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 52($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 48($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 52($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t3) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -56 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_fib:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 112 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t0, 1 	#Load Int
	sw $t0, 4($fp) 	#Save loaded value in destination
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 8($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	li $t3, 0 	#Load Int
	sw $t3, 16($fp) 	#Save loaded value in destination
	lw $t9, 16($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 20($fp) 	#Obtain value to assign
	sw $t6, 12($fp) 	#Assign value
	li $t6, 0 	#Load Int
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 32($fp) 	#Obtain value to assign
	sw $t5, 24($fp) 	#Assign value
label_while_label_0:
	lw $t1, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 40($fp) 	#Save obtained attribute in destination
	li $t6, 0 	#Load Int
	sw $t6, 44($fp) 	#Save loaded value in destination
	lw $t7, 44($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 48($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t9) 	#Load attribute in index 0
	sw $t6, 52($fp) 	#Save obtained attribute in destination
	sw $t5, 40($fp) 	#Value is string
	sw $t3, 52($fp) 	#Value is string
	sub $t4,  $t5, $t3 	#Minus
	sw $t4, 56($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 60($fp) 	#Save loaded value in destination
	sw $t8, 60($fp) 	#Value is string
	sw $t3, 56($fp) 	#Value is string
	sub $t1,  $t8, $t3 	#Minus
	sw $t1, 56($fp) 	#Save result of minus
	lw $t5, 56($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 1 	#Load Int
	sw $t4, 68($fp) 	#Save loaded value in destination
	sw $t1, 68($fp) 	#Value is string
	sw $t0, 64($fp) 	#Value is string
	sub $t2,  $t1, $t0 	#Minus
	sw $t2, 36($fp) 	#Save result of minus
	lw $t9, 36($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t7, 72($fp) 	#Mov comparisson value to register
	bgt $t5,  $t7, label_loop_label_0 	#Compare values in registers and jump to label_loop_label_0 if the second is greater than 0
	j label_pool_label_0 	#Jump to label_pool_label_0
label_loop_label_0:
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 76($fp) 	#Save obtained attribute in destination
	lw $t5, 12($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 80($fp) 	#Save obtained attribute in destination
	sw $t4, 76($fp) 	#Value is string
	sw $t8, 80($fp) 	#Value is string
	add $t0,  $t4, $t8 	#Plus
	sw $t0, 84($fp) 	#Save result of plus
	lw $t8, 84($fp) 	#Obtain value to assign
	sw $t8, 24($fp) 	#Assign value
	lw $t8, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 88($fp) 	#Save obtained attribute in destination
	li $t8, 1 	#Load Int
	sw $t8, 92($fp) 	#Save loaded value in destination
	lw $t0, 92($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 96($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 100($fp) 	#Save obtained attribute in destination
	sw $t2, 88($fp) 	#Value is string
	sw $t1, 100($fp) 	#Value is string
	sub $t7,  $t2, $t1 	#Minus
	sw $t7, 104($fp) 	#Save result of minus
	lw $t9, 104($fp) 	#Obtain value to assign
	sw $t9, -8($fp) 	#Assign value
	lw $t4, 0($fp) 	#Obtain value to assign
	sw $t4, 12($fp) 	#Assign value
	lw $t0, 24($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	j label_while_label_0 	#Jump to label_while_label_0
label_pool_label_0:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 108($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 24($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -112 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
