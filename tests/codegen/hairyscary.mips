.data
	type_Object: .word 28
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object__init_: .word function__init__at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_get_type: .word function_get_type_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 44
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO__init_: .word function__init__at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_get_type: .word function_get_type_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 40
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String__init_: .word function__init__at_String
	type_String_abort: .word function_abort_at_Object
	type_String_get_type: .word function_get_type_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 28
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int__init_: .word function__init__at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_get_type: .word function_get_type_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 28
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool__init_: .word function__init__at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_get_type: .word function_get_type_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_Foo: .word 72
	type_Foo_inherits_from: .word type_Bazz
	type_Foo_name_address: .word type_Foo_name_size
	type_Foo__init_: .word function__init__at_Foo
	type_Foo_abort: .word function_abort_at_Object
	type_Foo_get_type: .word function_get_type_at_Object
	type_Foo_type_name: .word function_type_name_at_Object
	type_Foo_copy: .word function_copy_at_Object
	type_Foo_out_string: .word function_out_string_at_IO
	type_Foo_out_int: .word function_out_int_at_IO
	type_Foo_in_string: .word function_in_string_at_IO
	type_Foo_in_int: .word function_in_int_at_IO
	type_Foo_printh: .word function_printh_at_Bazz
	type_Foo_doh: .word function_doh_at_Foo
	
	type_Bar: .word 88
	type_Bar_inherits_from: .word type_Razz
	type_Bar_name_address: .word type_Bar_name_size
	type_Bar__init_: .word function__init__at_Bar
	type_Bar_abort: .word function_abort_at_Object
	type_Bar_get_type: .word function_get_type_at_Object
	type_Bar_type_name: .word function_type_name_at_Object
	type_Bar_copy: .word function_copy_at_Object
	type_Bar_out_string: .word function_out_string_at_IO
	type_Bar_out_int: .word function_out_int_at_IO
	type_Bar_in_string: .word function_in_string_at_IO
	type_Bar_in_int: .word function_in_int_at_IO
	type_Bar_printh: .word function_printh_at_Bazz
	type_Bar_doh: .word function_doh_at_Foo
	
	type_Razz: .word 80
	type_Razz_inherits_from: .word type_Foo
	type_Razz_name_address: .word type_Razz_name_size
	type_Razz__init_: .word function__init__at_Razz
	type_Razz_abort: .word function_abort_at_Object
	type_Razz_get_type: .word function_get_type_at_Object
	type_Razz_type_name: .word function_type_name_at_Object
	type_Razz_copy: .word function_copy_at_Object
	type_Razz_out_string: .word function_out_string_at_IO
	type_Razz_out_int: .word function_out_int_at_IO
	type_Razz_in_string: .word function_in_string_at_IO
	type_Razz_in_int: .word function_in_int_at_IO
	type_Razz_printh: .word function_printh_at_Bazz
	type_Razz_doh: .word function_doh_at_Foo
	
	type_Bazz: .word 64
	type_Bazz_inherits_from: .word type_IO
	type_Bazz_name_address: .word type_Bazz_name_size
	type_Bazz__init_: .word function__init__at_Bazz
	type_Bazz_abort: .word function_abort_at_Object
	type_Bazz_get_type: .word function_get_type_at_Object
	type_Bazz_type_name: .word function_type_name_at_Object
	type_Bazz_copy: .word function_copy_at_Object
	type_Bazz_out_string: .word function_out_string_at_IO
	type_Bazz_out_int: .word function_out_int_at_IO
	type_Bazz_in_string: .word function_in_string_at_IO
	type_Bazz_in_int: .word function_in_int_at_IO
	type_Bazz_printh: .word function_printh_at_Bazz
	type_Bazz_doh: .word function_doh_at_Bazz
	
	type_Main: .word 48
	type_Main_inherits_from: .word type_Object
	type_Main_name_address: .word type_Main_name_size
	type_Main__init_: .word function__init__at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_get_type: .word function_get_type_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Foo_name_size: .word 3
	type_Foo_name: .asciiz "Foo"
	
	type_Bar_name_size: .word 3
	type_Bar_name: .asciiz "Bar"
	
	type_Razz_name_size: .word 4
	type_Razz_name: .asciiz "Razz"
	
	type_Bazz_name_size: .word 4
	type_Bazz_name: .asciiz "Bazz"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
		add_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# ADD
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		add $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		minus_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# MINUS
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sub $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		times_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# MULT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		mult $t0, $t1
		mflo $t2
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		div_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# DIV
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		div $t0, $t1
		mflo $t2
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		lessthan_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS THAN
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		slt $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		lesseq_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS EQUAL
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sle $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		xor_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# XOR
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		xor $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_Object:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function_abort_at_Object:
		addi $sp, $sp, -24
		
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		addi $t0, $zero, 65
		sb $t0, 8($v0)
		addi $t0, $zero, 98
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		addi $t0, $zero, 116
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		addi $t0, $zero, 100
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		addi $t0, $zero, 108
		sb $t0, 27($v0)
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		sb $zero, 32($v0)
		sw $v0, 20($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 8($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD type_name OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		lw $t0, 12($sp)
		addi $t0, $t0, 8
		# PRINT STRING -> internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# EXIT
		li $v0, 10
		syscall
		
		lw $v1, 24($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		addi $sp, $sp, -4
		
		# internal_0 <- NAME self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t1)
		la $t3, 4($t2)
		lw $t2, 0($t2)
		addi $t2, $t2, 9
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9
		la $t4, type_String
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		addi $t4, $v0, 0
		addi $t4, $t4, 8
		xor $t5, $t5, $t5
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3)
		sb $t6, 0($t4)
		addi $t4, $t4, 1
		addi $t3, $t3, 1
		addi $t5, $t5, 1
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		addi $sp, $sp, -4
		
		# COPY self INTO internal_0
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 4($t0)
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		addi $t3, $t3, 8
		addi $t2, $2, -8
		xor $t4, $t4, $t4
		
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0)
		sb $t5, 0($t3)
		addi $t0, $t0, 1
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_IO:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function_out_string_at_IO:
		lw $t0, 0($sp)
		addi $t0, $t0, 8
		# PRINT STRING -> x
		li $v0, 4
		move $a0, $t0
		syscall
		
		lw $v1, 4($sp)
		
		
		jr $ra
		
	function_out_int_at_IO:
		# PRINT INT
		li $v0, 1
		lw $v1, 4($sp)
		
		
		jr $ra
		
	function_in_string_at_IO:
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		xor $t0, $t0, $t0
		while_read_start:
		lb $t1, buffer_input($t0)
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9
		la $t2, type_String
		sw $t2, 0($v0)
		sw $a0, 4($v0)
		
		addi $t3, $v0, 8
		xor $t4, $t4, $t4
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4)
		sb $t5, 0($t3)
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_String:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function_length_at_String:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LENGHT: internal_0 <- self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		addi $sp, $sp, -4
		
		# internal_0 = CONCAT (self, s)
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0)
		lw $t3, 4($t1)
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3
		addi $t4, $t4, 9
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9
		add $t5, $zero, $v0
		addi $t5, $t5, 8
		la $t8, type_String
		sw $t8, 0($v0)
		
		sw $a0, 4($v0)
		xor $t6, $t6, $t6
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str1_start
		while_copy_str1_end:
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		addi $sp, $sp, -4
		
		# internal_0 <- self[i:i + l]
		lw $t0, 12($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t2, 8($sp)
		lw $t2, 8($t2)
		lw $t3, 4($sp)
		lw $t3, 8($t3)
		add $t4, $t2, $t3
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0)
		
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		add $t0, $t0, $t2
		move $t5, $v0
		add $t5, $t5, 8
		xor $t6, $t6, $t6
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_Bool:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function__init__at_Int:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	main:
		addi $sp, $sp, -16
		
		# ALLOCATE Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Main
		jal function__init__at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_3
		
		# EXIT
		li $v0, 10
		syscall
		
		
	function__init__at_Foo:
		addi $sp, $sp, -468
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 464($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 460($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 456($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 452($sp)
		
		# ALLOCATE NUll into internal_4
		sw $zero, 448($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 444($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 440($sp)
		
		
		# internal_8 <- internal_7
		lw $t0, 436($sp)
		sw $t0, 432($sp)
		
		while_start_8752275041012:
		
		# internal_6 <-- EQUAL ADDRESS(internal_8, internal_4)
		lw $t0, 432($sp)
		lw $t1, 448($sp)
		seq $t2, $t0, $t1
		lw $t0, 440($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 IS TRUE -> GO TO while_end_8752275041012
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752275041012
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 456($sp)
		sw $t0, 4($sp)
		
		lw $t0, 468($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 456($sp)
		addi $sp, $sp, 12
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 432($sp)
		lw $t0, 4($t0)
		sw $t0, 432($sp)
		
		while_end_8752275041012:
		
		
		# internal_8 <- internal_7
		lw $t0, 436($sp)
		sw $t0, 432($sp)
		
		# ARRAY OF SIZE [internal_5]
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 428($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 424($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 420($sp)
		
		foreach_start_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 436($sp)
		sw $t0, 4($sp)
		
		lw $t0, 456($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 432($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 IS TRUE -> GO TO foreach_body_8752275041012
		lw $t0, 420($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752275041012
		
		foreach_body_8752275041012:
		
		# ARRAY internal_9[internal_10] = internal_8
		lw $t0, 424($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 428($sp)
		add $t1, $t1, $t0
		lw $t0, 432($sp)
		sw $t0, 0($t1)
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 432($sp)
		lw $t0, 4($t0)
		sw $t0, 432($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 436($sp)
		sw $t0, 4($sp)
		
		lw $t0, 468($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 436($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752275041012:
		
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 416($sp)
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 412($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 404($sp)
		
		# internal_14 <- DIRECTION OF (Bazz)
		la $t0, type_Bazz
		sw $t0, 408($sp)
		
		# ARRAY internal_12[internal_15] = internal_14
		lw $t0, 404($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 416($sp)
		add $t1, $t1, $t0
		lw $t0, 408($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 396($sp)
		
		# internal_16 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 400($sp)
		
		# ARRAY internal_12[internal_17] = internal_16
		lw $t0, 396($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 416($sp)
		add $t1, $t1, $t0
		lw $t0, 400($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 388($sp)
		
		# internal_18 <- DIRECTION OF (Foo)
		la $t0, type_Foo
		sw $t0, 392($sp)
		
		# ARRAY internal_12[internal_19] = internal_18
		lw $t0, 388($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 416($sp)
		add $t1, $t1, $t0
		lw $t0, 392($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 380($sp)
		
		# internal_20 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 384($sp)
		
		# ARRAY internal_12[internal_21] = internal_20
		lw $t0, 380($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 416($sp)
		add $t1, $t1, $t0
		lw $t0, 384($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 376($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 364($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 360($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 352($sp)
		
		foreach_type_start_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 388($sp)
		sw $t0, 4($sp)
		
		lw $t0, 464($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 384($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 IS TRUE -> GO TO foreach_type_body_8752275041012
		lw $t0, 372($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752275041012
		
		foreach_type_body_8752275041012:
		
		# internal_24 = ARRAY internal_12[internal_22]
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 416($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 368($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 376($sp)
		sw $t0, 4($sp)
		
		lw $t0, 472($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 376($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 376($sp)
		sw $t0, 4($sp)
		
		lw $t0, 456($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 IS TRUE -> GO TO foreach_ancestor_body_8752275041012
		lw $t0, 360($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752275041012
		
		foreach_ancestor_body_8752275041012:
		
		# internal_27 = ARRAY internal_9[internal_25]
		lw $t0, 364($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 428($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 356($sp)
		
		# internal_28 <-- EQUAL ADDRESS(internal_24, internal_27)
		lw $t0, 368($sp)
		lw $t1, 356($sp)
		seq $t2, $t0, $t1
		lw $t0, 352($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 IS TRUE -> GO TO foreach_ancestor_end_8752275041012
		lw $t0, 352($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752275041012
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 376($sp)
		sw $t0, 4($sp)
		
		lw $t0, 468($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 376($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752275041012:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 388($sp)
		sw $t0, 4($sp)
		
		lw $t0, 468($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 388($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752275041012:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 348($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 344($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 340($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 336($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 332($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 456($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 348($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 360($sp)
		sw $t0, 4($sp)
		
		lw $t0, 464($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 344($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO foreach_min_body_8752275041012
		lw $t0, 332($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752275041012
		
		foreach_min_body_8752275041012:
		
		# ARRAY internal_13[internal_29]
		lw $t0, 348($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 412($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 340($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 352($sp)
		sw $t0, 4($sp)
		
		lw $t0, 348($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 344($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO update_min_8752275041012
		lw $t0, 332($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752275041012
		
		update_min_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 352($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 348($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 356($sp)
		sw $t0, 4($sp)
		
		lw $t0, 360($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 356($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 360($sp)
		sw $t0, 4($sp)
		
		lw $t0, 468($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 360($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752275041012:
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 328($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 324($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 320($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 316($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 308($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 456($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 320($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 IS TRUE -> GO TO error_branch_8752275041012
		lw $t0, 308($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752275041012
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 304($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 300($sp)
		
		# ARRAY internal_34[internal_41]
		lw $t0, 300($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 328($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 304($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bazz_8752275041012
		lw $t0, 304($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8752275041012
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 296($sp)
		
		# ARRAY internal_34[internal_42]
		lw $t0, 296($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 328($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 304($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Razz_8752275041012
		lw $t0, 304($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752275041012
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 292($sp)
		
		# ARRAY internal_34[internal_43]
		lw $t0, 292($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 328($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 304($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Foo_8752275041012
		lw $t0, 304($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8752275041012
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 288($sp)
		
		# ARRAY internal_34[internal_44]
		lw $t0, 288($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 328($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 304($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bar_8752275041012
		lw $t0, 304($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752275041012
		
		
		branch_Bazz_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 276($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 284($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Foo
		jal function__init__at_Foo
		lw $ra, 4($sp)
		sw $v1, 284($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 296($sp)
		sw $t0, 4($sp)
		
		lw $t0, 288($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 296($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 276($sp)
		sw $t0, 284($sp)
		
		
		branch_Razz_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 268($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 276($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 296($sp)
		sw $t0, 4($sp)
		
		lw $t0, 280($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 296($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 268($sp)
		sw $t0, 284($sp)
		
		
		branch_Foo_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 260($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 268($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 268($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 296($sp)
		sw $t0, 4($sp)
		
		lw $t0, 272($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 296($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 260($sp)
		sw $t0, 284($sp)
		
		
		branch_Bar_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 296($sp)
		sw $t0, 4($sp)
		
		lw $t0, 292($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 296($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 280($sp)
		sw $t0, 284($sp)
		
		
		error_branch_8752275041012:
		
		branch_end_8752275041012:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 296($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 248($sp)
		
		# GET METHOD printh OF Foo
		lw $t0, 468($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 248($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 244($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_55
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 236($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# ALLOCATE NUll into internal_59
		sw $zero, 228($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 220($sp)
		
		
		# internal_63 <- internal_62
		lw $t0, 216($sp)
		sw $t0, 212($sp)
		
		while_start_8752275020707:
		
		# internal_61 <-- EQUAL ADDRESS(internal_63, internal_59)
		lw $t0, 212($sp)
		lw $t1, 228($sp)
		seq $t2, $t0, $t1
		lw $t0, 220($sp)
		sw $t2, 8($t0)
		
		# IF internal_61 IS TRUE -> GO TO while_end_8752275020707
		lw $t0, 220($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752275020707
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 236($sp)
		sw $t0, 4($sp)
		
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 236($sp)
		addi $sp, $sp, 12
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 212($sp)
		lw $t0, 4($t0)
		sw $t0, 212($sp)
		
		while_end_8752275020707:
		
		
		# internal_63 <- internal_62
		lw $t0, 216($sp)
		sw $t0, 212($sp)
		
		# ARRAY OF SIZE [internal_60]
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 208($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		foreach_start_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 216($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# IF internal_66 IS TRUE -> GO TO foreach_body_8752275020707
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752275020707
		
		foreach_body_8752275020707:
		
		# ARRAY internal_64[internal_65] = internal_63
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 208($sp)
		add $t1, $t1, $t0
		lw $t0, 212($sp)
		sw $t0, 0($t1)
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 212($sp)
		lw $t0, 4($t0)
		sw $t0, 212($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 216($sp)
		sw $t0, 4($sp)
		
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 216($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752275020707:
		
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 196($sp)
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 192($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# internal_69 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 188($sp)
		
		# ARRAY internal_67[internal_70] = internal_69
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 188($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# internal_71 <- DIRECTION OF (Foo)
		la $t0, type_Foo
		sw $t0, 180($sp)
		
		# ARRAY internal_67[internal_72] = internal_71
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 180($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# internal_73 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 172($sp)
		
		# ARRAY internal_67[internal_74] = internal_73
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 172($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		foreach_type_start_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# IF internal_76 IS TRUE -> GO TO foreach_type_body_8752275020707
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752275020707
		
		foreach_type_body_8752275020707:
		
		# internal_77 = ARRAY internal_67[internal_75]
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 156($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 164($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# IF internal_79 IS TRUE -> GO TO foreach_ancestor_body_8752275020707
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752275020707
		
		foreach_ancestor_body_8752275020707:
		
		# internal_80 = ARRAY internal_64[internal_78]
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 208($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 144($sp)
		
		# internal_81 <-- EQUAL ADDRESS(internal_77, internal_80)
		lw $t0, 156($sp)
		lw $t1, 144($sp)
		seq $t2, $t0, $t1
		lw $t0, 140($sp)
		sw $t2, 8($t0)
		
		# IF internal_81 IS TRUE -> GO TO foreach_ancestor_end_8752275020707
		lw $t0, 140($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752275020707
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 164($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752275020707:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752275020707:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 136($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO foreach_min_body_8752275020707
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752275020707
		
		foreach_min_body_8752275020707:
		
		# ARRAY internal_68[internal_82]
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 192($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 128($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 140($sp)
		sw $t0, 4($sp)
		
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO update_min_8752275020707
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752275020707
		
		update_min_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		lw $t0, 140($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 136($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752275020707:
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 116($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# IF internal_91 IS TRUE -> GO TO error_branch_8752275020707
		lw $t0, 100($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752275020707
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# ARRAY internal_87[internal_93]
		lw $t0, 92($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 116($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 96($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Razz_8752275020707
		lw $t0, 96($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752275020707
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ARRAY internal_87[internal_94]
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 116($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 96($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Foo_8752275020707
		lw $t0, 96($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8752275020707
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# ARRAY internal_87[internal_95]
		lw $t0, 84($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 116($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 96($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Bar_8752275020707
		lw $t0, 96($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752275020707
		
		
		branch_Razz_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 72($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_98
		lw $t0, 72($sp)
		sw $t0, 80($sp)
		
		
		branch_Foo_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 64($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_100
		lw $t0, 64($sp)
		sw $t0, 80($sp)
		
		
		branch_Bar_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		lw $t0, 292($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- n
		lw $t0, 280($sp)
		sw $t0, 80($sp)
		
		
		error_branch_8752275020707:
		
		branch_end_8752275020707:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# GET METHOD doh OF Razz
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_104
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD doh OF Foo
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_107
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD doh OF Foo
		lw $t0, 468($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_111
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD printh OF Foo
		lw $t0, 468($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_115
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 468($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 468
		
		jr $ra
		
	function_doh_at_Foo:
		addi $sp, $sp, -12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 20($sp)
		sw $t0, 4($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 12
		
		jr $ra
		
	function__init__at_Bar:
		addi $sp, $sp, -728
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 724($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 720($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 716($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 712($sp)
		
		# ALLOCATE NUll into internal_4
		sw $zero, 708($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 704($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 700($sp)
		
		
		# internal_8 <- internal_7
		lw $t0, 696($sp)
		sw $t0, 692($sp)
		
		while_start_8752274999420:
		
		# internal_6 <-- EQUAL ADDRESS(internal_8, internal_4)
		lw $t0, 692($sp)
		lw $t1, 708($sp)
		seq $t2, $t0, $t1
		lw $t0, 700($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 IS TRUE -> GO TO while_end_8752274999420
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752274999420
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 716($sp)
		sw $t0, 4($sp)
		
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 716($sp)
		addi $sp, $sp, 12
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 692($sp)
		lw $t0, 4($t0)
		sw $t0, 692($sp)
		
		while_end_8752274999420:
		
		
		# internal_8 <- internal_7
		lw $t0, 696($sp)
		sw $t0, 692($sp)
		
		# ARRAY OF SIZE [internal_5]
		lw $t0, 704($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 688($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 684($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 680($sp)
		
		foreach_start_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 696($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 692($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 IS TRUE -> GO TO foreach_body_8752274999420
		lw $t0, 680($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752274999420
		
		foreach_body_8752274999420:
		
		# ARRAY internal_9[internal_10] = internal_8
		lw $t0, 684($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 688($sp)
		add $t1, $t1, $t0
		lw $t0, 692($sp)
		sw $t0, 0($t1)
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 692($sp)
		lw $t0, 4($t0)
		sw $t0, 692($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 696($sp)
		sw $t0, 4($sp)
		
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 696($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752274999420:
		
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 712($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 676($sp)
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 712($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 672($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 664($sp)
		
		# internal_14 <- DIRECTION OF (Bazz)
		la $t0, type_Bazz
		sw $t0, 668($sp)
		
		# ARRAY internal_12[internal_15] = internal_14
		lw $t0, 664($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 676($sp)
		add $t1, $t1, $t0
		lw $t0, 668($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 656($sp)
		
		# internal_16 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 660($sp)
		
		# ARRAY internal_12[internal_17] = internal_16
		lw $t0, 656($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 676($sp)
		add $t1, $t1, $t0
		lw $t0, 660($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 648($sp)
		
		# internal_18 <- DIRECTION OF (Foo)
		la $t0, type_Foo
		sw $t0, 652($sp)
		
		# ARRAY internal_12[internal_19] = internal_18
		lw $t0, 648($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 676($sp)
		add $t1, $t1, $t0
		lw $t0, 652($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 640($sp)
		
		# internal_20 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 644($sp)
		
		# ARRAY internal_12[internal_21] = internal_20
		lw $t0, 640($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 676($sp)
		add $t1, $t1, $t0
		lw $t0, 644($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 636($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 632($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 624($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 620($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 612($sp)
		
		foreach_type_start_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 648($sp)
		sw $t0, 4($sp)
		
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 644($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 IS TRUE -> GO TO foreach_type_body_8752274999420
		lw $t0, 632($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752274999420
		
		foreach_type_body_8752274999420:
		
		# internal_24 = ARRAY internal_12[internal_22]
		lw $t0, 636($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 676($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 628($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 636($sp)
		sw $t0, 4($sp)
		
		lw $t0, 732($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 636($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 636($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 632($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 IS TRUE -> GO TO foreach_ancestor_body_8752274999420
		lw $t0, 620($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752274999420
		
		foreach_ancestor_body_8752274999420:
		
		# internal_27 = ARRAY internal_9[internal_25]
		lw $t0, 624($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 688($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 616($sp)
		
		# internal_28 <-- EQUAL ADDRESS(internal_24, internal_27)
		lw $t0, 628($sp)
		lw $t1, 616($sp)
		seq $t2, $t0, $t1
		lw $t0, 612($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 IS TRUE -> GO TO foreach_ancestor_end_8752274999420
		lw $t0, 612($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752274999420
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 636($sp)
		sw $t0, 4($sp)
		
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 636($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752274999420:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 648($sp)
		sw $t0, 4($sp)
		
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 648($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752274999420:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 608($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 604($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 600($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 596($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 592($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 608($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 608($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 620($sp)
		sw $t0, 4($sp)
		
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 604($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO foreach_min_body_8752274999420
		lw $t0, 592($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752274999420
		
		foreach_min_body_8752274999420:
		
		# ARRAY internal_13[internal_29]
		lw $t0, 608($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 672($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 600($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 612($sp)
		sw $t0, 4($sp)
		
		lw $t0, 608($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 604($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO update_min_8752274999420
		lw $t0, 592($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752274999420
		
		update_min_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 608($sp)
		sw $t0, 4($sp)
		
		lw $t0, 612($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 608($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 616($sp)
		sw $t0, 4($sp)
		
		lw $t0, 620($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 616($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 620($sp)
		sw $t0, 4($sp)
		
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 620($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752274999420:
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 712($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 588($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 584($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 580($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 576($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 572($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 568($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 608($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 580($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 IS TRUE -> GO TO error_branch_8752274999420
		lw $t0, 568($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752274999420
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 564($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 560($sp)
		
		# ARRAY internal_34[internal_41]
		lw $t0, 560($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 588($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 564($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bazz_8752274999420
		lw $t0, 564($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8752274999420
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 556($sp)
		
		# ARRAY internal_34[internal_42]
		lw $t0, 556($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 588($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 564($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Razz_8752274999420
		lw $t0, 564($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752274999420
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 552($sp)
		
		# ARRAY internal_34[internal_43]
		lw $t0, 552($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 588($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 564($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Foo_8752274999420
		lw $t0, 564($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8752274999420
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 548($sp)
		
		# ARRAY internal_34[internal_44]
		lw $t0, 548($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 588($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 564($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bar_8752274999420
		lw $t0, 564($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752274999420
		
		
		branch_Bazz_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 536($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 544($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Foo
		jal function__init__at_Foo
		lw $ra, 4($sp)
		sw $v1, 544($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 556($sp)
		sw $t0, 4($sp)
		
		lw $t0, 548($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 556($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 536($sp)
		sw $t0, 544($sp)
		
		
		branch_Razz_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 528($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 536($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 536($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 556($sp)
		sw $t0, 4($sp)
		
		lw $t0, 540($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 556($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 528($sp)
		sw $t0, 544($sp)
		
		
		branch_Foo_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 520($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 556($sp)
		sw $t0, 4($sp)
		
		lw $t0, 532($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 556($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 520($sp)
		sw $t0, 544($sp)
		
		
		branch_Bar_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 556($sp)
		sw $t0, 4($sp)
		
		lw $t0, 552($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 556($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 540($sp)
		sw $t0, 544($sp)
		
		
		error_branch_8752274999420:
		
		branch_end_8752274999420:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 556($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 508($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 728($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 508($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 504($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_55
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 524($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 500($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 496($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 492($sp)
		
		# ALLOCATE NUll into internal_59
		sw $zero, 488($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 484($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 480($sp)
		
		
		# internal_63 <- internal_62
		lw $t0, 476($sp)
		sw $t0, 472($sp)
		
		while_start_8752275011124:
		
		# internal_61 <-- EQUAL ADDRESS(internal_63, internal_59)
		lw $t0, 472($sp)
		lw $t1, 488($sp)
		seq $t2, $t0, $t1
		lw $t0, 480($sp)
		sw $t2, 8($t0)
		
		# IF internal_61 IS TRUE -> GO TO while_end_8752275011124
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752275011124
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 496($sp)
		sw $t0, 4($sp)
		
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 496($sp)
		addi $sp, $sp, 12
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 472($sp)
		lw $t0, 4($t0)
		sw $t0, 472($sp)
		
		while_end_8752275011124:
		
		
		# internal_63 <- internal_62
		lw $t0, 476($sp)
		sw $t0, 472($sp)
		
		# ARRAY OF SIZE [internal_60]
		lw $t0, 484($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 468($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 464($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 460($sp)
		
		foreach_start_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 476($sp)
		sw $t0, 4($sp)
		
		lw $t0, 496($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 472($sp)
		addi $sp, $sp, 12
		
		# IF internal_66 IS TRUE -> GO TO foreach_body_8752275011124
		lw $t0, 460($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752275011124
		
		foreach_body_8752275011124:
		
		# ARRAY internal_64[internal_65] = internal_63
		lw $t0, 464($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 468($sp)
		add $t1, $t1, $t0
		lw $t0, 472($sp)
		sw $t0, 0($t1)
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 472($sp)
		lw $t0, 4($t0)
		sw $t0, 472($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 476($sp)
		sw $t0, 4($sp)
		
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 476($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752275011124:
		
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 492($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 456($sp)
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 492($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 452($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 444($sp)
		
		# internal_69 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 448($sp)
		
		# ARRAY internal_67[internal_70] = internal_69
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 456($sp)
		add $t1, $t1, $t0
		lw $t0, 448($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 436($sp)
		
		# internal_71 <- DIRECTION OF (Foo)
		la $t0, type_Foo
		sw $t0, 440($sp)
		
		# ARRAY internal_67[internal_72] = internal_71
		lw $t0, 436($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 456($sp)
		add $t1, $t1, $t0
		lw $t0, 440($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 428($sp)
		
		# internal_73 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 432($sp)
		
		# ARRAY internal_67[internal_74] = internal_73
		lw $t0, 428($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 456($sp)
		add $t1, $t1, $t0
		lw $t0, 432($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 424($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 420($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 412($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 408($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 400($sp)
		
		foreach_type_start_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 436($sp)
		sw $t0, 4($sp)
		
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 432($sp)
		addi $sp, $sp, 12
		
		# IF internal_76 IS TRUE -> GO TO foreach_type_body_8752275011124
		lw $t0, 420($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752275011124
		
		foreach_type_body_8752275011124:
		
		# internal_77 = ARRAY internal_67[internal_75]
		lw $t0, 424($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 456($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 416($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 424($sp)
		sw $t0, 4($sp)
		
		lw $t0, 512($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 424($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 424($sp)
		sw $t0, 4($sp)
		
		lw $t0, 496($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 420($sp)
		addi $sp, $sp, 12
		
		# IF internal_79 IS TRUE -> GO TO foreach_ancestor_body_8752275011124
		lw $t0, 408($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752275011124
		
		foreach_ancestor_body_8752275011124:
		
		# internal_80 = ARRAY internal_64[internal_78]
		lw $t0, 412($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 468($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 404($sp)
		
		# internal_81 <-- EQUAL ADDRESS(internal_77, internal_80)
		lw $t0, 416($sp)
		lw $t1, 404($sp)
		seq $t2, $t0, $t1
		lw $t0, 400($sp)
		sw $t2, 8($t0)
		
		# IF internal_81 IS TRUE -> GO TO foreach_ancestor_end_8752275011124
		lw $t0, 400($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752275011124
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 424($sp)
		sw $t0, 4($sp)
		
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 424($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752275011124:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 436($sp)
		sw $t0, 4($sp)
		
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 436($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752275011124:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 396($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 392($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 388($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 384($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 380($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 396($sp)
		sw $t0, 4($sp)
		
		lw $t0, 496($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 396($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 392($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO foreach_min_body_8752275011124
		lw $t0, 380($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752275011124
		
		foreach_min_body_8752275011124:
		
		# ARRAY internal_68[internal_82]
		lw $t0, 396($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 452($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 388($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 400($sp)
		sw $t0, 4($sp)
		
		lw $t0, 396($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 392($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO update_min_8752275011124
		lw $t0, 380($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752275011124
		
		update_min_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 396($sp)
		sw $t0, 4($sp)
		
		lw $t0, 400($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 396($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 404($sp)
		sw $t0, 4($sp)
		
		lw $t0, 408($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 404($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 408($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752275011124:
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 492($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 376($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 368($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 364($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 360($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 396($sp)
		sw $t0, 4($sp)
		
		lw $t0, 496($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		# IF internal_91 IS TRUE -> GO TO error_branch_8752275011124
		lw $t0, 360($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752275011124
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 356($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 352($sp)
		
		# ARRAY internal_87[internal_93]
		lw $t0, 352($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 376($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 356($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Razz_8752275011124
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752275011124
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 348($sp)
		
		# ARRAY internal_87[internal_94]
		lw $t0, 348($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 376($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 356($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Foo_8752275011124
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8752275011124
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 344($sp)
		
		# ARRAY internal_87[internal_95]
		lw $t0, 344($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 376($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 356($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Bar_8752275011124
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752275011124
		
		
		branch_Razz_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 332($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 340($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 340($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 352($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 352($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_98
		lw $t0, 332($sp)
		sw $t0, 340($sp)
		
		
		branch_Foo_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 324($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 332($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 332($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 352($sp)
		sw $t0, 4($sp)
		
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 352($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_100
		lw $t0, 324($sp)
		sw $t0, 340($sp)
		
		
		branch_Bar_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 352($sp)
		sw $t0, 4($sp)
		
		lw $t0, 552($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 352($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- n
		lw $t0, 540($sp)
		sw $t0, 340($sp)
		
		
		error_branch_8752275011124:
		
		branch_end_8752275011124:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 352($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		# GET METHOD doh OF Razz
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_104
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 300($sp)
		
		# GET METHOD doh OF Foo
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_107
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 328($sp)
		sw $t0, 4($sp)
		
		lw $t0, 316($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 284($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 728($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 284($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 280($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_111
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		lw $t0, 300($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 288($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 268($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 728($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 268($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 264($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_115
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 288($sp)
		sw $t0, 4($sp)
		
		lw $t0, 284($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 272($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 272($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 256($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 252($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 248($sp)
		
		# ALLOCATE NUll into internal_120
		sw $zero, 244($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 236($sp)
		
		
		# internal_124 <- internal_123
		lw $t0, 232($sp)
		sw $t0, 228($sp)
		
		while_start_8752274986656:
		
		# internal_122 <-- EQUAL ADDRESS(internal_124, internal_120)
		lw $t0, 228($sp)
		lw $t1, 244($sp)
		seq $t2, $t0, $t1
		lw $t0, 236($sp)
		sw $t2, 8($t0)
		
		# IF internal_122 IS TRUE -> GO TO while_end_8752274986656
		lw $t0, 236($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752274986656
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 252($sp)
		sw $t0, 4($sp)
		
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 252($sp)
		addi $sp, $sp, 12
		
		# internal_124 PARENT OF: internal_124
		lw $t0, 228($sp)
		lw $t0, 4($t0)
		sw $t0, 228($sp)
		
		while_end_8752274986656:
		
		
		# internal_124 <- internal_123
		lw $t0, 232($sp)
		sw $t0, 228($sp)
		
		# ARRAY OF SIZE [internal_121]
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 224($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 220($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		foreach_start_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 228($sp)
		addi $sp, $sp, 12
		
		# IF internal_127 IS TRUE -> GO TO foreach_body_8752274986656
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752274986656
		
		foreach_body_8752274986656:
		
		# ARRAY internal_125[internal_126] = internal_124
		lw $t0, 220($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 224($sp)
		add $t1, $t1, $t0
		lw $t0, 228($sp)
		sw $t0, 0($t1)
		
		# internal_124 PARENT OF: internal_124
		lw $t0, 228($sp)
		lw $t0, 4($t0)
		sw $t0, 228($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 232($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752274986656:
		
		
		# ARRAY OF SIZE [internal_119]
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 212($sp)
		
		# ARRAY OF SIZE [internal_119]
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 208($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# internal_130 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 204($sp)
		
		# ARRAY internal_128[internal_131] = internal_130
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 212($sp)
		add $t1, $t1, $t0
		lw $t0, 204($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# internal_132 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 196($sp)
		
		# ARRAY internal_128[internal_133] = internal_132
		lw $t0, 192($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 212($sp)
		add $t1, $t1, $t0
		lw $t0, 196($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		foreach_type_start_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		lw $t0, 260($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 196($sp)
		addi $sp, $sp, 12
		
		# IF internal_135 IS TRUE -> GO TO foreach_type_body_8752274986656
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752274986656
		
		foreach_type_body_8752274986656:
		
		# internal_136 = ARRAY internal_128[internal_134]
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 212($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 180($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 188($sp)
		sw $t0, 4($sp)
		
		lw $t0, 268($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 188($sp)
		sw $t0, 4($sp)
		
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 184($sp)
		addi $sp, $sp, 12
		
		# IF internal_138 IS TRUE -> GO TO foreach_ancestor_body_8752274986656
		lw $t0, 172($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752274986656
		
		foreach_ancestor_body_8752274986656:
		
		# internal_139 = ARRAY internal_125[internal_137]
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 224($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 168($sp)
		
		# internal_140 <-- EQUAL ADDRESS(internal_136, internal_139)
		lw $t0, 180($sp)
		lw $t1, 168($sp)
		seq $t2, $t0, $t1
		lw $t0, 164($sp)
		sw $t2, 8($t0)
		
		# IF internal_140 IS TRUE -> GO TO foreach_ancestor_end_8752274986656
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752274986656
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 188($sp)
		sw $t0, 4($sp)
		
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752274986656:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752274986656:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		lw $t0, 260($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 12
		
		# IF internal_145 IS TRUE -> GO TO foreach_min_body_8752274986656
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752274986656
		
		foreach_min_body_8752274986656:
		
		# ARRAY internal_129[internal_141]
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 208($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 152($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		lw $t0, 160($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 12
		
		# IF internal_145 IS TRUE -> GO TO update_min_8752274986656
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752274986656
		
		update_min_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		lw $t0, 164($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 168($sp)
		sw $t0, 4($sp)
		
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752274986656:
		
		# ARRAY OF SIZE [internal_119]
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 140($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 140($sp)
		addi $sp, $sp, 12
		
		# IF internal_149 IS TRUE -> GO TO error_branch_8752274986656
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752274986656
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# ARRAY internal_146[internal_151]
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 140($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 124($sp)
		sw $t0, 8($t2)
		
		# IF internal_150 IS TRUE -> GO TO branch_Razz_8752274986656
		lw $t0, 124($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752274986656
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# ARRAY internal_146[internal_152]
		lw $t0, 116($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 140($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 124($sp)
		sw $t0, 8($t2)
		
		# IF internal_150 IS TRUE -> GO TO branch_Bar_8752274986656
		lw $t0, 124($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752274986656
		
		
		branch_Razz_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 104($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 124($sp)
		addi $sp, $sp, 12
		
		# internal_153 <- internal_155
		lw $t0, 104($sp)
		sw $t0, 112($sp)
		
		
		branch_Bar_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		lw $t0, 740($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 552($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 124($sp)
		addi $sp, $sp, 12
		
		# internal_153 <- n
		lw $t0, 540($sp)
		sw $t0, 112($sp)
		
		
		error_branch_8752274986656:
		
		branch_end_8752274986656:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 124($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# GET METHOD doh OF Bazz
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# STATIC FUNCT CALL function_doh_at_Bazz
		jal function_doh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# GET METHOD doh OF Foo
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_162
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD doh OF Bar
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_166
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 728($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_170
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 728($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_174
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 728($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_178
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 728($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_181
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 728($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 728
		
		jr $ra
		
	function__init__at_Razz:
		addi $sp, $sp, -704
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 700($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 696($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 692($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 688($sp)
		
		# ALLOCATE NUll into internal_4
		sw $zero, 684($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 680($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 676($sp)
		
		
		# internal_8 <- internal_7
		lw $t0, 672($sp)
		sw $t0, 668($sp)
		
		while_start_8752274973302:
		
		# internal_6 <-- EQUAL ADDRESS(internal_8, internal_4)
		lw $t0, 668($sp)
		lw $t1, 684($sp)
		seq $t2, $t0, $t1
		lw $t0, 676($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 IS TRUE -> GO TO while_end_8752274973302
		lw $t0, 676($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752274973302
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 692($sp)
		sw $t0, 4($sp)
		
		lw $t0, 704($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 692($sp)
		addi $sp, $sp, 12
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 668($sp)
		lw $t0, 4($t0)
		sw $t0, 668($sp)
		
		while_end_8752274973302:
		
		
		# internal_8 <- internal_7
		lw $t0, 672($sp)
		sw $t0, 668($sp)
		
		# ARRAY OF SIZE [internal_5]
		lw $t0, 680($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 664($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 660($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 656($sp)
		
		foreach_start_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 672($sp)
		sw $t0, 4($sp)
		
		lw $t0, 692($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 668($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 IS TRUE -> GO TO foreach_body_8752274973302
		lw $t0, 656($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752274973302
		
		foreach_body_8752274973302:
		
		# ARRAY internal_9[internal_10] = internal_8
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 664($sp)
		add $t1, $t1, $t0
		lw $t0, 668($sp)
		sw $t0, 0($t1)
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 668($sp)
		lw $t0, 4($t0)
		sw $t0, 668($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 672($sp)
		sw $t0, 4($sp)
		
		lw $t0, 704($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 672($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752274973302:
		
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 688($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 652($sp)
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 688($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 648($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 640($sp)
		
		# internal_14 <- DIRECTION OF (Bazz)
		la $t0, type_Bazz
		sw $t0, 644($sp)
		
		# ARRAY internal_12[internal_15] = internal_14
		lw $t0, 640($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 652($sp)
		add $t1, $t1, $t0
		lw $t0, 644($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 632($sp)
		
		# internal_16 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 636($sp)
		
		# ARRAY internal_12[internal_17] = internal_16
		lw $t0, 632($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 652($sp)
		add $t1, $t1, $t0
		lw $t0, 636($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 624($sp)
		
		# internal_18 <- DIRECTION OF (Foo)
		la $t0, type_Foo
		sw $t0, 628($sp)
		
		# ARRAY internal_12[internal_19] = internal_18
		lw $t0, 624($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 652($sp)
		add $t1, $t1, $t0
		lw $t0, 628($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 616($sp)
		
		# internal_20 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 620($sp)
		
		# ARRAY internal_12[internal_21] = internal_20
		lw $t0, 616($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 652($sp)
		add $t1, $t1, $t0
		lw $t0, 620($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 612($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 608($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 600($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 596($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 588($sp)
		
		foreach_type_start_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 624($sp)
		sw $t0, 4($sp)
		
		lw $t0, 700($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 620($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 IS TRUE -> GO TO foreach_type_body_8752274973302
		lw $t0, 608($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752274973302
		
		foreach_type_body_8752274973302:
		
		# internal_24 = ARRAY internal_12[internal_22]
		lw $t0, 612($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 652($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 604($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 612($sp)
		sw $t0, 4($sp)
		
		lw $t0, 708($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 612($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 612($sp)
		sw $t0, 4($sp)
		
		lw $t0, 692($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 608($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 IS TRUE -> GO TO foreach_ancestor_body_8752274973302
		lw $t0, 596($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752274973302
		
		foreach_ancestor_body_8752274973302:
		
		# internal_27 = ARRAY internal_9[internal_25]
		lw $t0, 600($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 664($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 592($sp)
		
		# internal_28 <-- EQUAL ADDRESS(internal_24, internal_27)
		lw $t0, 604($sp)
		lw $t1, 592($sp)
		seq $t2, $t0, $t1
		lw $t0, 588($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 IS TRUE -> GO TO foreach_ancestor_end_8752274973302
		lw $t0, 588($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752274973302
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 612($sp)
		sw $t0, 4($sp)
		
		lw $t0, 704($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 612($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752274973302:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 624($sp)
		sw $t0, 4($sp)
		
		lw $t0, 704($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 624($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752274973302:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 584($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 580($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 576($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 572($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 568($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 584($sp)
		sw $t0, 4($sp)
		
		lw $t0, 692($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 584($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 596($sp)
		sw $t0, 4($sp)
		
		lw $t0, 700($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 580($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO foreach_min_body_8752274973302
		lw $t0, 568($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752274973302
		
		foreach_min_body_8752274973302:
		
		# ARRAY internal_13[internal_29]
		lw $t0, 584($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 648($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 576($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 588($sp)
		sw $t0, 4($sp)
		
		lw $t0, 584($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 580($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO update_min_8752274973302
		lw $t0, 568($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752274973302
		
		update_min_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 584($sp)
		sw $t0, 4($sp)
		
		lw $t0, 588($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 584($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 592($sp)
		sw $t0, 4($sp)
		
		lw $t0, 596($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 592($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 596($sp)
		sw $t0, 4($sp)
		
		lw $t0, 704($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 596($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752274973302:
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 688($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 564($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 560($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 556($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 552($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 548($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 544($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 584($sp)
		sw $t0, 4($sp)
		
		lw $t0, 692($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 556($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 IS TRUE -> GO TO error_branch_8752274973302
		lw $t0, 544($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752274973302
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 540($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 536($sp)
		
		# ARRAY internal_34[internal_41]
		lw $t0, 536($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 564($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 540($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bazz_8752274973302
		lw $t0, 540($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8752274973302
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 532($sp)
		
		# ARRAY internal_34[internal_42]
		lw $t0, 532($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 564($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 540($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Razz_8752274973302
		lw $t0, 540($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752274973302
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 528($sp)
		
		# ARRAY internal_34[internal_43]
		lw $t0, 528($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 564($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 540($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Foo_8752274973302
		lw $t0, 540($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8752274973302
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 524($sp)
		
		# ARRAY internal_34[internal_44]
		lw $t0, 524($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 564($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 540($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bar_8752274973302
		lw $t0, 540($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752274973302
		
		
		branch_Bazz_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 512($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 520($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Foo
		jal function__init__at_Foo
		lw $ra, 4($sp)
		sw $v1, 520($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 532($sp)
		sw $t0, 4($sp)
		
		lw $t0, 524($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 532($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 512($sp)
		sw $t0, 520($sp)
		
		
		branch_Razz_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 504($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 512($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 512($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 532($sp)
		sw $t0, 4($sp)
		
		lw $t0, 516($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 532($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 504($sp)
		sw $t0, 520($sp)
		
		
		branch_Foo_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 496($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 504($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 532($sp)
		sw $t0, 4($sp)
		
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 532($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 496($sp)
		sw $t0, 520($sp)
		
		
		branch_Bar_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 532($sp)
		sw $t0, 4($sp)
		
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 532($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 516($sp)
		sw $t0, 520($sp)
		
		
		error_branch_8752274973302:
		
		branch_end_8752274973302:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 532($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 484($sp)
		
		# GET METHOD printh OF Razz
		lw $t0, 704($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 484($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 480($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_55
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 500($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 476($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 472($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 468($sp)
		
		# ALLOCATE NUll into internal_59
		sw $zero, 464($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 460($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 456($sp)
		
		
		# internal_63 <- internal_62
		lw $t0, 452($sp)
		sw $t0, 448($sp)
		
		while_start_8752274973422:
		
		# internal_61 <-- EQUAL ADDRESS(internal_63, internal_59)
		lw $t0, 448($sp)
		lw $t1, 464($sp)
		seq $t2, $t0, $t1
		lw $t0, 456($sp)
		sw $t2, 8($t0)
		
		# IF internal_61 IS TRUE -> GO TO while_end_8752274973422
		lw $t0, 456($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752274973422
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 472($sp)
		sw $t0, 4($sp)
		
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 472($sp)
		addi $sp, $sp, 12
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 448($sp)
		lw $t0, 4($t0)
		sw $t0, 448($sp)
		
		while_end_8752274973422:
		
		
		# internal_63 <- internal_62
		lw $t0, 452($sp)
		sw $t0, 448($sp)
		
		# ARRAY OF SIZE [internal_60]
		lw $t0, 460($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 444($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 440($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 436($sp)
		
		foreach_start_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 452($sp)
		sw $t0, 4($sp)
		
		lw $t0, 472($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 448($sp)
		addi $sp, $sp, 12
		
		# IF internal_66 IS TRUE -> GO TO foreach_body_8752274973422
		lw $t0, 436($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752274973422
		
		foreach_body_8752274973422:
		
		# ARRAY internal_64[internal_65] = internal_63
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 444($sp)
		add $t1, $t1, $t0
		lw $t0, 448($sp)
		sw $t0, 0($t1)
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 448($sp)
		lw $t0, 4($t0)
		sw $t0, 448($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 452($sp)
		sw $t0, 4($sp)
		
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 452($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752274973422:
		
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 432($sp)
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 428($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 420($sp)
		
		# internal_69 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 424($sp)
		
		# ARRAY internal_67[internal_70] = internal_69
		lw $t0, 420($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 432($sp)
		add $t1, $t1, $t0
		lw $t0, 424($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 412($sp)
		
		# internal_71 <- DIRECTION OF (Foo)
		la $t0, type_Foo
		sw $t0, 416($sp)
		
		# ARRAY internal_67[internal_72] = internal_71
		lw $t0, 412($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 432($sp)
		add $t1, $t1, $t0
		lw $t0, 416($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 404($sp)
		
		# internal_73 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 408($sp)
		
		# ARRAY internal_67[internal_74] = internal_73
		lw $t0, 404($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 432($sp)
		add $t1, $t1, $t0
		lw $t0, 408($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 400($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 396($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 388($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 384($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 376($sp)
		
		foreach_type_start_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 412($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 408($sp)
		addi $sp, $sp, 12
		
		# IF internal_76 IS TRUE -> GO TO foreach_type_body_8752274973422
		lw $t0, 396($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752274973422
		
		foreach_type_body_8752274973422:
		
		# internal_77 = ARRAY internal_67[internal_75]
		lw $t0, 400($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 432($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 392($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 400($sp)
		sw $t0, 4($sp)
		
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 400($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 400($sp)
		sw $t0, 4($sp)
		
		lw $t0, 472($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 396($sp)
		addi $sp, $sp, 12
		
		# IF internal_79 IS TRUE -> GO TO foreach_ancestor_body_8752274973422
		lw $t0, 384($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752274973422
		
		foreach_ancestor_body_8752274973422:
		
		# internal_80 = ARRAY internal_64[internal_78]
		lw $t0, 388($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 444($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 380($sp)
		
		# internal_81 <-- EQUAL ADDRESS(internal_77, internal_80)
		lw $t0, 392($sp)
		lw $t1, 380($sp)
		seq $t2, $t0, $t1
		lw $t0, 376($sp)
		sw $t2, 8($t0)
		
		# IF internal_81 IS TRUE -> GO TO foreach_ancestor_end_8752274973422
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752274973422
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 400($sp)
		sw $t0, 4($sp)
		
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 400($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752274973422:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 412($sp)
		sw $t0, 4($sp)
		
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 412($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752274973422:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 368($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 364($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 360($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 356($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 372($sp)
		sw $t0, 4($sp)
		
		lw $t0, 472($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 384($sp)
		sw $t0, 4($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 368($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO foreach_min_body_8752274973422
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752274973422
		
		foreach_min_body_8752274973422:
		
		# ARRAY internal_68[internal_82]
		lw $t0, 372($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 428($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 364($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 376($sp)
		sw $t0, 4($sp)
		
		lw $t0, 372($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 368($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO update_min_8752274973422
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752274973422
		
		update_min_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 372($sp)
		sw $t0, 4($sp)
		
		lw $t0, 376($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 380($sp)
		sw $t0, 4($sp)
		
		lw $t0, 384($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 380($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 384($sp)
		sw $t0, 4($sp)
		
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 384($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752274973422:
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 352($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 348($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 344($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 340($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 336($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 372($sp)
		sw $t0, 4($sp)
		
		lw $t0, 472($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 348($sp)
		addi $sp, $sp, 12
		
		# IF internal_91 IS TRUE -> GO TO error_branch_8752274973422
		lw $t0, 336($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752274973422
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 332($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 328($sp)
		
		# ARRAY internal_87[internal_93]
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 352($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 332($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Razz_8752274973422
		lw $t0, 332($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752274973422
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 324($sp)
		
		# ARRAY internal_87[internal_94]
		lw $t0, 324($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 352($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 332($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Foo_8752274973422
		lw $t0, 332($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8752274973422
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 320($sp)
		
		# ARRAY internal_87[internal_95]
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 352($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 332($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Bar_8752274973422
		lw $t0, 332($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752274973422
		
		
		branch_Razz_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 308($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 316($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 316($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 328($sp)
		sw $t0, 4($sp)
		
		lw $t0, 320($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 328($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_98
		lw $t0, 308($sp)
		sw $t0, 316($sp)
		
		
		branch_Foo_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 300($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 308($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 308($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 328($sp)
		sw $t0, 4($sp)
		
		lw $t0, 312($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 328($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_100
		lw $t0, 300($sp)
		sw $t0, 316($sp)
		
		
		branch_Bar_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 328($sp)
		sw $t0, 4($sp)
		
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 328($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- n
		lw $t0, 516($sp)
		sw $t0, 316($sp)
		
		
		error_branch_8752274973422:
		
		branch_end_8752274973422:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 288($sp)
		
		# GET METHOD doh OF Razz
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_104
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 276($sp)
		
		# GET METHOD doh OF Foo
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_107
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		lw $t0, 292($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 280($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 260($sp)
		
		# GET METHOD doh OF Razz
		lw $t0, 704($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 260($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 256($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_111
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 280($sp)
		sw $t0, 4($sp)
		
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 264($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 244($sp)
		
		# GET METHOD printh OF Razz
		lw $t0, 704($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 244($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 240($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_115
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 264($sp)
		sw $t0, 4($sp)
		
		lw $t0, 260($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 248($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 228($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# ALLOCATE NUll into internal_120
		sw $zero, 220($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		
		# internal_124 <- internal_123
		lw $t0, 208($sp)
		sw $t0, 204($sp)
		
		while_start_8752274956641:
		
		# internal_122 <-- EQUAL ADDRESS(internal_124, internal_120)
		lw $t0, 204($sp)
		lw $t1, 220($sp)
		seq $t2, $t0, $t1
		lw $t0, 212($sp)
		sw $t2, 8($t0)
		
		# IF internal_122 IS TRUE -> GO TO while_end_8752274956641
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752274956641
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 228($sp)
		addi $sp, $sp, 12
		
		# internal_124 PARENT OF: internal_124
		lw $t0, 204($sp)
		lw $t0, 4($t0)
		sw $t0, 204($sp)
		
		while_end_8752274956641:
		
		
		# internal_124 <- internal_123
		lw $t0, 208($sp)
		sw $t0, 204($sp)
		
		# ARRAY OF SIZE [internal_121]
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 200($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		foreach_start_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 208($sp)
		sw $t0, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 204($sp)
		addi $sp, $sp, 12
		
		# IF internal_127 IS TRUE -> GO TO foreach_body_8752274956641
		lw $t0, 192($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752274956641
		
		foreach_body_8752274956641:
		
		# ARRAY internal_125[internal_126] = internal_124
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 204($sp)
		sw $t0, 0($t1)
		
		# internal_124 PARENT OF: internal_124
		lw $t0, 204($sp)
		lw $t0, 4($t0)
		sw $t0, 204($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 208($sp)
		sw $t0, 4($sp)
		
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752274956641:
		
		
		# ARRAY OF SIZE [internal_119]
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 188($sp)
		
		# ARRAY OF SIZE [internal_119]
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 184($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# internal_130 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 180($sp)
		
		# ARRAY internal_128[internal_131] = internal_130
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 188($sp)
		add $t1, $t1, $t0
		lw $t0, 180($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# internal_132 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 172($sp)
		
		# ARRAY internal_128[internal_133] = internal_132
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 188($sp)
		add $t1, $t1, $t0
		lw $t0, 172($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		foreach_type_start_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# IF internal_135 IS TRUE -> GO TO foreach_type_body_8752274956641
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752274956641
		
		foreach_type_body_8752274956641:
		
		# internal_136 = ARRAY internal_128[internal_134]
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 188($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 156($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 164($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# IF internal_138 IS TRUE -> GO TO foreach_ancestor_body_8752274956641
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752274956641
		
		foreach_ancestor_body_8752274956641:
		
		# internal_139 = ARRAY internal_125[internal_137]
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 144($sp)
		
		# internal_140 <-- EQUAL ADDRESS(internal_136, internal_139)
		lw $t0, 156($sp)
		lw $t1, 144($sp)
		seq $t2, $t0, $t1
		lw $t0, 140($sp)
		sw $t2, 8($t0)
		
		# IF internal_140 IS TRUE -> GO TO foreach_ancestor_end_8752274956641
		lw $t0, 140($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752274956641
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 164($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752274956641:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752274956641:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 136($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# IF internal_145 IS TRUE -> GO TO foreach_min_body_8752274956641
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752274956641
		
		foreach_min_body_8752274956641:
		
		# ARRAY internal_129[internal_141]
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 184($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 128($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 140($sp)
		sw $t0, 4($sp)
		
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# IF internal_145 IS TRUE -> GO TO update_min_8752274956641
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752274956641
		
		update_min_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		lw $t0, 140($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 136($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752274956641:
		
		# ARRAY OF SIZE [internal_119]
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 116($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 12
		
		# IF internal_149 IS TRUE -> GO TO error_branch_8752274956641
		lw $t0, 104($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752274956641
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# ARRAY internal_146[internal_151]
		lw $t0, 96($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 116($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 100($sp)
		sw $t0, 8($t2)
		
		# IF internal_150 IS TRUE -> GO TO branch_Razz_8752274956641
		lw $t0, 100($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752274956641
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# ARRAY internal_146[internal_152]
		lw $t0, 92($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 116($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 100($sp)
		sw $t0, 8($t2)
		
		# IF internal_150 IS TRUE -> GO TO branch_Bar_8752274956641
		lw $t0, 100($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752274956641
		
		
		branch_Razz_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 80($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_153 <- internal_155
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		
		branch_Bar_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 528($sp)
		sw $t0, 4($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 528($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_153 <- n
		lw $t0, 516($sp)
		sw $t0, 88($sp)
		
		
		error_branch_8752274956641:
		
		branch_end_8752274956641:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# GET METHOD doh OF Bazz
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# STATIC FUNCT CALL function_doh_at_Bazz
		jal function_doh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# GET METHOD doh OF Foo
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_162
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD doh OF Bar
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_166
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD doh OF Razz
		lw $t0, 704($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_170
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD printh OF Razz
		lw $t0, 704($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_174
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 704($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 704
		
		jr $ra
		
	function__init__at_Bazz:
		addi $sp, $sp, -224
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 220($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATE NUll into internal_4
		sw $zero, 204($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		
		# internal_8 <- internal_7
		lw $t0, 192($sp)
		sw $t0, 188($sp)
		
		while_start_8752274935534:
		
		# internal_6 <-- EQUAL ADDRESS(internal_8, internal_4)
		lw $t0, 188($sp)
		lw $t1, 204($sp)
		seq $t2, $t0, $t1
		lw $t0, 196($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 IS TRUE -> GO TO while_end_8752274935534
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8752274935534
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 188($sp)
		lw $t0, 4($t0)
		sw $t0, 188($sp)
		
		while_end_8752274935534:
		
		
		# internal_8 <- internal_7
		lw $t0, 192($sp)
		sw $t0, 188($sp)
		
		# ARRAY OF SIZE [internal_5]
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 184($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		foreach_start_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 192($sp)
		sw $t0, 4($sp)
		
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 IS TRUE -> GO TO foreach_body_8752274935534
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8752274935534
		
		foreach_body_8752274935534:
		
		# ARRAY internal_9[internal_10] = internal_8
		lw $t0, 180($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 184($sp)
		add $t1, $t1, $t0
		lw $t0, 188($sp)
		sw $t0, 0($t1)
		
		# internal_8 PARENT OF: internal_8
		lw $t0, 188($sp)
		lw $t0, 4($t0)
		sw $t0, 188($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 192($sp)
		sw $t0, 4($sp)
		
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		foreach_end_8752274935534:
		
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 172($sp)
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 168($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# internal_14 <- DIRECTION OF (Bazz)
		la $t0, type_Bazz
		sw $t0, 164($sp)
		
		# ARRAY internal_12[internal_15] = internal_14
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 164($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# internal_16 <- DIRECTION OF (Razz)
		la $t0, type_Razz
		sw $t0, 156($sp)
		
		# ARRAY internal_12[internal_17] = internal_16
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 156($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# internal_18 <- DIRECTION OF (Foo)
		la $t0, type_Foo
		sw $t0, 148($sp)
		
		# ARRAY internal_12[internal_19] = internal_18
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 148($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# internal_20 <- DIRECTION OF (Bar)
		la $t0, type_Bar
		sw $t0, 140($sp)
		
		# ARRAY internal_12[internal_21] = internal_20
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 140($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		foreach_type_start_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		lw $t0, 220($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 140($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 IS TRUE -> GO TO foreach_type_body_8752274935534
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8752274935534
		
		foreach_type_body_8752274935534:
		
		# internal_24 = ARRAY internal_12[internal_22]
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 124($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 IS TRUE -> GO TO foreach_ancestor_body_8752274935534
		lw $t0, 116($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8752274935534
		
		foreach_ancestor_body_8752274935534:
		
		# internal_27 = ARRAY internal_9[internal_25]
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 184($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 112($sp)
		
		# internal_28 <-- EQUAL ADDRESS(internal_24, internal_27)
		lw $t0, 124($sp)
		lw $t1, 112($sp)
		seq $t2, $t0, $t1
		lw $t0, 108($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 IS TRUE -> GO TO foreach_ancestor_end_8752274935534
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8752274935534
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8752274935534:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8752274935534:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		lw $t0, 220($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO foreach_min_body_8752274935534
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8752274935534
		
		foreach_min_body_8752274935534:
		
		# ARRAY internal_13[internal_29]
		lw $t0, 104($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 168($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 96($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 IS TRUE -> GO TO update_min_8752274935534
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8752274935534
		
		update_min_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		update_min_end_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8752274935534:
		
		# ARRAY OF SIZE [internal_3]
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 84($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 IS TRUE -> GO TO error_branch_8752274935534
		lw $t0, 64($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8752274935534
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# ARRAY internal_34[internal_41]
		lw $t0, 56($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bazz_8752274935534
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8752274935534
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# ARRAY internal_34[internal_42]
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Razz_8752274935534
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8752274935534
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ARRAY internal_34[internal_43]
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Foo_8752274935534
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8752274935534
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# ARRAY internal_34[internal_44]
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 IS TRUE -> GO TO branch_Bar_8752274935534
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8752274935534
		
		
		branch_Bazz_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 32($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Foo
		jal function__init__at_Foo
		lw $ra, 4($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 32($sp)
		sw $t0, 40($sp)
		
		
		branch_Razz_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 24($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		
		branch_Foo_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 16($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 16($sp)
		sw $t0, 40($sp)
		
		
		branch_Bar_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 36($sp)
		sw $t0, 40($sp)
		
		
		error_branch_8752274935534:
		
		branch_end_8752274935534:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD printh OF Bazz
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_55
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 224($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 224
		
		jr $ra
		
	function_printh_at_Bazz:
		addi $sp, $sp, -16
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD out_int OF Bazz
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_2
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 16
		
		jr $ra
		
	function_doh_at_Bazz:
		addi $sp, $sp, -12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 20($sp)
		sw $t0, 4($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 12
		
		jr $ra
		
	function__init__at_Main:
		addi $sp, $sp, -16
		
		# ALLOCATE Bazz
		li $v0, 9
		lw $a0, type_Bazz
		syscall
		la $t0, type_Bazz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bazz
		jal function__init__at_Bazz
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 8($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Foo
		jal function__init__at_Foo
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 4($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Razz
		jal function__init__at_Razz
		lw $ra, 4($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 8($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Bar
		jal function__init__at_Bar
		lw $ra, 4($sp)
		sw $v1, 8($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 16($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 16
		
		jr $ra
		
	function_main_at_Main:
		addi $sp, $sp, -4
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 19
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 19
		sw $t0, 4($v0)
		addi $t0, $zero, 100
		sb $t0, 8($v0)
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 110
		sb $t0, 11($v0)
		addi $t0, $zero, 111
		sb $t0, 12($v0)
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		addi $t0, $zero, 104
		sb $t0, 14($v0)
		addi $t0, $zero, 105
		sb $t0, 15($v0)
		addi $t0, $zero, 110
		sb $t0, 16($v0)
		addi $t0, $zero, 103
		sb $t0, 17($v0)
		sb $zero, 18($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	main:
		addi $sp, $sp, -16
		
		# ALLOCATE Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Main
		jal function__init__at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_3
		
		# EXIT
		li $v0, 10
		syscall
		
		