	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_Foo: .asciiz "Foo"
data_7_type_name_Bar: .asciiz "Bar"
data_8_type_name_Razz: .asciiz "Razz"
data_9_type_name_Bazz: .asciiz "Bazz"
data_10_type_name_Main: .asciiz "Main"
data_11_sep_cat: .asciiz " ++ "
data_12_case_err: .asciiz "Case of did not match any branch!"
data_13_eol: .asciiz "\n"
data_14_under: .asciiz "_"
data_15_meth: .asciiz "doh"
data_16_meth: .asciiz "printh"
data_17_meth: .asciiz "out_int"
data_18_string: .asciiz "do nothing"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Int_copy
Bool: .word Object_abort,Bool_type_name,Bool_copy
String: .word Object_abort,String_type_name,String_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,IO_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
Foo: .word Object_abort,Foo_type_name,Foo_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Bazz_printh,Foo_doh
Bar: .word Object_abort,Bar_type_name,Bar_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Bazz_printh,Foo_doh
Razz: .word Object_abort,Razz_type_name,Razz_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Bazz_printh,Foo_doh
Bazz: .word Object_abort,Bazz_type_name,Bazz_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Bazz_printh,Bazz_doh
Main: .word Object_abort,Main_type_name,Main_copy,Main_main

	.text
Void___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t9, 0 	#Save value 0 in register
	sw $t9, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Main___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t6, data_0_abort_msg 	#LOAD
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t2, 4($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_1_type_name_Object 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, Object 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t7, data_2_type_name_Int 	#LOAD
	sw $t7, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, Int 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_3_type_name_Bool 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, Bool 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_4_type_name_String 	#LOAD
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, String 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_5_type_name_IO 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t9, IO 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Foo_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_6_type_name_Foo 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Foo_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 24 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Foo
	li $a0, 24 	#Save 24 bytes
	syscall 	#
	la $t5, Foo 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t4) 	#Save value in attribute of index 0
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 4($t2) 	#Load attribute in index 1
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 4($t4) 	#Save value in attribute of index 1
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 8($t6) 	#Load attribute in index 2
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 8($t7) 	#Save value in attribute of index 2
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 12($t6) 	#Load attribute in index 3
	sw $t9, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 12($t2) 	#Save value in attribute of index 3
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 16($t4) 	#Load attribute in index 4
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 16($t3) 	#Save value in attribute of index 4
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -24 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bar_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_7_type_name_Bar 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bar_copy:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bar
	li $a0, 40 	#Save 40 bytes
	syscall 	#
	la $t7, Bar 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t1) 	#Save value in attribute of index 0
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 4($t0) 	#Load attribute in index 1
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 4($t6) 	#Save value in attribute of index 1
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 8($t5) 	#Load attribute in index 2
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t7, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 8($t1) 	#Save value in attribute of index 2
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 12($t1) 	#Load attribute in index 3
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 12($t4) 	#Save value in attribute of index 3
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 16($t3) 	#Load attribute in index 4
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 16($t4) 	#Save value in attribute of index 4
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 20($t6) 	#Load attribute in index 5
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 20($t4) 	#Save value in attribute of index 5
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 24($t4) 	#Load attribute in index 6
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 24($t4) 	#Save value in attribute of index 6
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 28($t9) 	#Load attribute in index 7
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 28($t8) 	#Save value in attribute of index 7
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 32($t3) 	#Load attribute in index 8
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 32($t0) 	#Save value in attribute of index 8
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Razz_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_8_type_name_Razz 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Razz_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 32 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Razz
	li $a0, 32 	#Save 32 bytes
	syscall 	#
	la $t8, Razz 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t4) 	#Load attribute in index 0
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t7) 	#Save value in attribute of index 0
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 4($t7) 	#Load attribute in index 1
	sw $t8, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t8) 	#Save value in attribute of index 1
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 8($t9) 	#Load attribute in index 2
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	lw $t7, 4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 8($t5) 	#Save value in attribute of index 2
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 12($t9) 	#Load attribute in index 3
	sw $t8, 4($fp) 	#Save obtained attribute in destination
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 12($t8) 	#Save value in attribute of index 3
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 16($t1) 	#Load attribute in index 4
	sw $t8, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 16($t6) 	#Save value in attribute of index 4
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 20($t9) 	#Load attribute in index 5
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 20($t4) 	#Save value in attribute of index 5
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 24($t8) 	#Load attribute in index 6
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 24($t2) 	#Save value in attribute of index 6
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -32 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_9_type_name_Bazz 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz_copy:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bazz
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t1, Bazz 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t1) 	#Save value in attribute of index 0
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 4($t6) 	#Load attribute in index 1
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t7) 	#Save value in attribute of index 1
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 8($t1) 	#Load attribute in index 2
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 8($t1) 	#Save value in attribute of index 2
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_10_type_name_Main 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t5, Main 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t9) 	#Save value in attribute of index 0
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 4($t2) 	#Load attribute in index 1
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 4($t6) 	#Save value in attribute of index 1
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 8($t9) 	#Load attribute in index 2
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 8($t1) 	#Save value in attribute of index 2
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 12($t2) 	#Load attribute in index 3
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 12($t2) 	#Save value in attribute of index 3
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t8, -4($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t7, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t4, -8($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 5 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 8 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t0) 	#Load attribute in index 0
	sw $t4, 0($fp) 	#Save obtained attribute in destination
	la $a0, 4($fp) 	#Calculate Lenght
	li $t9, 0 	#
loop1:
	lb $t3, 0($a0) 	#
	beqz $t3, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t9,  $t9, 1 	#
	j loop1 	#
exit1:
	sw $t9, 0($fp) 	#Save Calculated Length
	lw $t6, 4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_11_sep_cat 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t8, -8($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 4($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, -4($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t5, -8($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 8($fp) 	#Save obtained attribute in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 12($fp) 	#Save obtained attribute in destination
	la $a0, 8($fp) 	#Calculate Lenght
	li $t6, 0 	#
loop2:
	lb $t1, 0($a0) 	#
	beqz $t1, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t6,  $t6, 1 	#
	j loop2 	#
exit2:
	sw $t6, 20($fp) 	#Save Calculated Length
	la $a0, 12($fp) 	#Calculate Lenght
	li $t8, 0 	#
loop3:
	lb $t7, 0($a0) 	#
	beqz $t7, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t8,  $t8, 1 	#
	j loop3 	#
exit3:
	sw $t8, 24($fp) 	#Save Calculated Length
	lw $t9, 24($fp) 	#
	lw $t1, 20($fp) 	#
	add $t7,  $t9, $t1 	#Plus
	sw $t7, 28($fp) 	#Save result of plus
	lw $t2, 28($fp) 	#Concat two Strings
	addi $t2,  $t2, 1 	#
	li $v0, 9 	#
	move $a0, $t2 	#
	syscall 	#
	la $t3, 0($v0) 	#
	la $a1, -8($fp) 	#
	la $a2, -4($fp) 	#
loop4:
	lb $t2, 0($a1) 	#
	beqz $t2, exit4 	#
	sb $t2, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t2, 0($a2) 	#
	sb $t2, 0($v0) 	#
	beqz $t2, exit5 	#
	addi $v0,  $v0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t3, 16($fp) 	#Save concated Strings
	lw $t0, 16($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -12($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t4) 	#Load attribute in index 0
	sw $t8, 0($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Obtain substring
	lw $t6, -8($fp) 	#
	li $v0, 9 	#
	move $a0, $t1 	#
	syscall 	#
	la $t4, 0($v0) 	#
	la $a1, 0($fp) 	#
	add $a1,  $a1, $t7 	#
loop6:
	lb $t1, 0($a1) 	#
	sb $t1, 0($v0) 	#
	beqz $t7, exit6 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t7,  $t7, 1 	#
	j loop6 	#
exit6:
	sw $t4, 4($fp) 	#Save substring
	lw $t3, 4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, Object 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, Int 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t4) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, Bool 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, -4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 0($t8) 	#Save value in attribute of index 0
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, String 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t8) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Foo___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 24 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Foo
	li $a0, 24 	#Save 24 bytes
	syscall 	#
	la $t8, Foo 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_h___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t9) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_g___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 8($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t2) 	#Save value in attribute of index 1
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_i___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 12($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 8($t6) 	#Save value in attribute of index 2
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Foo_a___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 16($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 12($t1) 	#Save value in attribute of index 3
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Foo_b___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 20($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 16($t2) 	#Save value in attribute of index 4
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -24 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Foo_a___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 68 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Typeof
	lw $t6, -4($t9) 	#
	sw $t6, 0($fp) 	#Save type value in destination
	la $t0, Bar 	#LOAD
	sw $t0, 4($fp) 	#Save loaded value in destination
	sw $t5, 0($fp) 	#Value is direction
	sw $t1, 4($fp) 	#Value is direction
	sub $t7,  $t5, $t1 	#Minus
	sw $t7, 8($fp) 	#Save result of minus
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t4, 8($fp) 	#Mov comparisson value to register
	bgt $t3,  $t4, label_case_branch_0 	#Compare values in registers and jump to label_case_branch_0 if the second is greater than 0
	lw $t5, -4($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 12($fp) 	#Save type value in destination
	la $t0, Razz 	#LOAD
	sw $t0, 16($fp) 	#Save loaded value in destination
	sw $t1, 12($fp) 	#Value is direction
	sw $t6, 16($fp) 	#Value is direction
	sub $t3,  $t1, $t6 	#Minus
	sw $t3, 20($fp) 	#Save result of minus
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t6, 20($fp) 	#Mov comparisson value to register
	bgt $t4,  $t6, label_case_branch_1 	#Compare values in registers and jump to label_case_branch_1 if the second is greater than 0
	lw $t1, -4($fp) 	#Typeof
	lw $t6, -4($t1) 	#
	sw $t6, 24($fp) 	#Save type value in destination
	la $t9, Foo 	#LOAD
	sw $t9, 28($fp) 	#Save loaded value in destination
	sw $t1, 24($fp) 	#Value is direction
	sw $t7, 28($fp) 	#Value is direction
	sub $t8,  $t1, $t7 	#Minus
	sw $t8, 32($fp) 	#Save result of minus
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t4, 32($fp) 	#Mov comparisson value to register
	bgt $t0,  $t4, label_case_branch_2 	#Compare values in registers and jump to label_case_branch_2 if the second is greater than 0
	la $t4, data_12_case_err 	#LOAD
	sw $t4, 36($fp) 	#Save loaded value in destination
	lw $t4, 36($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t9, 40($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
label_case_branch_0:
	lw $t4, -4($fp) 	#Obtain value to assign
	sw $t4, 48($fp) 	#Assign value
	lw $t6, 48($fp) 	#Obtain value to assign
	sw $t6, 44($fp) 	#Assign value
	j label_end_case_0 	#Jump to label_end_case_0
label_case_branch_1:
	lw $t2, -4($fp) 	#Obtain value to assign
	sw $t2, 48($fp) 	#Assign value
	jal Bar___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 56($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 56($fp) 	#Obtain value to assign
	sw $t5, 44($fp) 	#Assign value
	j label_end_case_0 	#Jump to label_end_case_0
label_case_branch_2:
	lw $t4, -4($fp) 	#Obtain value to assign
	sw $t4, 48($fp) 	#Assign value
	jal Razz___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 64($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 64($fp) 	#Obtain value to assign
	sw $t4, 44($fp) 	#Assign value
	j label_end_case_0 	#Jump to label_end_case_0
label_end_case_0:
	lw $t5, 44($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -68 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Foo_b___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 188 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 12($t0) 	#Load attribute in index 3
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Typeof
	lw $t8, -4($t2) 	#
	sw $t8, 8($fp) 	#Save type value in destination
	la $t7, data_13_eol 	#LOAD
	sw $t7, 16($fp) 	#Save loaded value in destination
	lw $t0, 16($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_14_under 	#LOAD
	sw $t4, 24($fp) 	#Save loaded value in destination
	lw $t6, 24($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_meth 	#LOAD
	sw $t6, 32($fp) 	#Save loaded value in destination
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 8($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t8) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 12($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 28($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 36($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 20($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 8($fp) 	#get type dir for Dynamic Call
	lw $t1, 32($t7) 	#Get method of index 8
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 40($fp) 	#Save obtained attribute in destination
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 4($t6) 	#Load attribute in index 1
	sw $t8, 48($fp) 	#Save obtained attribute in destination
	lw $t7, 48($fp) 	#Typeof
	lw $t8, -4($t7) 	#
	sw $t8, 52($fp) 	#Save type value in destination
	la $t0, data_13_eol 	#LOAD
	sw $t0, 60($fp) 	#Save loaded value in destination
	lw $t8, 60($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_14_under 	#LOAD
	sw $t9, 68($fp) 	#Save loaded value in destination
	lw $t9, 68($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_meth 	#LOAD
	sw $t2, 76($fp) 	#Save loaded value in destination
	lw $t9, 76($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 52($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t4) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 12($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 72($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 80($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 64($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t9, 48($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 52($fp) 	#get type dir for Dynamic Call
	lw $t0, 32($t4) 	#Get method of index 8
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, 44($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 84($fp) 	#Save obtained attribute in destination
	lw $t7, 84($fp) 	#
	lw $t3, 40($fp) 	#
	add $t2,  $t7, $t3 	#Plus
	sw $t2, 88($fp) 	#Save result of plus
	lw $t2, 88($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t2) 	#Load attribute in index 0
	sw $t9, 92($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 100($fp) 	#Save type value in destination
	la $t8, data_13_eol 	#LOAD
	sw $t8, 108($fp) 	#Save loaded value in destination
	lw $t1, 108($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_14_under 	#LOAD
	sw $t6, 116($fp) 	#Save loaded value in destination
	lw $t4, 116($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_meth 	#LOAD
	sw $t5, 124($fp) 	#Save loaded value in destination
	lw $t7, 124($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 100($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t0) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 12($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 120($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 128($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 112($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 100($fp) 	#get type dir for Dynamic Call
	lw $t1, 32($t7) 	#Get method of index 8
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 96($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 96($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 132($fp) 	#Save obtained attribute in destination
	lw $t6, 132($fp) 	#
	lw $t3, 92($fp) 	#
	add $t5,  $t6, $t3 	#Plus
	sw $t5, 136($fp) 	#Save result of plus
	lw $t8, 136($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t8) 	#Load attribute in index 0
	sw $t9, 140($fp) 	#Save obtained attribute in destination
	lw $t6, -4($fp) 	#Typeof
	lw $t5, -4($t6) 	#
	sw $t5, 148($fp) 	#Save type value in destination
	la $t6, data_13_eol 	#LOAD
	sw $t6, 156($fp) 	#Save loaded value in destination
	lw $t4, 156($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_14_under 	#LOAD
	sw $t7, 164($fp) 	#Save loaded value in destination
	lw $t4, 164($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 168($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_16_meth 	#LOAD
	sw $t2, 172($fp) 	#Save loaded value in destination
	lw $t5, 172($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 148($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t8) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 12($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 168($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 176($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 160($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 148($fp) 	#get type dir for Dynamic Call
	lw $t7, 28($t3) 	#Get method of index 7
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 144($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 144($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 180($fp) 	#Save obtained attribute in destination
	lw $t2, 180($fp) 	#
	lw $t6, 140($fp) 	#
	add $t1,  $t2, $t6 	#Plus
	sw $t1, 184($fp) 	#Save result of plus
	lw $t1, 184($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -188 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Foo_doh:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 28 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	lw $t4, 4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 8($fp) 	#Save obtained attribute in destination
	li $t9, 2 	#Load Int
	sw $t9, 12($fp) 	#Save loaded value in destination
	lw $t4, 12($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 16($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t3) 	#Load attribute in index 0
	sw $t9, 20($fp) 	#Save obtained attribute in destination
	lw $t3, 20($fp) 	#
	lw $t8, 8($fp) 	#
	add $t6,  $t3, $t8 	#Plus
	sw $t6, 24($fp) 	#Save result of plus
	lw $t3, 24($fp) 	#Obtain value to assign
	sw $t3, 4($fp) 	#Assign value
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -28 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bar___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bar
	li $a0, 40 	#Save 40 bytes
	syscall 	#
	la $t4, Bar 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_h___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t0) 	#Save value in attribute of index 0
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_g___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 4($t0) 	#Save value in attribute of index 1
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_i___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 12($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 8($t5) 	#Save value in attribute of index 2
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Foo_a___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 16($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 12($t4) 	#Save value in attribute of index 3
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Foo_b___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 20($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 16($t1) 	#Save value in attribute of index 4
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Razz_e___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 24($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 20($t7) 	#Save value in attribute of index 5
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Razz_f___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 28($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 24($t5) 	#Save value in attribute of index 6
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bar_c___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 32($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 28($t0) 	#Save value in attribute of index 7
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bar_d___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 36($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 32($t7) 	#Save value in attribute of index 8
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bar_c___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -4($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 4($fp) 	#Save type value in destination
	la $t6, data_13_eol 	#LOAD
	sw $t6, 12($fp) 	#Save loaded value in destination
	lw $t9, 12($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_14_under 	#LOAD
	sw $t0, 20($fp) 	#Save loaded value in destination
	lw $t6, 20($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_meth 	#LOAD
	sw $t7, 28($fp) 	#Save loaded value in destination
	lw $t1, 28($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t0) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 8($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 32($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 32($t1) 	#Get method of index 8
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bar_d___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Typeof
	lw $t3, -4($t9) 	#
	sw $t3, 4($fp) 	#Save type value in destination
	la $t5, data_13_eol 	#LOAD
	sw $t5, 12($fp) 	#Save loaded value in destination
	lw $t5, 12($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_14_under 	#LOAD
	sw $t8, 20($fp) 	#Save loaded value in destination
	lw $t1, 20($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_16_meth 	#LOAD
	sw $t3, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t3) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 8($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 32($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 16($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 4($fp) 	#get type dir for Dynamic Call
	lw $t1, 28($t3) 	#Get method of index 7
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Razz___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 32 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Razz
	li $a0, 32 	#Save 32 bytes
	syscall 	#
	la $t7, Razz 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_h___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t7) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_g___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 8($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 4($t4) 	#Save value in attribute of index 1
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_i___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 12($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 8($t2) 	#Save value in attribute of index 2
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Foo_a___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 16($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 12($t7) 	#Save value in attribute of index 3
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Foo_b___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 20($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 16($t8) 	#Save value in attribute of index 4
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Razz_e___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 24($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 20($t9) 	#Save value in attribute of index 5
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Razz_f___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 28($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 24($t2) 	#Save value in attribute of index 6
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -32 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Razz_e___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 48 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -4($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 0($fp) 	#Save type value in destination
	la $t4, Bar 	#LOAD
	sw $t4, 4($fp) 	#Save loaded value in destination
	sw $t4, 0($fp) 	#Value is direction
	sw $t1, 4($fp) 	#Value is direction
	sub $t2,  $t4, $t1 	#Minus
	sw $t2, 8($fp) 	#Save result of minus
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t0, 8($fp) 	#Mov comparisson value to register
	bgt $t3,  $t0, label_case_branch_3 	#Compare values in registers and jump to label_case_branch_3 if the second is greater than 0
	lw $t3, -4($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 12($fp) 	#Save type value in destination
	la $t6, Razz 	#LOAD
	sw $t6, 16($fp) 	#Save loaded value in destination
	sw $t1, 12($fp) 	#Value is direction
	sw $t7, 16($fp) 	#Value is direction
	sub $t2,  $t1, $t7 	#Minus
	sw $t2, 20($fp) 	#Save result of minus
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t8, 20($fp) 	#Mov comparisson value to register
	bgt $t3,  $t8, label_case_branch_4 	#Compare values in registers and jump to label_case_branch_4 if the second is greater than 0
	la $t1, data_12_case_err 	#LOAD
	sw $t1, 24($fp) 	#Save loaded value in destination
	lw $t5, 24($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t7, 28($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
label_case_branch_3:
	lw $t8, -4($fp) 	#Obtain value to assign
	sw $t8, 36($fp) 	#Assign value
	lw $t9, 36($fp) 	#Obtain value to assign
	sw $t9, 32($fp) 	#Assign value
	j label_end_case_1 	#Jump to label_end_case_1
label_case_branch_4:
	lw $t0, -4($fp) 	#Obtain value to assign
	sw $t0, 36($fp) 	#Assign value
	jal Bar___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 44($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 44($fp) 	#Obtain value to assign
	sw $t3, 32($fp) 	#Assign value
	j label_end_case_1 	#Jump to label_end_case_1
label_end_case_1:
	lw $t9, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -48 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Razz_f___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 208 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 12($t2) 	#Load attribute in index 3
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal type Bazz : IO {
	[attrib] h : Int;
	[attrib] g : Foo;
	[attrib] i : Object;
	[method] printh(): Int;
	[method] doh(): Int;
}
_doh 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t8) 	#Load attribute in index 0
	sw $t2, 8($fp) 	#Save obtained attribute in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 4($t1) 	#Load attribute in index 1
	sw $t3, 16($fp) 	#Save obtained attribute in destination
	lw $t1, 16($fp) 	#Typeof
	lw $t2, -4($t1) 	#
	sw $t2, 20($fp) 	#Save type value in destination
	la $t1, data_13_eol 	#LOAD
	sw $t1, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_14_under 	#LOAD
	sw $t6, 36($fp) 	#Save loaded value in destination
	lw $t6, 36($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_meth 	#LOAD
	sw $t2, 44($fp) 	#Save loaded value in destination
	lw $t4, 44($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 20($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t6) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 40($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 48($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 32($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t2, 16($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 20($fp) 	#get type dir for Dynamic Call
	lw $t7, 32($t9) 	#Get method of index 8
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 12($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 52($fp) 	#Save obtained attribute in destination
	lw $t3, 52($fp) 	#
	lw $t1, 8($fp) 	#
	add $t4,  $t3, $t1 	#Plus
	sw $t4, 56($fp) 	#Save result of plus
	lw $t9, 56($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 60($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 20($t7) 	#Load attribute in index 5
	sw $t5, 68($fp) 	#Save obtained attribute in destination
	lw $t7, 68($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 72($fp) 	#Save type value in destination
	la $t7, data_13_eol 	#LOAD
	sw $t7, 80($fp) 	#Save loaded value in destination
	lw $t2, 80($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_14_under 	#LOAD
	sw $t8, 88($fp) 	#Save loaded value in destination
	lw $t1, 88($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_meth 	#LOAD
	sw $t3, 96($fp) 	#Save loaded value in destination
	lw $t5, 96($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 72($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t3) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 92($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 100($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 84($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t7, 68($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 72($fp) 	#get type dir for Dynamic Call
	lw $t6, 32($t9) 	#Get method of index 8
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 64($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 64($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 104($fp) 	#Save obtained attribute in destination
	lw $t6, 104($fp) 	#
	lw $t3, 60($fp) 	#
	add $t8,  $t6, $t3 	#Plus
	sw $t8, 108($fp) 	#Save result of plus
	lw $t9, 108($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t9) 	#Load attribute in index 0
	sw $t8, 112($fp) 	#Save obtained attribute in destination
	lw $t4, -4($fp) 	#Typeof
	lw $t1, -4($t4) 	#
	sw $t1, 120($fp) 	#Save type value in destination
	la $t3, data_13_eol 	#LOAD
	sw $t3, 128($fp) 	#Save loaded value in destination
	lw $t8, 128($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_14_under 	#LOAD
	sw $t9, 136($fp) 	#Save loaded value in destination
	lw $t3, 136($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_meth 	#LOAD
	sw $t7, 144($fp) 	#Save loaded value in destination
	lw $t7, 144($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 120($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t0) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 140($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 148($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 132($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 120($fp) 	#get type dir for Dynamic Call
	lw $t2, 32($t8) 	#Get method of index 8
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 116($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t2, 116($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 152($fp) 	#Save obtained attribute in destination
	lw $t1, 152($fp) 	#
	lw $t7, 112($fp) 	#
	add $t6,  $t1, $t7 	#Plus
	sw $t6, 156($fp) 	#Save result of plus
	lw $t0, 156($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 160($fp) 	#Save obtained attribute in destination
	lw $t8, -4($fp) 	#Typeof
	lw $t2, -4($t8) 	#
	sw $t2, 168($fp) 	#Save type value in destination
	la $t2, data_13_eol 	#LOAD
	sw $t2, 176($fp) 	#Save loaded value in destination
	lw $t8, 176($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 180($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_14_under 	#LOAD
	sw $t7, 184($fp) 	#Save loaded value in destination
	lw $t2, 184($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_16_meth 	#LOAD
	sw $t0, 192($fp) 	#Save loaded value in destination
	lw $t5, 192($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 168($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t1) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 188($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 196($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 180($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 168($fp) 	#get type dir for Dynamic Call
	lw $t5, 28($t4) 	#Get method of index 7
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 164($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 164($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 200($fp) 	#Save obtained attribute in destination
	lw $t0, 200($fp) 	#
	lw $t9, 160($fp) 	#
	add $t4,  $t0, $t9 	#Plus
	sw $t4, 204($fp) 	#Save result of plus
	lw $t8, 204($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -208 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bazz
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t9, Bazz 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_h___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t4) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_g___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 8($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 4($t3) 	#Save value in attribute of index 1
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bazz_i___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 12($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 8($t1) 	#Save value in attribute of index 2
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz_h___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t5, 1 	#Load Int
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz_g___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 48 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 0($fp) 	#Save type value in destination
	la $t7, Foo 	#LOAD
	sw $t7, 4($fp) 	#Save loaded value in destination
	sw $t9, 0($fp) 	#Value is direction
	sw $t0, 4($fp) 	#Value is direction
	sub $t8,  $t9, $t0 	#Minus
	sw $t8, 8($fp) 	#Save result of minus
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t5, 8($fp) 	#Mov comparisson value to register
	bgt $t9,  $t5, label_case_branch_5 	#Compare values in registers and jump to label_case_branch_5 if the second is greater than 0
	lw $t8, -4($fp) 	#Typeof
	lw $t7, -4($t8) 	#
	sw $t7, 12($fp) 	#Save type value in destination
	la $t5, Bazz 	#LOAD
	sw $t5, 16($fp) 	#Save loaded value in destination
	sw $t7, 12($fp) 	#Value is direction
	sw $t1, 16($fp) 	#Value is direction
	sub $t8,  $t7, $t1 	#Minus
	sw $t8, 20($fp) 	#Save result of minus
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t7, 20($fp) 	#Mov comparisson value to register
	bgt $t5,  $t7, label_case_branch_6 	#Compare values in registers and jump to label_case_branch_6 if the second is greater than 0
	la $t5, data_12_case_err 	#LOAD
	sw $t5, 24($fp) 	#Save loaded value in destination
	lw $t2, 24($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t9, 28($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
label_case_branch_5:
	lw $t4, -4($fp) 	#Obtain value to assign
	sw $t4, 36($fp) 	#Assign value
	lw $t9, 36($fp) 	#Obtain value to assign
	sw $t9, 32($fp) 	#Assign value
	j label_end_case_2 	#Jump to label_end_case_2
label_case_branch_6:
	lw $t2, -4($fp) 	#Obtain value to assign
	sw $t2, 36($fp) 	#Assign value
	jal Bar___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 44($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 44($fp) 	#Obtain value to assign
	sw $t5, 32($fp) 	#Assign value
	j label_end_case_2 	#Jump to label_end_case_2
label_end_case_2:
	lw $t1, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -48 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz_i___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Typeof
	lw $t0, -4($t8) 	#
	sw $t0, 4($fp) 	#Save type value in destination
	la $t7, data_13_eol 	#LOAD
	sw $t7, 12($fp) 	#Save loaded value in destination
	lw $t5, 12($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_14_under 	#LOAD
	sw $t9, 20($fp) 	#Save loaded value in destination
	lw $t1, 20($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_16_meth 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t3, 28($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t2) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 8($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 32($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 4($fp) 	#get type dir for Dynamic Call
	lw $t5, 28($t9) 	#Get method of index 7
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz_printh:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 48 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t5, -4($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 8($fp) 	#Save type value in destination
	la $t5, data_13_eol 	#LOAD
	sw $t5, 16($fp) 	#Save loaded value in destination
	lw $t1, 16($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_14_under 	#LOAD
	sw $t4, 24($fp) 	#Save loaded value in destination
	lw $t7, 24($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_17_meth 	#LOAD
	sw $t6, 32($fp) 	#Save loaded value in destination
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 8($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t4) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 12($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 28($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 36($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 20($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 8($fp) 	#get type dir for Dynamic Call
	lw $t0, 16($t7) 	#Get method of index 4
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	li $t3, 0 	#Load Int
	sw $t3, 40($fp) 	#Save loaded value in destination
	lw $t5, 40($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 44($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -48 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bazz_doh:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 28 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t7) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	lw $t4, 4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t4) 	#Load attribute in index 0
	sw $t3, 8($fp) 	#Save obtained attribute in destination
	li $t9, 1 	#Load Int
	sw $t9, 12($fp) 	#Save loaded value in destination
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 16($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 20($fp) 	#Save obtained attribute in destination
	lw $t4, 20($fp) 	#
	lw $t3, 8($fp) 	#
	add $t5,  $t4, $t3 	#Plus
	sw $t5, 24($fp) 	#Save result of plus
	lw $t1, 24($fp) 	#Obtain value to assign
	sw $t1, 4($fp) 	#Assign value
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -28 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t7, Main 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_a___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t7) 	#Save value in attribute of index 0
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_b___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 8($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 4($t2) 	#Save value in attribute of index 1
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_c___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 8($t4) 	#Save value in attribute of index 2
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_d___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 16($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 12($t7) 	#Save value in attribute of index 3
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_a___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Bazz___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_b___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Foo___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_c___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Razz___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_d___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Bar___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_18_string 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
