.data
	
	################
	# DATA SECTION #
	################

	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_Foo: .word 68
	type_Foo_inherits_from: .word type_Bazz
	type_Foo_name_address: .word type_Foo_name_size
	type_Foo___init__: .word function___init___at_Foo
	type_Foo_abort: .word function_abort_at_Object
	type_Foo_type_name: .word function_type_name_at_Object
	type_Foo_copy: .word function_copy_at_Object
	type_Foo_out_string: .word function_out_string_at_IO
	type_Foo_out_int: .word function_out_int_at_IO
	type_Foo_in_string: .word function_in_string_at_IO
	type_Foo_in_int: .word function_in_int_at_IO
	type_Foo_printh: .word function_printh_at_Bazz
	type_Foo_doh: .word function_doh_at_Foo
	
	type_Bar: .word 84
	type_Bar_inherits_from: .word type_Razz
	type_Bar_name_address: .word type_Bar_name_size
	type_Bar___init__: .word function___init___at_Bar
	type_Bar_abort: .word function_abort_at_Object
	type_Bar_type_name: .word function_type_name_at_Object
	type_Bar_copy: .word function_copy_at_Object
	type_Bar_out_string: .word function_out_string_at_IO
	type_Bar_out_int: .word function_out_int_at_IO
	type_Bar_in_string: .word function_in_string_at_IO
	type_Bar_in_int: .word function_in_int_at_IO
	type_Bar_printh: .word function_printh_at_Bazz
	type_Bar_doh: .word function_doh_at_Foo
	
	type_Razz: .word 76
	type_Razz_inherits_from: .word type_Foo
	type_Razz_name_address: .word type_Razz_name_size
	type_Razz___init__: .word function___init___at_Razz
	type_Razz_abort: .word function_abort_at_Object
	type_Razz_type_name: .word function_type_name_at_Object
	type_Razz_copy: .word function_copy_at_Object
	type_Razz_out_string: .word function_out_string_at_IO
	type_Razz_out_int: .word function_out_int_at_IO
	type_Razz_in_string: .word function_in_string_at_IO
	type_Razz_in_int: .word function_in_int_at_IO
	type_Razz_printh: .word function_printh_at_Bazz
	type_Razz_doh: .word function_doh_at_Foo
	
	type_Bazz: .word 60
	type_Bazz_inherits_from: .word type_IO
	type_Bazz_name_address: .word type_Bazz_name_size
	type_Bazz___init__: .word function___init___at_Bazz
	type_Bazz_abort: .word function_abort_at_Object
	type_Bazz_type_name: .word function_type_name_at_Object
	type_Bazz_copy: .word function_copy_at_Object
	type_Bazz_out_string: .word function_out_string_at_IO
	type_Bazz_out_int: .word function_out_int_at_IO
	type_Bazz_in_string: .word function_in_string_at_IO
	type_Bazz_in_int: .word function_in_int_at_IO
	type_Bazz_printh: .word function_printh_at_Bazz
	type_Bazz_doh: .word function_doh_at_Bazz
	
	type_Main: .word 44
	type_Main_inherits_from: .word type_Object
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Foo_name_size: .word 3
	type_Foo_name: .asciiz "Foo"
	
	type_Bar_name_size: .word 3
	type_Bar_name: .asciiz "Bar"
	
	type_Razz_name_size: .word 4
	type_Razz_name: .asciiz "Razz"
	
	type_Bazz_name_size: .word 4
	type_Bazz_name: .asciiz "Bazz"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	
	################
	# TEXT SECTION #
	################

	function_add:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# ADD FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		add $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SUB FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sub $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# TIMES FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		mult $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# DIV FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		div $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# XOR FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		xor $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		slt $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS EQ FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sle $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -40
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 32($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# internal_2 <- EQUALADDRESS (a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 <- EQUALADDRESS (b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# IF internal_2 THEN GOTO a_is_type_object
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_object
		
		# internal_3 <- TYPEOF a
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 <- DIRECTION OF String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_7 <- EQUALADDRESS (internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 <- EQUALADDRESS (internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 <- EQUALADDRESS (internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_7 THEN GOTO a_is_type_int_or_bool
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_8 THEN GOTO a_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_9 THEN GOTO a_is_type_string
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_string
		
		# JUMP TO a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 <- EQUALINT (a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 <- EQUALSTRING (a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# EQUAL FUNCT
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		seq $t2, $t0, $t1
		
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		lw $v1, 36($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -28
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 24($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_1 <- EQUALADDRESS (source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 <- EQUALADDRESS (dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# IF internal_1 THEN GOTO source_is_type_object
		lw $t0, 20($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_object
		
		# internal_2 <- TYPEOF source
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_5 <- EQUALADDRESS (internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 <- EQUALADDRESS (internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_5 THEN GOTO source_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# IF internal_6 THEN GOTO source_is_type_int_or_bool
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# JUMP TO source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest <- source WHERE source IS AN INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t0)
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		sw $t2, 8($v0)
		sw $v0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest <- source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		lw $v1, 32($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -24
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		
		addi $t0, $zero, 65
		sb $t0, 8($v0)
		
		addi $t0, $zero, 98
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		
		addi $t0, $zero, 116
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 100
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		
		addi $t0, $zero, 108
		sb $t0, 27($v0)
		
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		sb $zero, 32($v0)
		
		sw $v0, 20($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 8($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD type_name OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		lw $t0, 12($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# EXIT!
		li $v0, 10
		syscall
		
		lw $v1, 24($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- NAME OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t1)
		la $t3, 4($t2)
		lw $t2, 0($t2)
		
		addi $t2, $t2, 9
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9
		
		la $t4, type_String
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		
		addi $t4, $v0, 0
		addi $t4, $t4, 8
		xor $t5, $t5, $t5
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3)
		sb $t6, 0($t4)
		addi $t4, $t4, 1
		addi $t3, $t3, 1
		addi $t5, $t5, 1
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- COPY OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 4($t0)
		
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		addi $t3, $t3, 8
		addi $t2, $2, -8
		xor $t4, $t4, $t4
		
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0)
		sb $t5, 0($t3)
		addi $t0, $t0, 1
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		lw $t0, 0($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: x
		li $v0, 4
		move $a0, $t0
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# PRINTING INT: x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0
		while_read_start:
		lb $t1, buffer_input($t0)
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9
		la $t2, type_String
		sw $t2, 0($v0)
		sw $a0, 4($v0)
		
		addi $t3, $v0, 8
		xor $t4, $t4, $t4
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4)
		sb $t5, 0($t3)
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_0 <- LENGTH (self)
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0)
		lw $t3, 4($t1)
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3
		addi $t4, $t4, 9
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9
		add $t5, $zero, $v0
		addi $t5, $t5, 8
		
		la $t8, type_String
		sw $t8, 0($v0)
		
		sw $a0, 4($v0)
		
		xor $t6, $t6, $t6
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str1_start
		while_copy_str1_end:
		
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self[i:i + l]
		lw $t0, 12($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t2, 8($sp)
		lw $t2, 8($t2)
		lw $t3, 4($sp)
		lw $t3, 8($t3)
		add $t4, $t2, $t3
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0)
		
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		add $t0, $t0, $t2
		move $t5, $v0
		add $t5, $t5, 8
		xor $t6, $t6, $t6
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Foo:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -476
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 472($sp)
		
		# SET ATTRIBUTE h OF self
		lw $t0, 476($sp)
		lw $t1, 472($sp)
		beq $t1, $zero, object_set_attribute_8739869335083
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869335083
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869335083
		j object_set_attribute_8739869335083
		int_set_attribute_8739869335083:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869335083
		bool_set_attribute_8739869335083:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869335083
		object_set_attribute_8739869335083:
		sw $t1, 8($t0)
		end_set_attribute_8739869335083:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 468($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 464($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 460($sp)
		
		# ALLOCATING NUll INTO -> internal_4
		sw $zero, 456($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 452($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 448($sp)
		
		# internal_7 <- TYPEOF self
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		sw $t0, 444($sp)
		
		# internal_8 <- internal_7
		lw $t0, 444($sp)
		sw $t0, 440($sp)
		
		while_start_8739869415196:
		
		# internal_6 <- EQUALADDRESS (internal_8, internal_4)
		lw $t0, 440($sp)
		lw $t1, 456($sp)
		seq $t2, $t0, $t1
		lw $t0, 448($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 THEN GOTO while_end_8739869415196
		lw $t0, 448($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869415196
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 464($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 464($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 440($sp)
		lw $t0, 4($t0)
		sw $t0, 440($sp)
		
		# JUMP TO while_start_8739869415196
		j while_start_8739869415196
		
		while_end_8739869415196:
		
		# internal_8 <- internal_7
		lw $t0, 444($sp)
		sw $t0, 440($sp)
		
		# INITIALIZE ARRAY [internal_5]
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 436($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 432($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 428($sp)
		
		foreach_start_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 444($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 464($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 440($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 THEN GOTO foreach_body_8739869415196
		lw $t0, 428($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869415196
		
		# JUMP TO foreach_end_8739869415196
		j foreach_end_8739869415196
		
		foreach_body_8739869415196:
		
		# ARRAY internal_9[internal_10] <- internal_8
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 436($sp)
		add $t1, $t1, $t0
		lw $t0, 440($sp)
		sw $t0, 0($t1)
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 440($sp)
		lw $t0, 4($t0)
		sw $t0, 440($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 444($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 444($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869415196
		j foreach_start_8739869415196
		
		foreach_end_8739869415196:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 460($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 424($sp)
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 460($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 420($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 412($sp)
		
		# internal_14 <- DIRECTION OF Bazz
		la $t0, type_Bazz
		sw $t0, 416($sp)
		
		# ARRAY internal_12[internal_15] <- internal_14
		lw $t0, 412($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 424($sp)
		add $t1, $t1, $t0
		lw $t0, 416($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_15] <- internal_5
		lw $t0, 412($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 420($sp)
		add $t1, $t1, $t0
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 404($sp)
		
		# internal_16 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 408($sp)
		
		# ARRAY internal_12[internal_17] <- internal_16
		lw $t0, 404($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 424($sp)
		add $t1, $t1, $t0
		lw $t0, 408($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_17] <- internal_5
		lw $t0, 404($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 420($sp)
		add $t1, $t1, $t0
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 396($sp)
		
		# internal_18 <- DIRECTION OF Foo
		la $t0, type_Foo
		sw $t0, 400($sp)
		
		# ARRAY internal_12[internal_19] <- internal_18
		lw $t0, 396($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 424($sp)
		add $t1, $t1, $t0
		lw $t0, 400($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_19] <- internal_5
		lw $t0, 396($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 420($sp)
		add $t1, $t1, $t0
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 388($sp)
		
		# internal_20 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 392($sp)
		
		# ARRAY internal_12[internal_21] <- internal_20
		lw $t0, 388($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 424($sp)
		add $t1, $t1, $t0
		lw $t0, 392($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_21] <- internal_5
		lw $t0, 388($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 420($sp)
		add $t1, $t1, $t0
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 384($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 380($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 368($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 360($sp)
		
		foreach_type_start_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 396($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 472($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 392($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 THEN GOTO foreach_type_body_8739869415196
		lw $t0, 380($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869415196
		
		# JUMP TO foreach_type_end_8739869415196
		j foreach_type_end_8739869415196
		
		foreach_type_body_8739869415196:
		
		# internal_24 <- ARRAY internal_12[internal_22]
		lw $t0, 384($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 424($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 376($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 384($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 384($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 384($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 464($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 380($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 THEN GOTO foreach_ancestor_body_8739869415196
		lw $t0, 368($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869415196
		
		# JUMP TO foreach_ancestor_end_8739869415196
		j foreach_ancestor_end_8739869415196
		
		foreach_ancestor_body_8739869415196:
		
		# internal_27 <- ARRAY internal_9[internal_25]
		lw $t0, 372($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 436($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 364($sp)
		
		# internal_28 <- EQUALADDRESS (internal_24, internal_27)
		lw $t0, 376($sp)
		lw $t1, 364($sp)
		seq $t2, $t0, $t1
		lw $t0, 360($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 THEN GOTO foreach_ancestor_end_8739869415196
		lw $t0, 360($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869415196
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 384($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 384($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869415196
		j foreach_ancestor_start_8739869415196
		
		foreach_ancestor_end_8739869415196:
		
		# ARRAY internal_13[internal_22] <- internal_25
		lw $t0, 384($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 420($sp)
		add $t1, $t1, $t0
		lw $t0, 372($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 396($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 396($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869415196
		j foreach_type_start_8739869415196
		
		foreach_type_end_8739869415196:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 356($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 352($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 348($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 344($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 340($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 356($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 464($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 356($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 368($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 472($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 352($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO foreach_min_body_8739869415196
		lw $t0, 340($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869415196
		
		# JUMP TO foreach_min_end_8739869415196
		j foreach_min_end_8739869415196
		
		foreach_min_body_8739869415196:
		
		# internal_31 <- ARRAY internal_13[internal_29]
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 420($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 348($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 360($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 356($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 352($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO update_min_8739869415196
		lw $t0, 340($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869415196
		
		# JUMP TO update_min_end_8739869415196
		j update_min_end_8739869415196
		
		update_min_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 356($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 360($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 356($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 364($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 368($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 364($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 368($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 368($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869415196
		j foreach_min_start_8739869415196
		
		foreach_min_end_8739869415196:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 460($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 336($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 332($sp)
		
		# ARRAY internal_34[internal_35] <- internal_1
		lw $t0, 332($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 328($sp)
		
		# ARRAY internal_34[internal_36] <- internal_1
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 324($sp)
		
		# ARRAY internal_34[internal_37] <- internal_1
		lw $t0, 324($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 320($sp)
		
		# ARRAY internal_34[internal_38] <- internal_1
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 316($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 356($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 464($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 328($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 THEN GOTO error_branch_8739869415196
		lw $t0, 316($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869415196
		
		# ARRAY internal_34[internal_30] <- internal_2
		lw $t0, 352($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 464($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 308($sp)
		
		# internal_40 <- ARRAY internal_34[internal_41]
		lw $t0, 308($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 312($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bazz_8739869415196
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8739869415196
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 304($sp)
		
		# internal_40 <- ARRAY internal_34[internal_42]
		lw $t0, 304($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 312($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Razz_8739869415196
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869415196
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 300($sp)
		
		# internal_40 <- ARRAY internal_34[internal_43]
		lw $t0, 300($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 312($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Foo_8739869415196
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8739869415196
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 296($sp)
		
		# internal_40 <- ARRAY internal_34[internal_44]
		lw $t0, 296($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 336($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 312($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bar_8739869415196
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869415196
		
		branch_Bazz_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 284($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 292($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 296($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 284($sp)
		sw $t0, 292($sp)
		
		# JUMP TO branch_end_8739869415196
		j branch_end_8739869415196
		
		branch_Razz_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 276($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 284($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 284($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 288($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 276($sp)
		sw $t0, 292($sp)
		
		# JUMP TO branch_end_8739869415196
		j branch_end_8739869415196
		
		branch_Foo_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 268($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 276($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 280($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 268($sp)
		sw $t0, 292($sp)
		
		# JUMP TO branch_end_8739869415196
		j branch_end_8739869415196
		
		branch_Bar_8739869415196:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 288($sp)
		sw $t0, 292($sp)
		
		# JUMP TO branch_end_8739869415196
		j branch_end_8739869415196
		
		error_branch_8739869415196:
		
		branch_end_8739869415196:
		
		# SET ATTRIBUTE g OF self
		lw $t0, 476($sp)
		lw $t1, 292($sp)
		beq $t1, $zero, object_set_attribute_8739869335107
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869335107
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869335107
		j object_set_attribute_8739869335107
		int_set_attribute_8739869335107:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869335107
		bool_set_attribute_8739869335107:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869335107
		object_set_attribute_8739869335107:
		sw $t1, 12($t0)
		end_set_attribute_8739869335107:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 256($sp)
		
		# GET METHOD printh OF Foo
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 256($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 252($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 268($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE i OF self
		lw $t0, 476($sp)
		lw $t1, 260($sp)
		beq $t1, $zero, object_set_attribute_8739869338287
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869338287
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869338287
		j object_set_attribute_8739869338287
		int_set_attribute_8739869338287:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869338287
		bool_set_attribute_8739869338287:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869338287
		object_set_attribute_8739869338287:
		sw $t1, 16($t0)
		end_set_attribute_8739869338287:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 248($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 244($sp)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# ALLOCATING NUll INTO -> internal_59
		sw $zero, 236($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 228($sp)
		
		# internal_62 <- TYPEOF self
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		sw $t0, 224($sp)
		
		# internal_63 <- internal_62
		lw $t0, 224($sp)
		sw $t0, 220($sp)
		
		while_start_8739869420511:
		
		# internal_61 <- EQUALADDRESS (internal_63, internal_59)
		lw $t0, 220($sp)
		lw $t1, 236($sp)
		seq $t2, $t0, $t1
		lw $t0, 228($sp)
		sw $t2, 8($t0)
		
		# IF internal_61 THEN GOTO while_end_8739869420511
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869420511
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 244($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 244($sp)
		addi $sp, $sp, 12
		
		# internal_63 <- ANCESTOR OF internal_63
		lw $t0, 220($sp)
		lw $t0, 4($t0)
		sw $t0, 220($sp)
		
		# JUMP TO while_start_8739869420511
		j while_start_8739869420511
		
		while_end_8739869420511:
		
		# internal_63 <- internal_62
		lw $t0, 224($sp)
		sw $t0, 220($sp)
		
		# INITIALIZE ARRAY [internal_60]
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 216($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		foreach_start_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 224($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 220($sp)
		addi $sp, $sp, 12
		
		# IF internal_66 THEN GOTO foreach_body_8739869420511
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869420511
		
		# JUMP TO foreach_end_8739869420511
		j foreach_end_8739869420511
		
		foreach_body_8739869420511:
		
		# ARRAY internal_64[internal_65] <- internal_63
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 216($sp)
		add $t1, $t1, $t0
		lw $t0, 220($sp)
		sw $t0, 0($t1)
		
		# internal_63 <- ANCESTOR OF internal_63
		lw $t0, 220($sp)
		lw $t0, 4($t0)
		sw $t0, 220($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 224($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 224($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869420511
		j foreach_start_8739869420511
		
		foreach_end_8739869420511:
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 204($sp)
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 200($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# internal_69 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 196($sp)
		
		# ARRAY internal_67[internal_70] <- internal_69
		lw $t0, 192($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 204($sp)
		add $t1, $t1, $t0
		lw $t0, 196($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_70] <- internal_60
		lw $t0, 192($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# internal_71 <- DIRECTION OF Foo
		la $t0, type_Foo
		sw $t0, 188($sp)
		
		# ARRAY internal_67[internal_72] <- internal_71
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 204($sp)
		add $t1, $t1, $t0
		lw $t0, 188($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_72] <- internal_60
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# internal_73 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 180($sp)
		
		# ARRAY internal_67[internal_74] <- internal_73
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 204($sp)
		add $t1, $t1, $t0
		lw $t0, 180($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_74] <- internal_60
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		foreach_type_start_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_75]
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 180($sp)
		addi $sp, $sp, 12
		
		# IF internal_76 THEN GOTO foreach_type_body_8739869420511
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869420511
		
		# JUMP TO foreach_type_end_8739869420511
		j foreach_type_end_8739869420511
		
		foreach_type_body_8739869420511:
		
		# internal_77 <- ARRAY internal_67[internal_75]
		lw $t0, 172($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 204($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 164($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_56]
		lw $t0, 260($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		# IF internal_79 THEN GOTO foreach_ancestor_body_8739869420511
		lw $t0, 156($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869420511
		
		# JUMP TO foreach_ancestor_end_8739869420511
		j foreach_ancestor_end_8739869420511
		
		foreach_ancestor_body_8739869420511:
		
		# internal_80 <- ARRAY internal_64[internal_78]
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 216($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 152($sp)
		
		# internal_81 <- EQUALADDRESS (internal_77, internal_80)
		lw $t0, 164($sp)
		lw $t1, 152($sp)
		seq $t2, $t0, $t1
		lw $t0, 148($sp)
		sw $t2, 8($t0)
		
		# IF internal_81 THEN GOTO foreach_ancestor_end_8739869420511
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869420511
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869420511
		j foreach_ancestor_start_8739869420511
		
		foreach_ancestor_end_8739869420511:
		
		# ARRAY internal_68[internal_75] <- internal_78
		lw $t0, 172($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_75]
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 184($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869420511
		j foreach_type_start_8739869420511
		
		foreach_type_end_8739869420511:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 156($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 THEN GOTO foreach_min_body_8739869420511
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869420511
		
		# JUMP TO foreach_min_end_8739869420511
		j foreach_min_end_8739869420511
		
		foreach_min_body_8739869420511:
		
		# internal_84 <- ARRAY internal_68[internal_82]
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 136($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 144($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 THEN GOTO update_min_8739869420511
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869420511
		
		# JUMP TO update_min_end_8739869420511
		j update_min_end_8739869420511
		
		update_min_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_83]
		lw $t0, 152($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 156($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869420511
		j foreach_min_start_8739869420511
		
		foreach_min_end_8739869420511:
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 124($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# ARRAY internal_87[internal_88] <- internal_56
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 124($sp)
		add $t1, $t1, $t0
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# ARRAY internal_87[internal_89] <- internal_56
		lw $t0, 116($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 124($sp)
		add $t1, $t1, $t0
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# ARRAY internal_87[internal_90] <- internal_56
		lw $t0, 112($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 124($sp)
		add $t1, $t1, $t0
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# IF internal_91 THEN GOTO error_branch_8739869420511
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869420511
		
		# ARRAY internal_87[internal_83] <- internal_57
		lw $t0, 140($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 124($sp)
		add $t1, $t1, $t0
		lw $t0, 244($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# internal_92 <- ARRAY internal_87[internal_93]
		lw $t0, 100($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 124($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 104($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Razz_8739869420511
		lw $t0, 104($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869420511
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# internal_92 <- ARRAY internal_87[internal_94]
		lw $t0, 96($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 124($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 104($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Foo_8739869420511
		lw $t0, 104($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8739869420511
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# internal_92 <- ARRAY internal_87[internal_95]
		lw $t0, 92($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 124($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 104($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Bar_8739869420511
		lw $t0, 104($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869420511
		
		branch_Razz_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_98]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_98]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_98
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# JUMP TO branch_end_8739869420511
		j branch_end_8739869420511
		
		branch_Foo_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 72($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_100]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_100]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_100
		lw $t0, 72($sp)
		sw $t0, 88($sp)
		
		# JUMP TO branch_end_8739869420511
		j branch_end_8739869420511
		
		branch_Bar_8739869420511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 488($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 300($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- n
		lw $t0, 288($sp)
		sw $t0, 88($sp)
		
		# JUMP TO branch_end_8739869420511
		j branch_end_8739869420511
		
		error_branch_8739869420511:
		
		branch_end_8739869420511:
		
		# SET ATTRIBUTE a OF self
		lw $t0, 476($sp)
		lw $t1, 88($sp)
		beq $t1, $zero, object_set_attribute_8739869338335
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869338335
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869338335
		j object_set_attribute_8739869338335
		int_set_attribute_8739869338335:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869338335
		bool_set_attribute_8739869338335:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869338335
		object_set_attribute_8739869338335:
		sw $t1, 20($t0)
		end_set_attribute_8739869338335:
		
		# GET ATTRIBUTE a OF self
		lw $t0, 476($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869308898
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869308898
		j object_get_attribute_8739869308898
		int_get_attribute_8739869308898:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp)
		j end_get_attribute_8739869308898
		bool_get_attribute_8739869308898:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp)
		j end_get_attribute_8739869308898
		object_get_attribute_8739869308898:
		sw $t1, 64($sp)
		end_get_attribute_8739869308898:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# GET METHOD doh OF Razz
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_102]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_105
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE g OF self
		lw $t0, 476($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869309980
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869309980
		j object_get_attribute_8739869309980
		int_get_attribute_8739869309980:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8739869309980
		bool_get_attribute_8739869309980:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8739869309980
		object_get_attribute_8739869309980:
		sw $t1, 48($sp)
		end_get_attribute_8739869309980:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD doh OF Foo
		lw $t0, 48($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_106]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_109
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_103]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_107]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD doh OF Foo
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_113
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_110]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_111]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD printh OF Foo
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 484($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_117
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_114]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_115]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE b OF self
		lw $t0, 476($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8739869308823
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869308823
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869308823
		j object_set_attribute_8739869308823
		int_set_attribute_8739869308823:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8739869308823
		bool_set_attribute_8739869308823:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8739869308823
		object_set_attribute_8739869308823:
		sw $t1, 24($t0)
		end_set_attribute_8739869308823:
		
		lw $v1, 476($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 476
		
		jr $ra
		
	function_doh_at_Foo:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -20
		
		# GET ATTRIBUTE h OF self
		lw $t0, 20($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869310181
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869310181
		j object_get_attribute_8739869310181
		int_get_attribute_8739869310181:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8739869310181
		bool_get_attribute_8739869310181:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8739869310181
		object_get_attribute_8739869310181:
		sw $t1, 12($sp)
		end_get_attribute_8739869310181:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE h OF self
		lw $t0, 20($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869310516
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869310516
		j object_get_attribute_8739869310516
		int_get_attribute_8739869310516:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp)
		j end_get_attribute_8739869310516
		bool_get_attribute_8739869310516:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp)
		j end_get_attribute_8739869310516
		object_get_attribute_8739869310516:
		sw $t1, 8($sp)
		end_get_attribute_8739869310516:
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 20($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE h OF self
		lw $t0, 20($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8739869310486
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869310486
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869310486
		j object_set_attribute_8739869310486
		int_set_attribute_8739869310486:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869310486
		bool_set_attribute_8739869310486:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869310486
		object_set_attribute_8739869310486:
		sw $t1, 8($t0)
		end_set_attribute_8739869310486:
		
		lw $v1, 16($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 20
		
		jr $ra
		
	function___init___at_Bar:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -748
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 744($sp)
		
		# SET ATTRIBUTE h OF self
		lw $t0, 748($sp)
		lw $t1, 744($sp)
		beq $t1, $zero, object_set_attribute_8739869310561
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869310561
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869310561
		j object_set_attribute_8739869310561
		int_set_attribute_8739869310561:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869310561
		bool_set_attribute_8739869310561:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869310561
		object_set_attribute_8739869310561:
		sw $t1, 8($t0)
		end_set_attribute_8739869310561:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 740($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 736($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 732($sp)
		
		# ALLOCATING NUll INTO -> internal_4
		sw $zero, 728($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 724($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 720($sp)
		
		# internal_7 <- TYPEOF self
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		sw $t0, 716($sp)
		
		# internal_8 <- internal_7
		lw $t0, 716($sp)
		sw $t0, 712($sp)
		
		while_start_8739869396592:
		
		# internal_6 <- EQUALADDRESS (internal_8, internal_4)
		lw $t0, 712($sp)
		lw $t1, 728($sp)
		seq $t2, $t0, $t1
		lw $t0, 720($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 THEN GOTO while_end_8739869396592
		lw $t0, 720($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869396592
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 736($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 748($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 736($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 712($sp)
		lw $t0, 4($t0)
		sw $t0, 712($sp)
		
		# JUMP TO while_start_8739869396592
		j while_start_8739869396592
		
		while_end_8739869396592:
		
		# internal_8 <- internal_7
		lw $t0, 716($sp)
		sw $t0, 712($sp)
		
		# INITIALIZE ARRAY [internal_5]
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 708($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 704($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 700($sp)
		
		foreach_start_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 716($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 712($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 THEN GOTO foreach_body_8739869396592
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869396592
		
		# JUMP TO foreach_end_8739869396592
		j foreach_end_8739869396592
		
		foreach_body_8739869396592:
		
		# ARRAY internal_9[internal_10] <- internal_8
		lw $t0, 704($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 708($sp)
		add $t1, $t1, $t0
		lw $t0, 712($sp)
		sw $t0, 0($t1)
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 712($sp)
		lw $t0, 4($t0)
		sw $t0, 712($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 716($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 748($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 716($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869396592
		j foreach_start_8739869396592
		
		foreach_end_8739869396592:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 732($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 696($sp)
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 732($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 692($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 684($sp)
		
		# internal_14 <- DIRECTION OF Bazz
		la $t0, type_Bazz
		sw $t0, 688($sp)
		
		# ARRAY internal_12[internal_15] <- internal_14
		lw $t0, 684($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 696($sp)
		add $t1, $t1, $t0
		lw $t0, 688($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_15] <- internal_5
		lw $t0, 684($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 692($sp)
		add $t1, $t1, $t0
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 676($sp)
		
		# internal_16 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 680($sp)
		
		# ARRAY internal_12[internal_17] <- internal_16
		lw $t0, 676($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 696($sp)
		add $t1, $t1, $t0
		lw $t0, 680($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_17] <- internal_5
		lw $t0, 676($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 692($sp)
		add $t1, $t1, $t0
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 668($sp)
		
		# internal_18 <- DIRECTION OF Foo
		la $t0, type_Foo
		sw $t0, 672($sp)
		
		# ARRAY internal_12[internal_19] <- internal_18
		lw $t0, 668($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 696($sp)
		add $t1, $t1, $t0
		lw $t0, 672($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_19] <- internal_5
		lw $t0, 668($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 692($sp)
		add $t1, $t1, $t0
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 660($sp)
		
		# internal_20 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 664($sp)
		
		# ARRAY internal_12[internal_21] <- internal_20
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 696($sp)
		add $t1, $t1, $t0
		lw $t0, 664($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_21] <- internal_5
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 692($sp)
		add $t1, $t1, $t0
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 656($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 652($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 644($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 640($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 632($sp)
		
		foreach_type_start_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 668($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 744($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 664($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 THEN GOTO foreach_type_body_8739869396592
		lw $t0, 652($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869396592
		
		# JUMP TO foreach_type_end_8739869396592
		j foreach_type_end_8739869396592
		
		foreach_type_body_8739869396592:
		
		# internal_24 <- ARRAY internal_12[internal_22]
		lw $t0, 656($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 696($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 648($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 656($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 752($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 656($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 656($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 652($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 THEN GOTO foreach_ancestor_body_8739869396592
		lw $t0, 640($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869396592
		
		# JUMP TO foreach_ancestor_end_8739869396592
		j foreach_ancestor_end_8739869396592
		
		foreach_ancestor_body_8739869396592:
		
		# internal_27 <- ARRAY internal_9[internal_25]
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 708($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 636($sp)
		
		# internal_28 <- EQUALADDRESS (internal_24, internal_27)
		lw $t0, 648($sp)
		lw $t1, 636($sp)
		seq $t2, $t0, $t1
		lw $t0, 632($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 THEN GOTO foreach_ancestor_end_8739869396592
		lw $t0, 632($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869396592
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 656($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 748($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 656($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869396592
		j foreach_ancestor_start_8739869396592
		
		foreach_ancestor_end_8739869396592:
		
		# ARRAY internal_13[internal_22] <- internal_25
		lw $t0, 656($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 692($sp)
		add $t1, $t1, $t0
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 668($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 748($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 668($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869396592
		j foreach_type_start_8739869396592
		
		foreach_type_end_8739869396592:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 628($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 624($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 620($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 616($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 612($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 628($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 628($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 640($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 744($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 624($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO foreach_min_body_8739869396592
		lw $t0, 612($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869396592
		
		# JUMP TO foreach_min_end_8739869396592
		j foreach_min_end_8739869396592
		
		foreach_min_body_8739869396592:
		
		# internal_31 <- ARRAY internal_13[internal_29]
		lw $t0, 628($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 692($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 620($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 632($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 628($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 624($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO update_min_8739869396592
		lw $t0, 612($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869396592
		
		# JUMP TO update_min_end_8739869396592
		j update_min_end_8739869396592
		
		update_min_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 628($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 632($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 628($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 636($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 640($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 636($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 640($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 748($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 640($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869396592
		j foreach_min_start_8739869396592
		
		foreach_min_end_8739869396592:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 732($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 608($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 604($sp)
		
		# ARRAY internal_34[internal_35] <- internal_1
		lw $t0, 604($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 600($sp)
		
		# ARRAY internal_34[internal_36] <- internal_1
		lw $t0, 600($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 596($sp)
		
		# ARRAY internal_34[internal_37] <- internal_1
		lw $t0, 596($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 592($sp)
		
		# ARRAY internal_34[internal_38] <- internal_1
		lw $t0, 592($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 588($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 628($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 600($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 THEN GOTO error_branch_8739869396592
		lw $t0, 588($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869396592
		
		# ARRAY internal_34[internal_30] <- internal_2
		lw $t0, 624($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 736($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 584($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 580($sp)
		
		# internal_40 <- ARRAY internal_34[internal_41]
		lw $t0, 580($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 584($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bazz_8739869396592
		lw $t0, 584($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8739869396592
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 576($sp)
		
		# internal_40 <- ARRAY internal_34[internal_42]
		lw $t0, 576($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 584($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Razz_8739869396592
		lw $t0, 584($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869396592
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 572($sp)
		
		# internal_40 <- ARRAY internal_34[internal_43]
		lw $t0, 572($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 584($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Foo_8739869396592
		lw $t0, 584($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8739869396592
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 568($sp)
		
		# internal_40 <- ARRAY internal_34[internal_44]
		lw $t0, 568($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 608($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 584($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bar_8739869396592
		lw $t0, 584($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869396592
		
		branch_Bazz_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 556($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 564($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 564($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 576($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 568($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 556($sp)
		sw $t0, 564($sp)
		
		# JUMP TO branch_end_8739869396592
		j branch_end_8739869396592
		
		branch_Razz_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 548($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 556($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 556($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 576($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 560($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 548($sp)
		sw $t0, 564($sp)
		
		# JUMP TO branch_end_8739869396592
		j branch_end_8739869396592
		
		branch_Foo_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 540($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 548($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 576($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 552($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 540($sp)
		sw $t0, 564($sp)
		
		# JUMP TO branch_end_8739869396592
		j branch_end_8739869396592
		
		branch_Bar_8739869396592:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 576($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 560($sp)
		sw $t0, 564($sp)
		
		# JUMP TO branch_end_8739869396592
		j branch_end_8739869396592
		
		error_branch_8739869396592:
		
		branch_end_8739869396592:
		
		# SET ATTRIBUTE g OF self
		lw $t0, 748($sp)
		lw $t1, 564($sp)
		beq $t1, $zero, object_set_attribute_8739869310582
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869310582
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869310582
		j object_set_attribute_8739869310582
		int_set_attribute_8739869310582:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869310582
		bool_set_attribute_8739869310582:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869310582
		object_set_attribute_8739869310582:
		sw $t1, 12($t0)
		end_set_attribute_8739869310582:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 528($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 528($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 524($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 756($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 532($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 540($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE i OF self
		lw $t0, 748($sp)
		lw $t1, 532($sp)
		beq $t1, $zero, object_set_attribute_8739869313759
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869313759
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869313759
		j object_set_attribute_8739869313759
		int_set_attribute_8739869313759:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869313759
		bool_set_attribute_8739869313759:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869313759
		object_set_attribute_8739869313759:
		sw $t1, 16($t0)
		end_set_attribute_8739869313759:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 520($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 516($sp)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 512($sp)
		
		# ALLOCATING NUll INTO -> internal_59
		sw $zero, 508($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 504($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 500($sp)
		
		# internal_62 <- TYPEOF self
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		sw $t0, 496($sp)
		
		# internal_63 <- internal_62
		lw $t0, 496($sp)
		sw $t0, 492($sp)
		
		while_start_8739869401408:
		
		# internal_61 <- EQUALADDRESS (internal_63, internal_59)
		lw $t0, 492($sp)
		lw $t1, 508($sp)
		seq $t2, $t0, $t1
		lw $t0, 500($sp)
		sw $t2, 8($t0)
		
		# IF internal_61 THEN GOTO while_end_8739869401408
		lw $t0, 500($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869401408
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 516($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 516($sp)
		addi $sp, $sp, 12
		
		# internal_63 <- ANCESTOR OF internal_63
		lw $t0, 492($sp)
		lw $t0, 4($t0)
		sw $t0, 492($sp)
		
		# JUMP TO while_start_8739869401408
		j while_start_8739869401408
		
		while_end_8739869401408:
		
		# internal_63 <- internal_62
		lw $t0, 496($sp)
		sw $t0, 492($sp)
		
		# INITIALIZE ARRAY [internal_60]
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 488($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 484($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 480($sp)
		
		foreach_start_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 496($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 516($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 492($sp)
		addi $sp, $sp, 12
		
		# IF internal_66 THEN GOTO foreach_body_8739869401408
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869401408
		
		# JUMP TO foreach_end_8739869401408
		j foreach_end_8739869401408
		
		foreach_body_8739869401408:
		
		# ARRAY internal_64[internal_65] <- internal_63
		lw $t0, 484($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 488($sp)
		add $t1, $t1, $t0
		lw $t0, 492($sp)
		sw $t0, 0($t1)
		
		# internal_63 <- ANCESTOR OF internal_63
		lw $t0, 492($sp)
		lw $t0, 4($t0)
		sw $t0, 492($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 496($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 496($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869401408
		j foreach_start_8739869401408
		
		foreach_end_8739869401408:
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 512($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 476($sp)
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 512($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 472($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 464($sp)
		
		# internal_69 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 468($sp)
		
		# ARRAY internal_67[internal_70] <- internal_69
		lw $t0, 464($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 476($sp)
		add $t1, $t1, $t0
		lw $t0, 468($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_70] <- internal_60
		lw $t0, 464($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 472($sp)
		add $t1, $t1, $t0
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 456($sp)
		
		# internal_71 <- DIRECTION OF Foo
		la $t0, type_Foo
		sw $t0, 460($sp)
		
		# ARRAY internal_67[internal_72] <- internal_71
		lw $t0, 456($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 476($sp)
		add $t1, $t1, $t0
		lw $t0, 460($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_72] <- internal_60
		lw $t0, 456($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 472($sp)
		add $t1, $t1, $t0
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 448($sp)
		
		# internal_73 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 452($sp)
		
		# ARRAY internal_67[internal_74] <- internal_73
		lw $t0, 448($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 476($sp)
		add $t1, $t1, $t0
		lw $t0, 452($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_74] <- internal_60
		lw $t0, 448($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 472($sp)
		add $t1, $t1, $t0
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 444($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 440($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 432($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 428($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 420($sp)
		
		foreach_type_start_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_75]
		lw $t0, 456($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 524($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 452($sp)
		addi $sp, $sp, 12
		
		# IF internal_76 THEN GOTO foreach_type_body_8739869401408
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869401408
		
		# JUMP TO foreach_type_end_8739869401408
		j foreach_type_end_8739869401408
		
		foreach_type_body_8739869401408:
		
		# internal_77 <- ARRAY internal_67[internal_75]
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 476($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 436($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 444($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_56]
		lw $t0, 532($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 444($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 444($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 516($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 440($sp)
		addi $sp, $sp, 12
		
		# IF internal_79 THEN GOTO foreach_ancestor_body_8739869401408
		lw $t0, 428($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869401408
		
		# JUMP TO foreach_ancestor_end_8739869401408
		j foreach_ancestor_end_8739869401408
		
		foreach_ancestor_body_8739869401408:
		
		# internal_80 <- ARRAY internal_64[internal_78]
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 488($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 424($sp)
		
		# internal_81 <- EQUALADDRESS (internal_77, internal_80)
		lw $t0, 436($sp)
		lw $t1, 424($sp)
		seq $t2, $t0, $t1
		lw $t0, 420($sp)
		sw $t2, 8($t0)
		
		# IF internal_81 THEN GOTO foreach_ancestor_end_8739869401408
		lw $t0, 420($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869401408
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 444($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 444($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869401408
		j foreach_ancestor_start_8739869401408
		
		foreach_ancestor_end_8739869401408:
		
		# ARRAY internal_68[internal_75] <- internal_78
		lw $t0, 444($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 472($sp)
		add $t1, $t1, $t0
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_75]
		lw $t0, 456($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 456($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869401408
		j foreach_type_start_8739869401408
		
		foreach_type_end_8739869401408:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 416($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 412($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 408($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 404($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 400($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 416($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 516($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 416($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 428($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 524($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 412($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 THEN GOTO foreach_min_body_8739869401408
		lw $t0, 400($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869401408
		
		# JUMP TO foreach_min_end_8739869401408
		j foreach_min_end_8739869401408
		
		foreach_min_body_8739869401408:
		
		# internal_84 <- ARRAY internal_68[internal_82]
		lw $t0, 416($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 472($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 408($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 420($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 416($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 412($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 THEN GOTO update_min_8739869401408
		lw $t0, 400($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869401408
		
		# JUMP TO update_min_end_8739869401408
		j update_min_end_8739869401408
		
		update_min_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 416($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 420($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 416($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_83]
		lw $t0, 424($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 428($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 424($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 428($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 428($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869401408
		j foreach_min_start_8739869401408
		
		foreach_min_end_8739869401408:
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 512($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 396($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 392($sp)
		
		# ARRAY internal_87[internal_88] <- internal_56
		lw $t0, 392($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 396($sp)
		add $t1, $t1, $t0
		lw $t0, 520($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 388($sp)
		
		# ARRAY internal_87[internal_89] <- internal_56
		lw $t0, 388($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 396($sp)
		add $t1, $t1, $t0
		lw $t0, 520($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 384($sp)
		
		# ARRAY internal_87[internal_90] <- internal_56
		lw $t0, 384($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 396($sp)
		add $t1, $t1, $t0
		lw $t0, 520($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 380($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 416($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 516($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 392($sp)
		addi $sp, $sp, 12
		
		# IF internal_91 THEN GOTO error_branch_8739869401408
		lw $t0, 380($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869401408
		
		# ARRAY internal_87[internal_83] <- internal_57
		lw $t0, 412($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 396($sp)
		add $t1, $t1, $t0
		lw $t0, 516($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 376($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		# internal_92 <- ARRAY internal_87[internal_93]
		lw $t0, 372($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 396($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 376($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Razz_8739869401408
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869401408
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 368($sp)
		
		# internal_92 <- ARRAY internal_87[internal_94]
		lw $t0, 368($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 396($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 376($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Foo_8739869401408
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8739869401408
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 364($sp)
		
		# internal_92 <- ARRAY internal_87[internal_95]
		lw $t0, 364($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 396($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 376($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Bar_8739869401408
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869401408
		
		branch_Razz_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 352($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_98]
		lw $t0, 360($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 360($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 372($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_98]
		lw $t0, 364($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_98
		lw $t0, 352($sp)
		sw $t0, 360($sp)
		
		# JUMP TO branch_end_8739869401408
		j branch_end_8739869401408
		
		branch_Foo_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 344($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_100]
		lw $t0, 352($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 352($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 372($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_100]
		lw $t0, 356($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_100
		lw $t0, 344($sp)
		sw $t0, 360($sp)
		
		# JUMP TO branch_end_8739869401408
		j branch_end_8739869401408
		
		branch_Bar_8739869401408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 372($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- n
		lw $t0, 560($sp)
		sw $t0, 360($sp)
		
		# JUMP TO branch_end_8739869401408
		j branch_end_8739869401408
		
		error_branch_8739869401408:
		
		branch_end_8739869401408:
		
		# SET ATTRIBUTE a OF self
		lw $t0, 748($sp)
		lw $t1, 360($sp)
		beq $t1, $zero, object_set_attribute_8739869314332
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869314332
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869314332
		j object_set_attribute_8739869314332
		int_set_attribute_8739869314332:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869314332
		bool_set_attribute_8739869314332:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869314332
		object_set_attribute_8739869314332:
		sw $t1, 20($t0)
		end_set_attribute_8739869314332:
		
		# GET ATTRIBUTE a OF self
		lw $t0, 748($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869309212
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869309212
		j object_get_attribute_8739869309212
		int_get_attribute_8739869309212:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 336($sp)
		j end_get_attribute_8739869309212
		bool_get_attribute_8739869309212:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 336($sp)
		j end_get_attribute_8739869309212
		object_get_attribute_8739869309212:
		sw $t1, 336($sp)
		end_get_attribute_8739869309212:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 328($sp)
		
		# GET METHOD doh OF Razz
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 328($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 324($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_102]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_105
		lw $t0, 332($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 340($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE g OF self
		lw $t0, 748($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869309266
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869309266
		j object_get_attribute_8739869309266
		int_get_attribute_8739869309266:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 320($sp)
		j end_get_attribute_8739869309266
		bool_get_attribute_8739869309266:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 320($sp)
		j end_get_attribute_8739869309266
		object_get_attribute_8739869309266:
		sw $t1, 320($sp)
		end_get_attribute_8739869309266:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		# GET METHOD doh OF Foo
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 312($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 308($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_106]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_109
		lw $t0, 316($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 324($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_103]
		lw $t0, 344($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_107]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 316($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 296($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 296($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 292($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 756($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_113
		lw $t0, 300($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 308($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_110]
		lw $t0, 316($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_111]
		lw $t0, 312($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 280($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 280($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 276($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 756($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_117
		lw $t0, 284($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_114]
		lw $t0, 300($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_115]
		lw $t0, 296($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 284($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE b OF self
		lw $t0, 748($sp)
		lw $t1, 272($sp)
		beq $t1, $zero, object_set_attribute_8739869317069
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869317069
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869317069
		j object_set_attribute_8739869317069
		int_set_attribute_8739869317069:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8739869317069
		bool_set_attribute_8739869317069:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8739869317069
		object_set_attribute_8739869317069:
		sw $t1, 24($t0)
		end_set_attribute_8739869317069:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 268($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 264($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 260($sp)
		
		# ALLOCATING NUll INTO -> internal_122
		sw $zero, 256($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 252($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 248($sp)
		
		# internal_125 <- TYPEOF self
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		sw $t0, 244($sp)
		
		# internal_126 <- internal_125
		lw $t0, 244($sp)
		sw $t0, 240($sp)
		
		while_start_8739869406874:
		
		# internal_124 <- EQUALADDRESS (internal_126, internal_122)
		lw $t0, 240($sp)
		lw $t1, 256($sp)
		seq $t2, $t0, $t1
		lw $t0, 248($sp)
		sw $t2, 8($t0)
		
		# IF internal_124 THEN GOTO while_end_8739869406874
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869406874
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 264($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 264($sp)
		addi $sp, $sp, 12
		
		# internal_126 <- ANCESTOR OF internal_126
		lw $t0, 240($sp)
		lw $t0, 4($t0)
		sw $t0, 240($sp)
		
		# JUMP TO while_start_8739869406874
		j while_start_8739869406874
		
		while_end_8739869406874:
		
		# internal_126 <- internal_125
		lw $t0, 244($sp)
		sw $t0, 240($sp)
		
		# INITIALIZE ARRAY [internal_123]
		lw $t0, 252($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 236($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 228($sp)
		
		foreach_start_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_128]
		lw $t0, 244($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 12
		
		# IF internal_129 THEN GOTO foreach_body_8739869406874
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869406874
		
		# JUMP TO foreach_end_8739869406874
		j foreach_end_8739869406874
		
		foreach_body_8739869406874:
		
		# ARRAY internal_127[internal_128] <- internal_126
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 236($sp)
		add $t1, $t1, $t0
		lw $t0, 240($sp)
		sw $t0, 0($t1)
		
		# internal_126 <- ANCESTOR OF internal_126
		lw $t0, 240($sp)
		lw $t0, 4($t0)
		sw $t0, 240($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_128]
		lw $t0, 244($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 244($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869406874
		j foreach_start_8739869406874
		
		foreach_end_8739869406874:
		
		# INITIALIZE ARRAY [internal_121]
		lw $t0, 260($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 224($sp)
		
		# INITIALIZE ARRAY [internal_121]
		lw $t0, 260($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 220($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# internal_132 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 216($sp)
		
		# ARRAY internal_130[internal_133] <- internal_132
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 224($sp)
		add $t1, $t1, $t0
		lw $t0, 216($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_131[internal_133] <- internal_123
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 220($sp)
		add $t1, $t1, $t0
		lw $t0, 252($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		# internal_134 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 208($sp)
		
		# ARRAY internal_130[internal_135] <- internal_134
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 224($sp)
		add $t1, $t1, $t0
		lw $t0, 208($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_131[internal_135] <- internal_123
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 220($sp)
		add $t1, $t1, $t0
		lw $t0, 252($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		foreach_type_start_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_136]
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_121]
		lw $t0, 272($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		# IF internal_137 THEN GOTO foreach_type_body_8739869406874
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869406874
		
		# JUMP TO foreach_type_end_8739869406874
		j foreach_type_end_8739869406874
		
		foreach_type_body_8739869406874:
		
		# internal_138 <- ARRAY internal_130[internal_136]
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 224($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 192($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_139]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_119]
		lw $t0, 280($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_139]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp)
		addi $sp, $sp, 12
		
		# IF internal_140 THEN GOTO foreach_ancestor_body_8739869406874
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869406874
		
		# JUMP TO foreach_ancestor_end_8739869406874
		j foreach_ancestor_end_8739869406874
		
		foreach_ancestor_body_8739869406874:
		
		# internal_141 <- ARRAY internal_127[internal_139]
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 236($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 180($sp)
		
		# internal_142 <- EQUALADDRESS (internal_138, internal_141)
		lw $t0, 192($sp)
		lw $t1, 180($sp)
		seq $t2, $t0, $t1
		lw $t0, 176($sp)
		sw $t2, 8($t0)
		
		# IF internal_142 THEN GOTO foreach_ancestor_end_8739869406874
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869406874
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_139]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869406874
		j foreach_ancestor_start_8739869406874
		
		foreach_ancestor_end_8739869406874:
		
		# ARRAY internal_131[internal_136] <- internal_139
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 220($sp)
		add $t1, $t1, $t0
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_136]
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869406874
		j foreach_type_start_8739869406874
		
		foreach_type_end_8739869406874:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_143]
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_121]
		lw $t0, 272($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		# IF internal_147 THEN GOTO foreach_min_body_8739869406874
		lw $t0, 156($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869406874
		
		# JUMP TO foreach_min_end_8739869406874
		j foreach_min_end_8739869406874
		
		foreach_min_body_8739869406874:
		
		# internal_145 <- ARRAY internal_131[internal_143]
		lw $t0, 172($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 220($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 164($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_145]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		# IF internal_147 THEN GOTO update_min_8739869406874
		lw $t0, 156($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869406874
		
		# JUMP TO update_min_end_8739869406874
		j update_min_end_8739869406874
		
		update_min_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_145]
		lw $t0, 176($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_144]
		lw $t0, 180($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_143]
		lw $t0, 184($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 180($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_143]
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 184($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869406874
		j foreach_min_start_8739869406874
		
		foreach_min_end_8739869406874:
		
		# INITIALIZE ARRAY [internal_121]
		lw $t0, 260($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 152($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ARRAY internal_148[internal_149] <- internal_119
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 152($sp)
		add $t1, $t1, $t0
		lw $t0, 268($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# ARRAY internal_148[internal_150] <- internal_119
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 152($sp)
		add $t1, $t1, $t0
		lw $t0, 268($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# IF internal_151 THEN GOTO error_branch_8739869406874
		lw $t0, 140($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869406874
		
		# ARRAY internal_148[internal_144] <- internal_120
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 152($sp)
		add $t1, $t1, $t0
		lw $t0, 264($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# internal_152 <- ARRAY internal_148[internal_153]
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 152($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 136($sp)
		sw $t0, 8($t2)
		
		# IF internal_152 THEN GOTO branch_Razz_8739869406874
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869406874
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# internal_152 <- ARRAY internal_148[internal_154]
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 152($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 136($sp)
		sw $t0, 8($t2)
		
		# IF internal_152 THEN GOTO branch_Bar_8739869406874
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869406874
		
		branch_Razz_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 116($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_157]
		lw $t0, 124($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 124($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_155]
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_157]
		lw $t0, 128($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 136($sp)
		addi $sp, $sp, 12
		
		# internal_155 <- internal_157
		lw $t0, 116($sp)
		sw $t0, 124($sp)
		
		# JUMP TO branch_end_8739869406874
		j branch_end_8739869406874
		
		branch_Bar_8739869406874:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 760($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_155]
		lw $t0, 136($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 572($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 136($sp)
		addi $sp, $sp, 12
		
		# internal_155 <- n
		lw $t0, 560($sp)
		sw $t0, 124($sp)
		
		# JUMP TO branch_end_8739869406874
		j branch_end_8739869406874
		
		error_branch_8739869406874:
		
		branch_end_8739869406874:
		
		# SET ATTRIBUTE e OF self
		lw $t0, 748($sp)
		lw $t1, 124($sp)
		beq $t1, $zero, object_set_attribute_8739869309428
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869309428
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869309428
		j object_set_attribute_8739869309428
		int_set_attribute_8739869309428:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0)
		j end_set_attribute_8739869309428
		bool_set_attribute_8739869309428:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0)
		j end_set_attribute_8739869309428
		object_set_attribute_8739869309428:
		sw $t1, 28($t0)
		end_set_attribute_8739869309428:
		
		# GET ATTRIBUTE a OF self
		lw $t0, 748($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869320795
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869320795
		j object_get_attribute_8739869320795
		int_get_attribute_8739869320795:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 108($sp)
		j end_get_attribute_8739869320795
		bool_get_attribute_8739869320795:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 108($sp)
		j end_get_attribute_8739869320795
		object_get_attribute_8739869320795:
		sw $t1, 108($sp)
		end_get_attribute_8739869320795:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# GET METHOD doh OF Bazz
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 100($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 96($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_159]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_doh_at_Bazz
		jal function_doh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE g OF self
		lw $t0, 748($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869320849
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869320849
		j object_get_attribute_8739869320849
		int_get_attribute_8739869320849:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 92($sp)
		j end_get_attribute_8739869320849
		bool_get_attribute_8739869320849:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 92($sp)
		j end_get_attribute_8739869320849
		object_get_attribute_8739869320849:
		sw $t1, 92($sp)
		end_get_attribute_8739869320849:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD doh OF Foo
		lw $t0, 92($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_163]
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_166
		lw $t0, 88($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_160]
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_164]
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE e OF self
		lw $t0, 748($sp)
		lw $t1, 28($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869320918
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869320918
		j object_get_attribute_8739869320918
		int_get_attribute_8739869320918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8739869320918
		bool_get_attribute_8739869320918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8739869320918
		object_get_attribute_8739869320918:
		sw $t1, 72($sp)
		end_get_attribute_8739869320918:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_168]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_171
		lw $t0, 68($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_167]
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_169]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 756($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_175
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_172]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_173]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 756($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_179
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_176]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_177]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE f OF self
		lw $t0, 748($sp)
		lw $t1, 24($sp)
		beq $t1, $zero, object_set_attribute_8739869317636
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869317636
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869317636
		j object_set_attribute_8739869317636
		int_set_attribute_8739869317636:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0)
		j end_set_attribute_8739869317636
		bool_set_attribute_8739869317636:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0)
		j end_set_attribute_8739869317636
		object_set_attribute_8739869317636:
		sw $t1, 32($t0)
		end_set_attribute_8739869317636:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 756($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_183
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE c OF self
		lw $t0, 748($sp)
		lw $t1, 20($sp)
		beq $t1, $zero, object_set_attribute_8739869321346
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869321346
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869321346
		j object_set_attribute_8739869321346
		int_set_attribute_8739869321346:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($t0)
		j end_set_attribute_8739869321346
		bool_set_attribute_8739869321346:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($t0)
		j end_set_attribute_8739869321346
		object_set_attribute_8739869321346:
		sw $t1, 36($t0)
		end_set_attribute_8739869321346:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD printh OF Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 756($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_186
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE d OF self
		lw $t0, 748($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8739869321394
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869321394
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869321394
		j object_set_attribute_8739869321394
		int_set_attribute_8739869321394:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($t0)
		j end_set_attribute_8739869321394
		bool_set_attribute_8739869321394:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($t0)
		j end_set_attribute_8739869321394
		object_set_attribute_8739869321394:
		sw $t1, 40($t0)
		end_set_attribute_8739869321394:
		
		lw $v1, 748($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 748
		
		jr $ra
		
	function___init___at_Razz:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -724
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 720($sp)
		
		# SET ATTRIBUTE h OF self
		lw $t0, 724($sp)
		lw $t1, 720($sp)
		beq $t1, $zero, object_set_attribute_8739869321994
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869321994
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869321994
		j object_set_attribute_8739869321994
		int_set_attribute_8739869321994:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869321994
		bool_set_attribute_8739869321994:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869321994
		object_set_attribute_8739869321994:
		sw $t1, 8($t0)
		end_set_attribute_8739869321994:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 716($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 712($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 708($sp)
		
		# ALLOCATING NUll INTO -> internal_4
		sw $zero, 704($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 700($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 696($sp)
		
		# internal_7 <- TYPEOF self
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		sw $t0, 692($sp)
		
		# internal_8 <- internal_7
		lw $t0, 692($sp)
		sw $t0, 688($sp)
		
		while_start_8739869390514:
		
		# internal_6 <- EQUALADDRESS (internal_8, internal_4)
		lw $t0, 688($sp)
		lw $t1, 704($sp)
		seq $t2, $t0, $t1
		lw $t0, 696($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 THEN GOTO while_end_8739869390514
		lw $t0, 696($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869390514
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 712($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 712($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 688($sp)
		lw $t0, 4($t0)
		sw $t0, 688($sp)
		
		# JUMP TO while_start_8739869390514
		j while_start_8739869390514
		
		while_end_8739869390514:
		
		# internal_8 <- internal_7
		lw $t0, 692($sp)
		sw $t0, 688($sp)
		
		# INITIALIZE ARRAY [internal_5]
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 684($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 680($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 676($sp)
		
		foreach_start_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 692($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 688($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 THEN GOTO foreach_body_8739869390514
		lw $t0, 676($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869390514
		
		# JUMP TO foreach_end_8739869390514
		j foreach_end_8739869390514
		
		foreach_body_8739869390514:
		
		# ARRAY internal_9[internal_10] <- internal_8
		lw $t0, 680($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 684($sp)
		add $t1, $t1, $t0
		lw $t0, 688($sp)
		sw $t0, 0($t1)
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 688($sp)
		lw $t0, 4($t0)
		sw $t0, 688($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 692($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 692($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869390514
		j foreach_start_8739869390514
		
		foreach_end_8739869390514:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 708($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 672($sp)
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 708($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 668($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 660($sp)
		
		# internal_14 <- DIRECTION OF Bazz
		la $t0, type_Bazz
		sw $t0, 664($sp)
		
		# ARRAY internal_12[internal_15] <- internal_14
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 672($sp)
		add $t1, $t1, $t0
		lw $t0, 664($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_15] <- internal_5
		lw $t0, 660($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 668($sp)
		add $t1, $t1, $t0
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 652($sp)
		
		# internal_16 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 656($sp)
		
		# ARRAY internal_12[internal_17] <- internal_16
		lw $t0, 652($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 672($sp)
		add $t1, $t1, $t0
		lw $t0, 656($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_17] <- internal_5
		lw $t0, 652($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 668($sp)
		add $t1, $t1, $t0
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 644($sp)
		
		# internal_18 <- DIRECTION OF Foo
		la $t0, type_Foo
		sw $t0, 648($sp)
		
		# ARRAY internal_12[internal_19] <- internal_18
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 672($sp)
		add $t1, $t1, $t0
		lw $t0, 648($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_19] <- internal_5
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 668($sp)
		add $t1, $t1, $t0
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 636($sp)
		
		# internal_20 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 640($sp)
		
		# ARRAY internal_12[internal_21] <- internal_20
		lw $t0, 636($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 672($sp)
		add $t1, $t1, $t0
		lw $t0, 640($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_21] <- internal_5
		lw $t0, 636($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 668($sp)
		add $t1, $t1, $t0
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 632($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 628($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 620($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 616($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 608($sp)
		
		foreach_type_start_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 644($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 720($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 640($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 THEN GOTO foreach_type_body_8739869390514
		lw $t0, 628($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869390514
		
		# JUMP TO foreach_type_end_8739869390514
		j foreach_type_end_8739869390514
		
		foreach_type_body_8739869390514:
		
		# internal_24 <- ARRAY internal_12[internal_22]
		lw $t0, 632($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 672($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 624($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 632($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 632($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 632($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 628($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 THEN GOTO foreach_ancestor_body_8739869390514
		lw $t0, 616($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869390514
		
		# JUMP TO foreach_ancestor_end_8739869390514
		j foreach_ancestor_end_8739869390514
		
		foreach_ancestor_body_8739869390514:
		
		# internal_27 <- ARRAY internal_9[internal_25]
		lw $t0, 620($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 684($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 612($sp)
		
		# internal_28 <- EQUALADDRESS (internal_24, internal_27)
		lw $t0, 624($sp)
		lw $t1, 612($sp)
		seq $t2, $t0, $t1
		lw $t0, 608($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 THEN GOTO foreach_ancestor_end_8739869390514
		lw $t0, 608($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869390514
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 632($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 632($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869390514
		j foreach_ancestor_start_8739869390514
		
		foreach_ancestor_end_8739869390514:
		
		# ARRAY internal_13[internal_22] <- internal_25
		lw $t0, 632($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 668($sp)
		add $t1, $t1, $t0
		lw $t0, 620($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 644($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 644($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869390514
		j foreach_type_start_8739869390514
		
		foreach_type_end_8739869390514:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 604($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 600($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 596($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 592($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 588($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 604($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 604($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 616($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 720($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 600($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO foreach_min_body_8739869390514
		lw $t0, 588($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869390514
		
		# JUMP TO foreach_min_end_8739869390514
		j foreach_min_end_8739869390514
		
		foreach_min_body_8739869390514:
		
		# internal_31 <- ARRAY internal_13[internal_29]
		lw $t0, 604($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 668($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 596($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 608($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 604($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 600($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO update_min_8739869390514
		lw $t0, 588($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869390514
		
		# JUMP TO update_min_end_8739869390514
		j update_min_end_8739869390514
		
		update_min_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 604($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 608($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 604($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 612($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 616($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 612($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 616($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 616($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869390514
		j foreach_min_start_8739869390514
		
		foreach_min_end_8739869390514:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 708($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 584($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 580($sp)
		
		# ARRAY internal_34[internal_35] <- internal_1
		lw $t0, 580($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 576($sp)
		
		# ARRAY internal_34[internal_36] <- internal_1
		lw $t0, 576($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 572($sp)
		
		# ARRAY internal_34[internal_37] <- internal_1
		lw $t0, 572($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 568($sp)
		
		# ARRAY internal_34[internal_38] <- internal_1
		lw $t0, 568($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 564($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 604($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 712($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 576($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 THEN GOTO error_branch_8739869390514
		lw $t0, 564($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869390514
		
		# ARRAY internal_34[internal_30] <- internal_2
		lw $t0, 600($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 712($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 560($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 556($sp)
		
		# internal_40 <- ARRAY internal_34[internal_41]
		lw $t0, 556($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 560($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bazz_8739869390514
		lw $t0, 560($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8739869390514
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 552($sp)
		
		# internal_40 <- ARRAY internal_34[internal_42]
		lw $t0, 552($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 560($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Razz_8739869390514
		lw $t0, 560($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869390514
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 548($sp)
		
		# internal_40 <- ARRAY internal_34[internal_43]
		lw $t0, 548($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 560($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Foo_8739869390514
		lw $t0, 560($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8739869390514
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 544($sp)
		
		# internal_40 <- ARRAY internal_34[internal_44]
		lw $t0, 544($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 584($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 560($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bar_8739869390514
		lw $t0, 560($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869390514
		
		branch_Bazz_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 532($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 540($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 540($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 544($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 532($sp)
		sw $t0, 540($sp)
		
		# JUMP TO branch_end_8739869390514
		j branch_end_8739869390514
		
		branch_Razz_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 524($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 532($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 532($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 536($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 524($sp)
		sw $t0, 540($sp)
		
		# JUMP TO branch_end_8739869390514
		j branch_end_8739869390514
		
		branch_Foo_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 516($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 524($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 524($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 528($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 516($sp)
		sw $t0, 540($sp)
		
		# JUMP TO branch_end_8739869390514
		j branch_end_8739869390514
		
		branch_Bar_8739869390514:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 536($sp)
		sw $t0, 540($sp)
		
		# JUMP TO branch_end_8739869390514
		j branch_end_8739869390514
		
		error_branch_8739869390514:
		
		branch_end_8739869390514:
		
		# SET ATTRIBUTE g OF self
		lw $t0, 724($sp)
		lw $t1, 540($sp)
		beq $t1, $zero, object_set_attribute_8739869322015
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869322015
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869322015
		j object_set_attribute_8739869322015
		int_set_attribute_8739869322015:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869322015
		bool_set_attribute_8739869322015:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869322015
		object_set_attribute_8739869322015:
		sw $t1, 12($t0)
		end_set_attribute_8739869322015:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 504($sp)
		
		# GET METHOD printh OF Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 504($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 500($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 732($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 508($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 516($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE i OF self
		lw $t0, 724($sp)
		lw $t1, 508($sp)
		beq $t1, $zero, object_set_attribute_8739869292427
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869292427
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869292427
		j object_set_attribute_8739869292427
		int_set_attribute_8739869292427:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869292427
		bool_set_attribute_8739869292427:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869292427
		object_set_attribute_8739869292427:
		sw $t1, 16($t0)
		end_set_attribute_8739869292427:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 496($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 492($sp)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 488($sp)
		
		# ALLOCATING NUll INTO -> internal_59
		sw $zero, 484($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 480($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 476($sp)
		
		# internal_62 <- TYPEOF self
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		sw $t0, 472($sp)
		
		# internal_63 <- internal_62
		lw $t0, 472($sp)
		sw $t0, 468($sp)
		
		while_start_8739869361960:
		
		# internal_61 <- EQUALADDRESS (internal_63, internal_59)
		lw $t0, 468($sp)
		lw $t1, 484($sp)
		seq $t2, $t0, $t1
		lw $t0, 476($sp)
		sw $t2, 8($t0)
		
		# IF internal_61 THEN GOTO while_end_8739869361960
		lw $t0, 476($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869361960
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 492($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 492($sp)
		addi $sp, $sp, 12
		
		# internal_63 <- ANCESTOR OF internal_63
		lw $t0, 468($sp)
		lw $t0, 4($t0)
		sw $t0, 468($sp)
		
		# JUMP TO while_start_8739869361960
		j while_start_8739869361960
		
		while_end_8739869361960:
		
		# internal_63 <- internal_62
		lw $t0, 472($sp)
		sw $t0, 468($sp)
		
		# INITIALIZE ARRAY [internal_60]
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 464($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 460($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 456($sp)
		
		foreach_start_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 472($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 468($sp)
		addi $sp, $sp, 12
		
		# IF internal_66 THEN GOTO foreach_body_8739869361960
		lw $t0, 456($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869361960
		
		# JUMP TO foreach_end_8739869361960
		j foreach_end_8739869361960
		
		foreach_body_8739869361960:
		
		# ARRAY internal_64[internal_65] <- internal_63
		lw $t0, 460($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 464($sp)
		add $t1, $t1, $t0
		lw $t0, 468($sp)
		sw $t0, 0($t1)
		
		# internal_63 <- ANCESTOR OF internal_63
		lw $t0, 468($sp)
		lw $t0, 4($t0)
		sw $t0, 468($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 472($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 472($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869361960
		j foreach_start_8739869361960
		
		foreach_end_8739869361960:
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 488($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 452($sp)
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 488($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 448($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 440($sp)
		
		# internal_69 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 444($sp)
		
		# ARRAY internal_67[internal_70] <- internal_69
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 452($sp)
		add $t1, $t1, $t0
		lw $t0, 444($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_70] <- internal_60
		lw $t0, 440($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 448($sp)
		add $t1, $t1, $t0
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 432($sp)
		
		# internal_71 <- DIRECTION OF Foo
		la $t0, type_Foo
		sw $t0, 436($sp)
		
		# ARRAY internal_67[internal_72] <- internal_71
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 452($sp)
		add $t1, $t1, $t0
		lw $t0, 436($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_72] <- internal_60
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 448($sp)
		add $t1, $t1, $t0
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 424($sp)
		
		# internal_73 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 428($sp)
		
		# ARRAY internal_67[internal_74] <- internal_73
		lw $t0, 424($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 452($sp)
		add $t1, $t1, $t0
		lw $t0, 428($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_68[internal_74] <- internal_60
		lw $t0, 424($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 448($sp)
		add $t1, $t1, $t0
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 420($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 416($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 408($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 404($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 396($sp)
		
		foreach_type_start_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_75]
		lw $t0, 432($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 500($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 428($sp)
		addi $sp, $sp, 12
		
		# IF internal_76 THEN GOTO foreach_type_body_8739869361960
		lw $t0, 416($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869361960
		
		# JUMP TO foreach_type_end_8739869361960
		j foreach_type_end_8739869361960
		
		foreach_type_body_8739869361960:
		
		# internal_77 <- ARRAY internal_67[internal_75]
		lw $t0, 420($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 452($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 412($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 420($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_56]
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 420($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 420($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 416($sp)
		addi $sp, $sp, 12
		
		# IF internal_79 THEN GOTO foreach_ancestor_body_8739869361960
		lw $t0, 404($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869361960
		
		# JUMP TO foreach_ancestor_end_8739869361960
		j foreach_ancestor_end_8739869361960
		
		foreach_ancestor_body_8739869361960:
		
		# internal_80 <- ARRAY internal_64[internal_78]
		lw $t0, 408($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 464($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 400($sp)
		
		# internal_81 <- EQUALADDRESS (internal_77, internal_80)
		lw $t0, 412($sp)
		lw $t1, 400($sp)
		seq $t2, $t0, $t1
		lw $t0, 396($sp)
		sw $t2, 8($t0)
		
		# IF internal_81 THEN GOTO foreach_ancestor_end_8739869361960
		lw $t0, 396($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869361960
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_78]
		lw $t0, 420($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 420($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869361960
		j foreach_ancestor_start_8739869361960
		
		foreach_ancestor_end_8739869361960:
		
		# ARRAY internal_68[internal_75] <- internal_78
		lw $t0, 420($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 448($sp)
		add $t1, $t1, $t0
		lw $t0, 408($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_75]
		lw $t0, 432($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 432($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869361960
		j foreach_type_start_8739869361960
		
		foreach_type_end_8739869361960:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 392($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 388($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 384($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 380($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 376($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 392($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 392($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 404($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 500($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 388($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 THEN GOTO foreach_min_body_8739869361960
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869361960
		
		# JUMP TO foreach_min_end_8739869361960
		j foreach_min_end_8739869361960
		
		foreach_min_body_8739869361960:
		
		# internal_84 <- ARRAY internal_68[internal_82]
		lw $t0, 392($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 448($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 384($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 396($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 392($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 388($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 THEN GOTO update_min_8739869361960
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869361960
		
		# JUMP TO update_min_end_8739869361960
		j update_min_end_8739869361960
		
		update_min_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 392($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 396($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 392($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_83]
		lw $t0, 400($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 404($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 400($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_82]
		lw $t0, 404($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 404($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869361960
		j foreach_min_start_8739869361960
		
		foreach_min_end_8739869361960:
		
		# INITIALIZE ARRAY [internal_58]
		lw $t0, 488($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 372($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 368($sp)
		
		# ARRAY internal_87[internal_88] <- internal_56
		lw $t0, 368($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 372($sp)
		add $t1, $t1, $t0
		lw $t0, 496($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 364($sp)
		
		# ARRAY internal_87[internal_89] <- internal_56
		lw $t0, 364($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 372($sp)
		add $t1, $t1, $t0
		lw $t0, 496($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 360($sp)
		
		# ARRAY internal_87[internal_90] <- internal_56
		lw $t0, 360($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 372($sp)
		add $t1, $t1, $t0
		lw $t0, 496($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 356($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 392($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 368($sp)
		addi $sp, $sp, 12
		
		# IF internal_91 THEN GOTO error_branch_8739869361960
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869361960
		
		# ARRAY internal_87[internal_83] <- internal_57
		lw $t0, 388($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 372($sp)
		add $t1, $t1, $t0
		lw $t0, 492($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 352($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 348($sp)
		
		# internal_92 <- ARRAY internal_87[internal_93]
		lw $t0, 348($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 372($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 352($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Razz_8739869361960
		lw $t0, 352($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869361960
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 344($sp)
		
		# internal_92 <- ARRAY internal_87[internal_94]
		lw $t0, 344($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 372($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 352($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Foo_8739869361960
		lw $t0, 352($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8739869361960
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 340($sp)
		
		# internal_92 <- ARRAY internal_87[internal_95]
		lw $t0, 340($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 372($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 352($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 THEN GOTO branch_Bar_8739869361960
		lw $t0, 352($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869361960
		
		branch_Razz_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 328($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_98]
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 336($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_98]
		lw $t0, 340($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 348($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_98
		lw $t0, 328($sp)
		sw $t0, 336($sp)
		
		# JUMP TO branch_end_8739869361960
		j branch_end_8739869361960
		
		branch_Foo_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 320($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_100]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 328($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_100]
		lw $t0, 332($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 348($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_100
		lw $t0, 320($sp)
		sw $t0, 336($sp)
		
		# JUMP TO branch_end_8739869361960
		j branch_end_8739869361960
		
		branch_Bar_8739869361960:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 348($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- n
		lw $t0, 536($sp)
		sw $t0, 336($sp)
		
		# JUMP TO branch_end_8739869361960
		j branch_end_8739869361960
		
		error_branch_8739869361960:
		
		branch_end_8739869361960:
		
		# SET ATTRIBUTE a OF self
		lw $t0, 724($sp)
		lw $t1, 336($sp)
		beq $t1, $zero, object_set_attribute_8739869292475
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869292475
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869292475
		j object_set_attribute_8739869292475
		int_set_attribute_8739869292475:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869292475
		bool_set_attribute_8739869292475:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869292475
		object_set_attribute_8739869292475:
		sw $t1, 20($t0)
		end_set_attribute_8739869292475:
		
		# GET ATTRIBUTE a OF self
		lw $t0, 724($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869295038
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869295038
		j object_get_attribute_8739869295038
		int_get_attribute_8739869295038:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp)
		j end_get_attribute_8739869295038
		bool_get_attribute_8739869295038:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp)
		j end_get_attribute_8739869295038
		object_get_attribute_8739869295038:
		sw $t1, 312($sp)
		end_get_attribute_8739869295038:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 304($sp)
		
		# GET METHOD doh OF Razz
		lw $t0, 312($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 304($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 300($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_102]
		lw $t0, 320($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_105
		lw $t0, 308($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 316($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE g OF self
		lw $t0, 724($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869295092
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869295092
		j object_get_attribute_8739869295092
		int_get_attribute_8739869295092:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 296($sp)
		j end_get_attribute_8739869295092
		bool_get_attribute_8739869295092:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 296($sp)
		j end_get_attribute_8739869295092
		object_get_attribute_8739869295092:
		sw $t1, 296($sp)
		end_get_attribute_8739869295092:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 288($sp)
		
		# GET METHOD doh OF Foo
		lw $t0, 296($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 288($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 284($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_106]
		lw $t0, 304($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_109
		lw $t0, 292($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_103]
		lw $t0, 320($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_107]
		lw $t0, 304($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 272($sp)
		
		# GET METHOD doh OF Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 272($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 268($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 732($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_113
		lw $t0, 276($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 284($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_110]
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_111]
		lw $t0, 288($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 276($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 256($sp)
		
		# GET METHOD printh OF Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 256($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 252($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 732($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_117
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 268($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_114]
		lw $t0, 276($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_115]
		lw $t0, 272($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 260($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE b OF self
		lw $t0, 724($sp)
		lw $t1, 248($sp)
		beq $t1, $zero, object_set_attribute_8739869294963
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869294963
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869294963
		j object_set_attribute_8739869294963
		int_set_attribute_8739869294963:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8739869294963
		bool_set_attribute_8739869294963:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8739869294963
		object_set_attribute_8739869294963:
		sw $t1, 24($t0)
		end_set_attribute_8739869294963:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 244($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 236($sp)
		
		# ALLOCATING NUll INTO -> internal_122
		sw $zero, 232($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 228($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# internal_125 <- TYPEOF self
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		sw $t0, 220($sp)
		
		# internal_126 <- internal_125
		lw $t0, 220($sp)
		sw $t0, 216($sp)
		
		while_start_8739869361987:
		
		# internal_124 <- EQUALADDRESS (internal_126, internal_122)
		lw $t0, 216($sp)
		lw $t1, 232($sp)
		seq $t2, $t0, $t1
		lw $t0, 224($sp)
		sw $t2, 8($t0)
		
		# IF internal_124 THEN GOTO while_end_8739869361987
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869361987
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 12
		
		# internal_126 <- ANCESTOR OF internal_126
		lw $t0, 216($sp)
		lw $t0, 4($t0)
		sw $t0, 216($sp)
		
		# JUMP TO while_start_8739869361987
		j while_start_8739869361987
		
		while_end_8739869361987:
		
		# internal_126 <- internal_125
		lw $t0, 220($sp)
		sw $t0, 216($sp)
		
		# INITIALIZE ARRAY [internal_123]
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 212($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		foreach_start_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_128]
		lw $t0, 220($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 216($sp)
		addi $sp, $sp, 12
		
		# IF internal_129 THEN GOTO foreach_body_8739869361987
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869361987
		
		# JUMP TO foreach_end_8739869361987
		j foreach_end_8739869361987
		
		foreach_body_8739869361987:
		
		# ARRAY internal_127[internal_128] <- internal_126
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 212($sp)
		add $t1, $t1, $t0
		lw $t0, 216($sp)
		sw $t0, 0($t1)
		
		# internal_126 <- ANCESTOR OF internal_126
		lw $t0, 216($sp)
		lw $t0, 4($t0)
		sw $t0, 216($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_128]
		lw $t0, 220($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 220($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869361987
		j foreach_start_8739869361987
		
		foreach_end_8739869361987:
		
		# INITIALIZE ARRAY [internal_121]
		lw $t0, 236($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 200($sp)
		
		# INITIALIZE ARRAY [internal_121]
		lw $t0, 236($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 196($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# internal_132 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 192($sp)
		
		# ARRAY internal_130[internal_133] <- internal_132
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 192($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_131[internal_133] <- internal_123
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# internal_134 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 184($sp)
		
		# ARRAY internal_130[internal_135] <- internal_134
		lw $t0, 180($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 184($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_131[internal_135] <- internal_123
		lw $t0, 180($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		foreach_type_start_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_136]
		lw $t0, 188($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_121]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 184($sp)
		addi $sp, $sp, 12
		
		# IF internal_137 THEN GOTO foreach_type_body_8739869361987
		lw $t0, 172($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869361987
		
		# JUMP TO foreach_type_end_8739869361987
		j foreach_type_end_8739869361987
		
		foreach_type_body_8739869361987:
		
		# internal_138 <- ARRAY internal_130[internal_136]
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 200($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 168($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_139]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_119]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_139]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# IF internal_140 THEN GOTO foreach_ancestor_body_8739869361987
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869361987
		
		# JUMP TO foreach_ancestor_end_8739869361987
		j foreach_ancestor_end_8739869361987
		
		foreach_ancestor_body_8739869361987:
		
		# internal_141 <- ARRAY internal_127[internal_139]
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 212($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 156($sp)
		
		# internal_142 <- EQUALADDRESS (internal_138, internal_141)
		lw $t0, 168($sp)
		lw $t1, 156($sp)
		seq $t2, $t0, $t1
		lw $t0, 152($sp)
		sw $t2, 8($t0)
		
		# IF internal_142 THEN GOTO foreach_ancestor_end_8739869361987
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869361987
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_139]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869361987
		j foreach_ancestor_start_8739869361987
		
		foreach_ancestor_end_8739869361987:
		
		# ARRAY internal_131[internal_136] <- internal_139
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_136]
		lw $t0, 188($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869361987
		j foreach_type_start_8739869361987
		
		foreach_type_end_8739869361987:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_143]
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_121]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# IF internal_147 THEN GOTO foreach_min_body_8739869361987
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869361987
		
		# JUMP TO foreach_min_end_8739869361987
		j foreach_min_end_8739869361987
		
		foreach_min_body_8739869361987:
		
		# internal_145 <- ARRAY internal_131[internal_143]
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 196($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 140($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_145]
		lw $t0, 152($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# IF internal_147 THEN GOTO update_min_8739869361987
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869361987
		
		# JUMP TO update_min_end_8739869361987
		j update_min_end_8739869361987
		
		update_min_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_145]
		lw $t0, 152($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_144]
		lw $t0, 156($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_143]
		lw $t0, 160($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_143]
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_120]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869361987
		j foreach_min_start_8739869361987
		
		foreach_min_end_8739869361987:
		
		# INITIALIZE ARRAY [internal_121]
		lw $t0, 236($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 128($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# ARRAY internal_148[internal_149] <- internal_119
		lw $t0, 124($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 128($sp)
		add $t1, $t1, $t0
		lw $t0, 244($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# ARRAY internal_148[internal_150] <- internal_119
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 128($sp)
		add $t1, $t1, $t0
		lw $t0, 244($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_123]
		lw $t0, 240($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# IF internal_151 THEN GOTO error_branch_8739869361987
		lw $t0, 116($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869361987
		
		# ARRAY internal_148[internal_144] <- internal_120
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 128($sp)
		add $t1, $t1, $t0
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# internal_152 <- ARRAY internal_148[internal_153]
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 128($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 112($sp)
		sw $t0, 8($t2)
		
		# IF internal_152 THEN GOTO branch_Razz_8739869361987
		lw $t0, 112($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869361987
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# internal_152 <- ARRAY internal_148[internal_154]
		lw $t0, 104($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 128($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 112($sp)
		sw $t0, 8($t2)
		
		# IF internal_152 THEN GOTO branch_Bar_8739869361987
		lw $t0, 112($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869361987
		
		branch_Razz_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_157]
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_155]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_157]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# internal_155 <- internal_157
		lw $t0, 92($sp)
		sw $t0, 100($sp)
		
		# JUMP TO branch_end_8739869361987
		j branch_end_8739869361987
		
		branch_Bar_8739869361987:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 736($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_155]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 548($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# internal_155 <- n
		lw $t0, 536($sp)
		sw $t0, 100($sp)
		
		# JUMP TO branch_end_8739869361987
		j branch_end_8739869361987
		
		error_branch_8739869361987:
		
		branch_end_8739869361987:
		
		# SET ATTRIBUTE e OF self
		lw $t0, 724($sp)
		lw $t1, 100($sp)
		beq $t1, $zero, object_set_attribute_8739869295520
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869295520
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869295520
		j object_set_attribute_8739869295520
		int_set_attribute_8739869295520:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0)
		j end_set_attribute_8739869295520
		bool_set_attribute_8739869295520:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0)
		j end_set_attribute_8739869295520
		object_set_attribute_8739869295520:
		sw $t1, 28($t0)
		end_set_attribute_8739869295520:
		
		# GET ATTRIBUTE a OF self
		lw $t0, 724($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869298429
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869298429
		j object_get_attribute_8739869298429
		int_get_attribute_8739869298429:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp)
		j end_get_attribute_8739869298429
		bool_get_attribute_8739869298429:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp)
		j end_get_attribute_8739869298429
		object_get_attribute_8739869298429:
		sw $t1, 84($sp)
		end_get_attribute_8739869298429:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# GET METHOD doh OF Bazz
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 76($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 72($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_159]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_doh_at_Bazz
		jal function_doh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE g OF self
		lw $t0, 724($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869298743
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869298743
		j object_get_attribute_8739869298743
		int_get_attribute_8739869298743:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8739869298743
		bool_get_attribute_8739869298743:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8739869298743
		object_get_attribute_8739869298743:
		sw $t1, 68($sp)
		end_get_attribute_8739869298743:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# GET METHOD doh OF Foo
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 60($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 56($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_163]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_166
		lw $t0, 64($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_160]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_164]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE e OF self
		lw $t0, 724($sp)
		lw $t1, 28($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869298812
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869298812
		j object_get_attribute_8739869298812
		int_get_attribute_8739869298812:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8739869298812
		bool_get_attribute_8739869298812:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8739869298812
		object_get_attribute_8739869298812:
		sw $t1, 48($sp)
		end_get_attribute_8739869298812:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD doh OF Bar
		lw $t0, 48($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_168]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_171
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_167]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_169]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD doh OF Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 732($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_175
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_172]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_173]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD printh OF Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 732($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_179
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_176]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_177]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE f OF self
		lw $t0, 724($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8739869298339
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869298339
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869298339
		j object_set_attribute_8739869298339
		int_set_attribute_8739869298339:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0)
		j end_set_attribute_8739869298339
		bool_set_attribute_8739869298339:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0)
		j end_set_attribute_8739869298339
		object_set_attribute_8739869298339:
		sw $t1, 32($t0)
		end_set_attribute_8739869298339:
		
		lw $v1, 724($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 724
		
		jr $ra
		
	function___init___at_Bazz:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -224
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 220($sp)
		
		# SET ATTRIBUTE h OF self
		lw $t0, 224($sp)
		lw $t1, 220($sp)
		beq $t1, $zero, object_set_attribute_8739869299261
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869299261
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869299261
		j object_set_attribute_8739869299261
		int_set_attribute_8739869299261:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869299261
		bool_set_attribute_8739869299261:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869299261
		object_set_attribute_8739869299261:
		sw $t1, 8($t0)
		end_set_attribute_8739869299261:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATING NUll INTO -> internal_4
		sw $zero, 204($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# internal_7 <- TYPEOF self
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		sw $t0, 192($sp)
		
		# internal_8 <- internal_7
		lw $t0, 192($sp)
		sw $t0, 188($sp)
		
		while_start_8739869343037:
		
		# internal_6 <- EQUALADDRESS (internal_8, internal_4)
		lw $t0, 188($sp)
		lw $t1, 204($sp)
		seq $t2, $t0, $t1
		lw $t0, 196($sp)
		sw $t2, 8($t0)
		
		# IF internal_6 THEN GOTO while_end_8739869343037
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8739869343037
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 188($sp)
		lw $t0, 4($t0)
		sw $t0, 188($sp)
		
		# JUMP TO while_start_8739869343037
		j while_start_8739869343037
		
		while_end_8739869343037:
		
		# internal_8 <- internal_7
		lw $t0, 192($sp)
		sw $t0, 188($sp)
		
		# INITIALIZE ARRAY [internal_5]
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 184($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		foreach_start_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 192($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 12
		
		# IF internal_11 THEN GOTO foreach_body_8739869343037
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8739869343037
		
		# JUMP TO foreach_end_8739869343037
		j foreach_end_8739869343037
		
		foreach_body_8739869343037:
		
		# ARRAY internal_9[internal_10] <- internal_8
		lw $t0, 180($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 184($sp)
		add $t1, $t1, $t0
		lw $t0, 188($sp)
		sw $t0, 0($t1)
		
		# internal_8 <- ANCESTOR OF internal_8
		lw $t0, 188($sp)
		lw $t0, 4($t0)
		sw $t0, 188($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 192($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8739869343037
		j foreach_start_8739869343037
		
		foreach_end_8739869343037:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 172($sp)
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 168($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# internal_14 <- DIRECTION OF Bazz
		la $t0, type_Bazz
		sw $t0, 164($sp)
		
		# ARRAY internal_12[internal_15] <- internal_14
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 164($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_15] <- internal_5
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 168($sp)
		add $t1, $t1, $t0
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# internal_16 <- DIRECTION OF Razz
		la $t0, type_Razz
		sw $t0, 156($sp)
		
		# ARRAY internal_12[internal_17] <- internal_16
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 156($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_17] <- internal_5
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 168($sp)
		add $t1, $t1, $t0
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# internal_18 <- DIRECTION OF Foo
		la $t0, type_Foo
		sw $t0, 148($sp)
		
		# ARRAY internal_12[internal_19] <- internal_18
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 148($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_19] <- internal_5
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 168($sp)
		add $t1, $t1, $t0
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# internal_20 <- DIRECTION OF Bar
		la $t0, type_Bar
		sw $t0, 140($sp)
		
		# ARRAY internal_12[internal_21] <- internal_20
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 140($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_13[internal_21] <- internal_5
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 168($sp)
		add $t1, $t1, $t0
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		foreach_type_start_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 220($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp)
		addi $sp, $sp, 12
		
		# IF internal_23 THEN GOTO foreach_type_body_8739869343037
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8739869343037
		
		# JUMP TO foreach_type_end_8739869343037
		j foreach_type_end_8739869343037
		
		foreach_type_body_8739869343037:
		
		# internal_24 <- ARRAY internal_12[internal_22]
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 172($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 124($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 THEN GOTO foreach_ancestor_body_8739869343037
		lw $t0, 116($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8739869343037
		
		# JUMP TO foreach_ancestor_end_8739869343037
		j foreach_ancestor_end_8739869343037
		
		foreach_ancestor_body_8739869343037:
		
		# internal_27 <- ARRAY internal_9[internal_25]
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 184($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 112($sp)
		
		# internal_28 <- EQUALADDRESS (internal_24, internal_27)
		lw $t0, 124($sp)
		lw $t1, 112($sp)
		seq $t2, $t0, $t1
		lw $t0, 108($sp)
		sw $t2, 8($t0)
		
		# IF internal_28 THEN GOTO foreach_ancestor_end_8739869343037
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8739869343037
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8739869343037
		j foreach_ancestor_start_8739869343037
		
		foreach_ancestor_end_8739869343037:
		
		# ARRAY internal_13[internal_22] <- internal_25
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 168($sp)
		add $t1, $t1, $t0
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 144($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8739869343037
		j foreach_type_start_8739869343037
		
		foreach_type_end_8739869343037:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 220($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO foreach_min_body_8739869343037
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8739869343037
		
		# JUMP TO foreach_min_end_8739869343037
		j foreach_min_end_8739869343037
		
		foreach_min_body_8739869343037:
		
		# internal_31 <- ARRAY internal_13[internal_29]
		lw $t0, 104($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 168($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 96($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# IF internal_33 THEN GOTO update_min_8739869343037
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8739869343037
		
		# JUMP TO update_min_end_8739869343037
		j update_min_end_8739869343037
		
		update_min_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		update_min_end_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8739869343037
		j foreach_min_start_8739869343037
		
		foreach_min_end_8739869343037:
		
		# INITIALIZE ARRAY [internal_3]
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 84($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# ARRAY internal_34[internal_35] <- internal_1
		lw $t0, 80($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# ARRAY internal_34[internal_36] <- internal_1
		lw $t0, 76($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# ARRAY internal_34[internal_37] <- internal_1
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ARRAY internal_34[internal_38] <- internal_1
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# IF internal_39 THEN GOTO error_branch_8739869343037
		lw $t0, 64($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8739869343037
		
		# ARRAY internal_34[internal_30] <- internal_2
		lw $t0, 100($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# internal_40 <- ARRAY internal_34[internal_41]
		lw $t0, 56($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bazz_8739869343037
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bazz_8739869343037
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# internal_40 <- ARRAY internal_34[internal_42]
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Razz_8739869343037
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Razz_8739869343037
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# internal_40 <- ARRAY internal_34[internal_43]
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Foo_8739869343037
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Foo_8739869343037
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# internal_40 <- ARRAY internal_34[internal_44]
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 84($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 60($sp)
		sw $t0, 8($t2)
		
		# IF internal_40 THEN GOTO branch_Bar_8739869343037
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Bar_8739869343037
		
		branch_Bazz_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_47
		lw $t0, 32($sp)
		sw $t0, 40($sp)
		
		# JUMP TO branch_end_8739869343037
		j branch_end_8739869343037
		
		branch_Razz_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_49
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# JUMP TO branch_end_8739869343037
		j branch_end_8739869343037
		
		branch_Foo_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- internal_51
		lw $t0, 16($sp)
		sw $t0, 40($sp)
		
		# JUMP TO branch_end_8739869343037
		j branch_end_8739869343037
		
		branch_Bar_8739869343037:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [n]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [n]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_45 <- n
		lw $t0, 36($sp)
		sw $t0, 40($sp)
		
		# JUMP TO branch_end_8739869343037
		j branch_end_8739869343037
		
		error_branch_8739869343037:
		
		branch_end_8739869343037:
		
		# SET ATTRIBUTE g OF self
		lw $t0, 224($sp)
		lw $t1, 40($sp)
		beq $t1, $zero, object_set_attribute_8739869299285
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869299285
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869299285
		j object_set_attribute_8739869299285
		int_set_attribute_8739869299285:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869299285
		bool_set_attribute_8739869299285:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869299285
		object_set_attribute_8739869299285:
		sw $t1, 12($t0)
		end_set_attribute_8739869299285:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD printh OF Bazz
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE i OF self
		lw $t0, 224($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8739869326035
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869326035
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869326035
		j object_set_attribute_8739869326035
		int_set_attribute_8739869326035:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869326035
		bool_set_attribute_8739869326035:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869326035
		object_set_attribute_8739869326035:
		sw $t1, 16($t0)
		end_set_attribute_8739869326035:
		
		lw $v1, 224($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 224
		
		jr $ra
		
	function_printh_at_Bazz:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -20
		
		# GET ATTRIBUTE h OF self
		lw $t0, 20($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869325918
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869325918
		j object_get_attribute_8739869325918
		int_get_attribute_8739869325918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8739869325918
		bool_get_attribute_8739869325918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8739869325918
		object_get_attribute_8739869325918:
		sw $t1, 16($sp)
		end_get_attribute_8739869325918:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD out_int OF Bazz
		lw $t0, 20($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 16($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 20
		
		jr $ra
		
	function_doh_at_Bazz:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -20
		
		# GET ATTRIBUTE h OF self
		lw $t0, 20($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869355397
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869355397
		j object_get_attribute_8739869355397
		int_get_attribute_8739869355397:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8739869355397
		bool_get_attribute_8739869355397:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8739869355397
		object_get_attribute_8739869355397:
		sw $t1, 12($sp)
		end_get_attribute_8739869355397:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE h OF self
		lw $t0, 20($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8739869355346
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8739869355346
		j object_get_attribute_8739869355346
		int_get_attribute_8739869355346:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp)
		j end_get_attribute_8739869355346
		bool_get_attribute_8739869355346:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp)
		j end_get_attribute_8739869355346
		object_get_attribute_8739869355346:
		sw $t1, 8($sp)
		end_get_attribute_8739869355346:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 20($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE h OF self
		lw $t0, 20($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8739869355496
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869355496
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869355496
		j object_set_attribute_8739869355496
		int_set_attribute_8739869355496:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869355496
		bool_set_attribute_8739869355496:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869355496
		object_set_attribute_8739869355496:
		sw $t1, 8($t0)
		end_set_attribute_8739869355496:
		
		lw $v1, 16($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 20
		
		jr $ra
		
	function___init___at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> Bazz
		li $v0, 9
		lw $a0, type_Bazz
		syscall
		la $t0, type_Bazz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bazz
		jal function___init___at_Bazz
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE a OF self
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		beq $t1, $zero, object_set_attribute_8739869355379
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869355379
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869355379
		j object_set_attribute_8739869355379
		int_set_attribute_8739869355379:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869355379
		bool_set_attribute_8739869355379:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8739869355379
		object_set_attribute_8739869355379:
		sw $t1, 8($t0)
		end_set_attribute_8739869355379:
		
		# ALLOCATING -> Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 8($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE b OF self
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8739869355307
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869355307
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869355307
		j object_set_attribute_8739869355307
		int_set_attribute_8739869355307:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869355307
		bool_set_attribute_8739869355307:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8739869355307
		object_set_attribute_8739869355307:
		sw $t1, 12($t0)
		end_set_attribute_8739869355307:
		
		# ALLOCATING -> Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE c OF self
		lw $t0, 16($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8739869355271
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869355271
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869355271
		j object_set_attribute_8739869355271
		int_set_attribute_8739869355271:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869355271
		bool_set_attribute_8739869355271:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8739869355271
		object_set_attribute_8739869355271:
		sw $t1, 16($t0)
		end_set_attribute_8739869355271:
		
		# ALLOCATING -> Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 8($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 8($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE d OF self
		lw $t0, 16($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8739869354548
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8739869354548
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8739869354548
		j object_set_attribute_8739869354548
		int_set_attribute_8739869354548:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869354548
		bool_set_attribute_8739869354548:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8739869354548
		object_set_attribute_8739869354548:
		sw $t1, 20($t0)
		end_set_attribute_8739869354548:
		
		lw $v1, 16($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_main_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 19
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 19
		sw $t0, 4($v0)
		
		addi $t0, $zero, 100
		sb $t0, 8($v0)
		
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 110
		sb $t0, 11($v0)
		
		addi $t0, $zero, 111
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 104
		sb $t0, 14($v0)
		
		addi $t0, $zero, 105
		sb $t0, 15($v0)
		
		addi $t0, $zero, 110
		sb $t0, 16($v0)
		
		addi $t0, $zero, 103
		sb $t0, 17($v0)
		
		sb $zero, 18($v0)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# EXIT!
		li $v0, 10
		syscall
		
		