.data
	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_Foo: .word 68
	type_Foo_inherits_from: .word type_Bazz
	type_Foo_name_address: .word type_Foo_name_size
	type_Foo___init__: .word function___init___at_Foo
	type_Foo_abort: .word function_abort_at_Object
	type_Foo_type_name: .word function_type_name_at_Object
	type_Foo_copy: .word function_copy_at_Object
	type_Foo_out_string: .word function_out_string_at_IO
	type_Foo_out_int: .word function_out_int_at_IO
	type_Foo_in_string: .word function_in_string_at_IO
	type_Foo_in_int: .word function_in_int_at_IO
	type_Foo_printh: .word function_printh_at_Bazz
	type_Foo_doh: .word function_doh_at_Foo
	
	type_Bar: .word 84
	type_Bar_inherits_from: .word type_Razz
	type_Bar_name_address: .word type_Bar_name_size
	type_Bar___init__: .word function___init___at_Bar
	type_Bar_abort: .word function_abort_at_Object
	type_Bar_type_name: .word function_type_name_at_Object
	type_Bar_copy: .word function_copy_at_Object
	type_Bar_out_string: .word function_out_string_at_IO
	type_Bar_out_int: .word function_out_int_at_IO
	type_Bar_in_string: .word function_in_string_at_IO
	type_Bar_in_int: .word function_in_int_at_IO
	type_Bar_printh: .word function_printh_at_Bazz
	type_Bar_doh: .word function_doh_at_Foo
	
	type_Razz: .word 76
	type_Razz_inherits_from: .word type_Foo
	type_Razz_name_address: .word type_Razz_name_size
	type_Razz___init__: .word function___init___at_Razz
	type_Razz_abort: .word function_abort_at_Object
	type_Razz_type_name: .word function_type_name_at_Object
	type_Razz_copy: .word function_copy_at_Object
	type_Razz_out_string: .word function_out_string_at_IO
	type_Razz_out_int: .word function_out_int_at_IO
	type_Razz_in_string: .word function_in_string_at_IO
	type_Razz_in_int: .word function_in_int_at_IO
	type_Razz_printh: .word function_printh_at_Bazz
	type_Razz_doh: .word function_doh_at_Foo
	
	type_Bazz: .word 60
	type_Bazz_inherits_from: .word type_IO
	type_Bazz_name_address: .word type_Bazz_name_size
	type_Bazz___init__: .word function___init___at_Bazz
	type_Bazz_abort: .word function_abort_at_Object
	type_Bazz_type_name: .word function_type_name_at_Object
	type_Bazz_copy: .word function_copy_at_Object
	type_Bazz_out_string: .word function_out_string_at_IO
	type_Bazz_out_int: .word function_out_int_at_IO
	type_Bazz_in_string: .word function_in_string_at_IO
	type_Bazz_in_int: .word function_in_int_at_IO
	type_Bazz_printh: .word function_printh_at_Bazz
	type_Bazz_doh: .word function_doh_at_Bazz
	
	type_Main: .word 44
	type_Main_inherits_from: .word type_Object
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Foo_name_size: .word 3
	type_Foo_name: .asciiz "Foo"
	
	type_Bar_name_size: .word 3
	type_Bar_name: .asciiz "Bar"
	
	type_Razz_name_size: .word 4
	type_Razz_name: .asciiz "Razz"
	
	type_Bazz_name_size: .word 4
	type_Bazz_name: .asciiz "Bazz"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	function_add:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Addition operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		add $t2, $t0, $t1 # $t2 = $t0 + $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Subtraction operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sub $t2, $t0, $t1 # $t2 = $t0 - $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Multiplication operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		mult $t0, $t1 # $t2 = $t0 * $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Division operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		div $t0, $t1 # $t2 = $t0 / $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Xor operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		xor $t2, $t0, $t1 # $t0 = $t0 ^ $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		slt $t2, $t0, $t1 # $t2 = $t0 < $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sle $t2, $t0, $t1 # $t2 = $t0 <= $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# Function parameters
		#   $ra = 48($sp)
		#   a = 44($sp)
		#   b = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_0 = address of allocated object Int
		
		# Allocating NUll to internal_1
		sw $zero, 32($sp) # internal_1 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_2 = address of allocated object Int
		
		# internal_2 = EqualAddress(a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 = EqualAddress(b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# If internal_2 then goto a_is_type_object
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_object
		
		# internal_3 = typeof a that is the first word of the object
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 = direction of Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 = direction of Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 = direction of String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_7 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_8 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_9 = address of allocated object Int
		
		# internal_7 = EqualAddress(internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 = EqualAddress(internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 = EqualAddress(internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_7 then goto a_is_type_int_or_bool
		lw $t0, 8($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_8 then goto a_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_9 then goto a_is_type_string
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_string
		
		# Jumping to a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 = EqualInt(a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 = EqualStr(a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		# By default we assume the strings are equals
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		# The strings are no equals
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# Equal operation
		lw $t0, 44($sp) # Save in $t0 the left operand address
		lw $t1, 40($sp) # Save in $t1 the right operand address
		seq $t2, $t0, $t1 # $t2 = $t0 == $t1
		
		lw $t0, 36($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Jumping to end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# Function parameters
		#   $ra = 36($sp)
		#   dest = 32($sp)
		#   source = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating NUll to internal_0
		sw $zero, 24($sp) # internal_0 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_1 = address of allocated object Int
		
		# internal_1 = EqualAddress(source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 = EqualAddress(dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# If internal_1 then goto source_is_type_object
		lw $t0, 20($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_object
		
		# internal_2 = typeof source that is the first word of the object
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 = direction of Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 = direction of Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_6 = address of allocated object Int
		
		# internal_5 = EqualAddress(internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 = EqualAddress(internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto source_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# If internal_6 then goto source_is_type_int_or_bool
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# Jumping to source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest = source where source is an integer
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp) # Pointer to source
		lw $t1, 0($t0) # $t1 = type of source
		lw $t2, 8($t0) # $t2 = value of source
		sw $t1, 0($v0) # Save type of dest
		sw $a0, 4($v0) # Save size of dest
		sw $t2, 8($v0) # Save value of dest
		sw $v0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest = source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 32($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# Function parameters
		#   $ra = 28($sp)
		#   self = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 33
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 65
		sb $t0, 8($v0) # internal_0[0] = 'A'
		
		addi $t0, $zero, 98
		sb $t0, 9($v0) # internal_0[1] = 'b'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_0[2] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_0[3] = 'r'
		
		addi $t0, $zero, 116
		sb $t0, 12($v0) # internal_0[4] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_0[5] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 14($v0) # internal_0[6] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_0[7] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_0[8] = 'l'
		
		addi $t0, $zero, 108
		sb $t0, 17($v0) # internal_0[9] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_0[10] = 'e'
		
		addi $t0, $zero, 100
		sb $t0, 19($v0) # internal_0[11] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_0[12] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 21($v0) # internal_0[13] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 22($v0) # internal_0[14] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_0[15] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 24($v0) # internal_0[16] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_0[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_0[18] = 'c'
		
		addi $t0, $zero, 108
		sb $t0, 27($v0) # internal_0[19] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_0[20] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 29($v0) # internal_0[21] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_0[22] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_0[23] = ' '
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_0 = "Abort called from class "
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_3[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 8($sp) # internal_3 = "\n"
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method type_name of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp) # internal_1 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_0
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 12($sp) # $t0 = internal_2
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Exit program
		li $v0, 10
		syscall
		
		# Loading return value in $v1
		lw $v1, 24($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = name of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 8($t1) # $t2 = direction of the type name
		la $t3, 4($t2) # $t3 = address of the name
		lw $t2, 0($t2) # $t2 = length of the name
		
		addi $t2, $t2, 9 # Setting space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9 # Restoring space for the type, the size and the null byte
		
		la $t4, type_String
		sw $t4, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t4, $v0, 0 # $t4 = direction of the new string
		addi $t4, $t4, 8 # Pointer to the first character of the string
		xor $t5, $t5, $t5 # Initializing counter
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3) # Loading the character
		sb $t6, 0($t4)
		addi $t4, $t4, 1 # Incrementing the pointer to the new string
		addi $t3, $t3, 1 # Incrementing the pointer to the string in self
		addi $t5, $t5, 1 # Incrementing counter
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4) # Setting the null byte
		
		sw $v0, 0($sp) # Storing the new string in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = copy of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 4($t0) # $t2 = length of self in bytes
		
		# Allocating space for the new object
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0 # $t3 = direction of the new object
		sw $t1, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		# Initializing the variable of the loop
		addi $t0, $t0, 8 # Pointer to the first character of the object
		addi $t3, $t3, 8 # Pointer to the first character of the object
		addi $t2, $2, -8 # Decrementing in 8 the length of the object
		xor $t4, $t4, $t4 # Initializing counter
		
		# Loop copying the object
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t0, $t0, 1 # Incrementing the pointer to the object
		addi $t3, $t3, 1 # Incrementing the pointer to the new object
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		lw $t0, 0($sp) # $t0 = x
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String x
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		# Printing the Int x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0 # Initializing counter
		while_read_start:
		lb $t1, buffer_input($t0) # Loading the byte
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1 # Incrementing counter
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9 # Adding space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9 # Adding space for the type, the size and the null byte
		la $t2, type_String
		sw $t2, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t3, $v0, 8 # Pointer to the first character of the string
		xor $t4, $t4, $t4 # Initializing counter
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t3, $t3, 1 # Imcremeenting pointer
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3) # Storing the null byte
		
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# internal_0 = length of self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9 # Subtracting 9 for the type, length, and null-terminator
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   s = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0) # $t2 = length of str1
		lw $t3, 4($t1) # $t3 = length of str2
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3 # $t4 = length of str1 + str2
		addi $t4, $t4, 9 # Adding the space for the type (4bytes), the length(4bytes) and the null-terminator(1byte)
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9 # Restoring $t4 = length of str1 + str2
		add $t5, $zero, $v0 # $t5 = address of the new string object
		addi $t5, $t5, 8 # $t5 = address of the first byte of the new string
		
		la $t8, type_String
		sw $t8, 0($v0) # Setting type in the first word of th object
		
		sw $a0, 4($v0) # Setting length of the string in the second word of the object
		
		# Copying str1 to the new string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str1_start
		while_copy_str1_end:
		
		# Copying str2 to the new string
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self + s
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		#   i = 8($sp)
		#   l = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self[i:i + l]
		lw $t0, 12($sp) # $t0 = address of the string
		lw $t1, 4($t0) # $t1 = length of the string
		addi $t1, $t1, -9 # $t1 = length of the string + 9
		lw $t2, 8($sp) # $t2 = start of the substring
		lw $t2, 8($t2)
		lw $t3, 4($sp) # $t3 = length of the substring
		lw $t3, 8($t3)
		add $t4, $t2, $t3 # $t4 = start of the substring + length of the substring
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0) # Setting type in the first word of the object
		
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t0, $t0, 8 # pointing to the first byte of the string
		add $t0, $t0, $t2 # pointing to the first byte of the substring
		move $t5, $v0 # $t5 = address of the new string
		add $t5, $t5, 8 # pointing to the first byte of the string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of the string
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self[i:i + l]
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Foo:
		# Function parameters
		#   $ra = 480($sp)
		#   self = 476($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -476
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 472($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 476($sp) # $t0 = self
		lw $t1, 472($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8794484661456
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484661456
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484661456
		j object_set_attribute_8794484661456
		int_set_attribute_8794484661456:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484661456
		bool_set_attribute_8794484661456:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484661456
		object_set_attribute_8794484661456:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8794484661456:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 468($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 464($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 460($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 456($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 452($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 440($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		sw $t0, 448($sp)
		
		# internal_7 = internal_6
		lw $t0, 448($sp)
		sw $t0, 444($sp)
		
		while_start_8794484741346:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 444($sp)
		lw $t1, 456($sp)
		seq $t2, $t0, $t1
		lw $t0, 440($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8794484741346
		lw $t0, 440($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484741346
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 464($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 464($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 444($sp)
		lw $t0, 4($t0)
		sw $t0, 444($sp)
		
		# Jumping to while_start_8794484741346
		j while_start_8794484741346
		
		while_end_8794484741346:
		
		# internal_7 = internal_6
		lw $t0, 448($sp)
		sw $t0, 444($sp)
		
		# initialize Array [internal_5]
		lw $t0, 452($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 436($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 432($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 428($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 444($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 440($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8794484741346
		lw $t0, 428($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484741346
		
		# Jumping to foreach_end_8794484741346
		j foreach_end_8794484741346
		
		foreach_body_8794484741346:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 432($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 436($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 444($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 444($sp)
		lw $t0, 4($t0)
		sw $t0, 444($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 444($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 444($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484741346
		j foreach_start_8794484741346
		
		foreach_end_8794484741346:
		
		# initialize Array [internal_3]
		lw $t0, 460($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 424($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 460($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 420($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 412($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 416($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 412($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 424($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 416($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 412($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 420($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 404($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 408($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 404($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 424($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 408($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 404($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 420($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 396($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 400($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 396($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 424($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 400($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 396($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 420($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 388($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 392($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 388($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 424($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 392($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 388($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 420($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 384($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 380($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 368($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 360($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 396($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 472($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 392($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8794484741346
		lw $t0, 380($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484741346
		
		# Jumping to foreach_type_end_8794484741346
		j foreach_type_end_8794484741346
		
		foreach_type_body_8794484741346:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 384($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 424($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 376($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 384($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 480($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 384($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 384($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 380($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8794484741346
		lw $t0, 368($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484741346
		
		# Jumping to foreach_ancestor_end_8794484741346
		j foreach_ancestor_end_8794484741346
		
		foreach_ancestor_body_8794484741346:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 372($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 436($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 364($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 376($sp)
		lw $t1, 364($sp)
		seq $t2, $t0, $t1
		lw $t0, 360($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8794484741346
		lw $t0, 360($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484741346
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 384($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 384($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484741346
		j foreach_ancestor_start_8794484741346
		
		foreach_ancestor_end_8794484741346:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 384($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 420($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 372($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 396($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 396($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484741346
		j foreach_type_start_8794484741346
		
		foreach_type_end_8794484741346:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 352($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 348($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 344($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 340($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 356($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 356($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 368($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 472($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 352($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8794484741346
		lw $t0, 340($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484741346
		
		# Jumping to foreach_min_end_8794484741346
		j foreach_min_end_8794484741346
		
		foreach_min_body_8794484741346:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 356($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 420($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 348($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 360($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 356($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 352($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8794484741346
		lw $t0, 340($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484741346
		
		# Jumping to update_min_end_8794484741346
		j update_min_end_8794484741346
		
		update_min_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 356($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 360($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 356($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 364($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 368($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 364($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 368($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 368($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484741346
		j foreach_min_start_8794484741346
		
		foreach_min_end_8794484741346:
		
		# initialize Array [internal_3]
		lw $t0, 460($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 336($sp) # internal_34 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 332($sp) # internal_35 = address of allocated object Int
		
		# array internal_34[4 * internal_35] = internal_1
		lw $t0, 332($sp) # $t0 = internal_35
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_36 = address of allocated object Int
		
		# array internal_34[4 * internal_36] = internal_1
		lw $t0, 328($sp) # $t0 = internal_36
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 324($sp) # internal_37 = address of allocated object Int
		
		# array internal_34[4 * internal_37] = internal_1
		lw $t0, 324($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 320($sp) # internal_38 = address of allocated object Int
		
		# array internal_34[4 * internal_38] = internal_1
		lw $t0, 320($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 468($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 316($sp) # internal_39 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 356($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 464($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 328($sp) # internal_39 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_39 then goto error_branch_8794484741346
		lw $t0, 316($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484741346
		
		# array internal_34[4 * internal_30] = internal_2
		lw $t0, 352($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 464($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_40 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 308($sp) # internal_41 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_41]
		lw $t0, 308($sp) # $t0 = internal_41
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 312($sp) # internal_40 = array internal_34[4 * internal_41]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bazz_8794484741346
		lw $t0, 312($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8794484741346
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 304($sp) # internal_42 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_42]
		lw $t0, 304($sp) # $t0 = internal_42
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 312($sp) # internal_40 = array internal_34[4 * internal_42]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Razz_8794484741346
		lw $t0, 312($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484741346
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 300($sp) # internal_43 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_43]
		lw $t0, 300($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 312($sp) # internal_40 = array internal_34[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Foo_8794484741346
		lw $t0, 312($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8794484741346
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_44 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_44]
		lw $t0, 296($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 336($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 312($sp) # internal_40 = array internal_34[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bar_8794484741346
		lw $t0, 312($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484741346
		
		branch_Bazz_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 284($sp) # internal_47 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 292($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 292($sp) # internal_47 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_47
		lw $t0, 296($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_47
		lw $t0, 284($sp)
		sw $t0, 292($sp)
		
		# Jumping to branch_end_8794484741346
		j branch_end_8794484741346
		
		branch_Razz_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 276($sp) # internal_49 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 284($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 284($sp) # internal_49 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_49
		lw $t0, 288($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_49
		lw $t0, 276($sp)
		sw $t0, 292($sp)
		
		# Jumping to branch_end_8794484741346
		j branch_end_8794484741346
		
		branch_Foo_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 268($sp) # internal_51 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 276($sp) # internal_51 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_51
		lw $t0, 280($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_51
		lw $t0, 268($sp)
		sw $t0, 292($sp)
		
		# Jumping to branch_end_8794484741346
		j branch_end_8794484741346
		
		branch_Bar_8794484741346:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = n
		lw $t0, 288($sp)
		sw $t0, 292($sp)
		
		# Jumping to branch_end_8794484741346
		j branch_end_8794484741346
		
		error_branch_8794484741346:
		
		branch_end_8794484741346:
		
		# Set attribute g of self
		lw $t0, 476($sp) # $t0 = self
		lw $t1, 292($sp) # $t1 = internal_45
		beq $t1, $zero, object_set_attribute_8794484661477
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484661477
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484661477
		j object_set_attribute_8794484661477
		int_set_attribute_8794484661477:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484661477
		bool_set_attribute_8794484661477:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484661477
		object_set_attribute_8794484661477:
		sw $t1, 12($t0) # self.g = internal_45
		end_set_attribute_8794484661477:
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 256($sp) # internal_54 = address of allocated object Int
		
		# Get method printh of Foo
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 256($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 252($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_55
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 268($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 476($sp) # $t0 = self
		lw $t1, 260($sp) # $t1 = internal_53
		beq $t1, $zero, object_set_attribute_8794484666103
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484666103
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484666103
		j object_set_attribute_8794484666103
		int_set_attribute_8794484666103:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484666103
		bool_set_attribute_8794484666103:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484666103
		object_set_attribute_8794484666103:
		sw $t1, 16($t0) # self.i = internal_53
		end_set_attribute_8794484666103:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 248($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 244($sp) # internal_57 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 240($sp) # internal_58 = address of allocated object Int
		
		# Allocating NUll to internal_59
		sw $zero, 236($sp) # internal_59 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_60 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 220($sp) # internal_63 = address of allocated object Int
		
		# internal_61 = typeof self that is the first word of the object
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		sw $t0, 228($sp)
		
		# internal_62 = internal_61
		lw $t0, 228($sp)
		sw $t0, 224($sp)
		
		while_start_8794484748198:
		
		# internal_63 = EqualAddress(internal_62, internal_59)
		lw $t0, 224($sp)
		lw $t1, 236($sp)
		seq $t2, $t0, $t1
		lw $t0, 220($sp)
		sw $t2, 8($t0)
		
		# If internal_63 then goto while_end_8794484748198
		lw $t0, 220($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484748198
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_60
		lw $t0, 244($sp)
		sw $t0, 4($sp) # Storing internal_60
		
		# Argument internal_57
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 244($sp) # internal_60 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_62 = ancestor of internal_62
		lw $t0, 224($sp)
		lw $t0, 4($t0)
		sw $t0, 224($sp)
		
		# Jumping to while_start_8794484748198
		j while_start_8794484748198
		
		while_end_8794484748198:
		
		# internal_62 = internal_61
		lw $t0, 228($sp)
		sw $t0, 224($sp)
		
		# initialize Array [internal_60]
		lw $t0, 232($sp) # $t0 = internal_60
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 216($sp) # internal_64 = new Array[internal_60]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_65 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_66 = address of allocated object Int
		
		foreach_start_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 224($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_60
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 220($sp) # internal_66 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_66 then goto foreach_body_8794484748198
		lw $t0, 208($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484748198
		
		# Jumping to foreach_end_8794484748198
		j foreach_end_8794484748198
		
		foreach_body_8794484748198:
		
		# array internal_64[4 * internal_65] = internal_62
		lw $t0, 212($sp) # $t0 = internal_65
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 216($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 224($sp)
		sw $t0, 0($t1)
		
		# internal_62 = ancestor of internal_62
		lw $t0, 224($sp)
		lw $t0, 4($t0)
		sw $t0, 224($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 224($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_57
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 224($sp) # internal_65 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484748198
		j foreach_start_8794484748198
		
		foreach_end_8794484748198:
		
		# initialize Array [internal_58]
		lw $t0, 240($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 204($sp) # internal_67 = new Array[internal_58]
		
		# initialize Array [internal_58]
		lw $t0, 240($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 200($sp) # internal_68 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_70 = address of allocated object Int
		
		# internal_69 = direction of Razz
		la $t0, type_Razz
		sw $t0, 196($sp)
		
		# array internal_67[4 * internal_70] = internal_69
		lw $t0, 192($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 204($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 196($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_70] = internal_60
		lw $t0, 192($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_72 = address of allocated object Int
		
		# internal_71 = direction of Foo
		la $t0, type_Foo
		sw $t0, 188($sp)
		
		# array internal_67[4 * internal_72] = internal_71
		lw $t0, 184($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 204($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 188($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_72] = internal_60
		lw $t0, 184($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_74 = address of allocated object Int
		
		# internal_73 = direction of Bar
		la $t0, type_Bar
		sw $t0, 180($sp)
		
		# array internal_67[4 * internal_74] = internal_73
		lw $t0, 176($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 204($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 180($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_74] = internal_60
		lw $t0, 176($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_75 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_78 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_79 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_81 = address of allocated object Int
		
		foreach_type_start_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 184($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_58
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 180($sp) # internal_76 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_76 then goto foreach_type_body_8794484748198
		lw $t0, 168($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484748198
		
		# Jumping to foreach_type_end_8794484748198
		j foreach_type_end_8794484748198
		
		foreach_type_body_8794484748198:
		
		# internal_77 = array internal_67[4 * internal_75]
		lw $t0, 172($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 204($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 164($sp) # internal_77 = array internal_67[4 * internal_75]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_56
		lw $t0, 260($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_78 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_60
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 168($sp) # internal_79 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_79 then goto foreach_ancestor_body_8794484748198
		lw $t0, 156($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484748198
		
		# Jumping to foreach_ancestor_end_8794484748198
		j foreach_ancestor_end_8794484748198
		
		foreach_ancestor_body_8794484748198:
		
		# internal_80 = array internal_64[4 * internal_78]
		lw $t0, 160($sp) # $t0 = internal_78
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 216($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 152($sp) # internal_80 = array internal_64[4 * internal_78]
		
		# internal_81 = EqualAddress(internal_77, internal_80)
		lw $t0, 164($sp)
		lw $t1, 152($sp)
		seq $t2, $t0, $t1
		lw $t0, 148($sp)
		sw $t2, 8($t0)
		
		# If internal_81 then goto foreach_ancestor_end_8794484748198
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484748198
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_57
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484748198
		j foreach_ancestor_start_8794484748198
		
		foreach_ancestor_end_8794484748198:
		
		# array internal_68[4 * internal_75] = internal_78
		lw $t0, 172($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 184($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_57
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 184($sp) # internal_75 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484748198
		j foreach_type_start_8794484748198
		
		foreach_type_end_8794484748198:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_82 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_83 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_84 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_85 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_86 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 156($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_58
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto foreach_min_body_8794484748198
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484748198
		
		# Jumping to foreach_min_end_8794484748198
		j foreach_min_end_8794484748198
		
		foreach_min_body_8794484748198:
		
		# internal_84 = array internal_68[4 * internal_82]
		lw $t0, 144($sp) # $t0 = internal_82
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 136($sp) # internal_84 = array internal_68[4 * internal_82]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 148($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_85
		lw $t0, 144($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto update_min_8794484748198
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484748198
		
		# Jumping to update_min_end_8794484748198
		j update_min_end_8794484748198
		
		update_min_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_84
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_83
		lw $t0, 152($sp)
		sw $t0, 4($sp) # Storing internal_83
		
		# Argument internal_82
		lw $t0, 156($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_83 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 156($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_57
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 156($sp) # internal_82 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484748198
		j foreach_min_start_8794484748198
		
		foreach_min_end_8794484748198:
		
		# initialize Array [internal_58]
		lw $t0, 240($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 124($sp) # internal_87 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_88 = address of allocated object Int
		
		# array internal_87[4 * internal_88] = internal_56
		lw $t0, 120($sp) # $t0 = internal_88
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 124($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_89 = address of allocated object Int
		
		# array internal_87[4 * internal_89] = internal_56
		lw $t0, 116($sp) # $t0 = internal_89
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 124($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_90 = address of allocated object Int
		
		# array internal_87[4 * internal_90] = internal_56
		lw $t0, 112($sp) # $t0 = internal_90
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 124($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_91 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_91 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_91 then goto error_branch_8794484748198
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484748198
		
		# array internal_87[4 * internal_83] = internal_57
		lw $t0, 140($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 124($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 244($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_92 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_93 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_93]
		lw $t0, 100($sp) # $t0 = internal_93
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 124($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 104($sp) # internal_92 = array internal_87[4 * internal_93]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Razz_8794484748198
		lw $t0, 104($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484748198
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_94 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_94]
		lw $t0, 96($sp) # $t0 = internal_94
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 124($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 104($sp) # internal_92 = array internal_87[4 * internal_94]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Foo_8794484748198
		lw $t0, 104($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8794484748198
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_95 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_95]
		lw $t0, 92($sp) # $t0 = internal_95
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 124($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 104($sp) # internal_92 = array internal_87[4 * internal_95]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Bar_8794484748198
		lw $t0, 104($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484748198
		
		branch_Razz_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 80($sp) # internal_98 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_98
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 88($sp) # internal_98 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument internal_98
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_98
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = internal_98
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# Jumping to branch_end_8794484748198
		j branch_end_8794484748198
		
		branch_Foo_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 72($sp) # internal_100 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_100
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 80($sp) # internal_100 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument internal_100
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = internal_100
		lw $t0, 72($sp)
		sw $t0, 88($sp)
		
		# Jumping to branch_end_8794484748198
		j branch_end_8794484748198
		
		branch_Bar_8794484748198:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 488($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 300($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument n
		lw $t0, 300($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = n
		lw $t0, 288($sp)
		sw $t0, 88($sp)
		
		# Jumping to branch_end_8794484748198
		j branch_end_8794484748198
		
		error_branch_8794484748198:
		
		branch_end_8794484748198:
		
		# Set attribute a of self
		lw $t0, 476($sp) # $t0 = self
		lw $t1, 88($sp) # $t1 = internal_96
		beq $t1, $zero, object_set_attribute_8794484666673
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484666673
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484666673
		j object_set_attribute_8794484666673
		int_set_attribute_8794484666673:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_96
		j end_set_attribute_8794484666673
		bool_set_attribute_8794484666673:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_96
		j end_set_attribute_8794484666673
		object_set_attribute_8794484666673:
		sw $t1, 20($t0) # self.a = internal_96
		end_set_attribute_8794484666673:
		
		# Get attribute a of self
		lw $t0, 476($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484637392
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484637392
		j object_get_attribute_8794484637392
		int_get_attribute_8794484637392:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp) # internal_102 = self.a
		j end_get_attribute_8794484637392
		bool_get_attribute_8794484637392:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp) # internal_102 = self.a
		j end_get_attribute_8794484637392
		object_get_attribute_8794484637392:
		sw $t1, 64($sp) # internal_102 = self.a
		end_get_attribute_8794484637392:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_104 = address of allocated object Int
		
		# Get method doh of Razz
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_102
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function internal_105
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 68($sp) # internal_103 = result of internal_105
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 476($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484637706
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484637706
		j object_get_attribute_8794484637706
		int_get_attribute_8794484637706:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_106 = self.g
		j end_get_attribute_8794484637706
		bool_get_attribute_8794484637706:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_106 = self.g
		j end_get_attribute_8794484637706
		object_get_attribute_8794484637706:
		sw $t1, 48($sp) # internal_106 = self.g
		end_get_attribute_8794484637706:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_108 = address of allocated object Int
		
		# Get method doh of Foo
		lw $t0, 48($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_106
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_106
		
		# Calling function internal_109
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 52($sp) # internal_107 = result of internal_109
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_103
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing internal_103
		
		# Argument internal_107
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_110 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_112 = address of allocated object Int
		
		# Get method doh of Foo
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_113
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_111 = result of internal_113
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_110
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_110
		
		# Argument internal_111
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_111
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_114 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_116 = address of allocated object Int
		
		# Get method printh of Foo
		lw $t0, 476($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 484($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_117
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_115 = result of internal_117
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_114
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_114
		
		# Argument internal_115
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_115
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_118 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 476($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_118
		beq $t1, $zero, object_set_attribute_8794484637332
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484637332
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484637332
		j object_set_attribute_8794484637332
		int_set_attribute_8794484637332:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_118
		j end_set_attribute_8794484637332
		bool_set_attribute_8794484637332:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_118
		j end_set_attribute_8794484637332
		object_set_attribute_8794484637332:
		sw $t1, 24($t0) # self.b = internal_118
		end_set_attribute_8794484637332:
		
		# Loading return value in $v1
		lw $v1, 476($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 476
		
		jr $ra
		
	function_doh_at_Foo:
		# Function parameters
		#   $ra = 24($sp)
		#   self = 20($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -20
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484637907
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484637907
		j object_get_attribute_8794484637907
		int_get_attribute_8794484637907:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8794484637907
		bool_get_attribute_8794484637907:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8794484637907
		object_get_attribute_8794484637907:
		sw $t1, 12($sp) # internal_1 = self.h
		end_get_attribute_8794484637907:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_1
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484638233
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484638233
		j object_get_attribute_8794484638233
		int_get_attribute_8794484638233:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8794484638233
		bool_get_attribute_8794484638233:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8794484638233
		object_get_attribute_8794484638233:
		sw $t1, 8($sp) # internal_2 = self.h
		end_get_attribute_8794484638233:
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute h of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_4
		beq $t1, $zero, object_set_attribute_8794484637946
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484637946
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484637946
		j object_set_attribute_8794484637946
		int_set_attribute_8794484637946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8794484637946
		bool_set_attribute_8794484637946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8794484637946
		object_set_attribute_8794484637946:
		sw $t1, 8($t0) # self.h = internal_4
		end_set_attribute_8794484637946:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 20
		
		jr $ra
		
	function___init___at_Bar:
		# Function parameters
		#   $ra = 752($sp)
		#   self = 748($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -748
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 744($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 744($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8794484638281
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484638281
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484638281
		j object_set_attribute_8794484638281
		int_set_attribute_8794484638281:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484638281
		bool_set_attribute_8794484638281:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484638281
		object_set_attribute_8794484638281:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8794484638281:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 740($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 736($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 732($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 728($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 724($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 712($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		sw $t0, 720($sp)
		
		# internal_7 = internal_6
		lw $t0, 720($sp)
		sw $t0, 716($sp)
		
		while_start_8794484723258:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 716($sp)
		lw $t1, 728($sp)
		seq $t2, $t0, $t1
		lw $t0, 712($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8794484723258
		lw $t0, 712($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484723258
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 736($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 748($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 736($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 716($sp)
		lw $t0, 4($t0)
		sw $t0, 716($sp)
		
		# Jumping to while_start_8794484723258
		j while_start_8794484723258
		
		while_end_8794484723258:
		
		# internal_7 = internal_6
		lw $t0, 720($sp)
		sw $t0, 716($sp)
		
		# initialize Array [internal_5]
		lw $t0, 724($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 708($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 704($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 700($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 716($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 712($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8794484723258
		lw $t0, 700($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484723258
		
		# Jumping to foreach_end_8794484723258
		j foreach_end_8794484723258
		
		foreach_body_8794484723258:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 704($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 708($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 716($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 716($sp)
		lw $t0, 4($t0)
		sw $t0, 716($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 716($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 748($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 716($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484723258
		j foreach_start_8794484723258
		
		foreach_end_8794484723258:
		
		# initialize Array [internal_3]
		lw $t0, 732($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 696($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 732($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 692($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 684($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 688($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 684($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 696($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 688($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 684($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 692($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 676($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 680($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 676($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 696($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 680($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 676($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 692($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 668($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 672($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 668($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 696($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 672($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 668($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 692($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 660($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 664($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 660($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 696($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 664($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 660($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 692($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 724($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 656($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 652($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 644($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 640($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 632($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 668($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 744($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 664($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8794484723258
		lw $t0, 652($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484723258
		
		# Jumping to foreach_type_end_8794484723258
		j foreach_type_end_8794484723258
		
		foreach_type_body_8794484723258:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 656($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 696($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 648($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 656($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 752($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 656($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 656($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 652($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8794484723258
		lw $t0, 640($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484723258
		
		# Jumping to foreach_ancestor_end_8794484723258
		j foreach_ancestor_end_8794484723258
		
		foreach_ancestor_body_8794484723258:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 644($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 708($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 636($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 648($sp)
		lw $t1, 636($sp)
		seq $t2, $t0, $t1
		lw $t0, 632($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8794484723258
		lw $t0, 632($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484723258
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 656($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 748($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 656($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484723258
		j foreach_ancestor_start_8794484723258
		
		foreach_ancestor_end_8794484723258:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 656($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 692($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 644($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 668($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 748($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 668($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484723258
		j foreach_type_start_8794484723258
		
		foreach_type_end_8794484723258:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 628($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 624($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 620($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 616($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 612($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 628($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 628($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 640($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 744($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 624($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8794484723258
		lw $t0, 612($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484723258
		
		# Jumping to foreach_min_end_8794484723258
		j foreach_min_end_8794484723258
		
		foreach_min_body_8794484723258:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 628($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 692($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 620($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 628($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 624($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8794484723258
		lw $t0, 612($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484723258
		
		# Jumping to update_min_end_8794484723258
		j update_min_end_8794484723258
		
		update_min_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 628($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 632($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 628($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 636($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 640($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 636($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 640($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 748($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 640($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484723258
		j foreach_min_start_8794484723258
		
		foreach_min_end_8794484723258:
		
		# initialize Array [internal_3]
		lw $t0, 732($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 608($sp) # internal_34 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 604($sp) # internal_35 = address of allocated object Int
		
		# array internal_34[4 * internal_35] = internal_1
		lw $t0, 604($sp) # $t0 = internal_35
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 600($sp) # internal_36 = address of allocated object Int
		
		# array internal_34[4 * internal_36] = internal_1
		lw $t0, 600($sp) # $t0 = internal_36
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 596($sp) # internal_37 = address of allocated object Int
		
		# array internal_34[4 * internal_37] = internal_1
		lw $t0, 596($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 592($sp) # internal_38 = address of allocated object Int
		
		# array internal_34[4 * internal_38] = internal_1
		lw $t0, 592($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 588($sp) # internal_39 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 628($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 600($sp) # internal_39 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_39 then goto error_branch_8794484723258
		lw $t0, 588($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484723258
		
		# array internal_34[4 * internal_30] = internal_2
		lw $t0, 624($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 736($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 584($sp) # internal_40 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 580($sp) # internal_41 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_41]
		lw $t0, 580($sp) # $t0 = internal_41
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 584($sp) # internal_40 = array internal_34[4 * internal_41]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bazz_8794484723258
		lw $t0, 584($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8794484723258
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 576($sp) # internal_42 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_42]
		lw $t0, 576($sp) # $t0 = internal_42
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 584($sp) # internal_40 = array internal_34[4 * internal_42]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Razz_8794484723258
		lw $t0, 584($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484723258
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 572($sp) # internal_43 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_43]
		lw $t0, 572($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 584($sp) # internal_40 = array internal_34[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Foo_8794484723258
		lw $t0, 584($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8794484723258
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 568($sp) # internal_44 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_44]
		lw $t0, 568($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 608($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 584($sp) # internal_40 = array internal_34[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bar_8794484723258
		lw $t0, 584($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484723258
		
		branch_Bazz_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 556($sp) # internal_47 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 564($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 564($sp) # internal_47 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 576($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_47
		lw $t0, 568($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_47
		lw $t0, 556($sp)
		sw $t0, 564($sp)
		
		# Jumping to branch_end_8794484723258
		j branch_end_8794484723258
		
		branch_Razz_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 548($sp) # internal_49 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 556($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 556($sp) # internal_49 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 576($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_49
		lw $t0, 560($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_49
		lw $t0, 548($sp)
		sw $t0, 564($sp)
		
		# Jumping to branch_end_8794484723258
		j branch_end_8794484723258
		
		branch_Foo_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 540($sp) # internal_51 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 548($sp) # internal_51 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 576($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_51
		lw $t0, 552($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_51
		lw $t0, 540($sp)
		sw $t0, 564($sp)
		
		# Jumping to branch_end_8794484723258
		j branch_end_8794484723258
		
		branch_Bar_8794484723258:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 576($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = n
		lw $t0, 560($sp)
		sw $t0, 564($sp)
		
		# Jumping to branch_end_8794484723258
		j branch_end_8794484723258
		
		error_branch_8794484723258:
		
		branch_end_8794484723258:
		
		# Set attribute g of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 564($sp) # $t1 = internal_45
		beq $t1, $zero, object_set_attribute_8794484638299
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484638299
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484638299
		j object_set_attribute_8794484638299
		int_set_attribute_8794484638299:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484638299
		bool_set_attribute_8794484638299:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484638299
		object_set_attribute_8794484638299:
		sw $t1, 12($t0) # self.g = internal_45
		end_set_attribute_8794484638299:
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 528($sp) # internal_54 = address of allocated object Int
		
		# Get method printh of Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 528($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 524($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 756($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_55
		lw $t0, 532($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 540($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 532($sp) # $t1 = internal_53
		beq $t1, $zero, object_set_attribute_8794484638302
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484638302
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484638302
		j object_set_attribute_8794484638302
		int_set_attribute_8794484638302:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484638302
		bool_set_attribute_8794484638302:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484638302
		object_set_attribute_8794484638302:
		sw $t1, 16($t0) # self.i = internal_53
		end_set_attribute_8794484638302:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 520($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 516($sp) # internal_57 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 512($sp) # internal_58 = address of allocated object Int
		
		# Allocating NUll to internal_59
		sw $zero, 508($sp) # internal_59 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 504($sp) # internal_60 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 492($sp) # internal_63 = address of allocated object Int
		
		# internal_61 = typeof self that is the first word of the object
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		sw $t0, 500($sp)
		
		# internal_62 = internal_61
		lw $t0, 500($sp)
		sw $t0, 496($sp)
		
		while_start_8794484728583:
		
		# internal_63 = EqualAddress(internal_62, internal_59)
		lw $t0, 496($sp)
		lw $t1, 508($sp)
		seq $t2, $t0, $t1
		lw $t0, 492($sp)
		sw $t2, 8($t0)
		
		# If internal_63 then goto while_end_8794484728583
		lw $t0, 492($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484728583
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_60
		lw $t0, 516($sp)
		sw $t0, 4($sp) # Storing internal_60
		
		# Argument internal_57
		lw $t0, 528($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 516($sp) # internal_60 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_62 = ancestor of internal_62
		lw $t0, 496($sp)
		lw $t0, 4($t0)
		sw $t0, 496($sp)
		
		# Jumping to while_start_8794484728583
		j while_start_8794484728583
		
		while_end_8794484728583:
		
		# internal_62 = internal_61
		lw $t0, 500($sp)
		sw $t0, 496($sp)
		
		# initialize Array [internal_60]
		lw $t0, 504($sp) # $t0 = internal_60
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 488($sp) # internal_64 = new Array[internal_60]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 484($sp) # internal_65 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 480($sp) # internal_66 = address of allocated object Int
		
		foreach_start_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 496($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_60
		lw $t0, 516($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 492($sp) # internal_66 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_66 then goto foreach_body_8794484728583
		lw $t0, 480($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484728583
		
		# Jumping to foreach_end_8794484728583
		j foreach_end_8794484728583
		
		foreach_body_8794484728583:
		
		# array internal_64[4 * internal_65] = internal_62
		lw $t0, 484($sp) # $t0 = internal_65
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 488($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 496($sp)
		sw $t0, 0($t1)
		
		# internal_62 = ancestor of internal_62
		lw $t0, 496($sp)
		lw $t0, 4($t0)
		sw $t0, 496($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 496($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_57
		lw $t0, 528($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 496($sp) # internal_65 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484728583
		j foreach_start_8794484728583
		
		foreach_end_8794484728583:
		
		# initialize Array [internal_58]
		lw $t0, 512($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 476($sp) # internal_67 = new Array[internal_58]
		
		# initialize Array [internal_58]
		lw $t0, 512($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 472($sp) # internal_68 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 464($sp) # internal_70 = address of allocated object Int
		
		# internal_69 = direction of Razz
		la $t0, type_Razz
		sw $t0, 468($sp)
		
		# array internal_67[4 * internal_70] = internal_69
		lw $t0, 464($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 476($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 468($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_70] = internal_60
		lw $t0, 464($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 472($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 456($sp) # internal_72 = address of allocated object Int
		
		# internal_71 = direction of Foo
		la $t0, type_Foo
		sw $t0, 460($sp)
		
		# array internal_67[4 * internal_72] = internal_71
		lw $t0, 456($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 476($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 460($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_72] = internal_60
		lw $t0, 456($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 472($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 448($sp) # internal_74 = address of allocated object Int
		
		# internal_73 = direction of Bar
		la $t0, type_Bar
		sw $t0, 452($sp)
		
		# array internal_67[4 * internal_74] = internal_73
		lw $t0, 448($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 476($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 452($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_74] = internal_60
		lw $t0, 448($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 472($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 444($sp) # internal_75 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 440($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 432($sp) # internal_78 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 428($sp) # internal_79 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 420($sp) # internal_81 = address of allocated object Int
		
		foreach_type_start_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 456($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_58
		lw $t0, 524($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 452($sp) # internal_76 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_76 then goto foreach_type_body_8794484728583
		lw $t0, 440($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484728583
		
		# Jumping to foreach_type_end_8794484728583
		j foreach_type_end_8794484728583
		
		foreach_type_body_8794484728583:
		
		# internal_77 = array internal_67[4 * internal_75]
		lw $t0, 444($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 476($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 436($sp) # internal_77 = array internal_67[4 * internal_75]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 444($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_56
		lw $t0, 532($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 444($sp) # internal_78 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 444($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_60
		lw $t0, 516($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 440($sp) # internal_79 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_79 then goto foreach_ancestor_body_8794484728583
		lw $t0, 428($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484728583
		
		# Jumping to foreach_ancestor_end_8794484728583
		j foreach_ancestor_end_8794484728583
		
		foreach_ancestor_body_8794484728583:
		
		# internal_80 = array internal_64[4 * internal_78]
		lw $t0, 432($sp) # $t0 = internal_78
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 488($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 424($sp) # internal_80 = array internal_64[4 * internal_78]
		
		# internal_81 = EqualAddress(internal_77, internal_80)
		lw $t0, 436($sp)
		lw $t1, 424($sp)
		seq $t2, $t0, $t1
		lw $t0, 420($sp)
		sw $t2, 8($t0)
		
		# If internal_81 then goto foreach_ancestor_end_8794484728583
		lw $t0, 420($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484728583
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 444($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_57
		lw $t0, 528($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 444($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484728583
		j foreach_ancestor_start_8794484728583
		
		foreach_ancestor_end_8794484728583:
		
		# array internal_68[4 * internal_75] = internal_78
		lw $t0, 444($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 472($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 456($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_57
		lw $t0, 528($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 456($sp) # internal_75 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484728583
		j foreach_type_start_8794484728583
		
		foreach_type_end_8794484728583:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 416($sp) # internal_82 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 412($sp) # internal_83 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 408($sp) # internal_84 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 404($sp) # internal_85 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 400($sp) # internal_86 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 416($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 516($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 416($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 428($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_58
		lw $t0, 524($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 412($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto foreach_min_body_8794484728583
		lw $t0, 400($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484728583
		
		# Jumping to foreach_min_end_8794484728583
		j foreach_min_end_8794484728583
		
		foreach_min_body_8794484728583:
		
		# internal_84 = array internal_68[4 * internal_82]
		lw $t0, 416($sp) # $t0 = internal_82
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 472($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 408($sp) # internal_84 = array internal_68[4 * internal_82]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 420($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_85
		lw $t0, 416($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 412($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto update_min_8794484728583
		lw $t0, 400($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484728583
		
		# Jumping to update_min_end_8794484728583
		j update_min_end_8794484728583
		
		update_min_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 416($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_84
		lw $t0, 420($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 416($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_83
		lw $t0, 424($sp)
		sw $t0, 4($sp) # Storing internal_83
		
		# Argument internal_82
		lw $t0, 428($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 424($sp) # internal_83 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 428($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_57
		lw $t0, 528($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 428($sp) # internal_82 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484728583
		j foreach_min_start_8794484728583
		
		foreach_min_end_8794484728583:
		
		# initialize Array [internal_58]
		lw $t0, 512($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 396($sp) # internal_87 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 392($sp) # internal_88 = address of allocated object Int
		
		# array internal_87[4 * internal_88] = internal_56
		lw $t0, 392($sp) # $t0 = internal_88
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 520($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 388($sp) # internal_89 = address of allocated object Int
		
		# array internal_87[4 * internal_89] = internal_56
		lw $t0, 388($sp) # $t0 = internal_89
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 520($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 384($sp) # internal_90 = address of allocated object Int
		
		# array internal_87[4 * internal_90] = internal_56
		lw $t0, 384($sp) # $t0 = internal_90
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 520($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 380($sp) # internal_91 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 416($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 516($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 392($sp) # internal_91 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_91 then goto error_branch_8794484728583
		lw $t0, 380($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484728583
		
		# array internal_87[4 * internal_83] = internal_57
		lw $t0, 412($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 516($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 376($sp) # internal_92 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_93 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_93]
		lw $t0, 372($sp) # $t0 = internal_93
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 376($sp) # internal_92 = array internal_87[4 * internal_93]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Razz_8794484728583
		lw $t0, 376($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484728583
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 368($sp) # internal_94 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_94]
		lw $t0, 368($sp) # $t0 = internal_94
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 376($sp) # internal_92 = array internal_87[4 * internal_94]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Foo_8794484728583
		lw $t0, 376($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8794484728583
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 364($sp) # internal_95 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_95]
		lw $t0, 364($sp) # $t0 = internal_95
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 396($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 376($sp) # internal_92 = array internal_87[4 * internal_95]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Bar_8794484728583
		lw $t0, 376($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484728583
		
		branch_Razz_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 352($sp) # internal_98 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 360($sp)
		sw $t0, 0($sp) # Storing internal_98
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 360($sp) # internal_98 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument internal_98
		lw $t0, 364($sp)
		sw $t0, 0($sp) # Storing internal_98
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = internal_98
		lw $t0, 352($sp)
		sw $t0, 360($sp)
		
		# Jumping to branch_end_8794484728583
		j branch_end_8794484728583
		
		branch_Foo_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 344($sp) # internal_100 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_100
		lw $t0, 352($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 352($sp) # internal_100 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument internal_100
		lw $t0, 356($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = internal_100
		lw $t0, 344($sp)
		sw $t0, 360($sp)
		
		# Jumping to branch_end_8794484728583
		j branch_end_8794484728583
		
		branch_Bar_8794484728583:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 372($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = n
		lw $t0, 560($sp)
		sw $t0, 360($sp)
		
		# Jumping to branch_end_8794484728583
		j branch_end_8794484728583
		
		error_branch_8794484728583:
		
		branch_end_8794484728583:
		
		# Set attribute a of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 360($sp) # $t1 = internal_96
		beq $t1, $zero, object_set_attribute_8794484641952
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484641952
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484641952
		j object_set_attribute_8794484641952
		int_set_attribute_8794484641952:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_96
		j end_set_attribute_8794484641952
		bool_set_attribute_8794484641952:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_96
		j end_set_attribute_8794484641952
		object_set_attribute_8794484641952:
		sw $t1, 20($t0) # self.a = internal_96
		end_set_attribute_8794484641952:
		
		# Get attribute a of self
		lw $t0, 748($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484645705
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484645705
		j object_get_attribute_8794484645705
		int_get_attribute_8794484645705:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 336($sp) # internal_102 = self.a
		j end_get_attribute_8794484645705
		bool_get_attribute_8794484645705:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 336($sp) # internal_102 = self.a
		j end_get_attribute_8794484645705
		object_get_attribute_8794484645705:
		sw $t1, 336($sp) # internal_102 = self.a
		end_get_attribute_8794484645705:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_104 = address of allocated object Int
		
		# Get method doh of Razz
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 328($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 324($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_102
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function internal_105
		lw $t0, 332($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 340($sp) # internal_103 = result of internal_105
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 748($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484645759
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484645759
		j object_get_attribute_8794484645759
		int_get_attribute_8794484645759:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 320($sp) # internal_106 = self.g
		j end_get_attribute_8794484645759
		bool_get_attribute_8794484645759:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 320($sp) # internal_106 = self.g
		j end_get_attribute_8794484645759
		object_get_attribute_8794484645759:
		sw $t1, 320($sp) # internal_106 = self.g
		end_get_attribute_8794484645759:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_108 = address of allocated object Int
		
		# Get method doh of Foo
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 312($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 308($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_106
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing internal_106
		
		# Calling function internal_109
		lw $t0, 316($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 324($sp) # internal_107 = result of internal_109
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_103
		lw $t0, 344($sp)
		sw $t0, 4($sp) # Storing internal_103
		
		# Argument internal_107
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 316($sp) # internal_110 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_112 = address of allocated object Int
		
		# Get method doh of Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 296($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 292($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 756($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_113
		lw $t0, 300($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 308($sp) # internal_111 = result of internal_113
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_110
		lw $t0, 316($sp)
		sw $t0, 4($sp) # Storing internal_110
		
		# Argument internal_111
		lw $t0, 312($sp)
		sw $t0, 0($sp) # Storing internal_111
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 300($sp) # internal_114 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 280($sp) # internal_116 = address of allocated object Int
		
		# Get method printh of Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 280($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 276($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 756($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_117
		lw $t0, 284($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 292($sp) # internal_115 = result of internal_117
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_114
		lw $t0, 300($sp)
		sw $t0, 4($sp) # Storing internal_114
		
		# Argument internal_115
		lw $t0, 296($sp)
		sw $t0, 0($sp) # Storing internal_115
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 284($sp) # internal_118 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 272($sp) # $t1 = internal_118
		beq $t1, $zero, object_set_attribute_8794484645645
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484645645
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484645645
		j object_set_attribute_8794484645645
		int_set_attribute_8794484645645:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_118
		j end_set_attribute_8794484645645
		bool_set_attribute_8794484645645:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_118
		j end_set_attribute_8794484645645
		object_set_attribute_8794484645645:
		sw $t1, 24($t0) # self.b = internal_118
		end_set_attribute_8794484645645:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 268($sp) # internal_119 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 264($sp) # internal_120 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 260($sp) # internal_121 = address of allocated object Int
		
		# Allocating NUll to internal_122
		sw $zero, 256($sp) # internal_122 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 252($sp) # internal_123 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 240($sp) # internal_126 = address of allocated object Int
		
		# internal_124 = typeof self that is the first word of the object
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		sw $t0, 248($sp)
		
		# internal_125 = internal_124
		lw $t0, 248($sp)
		sw $t0, 244($sp)
		
		while_start_8794484734308:
		
		# internal_126 = EqualAddress(internal_125, internal_122)
		lw $t0, 244($sp)
		lw $t1, 256($sp)
		seq $t2, $t0, $t1
		lw $t0, 240($sp)
		sw $t2, 8($t0)
		
		# If internal_126 then goto while_end_8794484734308
		lw $t0, 240($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484734308
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_123
		lw $t0, 264($sp)
		sw $t0, 4($sp) # Storing internal_123
		
		# Argument internal_120
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 264($sp) # internal_123 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_125 = ancestor of internal_125
		lw $t0, 244($sp)
		lw $t0, 4($t0)
		sw $t0, 244($sp)
		
		# Jumping to while_start_8794484734308
		j while_start_8794484734308
		
		while_end_8794484734308:
		
		# internal_125 = internal_124
		lw $t0, 248($sp)
		sw $t0, 244($sp)
		
		# initialize Array [internal_123]
		lw $t0, 252($sp) # $t0 = internal_123
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 236($sp) # internal_127 = new Array[internal_123]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_128 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 228($sp) # internal_129 = address of allocated object Int
		
		foreach_start_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_128
		lw $t0, 244($sp)
		sw $t0, 4($sp) # Storing internal_128
		
		# Argument internal_123
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_129 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_129 then goto foreach_body_8794484734308
		lw $t0, 228($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484734308
		
		# Jumping to foreach_end_8794484734308
		j foreach_end_8794484734308
		
		foreach_body_8794484734308:
		
		# array internal_127[4 * internal_128] = internal_125
		lw $t0, 232($sp) # $t0 = internal_128
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 236($sp) # $t1 = internal_127
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 244($sp)
		sw $t0, 0($t1)
		
		# internal_125 = ancestor of internal_125
		lw $t0, 244($sp)
		lw $t0, 4($t0)
		sw $t0, 244($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_128
		lw $t0, 244($sp)
		sw $t0, 4($sp) # Storing internal_128
		
		# Argument internal_120
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 244($sp) # internal_128 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484734308
		j foreach_start_8794484734308
		
		foreach_end_8794484734308:
		
		# initialize Array [internal_121]
		lw $t0, 260($sp) # $t0 = internal_121
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 224($sp) # internal_130 = new Array[internal_121]
		
		# initialize Array [internal_121]
		lw $t0, 260($sp) # $t0 = internal_121
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 220($sp) # internal_131 = new Array[internal_121]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_133 = address of allocated object Int
		
		# internal_132 = direction of Razz
		la $t0, type_Razz
		sw $t0, 216($sp)
		
		# array internal_130[4 * internal_133] = internal_132
		lw $t0, 212($sp) # $t0 = internal_133
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 224($sp) # $t1 = internal_130
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		sw $t0, 0($t1)
		
		# array internal_131[4 * internal_133] = internal_123
		lw $t0, 212($sp) # $t0 = internal_133
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 220($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 252($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_135 = address of allocated object Int
		
		# internal_134 = direction of Bar
		la $t0, type_Bar
		sw $t0, 208($sp)
		
		# array internal_130[4 * internal_135] = internal_134
		lw $t0, 204($sp) # $t0 = internal_135
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 224($sp) # $t1 = internal_130
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 208($sp)
		sw $t0, 0($t1)
		
		# array internal_131[4 * internal_135] = internal_123
		lw $t0, 204($sp) # $t0 = internal_135
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 220($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 252($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_136 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_137 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_139 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_140 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_142 = address of allocated object Int
		
		foreach_type_start_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_136
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_136
		
		# Argument internal_121
		lw $t0, 272($sp)
		sw $t0, 0($sp) # Storing internal_121
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_137 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_137 then goto foreach_type_body_8794484734308
		lw $t0, 196($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484734308
		
		# Jumping to foreach_type_end_8794484734308
		j foreach_type_end_8794484734308
		
		foreach_type_body_8794484734308:
		
		# internal_138 = array internal_130[4 * internal_136]
		lw $t0, 200($sp) # $t0 = internal_136
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 224($sp) # $t1 = internal_130
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 192($sp) # internal_138 = array internal_130[4 * internal_136]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_119
		lw $t0, 280($sp)
		sw $t0, 0($sp) # Storing internal_119
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_139 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_123
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_140 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_140 then goto foreach_ancestor_body_8794484734308
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484734308
		
		# Jumping to foreach_ancestor_end_8794484734308
		j foreach_ancestor_end_8794484734308
		
		foreach_ancestor_body_8794484734308:
		
		# internal_141 = array internal_127[4 * internal_139]
		lw $t0, 188($sp) # $t0 = internal_139
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 236($sp) # $t1 = internal_127
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 180($sp) # internal_141 = array internal_127[4 * internal_139]
		
		# internal_142 = EqualAddress(internal_138, internal_141)
		lw $t0, 192($sp)
		lw $t1, 180($sp)
		seq $t2, $t0, $t1
		lw $t0, 176($sp)
		sw $t2, 8($t0)
		
		# If internal_142 then goto foreach_ancestor_end_8794484734308
		lw $t0, 176($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484734308
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_120
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_139 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484734308
		j foreach_ancestor_start_8794484734308
		
		foreach_ancestor_end_8794484734308:
		
		# array internal_131[4 * internal_136] = internal_139
		lw $t0, 200($sp) # $t0 = internal_136
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 220($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_136
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_136
		
		# Argument internal_120
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_136 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484734308
		j foreach_type_start_8794484734308
		
		foreach_type_end_8794484734308:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_143 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_144 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_145 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_146 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_147 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_146
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_146
		
		# Argument internal_123
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_146 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_143
		lw $t0, 184($sp)
		sw $t0, 4($sp) # Storing internal_143
		
		# Argument internal_121
		lw $t0, 272($sp)
		sw $t0, 0($sp) # Storing internal_121
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 168($sp) # internal_147 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_147 then goto foreach_min_body_8794484734308
		lw $t0, 156($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484734308
		
		# Jumping to foreach_min_end_8794484734308
		j foreach_min_end_8794484734308
		
		foreach_min_body_8794484734308:
		
		# internal_145 = array internal_131[4 * internal_143]
		lw $t0, 172($sp) # $t0 = internal_143
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 220($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 164($sp) # internal_145 = array internal_131[4 * internal_143]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_145
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing internal_145
		
		# Argument internal_146
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing internal_146
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 168($sp) # internal_147 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_147 then goto update_min_8794484734308
		lw $t0, 156($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484734308
		
		# Jumping to update_min_end_8794484734308
		j update_min_end_8794484734308
		
		update_min_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_146
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_146
		
		# Argument internal_145
		lw $t0, 176($sp)
		sw $t0, 0($sp) # Storing internal_145
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_146 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_144
		lw $t0, 180($sp)
		sw $t0, 4($sp) # Storing internal_144
		
		# Argument internal_143
		lw $t0, 184($sp)
		sw $t0, 0($sp) # Storing internal_143
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 180($sp) # internal_144 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_143
		lw $t0, 184($sp)
		sw $t0, 4($sp) # Storing internal_143
		
		# Argument internal_120
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 184($sp) # internal_143 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484734308
		j foreach_min_start_8794484734308
		
		foreach_min_end_8794484734308:
		
		# initialize Array [internal_121]
		lw $t0, 260($sp) # $t0 = internal_121
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 152($sp) # internal_148 = new Array[internal_121]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_149 = address of allocated object Int
		
		# array internal_148[4 * internal_149] = internal_119
		lw $t0, 148($sp) # $t0 = internal_149
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 152($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 268($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_150 = address of allocated object Int
		
		# array internal_148[4 * internal_150] = internal_119
		lw $t0, 144($sp) # $t0 = internal_150
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 152($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 268($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_151 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_146
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_146
		
		# Argument internal_123
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_151 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_151 then goto error_branch_8794484734308
		lw $t0, 140($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484734308
		
		# array internal_148[4 * internal_144] = internal_120
		lw $t0, 168($sp) # $t0 = internal_144
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 152($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 264($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_152 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_153 = address of allocated object Int
		
		# internal_152 = array internal_148[4 * internal_153]
		lw $t0, 132($sp) # $t0 = internal_153
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 152($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 136($sp) # internal_152 = array internal_148[4 * internal_153]
		sw $t0, 8($t2)
		
		# If internal_152 then goto branch_Razz_8794484734308
		lw $t0, 136($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484734308
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_154 = address of allocated object Int
		
		# internal_152 = array internal_148[4 * internal_154]
		lw $t0, 128($sp) # $t0 = internal_154
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 152($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 136($sp) # internal_152 = array internal_148[4 * internal_154]
		sw $t0, 8($t2)
		
		# If internal_152 then goto branch_Bar_8794484734308
		lw $t0, 136($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484734308
		
		branch_Razz_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 116($sp) # internal_157 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_157
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 124($sp) # internal_157 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_155
		lw $t0, 136($sp)
		sw $t0, 4($sp) # Storing internal_155
		
		# Argument internal_157
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 136($sp) # internal_155 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_155 = internal_157
		lw $t0, 116($sp)
		sw $t0, 124($sp)
		
		# Jumping to branch_end_8794484734308
		j branch_end_8794484734308
		
		branch_Bar_8794484734308:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 760($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 572($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_155
		lw $t0, 136($sp)
		sw $t0, 4($sp) # Storing internal_155
		
		# Argument n
		lw $t0, 572($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 136($sp) # internal_155 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_155 = n
		lw $t0, 560($sp)
		sw $t0, 124($sp)
		
		# Jumping to branch_end_8794484734308
		j branch_end_8794484734308
		
		error_branch_8794484734308:
		
		branch_end_8794484734308:
		
		# Set attribute e of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 124($sp) # $t1 = internal_155
		beq $t1, $zero, object_set_attribute_8794484646446
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484646446
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484646446
		j object_set_attribute_8794484646446
		int_set_attribute_8794484646446:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_155
		j end_set_attribute_8794484646446
		bool_set_attribute_8794484646446:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_155
		j end_set_attribute_8794484646446
		object_set_attribute_8794484646446:
		sw $t1, 28($t0) # self.e = internal_155
		end_set_attribute_8794484646446:
		
		# Get attribute a of self
		lw $t0, 748($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484649521
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484649521
		j object_get_attribute_8794484649521
		int_get_attribute_8794484649521:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 108($sp) # internal_159 = self.a
		j end_get_attribute_8794484649521
		bool_get_attribute_8794484649521:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 108($sp) # internal_159 = self.a
		j end_get_attribute_8794484649521
		object_get_attribute_8794484649521:
		sw $t1, 108($sp) # internal_159 = self.a
		end_get_attribute_8794484649521:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_161 = address of allocated object Int
		
		# Get method doh of Bazz
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 100($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 96($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_159
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_159
		
		# Calling function function_doh_at_Bazz
		jal function_doh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 112($sp) # internal_160 = result of function_doh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 748($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484649575
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484649575
		j object_get_attribute_8794484649575
		int_get_attribute_8794484649575:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 92($sp) # internal_163 = self.g
		j end_get_attribute_8794484649575
		bool_get_attribute_8794484649575:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 92($sp) # internal_163 = self.g
		j end_get_attribute_8794484649575
		object_get_attribute_8794484649575:
		sw $t1, 92($sp) # internal_163 = self.g
		end_get_attribute_8794484649575:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_165 = address of allocated object Int
		
		# Get method doh of Foo
		lw $t0, 92($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_163
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_163
		
		# Calling function internal_166
		lw $t0, 88($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 96($sp) # internal_164 = result of internal_166
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_160
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_160
		
		# Argument internal_164
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_164
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_167 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute e of self
		lw $t0, 748($sp) # Get the address of self
		lw $t1, 28($t0) # Get the attribute 'e' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484649644
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484649644
		j object_get_attribute_8794484649644
		int_get_attribute_8794484649644:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp) # internal_168 = self.e
		j end_get_attribute_8794484649644
		bool_get_attribute_8794484649644:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp) # internal_168 = self.e
		j end_get_attribute_8794484649644
		object_get_attribute_8794484649644:
		sw $t1, 72($sp) # internal_168 = self.e
		end_get_attribute_8794484649644:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_170 = address of allocated object Int
		
		# Get method doh of Bar
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_168
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_168
		
		# Calling function internal_171
		lw $t0, 68($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 76($sp) # internal_169 = result of internal_171
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_167
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing internal_167
		
		# Argument internal_169
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_169
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_172 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_174 = address of allocated object Int
		
		# Get method doh of Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 756($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_175
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_173 = result of internal_175
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_172
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing internal_172
		
		# Argument internal_173
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_173
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_176 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_178 = address of allocated object Int
		
		# Get method printh of Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 756($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_179
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 44($sp) # internal_177 = result of internal_179
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_176
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_176
		
		# Argument internal_177
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_177
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_180 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute f of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 24($sp) # $t1 = internal_180
		beq $t1, $zero, object_set_attribute_8794484649189
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484649189
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484649189
		j object_set_attribute_8794484649189
		int_set_attribute_8794484649189:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_180
		j end_set_attribute_8794484649189
		bool_set_attribute_8794484649189:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_180
		j end_set_attribute_8794484649189
		object_set_attribute_8794484649189:
		sw $t1, 32($t0) # self.f = internal_180
		end_set_attribute_8794484649189:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_182 = address of allocated object Int
		
		# Get method doh of Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 756($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_183
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_181 = result of internal_183
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute c of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 20($sp) # $t1 = internal_181
		beq $t1, $zero, object_set_attribute_8794484650075
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484650075
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484650075
		j object_set_attribute_8794484650075
		int_set_attribute_8794484650075:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($t0) # self.c = internal_181
		j end_set_attribute_8794484650075
		bool_set_attribute_8794484650075:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($t0) # self.c = internal_181
		j end_set_attribute_8794484650075
		object_set_attribute_8794484650075:
		sw $t1, 36($t0) # self.c = internal_181
		end_set_attribute_8794484650075:
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_185 = address of allocated object Int
		
		# Get method printh of Bar
		lw $t0, 748($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 756($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_186
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_184 = result of internal_186
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute d of self
		lw $t0, 748($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_184
		beq $t1, $zero, object_set_attribute_8794484650120
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484650120
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484650120
		j object_set_attribute_8794484650120
		int_set_attribute_8794484650120:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($t0) # self.d = internal_184
		j end_set_attribute_8794484650120
		bool_set_attribute_8794484650120:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($t0) # self.d = internal_184
		j end_set_attribute_8794484650120
		object_set_attribute_8794484650120:
		sw $t1, 40($t0) # self.d = internal_184
		end_set_attribute_8794484650120:
		
		# Loading return value in $v1
		lw $v1, 748($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 748
		
		jr $ra
		
	function___init___at_Razz:
		# Function parameters
		#   $ra = 728($sp)
		#   self = 724($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -724
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 720($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 724($sp) # $t0 = self
		lw $t1, 720($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8794484650198
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484650198
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484650198
		j object_set_attribute_8794484650198
		int_set_attribute_8794484650198:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484650198
		bool_set_attribute_8794484650198:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484650198
		object_set_attribute_8794484650198:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8794484650198:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 716($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 712($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 708($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 704($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 700($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 688($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		sw $t0, 696($sp)
		
		# internal_7 = internal_6
		lw $t0, 696($sp)
		sw $t0, 692($sp)
		
		while_start_8794484717692:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 692($sp)
		lw $t1, 704($sp)
		seq $t2, $t0, $t1
		lw $t0, 688($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8794484717692
		lw $t0, 688($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484717692
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 712($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 724($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 712($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 692($sp)
		lw $t0, 4($t0)
		sw $t0, 692($sp)
		
		# Jumping to while_start_8794484717692
		j while_start_8794484717692
		
		while_end_8794484717692:
		
		# internal_7 = internal_6
		lw $t0, 696($sp)
		sw $t0, 692($sp)
		
		# initialize Array [internal_5]
		lw $t0, 700($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 684($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 680($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 676($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 692($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 712($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 688($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8794484717692
		lw $t0, 676($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484717692
		
		# Jumping to foreach_end_8794484717692
		j foreach_end_8794484717692
		
		foreach_body_8794484717692:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 680($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 684($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 692($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 692($sp)
		lw $t0, 4($t0)
		sw $t0, 692($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 692($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 724($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 692($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484717692
		j foreach_start_8794484717692
		
		foreach_end_8794484717692:
		
		# initialize Array [internal_3]
		lw $t0, 708($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 672($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 708($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 668($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 660($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 664($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 660($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 672($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 664($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 660($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 668($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 652($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 656($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 652($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 672($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 656($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 652($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 668($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 644($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 648($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 644($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 672($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 648($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 644($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 668($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 636($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 640($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 636($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 672($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 640($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 636($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 668($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 700($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 632($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 628($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 620($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 616($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 608($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 644($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 720($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 640($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8794484717692
		lw $t0, 628($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484717692
		
		# Jumping to foreach_type_end_8794484717692
		j foreach_type_end_8794484717692
		
		foreach_type_body_8794484717692:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 632($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 672($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 624($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 728($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 632($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 712($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 628($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8794484717692
		lw $t0, 616($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484717692
		
		# Jumping to foreach_ancestor_end_8794484717692
		j foreach_ancestor_end_8794484717692
		
		foreach_ancestor_body_8794484717692:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 620($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 684($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 612($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 624($sp)
		lw $t1, 612($sp)
		seq $t2, $t0, $t1
		lw $t0, 608($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8794484717692
		lw $t0, 608($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484717692
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 632($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 724($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 632($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484717692
		j foreach_ancestor_start_8794484717692
		
		foreach_ancestor_end_8794484717692:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 632($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 668($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 620($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 644($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 724($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 644($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484717692
		j foreach_type_start_8794484717692
		
		foreach_type_end_8794484717692:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 604($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 600($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 596($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 592($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 588($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 604($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 712($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 604($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 616($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 720($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 600($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8794484717692
		lw $t0, 588($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484717692
		
		# Jumping to foreach_min_end_8794484717692
		j foreach_min_end_8794484717692
		
		foreach_min_body_8794484717692:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 604($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 668($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 596($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 608($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 604($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 600($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8794484717692
		lw $t0, 588($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484717692
		
		# Jumping to update_min_end_8794484717692
		j update_min_end_8794484717692
		
		update_min_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 604($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 608($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 604($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 612($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 616($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 612($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 616($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 724($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 616($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484717692
		j foreach_min_start_8794484717692
		
		foreach_min_end_8794484717692:
		
		# initialize Array [internal_3]
		lw $t0, 708($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 584($sp) # internal_34 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 580($sp) # internal_35 = address of allocated object Int
		
		# array internal_34[4 * internal_35] = internal_1
		lw $t0, 580($sp) # $t0 = internal_35
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 576($sp) # internal_36 = address of allocated object Int
		
		# array internal_34[4 * internal_36] = internal_1
		lw $t0, 576($sp) # $t0 = internal_36
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 572($sp) # internal_37 = address of allocated object Int
		
		# array internal_34[4 * internal_37] = internal_1
		lw $t0, 572($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 568($sp) # internal_38 = address of allocated object Int
		
		# array internal_34[4 * internal_38] = internal_1
		lw $t0, 568($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 716($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 564($sp) # internal_39 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 604($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 712($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 576($sp) # internal_39 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_39 then goto error_branch_8794484717692
		lw $t0, 564($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484717692
		
		# array internal_34[4 * internal_30] = internal_2
		lw $t0, 600($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 712($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 560($sp) # internal_40 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 556($sp) # internal_41 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_41]
		lw $t0, 556($sp) # $t0 = internal_41
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 560($sp) # internal_40 = array internal_34[4 * internal_41]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bazz_8794484717692
		lw $t0, 560($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8794484717692
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 552($sp) # internal_42 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_42]
		lw $t0, 552($sp) # $t0 = internal_42
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 560($sp) # internal_40 = array internal_34[4 * internal_42]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Razz_8794484717692
		lw $t0, 560($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484717692
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 548($sp) # internal_43 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_43]
		lw $t0, 548($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 560($sp) # internal_40 = array internal_34[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Foo_8794484717692
		lw $t0, 560($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8794484717692
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 544($sp) # internal_44 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_44]
		lw $t0, 544($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 584($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 560($sp) # internal_40 = array internal_34[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bar_8794484717692
		lw $t0, 560($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484717692
		
		branch_Bazz_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 532($sp) # internal_47 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 540($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 540($sp) # internal_47 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 552($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_47
		lw $t0, 544($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_47
		lw $t0, 532($sp)
		sw $t0, 540($sp)
		
		# Jumping to branch_end_8794484717692
		j branch_end_8794484717692
		
		branch_Razz_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 524($sp) # internal_49 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 532($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 532($sp) # internal_49 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 552($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_49
		lw $t0, 536($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_49
		lw $t0, 524($sp)
		sw $t0, 540($sp)
		
		# Jumping to branch_end_8794484717692
		j branch_end_8794484717692
		
		branch_Foo_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 516($sp) # internal_51 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 524($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 524($sp) # internal_51 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 552($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_51
		lw $t0, 528($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_51
		lw $t0, 516($sp)
		sw $t0, 540($sp)
		
		# Jumping to branch_end_8794484717692
		j branch_end_8794484717692
		
		branch_Bar_8794484717692:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 552($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = n
		lw $t0, 536($sp)
		sw $t0, 540($sp)
		
		# Jumping to branch_end_8794484717692
		j branch_end_8794484717692
		
		error_branch_8794484717692:
		
		branch_end_8794484717692:
		
		# Set attribute g of self
		lw $t0, 724($sp) # $t0 = self
		lw $t1, 540($sp) # $t1 = internal_45
		beq $t1, $zero, object_set_attribute_8794484650219
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484650219
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484650219
		j object_set_attribute_8794484650219
		int_set_attribute_8794484650219:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484650219
		bool_set_attribute_8794484650219:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484650219
		object_set_attribute_8794484650219:
		sw $t1, 12($t0) # self.g = internal_45
		end_set_attribute_8794484650219:
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 504($sp) # internal_54 = address of allocated object Int
		
		# Get method printh of Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 504($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 500($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 732($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_55
		lw $t0, 508($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 516($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 724($sp) # $t0 = self
		lw $t1, 508($sp) # $t1 = internal_53
		beq $t1, $zero, object_set_attribute_8794484650195
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484650195
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484650195
		j object_set_attribute_8794484650195
		int_set_attribute_8794484650195:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484650195
		bool_set_attribute_8794484650195:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484650195
		object_set_attribute_8794484650195:
		sw $t1, 16($t0) # self.i = internal_53
		end_set_attribute_8794484650195:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 496($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 492($sp) # internal_57 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 488($sp) # internal_58 = address of allocated object Int
		
		# Allocating NUll to internal_59
		sw $zero, 484($sp) # internal_59 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 480($sp) # internal_60 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 468($sp) # internal_63 = address of allocated object Int
		
		# internal_61 = typeof self that is the first word of the object
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		sw $t0, 476($sp)
		
		# internal_62 = internal_61
		lw $t0, 476($sp)
		sw $t0, 472($sp)
		
		while_start_8794484687207:
		
		# internal_63 = EqualAddress(internal_62, internal_59)
		lw $t0, 472($sp)
		lw $t1, 484($sp)
		seq $t2, $t0, $t1
		lw $t0, 468($sp)
		sw $t2, 8($t0)
		
		# If internal_63 then goto while_end_8794484687207
		lw $t0, 468($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484687207
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_60
		lw $t0, 492($sp)
		sw $t0, 4($sp) # Storing internal_60
		
		# Argument internal_57
		lw $t0, 504($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 492($sp) # internal_60 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_62 = ancestor of internal_62
		lw $t0, 472($sp)
		lw $t0, 4($t0)
		sw $t0, 472($sp)
		
		# Jumping to while_start_8794484687207
		j while_start_8794484687207
		
		while_end_8794484687207:
		
		# internal_62 = internal_61
		lw $t0, 476($sp)
		sw $t0, 472($sp)
		
		# initialize Array [internal_60]
		lw $t0, 480($sp) # $t0 = internal_60
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 464($sp) # internal_64 = new Array[internal_60]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 460($sp) # internal_65 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 456($sp) # internal_66 = address of allocated object Int
		
		foreach_start_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 472($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_60
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 468($sp) # internal_66 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_66 then goto foreach_body_8794484687207
		lw $t0, 456($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484687207
		
		# Jumping to foreach_end_8794484687207
		j foreach_end_8794484687207
		
		foreach_body_8794484687207:
		
		# array internal_64[4 * internal_65] = internal_62
		lw $t0, 460($sp) # $t0 = internal_65
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 464($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 472($sp)
		sw $t0, 0($t1)
		
		# internal_62 = ancestor of internal_62
		lw $t0, 472($sp)
		lw $t0, 4($t0)
		sw $t0, 472($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 472($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_57
		lw $t0, 504($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 472($sp) # internal_65 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484687207
		j foreach_start_8794484687207
		
		foreach_end_8794484687207:
		
		# initialize Array [internal_58]
		lw $t0, 488($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 452($sp) # internal_67 = new Array[internal_58]
		
		# initialize Array [internal_58]
		lw $t0, 488($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 448($sp) # internal_68 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 440($sp) # internal_70 = address of allocated object Int
		
		# internal_69 = direction of Razz
		la $t0, type_Razz
		sw $t0, 444($sp)
		
		# array internal_67[4 * internal_70] = internal_69
		lw $t0, 440($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 452($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 444($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_70] = internal_60
		lw $t0, 440($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 448($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 432($sp) # internal_72 = address of allocated object Int
		
		# internal_71 = direction of Foo
		la $t0, type_Foo
		sw $t0, 436($sp)
		
		# array internal_67[4 * internal_72] = internal_71
		lw $t0, 432($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 452($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 436($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_72] = internal_60
		lw $t0, 432($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 448($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 424($sp) # internal_74 = address of allocated object Int
		
		# internal_73 = direction of Bar
		la $t0, type_Bar
		sw $t0, 428($sp)
		
		# array internal_67[4 * internal_74] = internal_73
		lw $t0, 424($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 452($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 428($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_74] = internal_60
		lw $t0, 424($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 448($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 480($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 420($sp) # internal_75 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 416($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 408($sp) # internal_78 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 404($sp) # internal_79 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 396($sp) # internal_81 = address of allocated object Int
		
		foreach_type_start_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 432($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_58
		lw $t0, 500($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 428($sp) # internal_76 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_76 then goto foreach_type_body_8794484687207
		lw $t0, 416($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484687207
		
		# Jumping to foreach_type_end_8794484687207
		j foreach_type_end_8794484687207
		
		foreach_type_body_8794484687207:
		
		# internal_77 = array internal_67[4 * internal_75]
		lw $t0, 420($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 452($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 412($sp) # internal_77 = array internal_67[4 * internal_75]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 420($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_56
		lw $t0, 508($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 420($sp) # internal_78 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 420($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_60
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 416($sp) # internal_79 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_79 then goto foreach_ancestor_body_8794484687207
		lw $t0, 404($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484687207
		
		# Jumping to foreach_ancestor_end_8794484687207
		j foreach_ancestor_end_8794484687207
		
		foreach_ancestor_body_8794484687207:
		
		# internal_80 = array internal_64[4 * internal_78]
		lw $t0, 408($sp) # $t0 = internal_78
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 464($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 400($sp) # internal_80 = array internal_64[4 * internal_78]
		
		# internal_81 = EqualAddress(internal_77, internal_80)
		lw $t0, 412($sp)
		lw $t1, 400($sp)
		seq $t2, $t0, $t1
		lw $t0, 396($sp)
		sw $t2, 8($t0)
		
		# If internal_81 then goto foreach_ancestor_end_8794484687207
		lw $t0, 396($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484687207
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 420($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_57
		lw $t0, 504($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 420($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484687207
		j foreach_ancestor_start_8794484687207
		
		foreach_ancestor_end_8794484687207:
		
		# array internal_68[4 * internal_75] = internal_78
		lw $t0, 420($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 448($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 408($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 432($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_57
		lw $t0, 504($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 432($sp) # internal_75 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484687207
		j foreach_type_start_8794484687207
		
		foreach_type_end_8794484687207:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 392($sp) # internal_82 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 388($sp) # internal_83 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 384($sp) # internal_84 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 380($sp) # internal_85 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 376($sp) # internal_86 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 392($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 392($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 404($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_58
		lw $t0, 500($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 388($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto foreach_min_body_8794484687207
		lw $t0, 376($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484687207
		
		# Jumping to foreach_min_end_8794484687207
		j foreach_min_end_8794484687207
		
		foreach_min_body_8794484687207:
		
		# internal_84 = array internal_68[4 * internal_82]
		lw $t0, 392($sp) # $t0 = internal_82
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 448($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 384($sp) # internal_84 = array internal_68[4 * internal_82]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 396($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_85
		lw $t0, 392($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 388($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto update_min_8794484687207
		lw $t0, 376($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484687207
		
		# Jumping to update_min_end_8794484687207
		j update_min_end_8794484687207
		
		update_min_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 392($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_84
		lw $t0, 396($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 392($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_83
		lw $t0, 400($sp)
		sw $t0, 4($sp) # Storing internal_83
		
		# Argument internal_82
		lw $t0, 404($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 400($sp) # internal_83 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 404($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_57
		lw $t0, 504($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 404($sp) # internal_82 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484687207
		j foreach_min_start_8794484687207
		
		foreach_min_end_8794484687207:
		
		# initialize Array [internal_58]
		lw $t0, 488($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 372($sp) # internal_87 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 368($sp) # internal_88 = address of allocated object Int
		
		# array internal_87[4 * internal_88] = internal_56
		lw $t0, 368($sp) # $t0 = internal_88
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 372($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 496($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 364($sp) # internal_89 = address of allocated object Int
		
		# array internal_87[4 * internal_89] = internal_56
		lw $t0, 364($sp) # $t0 = internal_89
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 372($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 496($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 360($sp) # internal_90 = address of allocated object Int
		
		# array internal_87[4 * internal_90] = internal_56
		lw $t0, 360($sp) # $t0 = internal_90
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 372($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 496($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_91 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 392($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 368($sp) # internal_91 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_91 then goto error_branch_8794484687207
		lw $t0, 356($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484687207
		
		# array internal_87[4 * internal_83] = internal_57
		lw $t0, 388($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 372($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 492($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 352($sp) # internal_92 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 348($sp) # internal_93 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_93]
		lw $t0, 348($sp) # $t0 = internal_93
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 372($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 352($sp) # internal_92 = array internal_87[4 * internal_93]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Razz_8794484687207
		lw $t0, 352($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484687207
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 344($sp) # internal_94 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_94]
		lw $t0, 344($sp) # $t0 = internal_94
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 372($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 352($sp) # internal_92 = array internal_87[4 * internal_94]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Foo_8794484687207
		lw $t0, 352($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8794484687207
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 340($sp) # internal_95 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_95]
		lw $t0, 340($sp) # $t0 = internal_95
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 372($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 352($sp) # internal_92 = array internal_87[4 * internal_95]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Bar_8794484687207
		lw $t0, 352($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484687207
		
		branch_Razz_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 328($sp) # internal_98 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_98
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_98
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 336($sp) # internal_98 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument internal_98
		lw $t0, 340($sp)
		sw $t0, 0($sp) # Storing internal_98
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 348($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = internal_98
		lw $t0, 328($sp)
		sw $t0, 336($sp)
		
		# Jumping to branch_end_8794484687207
		j branch_end_8794484687207
		
		branch_Foo_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 320($sp) # internal_100 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_100
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 328($sp) # internal_100 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument internal_100
		lw $t0, 332($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 348($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = internal_100
		lw $t0, 320($sp)
		sw $t0, 336($sp)
		
		# Jumping to branch_end_8794484687207
		j branch_end_8794484687207
		
		branch_Bar_8794484687207:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 348($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = n
		lw $t0, 536($sp)
		sw $t0, 336($sp)
		
		# Jumping to branch_end_8794484687207
		j branch_end_8794484687207
		
		error_branch_8794484687207:
		
		branch_end_8794484687207:
		
		# Set attribute a of self
		lw $t0, 724($sp) # $t0 = self
		lw $t1, 336($sp) # $t1 = internal_96
		beq $t1, $zero, object_set_attribute_8794484622132
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484622132
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484622132
		j object_set_attribute_8794484622132
		int_set_attribute_8794484622132:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_96
		j end_set_attribute_8794484622132
		bool_set_attribute_8794484622132:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.a = internal_96
		j end_set_attribute_8794484622132
		object_set_attribute_8794484622132:
		sw $t1, 20($t0) # self.a = internal_96
		end_set_attribute_8794484622132:
		
		# Get attribute a of self
		lw $t0, 724($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484677946
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484677946
		j object_get_attribute_8794484677946
		int_get_attribute_8794484677946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp) # internal_102 = self.a
		j end_get_attribute_8794484677946
		bool_get_attribute_8794484677946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp) # internal_102 = self.a
		j end_get_attribute_8794484677946
		object_get_attribute_8794484677946:
		sw $t1, 312($sp) # internal_102 = self.a
		end_get_attribute_8794484677946:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 304($sp) # internal_104 = address of allocated object Int
		
		# Get method doh of Razz
		lw $t0, 312($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 304($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 300($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_102
		lw $t0, 320($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function internal_105
		lw $t0, 308($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 316($sp) # internal_103 = result of internal_105
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 724($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484677985
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484677985
		j object_get_attribute_8794484677985
		int_get_attribute_8794484677985:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 296($sp) # internal_106 = self.g
		j end_get_attribute_8794484677985
		bool_get_attribute_8794484677985:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 296($sp) # internal_106 = self.g
		j end_get_attribute_8794484677985
		object_get_attribute_8794484677985:
		sw $t1, 296($sp) # internal_106 = self.g
		end_get_attribute_8794484677985:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 288($sp) # internal_108 = address of allocated object Int
		
		# Get method doh of Foo
		lw $t0, 296($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 288($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 284($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_106
		lw $t0, 304($sp)
		sw $t0, 0($sp) # Storing internal_106
		
		# Calling function internal_109
		lw $t0, 292($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 300($sp) # internal_107 = result of internal_109
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_103
		lw $t0, 320($sp)
		sw $t0, 4($sp) # Storing internal_103
		
		# Argument internal_107
		lw $t0, 304($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 292($sp) # internal_110 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_112 = address of allocated object Int
		
		# Get method doh of Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 272($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 268($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 732($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_113
		lw $t0, 276($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 284($sp) # internal_111 = result of internal_113
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_110
		lw $t0, 292($sp)
		sw $t0, 4($sp) # Storing internal_110
		
		# Argument internal_111
		lw $t0, 288($sp)
		sw $t0, 0($sp) # Storing internal_111
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 276($sp) # internal_114 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 256($sp) # internal_116 = address of allocated object Int
		
		# Get method printh of Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 256($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 252($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 732($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_117
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 268($sp) # internal_115 = result of internal_117
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_114
		lw $t0, 276($sp)
		sw $t0, 4($sp) # Storing internal_114
		
		# Argument internal_115
		lw $t0, 272($sp)
		sw $t0, 0($sp) # Storing internal_115
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 260($sp) # internal_118 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 724($sp) # $t0 = self
		lw $t1, 248($sp) # $t1 = internal_118
		beq $t1, $zero, object_set_attribute_8794484673540
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484673540
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484673540
		j object_set_attribute_8794484673540
		int_set_attribute_8794484673540:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_118
		j end_set_attribute_8794484673540
		bool_set_attribute_8794484673540:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.b = internal_118
		j end_set_attribute_8794484673540
		object_set_attribute_8794484673540:
		sw $t1, 24($t0) # self.b = internal_118
		end_set_attribute_8794484673540:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 244($sp) # internal_119 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 240($sp) # internal_120 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 236($sp) # internal_121 = address of allocated object Int
		
		# Allocating NUll to internal_122
		sw $zero, 232($sp) # internal_122 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 228($sp) # internal_123 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_126 = address of allocated object Int
		
		# internal_124 = typeof self that is the first word of the object
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		sw $t0, 224($sp)
		
		# internal_125 = internal_124
		lw $t0, 224($sp)
		sw $t0, 220($sp)
		
		while_start_8794484690189:
		
		# internal_126 = EqualAddress(internal_125, internal_122)
		lw $t0, 220($sp)
		lw $t1, 232($sp)
		seq $t2, $t0, $t1
		lw $t0, 216($sp)
		sw $t2, 8($t0)
		
		# If internal_126 then goto while_end_8794484690189
		lw $t0, 216($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484690189
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_123
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing internal_123
		
		# Argument internal_120
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_123 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_125 = ancestor of internal_125
		lw $t0, 220($sp)
		lw $t0, 4($t0)
		sw $t0, 220($sp)
		
		# Jumping to while_start_8794484690189
		j while_start_8794484690189
		
		while_end_8794484690189:
		
		# internal_125 = internal_124
		lw $t0, 224($sp)
		sw $t0, 220($sp)
		
		# initialize Array [internal_123]
		lw $t0, 228($sp) # $t0 = internal_123
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 212($sp) # internal_127 = new Array[internal_123]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_128 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_129 = address of allocated object Int
		
		foreach_start_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_128
		lw $t0, 220($sp)
		sw $t0, 4($sp) # Storing internal_128
		
		# Argument internal_123
		lw $t0, 240($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 216($sp) # internal_129 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_129 then goto foreach_body_8794484690189
		lw $t0, 204($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484690189
		
		# Jumping to foreach_end_8794484690189
		j foreach_end_8794484690189
		
		foreach_body_8794484690189:
		
		# array internal_127[4 * internal_128] = internal_125
		lw $t0, 208($sp) # $t0 = internal_128
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 212($sp) # $t1 = internal_127
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 220($sp)
		sw $t0, 0($t1)
		
		# internal_125 = ancestor of internal_125
		lw $t0, 220($sp)
		lw $t0, 4($t0)
		sw $t0, 220($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_128
		lw $t0, 220($sp)
		sw $t0, 4($sp) # Storing internal_128
		
		# Argument internal_120
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 220($sp) # internal_128 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484690189
		j foreach_start_8794484690189
		
		foreach_end_8794484690189:
		
		# initialize Array [internal_121]
		lw $t0, 236($sp) # $t0 = internal_121
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 200($sp) # internal_130 = new Array[internal_121]
		
		# initialize Array [internal_121]
		lw $t0, 236($sp) # $t0 = internal_121
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 196($sp) # internal_131 = new Array[internal_121]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_133 = address of allocated object Int
		
		# internal_132 = direction of Razz
		la $t0, type_Razz
		sw $t0, 192($sp)
		
		# array internal_130[4 * internal_133] = internal_132
		lw $t0, 188($sp) # $t0 = internal_133
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_130
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 192($sp)
		sw $t0, 0($t1)
		
		# array internal_131[4 * internal_133] = internal_123
		lw $t0, 188($sp) # $t0 = internal_133
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 196($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 180($sp) # internal_135 = address of allocated object Int
		
		# internal_134 = direction of Bar
		la $t0, type_Bar
		sw $t0, 184($sp)
		
		# array internal_130[4 * internal_135] = internal_134
		lw $t0, 180($sp) # $t0 = internal_135
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_130
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 184($sp)
		sw $t0, 0($t1)
		
		# array internal_131[4 * internal_135] = internal_123
		lw $t0, 180($sp) # $t0 = internal_135
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 196($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_136 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_137 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_139 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_140 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_142 = address of allocated object Int
		
		foreach_type_start_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_136
		lw $t0, 188($sp)
		sw $t0, 4($sp) # Storing internal_136
		
		# Argument internal_121
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_121
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 184($sp) # internal_137 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_137 then goto foreach_type_body_8794484690189
		lw $t0, 172($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484690189
		
		# Jumping to foreach_type_end_8794484690189
		j foreach_type_end_8794484690189
		
		foreach_type_body_8794484690189:
		
		# internal_138 = array internal_130[4 * internal_136]
		lw $t0, 176($sp) # $t0 = internal_136
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 200($sp) # $t1 = internal_130
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 168($sp) # internal_138 = array internal_130[4 * internal_136]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_119
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing internal_119
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 176($sp) # internal_139 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_123
		lw $t0, 240($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_140 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_140 then goto foreach_ancestor_body_8794484690189
		lw $t0, 160($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484690189
		
		# Jumping to foreach_ancestor_end_8794484690189
		j foreach_ancestor_end_8794484690189
		
		foreach_ancestor_body_8794484690189:
		
		# internal_141 = array internal_127[4 * internal_139]
		lw $t0, 164($sp) # $t0 = internal_139
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 212($sp) # $t1 = internal_127
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 156($sp) # internal_141 = array internal_127[4 * internal_139]
		
		# internal_142 = EqualAddress(internal_138, internal_141)
		lw $t0, 168($sp)
		lw $t1, 156($sp)
		seq $t2, $t0, $t1
		lw $t0, 152($sp)
		sw $t2, 8($t0)
		
		# If internal_142 then goto foreach_ancestor_end_8794484690189
		lw $t0, 152($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484690189
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_139
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing internal_139
		
		# Argument internal_120
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 176($sp) # internal_139 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484690189
		j foreach_ancestor_start_8794484690189
		
		foreach_ancestor_end_8794484690189:
		
		# array internal_131[4 * internal_136] = internal_139
		lw $t0, 176($sp) # $t0 = internal_136
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 196($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_136
		lw $t0, 188($sp)
		sw $t0, 4($sp) # Storing internal_136
		
		# Argument internal_120
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 188($sp) # internal_136 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484690189
		j foreach_type_start_8794484690189
		
		foreach_type_end_8794484690189:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_143 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_144 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_145 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_146 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_147 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_146
		lw $t0, 148($sp)
		sw $t0, 4($sp) # Storing internal_146
		
		# Argument internal_123
		lw $t0, 240($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_146 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_143
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_143
		
		# Argument internal_121
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_121
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_147 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_147 then goto foreach_min_body_8794484690189
		lw $t0, 132($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484690189
		
		# Jumping to foreach_min_end_8794484690189
		j foreach_min_end_8794484690189
		
		foreach_min_body_8794484690189:
		
		# internal_145 = array internal_131[4 * internal_143]
		lw $t0, 148($sp) # $t0 = internal_143
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 196($sp) # $t1 = internal_131
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 140($sp) # internal_145 = array internal_131[4 * internal_143]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_145
		lw $t0, 152($sp)
		sw $t0, 4($sp) # Storing internal_145
		
		# Argument internal_146
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_146
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_147 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_147 then goto update_min_8794484690189
		lw $t0, 132($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484690189
		
		# Jumping to update_min_end_8794484690189
		j update_min_end_8794484690189
		
		update_min_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_146
		lw $t0, 148($sp)
		sw $t0, 4($sp) # Storing internal_146
		
		# Argument internal_145
		lw $t0, 152($sp)
		sw $t0, 0($sp) # Storing internal_145
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_146 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_144
		lw $t0, 156($sp)
		sw $t0, 4($sp) # Storing internal_144
		
		# Argument internal_143
		lw $t0, 160($sp)
		sw $t0, 0($sp) # Storing internal_143
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 156($sp) # internal_144 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_143
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_143
		
		# Argument internal_120
		lw $t0, 252($sp)
		sw $t0, 0($sp) # Storing internal_120
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_143 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484690189
		j foreach_min_start_8794484690189
		
		foreach_min_end_8794484690189:
		
		# initialize Array [internal_121]
		lw $t0, 236($sp) # $t0 = internal_121
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 128($sp) # internal_148 = new Array[internal_121]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_149 = address of allocated object Int
		
		# array internal_148[4 * internal_149] = internal_119
		lw $t0, 124($sp) # $t0 = internal_149
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 128($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 244($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_150 = address of allocated object Int
		
		# array internal_148[4 * internal_150] = internal_119
		lw $t0, 120($sp) # $t0 = internal_150
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 128($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 244($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_151 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_146
		lw $t0, 148($sp)
		sw $t0, 4($sp) # Storing internal_146
		
		# Argument internal_123
		lw $t0, 240($sp)
		sw $t0, 0($sp) # Storing internal_123
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_151 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_151 then goto error_branch_8794484690189
		lw $t0, 116($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484690189
		
		# array internal_148[4 * internal_144] = internal_120
		lw $t0, 144($sp) # $t0 = internal_144
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 128($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_152 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_153 = address of allocated object Int
		
		# internal_152 = array internal_148[4 * internal_153]
		lw $t0, 108($sp) # $t0 = internal_153
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 128($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 112($sp) # internal_152 = array internal_148[4 * internal_153]
		sw $t0, 8($t2)
		
		# If internal_152 then goto branch_Razz_8794484690189
		lw $t0, 112($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484690189
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_154 = address of allocated object Int
		
		# internal_152 = array internal_148[4 * internal_154]
		lw $t0, 104($sp) # $t0 = internal_154
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 128($sp) # $t1 = internal_148
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 112($sp) # internal_152 = array internal_148[4 * internal_154]
		sw $t0, 8($t2)
		
		# If internal_152 then goto branch_Bar_8794484690189
		lw $t0, 112($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484690189
		
		branch_Razz_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 92($sp) # internal_157 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_157
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 100($sp) # internal_157 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_155
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing internal_155
		
		# Argument internal_157
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_155 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_155 = internal_157
		lw $t0, 92($sp)
		sw $t0, 100($sp)
		
		# Jumping to branch_end_8794484690189
		j branch_end_8794484690189
		
		branch_Bar_8794484690189:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 736($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 548($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_155
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing internal_155
		
		# Argument n
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_155 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_155 = n
		lw $t0, 536($sp)
		sw $t0, 100($sp)
		
		# Jumping to branch_end_8794484690189
		j branch_end_8794484690189
		
		error_branch_8794484690189:
		
		branch_end_8794484690189:
		
		# Set attribute e of self
		lw $t0, 724($sp) # $t0 = self
		lw $t1, 100($sp) # $t1 = internal_155
		beq $t1, $zero, object_set_attribute_8794484675603
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484675603
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484675603
		j object_set_attribute_8794484675603
		int_set_attribute_8794484675603:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_155
		j end_set_attribute_8794484675603
		bool_set_attribute_8794484675603:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($t0) # self.e = internal_155
		j end_set_attribute_8794484675603
		object_set_attribute_8794484675603:
		sw $t1, 28($t0) # self.e = internal_155
		end_set_attribute_8794484675603:
		
		# Get attribute a of self
		lw $t0, 724($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'a' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484654758
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484654758
		j object_get_attribute_8794484654758
		int_get_attribute_8794484654758:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp) # internal_159 = self.a
		j end_get_attribute_8794484654758
		bool_get_attribute_8794484654758:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp) # internal_159 = self.a
		j end_get_attribute_8794484654758
		object_get_attribute_8794484654758:
		sw $t1, 84($sp) # internal_159 = self.a
		end_get_attribute_8794484654758:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_161 = address of allocated object Int
		
		# Get method doh of Bazz
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 76($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 72($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_159
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_159
		
		# Calling function function_doh_at_Bazz
		jal function_doh_at_Bazz
		lw $ra, 4($sp)
		sw $v1, 88($sp) # internal_160 = result of function_doh_at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute g of self
		lw $t0, 724($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'g' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484654680
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484654680
		j object_get_attribute_8794484654680
		int_get_attribute_8794484654680:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_163 = self.g
		j end_get_attribute_8794484654680
		bool_get_attribute_8794484654680:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_163 = self.g
		j end_get_attribute_8794484654680
		object_get_attribute_8794484654680:
		sw $t1, 68($sp) # internal_163 = self.g
		end_get_attribute_8794484654680:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_165 = address of allocated object Int
		
		# Get method doh of Foo
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 60($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 56($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_163
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_163
		
		# Calling function internal_166
		lw $t0, 64($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 72($sp) # internal_164 = result of internal_166
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_160
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing internal_160
		
		# Argument internal_164
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_164
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_167 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute e of self
		lw $t0, 724($sp) # Get the address of self
		lw $t1, 28($t0) # Get the attribute 'e' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484654806
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484654806
		j object_get_attribute_8794484654806
		int_get_attribute_8794484654806:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_168 = self.e
		j end_get_attribute_8794484654806
		bool_get_attribute_8794484654806:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_168 = self.e
		j end_get_attribute_8794484654806
		object_get_attribute_8794484654806:
		sw $t1, 48($sp) # internal_168 = self.e
		end_get_attribute_8794484654806:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_170 = address of allocated object Int
		
		# Get method doh of Bar
		lw $t0, 48($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_168
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_168
		
		# Calling function internal_171
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 52($sp) # internal_169 = result of internal_171
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_167
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing internal_167
		
		# Argument internal_169
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_169
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_172 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_174 = address of allocated object Int
		
		# Get method doh of Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 732($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_175
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_173 = result of internal_175
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_172
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_172
		
		# Argument internal_173
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_173
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_176 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_178 = address of allocated object Int
		
		# Get method printh of Razz
		lw $t0, 724($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 732($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_179
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_177 = result of internal_179
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_176
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_176
		
		# Argument internal_177
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_177
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_180 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute f of self
		lw $t0, 724($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_180
		beq $t1, $zero, object_set_attribute_8794484654695
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484654695
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484654695
		j object_set_attribute_8794484654695
		int_set_attribute_8794484654695:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_180
		j end_set_attribute_8794484654695
		bool_set_attribute_8794484654695:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($t0) # self.f = internal_180
		j end_set_attribute_8794484654695
		object_set_attribute_8794484654695:
		sw $t1, 32($t0) # self.f = internal_180
		end_set_attribute_8794484654695:
		
		# Loading return value in $v1
		lw $v1, 724($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 724
		
		jr $ra
		
	function___init___at_Bazz:
		# Function parameters
		#   $ra = 228($sp)
		#   self = 224($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -224
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 220($sp) # internal_0 = address of allocated object Int
		
		# Set attribute h of self
		lw $t0, 224($sp) # $t0 = self
		lw $t1, 220($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8794484653707
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484653707
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484653707
		j object_set_attribute_8794484653707
		int_set_attribute_8794484653707:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484653707
		bool_set_attribute_8794484653707:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_0
		j end_set_attribute_8794484653707
		object_set_attribute_8794484653707:
		sw $t1, 8($t0) # self.h = internal_0
		end_set_attribute_8794484653707:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_3 = address of allocated object Int
		
		# Allocating NUll to internal_4
		sw $zero, 204($sp) # internal_4 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_8 = address of allocated object Int
		
		# internal_6 = typeof self that is the first word of the object
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		sw $t0, 196($sp)
		
		# internal_7 = internal_6
		lw $t0, 196($sp)
		sw $t0, 192($sp)
		
		while_start_8794484671537:
		
		# internal_8 = EqualAddress(internal_7, internal_4)
		lw $t0, 192($sp)
		lw $t1, 204($sp)
		seq $t2, $t0, $t1
		lw $t0, 188($sp)
		sw $t2, 8($t0)
		
		# If internal_8 then goto while_end_8794484671537
		lw $t0, 188($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8794484671537
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_5 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 192($sp)
		lw $t0, 4($t0)
		sw $t0, 192($sp)
		
		# Jumping to while_start_8794484671537
		j while_start_8794484671537
		
		while_end_8794484671537:
		
		# internal_7 = internal_6
		lw $t0, 196($sp)
		sw $t0, 192($sp)
		
		# initialize Array [internal_5]
		lw $t0, 200($sp) # $t0 = internal_5
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 184($sp) # internal_9 = new Array[internal_5]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 180($sp) # internal_10 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_11 = address of allocated object Int
		
		foreach_start_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 192($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 188($sp) # internal_11 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_11 then goto foreach_body_8794484671537
		lw $t0, 176($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8794484671537
		
		# Jumping to foreach_end_8794484671537
		j foreach_end_8794484671537
		
		foreach_body_8794484671537:
		
		# array internal_9[4 * internal_10] = internal_7
		lw $t0, 180($sp) # $t0 = internal_10
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 184($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 192($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 192($sp)
		lw $t0, 4($t0)
		sw $t0, 192($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 192($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8794484671537
		j foreach_start_8794484671537
		
		foreach_end_8794484671537:
		
		# initialize Array [internal_3]
		lw $t0, 208($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 172($sp) # internal_12 = new Array[internal_3]
		
		# initialize Array [internal_3]
		lw $t0, 208($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 168($sp) # internal_13 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_15 = address of allocated object Int
		
		# internal_14 = direction of Bazz
		la $t0, type_Bazz
		sw $t0, 164($sp)
		
		# array internal_12[4 * internal_15] = internal_14
		lw $t0, 160($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 164($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_15] = internal_5
		lw $t0, 160($sp) # $t0 = internal_15
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_17 = address of allocated object Int
		
		# internal_16 = direction of Razz
		la $t0, type_Razz
		sw $t0, 156($sp)
		
		# array internal_12[4 * internal_17] = internal_16
		lw $t0, 152($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 156($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_17] = internal_5
		lw $t0, 152($sp) # $t0 = internal_17
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_19 = address of allocated object Int
		
		# internal_18 = direction of Foo
		la $t0, type_Foo
		sw $t0, 148($sp)
		
		# array internal_12[4 * internal_19] = internal_18
		lw $t0, 144($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 148($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_19] = internal_5
		lw $t0, 144($sp) # $t0 = internal_19
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_21 = address of allocated object Int
		
		# internal_20 = direction of Bar
		la $t0, type_Bar
		sw $t0, 140($sp)
		
		# array internal_12[4 * internal_21] = internal_20
		lw $t0, 136($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 140($sp)
		sw $t0, 0($t1)
		
		# array internal_13[4 * internal_21] = internal_5
		lw $t0, 136($sp) # $t0 = internal_21
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_22 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_26 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_28 = address of allocated object Int
		
		foreach_type_start_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_3
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_23 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_23 then goto foreach_type_body_8794484671537
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8794484671537
		
		# Jumping to foreach_type_end_8794484671537
		j foreach_type_end_8794484671537
		
		foreach_type_body_8794484671537:
		
		# internal_24 = array internal_12[4 * internal_22]
		lw $t0, 132($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 172($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 124($sp) # internal_24 = array internal_12[4 * internal_22]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_25 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_ancestor_body_8794484671537
		lw $t0, 116($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8794484671537
		
		# Jumping to foreach_ancestor_end_8794484671537
		j foreach_ancestor_end_8794484671537
		
		foreach_ancestor_body_8794484671537:
		
		# internal_27 = array internal_9[4 * internal_25]
		lw $t0, 120($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 184($sp) # $t1 = internal_9
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 112($sp) # internal_27 = array internal_9[4 * internal_25]
		
		# internal_28 = EqualAddress(internal_24, internal_27)
		lw $t0, 124($sp)
		lw $t1, 112($sp)
		seq $t2, $t0, $t1
		lw $t0, 108($sp)
		sw $t2, 8($t0)
		
		# If internal_28 then goto foreach_ancestor_end_8794484671537
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8794484671537
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8794484671537
		j foreach_ancestor_start_8794484671537
		
		foreach_ancestor_end_8794484671537:
		
		# array internal_13[4 * internal_22] = internal_25
		lw $t0, 132($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 144($sp)
		sw $t0, 4($sp) # Storing internal_22
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_22 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8794484671537
		j foreach_type_start_8794484671537
		
		foreach_type_end_8794484671537:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_32 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_33 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_3
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto foreach_min_body_8794484671537
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8794484671537
		
		# Jumping to foreach_min_end_8794484671537
		j foreach_min_end_8794484671537
		
		foreach_min_body_8794484671537:
		
		# internal_31 = array internal_13[4 * internal_29]
		lw $t0, 104($sp) # $t0 = internal_29
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 168($sp) # $t1 = internal_13
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 96($sp) # internal_31 = array internal_13[4 * internal_29]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_33 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_33 then goto update_min_8794484671537
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8794484671537
		
		# Jumping to update_min_end_8794484671537
		j update_min_end_8794484671537
		
		update_min_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_31
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing internal_31
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_32 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_30
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing internal_30
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_30 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing internal_29
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_29 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8794484671537
		j foreach_min_start_8794484671537
		
		foreach_min_end_8794484671537:
		
		# initialize Array [internal_3]
		lw $t0, 208($sp) # $t0 = internal_3
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 84($sp) # internal_34 = new Array[internal_3]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_35 = address of allocated object Int
		
		# array internal_34[4 * internal_35] = internal_1
		lw $t0, 80($sp) # $t0 = internal_35
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_36 = address of allocated object Int
		
		# array internal_34[4 * internal_36] = internal_1
		lw $t0, 76($sp) # $t0 = internal_36
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_37 = address of allocated object Int
		
		# array internal_34[4 * internal_37] = internal_1
		lw $t0, 72($sp) # $t0 = internal_37
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_38 = address of allocated object Int
		
		# array internal_34[4 * internal_38] = internal_1
		lw $t0, 68($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_39 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_39 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_39 then goto error_branch_8794484671537
		lw $t0, 64($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8794484671537
		
		# array internal_34[4 * internal_30] = internal_2
		lw $t0, 100($sp) # $t0 = internal_30
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_40 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_41 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_41]
		lw $t0, 56($sp) # $t0 = internal_41
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 60($sp) # internal_40 = array internal_34[4 * internal_41]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bazz_8794484671537
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bazz_8794484671537
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_42 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_42]
		lw $t0, 52($sp) # $t0 = internal_42
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 60($sp) # internal_40 = array internal_34[4 * internal_42]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Razz_8794484671537
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Razz_8794484671537
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_43 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_43]
		lw $t0, 48($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 60($sp) # internal_40 = array internal_34[4 * internal_43]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Foo_8794484671537
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Foo_8794484671537
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_44 = address of allocated object Int
		
		# internal_40 = array internal_34[4 * internal_44]
		lw $t0, 44($sp) # $t0 = internal_44
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 84($sp) # $t1 = internal_34
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 60($sp) # internal_40 = array internal_34[4 * internal_44]
		sw $t0, 8($t2)
		
		# If internal_40 then goto branch_Bar_8794484671537
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Bar_8794484671537
		
		branch_Bazz_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 32($sp) # internal_47 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 40($sp) # internal_47 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_47
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_47
		lw $t0, 32($sp)
		sw $t0, 40($sp)
		
		# Jumping to branch_end_8794484671537
		j branch_end_8794484671537
		
		branch_Razz_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 24($sp) # internal_49 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_49
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 32($sp) # internal_49 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_49
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_49
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# Jumping to branch_end_8794484671537
		j branch_end_8794484671537
		
		branch_Foo_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 16($sp) # internal_51 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 24($sp) # internal_51 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument internal_51
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = internal_51
		lw $t0, 16($sp)
		sw $t0, 40($sp)
		
		# Jumping to branch_end_8794484671537
		j branch_end_8794484671537
		
		branch_Bar_8794484671537:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument n
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing n
		
		# Argument self
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp) # n = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_45
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_45
		
		# Argument n
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing n
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_45 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_45 = n
		lw $t0, 36($sp)
		sw $t0, 40($sp)
		
		# Jumping to branch_end_8794484671537
		j branch_end_8794484671537
		
		error_branch_8794484671537:
		
		branch_end_8794484671537:
		
		# Set attribute g of self
		lw $t0, 224($sp) # $t0 = self
		lw $t1, 40($sp) # $t1 = internal_45
		beq $t1, $zero, object_set_attribute_8794484653728
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484653728
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484653728
		j object_set_attribute_8794484653728
		int_set_attribute_8794484653728:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484653728
		bool_set_attribute_8794484653728:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.g = internal_45
		j end_set_attribute_8794484653728
		object_set_attribute_8794484653728:
		sw $t1, 12($t0) # self.g = internal_45
		end_set_attribute_8794484653728:
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_54 = address of allocated object Int
		
		# Get method printh of Bazz
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_55
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute i of self
		lw $t0, 224($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_53
		beq $t1, $zero, object_set_attribute_8794484653701
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484653701
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484653701
		j object_set_attribute_8794484653701
		int_set_attribute_8794484653701:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484653701
		bool_set_attribute_8794484653701:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.i = internal_53
		j end_set_attribute_8794484653701
		object_set_attribute_8794484653701:
		sw $t1, 16($t0) # self.i = internal_53
		end_set_attribute_8794484653701:
		
		# Loading return value in $v1
		lw $v1, 224($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 224
		
		jr $ra
		
	function_printh_at_Bazz:
		# Function parameters
		#   $ra = 24($sp)
		#   self = 20($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -20
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484682042
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484682042
		j object_get_attribute_8794484682042
		int_get_attribute_8794484682042:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_0 = self.h
		j end_get_attribute_8794484682042
		bool_get_attribute_8794484682042:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_0 = self.h
		j end_get_attribute_8794484682042
		object_get_attribute_8794484682042:
		sw $t1, 16($sp) # internal_0 = self.h
		end_get_attribute_8794484682042:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_2 = address of allocated object Int
		
		# Get method out_int of Bazz
		lw $t0, 20($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_0
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 16($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_4 = address of allocated object Int
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 20
		
		jr $ra
		
	function_doh_at_Bazz:
		# Function parameters
		#   $ra = 24($sp)
		#   self = 20($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -20
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484682015
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484682015
		j object_get_attribute_8794484682015
		int_get_attribute_8794484682015:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8794484682015
		bool_get_attribute_8794484682015:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_1 = self.h
		j end_get_attribute_8794484682015
		object_get_attribute_8794484682015:
		sw $t1, 12($sp) # internal_1 = self.h
		end_get_attribute_8794484682015:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_1
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute h of self
		lw $t0, 20($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'h' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8794484682141
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8794484682141
		j object_get_attribute_8794484682141
		int_get_attribute_8794484682141:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8794484682141
		bool_get_attribute_8794484682141:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($sp) # internal_2 = self.h
		j end_get_attribute_8794484682141
		object_get_attribute_8794484682141:
		sw $t1, 8($sp) # internal_2 = self.h
		end_get_attribute_8794484682141:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute h of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_4
		beq $t1, $zero, object_set_attribute_8794484682165
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484682165
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484682165
		j object_set_attribute_8794484682165
		int_set_attribute_8794484682165:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8794484682165
		bool_set_attribute_8794484682165:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.h = internal_4
		j end_set_attribute_8794484682165
		object_set_attribute_8794484682165:
		sw $t1, 8($t0) # self.h = internal_4
		end_set_attribute_8794484682165:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 20
		
		jr $ra
		
	function___init___at_Main:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Bazz
		li $v0, 9
		lw $a0, type_Bazz
		syscall
		la $t0, type_Bazz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_0 = address of allocated object Bazz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Bazz
		jal function___init___at_Bazz
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_0 = result of function___init___at_Bazz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute a of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8794484682219
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484682219
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484682219
		j object_set_attribute_8794484682219
		int_set_attribute_8794484682219:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.a = internal_0
		j end_set_attribute_8794484682219
		bool_set_attribute_8794484682219:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.a = internal_0
		j end_set_attribute_8794484682219
		object_set_attribute_8794484682219:
		sw $t1, 8($t0) # self.a = internal_0
		end_set_attribute_8794484682219:
		
		# Allocating Foo
		li $v0, 9
		lw $a0, type_Foo
		syscall
		la $t0, type_Foo # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 8($sp) # internal_1 = address of allocated object Foo
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function___init___at_Foo
		jal function___init___at_Foo
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of function___init___at_Foo
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute b of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_1
		beq $t1, $zero, object_set_attribute_8794484682045
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484682045
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484682045
		j object_set_attribute_8794484682045
		int_set_attribute_8794484682045:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.b = internal_1
		j end_set_attribute_8794484682045
		bool_set_attribute_8794484682045:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.b = internal_1
		j end_set_attribute_8794484682045
		object_set_attribute_8794484682045:
		sw $t1, 12($t0) # self.b = internal_1
		end_set_attribute_8794484682045:
		
		# Allocating Razz
		li $v0, 9
		lw $a0, type_Razz
		syscall
		la $t0, type_Razz # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 4($sp) # internal_2 = address of allocated object Razz
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function___init___at_Razz
		jal function___init___at_Razz
		lw $ra, 4($sp)
		sw $v1, 12($sp) # internal_2 = result of function___init___at_Razz
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute c of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_2
		beq $t1, $zero, object_set_attribute_8794484682527
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484682527
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484682527
		j object_set_attribute_8794484682527
		int_set_attribute_8794484682527:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.c = internal_2
		j end_set_attribute_8794484682527
		bool_set_attribute_8794484682527:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.c = internal_2
		j end_set_attribute_8794484682527
		object_set_attribute_8794484682527:
		sw $t1, 16($t0) # self.c = internal_2
		end_set_attribute_8794484682527:
		
		# Allocating Bar
		li $v0, 9
		lw $a0, type_Bar
		syscall
		la $t0, type_Bar # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 0($sp) # internal_3 = address of allocated object Bar
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 8($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function___init___at_Bar
		jal function___init___at_Bar
		lw $ra, 4($sp)
		sw $v1, 8($sp) # internal_3 = result of function___init___at_Bar
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute d of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_3
		beq $t1, $zero, object_set_attribute_8794484682557
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8794484682557
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8794484682557
		j object_set_attribute_8794484682557
		int_set_attribute_8794484682557:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.d = internal_3
		j end_set_attribute_8794484682557
		bool_set_attribute_8794484682557:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.d = internal_3
		j end_set_attribute_8794484682557
		object_set_attribute_8794484682557:
		sw $t1, 20($t0) # self.d = internal_3
		end_set_attribute_8794484682557:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_main_at_Main:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 19 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 19
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 100
		sb $t0, 8($v0) # internal_0[0] = 'd'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_0[1] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_0[2] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 11($v0) # internal_0[3] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 12($v0) # internal_0[4] = 'o'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_0[5] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 14($v0) # internal_0[6] = 'h'
		
		addi $t0, $zero, 105
		sb $t0, 15($v0) # internal_0[7] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 16($v0) # internal_0[8] = 'n'
		
		addi $t0, $zero, 103
		sb $t0, 17($v0) # internal_0[9] = 'g'
		
		sb $zero, 18($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_0 = "do nothing"
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	main:
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_0 = address of allocated object Main
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_0 = result of function___init___at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Get method main of Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Exit program
		li $v0, 10
		syscall
		
		