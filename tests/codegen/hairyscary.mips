.data
div_zero: .asciiz "Runtime Error: Division by zero"
dispatch_void: .asciiz "Runtime Error: A dispatch with void"
case_void: .asciiz "Runtime Error: A case with void"
case_no_match: .asciiz "Runtime Error: Execution of a case statement without a matching branch"
heap: .asciiz "Runtime Error: Heap overflow"
substr: .asciiz "Runtime Error: Index for substring out of range"
input_str: .space 2048
void: .word 0
Object_name: .asciiz "Object"
Object_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
Int_name: .asciiz "Int"
Int_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
String_name: .asciiz "String"
String_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word String.length
.word String.concat
.word String.substr
Bool_name: .asciiz "Bool"
Bool_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
Foo_name: .asciiz "Foo"
Foo_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Bazz.printh
.word Foo.doh
Bar_name: .asciiz "Bar"
Bar_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Bazz.printh
.word Foo.doh
Razz_name: .asciiz "Razz"
Razz_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Bazz.printh
.word Foo.doh
Bazz_name: .asciiz "Bazz"
Bazz_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Bazz.printh
.word Bazz.doh
Main_name: .asciiz "Main"
Main_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word Main.main
msg_0: .asciiz "Abort called from class "
msg_1: .asciiz "
"
empty_str: .asciiz ""
msg_3: .asciiz "do nothing"
.text
div_zero_error:
la $a0, div_zero
li $v0, 4
syscall
li $v0, 10
syscall
dispatch_void_error:
la $a0, dispatch_void
li $v0, 4
syscall
li $v0, 10
syscall
case_void_error:
la $a0, case_void
li $v0, 4
syscall
li $v0, 10
syscall
case_no_match_error:
la $a0, case_no_match
li $v0, 4
syscall
li $v0, 10
syscall
heap_error:
la $a0, heap
li $v0, 4
syscall
li $v0, 10
syscall
substr_error:
la $a0, substr
li $v0, 4
syscall
li $v0, 10
syscall
main:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 5:tag Main:Class_name 8:Class_size
li $a0, 32
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Main_name
sw $t1, 4($t0)
li $t1, 8
sw $t1, 8($t0)
la $t1, Main_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Main_init
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main_init
sw $a1, 8($sp)
#CallNode Main.main
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main.main
sw $a1, 8($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Object_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Object.abort:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_0
la $t0, msg_0
sw $t0, 4($sp)
#PrintString msg_0
lw $a0, 4($sp)
li $v0, 4
syscall
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 8($sp)
#PrintString class_name_1
lw $a0, 8($sp)
li $v0, 4
syscall
#LoadStr msg_1
la $t0, msg_1
sw $t0, 12($sp)
#PrintString eol_2
lw $a0, 12($sp)
li $v0, 4
syscall
#Abort
li $v0, 10
syscall
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.type_name:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg class_name_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.copy:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#Copy self
lw $t0, 8($sp)
lw $a0, 8($t0)
mul $a0, $a0, 4
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t1, $v0
li $a0, 0
lw $t3, 8($t0)
copy_object:
lw $t2, 0($t0)
sw $t2, 0($t1)
addi $t0, $t0, 4
addi $t1, $t1, 4
addi $a0, $a0, 1
blt $a0, $t3, copy_object
sw $v0, 4($sp)
#Return object_copy_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
IO_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
IO.out_string:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = String.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintString v_0
lw $a0, 4($sp)
li $v0, 4
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.out_int:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = Int.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintInteger v_0
li $v0, 1
lw $a0, 4($sp)
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.in_string:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadString read_string_0
la $a0, input_str
li $a1, 2048
li $v0, 8
syscall
move $t0, $a0
read_char:
li $t1, 0
lb $t1, 0($t0)
beqz $t1, remove_characters_str_end
addi $t0, $t0, 1
j read_char
remove_characters_str_end:
addi $t0, $t0, -1
li $t1, 0
lb $t1, 0($t0)
bne $t1, 10, rcs_end
sb $0, 0($t0)
addi $t0, $t0, -1
lb $t1, 0($t0)
bne $t1, 13, rcs_end
sb $0, 0($t0)
j remove_characters_str_end
rcs_end:
sw $a0, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg read_string_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
IO.in_int:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadInteger read_int_0
li $v0, 5
syscall
sw $v0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg read_int_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Int_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Intvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Stringvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String.length:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Length of self
lw $t0, 16($sp)
lw $t0, 16($t0)
li $a0, 0
count:
lb $t1, 0($t0)
beqz $t1, end
addi $t0, $t0, 1
addi $a0, $a0, 1
j count
end:
sw $a0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg length_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
String.concat:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#CallNode String.length
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 8($sp)
#GetAttr str2_2 = String.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#CallNode String.length
move $t0, $sp
# Arg s
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 16($sp)
#GetAttr len1_value_4 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr len2_value_5 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#Concat str1_0 str2_2
lw $a0, 20($sp)
lw $t0, 24($sp)
add $a0, $a0, $t0
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t3, $v0
lw $t0, 4($sp)
lw $t1, 12($sp)
copy_str:
lb $t2, 0($t0)
sb $t2, 0($v0)
beqz $t2, concat_str
addi $t0, $t0, 1
addi $v0, $v0, 1
j copy_str
concat_str:
lb $t2, 0($t1)
sb $t2, 0($v0)
beqz $t2, end_concat_str
addi $t1, $t1, 1
addi $v0, $v0, 1
j concat_str
end_concat_str:
sb $0, ($v0)
sw $t3, 28($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg result_string_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#Return instance_7
lw $a1, 32($sp)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
String.substr:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr i_value_0 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr l_value_1 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Substr self:string i_value_0:index l_value_1:length
lw $a0, 8($sp)
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
lw $t0, 4($sp)
lw $t1, 8($sp)
lw $t4, 24($sp)
lw $t2, 16($t4)
bltz $t0, substr_error
li $a0, 0
skip_char:
beq $a0, $t0, end_skip
addi $a0, $a0, 1
addi $t2, $t2, 1
beq $t2, $zero, substr_error
j skip_char
end_skip:
li $a0, 0
move $t3, $v0
substr_copy:
beq $a0, $t1, end_substr_copy
li $t0, 0
lb $t0, 0($t2)
sb $t0, 0($v0)
addi $t2, $t2, 1
beq $t2, $zero, substr_error
addi $v0, $v0, 1
addi $a0, $a0, 1
j substr_copy
end_substr_copy:
sb $0, ($v0)
sw $t3, 12($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode String_init
move $t0, $sp
# Arg substr_result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 20($sp)
#Return instance_3
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Bool_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Boolvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_equals:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr str2_1 = String.value
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#StringEquals str1_0 = str2_1
lw $t1, 4($sp)
lw $t2, 8($sp)
compare_str:
li $t3, 0
lb $t3, 0($t1)
li $t4, 0
lb $t4, 0($t2)
seq $a0, $t3, $t4
beqz $a0, end_compare_str
beqz $t3, end_compare_str
beqz $t4, end_compare_str
addi $t1, $t1, 1
addi $t2, $t2, 1
j compare_str
end_compare_str:
sw $a0, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Foo_init:
addi $sp, $sp, -120
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Bazz_init
move $t0, $sp
# Arg self
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bazz_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Case self
lw $t0, 124($sp)
lw $t1, 0($t0)
la $a0, void
bne $t1, $a0, label_1
b case_void_error
#LabelNode label_1
label_1:
#Action
blt $t1, 5, label_3
bgt $t1, 5, label_3
#AssignNode n_2 = self
lw $t1, 124($sp)
sw $t1, 12($sp)
#AssignNode result_1 = n_2
lw $t1, 12($sp)
sw $t1, 8($sp)
#Goto label_2
b label_2
#LabelNode label_3
label_3:
#Action
blt $t1, 4, label_4
bgt $t1, 5, label_4
#AssignNode n_3 = self
lw $t1, 124($sp)
sw $t1, 16($sp)
#Allocate 5:tag Bar:Class_name 13:Class_size
li $a0, 52
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Bar_name
sw $t1, 4($t0)
li $t1, 13
sw $t1, 8($t0)
la $t1, Bar_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#CallNode Bar_init
move $t0, $sp
# Arg result_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bar_init
sw $a1, 24($sp)
#AssignNode result_1 = result_4
lw $t1, 20($sp)
sw $t1, 8($sp)
#Goto label_2
b label_2
#LabelNode label_4
label_4:
#Action
blt $t1, 3, label_5
bgt $t1, 5, label_5
#AssignNode n_6 = self
lw $t1, 124($sp)
sw $t1, 28($sp)
#Allocate 4:tag Razz:Class_name 11:Class_size
li $a0, 44
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Razz_name
sw $t1, 4($t0)
li $t1, 11
sw $t1, 8($t0)
la $t1, Razz_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode Razz_init
move $t0, $sp
# Arg result_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Razz_init
sw $a1, 36($sp)
#AssignNode result_1 = result_7
lw $t1, 32($sp)
sw $t1, 8($sp)
#Goto label_2
b label_2
#LabelNode label_5
label_5:
#Goto case_no_match_error
b case_no_match_error
#LabelNode label_2
label_2:
#SetAttr Fooa = result_1
lw $t0, 124($sp)
lw $t1, 8($sp)
sw $t1, 28($t0)
#GetAttr Foo.a = Foo.a
lw $t0, 124($sp)
lw $t1, 28($t0)
sw $t1, 92($sp)
#VCall doh
move $t0, $sp
# Arg Foo.a
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 92($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 88($sp)
#GetAttr Foo.g = Foo.g
lw $t0, 124($sp)
lw $t1, 20($t0)
sw $t1, 100($sp)
#VCall doh
move $t0, $sp
# Arg Foo.g
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 100($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 96($sp)
#GetAttr left_19 = Int.value
lw $t0, 88($sp)
lw $t1, 16($t0)
sw $t1, 80($sp)
#GetAttr right_20 = Int.value
lw $t0, 96($sp)
lw $t1, 16($t0)
sw $t1, 84($sp)
#BinaryOperator left_19 + right_20
lw $a0, 80($sp)
lw $t1, 84($sp)
add $a0, $a0, $t1
sw $a0, 76($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 72($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 104($sp)
#VCall doh
move $t0, $sp
# Arg self
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 124($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 108($sp)
#GetAttr left_15 = Int.value
lw $t0, 72($sp)
lw $t1, 16($t0)
sw $t1, 64($sp)
#GetAttr right_16 = Int.value
lw $t0, 108($sp)
lw $t1, 16($t0)
sw $t1, 68($sp)
#BinaryOperator left_15 + right_16
lw $a0, 64($sp)
lw $t1, 68($sp)
add $a0, $a0, $t1
sw $a0, 60($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 56($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 112($sp)
#VCall printh
move $t0, $sp
# Arg self
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 124($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 116($sp)
#GetAttr left_11 = Int.value
lw $t0, 56($sp)
lw $t1, 16($t0)
sw $t1, 48($sp)
#GetAttr right_12 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 52($sp)
#BinaryOperator left_11 + right_12
lw $a0, 48($sp)
lw $t1, 52($sp)
add $a0, $a0, $t1
sw $a0, 44($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 40($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 120($sp)
#SetAttr Foob = result_9
lw $t0, 124($sp)
lw $t1, 40($sp)
sw $t1, 32($t0)
lw $ra, 0($sp)
addi $sp, $sp, 128
jr $ra
Foo.doh:
addi $sp, $sp, -56
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Foo.h = Foo.h
lw $t0, 60($sp)
lw $t1, 16($t0)
sw $t1, 28($sp)
#AssignNode i_1 = Foo.h
lw $t1, 28($sp)
sw $t1, 8($sp)
#GetAttr Foo.h = Foo.h
lw $t0, 60($sp)
lw $t1, 16($t0)
sw $t1, 28($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#LoadInt 2
li $t0, 2
sw $t0, 36($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 40($sp)
#GetAttr left_4 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr right_5 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#BinaryOperator left_4 + right_5
lw $a0, 20($sp)
lw $t1, 24($sp)
add $a0, $a0, $t1
sw $a0, 16($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 12($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 44($sp)
#SetAttr Fooh = result_2
lw $t0, 60($sp)
lw $t1, 12($sp)
sw $t1, 16($t0)
#GetAttr Foo.i = Foo.i
lw $t0, 60($sp)
lw $t1, 24($t0)
sw $t1, 52($sp)
#AssignNode result_13 = Foo.i
lw $t1, 52($sp)
sw $t1, 56($sp)
#Return result_13
lw $a1, 56($sp)
lw $ra, 0($sp)
addi $sp, $sp, 64
jr $ra
Bar_init:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Razz_init
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Razz_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#VCall doh
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 8($sp)
#SetAttr Barc = result_1
lw $t0, 16($sp)
lw $t1, 8($sp)
sw $t1, 44($t0)
#VCall printh
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 12($sp)
#SetAttr Bard = result_2
lw $t0, 16($sp)
lw $t1, 12($sp)
sw $t1, 48($t0)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Razz_init:
addi $sp, $sp, -140
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Foo_init
move $t0, $sp
# Arg self
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Foo_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Case self
lw $t0, 144($sp)
lw $t1, 0($t0)
la $a0, void
bne $t1, $a0, label_6
b case_void_error
#LabelNode label_6
label_6:
#Action
blt $t1, 5, label_8
bgt $t1, 5, label_8
#AssignNode n_2 = self
lw $t1, 144($sp)
sw $t1, 12($sp)
#AssignNode result_1 = n_2
lw $t1, 12($sp)
sw $t1, 8($sp)
#Goto label_7
b label_7
#LabelNode label_8
label_8:
#Action
blt $t1, 4, label_9
bgt $t1, 5, label_9
#AssignNode n_3 = self
lw $t1, 144($sp)
sw $t1, 16($sp)
#Allocate 5:tag Bar:Class_name 13:Class_size
li $a0, 52
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Bar_name
sw $t1, 4($t0)
li $t1, 13
sw $t1, 8($t0)
la $t1, Bar_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#CallNode Bar_init
move $t0, $sp
# Arg result_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bar_init
sw $a1, 24($sp)
#AssignNode result_1 = result_4
lw $t1, 20($sp)
sw $t1, 8($sp)
#Goto label_7
b label_7
#LabelNode label_9
label_9:
#Goto case_no_match_error
b case_no_match_error
#LabelNode label_7
label_7:
#SetAttr Razze = result_1
lw $t0, 144($sp)
lw $t1, 8($sp)
sw $t1, 36($t0)
#GetAttr Razz.a = Razz.a
lw $t0, 144($sp)
lw $t1, 28($t0)
sw $t1, 96($sp)
#Allocate 2:tag Bazz:Class_name 7:Class_size
li $a0, 28
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, Bazz_name
sw $t1, 4($t0)
li $t1, 7
sw $t1, 8($t0)
la $t1, Bazz_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#VCall doh
move $t0, $sp
# Arg Razz.a
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 100($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 92($sp)
#GetAttr Razz.g = Razz.g
lw $t0, 144($sp)
lw $t1, 20($t0)
sw $t1, 108($sp)
#VCall doh
move $t0, $sp
# Arg Razz.g
lw $t1, 108($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 108($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 104($sp)
#GetAttr left_20 = Int.value
lw $t0, 92($sp)
lw $t1, 16($t0)
sw $t1, 84($sp)
#GetAttr right_21 = Int.value
lw $t0, 104($sp)
lw $t1, 16($t0)
sw $t1, 88($sp)
#BinaryOperator left_20 + right_21
lw $a0, 84($sp)
lw $t1, 88($sp)
add $a0, $a0, $t1
sw $a0, 80($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 112($sp)
#GetAttr Razz.e = Razz.e
lw $t0, 144($sp)
lw $t1, 36($t0)
sw $t1, 120($sp)
#VCall doh
move $t0, $sp
# Arg Razz.e
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 120($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 116($sp)
#GetAttr left_16 = Int.value
lw $t0, 76($sp)
lw $t1, 16($t0)
sw $t1, 68($sp)
#GetAttr right_17 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 72($sp)
#BinaryOperator left_16 + right_17
lw $a0, 68($sp)
lw $t1, 72($sp)
add $a0, $a0, $t1
sw $a0, 64($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 124($sp)
#VCall doh
move $t0, $sp
# Arg self
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 144($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 128($sp)
#GetAttr left_12 = Int.value
lw $t0, 60($sp)
lw $t1, 16($t0)
sw $t1, 52($sp)
#GetAttr right_13 = Int.value
lw $t0, 128($sp)
lw $t1, 16($t0)
sw $t1, 56($sp)
#BinaryOperator left_12 + right_13
lw $a0, 52($sp)
lw $t1, 56($sp)
add $a0, $a0, $t1
sw $a0, 48($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 132($sp)
#VCall printh
move $t0, $sp
# Arg self
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 144($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 136($sp)
#GetAttr left_8 = Int.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#GetAttr right_9 = Int.value
lw $t0, 136($sp)
lw $t1, 16($t0)
sw $t1, 40($sp)
#BinaryOperator left_8 + right_9
lw $a0, 36($sp)
lw $t1, 40($sp)
add $a0, $a0, $t1
sw $a0, 32($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 140($sp)
#SetAttr Razzf = result_6
lw $t0, 144($sp)
lw $t1, 28($sp)
sw $t1, 40($t0)
lw $ra, 0($sp)
addi $sp, $sp, 148
jr $ra
Bazz_init:
addi $sp, $sp, -64
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 1
li $t0, 1
sw $t0, 12($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 16($sp)
#SetAttr Bazzh = instance_1
lw $t0, 68($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Case self
lw $t0, 68($sp)
lw $t1, 0($t0)
la $a0, void
bne $t1, $a0, label_10
b case_void_error
#LabelNode label_10
label_10:
#Action
blt $t1, 5, label_12
bgt $t1, 5, label_12
#AssignNode n_5 = self
lw $t1, 68($sp)
sw $t1, 24($sp)
#AssignNode result_4 = n_5
lw $t1, 24($sp)
sw $t1, 20($sp)
#Goto label_11
b label_11
#LabelNode label_12
label_12:
#Action
blt $t1, 4, label_13
bgt $t1, 5, label_13
#AssignNode n_6 = self
lw $t1, 68($sp)
sw $t1, 28($sp)
#Allocate 5:tag Bar:Class_name 13:Class_size
li $a0, 52
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Bar_name
sw $t1, 4($t0)
li $t1, 13
sw $t1, 8($t0)
la $t1, Bar_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode Bar_init
move $t0, $sp
# Arg result_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bar_init
sw $a1, 36($sp)
#AssignNode result_4 = result_7
lw $t1, 32($sp)
sw $t1, 20($sp)
#Goto label_11
b label_11
#LabelNode label_13
label_13:
#Action
blt $t1, 3, label_14
bgt $t1, 5, label_14
#AssignNode n_9 = self
lw $t1, 68($sp)
sw $t1, 40($sp)
#Allocate 4:tag Razz:Class_name 11:Class_size
li $a0, 44
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Razz_name
sw $t1, 4($t0)
li $t1, 11
sw $t1, 8($t0)
la $t1, Razz_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode Razz_init
move $t0, $sp
# Arg result_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Razz_init
sw $a1, 48($sp)
#AssignNode result_4 = result_10
lw $t1, 44($sp)
sw $t1, 20($sp)
#Goto label_11
b label_11
#LabelNode label_14
label_14:
#Action
blt $t1, 2, label_15
bgt $t1, 5, label_15
#AssignNode n_12 = self
lw $t1, 68($sp)
sw $t1, 52($sp)
#Allocate 3:tag Foo:Class_name 9:Class_size
li $a0, 36
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Foo_name
sw $t1, 4($t0)
li $t1, 9
sw $t1, 8($t0)
la $t1, Foo_methods
sw $t1, 12($t0)
sw $t0, 56($sp)
#CallNode Foo_init
move $t0, $sp
# Arg result_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Foo_init
sw $a1, 60($sp)
#AssignNode result_4 = result_13
lw $t1, 56($sp)
sw $t1, 20($sp)
#Goto label_11
b label_11
#LabelNode label_15
label_15:
#Goto case_no_match_error
b case_no_match_error
#LabelNode label_11
label_11:
#SetAttr Bazzg = result_4
lw $t0, 68($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#VCall printh
move $t0, $sp
# Arg self
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 68($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 64($sp)
#SetAttr Bazzi = result_15
lw $t0, 68($sp)
lw $t1, 64($sp)
sw $t1, 24($t0)
lw $ra, 0($sp)
addi $sp, $sp, 72
jr $ra
Bazz.printh:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Bazz.h = Bazz.h
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#VCall out_int
move $t0, $sp
# Arg Bazz.h
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 24($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 12($sp)
#LoadInt 0
li $t0, 0
sw $t0, 16($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 20($sp)
#Return instance_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 28
jr $ra
Bazz.doh:
addi $sp, $sp, -56
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Bazz.h = Bazz.h
lw $t0, 60($sp)
lw $t1, 16($t0)
sw $t1, 28($sp)
#AssignNode i_1 = Bazz.h
lw $t1, 28($sp)
sw $t1, 8($sp)
#GetAttr Bazz.h = Bazz.h
lw $t0, 60($sp)
lw $t1, 16($t0)
sw $t1, 28($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#LoadInt 1
li $t0, 1
sw $t0, 36($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 40($sp)
#GetAttr left_4 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr right_5 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#BinaryOperator left_4 + right_5
lw $a0, 20($sp)
lw $t1, 24($sp)
add $a0, $a0, $t1
sw $a0, 16($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 12($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 44($sp)
#SetAttr Bazzh = result_2
lw $t0, 60($sp)
lw $t1, 12($sp)
sw $t1, 16($t0)
#GetAttr Bazz.i = Bazz.i
lw $t0, 60($sp)
lw $t1, 24($t0)
sw $t1, 52($sp)
#AssignNode result_13 = Bazz.i
lw $t1, 52($sp)
sw $t1, 56($sp)
#Return result_13
lw $a1, 56($sp)
lw $ra, 0($sp)
addi $sp, $sp, 64
jr $ra
Main_init:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Object_init
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Object_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 2:tag Bazz:Class_name 7:Class_size
li $a0, 28
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, Bazz_name
sw $t1, 4($t0)
li $t1, 7
sw $t1, 8($t0)
la $t1, Bazz_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bazz_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bazz_init
sw $a1, 12($sp)
#SetAttr Maina = result_1
lw $t0, 40($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Allocate 3:tag Foo:Class_name 9:Class_size
li $a0, 36
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Foo_name
sw $t1, 4($t0)
li $t1, 9
sw $t1, 8($t0)
la $t1, Foo_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode Foo_init
move $t0, $sp
# Arg result_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Foo_init
sw $a1, 20($sp)
#SetAttr Mainb = result_3
lw $t0, 40($sp)
lw $t1, 16($sp)
sw $t1, 20($t0)
#Allocate 4:tag Razz:Class_name 11:Class_size
li $a0, 44
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Razz_name
sw $t1, 4($t0)
li $t1, 11
sw $t1, 8($t0)
la $t1, Razz_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#CallNode Razz_init
move $t0, $sp
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Razz_init
sw $a1, 28($sp)
#SetAttr Mainc = result_5
lw $t0, 40($sp)
lw $t1, 24($sp)
sw $t1, 24($t0)
#Allocate 5:tag Bar:Class_name 13:Class_size
li $a0, 52
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Bar_name
sw $t1, 4($t0)
li $t1, 13
sw $t1, 8($t0)
la $t1, Bar_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode Bar_init
move $t0, $sp
# Arg result_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bar_init
sw $a1, 36($sp)
#SetAttr Maind = result_7
lw $t0, 40($sp)
lw $t1, 32($sp)
sw $t1, 28($t0)
lw $ra, 0($sp)
addi $sp, $sp, 44
jr $ra
Main.main:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_3
la $t0, msg_3
sw $t0, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg l_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra