.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Foo {
    attribute h;
    attribute g;
    attribute i;
    attribute a;
    attribute b;
    method Object_abort;
    method Foo_type_name;
    method Foo_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Bazz_printh;
    method Foo_doh;
  }
  type Bar {
    attribute h;
    attribute g;
    attribute i;
    attribute a;
    attribute b;
    attribute e;
    attribute f;
    attribute c;
    attribute d;
    method Object_abort;
    method Bar_type_name;
    method Bar_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Bazz_printh;
    method Foo_doh;
  }
  type Razz {
    attribute h;
    attribute g;
    attribute i;
    attribute a;
    attribute b;
    attribute e;
    attribute f;
    method Object_abort;
    method Razz_type_name;
    method Razz_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Bazz_printh;
    method Foo_doh;
  }
  type Bazz {
    attribute h;
    attribute g;
    attribute i;
    method Object_abort;
    method Bazz_type_name;
    method Bazz_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Bazz_printh;
    method Bazz_doh;
  }
  type Main {
    attribute a;
    attribute b;
    attribute c;
    attribute d;
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_Foo = "Foo";
  data_7_type_name_Bar = "Bar";
  data_8_type_name_Razz = "Razz";
  data_9_type_name_Bazz = "Bazz";
  data_10_type_name_Main = "Main";
  data_11_sep_cat = " ++ ";
  data_12_case_err = "Case of did not match any branch!";
  data_13_eol = "\n";
  data_14_under = "_";
  data_15_meth = "doh";
  data_16_meth = "printh";
  data_17_meth = "out_int";
  data_18_string = "do nothing";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function Foo_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_Foo;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Foo_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Foo;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    local_attr_copy = GETATTR param_self 2;
    SETATTR local_copy 2 local_attr_copy;
    local_attr_copy = GETATTR param_self 3;
    SETATTR local_copy 3 local_attr_copy;
    local_attr_copy = GETATTR param_self 4;
    SETATTR local_copy 4 local_attr_copy;
    RETURN local_copy;
  }

  function Bar_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_Bar;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bar_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Bar;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    local_attr_copy = GETATTR param_self 2;
    SETATTR local_copy 2 local_attr_copy;
    local_attr_copy = GETATTR param_self 3;
    SETATTR local_copy 3 local_attr_copy;
    local_attr_copy = GETATTR param_self 4;
    SETATTR local_copy 4 local_attr_copy;
    local_attr_copy = GETATTR param_self 5;
    SETATTR local_copy 5 local_attr_copy;
    local_attr_copy = GETATTR param_self 6;
    SETATTR local_copy 6 local_attr_copy;
    local_attr_copy = GETATTR param_self 7;
    SETATTR local_copy 7 local_attr_copy;
    local_attr_copy = GETATTR param_self 8;
    SETATTR local_copy 8 local_attr_copy;
    RETURN local_copy;
  }

  function Razz_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_type_name_Razz;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Razz_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Razz;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    local_attr_copy = GETATTR param_self 2;
    SETATTR local_copy 2 local_attr_copy;
    local_attr_copy = GETATTR param_self 3;
    SETATTR local_copy 3 local_attr_copy;
    local_attr_copy = GETATTR param_self 4;
    SETATTR local_copy 4 local_attr_copy;
    local_attr_copy = GETATTR param_self 5;
    SETATTR local_copy 5 local_attr_copy;
    local_attr_copy = GETATTR param_self 6;
    SETATTR local_copy 6 local_attr_copy;
    RETURN local_copy;
  }

  function Bazz_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_9_type_name_Bazz;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bazz_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Bazz;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    local_attr_copy = GETATTR param_self 2;
    SETATTR local_copy 2 local_attr_copy;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_10_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Main;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    local_attr_copy = GETATTR param_self 2;
    SETATTR local_copy 2 local_attr_copy;
    local_attr_copy = GETATTR param_self 3;
    SETATTR local_copy 3 local_attr_copy;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_str_attr = length(local_length)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_self_str_attr;
    LOCAL local_self_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_8;

    local_0 = LOAD data_11_sep_cat;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, param_self)
    print(str, local_1)
    print(str, param_other)
    local_self_str_attr = GETATTR param_self 0;
    local_self_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_self_str_attr)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_8 = CALL String___init;
    RETURN local_8;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_substr;
    LOCAL local_2;

    local_self_str_local = GETATTR param_self 0;
    local_substr = substr(local_self_str_local, param_i, param_l)
    ARG local_substr;
    local_2 = CALL String___init;
    RETURN local_2;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Foo___init {

    LOCAL local_self;
    LOCAL local_h;
    LOCAL local_g;
    LOCAL local_i;
    LOCAL local_a;
    LOCAL local_b;

    local_self = ALLOCATE Foo;
    ARG local_self;
    local_h = CALL Bazz_h___init;
    SETATTR local_self 0 local_h;
    ARG local_self;
    local_g = CALL Bazz_g___init;
    SETATTR local_self 1 local_g;
    ARG local_self;
    local_i = CALL Bazz_i___init;
    SETATTR local_self 2 local_i;
    ARG local_self;
    local_a = CALL Foo_a___init;
    SETATTR local_self 3 local_a;
    ARG local_self;
    local_b = CALL Foo_b___init;
    SETATTR local_self 4 local_b;
    RETURN local_self;
  }

  function Foo_a___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_n;
    LOCAL local_n;
    LOCAL local_14;
    LOCAL local_n;
    LOCAL local_16;

    local_0 = TYPEOF param_self;
    local_1 = LOAD Bar;
    local_2 = local_0 - local_1
    IF local_2 GOTO label_case_branch_0;
    local_3 = TYPEOF param_self;
    local_4 = LOAD Razz;
    local_5 = local_3 - local_4
    IF local_5 GOTO label_case_branch_1;
    local_6 = TYPEOF param_self;
    local_7 = LOAD Foo;
    local_8 = local_6 - local_7
    IF local_8 GOTO label_case_branch_2;
    local_9 = LOAD data_12_case_err;
    ARG local_9;
    local_10 = CALL String___init;
    print(str, local_10)
    LABEL label_case_branch_0;
    GOTO label_end_case_0;
    LABEL label_case_branch_1;
    local_14 = CALL Bar___init;
    GOTO label_end_case_0;
    LABEL label_case_branch_2;
    local_16 = CALL Razz___init;
    GOTO label_end_case_0;
    LABEL label_end_case_0;
    RETURN local_11;
  }

  function Foo_b___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_a;
    LOCAL local_2;
    LOCAL local_tname_local;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_g;
    LOCAL local_13;
    LOCAL local_tname_local;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_tname_local;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_tname_local;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;

    local_a = GETATTR param_self 3;
    local_2 = TYPEOF local_a;
    local_4 = LOAD data_13_eol;
    ARG local_4;
    local_5 = CALL String___init;
    local_6 = LOAD data_14_under;
    ARG local_6;
    local_7 = CALL String___init;
    local_8 = LOAD data_15_meth;
    ARG local_8;
    local_9 = CALL String___init;
    local_tname_local = VCALL local_2 1;
    print(str, local_tname_local)
    print(str, local_7)
    print(str, local_9)
    print(str, local_5)
    ARG local_a;
    local_0 = VCALL local_2 8;
    local_10 = GETATTR local_0 0;
    local_g = GETATTR param_self 1;
    local_13 = TYPEOF local_g;
    local_15 = LOAD data_13_eol;
    ARG local_15;
    local_16 = CALL String___init;
    local_17 = LOAD data_14_under;
    ARG local_17;
    local_18 = CALL String___init;
    local_19 = LOAD data_15_meth;
    ARG local_19;
    local_20 = CALL String___init;
    local_tname_local = VCALL local_13 1;
    print(str, local_tname_local)
    print(str, local_18)
    print(str, local_20)
    print(str, local_16)
    ARG local_g;
    local_11 = VCALL local_13 8;
    local_21 = GETATTR local_11 0;
    local_22 = local_10 + local_21
    local_23 = GETATTR local_22 0;
    local_25 = TYPEOF param_self;
    local_27 = LOAD data_13_eol;
    ARG local_27;
    local_28 = CALL String___init;
    local_29 = LOAD data_14_under;
    ARG local_29;
    local_30 = CALL String___init;
    local_31 = LOAD data_15_meth;
    ARG local_31;
    local_32 = CALL String___init;
    local_tname_local = VCALL local_25 1;
    print(str, local_tname_local)
    print(str, local_30)
    print(str, local_32)
    print(str, local_28)
    ARG param_self;
    local_24 = VCALL local_25 8;
    local_33 = GETATTR local_24 0;
    local_34 = local_23 + local_33
    local_35 = GETATTR local_34 0;
    local_37 = TYPEOF param_self;
    local_39 = LOAD data_13_eol;
    ARG local_39;
    local_40 = CALL String___init;
    local_41 = LOAD data_14_under;
    ARG local_41;
    local_42 = CALL String___init;
    local_43 = LOAD data_16_meth;
    ARG local_43;
    local_44 = CALL String___init;
    local_tname_local = VCALL local_37 1;
    print(str, local_tname_local)
    print(str, local_42)
    print(str, local_44)
    print(str, local_40)
    ARG param_self;
    local_36 = VCALL local_37 7;
    local_45 = GETATTR local_36 0;
    local_46 = local_35 + local_45
    RETURN local_46;
  }

  function Foo_doh {
    PARAM param_self;

    LOCAL local_i;
    LOCAL local_h;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;

    local_h = GETATTR param_self 0;
    local_2 = GETATTR local_h 0;
    local_3 = LOAD 2;
    ARG local_3;
    local_4 = CALL Int___init;
    local_5 = GETATTR local_4 0;
    local_6 = local_2 + local_5
    RETURN local_i;
  }

  function Bar___init {

    LOCAL local_self;
    LOCAL local_h;
    LOCAL local_g;
    LOCAL local_i;
    LOCAL local_a;
    LOCAL local_b;
    LOCAL local_e;
    LOCAL local_f;
    LOCAL local_c;
    LOCAL local_d;

    local_self = ALLOCATE Bar;
    ARG local_self;
    local_h = CALL Bazz_h___init;
    SETATTR local_self 0 local_h;
    ARG local_self;
    local_g = CALL Bazz_g___init;
    SETATTR local_self 1 local_g;
    ARG local_self;
    local_i = CALL Bazz_i___init;
    SETATTR local_self 2 local_i;
    ARG local_self;
    local_a = CALL Foo_a___init;
    SETATTR local_self 3 local_a;
    ARG local_self;
    local_b = CALL Foo_b___init;
    SETATTR local_self 4 local_b;
    ARG local_self;
    local_e = CALL Razz_e___init;
    SETATTR local_self 5 local_e;
    ARG local_self;
    local_f = CALL Razz_f___init;
    SETATTR local_self 6 local_f;
    ARG local_self;
    local_c = CALL Bar_c___init;
    SETATTR local_self 7 local_c;
    ARG local_self;
    local_d = CALL Bar_d___init;
    SETATTR local_self 8 local_d;
    RETURN local_self;
  }

  function Bar_c___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_tname_local;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;

    local_1 = TYPEOF param_self;
    local_3 = LOAD data_13_eol;
    ARG local_3;
    local_4 = CALL String___init;
    local_5 = LOAD data_14_under;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = LOAD data_15_meth;
    ARG local_7;
    local_8 = CALL String___init;
    local_tname_local = VCALL local_1 1;
    print(str, local_tname_local)
    print(str, local_6)
    print(str, local_8)
    print(str, local_4)
    ARG param_self;
    local_0 = VCALL local_1 8;
    RETURN local_0;
  }

  function Bar_d___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_tname_local;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;

    local_1 = TYPEOF param_self;
    local_3 = LOAD data_13_eol;
    ARG local_3;
    local_4 = CALL String___init;
    local_5 = LOAD data_14_under;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = LOAD data_16_meth;
    ARG local_7;
    local_8 = CALL String___init;
    local_tname_local = VCALL local_1 1;
    print(str, local_tname_local)
    print(str, local_6)
    print(str, local_8)
    print(str, local_4)
    ARG param_self;
    local_0 = VCALL local_1 7;
    RETURN local_0;
  }

  function Razz___init {

    LOCAL local_self;
    LOCAL local_h;
    LOCAL local_g;
    LOCAL local_i;
    LOCAL local_a;
    LOCAL local_b;
    LOCAL local_e;
    LOCAL local_f;

    local_self = ALLOCATE Razz;
    ARG local_self;
    local_h = CALL Bazz_h___init;
    SETATTR local_self 0 local_h;
    ARG local_self;
    local_g = CALL Bazz_g___init;
    SETATTR local_self 1 local_g;
    ARG local_self;
    local_i = CALL Bazz_i___init;
    SETATTR local_self 2 local_i;
    ARG local_self;
    local_a = CALL Foo_a___init;
    SETATTR local_self 3 local_a;
    ARG local_self;
    local_b = CALL Foo_b___init;
    SETATTR local_self 4 local_b;
    ARG local_self;
    local_e = CALL Razz_e___init;
    SETATTR local_self 5 local_e;
    ARG local_self;
    local_f = CALL Razz_f___init;
    SETATTR local_self 6 local_f;
    RETURN local_self;
  }

  function Razz_e___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_n;
    LOCAL local_n;
    LOCAL local_11;

    local_0 = TYPEOF param_self;
    local_1 = LOAD Bar;
    local_2 = local_0 - local_1
    IF local_2 GOTO label_case_branch_3;
    local_3 = TYPEOF param_self;
    local_4 = LOAD Razz;
    local_5 = local_3 - local_4
    IF local_5 GOTO label_case_branch_4;
    local_6 = LOAD data_12_case_err;
    ARG local_6;
    local_7 = CALL String___init;
    print(str, local_7)
    LABEL label_case_branch_3;
    GOTO label_end_case_1;
    LABEL label_case_branch_4;
    local_11 = CALL Bar___init;
    GOTO label_end_case_1;
    LABEL label_end_case_1;
    RETURN local_8;
  }

  function Razz_f___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_a;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_g;
    LOCAL local_5;
    LOCAL local_tname_local;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_e;
    LOCAL local_18;
    LOCAL local_tname_local;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_tname_local;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_tname_local;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;
    LOCAL local_51;

    local_a = GETATTR param_self 3;
    ARG local_a;
    local_0 = CALL type Bazz : IO {
	[attrib] h : Int;
	[attrib] g : Foo;
	[attrib] i : Object;
	[method] printh(): Int;
	[method] doh(): Int;
}
_doh;
    local_2 = GETATTR local_0 0;
    local_g = GETATTR param_self 1;
    local_5 = TYPEOF local_g;
    local_7 = LOAD data_13_eol;
    ARG local_7;
    local_8 = CALL String___init;
    local_9 = LOAD data_14_under;
    ARG local_9;
    local_10 = CALL String___init;
    local_11 = LOAD data_15_meth;
    ARG local_11;
    local_12 = CALL String___init;
    local_tname_local = VCALL local_5 1;
    print(str, local_tname_local)
    print(str, local_10)
    print(str, local_12)
    print(str, local_8)
    ARG local_g;
    local_3 = VCALL local_5 8;
    local_13 = GETATTR local_3 0;
    local_14 = local_2 + local_13
    local_15 = GETATTR local_14 0;
    local_e = GETATTR param_self 5;
    local_18 = TYPEOF local_e;
    local_20 = LOAD data_13_eol;
    ARG local_20;
    local_21 = CALL String___init;
    local_22 = LOAD data_14_under;
    ARG local_22;
    local_23 = CALL String___init;
    local_24 = LOAD data_15_meth;
    ARG local_24;
    local_25 = CALL String___init;
    local_tname_local = VCALL local_18 1;
    print(str, local_tname_local)
    print(str, local_23)
    print(str, local_25)
    print(str, local_21)
    ARG local_e;
    local_16 = VCALL local_18 8;
    local_26 = GETATTR local_16 0;
    local_27 = local_15 + local_26
    local_28 = GETATTR local_27 0;
    local_30 = TYPEOF param_self;
    local_32 = LOAD data_13_eol;
    ARG local_32;
    local_33 = CALL String___init;
    local_34 = LOAD data_14_under;
    ARG local_34;
    local_35 = CALL String___init;
    local_36 = LOAD data_15_meth;
    ARG local_36;
    local_37 = CALL String___init;
    local_tname_local = VCALL local_30 1;
    print(str, local_tname_local)
    print(str, local_35)
    print(str, local_37)
    print(str, local_33)
    ARG param_self;
    local_29 = VCALL local_30 8;
    local_38 = GETATTR local_29 0;
    local_39 = local_28 + local_38
    local_40 = GETATTR local_39 0;
    local_42 = TYPEOF param_self;
    local_44 = LOAD data_13_eol;
    ARG local_44;
    local_45 = CALL String___init;
    local_46 = LOAD data_14_under;
    ARG local_46;
    local_47 = CALL String___init;
    local_48 = LOAD data_16_meth;
    ARG local_48;
    local_49 = CALL String___init;
    local_tname_local = VCALL local_42 1;
    print(str, local_tname_local)
    print(str, local_47)
    print(str, local_49)
    print(str, local_45)
    ARG param_self;
    local_41 = VCALL local_42 7;
    local_50 = GETATTR local_41 0;
    local_51 = local_40 + local_50
    RETURN local_51;
  }

  function Bazz___init {

    LOCAL local_self;
    LOCAL local_h;
    LOCAL local_g;
    LOCAL local_i;

    local_self = ALLOCATE Bazz;
    ARG local_self;
    local_h = CALL Bazz_h___init;
    SETATTR local_self 0 local_h;
    ARG local_self;
    local_g = CALL Bazz_g___init;
    SETATTR local_self 1 local_g;
    ARG local_self;
    local_i = CALL Bazz_i___init;
    SETATTR local_self 2 local_i;
    RETURN local_self;
  }

  function Bazz_h___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 1;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Bazz_g___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_n;
    LOCAL local_n;
    LOCAL local_11;

    local_0 = TYPEOF param_self;
    local_1 = LOAD Foo;
    local_2 = local_0 - local_1
    IF local_2 GOTO label_case_branch_5;
    local_3 = TYPEOF param_self;
    local_4 = LOAD Bazz;
    local_5 = local_3 - local_4
    IF local_5 GOTO label_case_branch_6;
    local_6 = LOAD data_12_case_err;
    ARG local_6;
    local_7 = CALL String___init;
    print(str, local_7)
    LABEL label_case_branch_5;
    GOTO label_end_case_2;
    LABEL label_case_branch_6;
    local_11 = CALL Bar___init;
    GOTO label_end_case_2;
    LABEL label_end_case_2;
    RETURN local_8;
  }

  function Bazz_i___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_tname_local;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;

    local_1 = TYPEOF param_self;
    local_3 = LOAD data_13_eol;
    ARG local_3;
    local_4 = CALL String___init;
    local_5 = LOAD data_14_under;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = LOAD data_16_meth;
    ARG local_7;
    local_8 = CALL String___init;
    local_tname_local = VCALL local_1 1;
    print(str, local_tname_local)
    print(str, local_6)
    print(str, local_8)
    print(str, local_4)
    ARG param_self;
    local_0 = VCALL local_1 7;
    RETURN local_0;
  }

  function Bazz_printh {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_h;
    LOCAL local_2;
    LOCAL local_tname_local;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;

    local_h = GETATTR param_self 0;
    local_2 = TYPEOF param_self;
    local_4 = LOAD data_13_eol;
    ARG local_4;
    local_5 = CALL String___init;
    local_6 = LOAD data_14_under;
    ARG local_6;
    local_7 = CALL String___init;
    local_8 = LOAD data_17_meth;
    ARG local_8;
    local_9 = CALL String___init;
    local_tname_local = VCALL local_2 1;
    print(str, local_tname_local)
    print(str, local_7)
    print(str, local_9)
    print(str, local_5)
    ARG param_self;
    ARG local_h;
    local_0 = VCALL local_2 4;
    local_10 = LOAD 0;
    ARG local_10;
    local_11 = CALL Int___init;
    RETURN local_11;
  }

  function Bazz_doh {
    PARAM param_self;

    LOCAL local_i;
    LOCAL local_h;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;

    local_h = GETATTR param_self 0;
    local_2 = GETATTR local_h 0;
    local_3 = LOAD 1;
    ARG local_3;
    local_4 = CALL Int___init;
    local_5 = GETATTR local_4 0;
    local_6 = local_2 + local_5
    RETURN local_i;
  }

  function Main___init {

    LOCAL local_self;
    LOCAL local_a;
    LOCAL local_b;
    LOCAL local_c;
    LOCAL local_d;

    local_self = ALLOCATE Main;
    ARG local_self;
    local_a = CALL Main_a___init;
    SETATTR local_self 0 local_a;
    ARG local_self;
    local_b = CALL Main_b___init;
    SETATTR local_self 1 local_b;
    ARG local_self;
    local_c = CALL Main_c___init;
    SETATTR local_self 2 local_c;
    ARG local_self;
    local_d = CALL Main_d___init;
    SETATTR local_self 3 local_d;
    RETURN local_self;
  }

  function Main_a___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Bazz___init;
    RETURN local_0;
  }

  function Main_b___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Foo___init;
    RETURN local_0;
  }

  function Main_c___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Razz___init;
    RETURN local_0;
  }

  function Main_d___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Bar___init;
    RETURN local_0;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_18_string;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

