.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Main {
    attribute i;
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_pal;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_Main = "Main";
  data_7_string = "enter a string\n";
  data_8_string = "that was not a palindrome\n";
  data_9_string = "that was a palindrome\n";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Main;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_self;
    PARAM param_int;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_length = length(local_str_attr)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_self_str_attr;
    LOCAL local_other_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_6;

    local_self_str_attr = GETATTR param_self 0;
    local_other_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_other_str_attr)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(local_self_str_attr, local_other_str_attr, local_concat_len)
    ARG local_concat;
    local_6 = CALL String___init;
    RETURN local_6;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_i_local;
    LOCAL local_l_local;
    LOCAL local_substr;
    LOCAL local_4;

    local_self_str_local = GETATTR param_self 0;
    local_i_local = GETATTR param_i 0;
    local_l_local = GETATTR param_l 0;
    local_substr = substr(local_self_str_local, local_i_local, local_l_local)
    ARG local_substr;
    local_4 = CALL String___init;
    RETURN local_4;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function IO___init {

    LOCAL local_self;

    local_self = ALLOCATE IO;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Main___init {

    LOCAL local_self;
    LOCAL local_i;

    local_self = ALLOCATE Main;
    ARG local_self;
    local_i = CALL Main_i___init;
    SETATTR local_self 0 local_i;
    RETURN local_self;
  }

  function Main_pal {
    PARAM param_self;
    PARAM param_s;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;
    LOCAL local_51;
    LOCAL local_52;
    LOCAL local_53;
    LOCAL local_54;
    LOCAL local_55;
    LOCAL local_56;
    LOCAL local_57;
    LOCAL local_58;
    LOCAL local_59;
    LOCAL local_60;
    LOCAL local_61;
    LOCAL local_62;
    LOCAL local_63;
    LOCAL local_64;
    LOCAL local_65;
    LOCAL local_66;
    LOCAL local_67;
    LOCAL local_68;
    LOCAL local_69;
    LOCAL local_70;
    LOCAL local_71;

    local_2 = TYPEOF param_s;
    ARG param_s;
    local_1 = VCALL local_2 3;
    local_3 = GETATTR local_1 0;
    local_4 = LOAD 0;
    ARG local_4;
    local_5 = CALL Int___init;
    local_6 = GETATTR local_5 0;
    local_7 = local_3 - local_6
    IF local_7 = 0 GOTO label_then_1;
    LABEL label_else_1;
    local_9 = LOAD 0;
    ARG local_9;
    local_10 = CALL Bool___init;
    local_8 = local_10;
    GOTO label_continue_1;
    LABEL label_then_1;
    local_11 = LOAD 1;
    ARG local_11;
    local_12 = CALL Bool___init;
    local_8 = local_12;
    LABEL label_continue_1;
    local_13 = GETATTR local_8 0;
    IF local_13 > 0 GOTO label_then_0;
    LABEL label_else_0;
    local_16 = TYPEOF param_s;
    ARG param_s;
    local_15 = VCALL local_16 3;
    local_17 = GETATTR local_15 0;
    local_18 = LOAD 1;
    ARG local_18;
    local_19 = CALL Int___init;
    local_20 = GETATTR local_19 0;
    local_21 = local_17 - local_20
    IF local_21 = 0 GOTO label_then_3;
    LABEL label_else_3;
    local_23 = LOAD 0;
    ARG local_23;
    local_24 = CALL Bool___init;
    local_22 = local_24;
    GOTO label_continue_3;
    LABEL label_then_3;
    local_25 = LOAD 1;
    ARG local_25;
    local_26 = CALL Bool___init;
    local_22 = local_26;
    LABEL label_continue_3;
    local_27 = GETATTR local_22 0;
    IF local_27 > 0 GOTO label_then_2;
    LABEL label_else_2;
    local_30 = LOAD 0;
    ARG local_30;
    local_31 = CALL Int___init;
    local_32 = LOAD 1;
    ARG local_32;
    local_33 = CALL Int___init;
    local_34 = TYPEOF param_s;
    ARG param_s;
    ARG local_31;
    ARG local_33;
    local_29 = VCALL local_34 5;
    local_35 = GETATTR local_29 0;
    local_38 = TYPEOF param_s;
    ARG param_s;
    local_37 = VCALL local_38 3;
    local_39 = GETATTR local_37 0;
    local_40 = LOAD 1;
    ARG local_40;
    local_41 = CALL Int___init;
    local_42 = GETATTR local_41 0;
    local_43 = local_39 - local_42
    ARG local_43;
    local_44 = CALL Int___init;
    local_45 = LOAD 1;
    ARG local_45;
    local_46 = CALL Int___init;
    local_47 = TYPEOF param_s;
    ARG param_s;
    ARG local_44;
    ARG local_46;
    local_36 = VCALL local_47 5;
    local_48 = GETATTR local_36 0;
    local_49 = streq(local_35, local_48);
    ARG local_49;
    local_50 = CALL Bool___init;
    local_51 = GETATTR local_50 0;
    IF local_51 > 0 GOTO label_then_4;
    LABEL label_else_4;
    local_52 = LOAD 0;
    ARG local_52;
    local_53 = CALL Bool___init;
    local_28 = local_53;
    GOTO label_continue_4;
    LABEL label_then_4;
    local_56 = LOAD 1;
    ARG local_56;
    local_57 = CALL Int___init;
    local_59 = TYPEOF param_s;
    ARG param_s;
    local_58 = VCALL local_59 3;
    local_60 = GETATTR local_58 0;
    local_61 = LOAD 2;
    ARG local_61;
    local_62 = CALL Int___init;
    local_63 = GETATTR local_62 0;
    local_64 = local_60 - local_63
    ARG local_64;
    local_65 = CALL Int___init;
    local_66 = TYPEOF param_s;
    ARG param_s;
    ARG local_57;
    ARG local_65;
    local_55 = VCALL local_66 5;
    local_67 = TYPEOF param_self;
    ARG param_self;
    ARG local_55;
    local_54 = VCALL local_67 7;
    local_28 = local_54;
    LABEL label_continue_4;
    local_14 = local_28;
    GOTO label_continue_2;
    LABEL label_then_2;
    local_68 = LOAD 1;
    ARG local_68;
    local_69 = CALL Bool___init;
    local_14 = local_69;
    LABEL label_continue_2;
    local_0 = local_14;
    GOTO label_continue_0;
    LABEL label_then_0;
    local_70 = LOAD 1;
    ARG local_70;
    local_71 = CALL Bool___init;
    local_0 = local_71;
    LABEL label_continue_0;
    RETURN local_0;
  }

  function Main_i___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;

    local_2 = LOAD 1;
    ARG local_2;
    local_3 = CALL Int___init;
    local_1 = GETATTR local_3 0;
    local_4 = LOAD 1;
    local_0 = local_4 - local_1
    ARG local_0;
    local_5 = CALL Bool___init;
    SETATTR param_self 0 local_5;
    local_7 = LOAD data_7_string;
    ARG local_7;
    local_8 = CALL String___init;
    local_9 = TYPEOF param_self;
    ARG param_self;
    ARG local_8;
    local_6 = VCALL local_9 3;
    local_13 = TYPEOF param_self;
    ARG param_self;
    local_12 = VCALL local_13 5;
    local_14 = TYPEOF param_self;
    ARG param_self;
    ARG local_12;
    local_11 = VCALL local_14 7;
    local_15 = GETATTR local_11 0;
    IF local_15 > 0 GOTO label_then_5;
    LABEL label_else_5;
    local_17 = LOAD data_8_string;
    ARG local_17;
    local_18 = CALL String___init;
    local_19 = TYPEOF param_self;
    ARG param_self;
    ARG local_18;
    local_16 = VCALL local_19 3;
    local_10 = local_16;
    GOTO label_continue_5;
    LABEL label_then_5;
    local_21 = LOAD data_9_string;
    ARG local_21;
    local_22 = CALL String___init;
    local_23 = TYPEOF param_self;
    ARG param_self;
    ARG local_22;
    local_20 = VCALL local_23 3;
    local_10 = local_20;
    LABEL label_continue_5;
    RETURN local_10;
  }

