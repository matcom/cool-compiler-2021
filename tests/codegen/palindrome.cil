.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Object_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Object_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method Object_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Main {
    attribute i;
    method Object_abort;
    method Main_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_pal;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_abort_msg = "Program Halted!";
  data_2_type_name_Object = "Object";
  data_3_type_name_Int = "Int";
  data_4_type_name_Bool = "Bool";
  data_5_type_name_String = "String";
  data_6_type_name_IO = "IO";
  data_7_type_name_Main = "Main";
  data_8_string = "enter a string\n";
  data_9_string = "that was a palindrome\n";
  data_10_string = "that was not a palindrome\n";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_out_string {
    PARAM param_str;
    PARAM param_self;


    print(str, param_str
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_length;
    LOCAL local_1;

    param_self = length(local_length)
    ARG local_length;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_4;

    local_self_len = length(param_self)
    local_other_len = length(param_other)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_4 = CALL String___init;
    RETURN local_4;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_substr;

    local_substr = substr(param_self, param_i, param_l)
    RETURN local_substr;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Main___init {

    LOCAL local_self;
    LOCAL local_i;

    local_self = ALLOCATE Main;
    ARG local_self;
    local_i = CALL Main_i___init;
    SETATTR local_self 0 local_i;
    RETURN local_self;
  }

  function Main_pal {
    PARAM param_self;
    PARAM param_s;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;
    LOCAL local_51;
    LOCAL local_52;
    LOCAL local_53;
    LOCAL local_54;
    LOCAL local_55;
    LOCAL local_56;
    LOCAL local_57;
    LOCAL local_58;
    LOCAL local_59;
    LOCAL local_60;
    LOCAL local_61;

    local_2 = TYPEOF param_s;
    ARG param_s;
    local_1 = VCALL local_2 3;
    local_3 = GETATTR local_1 0;
    local_4 = LOAD 0;
    ARG local_4;
    local_5 = CALL Int___init;
    local_6 = GETATTR local_5 0;
    local_7 = local_3 - local_6
    local_8 = LOAD 1;
    local_7 = local_8 - local_7
    ARG local_7;
    local_9 = CALL Bool___init;
    IF local_9 GOTO label_then_0;
    GOTO label_else_0;
    LABEL label_then_0;
    local_10 = LOAD 1;
    ARG local_10;
    local_11 = CALL Bool___init;
    GOTO label_continue_0;
    LABEL label_else_0;
    local_14 = TYPEOF param_s;
    ARG param_s;
    local_13 = VCALL local_14 3;
    local_15 = GETATTR local_13 0;
    local_16 = LOAD 1;
    ARG local_16;
    local_17 = CALL Int___init;
    local_18 = GETATTR local_17 0;
    local_19 = local_15 - local_18
    local_20 = LOAD 1;
    local_19 = local_20 - local_19
    ARG local_19;
    local_21 = CALL Bool___init;
    IF local_21 GOTO label_then_1;
    GOTO label_else_1;
    LABEL label_then_1;
    local_22 = LOAD 1;
    ARG local_22;
    local_23 = CALL Bool___init;
    GOTO label_continue_1;
    LABEL label_else_1;
    local_26 = LOAD 0;
    ARG local_26;
    local_27 = CALL Int___init;
    local_28 = LOAD 1;
    ARG local_28;
    local_29 = CALL Int___init;
    local_30 = TYPEOF param_s;
    ARG param_s;
    ARG local_27;
    ARG local_29;
    local_25 = VCALL local_30 5;
    local_31 = GETATTR local_25 0;
    local_34 = TYPEOF param_s;
    ARG param_s;
    local_33 = VCALL local_34 3;
    local_35 = GETATTR local_33 0;
    local_36 = LOAD 1;
    ARG local_36;
    local_37 = CALL Int___init;
    local_38 = GETATTR local_37 0;
    local_39 = local_35 - local_38
    local_40 = LOAD 1;
    ARG local_40;
    local_41 = CALL Int___init;
    local_42 = TYPEOF param_s;
    ARG param_s;
    ARG local_39;
    ARG local_41;
    local_32 = VCALL local_42 5;
    local_43 = GETATTR local_32 0;
    local_44 = local_31 - local_43
    local_45 = LOAD 1;
    local_44 = local_45 - local_44
    ARG local_44;
    local_46 = CALL Bool___init;
    IF local_46 GOTO label_then_2;
    GOTO label_else_2;
    LABEL label_then_2;
    local_49 = LOAD 1;
    ARG local_49;
    local_50 = CALL Int___init;
    local_52 = TYPEOF param_s;
    ARG param_s;
    local_51 = VCALL local_52 3;
    local_53 = GETATTR local_51 0;
    local_54 = LOAD 2;
    ARG local_54;
    local_55 = CALL Int___init;
    local_56 = GETATTR local_55 0;
    local_57 = local_53 - local_56
    local_58 = TYPEOF param_s;
    ARG param_s;
    ARG local_50;
    ARG local_57;
    local_48 = VCALL local_58 5;
    local_59 = TYPEOF param_self;
    ARG param_self;
    ARG local_48;
    local_47 = VCALL local_59 7;
    GOTO label_continue_2;
    LABEL label_else_2;
    local_60 = LOAD 0;
    ARG local_60;
    local_61 = CALL Bool___init;
    LABEL label_continue_2;
    LABEL label_continue_1;
    LABEL label_continue_0;
    RETURN local_0;
  }

  function Main_i___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Void___init;
    RETURN local_0;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_i;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;

    local_1 = LOAD 1;
    ARG local_1;
    local_2 = CALL Int___init;
    local_3 = LOAD 1;
    local_0 = local_3 - local_2
    SETATTR param_self 0 local_i;
    local_6 = LOAD data_8_string;
    ARG local_6;
    local_7 = CALL String___init;
    local_8 = TYPEOF param_self;
    ARG param_self;
    ARG local_7;
    local_5 = VCALL local_8 3;
    local_12 = TYPEOF param_self;
    ARG param_self;
    local_11 = VCALL local_12 5;
    local_13 = TYPEOF param_self;
    ARG param_self;
    ARG local_11;
    local_10 = VCALL local_13 7;
    IF local_10 GOTO label_then_3;
    GOTO label_else_3;
    LABEL label_then_3;
    local_15 = LOAD data_9_string;
    ARG local_15;
    local_16 = CALL String___init;
    local_17 = TYPEOF param_self;
    ARG param_self;
    ARG local_16;
    local_14 = VCALL local_17 3;
    GOTO label_continue_3;
    LABEL label_else_3;
    local_19 = LOAD data_10_string;
    ARG local_19;
    local_20 = CALL String___init;
    local_21 = TYPEOF param_self;
    ARG param_self;
    ARG local_20;
    local_18 = VCALL local_21 3;
    LABEL label_continue_3;
    RETURN local_9;
  }

