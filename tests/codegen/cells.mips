	.data
abort_msg: .asciiz "Abort called from class "
new_line: .asciiz "\n"
string_abort: .asciiz "Abort called from class String\n"
int_abort: .asciiz "Abort called from class Int\n"
bool_abort: .asciiz "Abort called from class Bool\n"
type_Object: .asciiz "Object"
type_IO: .asciiz "IO"
type_String: .asciiz "String"
type_Int: .asciiz "Int"
type_Bool: .asciiz "Bool"
type_CellularAutomaton: .asciiz "CellularAutomaton"
type_Main: .asciiz "Main"
methods: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
type_Void: .asciiz "Void"
types: .word 0, 0, 0, 0, 0, 0, 0
data_0: .asciiz "Void"
data_1: .asciiz ""
data_2: .asciiz "
"
data_3: .asciiz "X"
data_4: .asciiz "X"
data_5: .asciiz "X"
data_6: .asciiz "."
data_7: .asciiz "X"
data_8: .asciiz ""
data_9: .asciiz "         X         "
zero_error: .asciiz "Division by zero error\n"
case_void_error: .asciiz "Case on void error\n"
dispatch_error: .asciiz "Dispatch on void error\n"
case_error: .asciiz "Case statement without a matching branch error\n"
index_error: .asciiz "Substring out of range error\n"
heap_error: .asciiz "Heap overflow error
"
	.text
	.globl main
main:
	la $v0, methods
	la $t9, entry
	sw $t9, 0($v0)
	la $t9, function_abort_Object
	sw $t9, 4($v0)
	la $t9, function_type_name_Object
	sw $t9, 8($v0)
	la $t9, function_copy_Object
	sw $t9, 12($v0)
	la $t9, function_out_string_IO
	sw $t9, 16($v0)
	la $t9, function_out_int_IO
	sw $t9, 20($v0)
	la $t9, function_in_int_IO
	sw $t9, 24($v0)
	la $t9, function_in_string_IO
	sw $t9, 28($v0)
	la $t9, function_length_String
	sw $t9, 32($v0)
	la $t9, function_concat_String
	sw $t9, 36($v0)
	la $t9, function_substr_String
	sw $t9, 40($v0)
	la $t9, function_type_name_String
	sw $t9, 44($v0)
	la $t9, function_copy_String
	sw $t9, 48($v0)
	la $t9, function_type_name_Int
	sw $t9, 52($v0)
	la $t9, function_copy_Int
	sw $t9, 56($v0)
	la $t9, function_type_name_Bool
	sw $t9, 60($v0)
	la $t9, function_copy_Bool
	sw $t9, 64($v0)
	la $t9, function_abort_String
	sw $t9, 68($v0)
	la $t9, function_abort_Int
	sw $t9, 72($v0)
	la $t9, function_abort_Bool
	sw $t9, 76($v0)
	la $t9, function_CellularAutomaton_CellularAutomaton
	sw $t9, 80($v0)
	la $t9, function_init_CellularAutomaton
	sw $t9, 84($v0)
	la $t9, function_print_CellularAutomaton
	sw $t9, 88($v0)
	la $t9, function_num_cells_CellularAutomaton
	sw $t9, 92($v0)
	la $t9, function_cell_CellularAutomaton
	sw $t9, 96($v0)
	la $t9, function_cell_left_neighbor_CellularAutomaton
	sw $t9, 100($v0)
	la $t9, function_cell_right_neighbor_CellularAutomaton
	sw $t9, 104($v0)
	la $t9, function_cell_at_next_evolution_CellularAutomaton
	sw $t9, 108($v0)
	la $t9, function_evolve_CellularAutomaton
	sw $t9, 112($v0)
	la $t9, function_Main_Main
	sw $t9, 116($v0)
	la $t9, function_main_Main
	sw $t9, 120($v0)
	la $t9, types
	li $v0, 9
	li $a0, 12
	syscall
	la $t8, type_String
	sw $t8, 0($v0)
	sw $v0, 0($t9)
	move $t8, $v0
	li $v0, 9
	li $a0, 28
	syscall
	la $v1, methods
	lw $a0, 32($v1)
	sw $a0, 4($v0)
	lw $a0, 36($v1)
	sw $a0, 8($v0)
	lw $a0, 40($v1)
	sw $a0, 12($v0)
	lw $a0, 68($v1)
	sw $a0, 16($v0)
	lw $a0, 44($v1)
	sw $a0, 20($v0)
	lw $a0, 48($v1)
	sw $a0, 24($v0)
	sw $v0, 8($t8)
	li $v0, 9
	li $a0, 12
	syscall
	la $t8, type_Int
	sw $t8, 0($v0)
	sw $v0, 4($t9)
	move $t8, $v0
	li $v0, 9
	li $a0, 16
	syscall
	la $v1, methods
	lw $a0, 72($v1)
	sw $a0, 4($v0)
	lw $a0, 52($v1)
	sw $a0, 8($v0)
	lw $a0, 56($v1)
	sw $a0, 12($v0)
	sw $v0, 8($t8)
	li $v0, 9
	li $a0, 12
	syscall
	la $t8, type_Bool
	sw $t8, 0($v0)
	sw $v0, 8($t9)
	move $t8, $v0
	li $v0, 9
	li $a0, 16
	syscall
	la $v1, methods
	lw $a0, 76($v1)
	sw $a0, 4($v0)
	lw $a0, 60($v1)
	sw $a0, 8($v0)
	lw $a0, 64($v1)
	sw $a0, 12($v0)
	sw $v0, 8($t8)
	li $v0, 9
	li $a0, 12
	syscall
	la $t8, type_Object
	sw $t8, 0($v0)
	sw $v0, 12($t9)
	move $t8, $v0
	li $v0, 9
	li $a0, 16
	syscall
	la $v1, methods
	lw $a0, 4($v1)
	sw $a0, 4($v0)
	lw $a0, 8($v1)
	sw $a0, 8($v0)
	lw $a0, 12($v1)
	sw $a0, 12($v0)
	sw $v0, 8($t8)
	li $v0, 9
	li $a0, 12
	syscall
	la $t8, type_IO
	sw $t8, 0($v0)
	sw $v0, 16($t9)
	move $t8, $v0
	li $v0, 9
	li $a0, 32
	syscall
	la $v1, methods
	lw $a0, 4($v1)
	sw $a0, 4($v0)
	lw $a0, 8($v1)
	sw $a0, 8($v0)
	lw $a0, 12($v1)
	sw $a0, 12($v0)
	lw $a0, 16($v1)
	sw $a0, 16($v0)
	lw $a0, 20($v1)
	sw $a0, 20($v0)
	lw $a0, 24($v1)
	sw $a0, 24($v0)
	lw $a0, 28($v1)
	sw $a0, 28($v0)
	sw $v0, 8($t8)
	li $v0, 9
	li $a0, 12
	syscall
	la $t8, type_CellularAutomaton
	sw $t8, 0($v0)
	sw $v0, 20($t9)
	move $t8, $v0
	li $v0, 9
	li $a0, 68
	syscall
	la $v1, methods
	lw $a0, 4($v1)
	sw $a0, 4($v0)
	lw $a0, 8($v1)
	sw $a0, 8($v0)
	lw $a0, 12($v1)
	sw $a0, 12($v0)
	lw $a0, 16($v1)
	sw $a0, 16($v0)
	lw $a0, 20($v1)
	sw $a0, 20($v0)
	lw $a0, 28($v1)
	sw $a0, 24($v0)
	lw $a0, 24($v1)
	sw $a0, 28($v0)
	lw $a0, 84($v1)
	sw $a0, 32($v0)
	lw $a0, 88($v1)
	sw $a0, 36($v0)
	lw $a0, 92($v1)
	sw $a0, 40($v0)
	lw $a0, 96($v1)
	sw $a0, 44($v0)
	lw $a0, 100($v1)
	sw $a0, 48($v0)
	lw $a0, 104($v1)
	sw $a0, 52($v0)
	lw $a0, 108($v1)
	sw $a0, 56($v0)
	lw $a0, 112($v1)
	sw $a0, 60($v0)
	lw $a0, 80($v1)
	sw $a0, 64($v0)
	sw $v0, 8($t8)
	li $v0, 9
	li $a0, 12
	syscall
	la $t8, type_Main
	sw $t8, 0($v0)
	sw $v0, 24($t9)
	move $t8, $v0
	li $v0, 9
	li $a0, 24
	syscall
	la $v1, methods
	lw $a0, 4($v1)
	sw $a0, 4($v0)
	lw $a0, 8($v1)
	sw $a0, 8($v0)
	lw $a0, 12($v1)
	sw $a0, 12($v0)
	lw $a0, 120($v1)
	sw $a0, 16($v0)
	lw $a0, 116($v1)
	sw $a0, 20($v0)
	sw $v0, 8($t8)
	lw $v0, 0($t9)
	li $t8, 0
	sw $t8, 4($v0)
	lw $v0, 4($t9)
	li $t8, 0
	sw $t8, 4($v0)
	lw $v0, 8($t9)
	li $t8, 0
	sw $t8, 4($v0)
	lw $v0, 12($t9)
	li $t8, 0
	sw $t8, 4($v0)
	lw $v0, 16($t9)
	lw $t8, 12($t9)
	sw $t8, 4($v0)
	lw $v0, 20($t9)
	lw $t8, 16($t9)
	sw $t8, 4($v0)
	lw $v0, 24($t9)
	lw $t8, 12($t9)
	sw $t8, 4($v0)

entry:
	move $fp, $sp
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	li $v0, 9
	li $a0, 16
	syscall
	la $t9, type_Main
	sw $t9, 0($v0)
	li $t9, 16
	sw $t9, 4($v0)
	move $t0, $v0
	la $t8, types
	lw $v0, 24($t8)
	sw $v0, 8($t0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -0($fp)
	jal function_Main_Main
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -4($fp)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t1, -0($fp)
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -0($fp)
	jal function_main_Main
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -4($fp)
	move $t0, $v0
	li $v0, 0
	sw $t0, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_abort_Object:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	move $t1, $t0
	sw $t1, -4($fp)
	li $t8, 0
	li $v0, 4
	la $a0, abort_msg
	syscall
	li $v0, 4
	lw $a0, 0($t0)
	syscall
	li $v0, 4
	la $a0, new_line
	syscall
	li $v0, 17
	move $a0, $t8
	syscall
	sw $t0, -0($fp)
	sw $t1, -4($fp)

function_type_name_Object:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	lw $t1, 0($t0)
	move $v0, $t1
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_copy_Object:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	lw $t9, 4($t0)
	li $v0, 9
	move $a0, $t9
	syscall
	move $t1, $v0
	li $t8, 0
loop_0:
	bge $t8, $t9, exit_0
	lw $a0, ($t0)
	sw $a0, ($v0)
	addi $v0, $v0, 4
	addi $t0, $t0, 4
	addi $t8, $t8, 4
	j loop_0
exit_0:
	move $v0, $t1
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_out_string_IO:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	lw $t1, -8($fp)
	move $t1, $t0
	sw $t1, -8($fp)
	lw $t2, -0($fp)
	li $v0, 4
	move $a0, $t2
	syscall
	move $v0, $t1
	sw $t0, -4($fp)
	sw $t1, -8($fp)
	sw $t2, -0($fp)
	addiu $sp, $sp, 12
	jr $ra


function_out_int_IO:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	lw $t1, -8($fp)
	move $t1, $t0
	sw $t1, -8($fp)
	lw $t2, -0($fp)
	li $v0, 1
	move $a0, $t2
	syscall
	move $v0, $t1
	sw $t0, -4($fp)
	sw $t1, -8($fp)
	sw $t2, -0($fp)
	addiu $sp, $sp, 12
	jr $ra


function_in_int_IO:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	li $v0, 5
	syscall
	move $t0, $v0
	move $v0, $t0
	sw $t0, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_in_string_IO:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	li $a0, 356
	li $v0, 9
	syscall
	move $t0, $v0
	move $a0, $t0
	li $a1, 356
	li $v0, 8
	syscall
	move $t9, $t0
start_1:
	lb $t8, 0($t9)
	beqz $t8, end_1
	add $t9, $t9, 1
	j start_1
end_1:
	addiu $t9, $t9, -1
	sb $0, ($t9)
	move $v0, $t0
	sw $t0, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_length_String:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	move $t8, $t0
loop_2:
	lb $t9, 0($t8)
	beq $t9, $zero, end_2
	addi $t8, $t8, 1
	j loop_2
end_2:
	sub $t1, $t8, $t0
	move $v0, $t1
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_concat_String:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	lw $t1, -0($fp)
	lw $t2, -8($fp)
	li $a0, 356
	li $v0, 9
	syscall
	move $t2, $v0
	move $a0, $t0
	move $a1, $t2
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	jal strcopier
	move $a0, $t1
	move $a1, $v0
	jal strcopier
	sb $0, 0($v0)
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	j finish_3
strcopier:
loop_3:
	lb $t8, ($a0)
	beq $t8, $zero, end_3
	addiu $a0, $a0, 1
	sb $t8, ($a1)
	addiu $a1, $a1, 1
	b loop_3
end_3:
	move $v0, $a1
	jr $ra
finish_3:
	move $v0, $t2
	sw $t0, -4($fp)
	sw $t1, -0($fp)
	sw $t2, -8($fp)
	addiu $sp, $sp, 12
	jr $ra


function_substr_String:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	lw $t1, -0($fp)
	lw $t2, -12($fp)
	li $a0, 356
	li $v0, 9
	syscall
	move $t2, $v0
	lw $t3, -8($fp)
	li $v0, 0
	move $t8, $t3
start_4:
	lb $t9, 0($t8)
	beqz $t9, error_4
	addi $v0, 1
	bgt $v0, $t0, end_len_4
	addi $t8, 1
	j start_4
end_len_4:
	move $v0, $t2
loop_4:
	sub $t9, $v0, $t2
	beq $t9, $t1, end_4
	lb $t9, 0($t8)
	beqz $t9, error_4
	sb $t9, 0($v0)
	addi $t8, $t8, 1
	addi $v0, $v0, 1
	j loop_4
error_4:
	la $a0, index_error
	li $v0, 4
	move $a0, $t3
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 1
	move $a0, $t1
	syscall
	j .raise
end_4:
	sb $0, 0($v0)
	move $v0, $t2
	sw $t0, -4($fp)
	sw $t1, -0($fp)
	sw $t2, -12($fp)
	sw $t3, -8($fp)
	addiu $sp, $sp, 16
	jr $ra


function_type_name_String:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	la $t0, type_String
	move $v0, $t0
	sw $t0, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_copy_String:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	li $a0, 356
	li $v0, 9
	syscall
	move $t1, $v0
	move $a0, $t0
	move $a1, $t1
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	jal strcopier
	sb $0, 0($v0)
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	j finish_5
finish_5:
	move $v0, $t1
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_type_name_Int:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	la $t0, type_Int
	move $v0, $t0
	sw $t0, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_copy_Int:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	move $t1, $t0
	sw $t1, -4($fp)
	move $v0, $t1
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_type_name_Bool:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	la $t0, type_Bool
	move $v0, $t0
	sw $t0, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_copy_Bool:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	move $t1, $t0
	sw $t1, -4($fp)
	move $v0, $t1
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	addiu $sp, $sp, 8
	jr $ra


function_abort_String:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	la $t0, string_abort
	li $v0, 4
	move $a0, $t0
	syscall
	li $t8, 0
	li $v0, 17
	move $a0, $t8
	syscall
	sw $t0, -0($fp)

function_abort_Int:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	la $t0, int_abort
	li $v0, 4
	move $a0, $t0
	syscall
	li $t8, 0
	li $v0, 17
	move $a0, $t8
	syscall
	sw $t0, -0($fp)

function_abort_Bool:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	la $t0, bool_abort
	li $v0, 4
	move $a0, $t0
	syscall
	li $t8, 0
	li $v0, 17
	move $a0, $t8
	syscall
	sw $t0, -0($fp)

function_CellularAutomaton_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	la $t0, data_1
	lw $t1, -0($fp)
	sw $t0, 12($t1)
	lw $t2, -8($fp)
	move $t2, $t1
	sw $t2, -8($fp)
	move $v0, $t2
	sw $t0, -4($fp)
	sw $t1, -0($fp)
	sw $t2, -8($fp)
	addiu $sp, $sp, 12
	jr $ra


function_init_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	sw $t0, 12($t1)
	lw $t2, -8($fp)
	move $t2, $t1
	sw $t2, -8($fp)
	move $v0, $t2
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	sw $t2, -8($fp)
	addiu $sp, $sp, 12
	jr $ra


function_print_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	lw $t1, 12($t0)
	lw $t2, -8($fp)
	la $t2, data_2
	lw $t3, -16($fp)
	la $t3, type_String
	lw $t4, -20($fp)
	la $t4, data_0
	move $t8, $t3
	move $t9, $t4
loop_6:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_6
	beqz $a1, mismatch_6
	seq $v0, $a0, $a1
	beqz $v0, mismatch_6
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_6
mismatch_6:
	li $v0, 0
	j end_6
check_6:
	bnez $a1, mismatch_6
	li $v0, 1
end_6:
	move $t3, $v0
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	sw $t2, -8($fp)
	sw $t3, -16($fp)
	sw $t4, -20($fp)
	beqz $t3, continue__74
	la $a0, dispatch_error
	j .raise
continue__74:
	lw $t0, -12($fp)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t1, -8($fp)
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	lw $t2, -4($fp)
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -12($fp)
	sw $t1, -8($fp)
	sw $t2, -4($fp)
	jal function_concat_String
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -12($fp)
	move $t0, $v0
	lw $t1, -0($fp)
	lw $t2, -24($fp)
	lw $t9, 8($t1)
	lw $a0, 8($t9)
	lw $t8, 16($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -12($fp)
	sw $t1, -0($fp)
	sw $t2, -24($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -24($fp)
	move $t0, $v0
	lw $t1, -0($fp)
	lw $t2, -28($fp)
	move $t2, $t1
	sw $t2, -28($fp)
	move $v0, $t2
	sw $t0, -24($fp)
	sw $t1, -0($fp)
	sw $t2, -28($fp)
	addiu $sp, $sp, 32
	jr $ra


function_num_cells_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -4($fp)
	lw $t1, 12($t0)
	lw $t2, -12($fp)
	la $t2, type_String
	lw $t3, -16($fp)
	la $t3, data_0
	move $t8, $t2
	move $t9, $t3
loop_7:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_7
	beqz $a1, mismatch_7
	seq $v0, $a0, $a1
	beqz $v0, mismatch_7
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_7
mismatch_7:
	li $v0, 0
	j end_7
check_7:
	bnez $a1, mismatch_7
	li $v0, 1
end_7:
	move $t2, $v0
	sw $t0, -0($fp)
	sw $t1, -4($fp)
	sw $t2, -12($fp)
	sw $t3, -16($fp)
	beqz $t2, continue__96
	la $a0, dispatch_error
	j .raise
continue__96:
	lw $t0, -8($fp)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t1, -4($fp)
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -8($fp)
	sw $t1, -4($fp)
	jal function_length_String
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -8($fp)
	move $t0, $v0
	move $v0, $t0
	sw $t0, -8($fp)
	addiu $sp, $sp, 20
	jr $ra


function_cell_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	lw $t1, -8($fp)
	lw $t1, 12($t0)
	lw $t2, -16($fp)
	la $t2, type_String
	lw $t3, -20($fp)
	la $t3, data_0
	move $t8, $t2
	move $t9, $t3
loop_8:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_8
	beqz $a1, mismatch_8
	seq $v0, $a0, $a1
	beqz $v0, mismatch_8
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_8
mismatch_8:
	li $v0, 0
	j end_8
check_8:
	bnez $a1, mismatch_8
	li $v0, 1
end_8:
	move $t2, $v0
	sw $t0, -4($fp)
	sw $t1, -8($fp)
	sw $t2, -16($fp)
	sw $t3, -20($fp)
	beqz $t2, continue__116
	la $a0, dispatch_error
	j .raise
continue__116:
	lw $t0, -12($fp)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	li $t9, 1
	sw $t9, ($sp)
	addiu $sp, $sp, -4
	lw $t1, -0($fp)
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	lw $t2, -8($fp)
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -12($fp)
	sw $t1, -0($fp)
	sw $t2, -8($fp)
	jal function_substr_String
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -12($fp)
	move $t0, $v0
	move $v0, $t0
	sw $t0, -12($fp)
	addiu $sp, $sp, 24
	jr $ra


function_cell_left_neighbor_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -0($fp)
	lw $t1, -8($fp)
	li $t9, 0
	seq $t1, $t0, $t9
	sw $t0, -0($fp)
	sw $t1, -8($fp)
	bnez $t1, true__132
	lw $t0, -0($fp)
	lw $t1, -16($fp)
	addi $t1, $t0, -1
	lw $t2, -4($fp)
	lw $t3, -20($fp)
	lw $t9, 8($t2)
	lw $a0, 8($t9)
	lw $t8, 44($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -0($fp)
	sw $t1, -16($fp)
	sw $t2, -4($fp)
	sw $t3, -20($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -20($fp)
	move $t0, $v0
	lw $t1, -12($fp)
	move $t1, $t0
	sw $t1, -12($fp)
	sw $t0, -20($fp)
	sw $t1, -12($fp)
	j end__132
true__132:
	lw $t0, -4($fp)
	lw $t1, -28($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 40($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -28($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -28($fp)
	move $t0, $v0
	lw $t1, -24($fp)
	addi $t1, $t0, -1
	lw $t2, -4($fp)
	lw $t3, -32($fp)
	lw $t9, 8($t2)
	lw $a0, 8($t9)
	lw $t8, 44($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -28($fp)
	sw $t1, -24($fp)
	sw $t2, -4($fp)
	sw $t3, -32($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -32($fp)
	move $t0, $v0
	lw $t1, -12($fp)
	move $t1, $t0
	sw $t1, -12($fp)
	sw $t0, -32($fp)
	sw $t1, -12($fp)
end__132:
	lw $t0, -12($fp)
	move $v0, $t0
	sw $t0, -12($fp)
	addiu $sp, $sp, 36
	jr $ra


function_cell_right_neighbor_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	lw $t1, -16($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 40($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -16($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -16($fp)
	move $t0, $v0
	lw $t1, -12($fp)
	addi $t1, $t0, -1
	lw $t2, -0($fp)
	lw $t3, -8($fp)
	seq $t3, $t2, $t1
	sw $t0, -16($fp)
	sw $t1, -12($fp)
	sw $t2, -0($fp)
	sw $t3, -8($fp)
	bnez $t3, true__165
	lw $t0, -0($fp)
	lw $t1, -24($fp)
	addi $t1, $t0, 1
	lw $t2, -4($fp)
	lw $t3, -28($fp)
	lw $t9, 8($t2)
	lw $a0, 8($t9)
	lw $t8, 44($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -0($fp)
	sw $t1, -24($fp)
	sw $t2, -4($fp)
	sw $t3, -28($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -28($fp)
	move $t0, $v0
	lw $t1, -20($fp)
	move $t1, $t0
	sw $t1, -20($fp)
	sw $t0, -28($fp)
	sw $t1, -20($fp)
	j end__165
true__165:
	lw $t0, -4($fp)
	lw $t1, -32($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 44($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	li $t9, 0
	sw $t9, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -32($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -32($fp)
	move $t0, $v0
	lw $t1, -20($fp)
	move $t1, $t0
	sw $t1, -20($fp)
	sw $t0, -32($fp)
	sw $t1, -20($fp)
end__165:
	lw $t0, -20($fp)
	move $v0, $t0
	sw $t0, -20($fp)
	addiu $sp, $sp, 36
	jr $ra


function_cell_at_next_evolution_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	lw $t1, -24($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 44($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t2, -0($fp)
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -24($fp)
	sw $t2, -0($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -24($fp)
	move $t0, $v0
	lw $t1, -28($fp)
	la $t1, data_3
	lw $t2, -20($fp)
	move $t8, $t0
	move $t9, $t1
loop_9:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_9
	beqz $a1, mismatch_9
	seq $v0, $a0, $a1
	beqz $v0, mismatch_9
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_9
mismatch_9:
	li $v0, 0
	j end_9
check_9:
	bnez $a1, mismatch_9
	li $v0, 1
end_9:
	move $t2, $v0
	sw $t0, -24($fp)
	sw $t1, -28($fp)
	sw $t2, -20($fp)
	bnez $t2, true__198
	lw $t0, -32($fp)
	li $t0, 0
	sw $t0, -32($fp)
	sw $t0, -32($fp)
	j end__198
true__198:
	lw $t0, -32($fp)
	li $t0, 1
	sw $t0, -32($fp)
	sw $t0, -32($fp)
end__198:
	lw $t0, -4($fp)
	lw $t1, -40($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 48($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t2, -0($fp)
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -40($fp)
	sw $t2, -0($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -40($fp)
	move $t0, $v0
	lw $t1, -44($fp)
	la $t1, data_4
	lw $t2, -36($fp)
	move $t8, $t0
	move $t9, $t1
loop_10:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_10
	beqz $a1, mismatch_10
	seq $v0, $a0, $a1
	beqz $v0, mismatch_10
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_10
mismatch_10:
	li $v0, 0
	j end_10
check_10:
	bnez $a1, mismatch_10
	li $v0, 1
end_10:
	move $t2, $v0
	sw $t0, -40($fp)
	sw $t1, -44($fp)
	sw $t2, -36($fp)
	bnez $t2, true__214
	lw $t0, -48($fp)
	li $t0, 0
	sw $t0, -48($fp)
	sw $t0, -48($fp)
	j end__214
true__214:
	lw $t0, -48($fp)
	li $t0, 1
	sw $t0, -48($fp)
	sw $t0, -48($fp)
end__214:
	lw $t0, -32($fp)
	lw $t1, -48($fp)
	lw $t2, -16($fp)
	add $t2, $t0, $t1
	lw $t3, -4($fp)
	lw $t4, -56($fp)
	lw $t9, 8($t3)
	lw $a0, 8($t9)
	lw $t8, 52($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t5, -0($fp)
	sw $t5, ($sp)
	addiu $sp, $sp, -4
	sw $t3, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -32($fp)
	sw $t1, -48($fp)
	sw $t2, -16($fp)
	sw $t3, -4($fp)
	sw $t4, -56($fp)
	sw $t5, -0($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -56($fp)
	move $t0, $v0
	lw $t1, -60($fp)
	la $t1, data_5
	lw $t2, -52($fp)
	move $t8, $t0
	move $t9, $t1
loop_11:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_11
	beqz $a1, mismatch_11
	seq $v0, $a0, $a1
	beqz $v0, mismatch_11
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_11
mismatch_11:
	li $v0, 0
	j end_11
check_11:
	bnez $a1, mismatch_11
	li $v0, 1
end_11:
	move $t2, $v0
	sw $t0, -56($fp)
	sw $t1, -60($fp)
	sw $t2, -52($fp)
	bnez $t2, true__231
	lw $t0, -64($fp)
	li $t0, 0
	sw $t0, -64($fp)
	sw $t0, -64($fp)
	j end__231
true__231:
	lw $t0, -64($fp)
	li $t0, 1
	sw $t0, -64($fp)
	sw $t0, -64($fp)
end__231:
	lw $t0, -16($fp)
	lw $t1, -64($fp)
	lw $t2, -12($fp)
	add $t2, $t0, $t1
	lw $t3, -8($fp)
	li $t9, 1
	seq $t3, $t2, $t9
	sw $t0, -16($fp)
	sw $t1, -64($fp)
	sw $t2, -12($fp)
	sw $t3, -8($fp)
	bnez $t3, true__240
	lw $t0, -72($fp)
	la $t0, data_6
	lw $t1, -68($fp)
	move $t1, $t0
	sw $t1, -68($fp)
	sw $t0, -72($fp)
	sw $t1, -68($fp)
	j end__240
true__240:
	lw $t0, -76($fp)
	la $t0, data_7
	lw $t1, -68($fp)
	move $t1, $t0
	sw $t1, -68($fp)
	sw $t0, -76($fp)
	sw $t1, -68($fp)
end__240:
	lw $t0, -68($fp)
	move $v0, $t0
	sw $t0, -68($fp)
	addiu $sp, $sp, 80
	jr $ra


function_evolve_CellularAutomaton:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	li $t0, 0
	sw $t0, -4($fp)
	lw $t1, -0($fp)
	lw $t2, -12($fp)
	lw $t9, 8($t1)
	lw $a0, 8($t9)
	lw $t8, 40($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -0($fp)
	sw $t2, -12($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -12($fp)
	move $t0, $v0
	lw $t1, -8($fp)
	move $t1, $t0
	sw $t1, -8($fp)
	lw $t2, -20($fp)
	la $t2, data_8
	lw $t3, -16($fp)
	move $t3, $t2
	sw $t3, -16($fp)
	lw $t4, -24($fp)
	li $a0, 4
	li $v0, 9
	syscall
	la $t9, type_Void
	sw $t9, 0($v0)
	move $t4, $v0
	sw $t0, -12($fp)
	sw $t1, -8($fp)
	sw $t2, -20($fp)
	sw $t3, -16($fp)
	sw $t4, -24($fp)
start__268:
	lw $t0, -4($fp)
	lw $t1, -8($fp)
	lw $t2, -28($fp)
	slt $t2, $t0, $t1
	sw $t0, -4($fp)
	sw $t1, -8($fp)
	sw $t2, -28($fp)
	beqz $t2, end__268
	lw $t0, -0($fp)
	lw $t1, -32($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 56($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t2, -4($fp)
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -0($fp)
	sw $t1, -32($fp)
	sw $t2, -4($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -32($fp)
	move $t0, $v0
	lw $t1, -16($fp)
	lw $t2, -40($fp)
	la $t2, type_String
	lw $t3, -44($fp)
	la $t3, data_0
	move $t8, $t2
	move $t9, $t3
loop_12:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_12
	beqz $a1, mismatch_12
	seq $v0, $a0, $a1
	beqz $v0, mismatch_12
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_12
mismatch_12:
	li $v0, 0
	j end_12
check_12:
	bnez $a1, mismatch_12
	li $v0, 1
end_12:
	move $t2, $v0
	sw $t0, -32($fp)
	sw $t1, -16($fp)
	sw $t2, -40($fp)
	sw $t3, -44($fp)
	beqz $t2, continue__281
	la $a0, dispatch_error
	j .raise
continue__281:
	lw $t0, -36($fp)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t1, -32($fp)
	sw $t1, ($sp)
	addiu $sp, $sp, -4
	lw $t2, -16($fp)
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -36($fp)
	sw $t1, -32($fp)
	sw $t2, -16($fp)
	jal function_concat_String
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -36($fp)
	move $t0, $v0
	lw $t1, -16($fp)
	move $t1, $t0
	sw $t1, -16($fp)
	lw $t2, -4($fp)
	lw $t3, -48($fp)
	addi $t3, $t2, 1
	move $t2, $t3
	sw $t2, -4($fp)
	lw $t4, -52($fp)
	move $t4, $t3
	sw $t4, -52($fp)
	lw $t5, -24($fp)
	move $t5, $t4
	sw $t5, -24($fp)
	sw $t0, -36($fp)
	sw $t1, -16($fp)
	sw $t2, -4($fp)
	sw $t3, -48($fp)
	sw $t4, -52($fp)
	sw $t5, -24($fp)
	j start__268
end__268:
	lw $t0, -16($fp)
	lw $t1, -0($fp)
	sw $t0, 12($t1)
	lw $t2, -56($fp)
	move $t2, $t1
	sw $t2, -56($fp)
	move $v0, $t2
	sw $t0, -16($fp)
	sw $t1, -0($fp)
	sw $t2, -56($fp)
	addiu $sp, $sp, 60
	jr $ra


function_Main_Main:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	li $a0, 4
	li $v0, 9
	syscall
	la $t9, type_Void
	sw $t9, 0($v0)
	move $t0, $v0
	lw $t1, -0($fp)
	sw $t0, 12($t1)
	lw $t2, -8($fp)
	move $t2, $t1
	sw $t2, -8($fp)
	move $v0, $t2
	sw $t0, -4($fp)
	sw $t1, -0($fp)
	sw $t2, -8($fp)
	addiu $sp, $sp, 12
	jr $ra


function_main_Main:
	move $fp, $sp
	addiu $fp, $fp, 4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	addiu $sp, $sp, -4
	lw $t0, -4($fp)
	li $v0, 9
	li $a0, 16
	syscall
	la $t9, type_CellularAutomaton
	sw $t9, 0($v0)
	li $t9, 16
	sw $t9, 4($v0)
	move $t0, $v0
	la $t8, types
	lw $v0, 20($t8)
	sw $v0, 8($t0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	jal function_CellularAutomaton_CellularAutomaton
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -4($fp)
	move $t0, $v0
	lw $t1, -8($fp)
	la $t1, data_9
	lw $t2, -16($fp)
	lw $t2, 0($t0)
	lw $t3, -20($fp)
	la $t3, data_0
	move $t8, $t2
	move $t9, $t3
loop_13:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_13
	beqz $a1, mismatch_13
	seq $v0, $a0, $a1
	beqz $v0, mismatch_13
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_13
mismatch_13:
	li $v0, 0
	j end_13
check_13:
	bnez $a1, mismatch_13
	li $v0, 1
end_13:
	move $t2, $v0
	sw $t0, -4($fp)
	sw $t1, -8($fp)
	sw $t2, -16($fp)
	sw $t3, -20($fp)
	beqz $t2, continue__323
	la $a0, dispatch_error
	j .raise
continue__323:
	lw $t0, -4($fp)
	lw $t1, -12($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 32($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	lw $t2, -8($fp)
	sw $t2, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -4($fp)
	sw $t1, -12($fp)
	sw $t2, -8($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -12($fp)
	move $t0, $v0
	lw $t1, -0($fp)
	sw $t0, 12($t1)
	lw $t2, -24($fp)
	lw $t2, 12($t1)
	lw $t3, -32($fp)
	lw $t3, 0($t2)
	lw $t4, -36($fp)
	la $t4, data_0
	move $t8, $t3
	move $t9, $t4
loop_14:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_14
	beqz $a1, mismatch_14
	seq $v0, $a0, $a1
	beqz $v0, mismatch_14
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_14
mismatch_14:
	li $v0, 0
	j end_14
check_14:
	bnez $a1, mismatch_14
	li $v0, 1
end_14:
	move $t3, $v0
	sw $t0, -12($fp)
	sw $t1, -0($fp)
	sw $t2, -24($fp)
	sw $t3, -32($fp)
	sw $t4, -36($fp)
	beqz $t3, continue__338
	la $a0, dispatch_error
	j .raise
continue__338:
	lw $t0, -24($fp)
	lw $t1, -28($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 36($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -24($fp)
	sw $t1, -28($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -28($fp)
	move $t0, $v0
	lw $t1, -40($fp)
	li $t1, 20
	sw $t1, -40($fp)
	lw $t2, -44($fp)
	li $a0, 4
	li $v0, 9
	syscall
	la $t9, type_Void
	sw $t9, 0($v0)
	move $t2, $v0
	sw $t0, -28($fp)
	sw $t1, -40($fp)
	sw $t2, -44($fp)
start__350:
	lw $t0, -40($fp)
	lw $t1, -48($fp)
	li $t9, 0
	slt $t1, $t9, $t0
	sw $t0, -40($fp)
	sw $t1, -48($fp)
	beqz $t1, end__350
	lw $t0, -0($fp)
	lw $t1, -52($fp)
	lw $t1, 12($t0)
	lw $t2, -60($fp)
	lw $t2, 0($t1)
	lw $t3, -64($fp)
	la $t3, data_0
	move $t8, $t2
	move $t9, $t3
loop_15:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_15
	beqz $a1, mismatch_15
	seq $v0, $a0, $a1
	beqz $v0, mismatch_15
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_15
mismatch_15:
	li $v0, 0
	j end_15
check_15:
	bnez $a1, mismatch_15
	li $v0, 1
end_15:
	move $t2, $v0
	sw $t0, -0($fp)
	sw $t1, -52($fp)
	sw $t2, -60($fp)
	sw $t3, -64($fp)
	beqz $t2, continue__360
	la $a0, dispatch_error
	j .raise
continue__360:
	lw $t0, -52($fp)
	lw $t1, -56($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 60($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -52($fp)
	sw $t1, -56($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -56($fp)
	move $t0, $v0
	lw $t1, -0($fp)
	lw $t2, -68($fp)
	lw $t2, 12($t1)
	lw $t3, -76($fp)
	lw $t3, 0($t2)
	lw $t4, -80($fp)
	la $t4, data_0
	move $t8, $t3
	move $t9, $t4
loop_16:
	lb $a0, ($t8)
	lb $a1, ($t9)
	beqz $a0, check_16
	beqz $a1, mismatch_16
	seq $v0, $a0, $a1
	beqz $v0, mismatch_16
	addi $t8, $t8, 1
	addi $t9, $t9, 1
	j loop_16
mismatch_16:
	li $v0, 0
	j end_16
check_16:
	bnez $a1, mismatch_16
	li $v0, 1
end_16:
	move $t3, $v0
	sw $t0, -56($fp)
	sw $t1, -0($fp)
	sw $t2, -68($fp)
	sw $t3, -76($fp)
	sw $t4, -80($fp)
	beqz $t3, continue__374
	la $a0, dispatch_error
	j .raise
continue__374:
	lw $t0, -68($fp)
	lw $t1, -72($fp)
	lw $t9, 8($t0)
	lw $a0, 8($t9)
	lw $t8, 36($a0)
	sw $fp, ($sp)
	addiu $sp, $sp, -4
	sw $ra, ($sp)
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	addiu $sp, $sp, -4
	sw $t0, -68($fp)
	sw $t1, -72($fp)
	jal $t8
	addiu $sp, $sp, 4
	lw $ra, ($sp)
	addiu $sp, $sp, 4
	lw $fp, ($sp)
	lw $t0, -72($fp)
	move $t0, $v0
	lw $t1, -40($fp)
	lw $t2, -84($fp)
	addi $t2, $t1, -1
	move $t1, $t2
	sw $t1, -40($fp)
	lw $t3, -88($fp)
	move $t3, $t2
	sw $t3, -88($fp)
	lw $t4, -44($fp)
	move $t4, $t3
	sw $t4, -44($fp)
	sw $t0, -72($fp)
	sw $t1, -40($fp)
	sw $t2, -84($fp)
	sw $t3, -88($fp)
	sw $t4, -44($fp)
	j start__350
end__350:
	lw $t0, -0($fp)
	lw $t1, -92($fp)
	move $t1, $t0
	sw $t1, -92($fp)
	move $v0, $t1
	sw $t0, -0($fp)
	sw $t1, -92($fp)
	addiu $sp, $sp, 96
	jr $ra

.raise:
	li $v0, 4
	syscall
	li $v0, 17
	li $a0, 1
	syscall
