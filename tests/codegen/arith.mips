	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_A: .asciiz "A"
data_7_type_name_B: .asciiz "B"
data_8_type_name_C: .asciiz "C"
data_9_type_name_D: .asciiz "D"
data_10_type_name_E: .asciiz "E"
data_11_type_name_A2I: .asciiz "A2I"
data_12_type_name_Main: .asciiz "Main"
data_13_string: .asciiz "0"
data_14_string: .asciiz "1"
data_15_string: .asciiz "2"
data_16_string: .asciiz "3"
data_17_string: .asciiz "4"
data_18_string: .asciiz "5"
data_19_string: .asciiz "6"
data_20_string: .asciiz "7"
data_21_string: .asciiz "8"
data_22_string: .asciiz "9"
data_23_string: .asciiz ""
data_24_string: .asciiz "-"
data_25_string: .asciiz "+"
data_26_string: .asciiz "\n	To add a number to "
data_27_string: .asciiz "...enter a:\n"
data_28_string: .asciiz "	To negate "
data_29_string: .asciiz "...enter b:\n"
data_30_string: .asciiz "	To find the difference between "
data_31_string: .asciiz "and another number...enter c:\n"
data_32_string: .asciiz "	To find the factorial of "
data_33_string: .asciiz "...enter d:\n"
data_34_string: .asciiz "	To square "
data_35_string: .asciiz "...enter e:\n"
data_36_string: .asciiz "	To cube "
data_37_string: .asciiz "...enter f:\n"
data_38_string: .asciiz "	To find out if "
data_39_string: .asciiz "is a multiple of 3...enter g:\n"
data_40_string: .asciiz "	To divide "
data_41_string: .asciiz "by 8...enter h:\n"
data_42_string: .asciiz "	To get a new number...enter j:\n"
data_43_string: .asciiz "	To quit...enter q:\n\n"
data_44_string: .asciiz "\n"
data_45_string: .asciiz "Please enter a number...  "
data_46_case_err: .asciiz "Case of did not match any branch!"
data_47_string: .asciiz "Class type is now E\n"
data_48_string: .asciiz "Class type is now D\n"
data_49_string: .asciiz " "
data_50_string: .asciiz "number "
data_51_string: .asciiz "is odd!\n"
data_52_string: .asciiz "is even!\n"
data_53_string: .asciiz "a"
data_54_string: .asciiz "b"
data_55_string: .asciiz "c"
data_56_string: .asciiz "d"
data_57_string: .asciiz "e"
data_58_string: .asciiz "f"
data_59_string: .asciiz "g"
data_60_string: .asciiz "h"
data_61_string: .asciiz "j"
data_62_string: .asciiz "q"
data_63_string: .asciiz "is equal to "
data_64_string: .asciiz "times 8 with a remainder of "
data_65_string: .asciiz "is not divisible by 3.\n"
data_66_string: .asciiz "is divisible by 3.\n"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Int_copy
Bool: .word Object_abort,Bool_type_name,Bool_copy
String: .word Object_abort,String_type_name,String_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,IO_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
A: .word Object_abort,A_type_name,A_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,A_method5
B: .word Object_abort,B_type_name,B_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,B_method5
C: .word Object_abort,C_type_name,C_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,C_method5,C_method6
D: .word Object_abort,D_type_name,D_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,B_method5,D_method7
E: .word Object_abort,E_type_name,E_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,B_method5,D_method7,E_method6
A2I: .word Object_abort,A2I_type_name,A2I_copy,A2I_c2i,A2I_i2c,A2I_a2i,A2I_a2i_aux,A2I_i2a,A2I_i2a_aux
Main: .word Object_abort,Main_type_name,Main_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Main_menu,Main_prompt,Main_get_int,Main_is_even,Main_class_type,Main_print,Main_main

	.text
Void___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t3, 0 	#Save value 0 in register
	sw $t3, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Main___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_0_abort_msg 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t7, 4($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_1_type_name_Object 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Object 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_2_type_name_Int 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, Int 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t7, data_3_type_name_Bool 	#LOAD
	sw $t7, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, Bool 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_4_type_name_String 	#LOAD
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, String 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_5_type_name_IO 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t9, IO 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_6_type_name_A 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t5, A 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 0($t4) 	#Save value in attribute of index 0
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B_type_name:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_7_type_name_B 	#LOAD
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B_copy:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type B
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, B 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t8) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_8_type_name_C 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_copy:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type C
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, C 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t9) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_9_type_name_D 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type D
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, D 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t5) 	#Save value in attribute of index 0
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t6, data_10_type_name_E 	#LOAD
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type E
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t4, E 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t7) 	#Save value in attribute of index 0
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_11_type_name_A2I 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_copy:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A2I
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t9, A2I 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_12_type_name_Main 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t5, Main 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t7) 	#Save value in attribute of index 0
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 4($t7) 	#Load attribute in index 1
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t8) 	#Save value in attribute of index 1
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 8($t5) 	#Load attribute in index 2
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 8($t9) 	#Save value in attribute of index 2
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 12($t5) 	#Load attribute in index 3
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 12($t1) 	#Save value in attribute of index 3
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t6, -4($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t9, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t7, -4($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t5, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 0($fp) 	#Save obtained attribute in destination
	lw $a0, 0($fp) 	#Calculate Lenght
	li $t5, 0 	#
loop1:
	lb $t6, 0($a0) 	#
	beqz $t6, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t5,  $t5, 1 	#
	j loop1 	#
exit1:
	sw $t5, 4($fp) 	#Save Calculated Length
	lw $t6, 4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 28 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 0($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 4($fp) 	#Save obtained attribute in destination
	lw $a0, 0($fp) 	#Calculate Lenght
	li $t6, 0 	#
loop2:
	lb $t4, 0($a0) 	#
	beqz $t4, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t6,  $t6, 1 	#
	j loop2 	#
exit2:
	sw $t6, 12($fp) 	#Save Calculated Length
	lw $a0, 4($fp) 	#Calculate Lenght
	li $t0, 0 	#
loop3:
	lb $t9, 0($a0) 	#
	beqz $t9, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t0,  $t0, 1 	#
	j loop3 	#
exit3:
	sw $t0, 16($fp) 	#Save Calculated Length
	lw $t6, 16($fp) 	#
	lw $t4, 12($fp) 	#
	add $t5,  $t6, $t4 	#Plus
	sw $t5, 20($fp) 	#Save result of plus
	lw $t0, 20($fp) 	#Concat two Strings
	addi $t0,  $t0, 1 	#
	li $v0, 9 	#
	move $a0, $t0 	#
	syscall 	#
	la $t8, 0($v0) 	#
	lw $a1, 0($fp) 	#
	lw $a2, 4($fp) 	#
loop4:
	lb $t0, 0($a1) 	#
	beqz $t0, exit4 	#
	sb $t0, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t0, 0($a2) 	#
	sb $t0, 0($v0) 	#
	beqz $t0, exit5 	#
	addi $v0,  $v0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t8, 8($fp) 	#Save concated Strings
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 24($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -28 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -12($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 0($fp) 	#Save obtained attribute in destination
	lw $t1, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 8($fp) 	#Save obtained attribute in destination
	lw $t6, 8($fp) 	#Obtain substring
	move $t9, $t6 	#
	addi $t9,  $t9, 1 	#
	li $v0, 9 	#
	move $a0, $t9 	#
	syscall 	#
	la $t5, 0($v0) 	#
	lw $t0, 4($fp) 	#
	lw $a1, 0($fp) 	#
	add $a1,  $a1, $t0 	#
loop6:
	lb $t2, 0($a1) 	#
	beqz $t6, exit6 	#
	sb $t2, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t6,  $t6, -1 	#
	j loop6 	#
exit6:
	li $t2, 0 	#
	sb $t2, 0($v0) 	#
	sw $t5, 12($fp) 	#Save substring
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t4, Object 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Int 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t0) 	#Save value in attribute of index 0
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, Bool 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, -4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 0($t5) 	#Save value in attribute of index 0
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, String 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, -4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 0($t1) 	#Save value in attribute of index 0
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, A 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t6) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_var___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t2, 0 	#Load Int
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_value:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 0($fp) 	#Save obtained attribute in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_set_var:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Obtain value from source dir
	lw $t8, -8($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t8) 	#Save value in attribute of index 0
	lw $t2, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method1:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method2:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t5, 0 	#Load Int
	sw $t5, 4($fp) 	#Save loaded value in destination
	lw $t7, 4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 8($fp) 	#Save obtained attribute in destination
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 12($fp) 	#Save obtained attribute in destination
	lw $t1, 12($fp) 	#
	lw $t2, 8($fp) 	#
	add $t6,  $t1, $t2 	#Plus
	sw $t6, 16($fp) 	#Save result of plus
	lw $t3, 16($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 20($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	jal B___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 28($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 28($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 32($fp) 	#Save type value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 32($fp) 	#get type dir for Dynamic Call
	lw $t1, 16($t2) 	#Get method of index 4
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 24($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method3:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t1, 0 	#Load Int
	sw $t1, 4($fp) 	#Save loaded value in destination
	lw $t3, 4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 12($fp) 	#Save obtained attribute in destination
	li $t7, 1 	#Load Int
	sw $t7, 16($fp) 	#Save loaded value in destination
	lw $t6, 12($fp) 	#
	lw $t7, 16($fp) 	#
	sub $t5,  $t7, $t6 	#Minus
	sw $t5, 8($fp) 	#Save result of minus
	lw $t4, 8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 20($fp) 	#Obtain value to assign
	sw $t4, 0($fp) 	#Assign value
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 28($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 28($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 32($fp) 	#Save type value in destination
	lw $t9, 28($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 32($fp) 	#get type dir for Dynamic Call
	lw $t4, 16($t1) 	#Get method of index 4
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 24($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method4:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 108 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t4, -8($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 8($fp) 	#Save obtained attribute in destination
	lw $t4, 8($fp) 	#
	lw $t7, 4($fp) 	#
	sub $t8,  $t7, $t4 	#Minus
	sw $t8, 12($fp) 	#Save result of minus
	lw $t8, 12($fp) 	#Mov comparisson value to register
	bltz $t8, label_then_1 	#Compare values in registers and jump to label_then_1 if the second is greater than 0
label_else_1:
	li $t8, 0 	#Load Int
	sw $t8, 20($fp) 	#Save loaded value in destination
	lw $t8, 20($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 24($fp) 	#Obtain value to assign
	sw $t6, 16($fp) 	#Assign value
	j label_continue_1 	#Jump to label_continue_1
label_then_1:
	li $t7, 1 	#Load Int
	sw $t7, 28($fp) 	#Save loaded value in destination
	lw $t5, 28($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 32($fp) 	#Obtain value to assign
	sw $t0, 16($fp) 	#Assign value
label_continue_1:
	lw $t2, 16($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 36($fp) 	#Save obtained attribute in destination
	lw $t6, 36($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_0 	#Compare values in registers and jump to label_then_0 if the second is greater than 0
label_else_0:
	li $t1, 0 	#Load Int
	sw $t1, 44($fp) 	#Save loaded value in destination
	lw $t5, 44($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 48($fp) 	#Save obtained attribute in destination
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 52($fp) 	#Save obtained attribute in destination
	lw $t2, 52($fp) 	#
	lw $t5, 48($fp) 	#
	sub $t3,  $t5, $t2 	#Minus
	sw $t3, 56($fp) 	#Save result of minus
	lw $t1, 56($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 60($fp) 	#Obtain value to assign
	sw $t6, 40($fp) 	#Assign value
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 68($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 68($fp) 	#Typeof
	lw $t7, -4($t5) 	#
	sw $t7, 72($fp) 	#Save type value in destination
	lw $t3, 68($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 40($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 72($fp) 	#get type dir for Dynamic Call
	lw $t9, 16($t5) 	#Get method of index 4
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 64($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 64($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	j label_continue_0 	#Jump to label_continue_0
label_then_0:
	li $t1, 0 	#Load Int
	sw $t1, 76($fp) 	#Save loaded value in destination
	lw $t0, 76($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -8($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 80($fp) 	#Save obtained attribute in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 84($fp) 	#Save obtained attribute in destination
	lw $t7, 84($fp) 	#
	lw $t0, 80($fp) 	#
	sub $t6,  $t0, $t7 	#Minus
	sw $t6, 88($fp) 	#Save result of minus
	lw $t1, 88($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 92($fp) 	#Obtain value to assign
	sw $t7, 40($fp) 	#Assign value
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 100($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 100($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 104($fp) 	#Save type value in destination
	lw $t7, 100($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 40($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 104($fp) 	#get type dir for Dynamic Call
	lw $t6, 16($t1) 	#Get method of index 4
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 96($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, 96($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
label_continue_0:
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -108 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method5:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 120 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t4, 1 	#Load Int
	sw $t4, 4($fp) 	#Save loaded value in destination
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
	li $t9, 1 	#Load Int
	sw $t9, 16($fp) 	#Save loaded value in destination
	lw $t1, 16($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 20($fp) 	#Obtain value to assign
	sw $t2, 12($fp) 	#Assign value
label_while_label_0:
	lw $t9, 12($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t9) 	#Load attribute in index 0
	sw $t6, 24($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 28($fp) 	#Save obtained attribute in destination
	lw $t7, 28($fp) 	#
	lw $t1, 24($fp) 	#
	sub $t9,  $t1, $t7 	#Minus
	sw $t9, 32($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 36($fp) 	#Save loaded value in destination
	lw $t1, 36($fp) 	#
	lw $t9, 32($fp) 	#
	add $t5,  $t1, $t9 	#Plus
	sw $t5, 32($fp) 	#Save result of plus
	lw $t9, 32($fp) 	#Mov comparisson value to register
	bltz $t9, label_then_2 	#Compare values in registers and jump to label_then_2 if the second is greater than 0
label_else_2:
	li $t7, 0 	#Load Int
	sw $t7, 44($fp) 	#Save loaded value in destination
	lw $t8, 44($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 48($fp) 	#Obtain value to assign
	sw $t7, 40($fp) 	#Assign value
	j label_continue_2 	#Jump to label_continue_2
label_then_2:
	li $t2, 1 	#Load Int
	sw $t2, 52($fp) 	#Save loaded value in destination
	lw $t4, 52($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 56($fp) 	#Obtain value to assign
	sw $t6, 40($fp) 	#Assign value
label_continue_2:
	lw $t0, 40($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 60($fp) 	#Save obtained attribute in destination
	lw $t6, 60($fp) 	#Mov comparisson value to register
	bgtz $t6, label_loop_label_0 	#Compare values in registers and jump to label_loop_label_0 if the second is greater than 0
	j label_pool_label_0 	#Jump to label_pool_label_0
label_loop_label_0:
	lw $t3, 0($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 64($fp) 	#Save obtained attribute in destination
	lw $t6, 12($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t6) 	#Load attribute in index 0
	sw $t8, 68($fp) 	#Save obtained attribute in destination
	lw $t8, 68($fp) 	#
	lw $t2, 64($fp) 	#
	mult $t8, $t2 	#Mult
	mflo $t8 	#
	sw $t8, 72($fp) 	#Save result of Mult
	lw $t3, 72($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 76($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	lw $t3, 12($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t3) 	#Load attribute in index 0
	sw $t9, 80($fp) 	#Save obtained attribute in destination
	li $t8, 1 	#Load Int
	sw $t8, 84($fp) 	#Save loaded value in destination
	lw $t9, 84($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 88($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 92($fp) 	#Save obtained attribute in destination
	lw $t2, 92($fp) 	#
	lw $t4, 80($fp) 	#
	add $t8,  $t2, $t4 	#Plus
	sw $t8, 96($fp) 	#Save result of plus
	lw $t2, 96($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 100($fp) 	#Obtain value to assign
	sw $t7, 12($fp) 	#Assign value
	j label_while_label_0 	#Jump to label_while_label_0
label_pool_label_0:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 104($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 112($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 112($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 116($fp) 	#Save type value in destination
	lw $t2, 112($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 116($fp) 	#get type dir for Dynamic Call
	lw $t1, 16($t8) 	#Get method of index 4
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 108($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -120 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type B
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, B 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 0($t3) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B_method5:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t5, 0 	#Load Int
	sw $t5, 4($fp) 	#Save loaded value in destination
	lw $t5, 4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 8($fp) 	#Save obtained attribute in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 12($fp) 	#Save obtained attribute in destination
	lw $t1, 12($fp) 	#
	lw $t4, 8($fp) 	#
	mult $t1, $t4 	#Mult
	mflo $t1 	#
	sw $t1, 16($fp) 	#Save result of Mult
	lw $t5, 16($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 20($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 28($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 28($fp) 	#Typeof
	lw $t2, -4($t4) 	#
	sw $t2, 32($fp) 	#Save type value in destination
	lw $t3, 28($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 32($fp) 	#get type dir for Dynamic Call
	lw $t5, 16($t6) 	#Get method of index 4
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 24($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type C
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, C 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 0($t3) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_method6:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t3, 0 	#Load Int
	sw $t3, 4($fp) 	#Save loaded value in destination
	lw $t2, 4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 12($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 16($fp) 	#Save loaded value in destination
	lw $t1, 12($fp) 	#
	lw $t9, 16($fp) 	#
	sub $t0,  $t9, $t1 	#Minus
	sw $t0, 8($fp) 	#Save result of minus
	lw $t5, 8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 20($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 28($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 28($fp) 	#Typeof
	lw $t5, -4($t2) 	#
	sw $t5, 32($fp) 	#Save type value in destination
	lw $t8, 28($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 32($fp) 	#get type dir for Dynamic Call
	lw $t9, 16($t1) 	#Get method of index 4
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, 24($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_method5:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 52 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t1, 0 	#Load Int
	sw $t1, 4($fp) 	#Save loaded value in destination
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 8($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 12($fp) 	#Save obtained attribute in destination
	lw $t6, 12($fp) 	#
	lw $t9, 8($fp) 	#
	mult $t6, $t9 	#Mult
	mflo $t6 	#
	sw $t6, 16($fp) 	#Save result of Mult
	lw $t3, 16($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 20($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 24($fp) 	#Save obtained attribute in destination
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 28($fp) 	#Save obtained attribute in destination
	lw $t7, 28($fp) 	#
	lw $t3, 24($fp) 	#
	mult $t7, $t3 	#Mult
	mflo $t7 	#
	sw $t7, 32($fp) 	#Save result of Mult
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 36($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 44($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 44($fp) 	#Typeof
	lw $t6, -4($t2) 	#
	sw $t6, 48($fp) 	#Save type value in destination
	lw $t2, 44($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 48($fp) 	#get type dir for Dynamic Call
	lw $t5, 16($t7) 	#Get method of index 4
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -52 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type D
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, D 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t1) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D_method7:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 276 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	lw $t1, 0($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 8($fp) 	#Save obtained attribute in destination
	li $t6, 0 	#Load Int
	sw $t6, 12($fp) 	#Save loaded value in destination
	lw $t7, 12($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 16($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t4) 	#Load attribute in index 0
	sw $t3, 20($fp) 	#Save obtained attribute in destination
	lw $t0, 20($fp) 	#
	lw $t7, 8($fp) 	#
	sub $t8,  $t7, $t0 	#Minus
	sw $t8, 24($fp) 	#Save result of minus
	lw $t8, 24($fp) 	#Mov comparisson value to register
	bltz $t8, label_then_4 	#Compare values in registers and jump to label_then_4 if the second is greater than 0
label_else_4:
	li $t3, 0 	#Load Int
	sw $t3, 32($fp) 	#Save loaded value in destination
	lw $t2, 32($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 36($fp) 	#Obtain value to assign
	sw $t8, 28($fp) 	#Assign value
	j label_continue_4 	#Jump to label_continue_4
label_then_4:
	li $t1, 1 	#Load Int
	sw $t1, 40($fp) 	#Save loaded value in destination
	lw $t3, 40($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 44($fp) 	#Obtain value to assign
	sw $t4, 28($fp) 	#Assign value
label_continue_4:
	lw $t6, 28($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 48($fp) 	#Save obtained attribute in destination
	lw $t5, 48($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_3 	#Compare values in registers and jump to label_then_3 if the second is greater than 0
label_else_3:
	li $t5, 0 	#Load Int
	sw $t5, 56($fp) 	#Save loaded value in destination
	lw $t2, 56($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 60($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 64($fp) 	#Save obtained attribute in destination
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t8) 	#Load attribute in index 0
	sw $t0, 68($fp) 	#Save obtained attribute in destination
	lw $t4, 68($fp) 	#
	lw $t1, 64($fp) 	#
	sub $t3,  $t1, $t4 	#Minus
	sw $t3, 72($fp) 	#Save result of minus
	lw $t4, 72($fp) 	#Mov comparisson value to register
	beqz $t4, label_then_6 	#Compare values in registers and jump to label_then_6 if the second is greater than 0
label_else_6:
	li $t3, 0 	#Load Int
	sw $t3, 80($fp) 	#Save loaded value in destination
	lw $t4, 80($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 84($fp) 	#Obtain value to assign
	sw $t8, 76($fp) 	#Assign value
	j label_continue_6 	#Jump to label_continue_6
label_then_6:
	li $t0, 1 	#Load Int
	sw $t0, 88($fp) 	#Save loaded value in destination
	lw $t9, 88($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 92($fp) 	#Obtain value to assign
	sw $t9, 76($fp) 	#Assign value
label_continue_6:
	lw $t9, 76($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 96($fp) 	#Save obtained attribute in destination
	lw $t5, 96($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_5 	#Compare values in registers and jump to label_then_5 if the second is greater than 0
label_else_5:
	li $t0, 1 	#Load Int
	sw $t0, 104($fp) 	#Save loaded value in destination
	lw $t3, 104($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 108($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t4) 	#Load attribute in index 0
	sw $t7, 112($fp) 	#Save obtained attribute in destination
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 116($fp) 	#Save obtained attribute in destination
	lw $t4, 116($fp) 	#
	lw $t5, 112($fp) 	#
	sub $t0,  $t5, $t4 	#Minus
	sw $t0, 120($fp) 	#Save result of minus
	lw $t6, 120($fp) 	#Mov comparisson value to register
	beqz $t6, label_then_8 	#Compare values in registers and jump to label_then_8 if the second is greater than 0
label_else_8:
	li $t4, 0 	#Load Int
	sw $t4, 128($fp) 	#Save loaded value in destination
	lw $t7, 128($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 132($fp) 	#Obtain value to assign
	sw $t1, 124($fp) 	#Assign value
	j label_continue_8 	#Jump to label_continue_8
label_then_8:
	li $t3, 1 	#Load Int
	sw $t3, 136($fp) 	#Save loaded value in destination
	lw $t6, 136($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 140($fp) 	#Obtain value to assign
	sw $t8, 124($fp) 	#Assign value
label_continue_8:
	lw $t3, 124($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 144($fp) 	#Save obtained attribute in destination
	lw $t0, 144($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_7 	#Compare values in registers and jump to label_then_7 if the second is greater than 0
label_else_7:
	li $t9, 2 	#Load Int
	sw $t9, 152($fp) 	#Save loaded value in destination
	lw $t2, 152($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 156($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 160($fp) 	#Save obtained attribute in destination
	lw $t0, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 164($fp) 	#Save obtained attribute in destination
	lw $t5, 164($fp) 	#
	lw $t0, 160($fp) 	#
	sub $t1,  $t0, $t5 	#Minus
	sw $t1, 168($fp) 	#Save result of minus
	lw $t8, 168($fp) 	#Mov comparisson value to register
	beqz $t8, label_then_10 	#Compare values in registers and jump to label_then_10 if the second is greater than 0
label_else_10:
	li $t8, 0 	#Load Int
	sw $t8, 176($fp) 	#Save loaded value in destination
	lw $t7, 176($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 180($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 180($fp) 	#Obtain value to assign
	sw $t5, 172($fp) 	#Assign value
	j label_continue_10 	#Jump to label_continue_10
label_then_10:
	li $t2, 1 	#Load Int
	sw $t2, 184($fp) 	#Save loaded value in destination
	lw $t3, 184($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 188($fp) 	#Obtain value to assign
	sw $t7, 172($fp) 	#Assign value
label_continue_10:
	lw $t1, 172($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 192($fp) 	#Save obtained attribute in destination
	lw $t8, 192($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_9 	#Compare values in registers and jump to label_then_9 if the second is greater than 0
label_else_9:
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 200($fp) 	#Save obtained attribute in destination
	li $t4, 3 	#Load Int
	sw $t4, 204($fp) 	#Save loaded value in destination
	lw $t0, 204($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 208($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 212($fp) 	#Save obtained attribute in destination
	lw $t0, 212($fp) 	#
	lw $t9, 200($fp) 	#
	sub $t3,  $t9, $t0 	#Minus
	sw $t3, 216($fp) 	#Save result of minus
	lw $t0, 216($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 220($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -8($fp) 	#Typeof
	lw $t3, -4($t5) 	#
	sw $t3, 224($fp) 	#Save type value in destination
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 220($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 224($fp) 	#get type dir for Dynamic Call
	lw $t0, 40($t8) 	#Get method of index 10
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 196($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 196($fp) 	#Obtain value to assign
	sw $t8, 148($fp) 	#Assign value
	j label_continue_9 	#Jump to label_continue_9
label_then_9:
	li $t1, 0 	#Load Int
	sw $t1, 228($fp) 	#Save loaded value in destination
	lw $t5, 228($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 232($fp) 	#Obtain value to assign
	sw $t8, 148($fp) 	#Assign value
label_continue_9:
	lw $t8, 148($fp) 	#Obtain value to assign
	sw $t8, 100($fp) 	#Assign value
	j label_continue_7 	#Jump to label_continue_7
label_then_7:
	li $t0, 0 	#Load Int
	sw $t0, 236($fp) 	#Save loaded value in destination
	lw $t8, 236($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 240($fp) 	#Obtain value to assign
	sw $t0, 100($fp) 	#Assign value
label_continue_7:
	lw $t5, 100($fp) 	#Obtain value to assign
	sw $t5, 52($fp) 	#Assign value
	j label_continue_5 	#Jump to label_continue_5
label_then_5:
	li $t6, 1 	#Load Int
	sw $t6, 244($fp) 	#Save loaded value in destination
	lw $t7, 244($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 248($fp) 	#Obtain value to assign
	sw $t0, 52($fp) 	#Assign value
label_continue_5:
	lw $t2, 52($fp) 	#Obtain value to assign
	sw $t2, 4($fp) 	#Assign value
	j label_continue_3 	#Jump to label_continue_3
label_then_3:
	lw $t1, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 260($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 264($fp) 	#Save loaded value in destination
	lw $t4, 260($fp) 	#
	lw $t8, 264($fp) 	#
	sub $t5,  $t8, $t4 	#Minus
	sw $t5, 256($fp) 	#Save result of minus
	lw $t6, 256($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -8($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 272($fp) 	#Save type value in destination
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 268($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 272($fp) 	#get type dir for Dynamic Call
	lw $t0, 40($t2) 	#Get method of index 10
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 252($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 252($fp) 	#Obtain value to assign
	sw $t5, 4($fp) 	#Assign value
label_continue_3:
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -276 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type E
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, E 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t2) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E_method6:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 44 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t9, 0 	#Load Int
	sw $t9, 4($fp) 	#Save loaded value in destination
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 8($fp) 	#Save obtained attribute in destination
	li $t6, 8 	#Load Int
	sw $t6, 12($fp) 	#Save loaded value in destination
	lw $t9, 12($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 16($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t7) 	#Load attribute in index 0
	sw $t8, 20($fp) 	#Save obtained attribute in destination
	lw $t4, 20($fp) 	#
	lw $t3, 8($fp) 	#
	div $t3, $t4 	#Div
	mflo $t4 	#
	sw $t4, 24($fp) 	#Save result of Div
	lw $t9, 24($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 28($fp) 	#Obtain value to assign
	sw $t4, 0($fp) 	#Assign value
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 36($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 36($fp) 	#Typeof
	lw $t1, -4($t2) 	#
	sw $t1, 40($fp) 	#Save type value in destination
	lw $t9, 36($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 40($fp) 	#get type dir for Dynamic Call
	lw $t1, 16($t8) 	#Get method of index 4
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -44 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A2I
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t9, A2I 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_c2i:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 416 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t4) 	#Load attribute in index 0
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	la $t6, data_13_string 	#LOAD
	sw $t6, 8($fp) 	#Save loaded value in destination
	lw $t8, 8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 12($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 16($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#
	lw $t9, 16($fp) 	#
loop7:
	lb $t2, 0($t6) 	#
	lb $t4, 0($t9) 	#
	beqz $t2, exit7 	#
	beqz $t4, exit8 	#
	addi $t6,  $t6, 1 	#
	addi $t9,  $t9, 1 	#
	beq $t2, $t4, loop7 	#
	j exit10 	#
exit7:
	beqz $t4, exit9 	#
	j exit10 	#
exit8:
	beqz $t2, exit9 	#
	j exit10 	#
exit9:
	li $t7, 1 	#
	j exit11 	#
exit10:
	li $t7, 0 	#
	j exit11 	#
exit11:
	sw $t7, 20($fp) 	#
	lw $t6, 20($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 24($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 28($fp) 	#Save obtained attribute in destination
	lw $t4, 28($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_11 	#Compare values in registers and jump to label_then_11 if the second is greater than 0
label_else_11:
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 36($fp) 	#Save obtained attribute in destination
	la $t1, data_14_string 	#LOAD
	sw $t1, 40($fp) 	#Save loaded value in destination
	lw $t9, 40($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 44($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 48($fp) 	#Save obtained attribute in destination
	lw $t1, 36($fp) 	#
	lw $t4, 48($fp) 	#
loop8:
	lb $t7, 0($t1) 	#
	lb $t6, 0($t4) 	#
	beqz $t7, exit12 	#
	beqz $t6, exit13 	#
	addi $t1,  $t1, 1 	#
	addi $t4,  $t4, 1 	#
	beq $t7, $t6, loop8 	#
	j exit15 	#
exit12:
	beqz $t6, exit14 	#
	j exit15 	#
exit13:
	beqz $t7, exit14 	#
	j exit15 	#
exit14:
	li $t8, 1 	#
	j exit16 	#
exit15:
	li $t8, 0 	#
	j exit16 	#
exit16:
	sw $t8, 52($fp) 	#
	lw $t1, 52($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 56($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 60($fp) 	#Save obtained attribute in destination
	lw $t5, 60($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_12 	#Compare values in registers and jump to label_then_12 if the second is greater than 0
label_else_12:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t6) 	#Load attribute in index 0
	sw $t0, 68($fp) 	#Save obtained attribute in destination
	la $t0, data_15_string 	#LOAD
	sw $t0, 72($fp) 	#Save loaded value in destination
	lw $t5, 72($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 76($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 80($fp) 	#Save obtained attribute in destination
	lw $t3, 68($fp) 	#
	lw $t2, 80($fp) 	#
loop9:
	lb $t9, 0($t3) 	#
	lb $t7, 0($t2) 	#
	beqz $t9, exit17 	#
	beqz $t7, exit18 	#
	addi $t3,  $t3, 1 	#
	addi $t2,  $t2, 1 	#
	beq $t9, $t7, loop9 	#
	j exit20 	#
exit17:
	beqz $t7, exit19 	#
	j exit20 	#
exit18:
	beqz $t9, exit19 	#
	j exit20 	#
exit19:
	li $t4, 1 	#
	j exit21 	#
exit20:
	li $t4, 0 	#
	j exit21 	#
exit21:
	sw $t4, 84($fp) 	#
	lw $t7, 84($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 88($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 92($fp) 	#Save obtained attribute in destination
	lw $t4, 92($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_13 	#Compare values in registers and jump to label_then_13 if the second is greater than 0
label_else_13:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t0) 	#Load attribute in index 0
	sw $t4, 100($fp) 	#Save obtained attribute in destination
	la $t2, data_16_string 	#LOAD
	sw $t2, 104($fp) 	#Save loaded value in destination
	lw $t4, 104($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 108($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 112($fp) 	#Save obtained attribute in destination
	lw $t1, 100($fp) 	#
	lw $t2, 112($fp) 	#
loop10:
	lb $t3, 0($t1) 	#
	lb $t0, 0($t2) 	#
	beqz $t3, exit22 	#
	beqz $t0, exit23 	#
	addi $t1,  $t1, 1 	#
	addi $t2,  $t2, 1 	#
	beq $t3, $t0, loop10 	#
	j exit25 	#
exit22:
	beqz $t0, exit24 	#
	j exit25 	#
exit23:
	beqz $t3, exit24 	#
	j exit25 	#
exit24:
	li $t5, 1 	#
	j exit26 	#
exit25:
	li $t5, 0 	#
	j exit26 	#
exit26:
	sw $t5, 116($fp) 	#
	lw $t0, 116($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 120($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 124($fp) 	#Save obtained attribute in destination
	lw $t9, 124($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_14 	#Compare values in registers and jump to label_then_14 if the second is greater than 0
label_else_14:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 132($fp) 	#Save obtained attribute in destination
	la $t6, data_17_string 	#LOAD
	sw $t6, 136($fp) 	#Save loaded value in destination
	lw $t2, 136($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 140($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 144($fp) 	#Save obtained attribute in destination
	lw $t7, 132($fp) 	#
	lw $t9, 144($fp) 	#
loop11:
	lb $t8, 0($t7) 	#
	lb $t3, 0($t9) 	#
	beqz $t8, exit27 	#
	beqz $t3, exit28 	#
	addi $t7,  $t7, 1 	#
	addi $t9,  $t9, 1 	#
	beq $t8, $t3, loop11 	#
	j exit30 	#
exit27:
	beqz $t3, exit29 	#
	j exit30 	#
exit28:
	beqz $t8, exit29 	#
	j exit30 	#
exit29:
	li $t0, 1 	#
	j exit31 	#
exit30:
	li $t0, 0 	#
	j exit31 	#
exit31:
	sw $t0, 148($fp) 	#
	lw $t4, 148($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 152($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 156($fp) 	#Save obtained attribute in destination
	lw $t2, 156($fp) 	#Mov comparisson value to register
	bgtz $t2, label_then_15 	#Compare values in registers and jump to label_then_15 if the second is greater than 0
label_else_15:
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t9) 	#Load attribute in index 0
	sw $t8, 164($fp) 	#Save obtained attribute in destination
	la $t9, data_18_string 	#LOAD
	sw $t9, 168($fp) 	#Save loaded value in destination
	lw $t2, 168($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 172($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 176($fp) 	#Save obtained attribute in destination
	lw $t2, 164($fp) 	#
	lw $t3, 176($fp) 	#
loop12:
	lb $t8, 0($t2) 	#
	lb $t6, 0($t3) 	#
	beqz $t8, exit32 	#
	beqz $t6, exit33 	#
	addi $t2,  $t2, 1 	#
	addi $t3,  $t3, 1 	#
	beq $t8, $t6, loop12 	#
	j exit35 	#
exit32:
	beqz $t6, exit34 	#
	j exit35 	#
exit33:
	beqz $t8, exit34 	#
	j exit35 	#
exit34:
	li $t5, 1 	#
	j exit36 	#
exit35:
	li $t5, 0 	#
	j exit36 	#
exit36:
	sw $t5, 180($fp) 	#
	lw $t7, 180($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 184($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t5) 	#Load attribute in index 0
	sw $t6, 188($fp) 	#Save obtained attribute in destination
	lw $t7, 188($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_16 	#Compare values in registers and jump to label_then_16 if the second is greater than 0
label_else_16:
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 196($fp) 	#Save obtained attribute in destination
	la $t8, data_19_string 	#LOAD
	sw $t8, 200($fp) 	#Save loaded value in destination
	lw $t3, 200($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 204($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 208($fp) 	#Save obtained attribute in destination
	lw $t4, 196($fp) 	#
	lw $t2, 208($fp) 	#
loop13:
	lb $t5, 0($t4) 	#
	lb $t0, 0($t2) 	#
	beqz $t5, exit37 	#
	beqz $t0, exit38 	#
	addi $t4,  $t4, 1 	#
	addi $t2,  $t2, 1 	#
	beq $t5, $t0, loop13 	#
	j exit40 	#
exit37:
	beqz $t0, exit39 	#
	j exit40 	#
exit38:
	beqz $t5, exit39 	#
	j exit40 	#
exit39:
	li $t7, 1 	#
	j exit41 	#
exit40:
	li $t7, 0 	#
	j exit41 	#
exit41:
	sw $t7, 212($fp) 	#
	lw $t9, 212($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 216($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t4) 	#Load attribute in index 0
	sw $t8, 220($fp) 	#Save obtained attribute in destination
	lw $t4, 220($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_17 	#Compare values in registers and jump to label_then_17 if the second is greater than 0
label_else_17:
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 228($fp) 	#Save obtained attribute in destination
	la $t5, data_20_string 	#LOAD
	sw $t5, 232($fp) 	#Save loaded value in destination
	lw $t1, 232($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 236($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 240($fp) 	#Save obtained attribute in destination
	lw $t4, 228($fp) 	#
	lw $t3, 240($fp) 	#
loop14:
	lb $t0, 0($t4) 	#
	lb $t6, 0($t3) 	#
	beqz $t0, exit42 	#
	beqz $t6, exit43 	#
	addi $t4,  $t4, 1 	#
	addi $t3,  $t3, 1 	#
	beq $t0, $t6, loop14 	#
	j exit45 	#
exit42:
	beqz $t6, exit44 	#
	j exit45 	#
exit43:
	beqz $t0, exit44 	#
	j exit45 	#
exit44:
	li $t7, 1 	#
	j exit46 	#
exit45:
	li $t7, 0 	#
	j exit46 	#
exit46:
	sw $t7, 244($fp) 	#
	lw $t9, 244($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 248($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 252($fp) 	#Save obtained attribute in destination
	lw $t3, 252($fp) 	#Mov comparisson value to register
	bgtz $t3, label_then_18 	#Compare values in registers and jump to label_then_18 if the second is greater than 0
label_else_18:
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 260($fp) 	#Save obtained attribute in destination
	la $t5, data_21_string 	#LOAD
	sw $t5, 264($fp) 	#Save loaded value in destination
	lw $t2, 264($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 268($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 272($fp) 	#Save obtained attribute in destination
	lw $t4, 260($fp) 	#
	lw $t2, 272($fp) 	#
loop15:
	lb $t7, 0($t4) 	#
	lb $t6, 0($t2) 	#
	beqz $t7, exit47 	#
	beqz $t6, exit48 	#
	addi $t4,  $t4, 1 	#
	addi $t2,  $t2, 1 	#
	beq $t7, $t6, loop15 	#
	j exit50 	#
exit47:
	beqz $t6, exit49 	#
	j exit50 	#
exit48:
	beqz $t7, exit49 	#
	j exit50 	#
exit49:
	li $t1, 1 	#
	j exit51 	#
exit50:
	li $t1, 0 	#
	j exit51 	#
exit51:
	sw $t1, 276($fp) 	#
	lw $t7, 276($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 280($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 284($fp) 	#Save obtained attribute in destination
	lw $t5, 284($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_19 	#Compare values in registers and jump to label_then_19 if the second is greater than 0
label_else_19:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 292($fp) 	#Save obtained attribute in destination
	la $t9, data_22_string 	#LOAD
	sw $t9, 296($fp) 	#Save loaded value in destination
	lw $t0, 296($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 300($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t5) 	#Load attribute in index 0
	sw $t9, 304($fp) 	#Save obtained attribute in destination
	lw $t9, 292($fp) 	#
	lw $t1, 304($fp) 	#
loop16:
	lb $t7, 0($t9) 	#
	lb $t0, 0($t1) 	#
	beqz $t7, exit52 	#
	beqz $t0, exit53 	#
	addi $t9,  $t9, 1 	#
	addi $t1,  $t1, 1 	#
	beq $t7, $t0, loop16 	#
	j exit55 	#
exit52:
	beqz $t0, exit54 	#
	j exit55 	#
exit53:
	beqz $t7, exit54 	#
	j exit55 	#
exit54:
	li $t2, 1 	#
	j exit56 	#
exit55:
	li $t2, 0 	#
	j exit56 	#
exit56:
	sw $t2, 308($fp) 	#
	lw $t1, 308($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 312($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 312($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t5) 	#Load attribute in index 0
	sw $t4, 316($fp) 	#Save obtained attribute in destination
	lw $t5, 316($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_20 	#Compare values in registers and jump to label_then_20 if the second is greater than 0
label_else_20:
	lw $t2, -8($fp) 	#Typeof
	lw $t6, -4($t2) 	#
	sw $t6, 324($fp) 	#Save type value in destination
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 324($fp) 	#get type dir for Dynamic Call
	lw $t0, 0($t5) 	#Get method of index 0
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 320($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	li $t5, 0 	#Load Int
	sw $t5, 328($fp) 	#Save loaded value in destination
	lw $t5, 328($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 332($fp) 	#Obtain value to assign
	sw $t2, 288($fp) 	#Assign value
	j label_continue_20 	#Jump to label_continue_20
label_then_20:
	li $t7, 9 	#Load Int
	sw $t7, 336($fp) 	#Save loaded value in destination
	lw $t1, 336($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 340($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 340($fp) 	#Obtain value to assign
	sw $t3, 288($fp) 	#Assign value
label_continue_20:
	lw $t2, 288($fp) 	#Obtain value to assign
	sw $t2, 256($fp) 	#Assign value
	j label_continue_19 	#Jump to label_continue_19
label_then_19:
	li $t5, 8 	#Load Int
	sw $t5, 344($fp) 	#Save loaded value in destination
	lw $t0, 344($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 348($fp) 	#Obtain value to assign
	sw $t3, 256($fp) 	#Assign value
label_continue_19:
	lw $t5, 256($fp) 	#Obtain value to assign
	sw $t5, 224($fp) 	#Assign value
	j label_continue_18 	#Jump to label_continue_18
label_then_18:
	li $t3, 7 	#Load Int
	sw $t3, 352($fp) 	#Save loaded value in destination
	lw $t6, 352($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 356($fp) 	#Obtain value to assign
	sw $t2, 224($fp) 	#Assign value
label_continue_18:
	lw $t9, 224($fp) 	#Obtain value to assign
	sw $t9, 192($fp) 	#Assign value
	j label_continue_17 	#Jump to label_continue_17
label_then_17:
	li $t6, 6 	#Load Int
	sw $t6, 360($fp) 	#Save loaded value in destination
	lw $t1, 360($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 364($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 364($fp) 	#Obtain value to assign
	sw $t4, 192($fp) 	#Assign value
label_continue_17:
	lw $t6, 192($fp) 	#Obtain value to assign
	sw $t6, 160($fp) 	#Assign value
	j label_continue_16 	#Jump to label_continue_16
label_then_16:
	li $t4, 5 	#Load Int
	sw $t4, 368($fp) 	#Save loaded value in destination
	lw $t7, 368($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 372($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 372($fp) 	#Obtain value to assign
	sw $t3, 160($fp) 	#Assign value
label_continue_16:
	lw $t9, 160($fp) 	#Obtain value to assign
	sw $t9, 128($fp) 	#Assign value
	j label_continue_15 	#Jump to label_continue_15
label_then_15:
	li $t6, 4 	#Load Int
	sw $t6, 376($fp) 	#Save loaded value in destination
	lw $t3, 376($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 380($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 380($fp) 	#Obtain value to assign
	sw $t8, 128($fp) 	#Assign value
label_continue_15:
	lw $t5, 128($fp) 	#Obtain value to assign
	sw $t5, 96($fp) 	#Assign value
	j label_continue_14 	#Jump to label_continue_14
label_then_14:
	li $t1, 3 	#Load Int
	sw $t1, 384($fp) 	#Save loaded value in destination
	lw $t0, 384($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 388($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 388($fp) 	#Obtain value to assign
	sw $t0, 96($fp) 	#Assign value
label_continue_14:
	lw $t7, 96($fp) 	#Obtain value to assign
	sw $t7, 64($fp) 	#Assign value
	j label_continue_13 	#Jump to label_continue_13
label_then_13:
	li $t0, 2 	#Load Int
	sw $t0, 392($fp) 	#Save loaded value in destination
	lw $t2, 392($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 396($fp) 	#Obtain value to assign
	sw $t8, 64($fp) 	#Assign value
label_continue_13:
	lw $t9, 64($fp) 	#Obtain value to assign
	sw $t9, 32($fp) 	#Assign value
	j label_continue_12 	#Jump to label_continue_12
label_then_12:
	li $t7, 1 	#Load Int
	sw $t7, 400($fp) 	#Save loaded value in destination
	lw $t2, 400($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 404($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 404($fp) 	#Obtain value to assign
	sw $t6, 32($fp) 	#Assign value
label_continue_12:
	lw $t8, 32($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	j label_continue_11 	#Jump to label_continue_11
label_then_11:
	li $t8, 0 	#Load Int
	sw $t8, 408($fp) 	#Save loaded value in destination
	lw $t1, 408($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 412($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 412($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
label_continue_11:
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -416 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2c:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 576 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	li $t6, 0 	#Load Int
	sw $t6, 8($fp) 	#Save loaded value in destination
	lw $t8, 8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 12($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 16($fp) 	#Save obtained attribute in destination
	lw $t2, 16($fp) 	#
	lw $t9, 4($fp) 	#
	sub $t1,  $t9, $t2 	#Minus
	sw $t1, 20($fp) 	#Save result of minus
	lw $t7, 20($fp) 	#Mov comparisson value to register
	beqz $t7, label_then_22 	#Compare values in registers and jump to label_then_22 if the second is greater than 0
label_else_22:
	li $t0, 0 	#Load Int
	sw $t0, 28($fp) 	#Save loaded value in destination
	lw $t1, 28($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 32($fp) 	#Obtain value to assign
	sw $t7, 24($fp) 	#Assign value
	j label_continue_22 	#Jump to label_continue_22
label_then_22:
	li $t1, 1 	#Load Int
	sw $t1, 36($fp) 	#Save loaded value in destination
	lw $t2, 36($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 40($fp) 	#Obtain value to assign
	sw $t4, 24($fp) 	#Assign value
label_continue_22:
	lw $t9, 24($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 44($fp) 	#Save obtained attribute in destination
	lw $t5, 44($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_21 	#Compare values in registers and jump to label_then_21 if the second is greater than 0
label_else_21:
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t7) 	#Load attribute in index 0
	sw $t0, 52($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 56($fp) 	#Save loaded value in destination
	lw $t3, 56($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 60($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 64($fp) 	#Save obtained attribute in destination
	lw $t9, 64($fp) 	#
	lw $t5, 52($fp) 	#
	sub $t4,  $t5, $t9 	#Minus
	sw $t4, 68($fp) 	#Save result of minus
	lw $t3, 68($fp) 	#Mov comparisson value to register
	beqz $t3, label_then_24 	#Compare values in registers and jump to label_then_24 if the second is greater than 0
label_else_24:
	li $t0, 0 	#Load Int
	sw $t0, 76($fp) 	#Save loaded value in destination
	lw $t7, 76($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 80($fp) 	#Obtain value to assign
	sw $t4, 72($fp) 	#Assign value
	j label_continue_24 	#Jump to label_continue_24
label_then_24:
	li $t4, 1 	#Load Int
	sw $t4, 84($fp) 	#Save loaded value in destination
	lw $t9, 84($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 88($fp) 	#Obtain value to assign
	sw $t0, 72($fp) 	#Assign value
label_continue_24:
	lw $t5, 72($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 92($fp) 	#Save obtained attribute in destination
	lw $t2, 92($fp) 	#Mov comparisson value to register
	bgtz $t2, label_then_23 	#Compare values in registers and jump to label_then_23 if the second is greater than 0
label_else_23:
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 100($fp) 	#Save obtained attribute in destination
	li $t6, 2 	#Load Int
	sw $t6, 104($fp) 	#Save loaded value in destination
	lw $t1, 104($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 108($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 112($fp) 	#Save obtained attribute in destination
	lw $t8, 112($fp) 	#
	lw $t7, 100($fp) 	#
	sub $t5,  $t7, $t8 	#Minus
	sw $t5, 116($fp) 	#Save result of minus
	lw $t2, 116($fp) 	#Mov comparisson value to register
	beqz $t2, label_then_26 	#Compare values in registers and jump to label_then_26 if the second is greater than 0
label_else_26:
	li $t4, 0 	#Load Int
	sw $t4, 124($fp) 	#Save loaded value in destination
	lw $t0, 124($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 128($fp) 	#Obtain value to assign
	sw $t8, 120($fp) 	#Assign value
	j label_continue_26 	#Jump to label_continue_26
label_then_26:
	li $t9, 1 	#Load Int
	sw $t9, 132($fp) 	#Save loaded value in destination
	lw $t4, 132($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 136($fp) 	#Obtain value to assign
	sw $t7, 120($fp) 	#Assign value
label_continue_26:
	lw $t2, 120($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 140($fp) 	#Save obtained attribute in destination
	lw $t9, 140($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_25 	#Compare values in registers and jump to label_then_25 if the second is greater than 0
label_else_25:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 148($fp) 	#Save obtained attribute in destination
	li $t0, 3 	#Load Int
	sw $t0, 152($fp) 	#Save loaded value in destination
	lw $t4, 152($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 156($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 160($fp) 	#Save obtained attribute in destination
	lw $t8, 160($fp) 	#
	lw $t7, 148($fp) 	#
	sub $t2,  $t7, $t8 	#Minus
	sw $t2, 164($fp) 	#Save result of minus
	lw $t6, 164($fp) 	#Mov comparisson value to register
	beqz $t6, label_then_28 	#Compare values in registers and jump to label_then_28 if the second is greater than 0
label_else_28:
	li $t9, 0 	#Load Int
	sw $t9, 172($fp) 	#Save loaded value in destination
	lw $t9, 172($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 176($fp) 	#Obtain value to assign
	sw $t0, 168($fp) 	#Assign value
	j label_continue_28 	#Jump to label_continue_28
label_then_28:
	li $t5, 1 	#Load Int
	sw $t5, 180($fp) 	#Save loaded value in destination
	lw $t6, 180($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 184($fp) 	#Obtain value to assign
	sw $t5, 168($fp) 	#Assign value
label_continue_28:
	lw $t9, 168($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 188($fp) 	#Save obtained attribute in destination
	lw $t8, 188($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_27 	#Compare values in registers and jump to label_then_27 if the second is greater than 0
label_else_27:
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 196($fp) 	#Save obtained attribute in destination
	li $t9, 4 	#Load Int
	sw $t9, 200($fp) 	#Save loaded value in destination
	lw $t3, 200($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 204($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 208($fp) 	#Save obtained attribute in destination
	lw $t1, 208($fp) 	#
	lw $t8, 196($fp) 	#
	sub $t9,  $t8, $t1 	#Minus
	sw $t9, 212($fp) 	#Save result of minus
	lw $t2, 212($fp) 	#Mov comparisson value to register
	beqz $t2, label_then_30 	#Compare values in registers and jump to label_then_30 if the second is greater than 0
label_else_30:
	li $t4, 0 	#Load Int
	sw $t4, 220($fp) 	#Save loaded value in destination
	lw $t5, 220($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 224($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 224($fp) 	#Obtain value to assign
	sw $t9, 216($fp) 	#Assign value
	j label_continue_30 	#Jump to label_continue_30
label_then_30:
	li $t0, 1 	#Load Int
	sw $t0, 228($fp) 	#Save loaded value in destination
	lw $t0, 228($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 232($fp) 	#Obtain value to assign
	sw $t6, 216($fp) 	#Assign value
label_continue_30:
	lw $t3, 216($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 236($fp) 	#Save obtained attribute in destination
	lw $t9, 236($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_29 	#Compare values in registers and jump to label_then_29 if the second is greater than 0
label_else_29:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 244($fp) 	#Save obtained attribute in destination
	li $t9, 5 	#Load Int
	sw $t9, 248($fp) 	#Save loaded value in destination
	lw $t5, 248($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 252($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 256($fp) 	#Save obtained attribute in destination
	lw $t9, 256($fp) 	#
	lw $t2, 244($fp) 	#
	sub $t0,  $t2, $t9 	#Minus
	sw $t0, 260($fp) 	#Save result of minus
	lw $t7, 260($fp) 	#Mov comparisson value to register
	beqz $t7, label_then_32 	#Compare values in registers and jump to label_then_32 if the second is greater than 0
label_else_32:
	li $t3, 0 	#Load Int
	sw $t3, 268($fp) 	#Save loaded value in destination
	lw $t8, 268($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 272($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 272($fp) 	#Obtain value to assign
	sw $t9, 264($fp) 	#Assign value
	j label_continue_32 	#Jump to label_continue_32
label_then_32:
	li $t1, 1 	#Load Int
	sw $t1, 276($fp) 	#Save loaded value in destination
	lw $t3, 276($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 280($fp) 	#Obtain value to assign
	sw $t2, 264($fp) 	#Assign value
label_continue_32:
	lw $t1, 264($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t1) 	#Load attribute in index 0
	sw $t4, 284($fp) 	#Save obtained attribute in destination
	lw $t3, 284($fp) 	#Mov comparisson value to register
	bgtz $t3, label_then_31 	#Compare values in registers and jump to label_then_31 if the second is greater than 0
label_else_31:
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 292($fp) 	#Save obtained attribute in destination
	li $t3, 6 	#Load Int
	sw $t3, 296($fp) 	#Save loaded value in destination
	lw $t1, 296($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 300($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 304($fp) 	#Save obtained attribute in destination
	lw $t3, 304($fp) 	#
	lw $t9, 292($fp) 	#
	sub $t4,  $t9, $t3 	#Minus
	sw $t4, 308($fp) 	#Save result of minus
	lw $t6, 308($fp) 	#Mov comparisson value to register
	beqz $t6, label_then_34 	#Compare values in registers and jump to label_then_34 if the second is greater than 0
label_else_34:
	li $t3, 0 	#Load Int
	sw $t3, 316($fp) 	#Save loaded value in destination
	lw $t7, 316($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 320($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 320($fp) 	#Obtain value to assign
	sw $t9, 312($fp) 	#Assign value
	j label_continue_34 	#Jump to label_continue_34
label_then_34:
	li $t5, 1 	#Load Int
	sw $t5, 324($fp) 	#Save loaded value in destination
	lw $t0, 324($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 328($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 328($fp) 	#Obtain value to assign
	sw $t6, 312($fp) 	#Assign value
label_continue_34:
	lw $t0, 312($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t0) 	#Load attribute in index 0
	sw $t9, 332($fp) 	#Save obtained attribute in destination
	lw $t7, 332($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_33 	#Compare values in registers and jump to label_then_33 if the second is greater than 0
label_else_33:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 340($fp) 	#Save obtained attribute in destination
	li $t1, 7 	#Load Int
	sw $t1, 344($fp) 	#Save loaded value in destination
	lw $t7, 344($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 348($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t8) 	#Load attribute in index 0
	sw $t5, 352($fp) 	#Save obtained attribute in destination
	lw $t0, 352($fp) 	#
	lw $t6, 340($fp) 	#
	sub $t7,  $t6, $t0 	#Minus
	sw $t7, 356($fp) 	#Save result of minus
	lw $t9, 356($fp) 	#Mov comparisson value to register
	beqz $t9, label_then_36 	#Compare values in registers and jump to label_then_36 if the second is greater than 0
label_else_36:
	li $t8, 0 	#Load Int
	sw $t8, 364($fp) 	#Save loaded value in destination
	lw $t7, 364($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 368($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 368($fp) 	#Obtain value to assign
	sw $t7, 360($fp) 	#Assign value
	j label_continue_36 	#Jump to label_continue_36
label_then_36:
	li $t9, 1 	#Load Int
	sw $t9, 372($fp) 	#Save loaded value in destination
	lw $t6, 372($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 376($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 376($fp) 	#Obtain value to assign
	sw $t5, 360($fp) 	#Assign value
label_continue_36:
	lw $t0, 360($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 380($fp) 	#Save obtained attribute in destination
	lw $t1, 380($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_35 	#Compare values in registers and jump to label_then_35 if the second is greater than 0
label_else_35:
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 388($fp) 	#Save obtained attribute in destination
	li $t4, 8 	#Load Int
	sw $t4, 392($fp) 	#Save loaded value in destination
	lw $t2, 392($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 396($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t5) 	#Load attribute in index 0
	sw $t9, 400($fp) 	#Save obtained attribute in destination
	lw $t4, 400($fp) 	#
	lw $t1, 388($fp) 	#
	sub $t6,  $t1, $t4 	#Minus
	sw $t6, 404($fp) 	#Save result of minus
	lw $t9, 404($fp) 	#Mov comparisson value to register
	beqz $t9, label_then_38 	#Compare values in registers and jump to label_then_38 if the second is greater than 0
label_else_38:
	li $t9, 0 	#Load Int
	sw $t9, 412($fp) 	#Save loaded value in destination
	lw $t1, 412($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 416($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 416($fp) 	#Obtain value to assign
	sw $t3, 408($fp) 	#Assign value
	j label_continue_38 	#Jump to label_continue_38
label_then_38:
	li $t6, 1 	#Load Int
	sw $t6, 420($fp) 	#Save loaded value in destination
	lw $t9, 420($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 424($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 424($fp) 	#Obtain value to assign
	sw $t0, 408($fp) 	#Assign value
label_continue_38:
	lw $t9, 408($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t9) 	#Load attribute in index 0
	sw $t6, 428($fp) 	#Save obtained attribute in destination
	lw $t9, 428($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_37 	#Compare values in registers and jump to label_then_37 if the second is greater than 0
label_else_37:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 436($fp) 	#Save obtained attribute in destination
	li $t1, 9 	#Load Int
	sw $t1, 440($fp) 	#Save loaded value in destination
	lw $t5, 440($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 444($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 444($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t0) 	#Load attribute in index 0
	sw $t1, 448($fp) 	#Save obtained attribute in destination
	lw $t2, 448($fp) 	#
	lw $t7, 436($fp) 	#
	sub $t3,  $t7, $t2 	#Minus
	sw $t3, 452($fp) 	#Save result of minus
	lw $t5, 452($fp) 	#Mov comparisson value to register
	beqz $t5, label_then_40 	#Compare values in registers and jump to label_then_40 if the second is greater than 0
label_else_40:
	li $t7, 0 	#Load Int
	sw $t7, 460($fp) 	#Save loaded value in destination
	lw $t7, 460($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 464($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 464($fp) 	#Obtain value to assign
	sw $t3, 456($fp) 	#Assign value
	j label_continue_40 	#Jump to label_continue_40
label_then_40:
	li $t6, 1 	#Load Int
	sw $t6, 468($fp) 	#Save loaded value in destination
	lw $t3, 468($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 472($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 472($fp) 	#Obtain value to assign
	sw $t1, 456($fp) 	#Assign value
label_continue_40:
	lw $t0, 456($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t0) 	#Load attribute in index 0
	sw $t9, 476($fp) 	#Save obtained attribute in destination
	lw $t9, 476($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_39 	#Compare values in registers and jump to label_then_39 if the second is greater than 0
label_else_39:
	lw $t8, -8($fp) 	#Typeof
	lw $t1, -4($t8) 	#
	sw $t1, 484($fp) 	#Save type value in destination
	lw $t9, -8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 484($fp) 	#get type dir for Dynamic Call
	lw $t7, 0($t0) 	#Get method of index 0
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 480($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	la $t4, data_23_string 	#LOAD
	sw $t4, 488($fp) 	#Save loaded value in destination
	lw $t0, 488($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 492($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 492($fp) 	#Obtain value to assign
	sw $t7, 432($fp) 	#Assign value
	j label_continue_39 	#Jump to label_continue_39
label_then_39:
	la $t7, data_22_string 	#LOAD
	sw $t7, 496($fp) 	#Save loaded value in destination
	lw $t6, 496($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 500($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 500($fp) 	#Obtain value to assign
	sw $t4, 432($fp) 	#Assign value
label_continue_39:
	lw $t7, 432($fp) 	#Obtain value to assign
	sw $t7, 384($fp) 	#Assign value
	j label_continue_37 	#Jump to label_continue_37
label_then_37:
	la $t6, data_21_string 	#LOAD
	sw $t6, 504($fp) 	#Save loaded value in destination
	lw $t3, 504($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 508($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 508($fp) 	#Obtain value to assign
	sw $t3, 384($fp) 	#Assign value
label_continue_37:
	lw $t4, 384($fp) 	#Obtain value to assign
	sw $t4, 336($fp) 	#Assign value
	j label_continue_35 	#Jump to label_continue_35
label_then_35:
	la $t8, data_20_string 	#LOAD
	sw $t8, 512($fp) 	#Save loaded value in destination
	lw $t6, 512($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 516($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 516($fp) 	#Obtain value to assign
	sw $t0, 336($fp) 	#Assign value
label_continue_35:
	lw $t8, 336($fp) 	#Obtain value to assign
	sw $t8, 288($fp) 	#Assign value
	j label_continue_33 	#Jump to label_continue_33
label_then_33:
	la $t5, data_19_string 	#LOAD
	sw $t5, 520($fp) 	#Save loaded value in destination
	lw $t7, 520($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 524($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 524($fp) 	#Obtain value to assign
	sw $t7, 288($fp) 	#Assign value
label_continue_33:
	lw $t7, 288($fp) 	#Obtain value to assign
	sw $t7, 240($fp) 	#Assign value
	j label_continue_31 	#Jump to label_continue_31
label_then_31:
	la $t6, data_18_string 	#LOAD
	sw $t6, 528($fp) 	#Save loaded value in destination
	lw $t9, 528($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 532($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 532($fp) 	#Obtain value to assign
	sw $t7, 240($fp) 	#Assign value
label_continue_31:
	lw $t7, 240($fp) 	#Obtain value to assign
	sw $t7, 192($fp) 	#Assign value
	j label_continue_29 	#Jump to label_continue_29
label_then_29:
	la $t8, data_17_string 	#LOAD
	sw $t8, 536($fp) 	#Save loaded value in destination
	lw $t9, 536($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 540($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 540($fp) 	#Obtain value to assign
	sw $t8, 192($fp) 	#Assign value
label_continue_29:
	lw $t3, 192($fp) 	#Obtain value to assign
	sw $t3, 144($fp) 	#Assign value
	j label_continue_27 	#Jump to label_continue_27
label_then_27:
	la $t2, data_16_string 	#LOAD
	sw $t2, 544($fp) 	#Save loaded value in destination
	lw $t3, 544($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 548($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 548($fp) 	#Obtain value to assign
	sw $t6, 144($fp) 	#Assign value
label_continue_27:
	lw $t3, 144($fp) 	#Obtain value to assign
	sw $t3, 96($fp) 	#Assign value
	j label_continue_25 	#Jump to label_continue_25
label_then_25:
	la $t8, data_15_string 	#LOAD
	sw $t8, 552($fp) 	#Save loaded value in destination
	lw $t7, 552($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 556($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 556($fp) 	#Obtain value to assign
	sw $t8, 96($fp) 	#Assign value
label_continue_25:
	lw $t2, 96($fp) 	#Obtain value to assign
	sw $t2, 48($fp) 	#Assign value
	j label_continue_23 	#Jump to label_continue_23
label_then_23:
	la $t5, data_14_string 	#LOAD
	sw $t5, 560($fp) 	#Save loaded value in destination
	lw $t6, 560($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 564($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 564($fp) 	#Obtain value to assign
	sw $t7, 48($fp) 	#Assign value
label_continue_23:
	lw $t5, 48($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	j label_continue_21 	#Jump to label_continue_21
label_then_21:
	la $t8, data_13_string 	#LOAD
	sw $t8, 568($fp) 	#Save loaded value in destination
	lw $t2, 568($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 572($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 572($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
label_continue_21:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -576 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_a2i:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 312 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -4($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 8($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 8($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t6) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 12($fp) 	#Save obtained attribute in destination
	li $t5, 0 	#Load Int
	sw $t5, 16($fp) 	#Save loaded value in destination
	lw $t2, 16($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 20($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 24($fp) 	#Save obtained attribute in destination
	lw $t9, 24($fp) 	#
	lw $t5, 12($fp) 	#
	sub $t4,  $t5, $t9 	#Minus
	sw $t4, 28($fp) 	#Save result of minus
	lw $t8, 28($fp) 	#Mov comparisson value to register
	beqz $t8, label_then_42 	#Compare values in registers and jump to label_then_42 if the second is greater than 0
label_else_42:
	li $t6, 0 	#Load Int
	sw $t6, 36($fp) 	#Save loaded value in destination
	lw $t2, 36($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 40($fp) 	#Obtain value to assign
	sw $t0, 32($fp) 	#Assign value
	j label_continue_42 	#Jump to label_continue_42
label_then_42:
	li $t3, 1 	#Load Int
	sw $t3, 44($fp) 	#Save loaded value in destination
	lw $t0, 44($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 48($fp) 	#Obtain value to assign
	sw $t0, 32($fp) 	#Assign value
label_continue_42:
	lw $t9, 32($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 52($fp) 	#Save obtained attribute in destination
	lw $t2, 52($fp) 	#Mov comparisson value to register
	bgtz $t2, label_then_41 	#Compare values in registers and jump to label_then_41 if the second is greater than 0
label_else_41:
	li $t5, 0 	#Load Int
	sw $t5, 64($fp) 	#Save loaded value in destination
	lw $t1, 64($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 1 	#Load Int
	sw $t1, 72($fp) 	#Save loaded value in destination
	lw $t6, 72($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t7, -4($t9) 	#
	sw $t7, 80($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 68($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 76($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 80($fp) 	#get type dir for Dynamic Call
	lw $t1, 20($t5) 	#Get method of index 5
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 60($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t9, 60($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 84($fp) 	#Save obtained attribute in destination
	la $t6, data_24_string 	#LOAD
	sw $t6, 88($fp) 	#Save loaded value in destination
	lw $t9, 88($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 92($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 96($fp) 	#Save obtained attribute in destination
	lw $t9, 84($fp) 	#
	lw $t0, 96($fp) 	#
loop17:
	lb $t7, 0($t9) 	#
	lb $t2, 0($t0) 	#
	beqz $t7, exit57 	#
	beqz $t2, exit58 	#
	addi $t9,  $t9, 1 	#
	addi $t0,  $t0, 1 	#
	beq $t7, $t2, loop17 	#
	j exit60 	#
exit57:
	beqz $t2, exit59 	#
	j exit60 	#
exit58:
	beqz $t7, exit59 	#
	j exit60 	#
exit59:
	li $t8, 1 	#
	j exit61 	#
exit60:
	li $t8, 0 	#
	j exit61 	#
exit61:
	sw $t8, 100($fp) 	#
	lw $t2, 100($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 104($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 108($fp) 	#Save obtained attribute in destination
	lw $t4, 108($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_43 	#Compare values in registers and jump to label_then_43 if the second is greater than 0
label_else_43:
	li $t2, 0 	#Load Int
	sw $t2, 120($fp) 	#Save loaded value in destination
	lw $t1, 120($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 1 	#Load Int
	sw $t8, 128($fp) 	#Save loaded value in destination
	lw $t2, 128($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t0, -4($t1) 	#
	sw $t0, 136($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 124($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 132($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 136($fp) 	#get type dir for Dynamic Call
	lw $t6, 20($t5) 	#Get method of index 5
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 116($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t0, 116($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t0) 	#Load attribute in index 0
	sw $t9, 140($fp) 	#Save obtained attribute in destination
	la $t0, data_25_string 	#LOAD
	sw $t0, 144($fp) 	#Save loaded value in destination
	lw $t1, 144($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 148($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 152($fp) 	#Save obtained attribute in destination
	lw $t2, 140($fp) 	#
	lw $t3, 152($fp) 	#
loop18:
	lb $t1, 0($t2) 	#
	lb $t6, 0($t3) 	#
	beqz $t1, exit62 	#
	beqz $t6, exit63 	#
	addi $t2,  $t2, 1 	#
	addi $t3,  $t3, 1 	#
	beq $t1, $t6, loop18 	#
	j exit65 	#
exit62:
	beqz $t6, exit64 	#
	j exit65 	#
exit63:
	beqz $t1, exit64 	#
	j exit65 	#
exit64:
	li $t4, 1 	#
	j exit66 	#
exit65:
	li $t4, 0 	#
	j exit66 	#
exit66:
	sw $t4, 156($fp) 	#
	lw $t1, 156($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 160($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 164($fp) 	#Save obtained attribute in destination
	lw $t9, 164($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_44 	#Compare values in registers and jump to label_then_44 if the second is greater than 0
label_else_44:
	lw $t0, -8($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 172($fp) 	#Save type value in destination
	lw $t7, -8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 172($fp) 	#get type dir for Dynamic Call
	lw $t3, 24($t4) 	#Get method of index 6
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 168($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 168($fp) 	#Obtain value to assign
	sw $t8, 112($fp) 	#Assign value
	j label_continue_44 	#Jump to label_continue_44
label_then_44:
	li $t0, 1 	#Load Int
	sw $t0, 184($fp) 	#Save loaded value in destination
	lw $t8, 184($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 196($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 196($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t6) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 192($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 192($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 200($fp) 	#Save obtained attribute in destination
	li $t3, 1 	#Load Int
	sw $t3, 204($fp) 	#Save loaded value in destination
	lw $t7, 204($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 208($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 212($fp) 	#Save obtained attribute in destination
	lw $t0, 212($fp) 	#
	lw $t9, 200($fp) 	#
	sub $t8,  $t9, $t0 	#Minus
	sw $t8, 216($fp) 	#Save result of minus
	lw $t7, 216($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 220($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t1, -4($t3) 	#
	sw $t1, 224($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 188($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 220($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 224($fp) 	#get type dir for Dynamic Call
	lw $t3, 20($t2) 	#Get method of index 5
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 180($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t5, -8($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 228($fp) 	#Save type value in destination
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 180($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 228($fp) 	#get type dir for Dynamic Call
	lw $t6, 24($t3) 	#Get method of index 6
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 176($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 176($fp) 	#Obtain value to assign
	sw $t1, 112($fp) 	#Assign value
label_continue_44:
	lw $t8, 112($fp) 	#Obtain value to assign
	sw $t8, 56($fp) 	#Assign value
	j label_continue_43 	#Jump to label_continue_43
label_then_43:
	li $t6, 1 	#Load Int
	sw $t6, 248($fp) 	#Save loaded value in destination
	lw $t6, 248($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t6, -4($t5) 	#
	sw $t6, 260($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 260($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t3) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 256($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 256($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t9) 	#Load attribute in index 0
	sw $t8, 264($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 268($fp) 	#Save loaded value in destination
	lw $t9, 268($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 272($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 272($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 276($fp) 	#Save obtained attribute in destination
	lw $t7, 276($fp) 	#
	lw $t0, 264($fp) 	#
	sub $t4,  $t0, $t7 	#Minus
	sw $t4, 280($fp) 	#Save result of minus
	lw $t0, 280($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 284($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 288($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 252($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 284($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 288($fp) 	#get type dir for Dynamic Call
	lw $t2, 20($t6) 	#Get method of index 5
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 244($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, -8($fp) 	#Typeof
	lw $t7, -4($t4) 	#
	sw $t7, 292($fp) 	#Save type value in destination
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 244($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 292($fp) 	#get type dir for Dynamic Call
	lw $t8, 24($t3) 	#Get method of index 6
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 240($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 240($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 236($fp) 	#Save obtained attribute in destination
	li $t9, 1 	#Load Int
	sw $t9, 296($fp) 	#Save loaded value in destination
	lw $t3, 236($fp) 	#
	lw $t4, 296($fp) 	#
	sub $t0,  $t4, $t3 	#Minus
	sw $t0, 232($fp) 	#Save result of minus
	lw $t5, 232($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 300($fp) 	#Obtain value to assign
	sw $t0, 56($fp) 	#Assign value
label_continue_43:
	lw $t1, 56($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	j label_continue_41 	#Jump to label_continue_41
label_then_41:
	li $t8, 0 	#Load Int
	sw $t8, 304($fp) 	#Save loaded value in destination
	lw $t3, 304($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 308($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
label_continue_41:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -312 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_a2i_aux:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 164 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t0, 0 	#Load Int
	sw $t0, 4($fp) 	#Save loaded value in destination
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 8($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	lw $t6, -4($fp) 	#Typeof
	lw $t4, -4($t6) 	#
	sw $t4, 20($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 20($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t9) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 16($fp) 	#Obtain value to assign
	sw $t7, 12($fp) 	#Assign value
	li $t4, 0 	#Load Int
	sw $t4, 28($fp) 	#Save loaded value in destination
	lw $t0, 28($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 32($fp) 	#Obtain value to assign
	sw $t8, 24($fp) 	#Assign value
label_while_label_1:
	lw $t5, 24($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 36($fp) 	#Save obtained attribute in destination
	lw $t6, 12($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 40($fp) 	#Save obtained attribute in destination
	lw $t6, 40($fp) 	#
	lw $t8, 36($fp) 	#
	sub $t2,  $t8, $t6 	#Minus
	sw $t2, 44($fp) 	#Save result of minus
	lw $t2, 44($fp) 	#Mov comparisson value to register
	bltz $t2, label_then_45 	#Compare values in registers and jump to label_then_45 if the second is greater than 0
label_else_45:
	li $t8, 0 	#Load Int
	sw $t8, 52($fp) 	#Save loaded value in destination
	lw $t3, 52($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 56($fp) 	#Obtain value to assign
	sw $t9, 48($fp) 	#Assign value
	j label_continue_45 	#Jump to label_continue_45
label_then_45:
	li $t1, 1 	#Load Int
	sw $t1, 60($fp) 	#Save loaded value in destination
	lw $t3, 60($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 64($fp) 	#Obtain value to assign
	sw $t1, 48($fp) 	#Assign value
label_continue_45:
	lw $t8, 48($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t8) 	#Load attribute in index 0
	sw $t1, 68($fp) 	#Save obtained attribute in destination
	lw $t5, 68($fp) 	#Mov comparisson value to register
	bgtz $t5, label_loop_label_1 	#Compare values in registers and jump to label_loop_label_1 if the second is greater than 0
	j label_pool_label_1 	#Jump to label_pool_label_1
label_loop_label_1:
	lw $t1, 0($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 72($fp) 	#Save obtained attribute in destination
	li $t7, 10 	#Load Int
	sw $t7, 76($fp) 	#Save loaded value in destination
	lw $t9, 76($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 80($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 84($fp) 	#Save obtained attribute in destination
	lw $t4, 84($fp) 	#
	lw $t2, 72($fp) 	#
	mult $t4, $t2 	#Mult
	mflo $t4 	#
	sw $t4, 88($fp) 	#Save result of Mult
	lw $t1, 88($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 92($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t5) 	#Load attribute in index 0
	sw $t8, 96($fp) 	#Save obtained attribute in destination
	li $t0, 1 	#Load Int
	sw $t0, 108($fp) 	#Save loaded value in destination
	lw $t7, 108($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t2, -4($t0) 	#
	sw $t2, 116($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 24($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 112($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 116($fp) 	#get type dir for Dynamic Call
	lw $t8, 20($t7) 	#Get method of index 5
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, -8($fp) 	#Typeof
	lw $t9, -4($t4) 	#
	sw $t9, 120($fp) 	#Save type value in destination
	lw $t6, -8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 104($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 120($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t0) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 100($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 100($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 124($fp) 	#Save obtained attribute in destination
	lw $t3, 124($fp) 	#
	lw $t8, 96($fp) 	#
	add $t2,  $t3, $t8 	#Plus
	sw $t2, 128($fp) 	#Save result of plus
	lw $t5, 128($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 132($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	lw $t7, 24($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 136($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 140($fp) 	#Save loaded value in destination
	lw $t6, 140($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 144($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 148($fp) 	#Save obtained attribute in destination
	lw $t1, 148($fp) 	#
	lw $t7, 136($fp) 	#
	add $t6,  $t1, $t7 	#Plus
	sw $t6, 152($fp) 	#Save result of plus
	lw $t5, 152($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 156($fp) 	#Obtain value to assign
	sw $t4, 24($fp) 	#Assign value
	j label_while_label_1 	#Jump to label_while_label_1
label_pool_label_1:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 160($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -164 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2a:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 176 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	li $t0, 0 	#Load Int
	sw $t0, 8($fp) 	#Save loaded value in destination
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 12($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 16($fp) 	#Save obtained attribute in destination
	lw $t8, 16($fp) 	#
	lw $t3, 4($fp) 	#
	sub $t6,  $t3, $t8 	#Minus
	sw $t6, 20($fp) 	#Save result of minus
	lw $t4, 20($fp) 	#Mov comparisson value to register
	beqz $t4, label_then_47 	#Compare values in registers and jump to label_then_47 if the second is greater than 0
label_else_47:
	li $t0, 0 	#Load Int
	sw $t0, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 32($fp) 	#Obtain value to assign
	sw $t6, 24($fp) 	#Assign value
	j label_continue_47 	#Jump to label_continue_47
label_then_47:
	li $t5, 1 	#Load Int
	sw $t5, 36($fp) 	#Save loaded value in destination
	lw $t1, 36($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 40($fp) 	#Obtain value to assign
	sw $t8, 24($fp) 	#Assign value
label_continue_47:
	lw $t1, 24($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 44($fp) 	#Save obtained attribute in destination
	lw $t7, 44($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_46 	#Compare values in registers and jump to label_then_46 if the second is greater than 0
label_else_46:
	li $t5, 0 	#Load Int
	sw $t5, 52($fp) 	#Save loaded value in destination
	lw $t2, 52($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 56($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t8) 	#Load attribute in index 0
	sw $t5, 60($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 64($fp) 	#Save obtained attribute in destination
	lw $t3, 64($fp) 	#
	lw $t0, 60($fp) 	#
	sub $t5,  $t0, $t3 	#Minus
	sw $t5, 68($fp) 	#Save result of minus
	lw $t9, 68($fp) 	#Mov comparisson value to register
	bltz $t9, label_then_49 	#Compare values in registers and jump to label_then_49 if the second is greater than 0
label_else_49:
	li $t7, 0 	#Load Int
	sw $t7, 76($fp) 	#Save loaded value in destination
	lw $t6, 76($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 80($fp) 	#Obtain value to assign
	sw $t3, 72($fp) 	#Assign value
	j label_continue_49 	#Jump to label_continue_49
label_then_49:
	li $t0, 1 	#Load Int
	sw $t0, 84($fp) 	#Save loaded value in destination
	lw $t7, 84($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 88($fp) 	#Obtain value to assign
	sw $t9, 72($fp) 	#Assign value
label_continue_49:
	lw $t9, 72($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 92($fp) 	#Save obtained attribute in destination
	lw $t0, 92($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_48 	#Compare values in registers and jump to label_then_48 if the second is greater than 0
label_else_48:
	la $t6, data_24_string 	#LOAD
	sw $t6, 100($fp) 	#Save loaded value in destination
	lw $t5, 100($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 112($fp) 	#Save obtained attribute in destination
	li $t7, 1 	#Load Int
	sw $t7, 124($fp) 	#Save loaded value in destination
	lw $t5, 124($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 128($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 120($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 132($fp) 	#Save loaded value in destination
	lw $t0, 120($fp) 	#
	lw $t6, 132($fp) 	#
	sub $t4,  $t6, $t0 	#Minus
	sw $t4, 116($fp) 	#Save result of minus
	lw $t0, 116($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 136($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t8) 	#Load attribute in index 0
	sw $t0, 140($fp) 	#Save obtained attribute in destination
	lw $t4, 140($fp) 	#
	lw $t6, 112($fp) 	#
	mult $t4, $t6 	#Mult
	mflo $t4 	#
	sw $t4, 144($fp) 	#Save result of Mult
	lw $t4, 144($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -8($fp) 	#Typeof
	lw $t6, -4($t8) 	#
	sw $t6, 152($fp) 	#Save type value in destination
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 148($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 152($fp) 	#get type dir for Dynamic Call
	lw $t9, 32($t4) 	#Get method of index 8
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 104($fp) 	#Typeof
	lw $t9, -4($t1) 	#
	sw $t9, 156($fp) 	#Save type value in destination
	lw $t4, 104($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 108($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 156($fp) 	#get type dir for Dynamic Call
	lw $t8, 16($t6) 	#Get method of index 4
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 96($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 96($fp) 	#Obtain value to assign
	sw $t8, 48($fp) 	#Assign value
	j label_continue_48 	#Jump to label_continue_48
label_then_48:
	lw $t1, -8($fp) 	#Typeof
	lw $t2, -4($t1) 	#
	sw $t2, 164($fp) 	#Save type value in destination
	lw $t6, -8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 164($fp) 	#get type dir for Dynamic Call
	lw $t0, 32($t3) 	#Get method of index 8
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 160($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 160($fp) 	#Obtain value to assign
	sw $t1, 48($fp) 	#Assign value
label_continue_48:
	lw $t2, 48($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_46 	#Jump to label_continue_46
label_then_46:
	la $t1, data_13_string 	#LOAD
	sw $t1, 168($fp) 	#Save loaded value in destination
	lw $t9, 168($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 172($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
label_continue_46:
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -176 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2a_aux:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 148 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	li $t0, 0 	#Load Int
	sw $t0, 8($fp) 	#Save loaded value in destination
	lw $t9, 8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 12($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 16($fp) 	#Save obtained attribute in destination
	lw $t2, 16($fp) 	#
	lw $t9, 4($fp) 	#
	sub $t1,  $t9, $t2 	#Minus
	sw $t1, 20($fp) 	#Save result of minus
	lw $t5, 20($fp) 	#Mov comparisson value to register
	beqz $t5, label_then_51 	#Compare values in registers and jump to label_then_51 if the second is greater than 0
label_else_51:
	li $t4, 0 	#Load Int
	sw $t4, 28($fp) 	#Save loaded value in destination
	lw $t1, 28($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 32($fp) 	#Obtain value to assign
	sw $t3, 24($fp) 	#Assign value
	j label_continue_51 	#Jump to label_continue_51
label_then_51:
	li $t1, 1 	#Load Int
	sw $t1, 36($fp) 	#Save loaded value in destination
	lw $t0, 36($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 40($fp) 	#Obtain value to assign
	sw $t7, 24($fp) 	#Assign value
label_continue_51:
	lw $t4, 24($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 44($fp) 	#Save obtained attribute in destination
	lw $t7, 44($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_50 	#Compare values in registers and jump to label_then_50 if the second is greater than 0
label_else_50:
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 52($fp) 	#Save obtained attribute in destination
	li $t5, 10 	#Load Int
	sw $t5, 56($fp) 	#Save loaded value in destination
	lw $t1, 56($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 60($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 64($fp) 	#Save obtained attribute in destination
	lw $t0, 64($fp) 	#
	lw $t2, 52($fp) 	#
	div $t2, $t0 	#Div
	mflo $t0 	#
	sw $t0, 68($fp) 	#Save result of Div
	lw $t0, 68($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 72($fp) 	#Obtain value to assign
	sw $t2, 48($fp) 	#Assign value
	lw $t2, -8($fp) 	#Typeof
	lw $t1, -4($t2) 	#
	sw $t1, 84($fp) 	#Save type value in destination
	lw $t7, -8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 48($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 84($fp) 	#get type dir for Dynamic Call
	lw $t3, 32($t9) 	#Get method of index 8
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 80($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 92($fp) 	#Save obtained attribute in destination
	lw $t7, 48($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 96($fp) 	#Save obtained attribute in destination
	li $t2, 10 	#Load Int
	sw $t2, 100($fp) 	#Save loaded value in destination
	lw $t8, 100($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 104($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 108($fp) 	#Save obtained attribute in destination
	lw $t8, 108($fp) 	#
	lw $t4, 96($fp) 	#
	mult $t8, $t4 	#Mult
	mflo $t8 	#
	sw $t8, 112($fp) 	#Save result of Mult
	lw $t8, 112($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 116($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 120($fp) 	#Save obtained attribute in destination
	lw $t1, 120($fp) 	#
	lw $t2, 92($fp) 	#
	sub $t0,  $t2, $t1 	#Minus
	sw $t0, 124($fp) 	#Save result of minus
	lw $t9, 124($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -8($fp) 	#Typeof
	lw $t1, -4($t6) 	#
	sw $t1, 132($fp) 	#Save type value in destination
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 128($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 132($fp) 	#get type dir for Dynamic Call
	lw $t9, 16($t7) 	#Get method of index 4
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 88($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 80($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 136($fp) 	#Save type value in destination
	lw $t5, 80($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 88($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 136($fp) 	#get type dir for Dynamic Call
	lw $t2, 16($t0) 	#Get method of index 4
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 76($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_50 	#Jump to label_continue_50
label_then_50:
	la $t5, data_23_string 	#LOAD
	sw $t5, 140($fp) 	#Save loaded value in destination
	lw $t5, 140($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 144($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
label_continue_50:
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -148 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t5, Main 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_char___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t4) 	#Save value in attribute of index 0
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_avar___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 8($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 4($t4) 	#Save value in attribute of index 1
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_a_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 12($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 8($t9) 	#Save value in attribute of index 2
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_flag___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 16($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 12($t5) 	#Save value in attribute of index 3
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_char___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_23_string 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_avar___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_a_var___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_flag___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t2, 1 	#Load Int
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_menu:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 364 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_26_string 	#LOAD
	sw $t8, 4($fp) 	#Save loaded value in destination
	lw $t2, 4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t0, -4($t6) 	#
	sw $t0, 12($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 12($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t7) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 4($t4) 	#Load attribute in index 1
	sw $t8, 20($fp) 	#Save obtained attribute in destination
	lw $t0, -4($fp) 	#Typeof
	lw $t3, -4($t0) 	#
	sw $t3, 24($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 20($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 24($fp) 	#get type dir for Dynamic Call
	lw $t7, 48($t0) 	#Get method of index 12
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_27_string 	#LOAD
	sw $t6, 32($fp) 	#Save loaded value in destination
	lw $t5, 32($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t6, -4($t5) 	#
	sw $t6, 40($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 36($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 40($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t9) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 28($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_28_string 	#LOAD
	sw $t2, 48($fp) 	#Save loaded value in destination
	lw $t6, 48($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 56($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 52($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 56($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t3) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Typeof
	lw $t9, -4($t2) 	#
	sw $t9, 64($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 64($fp) 	#get type dir for Dynamic Call
	lw $t3, 48($t1) 	#Get method of index 12
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 60($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_29_string 	#LOAD
	sw $t1, 72($fp) 	#Save loaded value in destination
	lw $t4, 72($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t3, -4($t6) 	#
	sw $t3, 80($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 76($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 80($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t4) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 68($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_30_string 	#LOAD
	sw $t6, 88($fp) 	#Save loaded value in destination
	lw $t2, 88($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t7, -4($t6) 	#
	sw $t7, 96($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 92($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 96($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t6) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 84($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 104($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 20($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 104($fp) 	#get type dir for Dynamic Call
	lw $t4, 48($t2) 	#Get method of index 12
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 100($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_31_string 	#LOAD
	sw $t2, 112($fp) 	#Save loaded value in destination
	lw $t3, 112($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t2, -4($t1) 	#
	sw $t2, 120($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 116($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 120($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t2) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_32_string 	#LOAD
	sw $t8, 128($fp) 	#Save loaded value in destination
	lw $t9, 128($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 136($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 132($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 136($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t3) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 124($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, -4($fp) 	#Typeof
	lw $t8, -4($t7) 	#
	sw $t8, 144($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 20($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 144($fp) 	#get type dir for Dynamic Call
	lw $t1, 48($t7) 	#Get method of index 12
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 140($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t9, data_33_string 	#LOAD
	sw $t9, 152($fp) 	#Save loaded value in destination
	lw $t2, 152($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t9, -4($t1) 	#
	sw $t9, 160($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 156($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 160($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t6) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 148($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_34_string 	#LOAD
	sw $t6, 168($fp) 	#Save loaded value in destination
	lw $t2, 168($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t1, -4($t0) 	#
	sw $t1, 176($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 172($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 176($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t0) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 164($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 184($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 20($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 184($fp) 	#get type dir for Dynamic Call
	lw $t0, 48($t2) 	#Get method of index 12
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 180($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_35_string 	#LOAD
	sw $t1, 192($fp) 	#Save loaded value in destination
	lw $t6, 192($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t5, -4($t9) 	#
	sw $t5, 200($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 196($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 200($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t8) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 188($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_36_string 	#LOAD
	sw $t1, 208($fp) 	#Save loaded value in destination
	lw $t9, 208($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 216($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 212($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 216($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t6) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 204($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, -4($fp) 	#Typeof
	lw $t0, -4($t9) 	#
	sw $t0, 224($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 20($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 224($fp) 	#get type dir for Dynamic Call
	lw $t2, 48($t5) 	#Get method of index 12
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 220($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_37_string 	#LOAD
	sw $t6, 232($fp) 	#Save loaded value in destination
	lw $t5, 232($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t5, -4($t1) 	#
	sw $t5, 240($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 236($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 240($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t2) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 228($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t7, data_38_string 	#LOAD
	sw $t7, 248($fp) 	#Save loaded value in destination
	lw $t9, 248($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 256($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 252($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 256($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t5) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 244($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, -4($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 264($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 20($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 264($fp) 	#get type dir for Dynamic Call
	lw $t6, 48($t8) 	#Get method of index 12
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 260($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_39_string 	#LOAD
	sw $t2, 272($fp) 	#Save loaded value in destination
	lw $t3, 272($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t7, -4($t9) 	#
	sw $t7, 280($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 276($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 280($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t4) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 268($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_40_string 	#LOAD
	sw $t8, 288($fp) 	#Save loaded value in destination
	lw $t7, 288($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 292($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t2, -4($t4) 	#
	sw $t2, 296($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 292($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 296($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t6) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 284($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, -4($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 304($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 20($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 304($fp) 	#get type dir for Dynamic Call
	lw $t2, 48($t4) 	#Get method of index 12
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 300($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_41_string 	#LOAD
	sw $t6, 312($fp) 	#Save loaded value in destination
	lw $t7, 312($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t6, -4($t0) 	#
	sw $t6, 320($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 316($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 320($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t4) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 308($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_42_string 	#LOAD
	sw $t5, 328($fp) 	#Save loaded value in destination
	lw $t2, 328($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t2, -4($t9) 	#
	sw $t2, 336($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 332($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 336($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t1) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 324($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_43_string 	#LOAD
	sw $t8, 344($fp) 	#Save loaded value in destination
	lw $t3, 344($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t5, -4($t4) 	#
	sw $t5, 352($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 348($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 352($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t8) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 340($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Typeof
	lw $t8, -4($t2) 	#
	sw $t8, 360($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 360($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t1) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 356($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 356($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -364 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_prompt:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_44_string 	#LOAD
	sw $t8, 4($fp) 	#Save loaded value in destination
	lw $t7, 4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t7, -4($t2) 	#
	sw $t7, 12($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 12($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t8) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t0, data_45_string 	#LOAD
	sw $t0, 20($fp) 	#Save loaded value in destination
	lw $t1, 20($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t0, -4($t3) 	#
	sw $t0, 28($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 24($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 28($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t4) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 36($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 36($fp) 	#get type dir for Dynamic Call
	lw $t7, 20($t3) 	#Get method of index 5
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_get_int:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 28 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
	lw $t0, -4($fp) 	#Typeof
	lw $t1, -4($t0) 	#
	sw $t1, 16($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 16($fp) 	#get type dir for Dynamic Call
	lw $t0, 32($t6) 	#Get method of index 8
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 12($fp) 	#Obtain value to assign
	sw $t5, 8($fp) 	#Assign value
	lw $t0, 0($fp) 	#Typeof
	lw $t2, -4($t0) 	#
	sw $t2, 24($fp) 	#Save type value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 24($fp) 	#get type dir for Dynamic Call
	lw $t6, 20($t2) 	#Get method of index 5
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 20($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -28 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_is_even:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 220 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -4($fp) 	#Obtain value to assign
	sw $t4, 0($fp) 	#Assign value
	lw $t3, 0($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 8($fp) 	#Save obtained attribute in destination
	li $t0, 0 	#Load Int
	sw $t0, 12($fp) 	#Save loaded value in destination
	lw $t6, 12($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 16($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 20($fp) 	#Save obtained attribute in destination
	lw $t7, 20($fp) 	#
	lw $t5, 8($fp) 	#
	sub $t9,  $t5, $t7 	#Minus
	sw $t9, 24($fp) 	#Save result of minus
	lw $t5, 24($fp) 	#Mov comparisson value to register
	bltz $t5, label_then_53 	#Compare values in registers and jump to label_then_53 if the second is greater than 0
label_else_53:
	li $t5, 0 	#Load Int
	sw $t5, 32($fp) 	#Save loaded value in destination
	lw $t9, 32($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 36($fp) 	#Obtain value to assign
	sw $t6, 28($fp) 	#Assign value
	j label_continue_53 	#Jump to label_continue_53
label_then_53:
	li $t2, 1 	#Load Int
	sw $t2, 40($fp) 	#Save loaded value in destination
	lw $t1, 40($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 44($fp) 	#Obtain value to assign
	sw $t2, 28($fp) 	#Assign value
label_continue_53:
	lw $t6, 28($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 48($fp) 	#Save obtained attribute in destination
	lw $t3, 48($fp) 	#Mov comparisson value to register
	bgtz $t3, label_then_52 	#Compare values in registers and jump to label_then_52 if the second is greater than 0
label_else_52:
	li $t1, 0 	#Load Int
	sw $t1, 56($fp) 	#Save loaded value in destination
	lw $t8, 56($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 60($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 64($fp) 	#Save obtained attribute in destination
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t8) 	#Load attribute in index 0
	sw $t5, 68($fp) 	#Save obtained attribute in destination
	lw $t8, 68($fp) 	#
	lw $t7, 64($fp) 	#
	sub $t3,  $t7, $t8 	#Minus
	sw $t3, 72($fp) 	#Save result of minus
	lw $t8, 72($fp) 	#Mov comparisson value to register
	beqz $t8, label_then_55 	#Compare values in registers and jump to label_then_55 if the second is greater than 0
label_else_55:
	li $t3, 0 	#Load Int
	sw $t3, 80($fp) 	#Save loaded value in destination
	lw $t8, 80($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 84($fp) 	#Obtain value to assign
	sw $t3, 76($fp) 	#Assign value
	j label_continue_55 	#Jump to label_continue_55
label_then_55:
	li $t4, 1 	#Load Int
	sw $t4, 88($fp) 	#Save loaded value in destination
	lw $t9, 88($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 92($fp) 	#Obtain value to assign
	sw $t6, 76($fp) 	#Assign value
label_continue_55:
	lw $t7, 76($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 96($fp) 	#Save obtained attribute in destination
	lw $t2, 96($fp) 	#Mov comparisson value to register
	bgtz $t2, label_then_54 	#Compare values in registers and jump to label_then_54 if the second is greater than 0
label_else_54:
	li $t4, 1 	#Load Int
	sw $t4, 104($fp) 	#Save loaded value in destination
	lw $t0, 104($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 108($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t0) 	#Load attribute in index 0
	sw $t6, 112($fp) 	#Save obtained attribute in destination
	lw $t6, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t6) 	#Load attribute in index 0
	sw $t0, 116($fp) 	#Save obtained attribute in destination
	lw $t8, 116($fp) 	#
	lw $t9, 112($fp) 	#
	sub $t7,  $t9, $t8 	#Minus
	sw $t7, 120($fp) 	#Save result of minus
	lw $t0, 120($fp) 	#Mov comparisson value to register
	beqz $t0, label_then_57 	#Compare values in registers and jump to label_then_57 if the second is greater than 0
label_else_57:
	li $t4, 0 	#Load Int
	sw $t4, 128($fp) 	#Save loaded value in destination
	lw $t6, 128($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 132($fp) 	#Obtain value to assign
	sw $t1, 124($fp) 	#Assign value
	j label_continue_57 	#Jump to label_continue_57
label_then_57:
	li $t4, 1 	#Load Int
	sw $t4, 136($fp) 	#Save loaded value in destination
	lw $t8, 136($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 140($fp) 	#Obtain value to assign
	sw $t0, 124($fp) 	#Assign value
label_continue_57:
	lw $t9, 124($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 144($fp) 	#Save obtained attribute in destination
	lw $t5, 144($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_56 	#Compare values in registers and jump to label_then_56 if the second is greater than 0
label_else_56:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t4) 	#Load attribute in index 0
	sw $t7, 152($fp) 	#Save obtained attribute in destination
	li $t3, 2 	#Load Int
	sw $t3, 156($fp) 	#Save loaded value in destination
	lw $t4, 156($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 160($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 164($fp) 	#Save obtained attribute in destination
	lw $t9, 164($fp) 	#
	lw $t7, 152($fp) 	#
	sub $t1,  $t7, $t9 	#Minus
	sw $t1, 168($fp) 	#Save result of minus
	lw $t2, 168($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -8($fp) 	#Typeof
	lw $t0, -4($t3) 	#
	sw $t0, 176($fp) 	#Save type value in destination
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 172($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 176($fp) 	#get type dir for Dynamic Call
	lw $t4, 40($t2) 	#Get method of index 10
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 148($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 148($fp) 	#Obtain value to assign
	sw $t3, 100($fp) 	#Assign value
	j label_continue_56 	#Jump to label_continue_56
label_then_56:
	li $t1, 0 	#Load Int
	sw $t1, 180($fp) 	#Save loaded value in destination
	lw $t4, 180($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 184($fp) 	#Obtain value to assign
	sw $t1, 100($fp) 	#Assign value
label_continue_56:
	lw $t7, 100($fp) 	#Obtain value to assign
	sw $t7, 52($fp) 	#Assign value
	j label_continue_54 	#Jump to label_continue_54
label_then_54:
	li $t1, 1 	#Load Int
	sw $t1, 188($fp) 	#Save loaded value in destination
	lw $t4, 188($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 192($fp) 	#Obtain value to assign
	sw $t1, 52($fp) 	#Assign value
label_continue_54:
	lw $t5, 52($fp) 	#Obtain value to assign
	sw $t5, 4($fp) 	#Assign value
	j label_continue_52 	#Jump to label_continue_52
label_then_52:
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 204($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 208($fp) 	#Save loaded value in destination
	lw $t3, 204($fp) 	#
	lw $t5, 208($fp) 	#
	sub $t7,  $t5, $t3 	#Minus
	sw $t7, 200($fp) 	#Save result of minus
	lw $t7, 200($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -8($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 216($fp) 	#Save type value in destination
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 212($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 216($fp) 	#get type dir for Dynamic Call
	lw $t9, 40($t5) 	#Get method of index 10
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 196($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 196($fp) 	#Obtain value to assign
	sw $t2, 4($fp) 	#Assign value
label_continue_52:
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -220 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_class_type:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 76 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Typeof
	lw $t3, -4($t8) 	#
	sw $t3, 0($fp) 	#Save type value in destination
	la $t3, B 	#LOAD
	sw $t3, 4($fp) 	#Save loaded value in destination
	lw $t3, 4($fp) 	#
	lw $t1, 0($fp) 	#
	sub $t9,  $t1, $t3 	#Minus
	sw $t9, 8($fp) 	#Save result of minus
	lw $t5, 8($fp) 	#Mov comparisson value to register
	bgtz $t5, label_case_branch_0 	#Compare values in registers and jump to label_case_branch_0 if the second is greater than 0
	lw $t7, -4($fp) 	#Typeof
	lw $t4, -4($t7) 	#
	sw $t4, 12($fp) 	#Save type value in destination
	la $t7, A 	#LOAD
	sw $t7, 16($fp) 	#Save loaded value in destination
	lw $t8, 16($fp) 	#
	lw $t3, 12($fp) 	#
	sub $t2,  $t3, $t8 	#Minus
	sw $t2, 20($fp) 	#Save result of minus
	lw $t2, 20($fp) 	#Mov comparisson value to register
	bgtz $t2, label_case_branch_1 	#Compare values in registers and jump to label_case_branch_1 if the second is greater than 0
	la $t4, data_46_case_err 	#LOAD
	sw $t4, 24($fp) 	#Save loaded value in destination
	lw $t0, 24($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t3, 28($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
label_case_branch_0:
	lw $t7, -4($fp) 	#Obtain value to assign
	sw $t7, 36($fp) 	#Assign value
	la $t0, data_47_string 	#LOAD
	sw $t0, 44($fp) 	#Save loaded value in destination
	lw $t9, 44($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -8($fp) 	#Typeof
	lw $t4, -4($t7) 	#
	sw $t4, 52($fp) 	#Save type value in destination
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 48($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 52($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t1) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 40($fp) 	#Obtain value to assign
	sw $t7, 32($fp) 	#Assign value
	j label_end_case_0 	#Jump to label_end_case_0
label_case_branch_1:
	lw $t6, -4($fp) 	#Obtain value to assign
	sw $t6, 56($fp) 	#Assign value
	la $t0, data_48_string 	#LOAD
	sw $t0, 64($fp) 	#Save loaded value in destination
	lw $t3, 64($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -8($fp) 	#Typeof
	lw $t0, -4($t4) 	#
	sw $t0, 72($fp) 	#Save type value in destination
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 68($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 72($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t2) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 60($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 60($fp) 	#Obtain value to assign
	sw $t5, 32($fp) 	#Assign value
	j label_end_case_0 	#Jump to label_end_case_0
label_end_case_0:
	lw $t6, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -76 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_print:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 48 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	lw $t4, -4($fp) 	#Typeof
	lw $t0, -4($t4) 	#
	sw $t0, 20($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 20($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t6) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 0($fp) 	#Typeof
	lw $t0, -4($t1) 	#
	sw $t0, 24($fp) 	#Save type value in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 16($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 24($fp) 	#get type dir for Dynamic Call
	lw $t2, 28($t7) 	#Get method of index 7
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, -8($fp) 	#Typeof
	lw $t3, -4($t6) 	#
	sw $t3, 28($fp) 	#Save type value in destination
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 28($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t0) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_49_string 	#LOAD
	sw $t1, 36($fp) 	#Save loaded value in destination
	lw $t2, 36($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -8($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 44($fp) 	#Save type value in destination
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 40($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 44($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t6) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -48 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 992 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 0($fp) 	#Obtain value from source dir
	lw $t9, -4($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t9) 	#Save value in attribute of index 1
label_while_label_2:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 12($t5) 	#Load attribute in index 3
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t9) 	#Load attribute in index 0
	sw $t8, 8($fp) 	#Save obtained attribute in destination
	lw $t3, 8($fp) 	#Mov comparisson value to register
	bgtz $t3, label_loop_label_2 	#Compare values in registers and jump to label_loop_label_2 if the second is greater than 0
	j label_pool_label_2 	#Jump to label_pool_label_2
label_loop_label_2:
	la $t8, data_50_string 	#LOAD
	sw $t8, 16($fp) 	#Save loaded value in destination
	lw $t0, 16($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t9, -4($t2) 	#
	sw $t9, 24($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 20($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 24($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t3) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 4($t2) 	#Load attribute in index 1
	sw $t3, 32($fp) 	#Save obtained attribute in destination
	lw $t4, -4($fp) 	#Typeof
	lw $t7, -4($t4) 	#
	sw $t7, 36($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 36($fp) 	#get type dir for Dynamic Call
	lw $t1, 48($t8) 	#Get method of index 12
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 28($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 32($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 52($fp) 	#Save type value in destination
	lw $t4, 32($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 52($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t2) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, -4($fp) 	#Typeof
	lw $t5, -4($t0) 	#
	sw $t5, 56($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 48($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 56($fp) 	#get type dir for Dynamic Call
	lw $t4, 40($t2) 	#Get method of index 10
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 44($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 60($fp) 	#Save obtained attribute in destination
	lw $t1, 60($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_58 	#Compare values in registers and jump to label_then_58 if the second is greater than 0
label_else_58:
	la $t7, data_51_string 	#LOAD
	sw $t7, 68($fp) 	#Save loaded value in destination
	lw $t8, 68($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t3, -4($t5) 	#
	sw $t3, 76($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 72($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 76($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t0) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 64($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 64($fp) 	#Obtain value to assign
	sw $t4, 40($fp) 	#Assign value
	j label_continue_58 	#Jump to label_continue_58
label_then_58:
	la $t5, data_52_string 	#LOAD
	sw $t5, 84($fp) 	#Save loaded value in destination
	lw $t4, 84($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t5, -4($t3) 	#
	sw $t5, 92($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 88($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 92($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t7) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 80($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 80($fp) 	#Obtain value to assign
	sw $t2, 40($fp) 	#Assign value
label_continue_58:
	lw $t9, -4($fp) 	#Typeof
	lw $t6, -4($t9) 	#
	sw $t6, 100($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 32($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 100($fp) 	#get type dir for Dynamic Call
	lw $t9, 44($t4) 	#Get method of index 11
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 96($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, -4($fp) 	#Typeof
	lw $t3, -4($t7) 	#
	sw $t3, 108($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 108($fp) 	#get type dir for Dynamic Call
	lw $t0, 28($t5) 	#Get method of index 7
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 104($fp) 	#Obtain value from source dir
	lw $t2, -4($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t2) 	#Save value in attribute of index 0
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t5) 	#Load attribute in index 0
	sw $t8, 116($fp) 	#Save obtained attribute in destination
	lw $t3, 116($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 120($fp) 	#Save obtained attribute in destination
	la $t9, data_53_string 	#LOAD
	sw $t9, 124($fp) 	#Save loaded value in destination
	lw $t8, 124($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 128($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 132($fp) 	#Save obtained attribute in destination
	lw $t3, 120($fp) 	#
	lw $t2, 132($fp) 	#
loop19:
	lb $t4, 0($t3) 	#
	lb $t5, 0($t2) 	#
	beqz $t4, exit67 	#
	beqz $t5, exit68 	#
	addi $t3,  $t3, 1 	#
	addi $t2,  $t2, 1 	#
	beq $t4, $t5, loop19 	#
	j exit70 	#
exit67:
	beqz $t5, exit69 	#
	j exit70 	#
exit68:
	beqz $t4, exit69 	#
	j exit70 	#
exit69:
	li $t7, 1 	#
	j exit71 	#
exit70:
	li $t7, 0 	#
	j exit71 	#
exit71:
	sw $t7, 136($fp) 	#
	lw $t5, 136($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 140($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 144($fp) 	#Save obtained attribute in destination
	lw $t0, 144($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_59 	#Compare values in registers and jump to label_then_59 if the second is greater than 0
label_else_59:
	lw $t8, 116($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 152($fp) 	#Save obtained attribute in destination
	la $t2, data_54_string 	#LOAD
	sw $t2, 156($fp) 	#Save loaded value in destination
	lw $t6, 156($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 160($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 164($fp) 	#Save obtained attribute in destination
	lw $t8, 152($fp) 	#
	lw $t2, 164($fp) 	#
loop20:
	lb $t4, 0($t8) 	#
	lb $t0, 0($t2) 	#
	beqz $t4, exit72 	#
	beqz $t0, exit73 	#
	addi $t8,  $t8, 1 	#
	addi $t2,  $t2, 1 	#
	beq $t4, $t0, loop20 	#
	j exit75 	#
exit72:
	beqz $t0, exit74 	#
	j exit75 	#
exit73:
	beqz $t4, exit74 	#
	j exit75 	#
exit74:
	li $t3, 1 	#
	j exit76 	#
exit75:
	li $t3, 0 	#
	j exit76 	#
exit76:
	sw $t3, 168($fp) 	#
	lw $t9, 168($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 172($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 176($fp) 	#Save obtained attribute in destination
	lw $t3, 176($fp) 	#Mov comparisson value to register
	bgtz $t3, label_then_60 	#Compare values in registers and jump to label_then_60 if the second is greater than 0
label_else_60:
	lw $t4, 116($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 184($fp) 	#Save obtained attribute in destination
	la $t9, data_55_string 	#LOAD
	sw $t9, 188($fp) 	#Save loaded value in destination
	lw $t7, 188($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 192($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 196($fp) 	#Save obtained attribute in destination
	lw $t6, 184($fp) 	#
	lw $t0, 196($fp) 	#
loop21:
	lb $t4, 0($t6) 	#
	lb $t7, 0($t0) 	#
	beqz $t4, exit77 	#
	beqz $t7, exit78 	#
	addi $t6,  $t6, 1 	#
	addi $t0,  $t0, 1 	#
	beq $t4, $t7, loop21 	#
	j exit80 	#
exit77:
	beqz $t7, exit79 	#
	j exit80 	#
exit78:
	beqz $t4, exit79 	#
	j exit80 	#
exit79:
	li $t5, 1 	#
	j exit81 	#
exit80:
	li $t5, 0 	#
	j exit81 	#
exit81:
	sw $t5, 200($fp) 	#
	lw $t4, 200($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 204($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 208($fp) 	#Save obtained attribute in destination
	lw $t5, 208($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_61 	#Compare values in registers and jump to label_then_61 if the second is greater than 0
label_else_61:
	lw $t9, 116($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 216($fp) 	#Save obtained attribute in destination
	la $t0, data_56_string 	#LOAD
	sw $t0, 220($fp) 	#Save loaded value in destination
	lw $t2, 220($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 224($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 224($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 228($fp) 	#Save obtained attribute in destination
	lw $t2, 216($fp) 	#
	lw $t6, 228($fp) 	#
loop22:
	lb $t8, 0($t2) 	#
	lb $t1, 0($t6) 	#
	beqz $t8, exit82 	#
	beqz $t1, exit83 	#
	addi $t2,  $t2, 1 	#
	addi $t6,  $t6, 1 	#
	beq $t8, $t1, loop22 	#
	j exit85 	#
exit82:
	beqz $t1, exit84 	#
	j exit85 	#
exit83:
	beqz $t8, exit84 	#
	j exit85 	#
exit84:
	li $t4, 1 	#
	j exit86 	#
exit85:
	li $t4, 0 	#
	j exit86 	#
exit86:
	sw $t4, 232($fp) 	#
	lw $t8, 232($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 236($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 240($fp) 	#Save obtained attribute in destination
	lw $t2, 240($fp) 	#Mov comparisson value to register
	bgtz $t2, label_then_62 	#Compare values in registers and jump to label_then_62 if the second is greater than 0
label_else_62:
	lw $t6, 116($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 248($fp) 	#Save obtained attribute in destination
	la $t0, data_57_string 	#LOAD
	sw $t0, 252($fp) 	#Save loaded value in destination
	lw $t1, 252($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 256($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 256($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 260($fp) 	#Save obtained attribute in destination
	lw $t0, 248($fp) 	#
	lw $t1, 260($fp) 	#
loop23:
	lb $t6, 0($t0) 	#
	lb $t9, 0($t1) 	#
	beqz $t6, exit87 	#
	beqz $t9, exit88 	#
	addi $t0,  $t0, 1 	#
	addi $t1,  $t1, 1 	#
	beq $t6, $t9, loop23 	#
	j exit90 	#
exit87:
	beqz $t9, exit89 	#
	j exit90 	#
exit88:
	beqz $t6, exit89 	#
	j exit90 	#
exit89:
	li $t3, 1 	#
	j exit91 	#
exit90:
	li $t3, 0 	#
	j exit91 	#
exit91:
	sw $t3, 264($fp) 	#
	lw $t5, 264($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 268($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 272($fp) 	#Save obtained attribute in destination
	lw $t5, 272($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_63 	#Compare values in registers and jump to label_then_63 if the second is greater than 0
label_else_63:
	lw $t6, 116($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t6) 	#Load attribute in index 0
	sw $t8, 280($fp) 	#Save obtained attribute in destination
	la $t6, data_58_string 	#LOAD
	sw $t6, 284($fp) 	#Save loaded value in destination
	lw $t1, 284($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 288($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 288($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t8) 	#Load attribute in index 0
	sw $t2, 292($fp) 	#Save obtained attribute in destination
	lw $t8, 280($fp) 	#
	lw $t4, 292($fp) 	#
loop24:
	lb $t2, 0($t8) 	#
	lb $t6, 0($t4) 	#
	beqz $t2, exit92 	#
	beqz $t6, exit93 	#
	addi $t8,  $t8, 1 	#
	addi $t4,  $t4, 1 	#
	beq $t2, $t6, loop24 	#
	j exit95 	#
exit92:
	beqz $t6, exit94 	#
	j exit95 	#
exit93:
	beqz $t2, exit94 	#
	j exit95 	#
exit94:
	li $t0, 1 	#
	j exit96 	#
exit95:
	li $t0, 0 	#
	j exit96 	#
exit96:
	sw $t0, 296($fp) 	#
	lw $t1, 296($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 300($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 304($fp) 	#Save obtained attribute in destination
	lw $t6, 304($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_64 	#Compare values in registers and jump to label_then_64 if the second is greater than 0
label_else_64:
	lw $t7, 116($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t7) 	#Load attribute in index 0
	sw $t2, 312($fp) 	#Save obtained attribute in destination
	la $t0, data_59_string 	#LOAD
	sw $t0, 316($fp) 	#Save loaded value in destination
	lw $t6, 316($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 320($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 320($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t5) 	#Load attribute in index 0
	sw $t8, 324($fp) 	#Save obtained attribute in destination
	lw $t3, 312($fp) 	#
	lw $t6, 324($fp) 	#
loop25:
	lb $t0, 0($t3) 	#
	lb $t5, 0($t6) 	#
	beqz $t0, exit97 	#
	beqz $t5, exit98 	#
	addi $t3,  $t3, 1 	#
	addi $t6,  $t6, 1 	#
	beq $t0, $t5, loop25 	#
	j exit100 	#
exit97:
	beqz $t5, exit99 	#
	j exit100 	#
exit98:
	beqz $t0, exit99 	#
	j exit100 	#
exit99:
	li $t9, 1 	#
	j exit101 	#
exit100:
	li $t9, 0 	#
	j exit101 	#
exit101:
	sw $t9, 328($fp) 	#
	lw $t9, 328($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 332($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 336($fp) 	#Save obtained attribute in destination
	lw $t0, 336($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_65 	#Compare values in registers and jump to label_then_65 if the second is greater than 0
label_else_65:
	lw $t4, 116($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 344($fp) 	#Save obtained attribute in destination
	la $t3, data_60_string 	#LOAD
	sw $t3, 348($fp) 	#Save loaded value in destination
	lw $t7, 348($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 352($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 352($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 356($fp) 	#Save obtained attribute in destination
	lw $t7, 344($fp) 	#
	lw $t1, 356($fp) 	#
loop26:
	lb $t6, 0($t7) 	#
	lb $t8, 0($t1) 	#
	beqz $t6, exit102 	#
	beqz $t8, exit103 	#
	addi $t7,  $t7, 1 	#
	addi $t1,  $t1, 1 	#
	beq $t6, $t8, loop26 	#
	j exit105 	#
exit102:
	beqz $t8, exit104 	#
	j exit105 	#
exit103:
	beqz $t6, exit104 	#
	j exit105 	#
exit104:
	li $t3, 1 	#
	j exit106 	#
exit105:
	li $t3, 0 	#
	j exit106 	#
exit106:
	sw $t3, 360($fp) 	#
	lw $t6, 360($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 364($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 364($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 368($fp) 	#Save obtained attribute in destination
	lw $t4, 368($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_66 	#Compare values in registers and jump to label_then_66 if the second is greater than 0
label_else_66:
	lw $t1, 116($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 376($fp) 	#Save obtained attribute in destination
	la $t4, data_61_string 	#LOAD
	sw $t4, 380($fp) 	#Save loaded value in destination
	lw $t9, 380($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 384($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 384($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 388($fp) 	#Save obtained attribute in destination
	lw $t5, 376($fp) 	#
	lw $t4, 388($fp) 	#
loop27:
	lb $t3, 0($t5) 	#
	lb $t6, 0($t4) 	#
	beqz $t3, exit107 	#
	beqz $t6, exit108 	#
	addi $t5,  $t5, 1 	#
	addi $t4,  $t4, 1 	#
	beq $t3, $t6, loop27 	#
	j exit110 	#
exit107:
	beqz $t6, exit109 	#
	j exit110 	#
exit108:
	beqz $t3, exit109 	#
	j exit110 	#
exit109:
	li $t1, 1 	#
	j exit111 	#
exit110:
	li $t1, 0 	#
	j exit111 	#
exit111:
	sw $t1, 392($fp) 	#
	lw $t1, 392($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 396($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t0) 	#Load attribute in index 0
	sw $t6, 400($fp) 	#Save obtained attribute in destination
	lw $t2, 400($fp) 	#Mov comparisson value to register
	bgtz $t2, label_then_67 	#Compare values in registers and jump to label_then_67 if the second is greater than 0
label_else_67:
	lw $t5, 116($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 408($fp) 	#Save obtained attribute in destination
	la $t0, data_62_string 	#LOAD
	sw $t0, 412($fp) 	#Save loaded value in destination
	lw $t1, 412($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 416($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 416($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t1) 	#Load attribute in index 0
	sw $t4, 420($fp) 	#Save obtained attribute in destination
	lw $t6, 408($fp) 	#
	lw $t4, 420($fp) 	#
loop28:
	lb $t3, 0($t6) 	#
	lb $t9, 0($t4) 	#
	beqz $t3, exit112 	#
	beqz $t9, exit113 	#
	addi $t6,  $t6, 1 	#
	addi $t4,  $t4, 1 	#
	beq $t3, $t9, loop28 	#
	j exit115 	#
exit112:
	beqz $t9, exit114 	#
	j exit115 	#
exit113:
	beqz $t3, exit114 	#
	j exit115 	#
exit114:
	li $t8, 1 	#
	j exit116 	#
exit115:
	li $t8, 0 	#
	j exit116 	#
exit116:
	sw $t8, 424($fp) 	#
	lw $t9, 424($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 428($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 428($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 432($fp) 	#Save obtained attribute in destination
	lw $t1, 432($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_68 	#Compare values in registers and jump to label_then_68 if the second is greater than 0
label_else_68:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 440($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t0, 32($fp) 	#Typeof
	lw $t6, -4($t0) 	#
	sw $t6, 448($fp) 	#Save type value in destination
	lw $t4, 32($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 448($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t0) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 444($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t2, 440($fp) 	#Typeof
	lw $t1, -4($t2) 	#
	sw $t1, 452($fp) 	#Save type value in destination
	lw $t2, 440($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 444($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 452($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t8) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 436($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 436($fp) 	#Obtain value to assign
	sw $t9, 32($fp) 	#Assign value
	lw $t8, 32($fp) 	#Obtain value to assign
	sw $t8, 404($fp) 	#Assign value
	j label_continue_68 	#Jump to label_continue_68
label_then_68:
	li $t2, 0 	#Load Int
	sw $t2, 456($fp) 	#Save loaded value in destination
	lw $t3, 456($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 460($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 460($fp) 	#Obtain value to assign
	sw $t7, 4($fp) 	#Assign value
	lw $t0, 4($fp) 	#Obtain value to assign
	sw $t0, 404($fp) 	#Assign value
label_continue_68:
	lw $t0, 404($fp) 	#Obtain value to assign
	sw $t0, 372($fp) 	#Assign value
	j label_continue_67 	#Jump to label_continue_67
label_then_67:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 464($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 464($fp) 	#Obtain value to assign
	sw $t2, 32($fp) 	#Assign value
	lw $t3, 32($fp) 	#Obtain value to assign
	sw $t3, 372($fp) 	#Assign value
label_continue_67:
	lw $t0, 372($fp) 	#Obtain value to assign
	sw $t0, 340($fp) 	#Assign value
	j label_continue_66 	#Jump to label_continue_66
label_then_66:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 468($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 476($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 32($fp) 	#Typeof
	lw $t5, -4($t7) 	#
	sw $t5, 484($fp) 	#Save type value in destination
	lw $t6, 32($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 484($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t6) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 480($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 476($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 488($fp) 	#Save type value in destination
	lw $t6, 476($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 480($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 488($fp) 	#get type dir for Dynamic Call
	lw $t4, 44($t9) 	#Get method of index 11
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 472($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 472($fp) 	#Obtain value to assign
	sw $t4, 468($fp) 	#Assign value
	lw $t3, 32($fp) 	#Typeof
	lw $t2, -4($t3) 	#
	sw $t2, 500($fp) 	#Save type value in destination
	lw $t9, 32($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 500($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t2) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 496($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 496($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 504($fp) 	#Save obtained attribute in destination
	lw $t5, 468($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 512($fp) 	#Save type value in destination
	lw $t4, 468($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 512($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t1) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 508($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 508($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 516($fp) 	#Save obtained attribute in destination
	li $t1, 8 	#Load Int
	sw $t1, 520($fp) 	#Save loaded value in destination
	lw $t9, 520($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 524($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 524($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t4) 	#Load attribute in index 0
	sw $t3, 528($fp) 	#Save obtained attribute in destination
	lw $t0, 528($fp) 	#
	lw $t5, 516($fp) 	#
	mult $t0, $t5 	#Mult
	mflo $t0 	#
	sw $t0, 532($fp) 	#Save result of Mult
	lw $t6, 532($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 536($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 536($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 540($fp) 	#Save obtained attribute in destination
	lw $t1, 540($fp) 	#
	lw $t3, 504($fp) 	#
	sub $t4,  $t3, $t1 	#Minus
	sw $t4, 544($fp) 	#Save result of minus
	lw $t5, 544($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 548($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 548($fp) 	#Obtain value to assign
	sw $t8, 492($fp) 	#Assign value
	la $t2, data_50_string 	#LOAD
	sw $t2, 556($fp) 	#Save loaded value in destination
	lw $t2, 556($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 560($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t1, -4($t5) 	#
	sw $t1, 564($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 560($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 564($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t5) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 552($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, -4($fp) 	#Typeof
	lw $t5, -4($t6) 	#
	sw $t5, 572($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 32($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 572($fp) 	#get type dir for Dynamic Call
	lw $t7, 48($t4) 	#Get method of index 12
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 568($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_63_string 	#LOAD
	sw $t1, 580($fp) 	#Save loaded value in destination
	lw $t1, 580($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 584($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 588($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 584($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 588($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t4) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 576($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 596($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 468($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 596($fp) 	#get type dir for Dynamic Call
	lw $t1, 48($t0) 	#Get method of index 12
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 592($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_64_string 	#LOAD
	sw $t6, 604($fp) 	#Save loaded value in destination
	lw $t9, 604($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 608($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t9, -4($t4) 	#
	sw $t9, 612($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 608($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 612($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t8) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 600($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 620($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 620($fp) 	#Obtain value to assign
	sw $t3, 616($fp) 	#Assign value
	lw $t4, 616($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 632($fp) 	#Save type value in destination
	lw $t7, 616($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 492($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 632($fp) 	#get type dir for Dynamic Call
	lw $t3, 28($t8) 	#Get method of index 7
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 628($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, -4($fp) 	#Typeof
	lw $t2, -4($t5) 	#
	sw $t2, 636($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 628($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 636($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t0) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 624($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_44_string 	#LOAD
	sw $t1, 644($fp) 	#Save loaded value in destination
	lw $t3, 644($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 648($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 652($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 648($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 652($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t8) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 640($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 468($fp) 	#Obtain value to assign
	sw $t8, 32($fp) 	#Assign value
	lw $t0, 32($fp) 	#Obtain value to assign
	sw $t0, 340($fp) 	#Assign value
label_continue_66:
	lw $t3, 340($fp) 	#Obtain value to assign
	sw $t3, 308($fp) 	#Assign value
	j label_continue_65 	#Jump to label_continue_65
label_then_65:
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 664($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t0, 32($fp) 	#Typeof
	lw $t3, -4($t0) 	#
	sw $t3, 672($fp) 	#Save type value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 672($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t8) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 668($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 664($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 676($fp) 	#Save type value in destination
	lw $t7, 664($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 668($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 676($fp) 	#get type dir for Dynamic Call
	lw $t1, 40($t9) 	#Get method of index 10
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 660($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 660($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 680($fp) 	#Save obtained attribute in destination
	lw $t9, 680($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_69 	#Compare values in registers and jump to label_then_69 if the second is greater than 0
label_else_69:
	la $t4, data_50_string 	#LOAD
	sw $t4, 688($fp) 	#Save loaded value in destination
	lw $t1, 688($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 692($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t5, -4($t4) 	#
	sw $t5, 696($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 692($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 696($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t4) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 684($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Typeof
	lw $t7, -4($t4) 	#
	sw $t7, 704($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 32($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 704($fp) 	#get type dir for Dynamic Call
	lw $t0, 48($t7) 	#Get method of index 12
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 700($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_65_string 	#LOAD
	sw $t8, 712($fp) 	#Save loaded value in destination
	lw $t0, 712($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 716($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 720($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 716($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 720($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t5) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 708($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 708($fp) 	#Obtain value to assign
	sw $t0, 656($fp) 	#Assign value
	j label_continue_69 	#Jump to label_continue_69
label_then_69:
	la $t0, data_50_string 	#LOAD
	sw $t0, 728($fp) 	#Save loaded value in destination
	lw $t8, 728($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 732($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t2, -4($t4) 	#
	sw $t2, 736($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 732($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 736($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t1) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 724($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, -4($fp) 	#Typeof
	lw $t9, -4($t5) 	#
	sw $t9, 744($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 32($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 744($fp) 	#get type dir for Dynamic Call
	lw $t1, 48($t3) 	#Get method of index 12
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 740($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t3, data_66_string 	#LOAD
	sw $t3, 752($fp) 	#Save loaded value in destination
	lw $t4, 752($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 756($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t1, -4($t7) 	#
	sw $t1, 760($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 756($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 760($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t8) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 748($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 748($fp) 	#Obtain value to assign
	sw $t2, 656($fp) 	#Assign value
label_continue_69:
	lw $t2, 656($fp) 	#Obtain value to assign
	sw $t2, 308($fp) 	#Assign value
label_continue_65:
	lw $t8, 308($fp) 	#Obtain value to assign
	sw $t8, 276($fp) 	#Assign value
	j label_continue_64 	#Jump to label_continue_64
label_then_64:
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 768($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 32($fp) 	#Typeof
	lw $t6, -4($t4) 	#
	sw $t6, 776($fp) 	#Save type value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 776($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t8) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 772($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 768($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 772($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal type C : B {
	[method] method6(num:Int): A;
	[method] method5(num:Int): A;
}
_method5 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 764($fp) 	#
	addi $sp,  $sp, -8 	#Remove args from stack
	lw $t8, 764($fp) 	#Obtain value to assign
	sw $t8, 32($fp) 	#Assign value
	lw $t9, 32($fp) 	#Obtain value to assign
	sw $t9, 276($fp) 	#Assign value
label_continue_64:
	lw $t7, 276($fp) 	#Obtain value to assign
	sw $t7, 244($fp) 	#Assign value
	j label_continue_63 	#Jump to label_continue_63
label_then_63:
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 784($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 32($fp) 	#Typeof
	lw $t9, -4($t4) 	#
	sw $t9, 792($fp) 	#Save type value in destination
	lw $t6, 32($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 792($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t3) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 788($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 784($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 788($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal type B : A {
	[method] method5(num:Int): A;
}
_method5 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 780($fp) 	#
	addi $sp,  $sp, -8 	#Remove args from stack
	lw $t2, 780($fp) 	#Obtain value to assign
	sw $t2, 32($fp) 	#Assign value
	lw $t1, 32($fp) 	#Obtain value to assign
	sw $t1, 244($fp) 	#Assign value
label_continue_63:
	lw $t6, 244($fp) 	#Obtain value to assign
	sw $t6, 212($fp) 	#Assign value
	j label_continue_62 	#Jump to label_continue_62
label_then_62:
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 800($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 32($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 808($fp) 	#Save type value in destination
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 808($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t3) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 804($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 800($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 804($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal type A : Object {
	[attrib] var : Int;
	[method] value(): Int;
	[method] set_var(num:Int): A;
	[method] method1(num:Int): A;
	[method] method2(num1:Int, num2:Int): A;
	[method] method3(num:Int): A;
	[method] method4(num1:Int, num2:Int): A;
	[method] method5(num:Int): A;
}
_method5 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 796($fp) 	#
	addi $sp,  $sp, -8 	#Remove args from stack
	lw $t3, 796($fp) 	#Obtain value to assign
	sw $t3, 32($fp) 	#Assign value
	lw $t8, 32($fp) 	#Obtain value to assign
	sw $t8, 212($fp) 	#Assign value
label_continue_62:
	lw $t2, 212($fp) 	#Obtain value to assign
	sw $t2, 180($fp) 	#Assign value
	j label_continue_61 	#Jump to label_continue_61
label_then_61:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 816($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t5, -4($t1) 	#
	sw $t5, 824($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 824($fp) 	#get type dir for Dynamic Call
	lw $t6, 36($t0) 	#Get method of index 9
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 820($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 816($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 828($fp) 	#Save type value in destination
	lw $t0, 816($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 820($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 828($fp) 	#get type dir for Dynamic Call
	lw $t8, 16($t1) 	#Get method of index 4
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 812($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 812($fp) 	#Obtain value from source dir
	lw $t1, -4($fp) 	#Dir of instance of attribute to set
	sw $t4, 8($t1) 	#Save value in attribute of index 2
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 836($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 32($fp) 	#Typeof
	lw $t7, -4($t2) 	#
	sw $t7, 844($fp) 	#Save type value in destination
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 844($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t6) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 840($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 8($t2) 	#Load attribute in index 2
	sw $t4, 852($fp) 	#Save obtained attribute in destination
	lw $t3, 852($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 856($fp) 	#Save type value in destination
	lw $t1, 852($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 856($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t7) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 848($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, 836($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 860($fp) 	#Save type value in destination
	lw $t2, 836($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 840($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 848($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 860($fp) 	#get type dir for Dynamic Call
	lw $t3, 32($t9) 	#Get method of index 8
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 832($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, 832($fp) 	#Obtain value to assign
	sw $t4, 32($fp) 	#Assign value
	lw $t0, 32($fp) 	#Obtain value to assign
	sw $t0, 180($fp) 	#Assign value
label_continue_61:
	lw $t5, 180($fp) 	#Obtain value to assign
	sw $t5, 148($fp) 	#Assign value
	j label_continue_60 	#Jump to label_continue_60
label_then_60:
	lw $t2, 32($fp) 	#Typeof
	lw $t9, -4($t2) 	#
	sw $t9, 864($fp) 	#Save type value in destination
	la $t5, A 	#LOAD
	sw $t5, 868($fp) 	#Save loaded value in destination
	lw $t7, 868($fp) 	#
	lw $t4, 864($fp) 	#
	sub $t2,  $t4, $t7 	#Minus
	sw $t2, 872($fp) 	#Save result of minus
	lw $t3, 872($fp) 	#Mov comparisson value to register
	bgtz $t3, label_case_branch_2 	#Compare values in registers and jump to label_case_branch_2 if the second is greater than 0
	lw $t7, 32($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 876($fp) 	#Save type value in destination
	la $t1, A 	#LOAD
	sw $t1, 880($fp) 	#Save loaded value in destination
	lw $t6, 880($fp) 	#
	lw $t4, 876($fp) 	#
	sub $t2,  $t4, $t6 	#Minus
	sw $t2, 884($fp) 	#Save result of minus
	lw $t5, 884($fp) 	#Mov comparisson value to register
	bgtz $t5, label_case_branch_3 	#Compare values in registers and jump to label_case_branch_3 if the second is greater than 0
	la $t7, data_46_case_err 	#LOAD
	sw $t7, 888($fp) 	#Save loaded value in destination
	lw $t8, 888($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 892($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t9, 892($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
label_case_branch_2:
	lw $t2, 32($fp) 	#Obtain value to assign
	sw $t2, 900($fp) 	#Assign value
	lw $t3, 900($fp) 	#Typeof
	lw $t5, -4($t3) 	#
	sw $t5, 912($fp) 	#Save type value in destination
	lw $t8, 900($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 912($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t6) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 908($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 900($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 916($fp) 	#Save type value in destination
	lw $t9, 900($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 908($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 916($fp) 	#get type dir for Dynamic Call
	lw $t8, 40($t7) 	#Get method of index 10
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 904($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 904($fp) 	#Obtain value to assign
	sw $t4, 32($fp) 	#Assign value
	lw $t1, 32($fp) 	#Obtain value to assign
	sw $t1, 896($fp) 	#Assign value
	j label_end_case_1 	#Jump to label_end_case_1
label_case_branch_3:
	lw $t7, 32($fp) 	#Obtain value to assign
	sw $t7, 616($fp) 	#Assign value
	lw $t1, 616($fp) 	#Typeof
	lw $t4, -4($t1) 	#
	sw $t4, 932($fp) 	#Save type value in destination
	lw $t3, 616($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 932($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t7) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 928($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 616($fp) 	#Typeof
	lw $t9, -4($t5) 	#
	sw $t9, 936($fp) 	#Save type value in destination
	lw $t6, 616($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 928($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 936($fp) 	#get type dir for Dynamic Call
	lw $t1, 28($t6) 	#Get method of index 7
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 924($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 924($fp) 	#Obtain value to assign
	sw $t3, 32($fp) 	#Assign value
	lw $t0, 32($fp) 	#Obtain value to assign
	sw $t0, 896($fp) 	#Assign value
	j label_end_case_1 	#Jump to label_end_case_1
label_end_case_1:
	lw $t6, 896($fp) 	#Obtain value to assign
	sw $t6, 148($fp) 	#Assign value
label_continue_60:
	lw $t3, 148($fp) 	#Obtain value to assign
	sw $t3, 112($fp) 	#Assign value
	j label_continue_59 	#Jump to label_continue_59
label_then_59:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 944($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 952($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 952($fp) 	#get type dir for Dynamic Call
	lw $t5, 36($t1) 	#Get method of index 9
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 948($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 944($fp) 	#Typeof
	lw $t2, -4($t3) 	#
	sw $t2, 956($fp) 	#Save type value in destination
	lw $t5, 944($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 948($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 956($fp) 	#get type dir for Dynamic Call
	lw $t6, 16($t2) 	#Get method of index 4
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 940($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 940($fp) 	#Obtain value to assign
	sw $t5, 852($fp) 	#Assign value
	jal B___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 964($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 32($fp) 	#Typeof
	lw $t5, -4($t6) 	#
	sw $t5, 972($fp) 	#Save type value in destination
	lw $t4, 32($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 972($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t6) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 968($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 852($fp) 	#Typeof
	lw $t9, -4($t8) 	#
	sw $t9, 980($fp) 	#Save type value in destination
	lw $t3, 852($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 980($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t9) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 976($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 964($fp) 	#Typeof
	lw $t8, -4($t9) 	#
	sw $t8, 984($fp) 	#Save type value in destination
	lw $t3, 964($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 968($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 976($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 984($fp) 	#get type dir for Dynamic Call
	lw $t9, 24($t0) 	#Get method of index 6
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 960($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t3, 960($fp) 	#Obtain value to assign
	sw $t3, 32($fp) 	#Assign value
	lw $t2, 32($fp) 	#Obtain value to assign
	sw $t2, 112($fp) 	#Assign value
label_continue_59:
	j label_while_label_2 	#Jump to label_while_label_2
label_pool_label_2:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 988($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 988($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -992 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
