	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_A: .asciiz "A"
data_7_type_name_B: .asciiz "B"
data_8_type_name_C: .asciiz "C"
data_9_type_name_D: .asciiz "D"
data_10_type_name_E: .asciiz "E"
data_11_type_name_A2I: .asciiz "A2I"
data_12_type_name_Main: .asciiz "Main"
data_13_sep_cat: .asciiz " ++ "
data_14_eol: .asciiz "\n"
data_15_under: .asciiz "_"
data_16_meth: .asciiz "set_var"
data_17_meth: .asciiz "method7"
data_18_string: .asciiz "0"
data_19_string: .asciiz "1"
data_20_string: .asciiz "2"
data_21_string: .asciiz "3"
data_22_string: .asciiz "4"
data_23_string: .asciiz "5"
data_24_string: .asciiz "6"
data_25_string: .asciiz "7"
data_26_string: .asciiz "8"
data_27_string: .asciiz "9"
data_28_meth: .asciiz "abort"
data_29_string: .asciiz ""
data_30_meth: .asciiz "length"
data_31_meth: .asciiz "substr"
data_32_string: .asciiz "-"
data_33_meth: .asciiz "a2i_aux"
data_34_string: .asciiz "+"
data_35_meth: .asciiz "c2i"
data_36_meth: .asciiz "i2a_aux"
data_37_meth: .asciiz "concat"
data_38_meth: .asciiz "i2c"
data_39_string: .asciiz "\n	To add a number to "
data_40_meth: .asciiz "out_string"
data_41_meth: .asciiz "print"
data_42_string: .asciiz "...enter a:\n"
data_43_string: .asciiz "	To negate "
data_44_string: .asciiz "...enter b:\n"
data_45_string: .asciiz "	To find the difference between "
data_46_string: .asciiz "and another number...enter c:\n"
data_47_string: .asciiz "	To find the factorial of "
data_48_string: .asciiz "...enter d:\n"
data_49_string: .asciiz "	To square "
data_50_string: .asciiz "...enter e:\n"
data_51_string: .asciiz "	To cube "
data_52_string: .asciiz "...enter f:\n"
data_53_string: .asciiz "	To find out if "
data_54_string: .asciiz "is a multiple of 3...enter g:\n"
data_55_string: .asciiz "	To divide "
data_56_string: .asciiz "by 8...enter h:\n"
data_57_string: .asciiz "	To get a new number...enter j:\n"
data_58_string: .asciiz "	To quit...enter q:\n\n"
data_59_meth: .asciiz "in_string"
data_60_string: .asciiz "Please enter a number...  "
data_61_meth: .asciiz "prompt"
data_62_meth: .asciiz "a2i"
data_63_meth: .asciiz "is_even"
data_64_case_err: .asciiz "Case of did not match any branch!"
data_65_string: .asciiz "Class type is now E\n"
data_66_string: .asciiz "Class type is now D\n"
data_67_meth: .asciiz "value"
data_68_meth: .asciiz "i2a"
data_69_string: .asciiz " "
data_70_string: .asciiz "number "
data_71_string: .asciiz "is even!\n"
data_72_string: .asciiz "is odd!\n"
data_73_meth: .asciiz "class_type"
data_74_meth: .asciiz "menu"
data_75_string: .asciiz "a"
data_76_meth: .asciiz "get_int"
data_77_meth: .asciiz "method2"
data_78_string: .asciiz "b"
data_79_meth: .asciiz "method6"
data_80_meth: .asciiz "method3"
data_81_string: .asciiz "c"
data_82_meth: .asciiz "method4"
data_83_string: .asciiz "d"
data_84_string: .asciiz "e"
data_85_string: .asciiz "f"
data_86_string: .asciiz "g"
data_87_string: .asciiz "is divisible by 3.\n"
data_88_string: .asciiz "is not divisible by 3.\n"
data_89_string: .asciiz "h"
data_90_string: .asciiz "is equal to "
data_91_string: .asciiz "times 8 with a remainder of "
data_92_string: .asciiz "j"
data_93_string: .asciiz "q"
data_94_meth: .asciiz "method1"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Int_copy
Bool: .word Object_abort,Bool_type_name,Bool_copy
String: .word Object_abort,String_type_name,String_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,IO_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
A: .word Object_abort,A_type_name,A_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,A_method5
B: .word Object_abort,B_type_name,B_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,B_method5
C: .word Object_abort,C_type_name,C_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,C_method5,C_method6
D: .word Object_abort,D_type_name,D_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,B_method5,D_method7
E: .word Object_abort,E_type_name,E_copy,A_value,A_set_var,A_method1,A_method2,A_method3,A_method4,B_method5,D_method7,E_method6
A2I: .word Object_abort,A2I_type_name,A2I_copy,A2I_c2i,A2I_i2c,A2I_a2i,A2I_a2i_aux,A2I_i2a,A2I_i2a_aux
Main: .word Object_abort,Main_type_name,Main_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Main_menu,Main_prompt,Main_get_int,Main_is_even,Main_class_type,Main_print,Main_main

	.text
Void___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t0, 0 	#Save value 0 in register
	sw $t0, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Main___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_0_abort_msg 	#LOAD
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t0, 4($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_1_type_name_Object 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t5, Object 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_2_type_name_Int 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Int 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t6, data_3_type_name_Bool 	#LOAD
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t5, Bool 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_4_type_name_String 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, String 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_5_type_name_IO 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t2, IO 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_6_type_name_A 	#LOAD
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_copy:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, A 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t1) 	#Save value in attribute of index 0
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_7_type_name_B 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type B
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, B 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t2) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_8_type_name_C 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type C
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, C 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t7) 	#Load attribute in index 0
	sw $t8, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t2) 	#Save value in attribute of index 0
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D_type_name:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_9_type_name_D 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type D
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, D 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 0($t0) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_10_type_name_E 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type E
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, E 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t0) 	#Save value in attribute of index 0
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_11_type_name_A2I 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A2I
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t9, A2I 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_12_type_name_Main 	#LOAD
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t5, Main 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t3) 	#Save value in attribute of index 0
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 4($t3) 	#Load attribute in index 1
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t0) 	#Save value in attribute of index 1
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 8($t2) 	#Load attribute in index 2
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 8($t0) 	#Save value in attribute of index 2
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 12($t5) 	#Load attribute in index 3
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 12($t6) 	#Save value in attribute of index 3
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t4, -4($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t9, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t9, -8($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 5 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 8 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 0($fp) 	#Save obtained attribute in destination
	la $a0, 4($fp) 	#Calculate Lenght
	li $t8, 0 	#
loop1:
	lb $t0, 0($a0) 	#
	beqz $t0, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t8,  $t8, 1 	#
	j loop1 	#
exit1:
	sw $t8, 0($fp) 	#Save Calculated Length
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_13_sep_cat 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t1, -8($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 4($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, -4($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t0, -8($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 8($fp) 	#Save obtained attribute in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 12($fp) 	#Save obtained attribute in destination
	la $a0, 8($fp) 	#Calculate Lenght
	li $t5, 0 	#
loop2:
	lb $t3, 0($a0) 	#
	beqz $t3, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t5,  $t5, 1 	#
	j loop2 	#
exit2:
	sw $t5, 20($fp) 	#Save Calculated Length
	la $a0, 12($fp) 	#Calculate Lenght
	li $t4, 0 	#
loop3:
	lb $t6, 0($a0) 	#
	beqz $t6, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t4,  $t4, 1 	#
	j loop3 	#
exit3:
	sw $t4, 24($fp) 	#Save Calculated Length
	lw $t6, 24($fp) 	#
	lw $t3, 20($fp) 	#
	add $t5,  $t6, $t3 	#Plus
	sw $t5, 28($fp) 	#Save result of plus
	lw $t9, 28($fp) 	#Concat two Strings
	addi $t9,  $t9, 1 	#
	li $v0, 9 	#
	move $a0, $t9 	#
	syscall 	#
	la $t2, 0($v0) 	#
	la $a1, -8($fp) 	#
	la $a2, -4($fp) 	#
loop4:
	lb $t9, 0($a1) 	#
	beqz $t9, exit4 	#
	sb $t9, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t9, 0($a2) 	#
	sb $t9, 0($v0) 	#
	beqz $t9, exit5 	#
	addi $v0,  $v0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t2, 16($fp) 	#Save concated Strings
	lw $t5, 16($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -12($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 0($fp) 	#Save obtained attribute in destination
	lw $t8, -4($fp) 	#Obtain substring
	lw $t5, -8($fp) 	#
	li $v0, 9 	#
	move $a0, $t1 	#
	syscall 	#
	la $t3, 0($v0) 	#
	la $a1, 0($fp) 	#
	add $a1,  $a1, $t8 	#
loop6:
	lb $t1, 0($a1) 	#
	sb $t1, 0($v0) 	#
	beqz $t8, exit6 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t8,  $t8, 1 	#
	j loop6 	#
exit6:
	sw $t3, 4($fp) 	#Save substring
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, Object 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t4, Int 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, -4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t3) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, Bool 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, -4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t3) 	#Save value in attribute of index 0
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, String 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, -4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t6) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, A 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t7) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_var___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t4, 0 	#Load Int
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_value:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 0($fp) 	#Save obtained attribute in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_set_var:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -4($fp) 	#Obtain value from source dir
	lw $t9, -8($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t9) 	#Save value in attribute of index 0
	lw $t1, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method1:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method2:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 60 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t7, 0 	#Load Int
	sw $t7, 4($fp) 	#Save loaded value in destination
	lw $t1, 4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -8($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 8($fp) 	#Save obtained attribute in destination
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 12($fp) 	#Save obtained attribute in destination
	lw $t0, 12($fp) 	#
	lw $t1, 8($fp) 	#
	add $t3,  $t0, $t1 	#Plus
	sw $t3, 16($fp) 	#Save result of plus
	lw $t0, 16($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	jal B___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 24($fp) 	#Typeof
	lw $t4, -4($t1) 	#
	sw $t4, 28($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 36($fp) 	#Save loaded value in destination
	lw $t2, 36($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 44($fp) 	#Save loaded value in destination
	lw $t6, 44($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_16_meth 	#LOAD
	sw $t6, 52($fp) 	#Save loaded value in destination
	lw $t7, 52($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 28($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t5) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 32($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 48($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 56($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 40($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t8, 24($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 28($fp) 	#get type dir for Dynamic Call
	lw $t2, 16($t7) 	#Get method of index 4
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 20($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -60 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method3:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 56 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t8, 0 	#Load Int
	sw $t8, 4($fp) 	#Save loaded value in destination
	lw $t1, 4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 1 	#Load Int
	sw $t5, 12($fp) 	#Save loaded value in destination
	sw $t2, 12($fp) 	#Value is direction
	sw $t7, -4($fp) 	#Value is direction
	sub $t5,  $t2, $t7 	#Minus
	sw $t5, 8($fp) 	#Save result of minus
	lw $t6, 8($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 20($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 20($fp) 	#Typeof
	lw $t2, -4($t3) 	#
	sw $t2, 24($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 32($fp) 	#Save loaded value in destination
	lw $t8, 32($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_under 	#LOAD
	sw $t8, 40($fp) 	#Save loaded value in destination
	lw $t2, 40($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_16_meth 	#LOAD
	sw $t7, 48($fp) 	#Save loaded value in destination
	lw $t7, 48($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 24($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t6) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 28($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 28($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 44($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 52($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 36($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t1, 20($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 24($fp) 	#get type dir for Dynamic Call
	lw $t8, 16($t7) 	#Get method of index 4
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, 16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -56 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method4:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 136 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t0, -8($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 8($fp) 	#Save obtained attribute in destination
	sw $t0, 8($fp) 	#Value is direction
	sw $t9, 4($fp) 	#Value is direction
	sub $t4,  $t0, $t9 	#Minus
	sw $t4, 12($fp) 	#Save result of minus
	lw $t0, 12($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t0, 16($fp) 	#Mov comparisson value to register
	bgt $t3,  $t0, label_then_0 	#Compare values in registers and jump to label_then_0 if the second is greater than 0
	j label_else_0 	#Jump to label_else_0
label_then_0:
	li $t7, 0 	#Load Int
	sw $t7, 24($fp) 	#Save loaded value in destination
	lw $t1, 24($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 28($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t2) 	#Load attribute in index 0
	sw $t9, 32($fp) 	#Save obtained attribute in destination
	sw $t3, 28($fp) 	#Value is direction
	sw $t0, 32($fp) 	#Value is direction
	sub $t6,  $t3, $t0 	#Minus
	sw $t6, 36($fp) 	#Save result of minus
	lw $t9, 36($fp) 	#Obtain value to assign
	sw $t9, 20($fp) 	#Assign value
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 44($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 44($fp) 	#Typeof
	lw $t0, -4($t7) 	#
	sw $t0, 48($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 56($fp) 	#Save loaded value in destination
	lw $t2, 56($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 64($fp) 	#Save loaded value in destination
	lw $t4, 64($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_16_meth 	#LOAD
	sw $t6, 72($fp) 	#Save loaded value in destination
	lw $t5, 72($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 48($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t9) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 52($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 68($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 76($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 60($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t1, 44($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 20($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 48($fp) 	#get type dir for Dynamic Call
	lw $t0, 16($t1) 	#Get method of index 4
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 40($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
	j label_continue_0 	#Jump to label_continue_0
label_else_0:
	li $t8, 0 	#Load Int
	sw $t8, 80($fp) 	#Save loaded value in destination
	lw $t4, 80($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 84($fp) 	#Save obtained attribute in destination
	lw $t2, -8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 88($fp) 	#Save obtained attribute in destination
	sw $t6, 84($fp) 	#Value is direction
	sw $t0, 88($fp) 	#Value is direction
	sub $t8,  $t6, $t0 	#Minus
	sw $t8, 92($fp) 	#Save result of minus
	lw $t0, 92($fp) 	#Obtain value to assign
	sw $t0, 20($fp) 	#Assign value
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 100($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 100($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 104($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 112($fp) 	#Save loaded value in destination
	lw $t7, 112($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 120($fp) 	#Save loaded value in destination
	lw $t1, 120($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_16_meth 	#LOAD
	sw $t1, 128($fp) 	#Save loaded value in destination
	lw $t7, 128($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 104($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t4) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 52($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 124($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 132($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 116($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t2, 100($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 20($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 104($fp) 	#get type dir for Dynamic Call
	lw $t6, 16($t1) 	#Get method of index 4
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 96($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 96($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
label_continue_0:
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -136 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A_method5:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 120 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t0, 1 	#Load Int
	sw $t0, 4($fp) 	#Save loaded value in destination
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 8($fp) 	#Obtain value to assign
	sw $t4, 0($fp) 	#Assign value
	li $t8, 1 	#Load Int
	sw $t8, 16($fp) 	#Save loaded value in destination
	lw $t4, 16($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 20($fp) 	#Obtain value to assign
	sw $t3, 12($fp) 	#Assign value
label_while_label_0:
	lw $t8, 12($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 24($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 28($fp) 	#Save obtained attribute in destination
	sw $t6, 28($fp) 	#Value is direction
	sw $t3, 24($fp) 	#Value is direction
	sub $t0,  $t6, $t3 	#Minus
	sw $t0, 32($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 36($fp) 	#Save loaded value in destination
	lw $t0, 36($fp) 	#
	lw $t5, 32($fp) 	#
	add $t2,  $t0, $t5 	#Plus
	sw $t2, 32($fp) 	#Save result of plus
	lw $t5, 32($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t1, 40($fp) 	#Mov comparisson value to register
	bgt $t9,  $t1, label_loop_label_0 	#Compare values in registers and jump to label_loop_label_0 if the second is greater than 0
	j label_pool_label_0 	#Jump to label_pool_label_0
label_loop_label_0:
	lw $t0, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 44($fp) 	#Save obtained attribute in destination
	lw $t7, 12($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 48($fp) 	#Save obtained attribute in destination
	sw $t3, 44($fp) 	#Value is direction
	sw $t9, 48($fp) 	#Value is direction
	mult $t3, $t9 	#Mult
	mfhi $t3 	#
	sw $t3, 52($fp) 	#Save result of Mult
	lw $t9, 52($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
	lw $t1, 12($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 56($fp) 	#Save obtained attribute in destination
	li $t8, 1 	#Load Int
	sw $t8, 60($fp) 	#Save loaded value in destination
	lw $t6, 60($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 64($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 68($fp) 	#Save obtained attribute in destination
	lw $t0, 68($fp) 	#
	lw $t7, 56($fp) 	#
	add $t5,  $t0, $t7 	#Plus
	sw $t5, 72($fp) 	#Save result of plus
	lw $t1, 72($fp) 	#Obtain value to assign
	sw $t1, 12($fp) 	#Assign value
	j label_while_label_0 	#Jump to label_while_label_0
label_pool_label_0:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 76($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 84($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 84($fp) 	#Typeof
	lw $t5, -4($t1) 	#
	sw $t5, 88($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 96($fp) 	#Save loaded value in destination
	lw $t2, 96($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 104($fp) 	#Save loaded value in destination
	lw $t6, 104($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_16_meth 	#LOAD
	sw $t5, 112($fp) 	#Save loaded value in destination
	lw $t5, 112($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 88($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t6) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 92($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 92($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 108($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 116($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 100($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t9, 84($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 88($fp) 	#get type dir for Dynamic Call
	lw $t0, 16($t4) 	#Get method of index 4
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 80($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 80($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -120 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type B
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, B 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t8) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
B_method5:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 60 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t2, 0 	#Load Int
	sw $t2, 4($fp) 	#Save loaded value in destination
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 8($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 12($fp) 	#Save obtained attribute in destination
	sw $t8, 8($fp) 	#Value is direction
	sw $t4, 12($fp) 	#Value is direction
	mult $t8, $t4 	#Mult
	mfhi $t8 	#
	sw $t8, 16($fp) 	#Save result of Mult
	lw $t6, 16($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 24($fp) 	#Typeof
	lw $t6, -4($t9) 	#
	sw $t6, 28($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 36($fp) 	#Save loaded value in destination
	lw $t7, 36($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 44($fp) 	#Save loaded value in destination
	lw $t5, 44($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_16_meth 	#LOAD
	sw $t7, 52($fp) 	#Save loaded value in destination
	lw $t1, 52($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 28($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t8) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 32($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 48($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 56($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 40($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t2, 24($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 28($fp) 	#get type dir for Dynamic Call
	lw $t4, 16($t3) 	#Get method of index 4
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 20($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -60 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type C
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, C 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t1) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_method6:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 56 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t0, 0 	#Load Int
	sw $t0, 4($fp) 	#Save loaded value in destination
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 1 	#Load Int
	sw $t5, 12($fp) 	#Save loaded value in destination
	sw $t8, 12($fp) 	#Value is direction
	sw $t0, -4($fp) 	#Value is direction
	sub $t3,  $t8, $t0 	#Minus
	sw $t3, 8($fp) 	#Save result of minus
	lw $t6, 8($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 20($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 20($fp) 	#Typeof
	lw $t8, -4($t6) 	#
	sw $t8, 24($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 32($fp) 	#Save loaded value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 40($fp) 	#Save loaded value in destination
	lw $t1, 40($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_16_meth 	#LOAD
	sw $t6, 48($fp) 	#Save loaded value in destination
	lw $t3, 48($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 24($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t4) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 28($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 44($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 52($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 36($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t2, 20($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 24($fp) 	#get type dir for Dynamic Call
	lw $t7, 16($t4) 	#Get method of index 4
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -56 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
C_method5:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 72 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t6, 0 	#Load Int
	sw $t6, 4($fp) 	#Save loaded value in destination
	lw $t3, 4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 8($fp) 	#Save obtained attribute in destination
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 12($fp) 	#Save obtained attribute in destination
	sw $t7, 8($fp) 	#Value is direction
	sw $t9, 12($fp) 	#Value is direction
	mult $t7, $t9 	#Mult
	mfhi $t7 	#
	sw $t7, 16($fp) 	#Save result of Mult
	lw $t2, 16($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 20($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 24($fp) 	#Save obtained attribute in destination
	sw $t6, 20($fp) 	#Value is direction
	sw $t0, 24($fp) 	#Value is direction
	mult $t6, $t0 	#Mult
	mfhi $t6 	#
	sw $t6, 28($fp) 	#Save result of Mult
	lw $t3, 28($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 36($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 36($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 40($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 48($fp) 	#Save loaded value in destination
	lw $t1, 48($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 56($fp) 	#Save loaded value in destination
	lw $t8, 56($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_16_meth 	#LOAD
	sw $t1, 64($fp) 	#Save loaded value in destination
	lw $t8, 64($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 40($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t6) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 44($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 60($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 68($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 52($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t1, 36($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 40($fp) 	#get type dir for Dynamic Call
	lw $t4, 16($t0) 	#Get method of index 4
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -72 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type D
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t1, D 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t4) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
D_method7:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 252 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	lw $t5, 0($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t5) 	#Load attribute in index 0
	sw $t4, 8($fp) 	#Save obtained attribute in destination
	li $t2, 0 	#Load Int
	sw $t2, 12($fp) 	#Save loaded value in destination
	lw $t8, 12($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 16($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 20($fp) 	#Save obtained attribute in destination
	sw $t0, 20($fp) 	#Value is direction
	sw $t6, 8($fp) 	#Value is direction
	sub $t8,  $t0, $t6 	#Minus
	sw $t8, 24($fp) 	#Save result of minus
	lw $t6, 24($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t4, 28($fp) 	#Mov comparisson value to register
	bgt $t5,  $t4, label_then_1 	#Compare values in registers and jump to label_then_1 if the second is greater than 0
	j label_else_1 	#Jump to label_else_1
label_then_1:
	li $t8, 1 	#Load Int
	sw $t8, 40($fp) 	#Save loaded value in destination
	sw $t3, 40($fp) 	#Value is direction
	sw $t0, 0($fp) 	#Value is direction
	sub $t4,  $t3, $t0 	#Minus
	sw $t4, 36($fp) 	#Save result of minus
	lw $t3, -8($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 44($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 52($fp) 	#Save loaded value in destination
	lw $t1, 52($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 60($fp) 	#Save loaded value in destination
	lw $t7, 60($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_17_meth 	#LOAD
	sw $t4, 68($fp) 	#Save loaded value in destination
	lw $t4, 68($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 44($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t5) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 48($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 64($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 72($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 56($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 36($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 44($fp) 	#get type dir for Dynamic Call
	lw $t3, 40($t0) 	#Get method of index 10
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 32($fp) 	#Obtain value to assign
	sw $t7, 4($fp) 	#Assign value
	j label_continue_1 	#Jump to label_continue_1
label_else_1:
	li $t4, 0 	#Load Int
	sw $t4, 80($fp) 	#Save loaded value in destination
	lw $t5, 80($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 84($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 88($fp) 	#Save obtained attribute in destination
	lw $t9, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t9) 	#Load attribute in index 0
	sw $t8, 92($fp) 	#Save obtained attribute in destination
	sw $t6, 88($fp) 	#Value is direction
	sw $t4, 92($fp) 	#Value is direction
	sub $t2,  $t6, $t4 	#Minus
	sw $t2, 96($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 100($fp) 	#Save loaded value in destination
	sw $t8, 100($fp) 	#Value is direction
	sw $t6, 96($fp) 	#Value is direction
	sub $t9,  $t8, $t6 	#Minus
	sw $t9, 96($fp) 	#Save result of minus
	lw $t6, 96($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t9, 104($fp) 	#Mov comparisson value to register
	bgt $t1,  $t9, label_then_2 	#Compare values in registers and jump to label_then_2 if the second is greater than 0
	j label_else_2 	#Jump to label_else_2
label_then_2:
	li $t2, 1 	#Load Int
	sw $t2, 108($fp) 	#Save loaded value in destination
	lw $t5, 108($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 112($fp) 	#Obtain value to assign
	sw $t5, 76($fp) 	#Assign value
	j label_continue_2 	#Jump to label_continue_2
label_else_2:
	li $t2, 1 	#Load Int
	sw $t2, 120($fp) 	#Save loaded value in destination
	lw $t5, 120($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 124($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t6) 	#Load attribute in index 0
	sw $t8, 128($fp) 	#Save obtained attribute in destination
	lw $t1, 0($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 132($fp) 	#Save obtained attribute in destination
	sw $t3, 128($fp) 	#Value is direction
	sw $t8, 132($fp) 	#Value is direction
	sub $t7,  $t3, $t8 	#Minus
	sw $t7, 136($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 140($fp) 	#Save loaded value in destination
	sw $t5, 140($fp) 	#Value is direction
	sw $t2, 136($fp) 	#Value is direction
	sub $t9,  $t5, $t2 	#Minus
	sw $t9, 136($fp) 	#Save result of minus
	lw $t0, 136($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t2, 144($fp) 	#Mov comparisson value to register
	bgt $t0,  $t2, label_then_3 	#Compare values in registers and jump to label_then_3 if the second is greater than 0
	j label_else_3 	#Jump to label_else_3
label_then_3:
	li $t3, 0 	#Load Int
	sw $t3, 148($fp) 	#Save loaded value in destination
	lw $t8, 148($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 152($fp) 	#Obtain value to assign
	sw $t2, 116($fp) 	#Assign value
	j label_continue_3 	#Jump to label_continue_3
label_else_3:
	li $t7, 2 	#Load Int
	sw $t7, 160($fp) 	#Save loaded value in destination
	lw $t1, 160($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 164($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 164($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 168($fp) 	#Save obtained attribute in destination
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 172($fp) 	#Save obtained attribute in destination
	sw $t7, 168($fp) 	#Value is direction
	sw $t9, 172($fp) 	#Value is direction
	sub $t3,  $t7, $t9 	#Minus
	sw $t3, 176($fp) 	#Save result of minus
	li $t7, 1 	#Load Int
	sw $t7, 180($fp) 	#Save loaded value in destination
	sw $t6, 180($fp) 	#Value is direction
	sw $t2, 176($fp) 	#Value is direction
	sub $t3,  $t6, $t2 	#Minus
	sw $t3, 176($fp) 	#Save result of minus
	lw $t9, 176($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t4, 184($fp) 	#Mov comparisson value to register
	bgt $t5,  $t4, label_then_4 	#Compare values in registers and jump to label_then_4 if the second is greater than 0
	j label_else_4 	#Jump to label_else_4
label_then_4:
	li $t3, 0 	#Load Int
	sw $t3, 188($fp) 	#Save loaded value in destination
	lw $t0, 188($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 192($fp) 	#Obtain value to assign
	sw $t6, 156($fp) 	#Assign value
	j label_continue_4 	#Jump to label_continue_4
label_else_4:
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 200($fp) 	#Save obtained attribute in destination
	li $t1, 3 	#Load Int
	sw $t1, 204($fp) 	#Save loaded value in destination
	lw $t8, 204($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 208($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 212($fp) 	#Save obtained attribute in destination
	sw $t6, 200($fp) 	#Value is direction
	sw $t2, 212($fp) 	#Value is direction
	sub $t4,  $t6, $t2 	#Minus
	sw $t4, 216($fp) 	#Save result of minus
	lw $t4, -8($fp) 	#Typeof
	lw $t6, -4($t4) 	#
	sw $t6, 220($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 228($fp) 	#Save loaded value in destination
	lw $t0, 228($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 236($fp) 	#Save loaded value in destination
	lw $t9, 236($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_17_meth 	#LOAD
	sw $t1, 244($fp) 	#Save loaded value in destination
	lw $t4, 244($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 220($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t5) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 48($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 240($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 248($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 232($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 216($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 220($fp) 	#get type dir for Dynamic Call
	lw $t7, 40($t3) 	#Get method of index 10
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 196($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 196($fp) 	#Obtain value to assign
	sw $t0, 156($fp) 	#Assign value
label_continue_4:
	lw $t8, 156($fp) 	#Obtain value to assign
	sw $t8, 116($fp) 	#Assign value
label_continue_3:
	lw $t8, 116($fp) 	#Obtain value to assign
	sw $t8, 76($fp) 	#Assign value
label_continue_2:
	lw $t4, 76($fp) 	#Obtain value to assign
	sw $t4, 4($fp) 	#Assign value
label_continue_1:
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -252 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type E
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, E 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal A_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t3) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
E_method6:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 68 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t7, 0 	#Load Int
	sw $t7, 4($fp) 	#Save loaded value in destination
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 8($fp) 	#Save obtained attribute in destination
	li $t4, 8 	#Load Int
	sw $t4, 12($fp) 	#Save loaded value in destination
	lw $t4, 12($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 16($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 20($fp) 	#Save obtained attribute in destination
	sw $t5, 8($fp) 	#Value is direction
	sw $t1, 20($fp) 	#Value is direction
	div $t5, $t1 	#Div
	mflo $t5 	#
	sw $t5, 24($fp) 	#Save result of Div
	lw $t5, 24($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t0, 32($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 36($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 44($fp) 	#Save loaded value in destination
	lw $t2, 44($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 52($fp) 	#Save loaded value in destination
	lw $t4, 52($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_16_meth 	#LOAD
	sw $t5, 60($fp) 	#Save loaded value in destination
	lw $t3, 60($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 36($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t4) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 40($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 56($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 64($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 48($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 36($fp) 	#get type dir for Dynamic Call
	lw $t7, 16($t1) 	#Get method of index 4
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 28($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 28($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -68 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A2I
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t7, A2I 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_c2i:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 444 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t3) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	la $t0, data_18_string 	#LOAD
	sw $t0, 8($fp) 	#Save loaded value in destination
	lw $t5, 8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 12($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t5) 	#Load attribute in index 0
	sw $t9, 16($fp) 	#Save obtained attribute in destination
	sw $t1, 4($fp) 	#Value is direction
	sw $t6, 16($fp) 	#Value is direction
	sub $t8,  $t1, $t6 	#Minus
	sw $t8, 20($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 24($fp) 	#Save loaded value in destination
	sw $t3, 24($fp) 	#Value is direction
	sw $t5, 20($fp) 	#Value is direction
	sub $t2,  $t3, $t5 	#Minus
	sw $t2, 20($fp) 	#Save result of minus
	lw $t3, 20($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t7, 28($fp) 	#Mov comparisson value to register
	bgt $t6,  $t7, label_then_5 	#Compare values in registers and jump to label_then_5 if the second is greater than 0
	j label_else_5 	#Jump to label_else_5
label_then_5:
	li $t6, 0 	#Load Int
	sw $t6, 32($fp) 	#Save loaded value in destination
	lw $t8, 32($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 36($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	j label_continue_5 	#Jump to label_continue_5
label_else_5:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t0) 	#Load attribute in index 0
	sw $t4, 44($fp) 	#Save obtained attribute in destination
	la $t6, data_19_string 	#LOAD
	sw $t6, 48($fp) 	#Save loaded value in destination
	lw $t2, 48($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 52($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 56($fp) 	#Save obtained attribute in destination
	sw $t5, 44($fp) 	#Value is direction
	sw $t3, 56($fp) 	#Value is direction
	sub $t7,  $t5, $t3 	#Minus
	sw $t7, 60($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 64($fp) 	#Save loaded value in destination
	sw $t0, 64($fp) 	#Value is direction
	sw $t8, 60($fp) 	#Value is direction
	sub $t3,  $t0, $t8 	#Minus
	sw $t3, 60($fp) 	#Save result of minus
	lw $t1, 60($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t4, 68($fp) 	#Mov comparisson value to register
	bgt $t6,  $t4, label_then_6 	#Compare values in registers and jump to label_then_6 if the second is greater than 0
	j label_else_6 	#Jump to label_else_6
label_then_6:
	li $t6, 1 	#Load Int
	sw $t6, 72($fp) 	#Save loaded value in destination
	lw $t1, 72($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 76($fp) 	#Obtain value to assign
	sw $t8, 40($fp) 	#Assign value
	j label_continue_6 	#Jump to label_continue_6
label_else_6:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 84($fp) 	#Save obtained attribute in destination
	la $t3, data_20_string 	#LOAD
	sw $t3, 88($fp) 	#Save loaded value in destination
	lw $t8, 88($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 92($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 96($fp) 	#Save obtained attribute in destination
	sw $t2, 84($fp) 	#Value is direction
	sw $t0, 96($fp) 	#Value is direction
	sub $t7,  $t2, $t0 	#Minus
	sw $t7, 100($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 104($fp) 	#Save loaded value in destination
	sw $t6, 104($fp) 	#Value is direction
	sw $t7, 100($fp) 	#Value is direction
	sub $t3,  $t6, $t7 	#Minus
	sw $t3, 100($fp) 	#Save result of minus
	lw $t2, 100($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t8, 108($fp) 	#Mov comparisson value to register
	bgt $t4,  $t8, label_then_7 	#Compare values in registers and jump to label_then_7 if the second is greater than 0
	j label_else_7 	#Jump to label_else_7
label_then_7:
	li $t2, 2 	#Load Int
	sw $t2, 112($fp) 	#Save loaded value in destination
	lw $t7, 112($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 116($fp) 	#Obtain value to assign
	sw $t5, 80($fp) 	#Assign value
	j label_continue_7 	#Jump to label_continue_7
label_else_7:
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 124($fp) 	#Save obtained attribute in destination
	la $t0, data_21_string 	#LOAD
	sw $t0, 128($fp) 	#Save loaded value in destination
	lw $t7, 128($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 132($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t4) 	#Load attribute in index 0
	sw $t8, 136($fp) 	#Save obtained attribute in destination
	sw $t4, 124($fp) 	#Value is direction
	sw $t3, 136($fp) 	#Value is direction
	sub $t7,  $t4, $t3 	#Minus
	sw $t7, 140($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 144($fp) 	#Save loaded value in destination
	sw $t3, 144($fp) 	#Value is direction
	sw $t9, 140($fp) 	#Value is direction
	sub $t4,  $t3, $t9 	#Minus
	sw $t4, 140($fp) 	#Save result of minus
	lw $t1, 140($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t2, 148($fp) 	#Mov comparisson value to register
	bgt $t8,  $t2, label_then_8 	#Compare values in registers and jump to label_then_8 if the second is greater than 0
	j label_else_8 	#Jump to label_else_8
label_then_8:
	li $t3, 3 	#Load Int
	sw $t3, 152($fp) 	#Save loaded value in destination
	lw $t2, 152($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 156($fp) 	#Obtain value to assign
	sw $t2, 120($fp) 	#Assign value
	j label_continue_8 	#Jump to label_continue_8
label_else_8:
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t8) 	#Load attribute in index 0
	sw $t2, 164($fp) 	#Save obtained attribute in destination
	la $t4, data_22_string 	#LOAD
	sw $t4, 168($fp) 	#Save loaded value in destination
	lw $t9, 168($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 172($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 176($fp) 	#Save obtained attribute in destination
	sw $t0, 164($fp) 	#Value is direction
	sw $t1, 176($fp) 	#Value is direction
	sub $t7,  $t0, $t1 	#Minus
	sw $t7, 180($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 184($fp) 	#Save loaded value in destination
	sw $t2, 184($fp) 	#Value is direction
	sw $t1, 180($fp) 	#Value is direction
	sub $t5,  $t2, $t1 	#Minus
	sw $t5, 180($fp) 	#Save result of minus
	lw $t9, 180($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t7, 188($fp) 	#Mov comparisson value to register
	bgt $t1,  $t7, label_then_9 	#Compare values in registers and jump to label_then_9 if the second is greater than 0
	j label_else_9 	#Jump to label_else_9
label_then_9:
	li $t8, 4 	#Load Int
	sw $t8, 192($fp) 	#Save loaded value in destination
	lw $t1, 192($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 196($fp) 	#Obtain value to assign
	sw $t3, 160($fp) 	#Assign value
	j label_continue_9 	#Jump to label_continue_9
label_else_9:
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 204($fp) 	#Save obtained attribute in destination
	la $t9, data_23_string 	#LOAD
	sw $t9, 208($fp) 	#Save loaded value in destination
	lw $t5, 208($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 212($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t4) 	#Load attribute in index 0
	sw $t8, 216($fp) 	#Save obtained attribute in destination
	sw $t4, 204($fp) 	#Value is direction
	sw $t7, 216($fp) 	#Value is direction
	sub $t3,  $t4, $t7 	#Minus
	sw $t3, 220($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 224($fp) 	#Save loaded value in destination
	sw $t8, 224($fp) 	#Value is direction
	sw $t1, 220($fp) 	#Value is direction
	sub $t0,  $t8, $t1 	#Minus
	sw $t0, 220($fp) 	#Save result of minus
	lw $t5, 220($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 228($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t4, 228($fp) 	#Mov comparisson value to register
	bgt $t1,  $t4, label_then_10 	#Compare values in registers and jump to label_then_10 if the second is greater than 0
	j label_else_10 	#Jump to label_else_10
label_then_10:
	li $t8, 5 	#Load Int
	sw $t8, 232($fp) 	#Save loaded value in destination
	lw $t1, 232($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 236($fp) 	#Obtain value to assign
	sw $t0, 200($fp) 	#Assign value
	j label_continue_10 	#Jump to label_continue_10
label_else_10:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 244($fp) 	#Save obtained attribute in destination
	la $t0, data_24_string 	#LOAD
	sw $t0, 248($fp) 	#Save loaded value in destination
	lw $t5, 248($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 252($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 256($fp) 	#Save obtained attribute in destination
	sw $t8, 244($fp) 	#Value is direction
	sw $t7, 256($fp) 	#Value is direction
	sub $t1,  $t8, $t7 	#Minus
	sw $t1, 260($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 264($fp) 	#Save loaded value in destination
	sw $t8, 264($fp) 	#Value is direction
	sw $t2, 260($fp) 	#Value is direction
	sub $t9,  $t8, $t2 	#Minus
	sw $t9, 260($fp) 	#Save result of minus
	lw $t4, 260($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t8, 268($fp) 	#Mov comparisson value to register
	bgt $t5,  $t8, label_then_11 	#Compare values in registers and jump to label_then_11 if the second is greater than 0
	j label_else_11 	#Jump to label_else_11
label_then_11:
	li $t6, 6 	#Load Int
	sw $t6, 272($fp) 	#Save loaded value in destination
	lw $t5, 272($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 276($fp) 	#Obtain value to assign
	sw $t8, 240($fp) 	#Assign value
	j label_continue_11 	#Jump to label_continue_11
label_else_11:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t0) 	#Load attribute in index 0
	sw $t1, 284($fp) 	#Save obtained attribute in destination
	la $t2, data_25_string 	#LOAD
	sw $t2, 288($fp) 	#Save loaded value in destination
	lw $t2, 288($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 292($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 292($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 296($fp) 	#Save obtained attribute in destination
	sw $t9, 284($fp) 	#Value is direction
	sw $t7, 296($fp) 	#Value is direction
	sub $t2,  $t9, $t7 	#Minus
	sw $t2, 300($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 304($fp) 	#Save loaded value in destination
	sw $t4, 304($fp) 	#Value is direction
	sw $t0, 300($fp) 	#Value is direction
	sub $t9,  $t4, $t0 	#Minus
	sw $t9, 300($fp) 	#Save result of minus
	lw $t4, 300($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t8, 308($fp) 	#Mov comparisson value to register
	bgt $t5,  $t8, label_then_12 	#Compare values in registers and jump to label_then_12 if the second is greater than 0
	j label_else_12 	#Jump to label_else_12
label_then_12:
	li $t0, 7 	#Load Int
	sw $t0, 312($fp) 	#Save loaded value in destination
	lw $t5, 312($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 316($fp) 	#Obtain value to assign
	sw $t2, 280($fp) 	#Assign value
	j label_continue_12 	#Jump to label_continue_12
label_else_12:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 324($fp) 	#Save obtained attribute in destination
	la $t2, data_26_string 	#LOAD
	sw $t2, 328($fp) 	#Save loaded value in destination
	lw $t8, 328($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 332($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 336($fp) 	#Save obtained attribute in destination
	sw $t4, 324($fp) 	#Value is direction
	sw $t3, 336($fp) 	#Value is direction
	sub $t9,  $t4, $t3 	#Minus
	sw $t9, 340($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 344($fp) 	#Save loaded value in destination
	sw $t4, 344($fp) 	#Value is direction
	sw $t8, 340($fp) 	#Value is direction
	sub $t5,  $t4, $t8 	#Minus
	sw $t5, 340($fp) 	#Save result of minus
	lw $t5, 340($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t6, 348($fp) 	#Mov comparisson value to register
	bgt $t2,  $t6, label_then_13 	#Compare values in registers and jump to label_then_13 if the second is greater than 0
	j label_else_13 	#Jump to label_else_13
label_then_13:
	li $t2, 8 	#Load Int
	sw $t2, 352($fp) 	#Save loaded value in destination
	lw $t7, 352($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 356($fp) 	#Obtain value to assign
	sw $t2, 320($fp) 	#Assign value
	j label_continue_13 	#Jump to label_continue_13
label_else_13:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 364($fp) 	#Save obtained attribute in destination
	la $t3, data_27_string 	#LOAD
	sw $t3, 368($fp) 	#Save loaded value in destination
	lw $t8, 368($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 372($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 372($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t7) 	#Load attribute in index 0
	sw $t2, 376($fp) 	#Save obtained attribute in destination
	sw $t8, 364($fp) 	#Value is direction
	sw $t6, 376($fp) 	#Value is direction
	sub $t5,  $t8, $t6 	#Minus
	sw $t5, 380($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 384($fp) 	#Save loaded value in destination
	sw $t8, 384($fp) 	#Value is direction
	sw $t4, 380($fp) 	#Value is direction
	sub $t6,  $t8, $t4 	#Minus
	sw $t6, 380($fp) 	#Save result of minus
	lw $t7, 380($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 388($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t0, 388($fp) 	#Mov comparisson value to register
	bgt $t4,  $t0, label_then_14 	#Compare values in registers and jump to label_then_14 if the second is greater than 0
	j label_else_14 	#Jump to label_else_14
label_then_14:
	li $t5, 9 	#Load Int
	sw $t5, 392($fp) 	#Save loaded value in destination
	lw $t2, 392($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 396($fp) 	#Obtain value to assign
	sw $t4, 360($fp) 	#Assign value
	j label_continue_14 	#Jump to label_continue_14
label_else_14:
	lw $t1, -8($fp) 	#Typeof
	lw $t0, -4($t1) 	#
	sw $t0, 404($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 412($fp) 	#Save loaded value in destination
	lw $t9, 412($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 416($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 420($fp) 	#Save loaded value in destination
	lw $t9, 420($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 424($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_28_meth 	#LOAD
	sw $t9, 428($fp) 	#Save loaded value in destination
	lw $t0, 428($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 432($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 404($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t9) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 408($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 408($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 424($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 432($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 416($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 404($fp) 	#get type dir for Dynamic Call
	lw $t3, 0($t0) 	#Get method of index 0
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 400($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	li $t3, 0 	#Load Int
	sw $t3, 436($fp) 	#Save loaded value in destination
	lw $t9, 436($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 440($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 440($fp) 	#Obtain value to assign
	sw $t1, 360($fp) 	#Assign value
label_continue_14:
	lw $t5, 360($fp) 	#Obtain value to assign
	sw $t5, 320($fp) 	#Assign value
label_continue_13:
	lw $t4, 320($fp) 	#Obtain value to assign
	sw $t4, 280($fp) 	#Assign value
label_continue_12:
	lw $t6, 280($fp) 	#Obtain value to assign
	sw $t6, 240($fp) 	#Assign value
label_continue_11:
	lw $t3, 240($fp) 	#Obtain value to assign
	sw $t3, 200($fp) 	#Assign value
label_continue_10:
	lw $t5, 200($fp) 	#Obtain value to assign
	sw $t5, 160($fp) 	#Assign value
label_continue_9:
	lw $t2, 160($fp) 	#Obtain value to assign
	sw $t2, 120($fp) 	#Assign value
label_continue_8:
	lw $t4, 120($fp) 	#Obtain value to assign
	sw $t4, 80($fp) 	#Assign value
label_continue_7:
	lw $t8, 80($fp) 	#Obtain value to assign
	sw $t8, 40($fp) 	#Assign value
label_continue_6:
	lw $t0, 40($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
label_continue_5:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -444 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2c:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 444 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	li $t5, 0 	#Load Int
	sw $t5, 8($fp) 	#Save loaded value in destination
	lw $t9, 8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 12($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 16($fp) 	#Save obtained attribute in destination
	sw $t4, 4($fp) 	#Value is direction
	sw $t9, 16($fp) 	#Value is direction
	sub $t8,  $t4, $t9 	#Minus
	sw $t8, 20($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 24($fp) 	#Save loaded value in destination
	sw $t7, 24($fp) 	#Value is direction
	sw $t5, 20($fp) 	#Value is direction
	sub $t9,  $t7, $t5 	#Minus
	sw $t9, 20($fp) 	#Save result of minus
	lw $t7, 20($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t2, 28($fp) 	#Mov comparisson value to register
	bgt $t9,  $t2, label_then_15 	#Compare values in registers and jump to label_then_15 if the second is greater than 0
	j label_else_15 	#Jump to label_else_15
label_then_15:
	la $t3, data_18_string 	#LOAD
	sw $t3, 32($fp) 	#Save loaded value in destination
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 36($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	j label_continue_15 	#Jump to label_continue_15
label_else_15:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t0) 	#Load attribute in index 0
	sw $t1, 44($fp) 	#Save obtained attribute in destination
	li $t6, 1 	#Load Int
	sw $t6, 48($fp) 	#Save loaded value in destination
	lw $t6, 48($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 52($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t6) 	#Load attribute in index 0
	sw $t7, 56($fp) 	#Save obtained attribute in destination
	sw $t7, 44($fp) 	#Value is direction
	sw $t8, 56($fp) 	#Value is direction
	sub $t2,  $t7, $t8 	#Minus
	sw $t2, 60($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 64($fp) 	#Save loaded value in destination
	sw $t6, 64($fp) 	#Value is direction
	sw $t9, 60($fp) 	#Value is direction
	sub $t2,  $t6, $t9 	#Minus
	sw $t2, 60($fp) 	#Save result of minus
	lw $t1, 60($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t9, 68($fp) 	#Mov comparisson value to register
	bgt $t8,  $t9, label_then_16 	#Compare values in registers and jump to label_then_16 if the second is greater than 0
	j label_else_16 	#Jump to label_else_16
label_then_16:
	la $t0, data_19_string 	#LOAD
	sw $t0, 72($fp) 	#Save loaded value in destination
	lw $t2, 72($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 76($fp) 	#Obtain value to assign
	sw $t2, 40($fp) 	#Assign value
	j label_continue_16 	#Jump to label_continue_16
label_else_16:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 84($fp) 	#Save obtained attribute in destination
	li $t4, 2 	#Load Int
	sw $t4, 88($fp) 	#Save loaded value in destination
	lw $t5, 88($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 92($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 96($fp) 	#Save obtained attribute in destination
	sw $t3, 84($fp) 	#Value is direction
	sw $t1, 96($fp) 	#Value is direction
	sub $t5,  $t3, $t1 	#Minus
	sw $t5, 100($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 104($fp) 	#Save loaded value in destination
	sw $t5, 104($fp) 	#Value is direction
	sw $t6, 100($fp) 	#Value is direction
	sub $t9,  $t5, $t6 	#Minus
	sw $t9, 100($fp) 	#Save result of minus
	lw $t0, 100($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t1, 108($fp) 	#Mov comparisson value to register
	bgt $t3,  $t1, label_then_17 	#Compare values in registers and jump to label_then_17 if the second is greater than 0
	j label_else_17 	#Jump to label_else_17
label_then_17:
	la $t8, data_20_string 	#LOAD
	sw $t8, 112($fp) 	#Save loaded value in destination
	lw $t6, 112($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 116($fp) 	#Obtain value to assign
	sw $t3, 80($fp) 	#Assign value
	j label_continue_17 	#Jump to label_continue_17
label_else_17:
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 124($fp) 	#Save obtained attribute in destination
	li $t4, 3 	#Load Int
	sw $t4, 128($fp) 	#Save loaded value in destination
	lw $t6, 128($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 132($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 136($fp) 	#Save obtained attribute in destination
	sw $t8, 124($fp) 	#Value is direction
	sw $t0, 136($fp) 	#Value is direction
	sub $t5,  $t8, $t0 	#Minus
	sw $t5, 140($fp) 	#Save result of minus
	li $t7, 1 	#Load Int
	sw $t7, 144($fp) 	#Save loaded value in destination
	sw $t0, 144($fp) 	#Value is direction
	sw $t9, 140($fp) 	#Value is direction
	sub $t7,  $t0, $t9 	#Minus
	sw $t7, 140($fp) 	#Save result of minus
	lw $t0, 140($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t1, 148($fp) 	#Mov comparisson value to register
	bgt $t7,  $t1, label_then_18 	#Compare values in registers and jump to label_then_18 if the second is greater than 0
	j label_else_18 	#Jump to label_else_18
label_then_18:
	la $t5, data_21_string 	#LOAD
	sw $t5, 152($fp) 	#Save loaded value in destination
	lw $t5, 152($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 156($fp) 	#Obtain value to assign
	sw $t5, 120($fp) 	#Assign value
	j label_continue_18 	#Jump to label_continue_18
label_else_18:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 164($fp) 	#Save obtained attribute in destination
	li $t9, 4 	#Load Int
	sw $t9, 168($fp) 	#Save loaded value in destination
	lw $t8, 168($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 172($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t8) 	#Load attribute in index 0
	sw $t0, 176($fp) 	#Save obtained attribute in destination
	sw $t7, 164($fp) 	#Value is direction
	sw $t4, 176($fp) 	#Value is direction
	sub $t3,  $t7, $t4 	#Minus
	sw $t3, 180($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 184($fp) 	#Save loaded value in destination
	sw $t9, 184($fp) 	#Value is direction
	sw $t5, 180($fp) 	#Value is direction
	sub $t4,  $t9, $t5 	#Minus
	sw $t4, 180($fp) 	#Save result of minus
	lw $t7, 180($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t9, 188($fp) 	#Mov comparisson value to register
	bgt $t1,  $t9, label_then_19 	#Compare values in registers and jump to label_then_19 if the second is greater than 0
	j label_else_19 	#Jump to label_else_19
label_then_19:
	la $t9, data_22_string 	#LOAD
	sw $t9, 192($fp) 	#Save loaded value in destination
	lw $t3, 192($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 196($fp) 	#Obtain value to assign
	sw $t3, 160($fp) 	#Assign value
	j label_continue_19 	#Jump to label_continue_19
label_else_19:
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 204($fp) 	#Save obtained attribute in destination
	li $t8, 5 	#Load Int
	sw $t8, 208($fp) 	#Save loaded value in destination
	lw $t2, 208($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 212($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 216($fp) 	#Save obtained attribute in destination
	sw $t9, 204($fp) 	#Value is direction
	sw $t4, 216($fp) 	#Value is direction
	sub $t8,  $t9, $t4 	#Minus
	sw $t8, 220($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 224($fp) 	#Save loaded value in destination
	sw $t9, 224($fp) 	#Value is direction
	sw $t5, 220($fp) 	#Value is direction
	sub $t4,  $t9, $t5 	#Minus
	sw $t4, 220($fp) 	#Save result of minus
	lw $t7, 220($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 228($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t7, 228($fp) 	#Mov comparisson value to register
	bgt $t8,  $t7, label_then_20 	#Compare values in registers and jump to label_then_20 if the second is greater than 0
	j label_else_20 	#Jump to label_else_20
label_then_20:
	la $t6, data_23_string 	#LOAD
	sw $t6, 232($fp) 	#Save loaded value in destination
	lw $t3, 232($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 236($fp) 	#Obtain value to assign
	sw $t3, 200($fp) 	#Assign value
	j label_continue_20 	#Jump to label_continue_20
label_else_20:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 244($fp) 	#Save obtained attribute in destination
	li $t7, 6 	#Load Int
	sw $t7, 248($fp) 	#Save loaded value in destination
	lw $t1, 248($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 252($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 256($fp) 	#Save obtained attribute in destination
	sw $t2, 244($fp) 	#Value is direction
	sw $t6, 256($fp) 	#Value is direction
	sub $t0,  $t2, $t6 	#Minus
	sw $t0, 260($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 264($fp) 	#Save loaded value in destination
	sw $t0, 264($fp) 	#Value is direction
	sw $t4, 260($fp) 	#Value is direction
	sub $t3,  $t0, $t4 	#Minus
	sw $t3, 260($fp) 	#Save result of minus
	lw $t4, 260($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t8, 268($fp) 	#Mov comparisson value to register
	bgt $t6,  $t8, label_then_21 	#Compare values in registers and jump to label_then_21 if the second is greater than 0
	j label_else_21 	#Jump to label_else_21
label_then_21:
	la $t7, data_24_string 	#LOAD
	sw $t7, 272($fp) 	#Save loaded value in destination
	lw $t7, 272($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 276($fp) 	#Obtain value to assign
	sw $t5, 240($fp) 	#Assign value
	j label_continue_21 	#Jump to label_continue_21
label_else_21:
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 284($fp) 	#Save obtained attribute in destination
	li $t0, 7 	#Load Int
	sw $t0, 288($fp) 	#Save loaded value in destination
	lw $t8, 288($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 292($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 292($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 296($fp) 	#Save obtained attribute in destination
	sw $t0, 284($fp) 	#Value is direction
	sw $t6, 296($fp) 	#Value is direction
	sub $t3,  $t0, $t6 	#Minus
	sw $t3, 300($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 304($fp) 	#Save loaded value in destination
	sw $t6, 304($fp) 	#Value is direction
	sw $t9, 300($fp) 	#Value is direction
	sub $t4,  $t6, $t9 	#Minus
	sw $t4, 300($fp) 	#Save result of minus
	lw $t7, 300($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t6, 308($fp) 	#Mov comparisson value to register
	bgt $t7,  $t6, label_then_22 	#Compare values in registers and jump to label_then_22 if the second is greater than 0
	j label_else_22 	#Jump to label_else_22
label_then_22:
	la $t5, data_25_string 	#LOAD
	sw $t5, 312($fp) 	#Save loaded value in destination
	lw $t1, 312($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 316($fp) 	#Obtain value to assign
	sw $t2, 280($fp) 	#Assign value
	j label_continue_22 	#Jump to label_continue_22
label_else_22:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 324($fp) 	#Save obtained attribute in destination
	li $t7, 8 	#Load Int
	sw $t7, 328($fp) 	#Save loaded value in destination
	lw $t0, 328($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 332($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t3) 	#Load attribute in index 0
	sw $t9, 336($fp) 	#Save obtained attribute in destination
	sw $t8, 324($fp) 	#Value is direction
	sw $t3, 336($fp) 	#Value is direction
	sub $t6,  $t8, $t3 	#Minus
	sw $t6, 340($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 344($fp) 	#Save loaded value in destination
	sw $t3, 344($fp) 	#Value is direction
	sw $t8, 340($fp) 	#Value is direction
	sub $t7,  $t3, $t8 	#Minus
	sw $t7, 340($fp) 	#Save result of minus
	lw $t4, 340($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t6, 348($fp) 	#Mov comparisson value to register
	bgt $t4,  $t6, label_then_23 	#Compare values in registers and jump to label_then_23 if the second is greater than 0
	j label_else_23 	#Jump to label_else_23
label_then_23:
	la $t6, data_26_string 	#LOAD
	sw $t6, 352($fp) 	#Save loaded value in destination
	lw $t5, 352($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 356($fp) 	#Obtain value to assign
	sw $t3, 320($fp) 	#Assign value
	j label_continue_23 	#Jump to label_continue_23
label_else_23:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 364($fp) 	#Save obtained attribute in destination
	li $t0, 9 	#Load Int
	sw $t0, 368($fp) 	#Save loaded value in destination
	lw $t5, 368($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 372($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 372($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t7) 	#Load attribute in index 0
	sw $t8, 376($fp) 	#Save obtained attribute in destination
	sw $t4, 364($fp) 	#Value is direction
	sw $t2, 376($fp) 	#Value is direction
	sub $t5,  $t4, $t2 	#Minus
	sw $t5, 380($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 384($fp) 	#Save loaded value in destination
	sw $t9, 384($fp) 	#Value is direction
	sw $t1, 380($fp) 	#Value is direction
	sub $t7,  $t9, $t1 	#Minus
	sw $t7, 380($fp) 	#Save result of minus
	lw $t7, 380($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 388($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t0, 388($fp) 	#Mov comparisson value to register
	bgt $t8,  $t0, label_then_24 	#Compare values in registers and jump to label_then_24 if the second is greater than 0
	j label_else_24 	#Jump to label_else_24
label_then_24:
	la $t8, data_27_string 	#LOAD
	sw $t8, 392($fp) 	#Save loaded value in destination
	lw $t9, 392($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 396($fp) 	#Obtain value to assign
	sw $t9, 360($fp) 	#Assign value
	j label_continue_24 	#Jump to label_continue_24
label_else_24:
	lw $t8, -8($fp) 	#Typeof
	lw $t6, -4($t8) 	#
	sw $t6, 404($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 412($fp) 	#Save loaded value in destination
	lw $t1, 412($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 416($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 420($fp) 	#Save loaded value in destination
	lw $t1, 420($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 424($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_28_meth 	#LOAD
	sw $t6, 428($fp) 	#Save loaded value in destination
	lw $t1, 428($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 432($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 404($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t4) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 408($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 408($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 424($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 432($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 416($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 404($fp) 	#get type dir for Dynamic Call
	lw $t5, 0($t4) 	#Get method of index 0
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 400($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	la $t3, data_29_string 	#LOAD
	sw $t3, 436($fp) 	#Save loaded value in destination
	lw $t0, 436($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 440($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 440($fp) 	#Obtain value to assign
	sw $t5, 360($fp) 	#Assign value
label_continue_24:
	lw $t6, 360($fp) 	#Obtain value to assign
	sw $t6, 320($fp) 	#Assign value
label_continue_23:
	lw $t0, 320($fp) 	#Obtain value to assign
	sw $t0, 280($fp) 	#Assign value
label_continue_22:
	lw $t9, 280($fp) 	#Obtain value to assign
	sw $t9, 240($fp) 	#Assign value
label_continue_21:
	lw $t6, 240($fp) 	#Obtain value to assign
	sw $t6, 200($fp) 	#Assign value
label_continue_20:
	lw $t9, 200($fp) 	#Obtain value to assign
	sw $t9, 160($fp) 	#Assign value
label_continue_19:
	lw $t0, 160($fp) 	#Obtain value to assign
	sw $t0, 120($fp) 	#Assign value
label_continue_18:
	lw $t7, 120($fp) 	#Obtain value to assign
	sw $t7, 80($fp) 	#Assign value
label_continue_17:
	lw $t3, 80($fp) 	#Obtain value to assign
	sw $t3, 40($fp) 	#Assign value
label_continue_16:
	lw $t1, 40($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
label_continue_15:
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -444 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_a2i:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 560 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 8($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 16($fp) 	#Save loaded value in destination
	lw $t7, 16($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 24($fp) 	#Save loaded value in destination
	lw $t4, 24($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_30_meth 	#LOAD
	sw $t4, 32($fp) 	#Save loaded value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 8($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t7) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 12($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 28($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 36($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 20($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 8($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t5) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 40($fp) 	#Save obtained attribute in destination
	li $t8, 0 	#Load Int
	sw $t8, 44($fp) 	#Save loaded value in destination
	lw $t4, 44($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 48($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t7) 	#Load attribute in index 0
	sw $t1, 52($fp) 	#Save obtained attribute in destination
	sw $t8, 40($fp) 	#Value is direction
	sw $t9, 52($fp) 	#Value is direction
	sub $t5,  $t8, $t9 	#Minus
	sw $t5, 56($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 60($fp) 	#Save loaded value in destination
	sw $t2, 60($fp) 	#Value is direction
	sw $t9, 56($fp) 	#Value is direction
	sub $t3,  $t2, $t9 	#Minus
	sw $t3, 56($fp) 	#Save result of minus
	lw $t4, 56($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t5, 64($fp) 	#Mov comparisson value to register
	bgt $t6,  $t5, label_then_25 	#Compare values in registers and jump to label_then_25 if the second is greater than 0
	j label_else_25 	#Jump to label_else_25
label_then_25:
	li $t3, 0 	#Load Int
	sw $t3, 68($fp) 	#Save loaded value in destination
	lw $t1, 68($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 72($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
	j label_continue_25 	#Jump to label_continue_25
label_else_25:
	li $t0, 0 	#Load Int
	sw $t0, 84($fp) 	#Save loaded value in destination
	lw $t7, 84($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 1 	#Load Int
	sw $t5, 92($fp) 	#Save loaded value in destination
	lw $t2, 92($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 100($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 108($fp) 	#Save loaded value in destination
	lw $t7, 108($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_15_under 	#LOAD
	sw $t9, 116($fp) 	#Save loaded value in destination
	lw $t6, 116($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_31_meth 	#LOAD
	sw $t9, 124($fp) 	#Save loaded value in destination
	lw $t1, 124($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 100($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t0) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 12($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 120($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 128($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 112($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 88($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 96($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 100($fp) 	#get type dir for Dynamic Call
	lw $t7, 20($t9) 	#Get method of index 5
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 80($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t2, 80($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 132($fp) 	#Save obtained attribute in destination
	la $t8, data_32_string 	#LOAD
	sw $t8, 136($fp) 	#Save loaded value in destination
	lw $t2, 136($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 140($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 144($fp) 	#Save obtained attribute in destination
	sw $t6, 132($fp) 	#Value is direction
	sw $t9, 144($fp) 	#Value is direction
	sub $t8,  $t6, $t9 	#Minus
	sw $t8, 148($fp) 	#Save result of minus
	li $t3, 1 	#Load Int
	sw $t3, 152($fp) 	#Save loaded value in destination
	sw $t3, 152($fp) 	#Value is direction
	sw $t0, 148($fp) 	#Value is direction
	sub $t6,  $t3, $t0 	#Minus
	sw $t6, 148($fp) 	#Save result of minus
	lw $t8, 148($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t9, 156($fp) 	#Mov comparisson value to register
	bgt $t5,  $t9, label_then_26 	#Compare values in registers and jump to label_then_26 if the second is greater than 0
	j label_else_26 	#Jump to label_else_26
label_then_26:
	li $t5, 1 	#Load Int
	sw $t5, 172($fp) 	#Save loaded value in destination
	lw $t2, 172($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 184($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 192($fp) 	#Save loaded value in destination
	lw $t4, 192($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 200($fp) 	#Save loaded value in destination
	lw $t0, 200($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_30_meth 	#LOAD
	sw $t9, 208($fp) 	#Save loaded value in destination
	lw $t5, 208($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 184($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t6) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 12($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 204($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 212($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 196($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 184($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t4) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 180($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 180($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 216($fp) 	#Save obtained attribute in destination
	li $t3, 1 	#Load Int
	sw $t3, 220($fp) 	#Save loaded value in destination
	lw $t8, 220($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 224($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 224($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t9) 	#Load attribute in index 0
	sw $t8, 228($fp) 	#Save obtained attribute in destination
	sw $t2, 216($fp) 	#Value is direction
	sw $t3, 228($fp) 	#Value is direction
	sub $t6,  $t2, $t3 	#Minus
	sw $t6, 232($fp) 	#Save result of minus
	lw $t1, -4($fp) 	#Typeof
	lw $t6, -4($t1) 	#
	sw $t6, 236($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 244($fp) 	#Save loaded value in destination
	lw $t6, 244($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 252($fp) 	#Save loaded value in destination
	lw $t6, 252($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 256($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_31_meth 	#LOAD
	sw $t4, 260($fp) 	#Save loaded value in destination
	lw $t1, 260($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 264($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 236($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t9) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 12($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 256($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 264($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 248($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 176($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 232($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 236($fp) 	#get type dir for Dynamic Call
	lw $t0, 20($t5) 	#Get method of index 5
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 168($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t2, -8($fp) 	#Typeof
	lw $t1, -4($t2) 	#
	sw $t1, 268($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 276($fp) 	#Save loaded value in destination
	lw $t5, 276($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 284($fp) 	#Save loaded value in destination
	lw $t0, 284($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 288($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_33_meth 	#LOAD
	sw $t1, 292($fp) 	#Save loaded value in destination
	lw $t3, 292($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 296($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 268($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t8) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 12($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 288($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 296($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 280($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 168($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 268($fp) 	#get type dir for Dynamic Call
	lw $t4, 24($t5) 	#Get method of index 6
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 164($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	li $t5, 1 	#Load Int
	sw $t5, 300($fp) 	#Save loaded value in destination
	sw $t3, 300($fp) 	#Value is direction
	sw $t0, 164($fp) 	#Value is direction
	sub $t2,  $t3, $t0 	#Minus
	sw $t2, 160($fp) 	#Save result of minus
	lw $t1, 160($fp) 	#Obtain value to assign
	sw $t1, 76($fp) 	#Assign value
	j label_continue_26 	#Jump to label_continue_26
label_else_26:
	li $t7, 0 	#Load Int
	sw $t7, 312($fp) 	#Save loaded value in destination
	lw $t5, 312($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 1 	#Load Int
	sw $t3, 320($fp) 	#Save loaded value in destination
	lw $t0, 320($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 324($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t3, -4($t8) 	#
	sw $t3, 328($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 336($fp) 	#Save loaded value in destination
	lw $t4, 336($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 340($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 344($fp) 	#Save loaded value in destination
	lw $t9, 344($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_31_meth 	#LOAD
	sw $t1, 352($fp) 	#Save loaded value in destination
	lw $t6, 352($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 328($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t9) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 12($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 348($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 356($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 340($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 316($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 324($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 328($fp) 	#get type dir for Dynamic Call
	lw $t2, 20($t9) 	#Get method of index 5
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 308($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t2, 308($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 360($fp) 	#Save obtained attribute in destination
	la $t0, data_34_string 	#LOAD
	sw $t0, 364($fp) 	#Save loaded value in destination
	lw $t8, 364($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 368($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 368($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 372($fp) 	#Save obtained attribute in destination
	sw $t6, 360($fp) 	#Value is direction
	sw $t3, 372($fp) 	#Value is direction
	sub $t1,  $t6, $t3 	#Minus
	sw $t1, 376($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 380($fp) 	#Save loaded value in destination
	sw $t1, 380($fp) 	#Value is direction
	sw $t8, 376($fp) 	#Value is direction
	sub $t5,  $t1, $t8 	#Minus
	sw $t5, 376($fp) 	#Save result of minus
	lw $t2, 376($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 384($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t9, 384($fp) 	#Mov comparisson value to register
	bgt $t2,  $t9, label_then_27 	#Compare values in registers and jump to label_then_27 if the second is greater than 0
	j label_else_27 	#Jump to label_else_27
label_then_27:
	li $t4, 1 	#Load Int
	sw $t4, 396($fp) 	#Save loaded value in destination
	lw $t0, 396($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 400($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 408($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 416($fp) 	#Save loaded value in destination
	lw $t8, 416($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 420($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 424($fp) 	#Save loaded value in destination
	lw $t5, 424($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 428($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_30_meth 	#LOAD
	sw $t4, 432($fp) 	#Save loaded value in destination
	lw $t4, 432($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 436($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 408($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t3) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 428($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 436($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 420($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 408($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t1) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 404($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 404($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 440($fp) 	#Save obtained attribute in destination
	li $t2, 1 	#Load Int
	sw $t2, 444($fp) 	#Save loaded value in destination
	lw $t1, 444($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 448($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 448($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t3) 	#Load attribute in index 0
	sw $t2, 452($fp) 	#Save obtained attribute in destination
	sw $t6, 440($fp) 	#Value is direction
	sw $t8, 452($fp) 	#Value is direction
	sub $t7,  $t6, $t8 	#Minus
	sw $t7, 456($fp) 	#Save result of minus
	lw $t0, -4($fp) 	#Typeof
	lw $t7, -4($t0) 	#
	sw $t7, 460($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 468($fp) 	#Save loaded value in destination
	lw $t2, 468($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 472($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 476($fp) 	#Save loaded value in destination
	lw $t3, 476($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 480($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_31_meth 	#LOAD
	sw $t7, 484($fp) 	#Save loaded value in destination
	lw $t1, 484($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 488($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 460($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t1) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 12($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 480($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 488($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 472($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 400($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 456($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 460($fp) 	#get type dir for Dynamic Call
	lw $t8, 20($t5) 	#Get method of index 5
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 392($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t0, -8($fp) 	#Typeof
	lw $t5, -4($t0) 	#
	sw $t5, 492($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 500($fp) 	#Save loaded value in destination
	lw $t7, 500($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 504($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 508($fp) 	#Save loaded value in destination
	lw $t1, 508($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 512($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_33_meth 	#LOAD
	sw $t3, 516($fp) 	#Save loaded value in destination
	lw $t1, 516($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 520($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 492($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t5) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 12($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 512($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 520($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 504($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t7, -8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 392($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 492($fp) 	#get type dir for Dynamic Call
	lw $t1, 24($t6) 	#Get method of index 6
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 388($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 388($fp) 	#Obtain value to assign
	sw $t3, 304($fp) 	#Assign value
	j label_continue_27 	#Jump to label_continue_27
label_else_27:
	lw $t7, -8($fp) 	#Typeof
	lw $t0, -4($t7) 	#
	sw $t0, 528($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 536($fp) 	#Save loaded value in destination
	lw $t0, 536($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 540($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 544($fp) 	#Save loaded value in destination
	lw $t6, 544($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 548($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_33_meth 	#LOAD
	sw $t6, 552($fp) 	#Save loaded value in destination
	lw $t3, 552($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 556($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 528($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t6) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 12($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 548($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 556($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 540($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 528($fp) 	#get type dir for Dynamic Call
	lw $t6, 24($t1) 	#Get method of index 6
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 524($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, 524($fp) 	#Obtain value to assign
	sw $t6, 304($fp) 	#Assign value
label_continue_27:
	lw $t1, 304($fp) 	#Obtain value to assign
	sw $t1, 76($fp) 	#Assign value
label_continue_26:
	lw $t9, 76($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
label_continue_25:
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -560 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_a2i_aux:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 216 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t1, 0 	#Load Int
	sw $t1, 4($fp) 	#Save loaded value in destination
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 8($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	lw $t4, -4($fp) 	#Typeof
	lw $t9, -4($t4) 	#
	sw $t9, 20($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 36($fp) 	#Save loaded value in destination
	lw $t4, 36($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_30_meth 	#LOAD
	sw $t6, 44($fp) 	#Save loaded value in destination
	lw $t4, 44($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 20($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t9) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 40($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 48($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 32($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 20($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t3) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, 16($fp) 	#Obtain value to assign
	sw $t6, 12($fp) 	#Assign value
	li $t9, 0 	#Load Int
	sw $t9, 56($fp) 	#Save loaded value in destination
	lw $t2, 56($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 60($fp) 	#Obtain value to assign
	sw $t1, 52($fp) 	#Assign value
label_while_label_1:
	lw $t8, 52($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t8) 	#Load attribute in index 0
	sw $t1, 64($fp) 	#Save obtained attribute in destination
	lw $t7, 12($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 68($fp) 	#Save obtained attribute in destination
	sw $t1, 68($fp) 	#Value is direction
	sw $t6, 64($fp) 	#Value is direction
	sub $t0,  $t1, $t6 	#Minus
	sw $t0, 72($fp) 	#Save result of minus
	lw $t8, 72($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t7, 76($fp) 	#Mov comparisson value to register
	bgt $t9,  $t7, label_loop_label_1 	#Compare values in registers and jump to label_loop_label_1 if the second is greater than 0
	j label_pool_label_1 	#Jump to label_pool_label_1
label_loop_label_1:
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t8) 	#Load attribute in index 0
	sw $t0, 80($fp) 	#Save obtained attribute in destination
	li $t9, 10 	#Load Int
	sw $t9, 84($fp) 	#Save loaded value in destination
	lw $t5, 84($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 88($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 92($fp) 	#Save obtained attribute in destination
	sw $t1, 80($fp) 	#Value is direction
	sw $t4, 92($fp) 	#Value is direction
	mult $t1, $t4 	#Mult
	mfhi $t1 	#
	sw $t1, 96($fp) 	#Save result of Mult
	lw $t8, 96($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 100($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 112($fp) 	#Save loaded value in destination
	lw $t6, 112($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t1, -4($t3) 	#
	sw $t1, 120($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 128($fp) 	#Save loaded value in destination
	lw $t7, 128($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 136($fp) 	#Save loaded value in destination
	lw $t4, 136($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_31_meth 	#LOAD
	sw $t5, 144($fp) 	#Save loaded value in destination
	lw $t4, 144($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 120($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t6) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 140($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 148($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 132($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 52($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 116($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 120($fp) 	#get type dir for Dynamic Call
	lw $t6, 20($t0) 	#Get method of index 5
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t6, -8($fp) 	#Typeof
	lw $t4, -4($t6) 	#
	sw $t4, 152($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 160($fp) 	#Save loaded value in destination
	lw $t5, 160($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 164($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 168($fp) 	#Save loaded value in destination
	lw $t2, 168($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_35_meth 	#LOAD
	sw $t9, 176($fp) 	#Save loaded value in destination
	lw $t8, 176($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 180($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 152($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t6) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 172($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 180($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 164($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 108($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 152($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t4) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 104($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 184($fp) 	#Save obtained attribute in destination
	lw $t1, 184($fp) 	#
	lw $t7, 100($fp) 	#
	add $t0,  $t1, $t7 	#Plus
	sw $t0, 188($fp) 	#Save result of plus
	lw $t9, 188($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
	lw $t3, 52($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t3) 	#Load attribute in index 0
	sw $t9, 192($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 196($fp) 	#Save loaded value in destination
	lw $t9, 196($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 200($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 204($fp) 	#Save obtained attribute in destination
	lw $t2, 204($fp) 	#
	lw $t4, 192($fp) 	#
	add $t8,  $t2, $t4 	#Plus
	sw $t8, 208($fp) 	#Save result of plus
	lw $t0, 208($fp) 	#Obtain value to assign
	sw $t0, 52($fp) 	#Assign value
	j label_while_label_1 	#Jump to label_while_label_1
label_pool_label_1:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 212($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -216 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2a:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 212 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	li $t1, 0 	#Load Int
	sw $t1, 8($fp) 	#Save loaded value in destination
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 12($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t8) 	#Load attribute in index 0
	sw $t5, 16($fp) 	#Save obtained attribute in destination
	sw $t8, 4($fp) 	#Value is direction
	sw $t5, 16($fp) 	#Value is direction
	sub $t7,  $t8, $t5 	#Minus
	sw $t7, 20($fp) 	#Save result of minus
	li $t3, 1 	#Load Int
	sw $t3, 24($fp) 	#Save loaded value in destination
	sw $t9, 24($fp) 	#Value is direction
	sw $t2, 20($fp) 	#Value is direction
	sub $t5,  $t9, $t2 	#Minus
	sw $t5, 20($fp) 	#Save result of minus
	lw $t6, 20($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t7, 28($fp) 	#Mov comparisson value to register
	bgt $t4,  $t7, label_then_28 	#Compare values in registers and jump to label_then_28 if the second is greater than 0
	j label_else_28 	#Jump to label_else_28
label_then_28:
	la $t0, data_18_string 	#LOAD
	sw $t0, 32($fp) 	#Save loaded value in destination
	lw $t6, 32($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 36($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	j label_continue_28 	#Jump to label_continue_28
label_else_28:
	li $t6, 0 	#Load Int
	sw $t6, 44($fp) 	#Save loaded value in destination
	lw $t2, 44($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 48($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 52($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t7) 	#Load attribute in index 0
	sw $t2, 56($fp) 	#Save obtained attribute in destination
	sw $t6, 56($fp) 	#Value is direction
	sw $t2, 52($fp) 	#Value is direction
	sub $t0,  $t6, $t2 	#Minus
	sw $t0, 60($fp) 	#Save result of minus
	lw $t2, 60($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t5, 64($fp) 	#Mov comparisson value to register
	bgt $t3,  $t5, label_then_29 	#Compare values in registers and jump to label_then_29 if the second is greater than 0
	j label_else_29 	#Jump to label_else_29
label_then_29:
	lw $t5, -8($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 72($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 80($fp) 	#Save loaded value in destination
	lw $t1, 80($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 88($fp) 	#Save loaded value in destination
	lw $t7, 88($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_36_meth 	#LOAD
	sw $t1, 96($fp) 	#Save loaded value in destination
	lw $t0, 96($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 72($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t8) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 76($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 92($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 100($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 84($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 72($fp) 	#get type dir for Dynamic Call
	lw $t8, 32($t0) 	#Get method of index 8
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 68($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 68($fp) 	#Obtain value to assign
	sw $t7, 40($fp) 	#Assign value
	j label_continue_29 	#Jump to label_continue_29
label_else_29:
	la $t9, data_32_string 	#LOAD
	sw $t9, 108($fp) 	#Save loaded value in destination
	lw $t5, 108($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t7) 	#Load attribute in index 0
	sw $t0, 120($fp) 	#Save obtained attribute in destination
	li $t2, 1 	#Load Int
	sw $t2, 128($fp) 	#Save loaded value in destination
	lw $t7, 128($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 1 	#Load Int
	sw $t7, 136($fp) 	#Save loaded value in destination
	sw $t0, 136($fp) 	#Value is direction
	sw $t9, 132($fp) 	#Value is direction
	sub $t8,  $t0, $t9 	#Minus
	sw $t8, 124($fp) 	#Save result of minus
	lw $t8, 124($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 140($fp) 	#Save obtained attribute in destination
	sw $t2, 120($fp) 	#Value is direction
	sw $t3, 140($fp) 	#Value is direction
	mult $t2, $t3 	#Mult
	mfhi $t2 	#
	sw $t2, 144($fp) 	#Save result of Mult
	lw $t5, -8($fp) 	#Typeof
	lw $t7, -4($t5) 	#
	sw $t7, 148($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 156($fp) 	#Save loaded value in destination
	lw $t8, 156($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_under 	#LOAD
	sw $t8, 164($fp) 	#Save loaded value in destination
	lw $t5, 164($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 168($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_36_meth 	#LOAD
	sw $t2, 172($fp) 	#Save loaded value in destination
	lw $t6, 172($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 148($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t1) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 76($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 168($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 176($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 160($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 144($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 148($fp) 	#get type dir for Dynamic Call
	lw $t3, 32($t5) 	#Get method of index 8
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 116($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 112($fp) 	#Typeof
	lw $t4, -4($t3) 	#
	sw $t4, 180($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 188($fp) 	#Save loaded value in destination
	lw $t9, 188($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 196($fp) 	#Save loaded value in destination
	lw $t2, 196($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_37_meth 	#LOAD
	sw $t9, 204($fp) 	#Save loaded value in destination
	lw $t7, 204($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 180($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t0) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 76($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 200($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 208($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 192($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t7, 112($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 116($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 180($fp) 	#get type dir for Dynamic Call
	lw $t2, 16($t4) 	#Get method of index 4
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 104($fp) 	#Obtain value to assign
	sw $t2, 40($fp) 	#Assign value
label_continue_29:
	lw $t0, 40($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
label_continue_28:
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -212 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2a_aux:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 204 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	li $t2, 0 	#Load Int
	sw $t2, 8($fp) 	#Save loaded value in destination
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 16($fp) 	#Save obtained attribute in destination
	sw $t3, 4($fp) 	#Value is direction
	sw $t8, 16($fp) 	#Value is direction
	sub $t4,  $t3, $t8 	#Minus
	sw $t4, 20($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 24($fp) 	#Save loaded value in destination
	sw $t2, 24($fp) 	#Value is direction
	sw $t3, 20($fp) 	#Value is direction
	sub $t7,  $t2, $t3 	#Minus
	sw $t7, 20($fp) 	#Save result of minus
	lw $t4, 20($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t2, 28($fp) 	#Mov comparisson value to register
	bgt $t0,  $t2, label_then_30 	#Compare values in registers and jump to label_then_30 if the second is greater than 0
	j label_else_30 	#Jump to label_else_30
label_then_30:
	la $t8, data_29_string 	#LOAD
	sw $t8, 32($fp) 	#Save loaded value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 36($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
	j label_continue_30 	#Jump to label_continue_30
label_else_30:
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 44($fp) 	#Save obtained attribute in destination
	li $t5, 10 	#Load Int
	sw $t5, 48($fp) 	#Save loaded value in destination
	lw $t4, 48($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 52($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t5) 	#Load attribute in index 0
	sw $t8, 56($fp) 	#Save obtained attribute in destination
	sw $t5, 44($fp) 	#Value is direction
	sw $t7, 56($fp) 	#Value is direction
	div $t5, $t7 	#Div
	mflo $t5 	#
	sw $t5, 60($fp) 	#Save result of Div
	lw $t1, 60($fp) 	#Obtain value to assign
	sw $t1, 40($fp) 	#Assign value
	lw $t3, -8($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 72($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 80($fp) 	#Save loaded value in destination
	lw $t8, 80($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 88($fp) 	#Save loaded value in destination
	lw $t7, 88($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_36_meth 	#LOAD
	sw $t7, 96($fp) 	#Save loaded value in destination
	lw $t4, 96($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 72($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t8) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 76($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 92($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 100($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 84($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 40($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 72($fp) 	#get type dir for Dynamic Call
	lw $t1, 32($t8) 	#Get method of index 8
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 68($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 108($fp) 	#Save obtained attribute in destination
	lw $t7, 40($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 112($fp) 	#Save obtained attribute in destination
	li $t8, 10 	#Load Int
	sw $t8, 116($fp) 	#Save loaded value in destination
	lw $t2, 116($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 120($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 124($fp) 	#Save obtained attribute in destination
	sw $t6, 112($fp) 	#Value is direction
	sw $t9, 124($fp) 	#Value is direction
	mult $t6, $t9 	#Mult
	mfhi $t6 	#
	sw $t6, 128($fp) 	#Save result of Mult
	lw $t8, 128($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 132($fp) 	#Save obtained attribute in destination
	sw $t7, 108($fp) 	#Value is direction
	sw $t1, 132($fp) 	#Value is direction
	sub $t3,  $t7, $t1 	#Minus
	sw $t3, 136($fp) 	#Save result of minus
	lw $t9, -8($fp) 	#Typeof
	lw $t4, -4($t9) 	#
	sw $t4, 140($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 148($fp) 	#Save loaded value in destination
	lw $t7, 148($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 156($fp) 	#Save loaded value in destination
	lw $t4, 156($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_38_meth 	#LOAD
	sw $t3, 164($fp) 	#Save loaded value in destination
	lw $t8, 164($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 168($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 140($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t8) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 76($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 160($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 168($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 152($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 136($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 140($fp) 	#get type dir for Dynamic Call
	lw $t4, 16($t7) 	#Get method of index 4
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 68($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 172($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 180($fp) 	#Save loaded value in destination
	lw $t3, 180($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 188($fp) 	#Save loaded value in destination
	lw $t5, 188($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_37_meth 	#LOAD
	sw $t3, 196($fp) 	#Save loaded value in destination
	lw $t0, 196($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 172($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t7) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 76($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 192($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 200($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 184($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t2, 68($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 104($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 172($fp) 	#get type dir for Dynamic Call
	lw $t2, 16($t5) 	#Get method of index 4
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 64($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 64($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
label_continue_30:
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -204 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t8, Main 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_char___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 0($t8) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_avar___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 4($t8) 	#Save value in attribute of index 1
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_a_var___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 12($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 8($t4) 	#Save value in attribute of index 2
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_flag___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 16($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 12($t6) 	#Save value in attribute of index 3
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_char___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t7, data_29_string 	#LOAD
	sw $t7, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_avar___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_a_var___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_flag___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t0, 1 	#Load Int
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_menu:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 1120 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_39_string 	#LOAD
	sw $t1, 4($fp) 	#Save loaded value in destination
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 12($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 20($fp) 	#Save loaded value in destination
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_40_meth 	#LOAD
	sw $t6, 36($fp) 	#Save loaded value in destination
	lw $t4, 36($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 12($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t1) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 32($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 40($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 12($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t4) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 4($t8) 	#Load attribute in index 1
	sw $t5, 48($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Typeof
	lw $t3, -4($t7) 	#
	sw $t3, 52($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 60($fp) 	#Save loaded value in destination
	lw $t7, 60($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 68($fp) 	#Save loaded value in destination
	lw $t9, 68($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_41_meth 	#LOAD
	sw $t9, 76($fp) 	#Save loaded value in destination
	lw $t1, 76($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 52($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t8) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 16($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 72($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 80($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 64($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 48($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 52($fp) 	#get type dir for Dynamic Call
	lw $t4, 48($t6) 	#Get method of index 12
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t9, data_42_string 	#LOAD
	sw $t9, 88($fp) 	#Save loaded value in destination
	lw $t2, 88($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t3, -4($t0) 	#
	sw $t3, 96($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 104($fp) 	#Save loaded value in destination
	lw $t8, 104($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 112($fp) 	#Save loaded value in destination
	lw $t6, 112($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_40_meth 	#LOAD
	sw $t5, 120($fp) 	#Save loaded value in destination
	lw $t7, 120($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 96($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t6) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 116($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 124($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 108($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 92($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 96($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t2) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 84($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t4, data_43_string 	#LOAD
	sw $t4, 132($fp) 	#Save loaded value in destination
	lw $t2, 132($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t7, -4($t1) 	#
	sw $t7, 140($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 148($fp) 	#Save loaded value in destination
	lw $t2, 148($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_15_under 	#LOAD
	sw $t9, 156($fp) 	#Save loaded value in destination
	lw $t7, 156($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_40_meth 	#LOAD
	sw $t7, 164($fp) 	#Save loaded value in destination
	lw $t7, 164($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 168($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 140($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t3) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 160($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 168($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 152($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 136($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 140($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t8) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 128($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, -4($fp) 	#Typeof
	lw $t1, -4($t5) 	#
	sw $t1, 176($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 184($fp) 	#Save loaded value in destination
	lw $t4, 184($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 192($fp) 	#Save loaded value in destination
	lw $t0, 192($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_41_meth 	#LOAD
	sw $t1, 200($fp) 	#Save loaded value in destination
	lw $t7, 200($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 176($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t8) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 16($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 196($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 204($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 188($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 48($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 176($fp) 	#get type dir for Dynamic Call
	lw $t4, 48($t6) 	#Get method of index 12
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 172($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_44_string 	#LOAD
	sw $t5, 212($fp) 	#Save loaded value in destination
	lw $t5, 212($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 220($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 228($fp) 	#Save loaded value in destination
	lw $t1, 228($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 236($fp) 	#Save loaded value in destination
	lw $t2, 236($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_40_meth 	#LOAD
	sw $t9, 244($fp) 	#Save loaded value in destination
	lw $t6, 244($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 220($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t4) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 16($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 240($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 248($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 232($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 216($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 220($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t8) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 208($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_45_string 	#LOAD
	sw $t6, 256($fp) 	#Save loaded value in destination
	lw $t3, 256($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 260($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 264($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 272($fp) 	#Save loaded value in destination
	lw $t2, 272($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 280($fp) 	#Save loaded value in destination
	lw $t4, 280($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 284($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_40_meth 	#LOAD
	sw $t5, 288($fp) 	#Save loaded value in destination
	lw $t6, 288($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 292($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 264($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t2) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 284($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 292($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 276($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 260($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 264($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t4) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 252($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, -4($fp) 	#Typeof
	lw $t3, -4($t8) 	#
	sw $t3, 300($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 308($fp) 	#Save loaded value in destination
	lw $t4, 308($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 312($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 316($fp) 	#Save loaded value in destination
	lw $t0, 316($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 320($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_41_meth 	#LOAD
	sw $t5, 324($fp) 	#Save loaded value in destination
	lw $t3, 324($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 328($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 300($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t7) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 320($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 328($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 312($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 48($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 300($fp) 	#get type dir for Dynamic Call
	lw $t0, 48($t7) 	#Get method of index 12
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 296($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_46_string 	#LOAD
	sw $t1, 336($fp) 	#Save loaded value in destination
	lw $t9, 336($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 340($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t0, -4($t9) 	#
	sw $t0, 344($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 352($fp) 	#Save loaded value in destination
	lw $t4, 352($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 360($fp) 	#Save loaded value in destination
	lw $t4, 360($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 364($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_40_meth 	#LOAD
	sw $t5, 368($fp) 	#Save loaded value in destination
	lw $t0, 368($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 372($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 344($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t3) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 16($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 364($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 372($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 356($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 340($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 344($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t9) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 332($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t4, data_47_string 	#LOAD
	sw $t4, 380($fp) 	#Save loaded value in destination
	lw $t2, 380($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 384($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t1, -4($t6) 	#
	sw $t1, 388($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 396($fp) 	#Save loaded value in destination
	lw $t2, 396($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 400($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 404($fp) 	#Save loaded value in destination
	lw $t8, 404($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 408($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_40_meth 	#LOAD
	sw $t1, 412($fp) 	#Save loaded value in destination
	lw $t5, 412($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 416($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 388($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t1) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 408($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 416($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 400($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 384($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 388($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t4) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 376($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 424($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 432($fp) 	#Save loaded value in destination
	lw $t7, 432($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 436($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 440($fp) 	#Save loaded value in destination
	lw $t4, 440($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 444($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_41_meth 	#LOAD
	sw $t0, 448($fp) 	#Save loaded value in destination
	lw $t6, 448($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 452($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 424($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t4) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 444($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 452($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 436($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 48($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 424($fp) 	#get type dir for Dynamic Call
	lw $t1, 48($t9) 	#Get method of index 12
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 420($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_48_string 	#LOAD
	sw $t2, 460($fp) 	#Save loaded value in destination
	lw $t1, 460($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 464($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 468($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 476($fp) 	#Save loaded value in destination
	lw $t9, 476($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 480($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 484($fp) 	#Save loaded value in destination
	lw $t7, 484($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 488($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_40_meth 	#LOAD
	sw $t1, 492($fp) 	#Save loaded value in destination
	lw $t8, 492($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 496($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 468($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t5) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 16($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 488($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 496($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 480($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 464($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 468($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t6) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 456($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t4, data_49_string 	#LOAD
	sw $t4, 504($fp) 	#Save loaded value in destination
	lw $t6, 504($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 508($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t9, -4($t1) 	#
	sw $t9, 512($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 520($fp) 	#Save loaded value in destination
	lw $t2, 520($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 524($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 528($fp) 	#Save loaded value in destination
	lw $t9, 528($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 532($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_40_meth 	#LOAD
	sw $t7, 536($fp) 	#Save loaded value in destination
	lw $t6, 536($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 540($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 512($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t4) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 16($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 532($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 540($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 524($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 508($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 512($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t4) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 500($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, -4($fp) 	#Typeof
	lw $t8, -4($t7) 	#
	sw $t8, 548($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 556($fp) 	#Save loaded value in destination
	lw $t8, 556($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 560($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 564($fp) 	#Save loaded value in destination
	lw $t9, 564($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 568($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_41_meth 	#LOAD
	sw $t8, 572($fp) 	#Save loaded value in destination
	lw $t4, 572($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 576($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 548($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t2) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 16($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 568($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 576($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 560($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 48($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 548($fp) 	#get type dir for Dynamic Call
	lw $t1, 48($t8) 	#Get method of index 12
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 544($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_50_string 	#LOAD
	sw $t2, 584($fp) 	#Save loaded value in destination
	lw $t7, 584($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 588($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t0, -4($t5) 	#
	sw $t0, 592($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 600($fp) 	#Save loaded value in destination
	lw $t7, 600($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 604($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 608($fp) 	#Save loaded value in destination
	lw $t5, 608($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 612($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_40_meth 	#LOAD
	sw $t2, 616($fp) 	#Save loaded value in destination
	lw $t6, 616($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 620($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 592($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t0) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 612($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 620($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 604($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 588($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 592($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t9) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 580($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t9, data_51_string 	#LOAD
	sw $t9, 628($fp) 	#Save loaded value in destination
	lw $t6, 628($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 632($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t9, -4($t8) 	#
	sw $t9, 636($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 644($fp) 	#Save loaded value in destination
	lw $t7, 644($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 648($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_under 	#LOAD
	sw $t8, 652($fp) 	#Save loaded value in destination
	lw $t8, 652($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 656($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_40_meth 	#LOAD
	sw $t8, 660($fp) 	#Save loaded value in destination
	lw $t6, 660($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 664($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 636($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t6) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 16($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 656($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 664($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 648($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 632($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 636($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t3) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 624($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Typeof
	lw $t0, -4($t4) 	#
	sw $t0, 672($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 680($fp) 	#Save loaded value in destination
	lw $t9, 680($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 684($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 688($fp) 	#Save loaded value in destination
	lw $t8, 688($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 692($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_41_meth 	#LOAD
	sw $t4, 696($fp) 	#Save loaded value in destination
	lw $t3, 696($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 700($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 672($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t4) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 692($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 700($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 684($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 48($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 672($fp) 	#get type dir for Dynamic Call
	lw $t5, 48($t8) 	#Get method of index 12
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 668($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_52_string 	#LOAD
	sw $t1, 708($fp) 	#Save loaded value in destination
	lw $t0, 708($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 712($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t8, -4($t4) 	#
	sw $t8, 716($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 724($fp) 	#Save loaded value in destination
	lw $t4, 724($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 728($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 732($fp) 	#Save loaded value in destination
	lw $t4, 732($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 736($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_40_meth 	#LOAD
	sw $t6, 740($fp) 	#Save loaded value in destination
	lw $t6, 740($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 744($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 716($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t5) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 736($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 744($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 728($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 712($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 716($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t7) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 704($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_53_string 	#LOAD
	sw $t2, 752($fp) 	#Save loaded value in destination
	lw $t5, 752($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 756($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t8, -4($t4) 	#
	sw $t8, 760($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 768($fp) 	#Save loaded value in destination
	lw $t5, 768($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 772($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_under 	#LOAD
	sw $t8, 776($fp) 	#Save loaded value in destination
	lw $t3, 776($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 780($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_40_meth 	#LOAD
	sw $t4, 784($fp) 	#Save loaded value in destination
	lw $t9, 784($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 788($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 760($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t3) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 16($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 780($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 788($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 772($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 756($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 760($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t2) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 748($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, -4($fp) 	#Typeof
	lw $t3, -4($t0) 	#
	sw $t3, 796($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 804($fp) 	#Save loaded value in destination
	lw $t5, 804($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 808($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 812($fp) 	#Save loaded value in destination
	lw $t6, 812($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 816($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_41_meth 	#LOAD
	sw $t7, 820($fp) 	#Save loaded value in destination
	lw $t7, 820($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 824($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 796($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t0) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 816($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 824($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 808($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 48($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 796($fp) 	#get type dir for Dynamic Call
	lw $t7, 48($t2) 	#Get method of index 12
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 792($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_54_string 	#LOAD
	sw $t8, 832($fp) 	#Save loaded value in destination
	lw $t1, 832($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 836($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t9, -4($t0) 	#
	sw $t9, 840($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 848($fp) 	#Save loaded value in destination
	lw $t6, 848($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 852($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 856($fp) 	#Save loaded value in destination
	lw $t6, 856($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 860($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_40_meth 	#LOAD
	sw $t8, 864($fp) 	#Save loaded value in destination
	lw $t8, 864($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 868($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 840($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t6) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 16($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 860($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 868($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 852($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 836($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 840($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t2) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 828($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t9, data_55_string 	#LOAD
	sw $t9, 876($fp) 	#Save loaded value in destination
	lw $t7, 876($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 880($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t9, -4($t4) 	#
	sw $t9, 884($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 892($fp) 	#Save loaded value in destination
	lw $t0, 892($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 896($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 900($fp) 	#Save loaded value in destination
	lw $t2, 900($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 904($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_40_meth 	#LOAD
	sw $t6, 908($fp) 	#Save loaded value in destination
	lw $t7, 908($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 912($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 884($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t5) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 16($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 904($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 912($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 896($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 880($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 884($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t0) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 872($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Typeof
	lw $t8, -4($t2) 	#
	sw $t8, 920($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 928($fp) 	#Save loaded value in destination
	lw $t2, 928($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 932($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 936($fp) 	#Save loaded value in destination
	lw $t3, 936($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 940($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_41_meth 	#LOAD
	sw $t6, 944($fp) 	#Save loaded value in destination
	lw $t0, 944($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 948($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 920($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t1) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 16($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 940($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 948($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 932($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 48($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 920($fp) 	#get type dir for Dynamic Call
	lw $t7, 48($t6) 	#Get method of index 12
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 916($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_56_string 	#LOAD
	sw $t5, 956($fp) 	#Save loaded value in destination
	lw $t5, 956($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 960($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t1, -4($t6) 	#
	sw $t1, 964($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 972($fp) 	#Save loaded value in destination
	lw $t5, 972($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 976($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 980($fp) 	#Save loaded value in destination
	lw $t4, 980($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 984($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_40_meth 	#LOAD
	sw $t9, 988($fp) 	#Save loaded value in destination
	lw $t7, 988($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 992($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 964($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t2) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 984($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 992($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 976($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 960($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 964($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t9) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 952($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_57_string 	#LOAD
	sw $t5, 1000($fp) 	#Save loaded value in destination
	lw $t9, 1000($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1004($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 1008($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 1016($fp) 	#Save loaded value in destination
	lw $t7, 1016($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1020($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 1024($fp) 	#Save loaded value in destination
	lw $t5, 1024($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1028($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_40_meth 	#LOAD
	sw $t6, 1032($fp) 	#Save loaded value in destination
	lw $t1, 1032($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1036($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 1008($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t0) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1028($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 1036($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 1020($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 1004($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 1008($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t4) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 996($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_58_string 	#LOAD
	sw $t5, 1044($fp) 	#Save loaded value in destination
	lw $t8, 1044($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1048($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t1, -4($t4) 	#
	sw $t1, 1052($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 1060($fp) 	#Save loaded value in destination
	lw $t7, 1060($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1064($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 1068($fp) 	#Save loaded value in destination
	lw $t4, 1068($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1072($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_40_meth 	#LOAD
	sw $t6, 1076($fp) 	#Save loaded value in destination
	lw $t7, 1076($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1080($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 1052($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t1) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 16($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1072($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 1080($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 1064($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 1048($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 1052($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t1) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1040($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, -4($fp) 	#Typeof
	lw $t7, -4($t0) 	#
	sw $t7, 1088($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 1096($fp) 	#Save loaded value in destination
	lw $t0, 1096($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 1104($fp) 	#Save loaded value in destination
	lw $t8, 1104($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_59_meth 	#LOAD
	sw $t9, 1112($fp) 	#Save loaded value in destination
	lw $t3, 1112($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 1088($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t5) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 16($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1108($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 1116($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1100($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 1088($fp) 	#get type dir for Dynamic Call
	lw $t8, 20($t1) 	#Get method of index 5
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1084($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 1084($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -1120 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_prompt:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 124 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_14_eol 	#LOAD
	sw $t3, 4($fp) 	#Save loaded value in destination
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t6, -4($t9) 	#
	sw $t6, 12($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 20($fp) 	#Save loaded value in destination
	lw $t8, 20($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_40_meth 	#LOAD
	sw $t4, 36($fp) 	#Save loaded value in destination
	lw $t3, 36($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t9) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 16($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 32($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 40($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 12($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t0) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_60_string 	#LOAD
	sw $t2, 48($fp) 	#Save loaded value in destination
	lw $t2, 48($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t9, -4($t1) 	#
	sw $t9, 56($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 64($fp) 	#Save loaded value in destination
	lw $t6, 64($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 72($fp) 	#Save loaded value in destination
	lw $t6, 72($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_40_meth 	#LOAD
	sw $t0, 80($fp) 	#Save loaded value in destination
	lw $t6, 80($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 56($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t3) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 16($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 76($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 84($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 68($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 52($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 56($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t5) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, -4($fp) 	#Typeof
	lw $t2, -4($t9) 	#
	sw $t2, 92($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 100($fp) 	#Save loaded value in destination
	lw $t3, 100($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_15_under 	#LOAD
	sw $t9, 108($fp) 	#Save loaded value in destination
	lw $t6, 108($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_59_meth 	#LOAD
	sw $t0, 116($fp) 	#Save loaded value in destination
	lw $t5, 116($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 92($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t7) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 16($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 112($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 120($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 104($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 92($fp) 	#get type dir for Dynamic Call
	lw $t4, 20($t5) 	#Get method of index 5
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 88($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 88($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -124 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_get_int:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 84 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	lw $t9, -4($fp) 	#Typeof
	lw $t0, -4($t9) 	#
	sw $t0, 16($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 24($fp) 	#Save loaded value in destination
	lw $t7, 24($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 32($fp) 	#Save loaded value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_61_meth 	#LOAD
	sw $t3, 40($fp) 	#Save loaded value in destination
	lw $t2, 40($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 16($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t7) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 20($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 36($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 44($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 28($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 16($fp) 	#get type dir for Dynamic Call
	lw $t4, 32($t8) 	#Get method of index 8
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t2, 12($fp) 	#Obtain value to assign
	sw $t2, 8($fp) 	#Assign value
	lw $t8, 0($fp) 	#Typeof
	lw $t0, -4($t8) 	#
	sw $t0, 52($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 60($fp) 	#Save loaded value in destination
	lw $t3, 60($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_under 	#LOAD
	sw $t8, 68($fp) 	#Save loaded value in destination
	lw $t0, 68($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_62_meth 	#LOAD
	sw $t9, 76($fp) 	#Save loaded value in destination
	lw $t2, 76($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 52($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t4) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 20($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 72($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 80($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 64($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 52($fp) 	#get type dir for Dynamic Call
	lw $t6, 20($t9) 	#Get method of index 5
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 48($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -84 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_is_even:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 212 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	lw $t9, 0($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t9) 	#Load attribute in index 0
	sw $t6, 8($fp) 	#Save obtained attribute in destination
	li $t4, 0 	#Load Int
	sw $t4, 12($fp) 	#Save loaded value in destination
	lw $t7, 12($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 16($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t7) 	#Load attribute in index 0
	sw $t0, 20($fp) 	#Save obtained attribute in destination
	sw $t1, 20($fp) 	#Value is direction
	sw $t2, 8($fp) 	#Value is direction
	sub $t3,  $t1, $t2 	#Minus
	sw $t3, 24($fp) 	#Save result of minus
	lw $t9, 24($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t4, 28($fp) 	#Mov comparisson value to register
	bgt $t3,  $t4, label_then_31 	#Compare values in registers and jump to label_then_31 if the second is greater than 0
	j label_else_31 	#Jump to label_else_31
label_then_31:
	li $t5, 1 	#Load Int
	sw $t5, 40($fp) 	#Save loaded value in destination
	sw $t6, 40($fp) 	#Value is direction
	sw $t7, 0($fp) 	#Value is direction
	sub $t2,  $t6, $t7 	#Minus
	sw $t2, 36($fp) 	#Save result of minus
	lw $t2, -8($fp) 	#Typeof
	lw $t3, -4($t2) 	#
	sw $t3, 44($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 52($fp) 	#Save loaded value in destination
	lw $t5, 52($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 60($fp) 	#Save loaded value in destination
	lw $t3, 60($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_63_meth 	#LOAD
	sw $t8, 68($fp) 	#Save loaded value in destination
	lw $t3, 68($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 44($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t2) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 48($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 64($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 72($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 56($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 36($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 44($fp) 	#get type dir for Dynamic Call
	lw $t3, 40($t6) 	#Get method of index 10
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, 32($fp) 	#Obtain value to assign
	sw $t6, 4($fp) 	#Assign value
	j label_continue_31 	#Jump to label_continue_31
label_else_31:
	li $t0, 0 	#Load Int
	sw $t0, 80($fp) 	#Save loaded value in destination
	lw $t7, 80($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 84($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 88($fp) 	#Save obtained attribute in destination
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t4) 	#Load attribute in index 0
	sw $t0, 92($fp) 	#Save obtained attribute in destination
	sw $t6, 88($fp) 	#Value is direction
	sw $t1, 92($fp) 	#Value is direction
	sub $t3,  $t6, $t1 	#Minus
	sw $t3, 96($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 100($fp) 	#Save loaded value in destination
	sw $t7, 100($fp) 	#Value is direction
	sw $t0, 96($fp) 	#Value is direction
	sub $t2,  $t7, $t0 	#Minus
	sw $t2, 96($fp) 	#Save result of minus
	lw $t7, 96($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t9, 104($fp) 	#Mov comparisson value to register
	bgt $t7,  $t9, label_then_32 	#Compare values in registers and jump to label_then_32 if the second is greater than 0
	j label_else_32 	#Jump to label_else_32
label_then_32:
	li $t1, 1 	#Load Int
	sw $t1, 108($fp) 	#Save loaded value in destination
	lw $t3, 108($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 112($fp) 	#Obtain value to assign
	sw $t9, 76($fp) 	#Assign value
	j label_continue_32 	#Jump to label_continue_32
label_else_32:
	li $t3, 1 	#Load Int
	sw $t3, 120($fp) 	#Save loaded value in destination
	lw $t8, 120($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 124($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t9) 	#Load attribute in index 0
	sw $t8, 128($fp) 	#Save obtained attribute in destination
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 132($fp) 	#Save obtained attribute in destination
	sw $t8, 128($fp) 	#Value is direction
	sw $t5, 132($fp) 	#Value is direction
	sub $t0,  $t8, $t5 	#Minus
	sw $t0, 136($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 140($fp) 	#Save loaded value in destination
	sw $t8, 140($fp) 	#Value is direction
	sw $t7, 136($fp) 	#Value is direction
	sub $t4,  $t8, $t7 	#Minus
	sw $t4, 136($fp) 	#Save result of minus
	lw $t0, 136($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t0, 144($fp) 	#Mov comparisson value to register
	bgt $t7,  $t0, label_then_33 	#Compare values in registers and jump to label_then_33 if the second is greater than 0
	j label_else_33 	#Jump to label_else_33
label_then_33:
	li $t9, 0 	#Load Int
	sw $t9, 148($fp) 	#Save loaded value in destination
	lw $t0, 148($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 152($fp) 	#Obtain value to assign
	sw $t5, 116($fp) 	#Assign value
	j label_continue_33 	#Jump to label_continue_33
label_else_33:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 160($fp) 	#Save obtained attribute in destination
	li $t5, 2 	#Load Int
	sw $t5, 164($fp) 	#Save loaded value in destination
	lw $t2, 164($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 168($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 168($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 172($fp) 	#Save obtained attribute in destination
	sw $t5, 160($fp) 	#Value is direction
	sw $t3, 172($fp) 	#Value is direction
	sub $t2,  $t5, $t3 	#Minus
	sw $t2, 176($fp) 	#Save result of minus
	lw $t9, -8($fp) 	#Typeof
	lw $t2, -4($t9) 	#
	sw $t2, 180($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 188($fp) 	#Save loaded value in destination
	lw $t3, 188($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 196($fp) 	#Save loaded value in destination
	lw $t1, 196($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_63_meth 	#LOAD
	sw $t5, 204($fp) 	#Save loaded value in destination
	lw $t7, 204($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 180($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t2) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 48($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 200($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 208($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 192($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 176($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 180($fp) 	#get type dir for Dynamic Call
	lw $t1, 40($t5) 	#Get method of index 10
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 156($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 156($fp) 	#Obtain value to assign
	sw $t0, 116($fp) 	#Assign value
label_continue_33:
	lw $t1, 116($fp) 	#Obtain value to assign
	sw $t1, 76($fp) 	#Assign value
label_continue_32:
	lw $t1, 76($fp) 	#Obtain value to assign
	sw $t1, 4($fp) 	#Assign value
label_continue_31:
	lw $t4, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -212 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_class_type:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 132 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -4($fp) 	#Typeof
	lw $t0, -4($t4) 	#
	sw $t0, 0($fp) 	#Save type value in destination
	la $t4, B 	#LOAD
	sw $t4, 4($fp) 	#Save loaded value in destination
	sw $t2, 0($fp) 	#Value is direction
	sw $t4, 4($fp) 	#Value is direction
	sub $t1,  $t2, $t4 	#Minus
	sw $t1, 8($fp) 	#Save result of minus
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t3, 8($fp) 	#Mov comparisson value to register
	bgt $t6,  $t3, label_case_branch_0 	#Compare values in registers and jump to label_case_branch_0 if the second is greater than 0
	lw $t9, -4($fp) 	#Typeof
	lw $t0, -4($t9) 	#
	sw $t0, 12($fp) 	#Save type value in destination
	la $t7, A 	#LOAD
	sw $t7, 16($fp) 	#Save loaded value in destination
	sw $t6, 12($fp) 	#Value is direction
	sw $t7, 16($fp) 	#Value is direction
	sub $t5,  $t6, $t7 	#Minus
	sw $t5, 20($fp) 	#Save result of minus
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t0, 20($fp) 	#Mov comparisson value to register
	bgt $t6,  $t0, label_case_branch_1 	#Compare values in registers and jump to label_case_branch_1 if the second is greater than 0
	la $t4, data_64_case_err 	#LOAD
	sw $t4, 24($fp) 	#Save loaded value in destination
	lw $t8, 24($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t0, 28($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
label_case_branch_0:
	lw $t7, -4($fp) 	#Obtain value to assign
	sw $t7, 36($fp) 	#Assign value
	la $t5, data_65_string 	#LOAD
	sw $t5, 44($fp) 	#Save loaded value in destination
	lw $t5, 44($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -8($fp) 	#Typeof
	lw $t3, -4($t9) 	#
	sw $t3, 52($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 60($fp) 	#Save loaded value in destination
	lw $t9, 60($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 68($fp) 	#Save loaded value in destination
	lw $t3, 68($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_40_meth 	#LOAD
	sw $t3, 76($fp) 	#Save loaded value in destination
	lw $t4, 76($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 52($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t0) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 56($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 56($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 72($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 80($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 64($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 48($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 52($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t9) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 40($fp) 	#Obtain value to assign
	sw $t7, 32($fp) 	#Assign value
	j label_end_case_0 	#Jump to label_end_case_0
label_case_branch_1:
	lw $t1, -4($fp) 	#Obtain value to assign
	sw $t1, 84($fp) 	#Assign value
	la $t7, data_66_string 	#LOAD
	sw $t7, 92($fp) 	#Save loaded value in destination
	lw $t8, 92($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -8($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 100($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 108($fp) 	#Save loaded value in destination
	lw $t1, 108($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 116($fp) 	#Save loaded value in destination
	lw $t6, 116($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_40_meth 	#LOAD
	sw $t3, 124($fp) 	#Save loaded value in destination
	lw $t0, 124($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 100($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t1) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 56($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 56($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 120($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 128($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 112($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 96($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 100($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t8) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 88($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 88($fp) 	#Obtain value to assign
	sw $t2, 32($fp) 	#Assign value
	j label_end_case_0 	#Jump to label_end_case_0
label_end_case_0:
	lw $t2, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -132 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_print:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 160 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	lw $t5, -4($fp) 	#Typeof
	lw $t3, -4($t5) 	#
	sw $t3, 20($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 28($fp) 	#Save loaded value in destination
	lw $t0, 28($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 36($fp) 	#Save loaded value in destination
	lw $t9, 36($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_67_meth 	#LOAD
	sw $t7, 44($fp) 	#Save loaded value in destination
	lw $t7, 44($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 20($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t4) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 40($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 48($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 32($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 20($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t0) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 0($fp) 	#Typeof
	lw $t0, -4($t4) 	#
	sw $t0, 52($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 60($fp) 	#Save loaded value in destination
	lw $t2, 60($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_15_under 	#LOAD
	sw $t9, 68($fp) 	#Save loaded value in destination
	lw $t9, 68($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_68_meth 	#LOAD
	sw $t5, 76($fp) 	#Save loaded value in destination
	lw $t5, 76($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 52($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t2) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 72($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 80($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 64($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 16($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 52($fp) 	#get type dir for Dynamic Call
	lw $t4, 28($t1) 	#Get method of index 7
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -8($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 84($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 92($fp) 	#Save loaded value in destination
	lw $t6, 92($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 100($fp) 	#Save loaded value in destination
	lw $t3, 100($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_40_meth 	#LOAD
	sw $t7, 108($fp) 	#Save loaded value in destination
	lw $t5, 108($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 84($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t9) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 104($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 112($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 96($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 12($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 84($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t8) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_69_string 	#LOAD
	sw $t8, 120($fp) 	#Save loaded value in destination
	lw $t1, 120($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -8($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 128($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 136($fp) 	#Save loaded value in destination
	lw $t9, 136($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 144($fp) 	#Save loaded value in destination
	lw $t0, 144($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_40_meth 	#LOAD
	sw $t2, 152($fp) 	#Save loaded value in destination
	lw $t6, 152($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 128($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t7) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 148($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 156($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 140($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t9, -8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 124($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 128($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t7) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 116($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 116($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -160 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 2284 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 0($fp) 	#Obtain value from source dir
	lw $t0, -4($fp) 	#Dir of instance of attribute to set
	sw $t3, 4($t0) 	#Save value in attribute of index 1
label_while_label_2:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 12($t4) 	#Load attribute in index 3
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t6, 4($fp) 	#Mov comparisson value to register
	bgt $t3,  $t6, label_loop_label_2 	#Compare values in registers and jump to label_loop_label_2 if the second is greater than 0
	j label_pool_label_2 	#Jump to label_pool_label_2
label_loop_label_2:
	la $t7, data_70_string 	#LOAD
	sw $t7, 12($fp) 	#Save loaded value in destination
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t7, -4($t8) 	#
	sw $t7, 20($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 28($fp) 	#Save loaded value in destination
	lw $t9, 28($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 36($fp) 	#Save loaded value in destination
	lw $t3, 36($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_40_meth 	#LOAD
	sw $t1, 44($fp) 	#Save loaded value in destination
	lw $t6, 44($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 20($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t1) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 40($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 48($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 32($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 16($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 20($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t5) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 4($t3) 	#Load attribute in index 1
	sw $t5, 56($fp) 	#Save obtained attribute in destination
	lw $t8, -4($fp) 	#Typeof
	lw $t0, -4($t8) 	#
	sw $t0, 60($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 68($fp) 	#Save loaded value in destination
	lw $t4, 68($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 76($fp) 	#Save loaded value in destination
	lw $t1, 76($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_41_meth 	#LOAD
	sw $t8, 84($fp) 	#Save loaded value in destination
	lw $t2, 84($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 60($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t4) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 80($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 88($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 72($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 56($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 60($fp) 	#get type dir for Dynamic Call
	lw $t0, 48($t5) 	#Get method of index 12
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 56($fp) 	#Typeof
	lw $t6, -4($t0) 	#
	sw $t6, 104($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 112($fp) 	#Save loaded value in destination
	lw $t9, 112($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 120($fp) 	#Save loaded value in destination
	lw $t2, 120($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_67_meth 	#LOAD
	sw $t2, 128($fp) 	#Save loaded value in destination
	lw $t6, 128($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 104($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t4) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 124($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 132($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 116($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t8, 56($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 104($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t9) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 100($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, -4($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 136($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 144($fp) 	#Save loaded value in destination
	lw $t5, 144($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_under 	#LOAD
	sw $t8, 152($fp) 	#Save loaded value in destination
	lw $t2, 152($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_63_meth 	#LOAD
	sw $t6, 160($fp) 	#Save loaded value in destination
	lw $t3, 160($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 164($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 136($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t5) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 156($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 164($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 148($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 100($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 136($fp) 	#get type dir for Dynamic Call
	lw $t7, 40($t9) 	#Get method of index 10
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 96($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t3, 96($fp) 	#Mov comparisson value to register
	bgt $t6,  $t3, label_then_34 	#Compare values in registers and jump to label_then_34 if the second is greater than 0
	j label_else_34 	#Jump to label_else_34
label_then_34:
	la $t2, data_71_string 	#LOAD
	sw $t2, 172($fp) 	#Save loaded value in destination
	lw $t9, 172($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 180($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 188($fp) 	#Save loaded value in destination
	lw $t2, 188($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 196($fp) 	#Save loaded value in destination
	lw $t6, 196($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_40_meth 	#LOAD
	sw $t6, 204($fp) 	#Save loaded value in destination
	lw $t1, 204($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 180($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t1) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 200($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 208($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 192($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 176($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 180($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t6) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 168($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 168($fp) 	#Obtain value to assign
	sw $t7, 92($fp) 	#Assign value
	j label_continue_34 	#Jump to label_continue_34
label_else_34:
	la $t7, data_72_string 	#LOAD
	sw $t7, 216($fp) 	#Save loaded value in destination
	lw $t9, 216($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 220($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t4, -4($t8) 	#
	sw $t4, 224($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 232($fp) 	#Save loaded value in destination
	lw $t9, 232($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 240($fp) 	#Save loaded value in destination
	lw $t5, 240($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 244($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_40_meth 	#LOAD
	sw $t1, 248($fp) 	#Save loaded value in destination
	lw $t4, 248($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 224($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t0) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 244($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 252($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 236($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 220($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 224($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t0) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 212($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 212($fp) 	#Obtain value to assign
	sw $t0, 92($fp) 	#Assign value
label_continue_34:
	lw $t2, -4($fp) 	#Typeof
	lw $t5, -4($t2) 	#
	sw $t5, 260($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 268($fp) 	#Save loaded value in destination
	lw $t5, 268($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 272($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 276($fp) 	#Save loaded value in destination
	lw $t1, 276($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_73_meth 	#LOAD
	sw $t4, 284($fp) 	#Save loaded value in destination
	lw $t8, 284($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 288($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 260($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t4) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 280($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 288($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 272($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 56($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 260($fp) 	#get type dir for Dynamic Call
	lw $t8, 44($t3) 	#Get method of index 11
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 256($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Typeof
	lw $t5, -4($t4) 	#
	sw $t5, 296($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 304($fp) 	#Save loaded value in destination
	lw $t3, 304($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 312($fp) 	#Save loaded value in destination
	lw $t2, 312($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_74_meth 	#LOAD
	sw $t8, 320($fp) 	#Save loaded value in destination
	lw $t2, 320($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 324($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 296($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t1) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 316($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 324($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 308($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 296($fp) 	#get type dir for Dynamic Call
	lw $t4, 28($t1) 	#Get method of index 7
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 292($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 292($fp) 	#Obtain value from source dir
	lw $t6, -4($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t6) 	#Save value in attribute of index 0
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t5) 	#Load attribute in index 0
	sw $t8, 332($fp) 	#Save obtained attribute in destination
	lw $t0, 332($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t0) 	#Load attribute in index 0
	sw $t6, 336($fp) 	#Save obtained attribute in destination
	la $t0, data_75_string 	#LOAD
	sw $t0, 340($fp) 	#Save loaded value in destination
	lw $t7, 340($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 344($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 344($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t8) 	#Load attribute in index 0
	sw $t0, 348($fp) 	#Save obtained attribute in destination
	sw $t6, 336($fp) 	#Value is direction
	sw $t4, 348($fp) 	#Value is direction
	sub $t0,  $t6, $t4 	#Minus
	sw $t0, 352($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 356($fp) 	#Save loaded value in destination
	sw $t4, 356($fp) 	#Value is direction
	sw $t3, 352($fp) 	#Value is direction
	sub $t6,  $t4, $t3 	#Minus
	sw $t6, 352($fp) 	#Save result of minus
	lw $t8, 352($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 360($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t6, 360($fp) 	#Mov comparisson value to register
	bgt $t2,  $t6, label_then_35 	#Compare values in registers and jump to label_then_35 if the second is greater than 0
	j label_else_35 	#Jump to label_else_35
label_then_35:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 368($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t4, -4($t3) 	#
	sw $t4, 376($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 384($fp) 	#Save loaded value in destination
	lw $t9, 384($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 388($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 392($fp) 	#Save loaded value in destination
	lw $t4, 392($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_76_meth 	#LOAD
	sw $t6, 400($fp) 	#Save loaded value in destination
	lw $t8, 400($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 404($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 376($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t1) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 396($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 404($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 388($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 376($fp) 	#get type dir for Dynamic Call
	lw $t5, 36($t6) 	#Get method of index 9
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 372($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 368($fp) 	#Typeof
	lw $t5, -4($t9) 	#
	sw $t5, 408($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 416($fp) 	#Save loaded value in destination
	lw $t8, 416($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 420($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 424($fp) 	#Save loaded value in destination
	lw $t1, 424($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 428($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_16_meth 	#LOAD
	sw $t2, 432($fp) 	#Save loaded value in destination
	lw $t0, 432($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 436($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 408($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t9) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 428($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 436($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 420($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t1, 368($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 372($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 408($fp) 	#get type dir for Dynamic Call
	lw $t3, 16($t8) 	#Get method of index 4
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 364($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 364($fp) 	#Obtain value from source dir
	lw $t1, -4($fp) 	#Dir of instance of attribute to set
	sw $t5, 8($t1) 	#Save value in attribute of index 2
	jal B___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 444($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 56($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 452($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 460($fp) 	#Save loaded value in destination
	lw $t6, 460($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 464($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 468($fp) 	#Save loaded value in destination
	lw $t7, 468($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 472($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_67_meth 	#LOAD
	sw $t9, 476($fp) 	#Save loaded value in destination
	lw $t1, 476($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 480($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 452($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t4) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 472($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 480($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 464($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t9, 56($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 452($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t9) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 448($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 8($t7) 	#Load attribute in index 2
	sw $t3, 488($fp) 	#Save obtained attribute in destination
	lw $t0, 488($fp) 	#Typeof
	lw $t9, -4($t0) 	#
	sw $t9, 492($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 500($fp) 	#Save loaded value in destination
	lw $t2, 500($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 504($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 508($fp) 	#Save loaded value in destination
	lw $t7, 508($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 512($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_67_meth 	#LOAD
	sw $t4, 516($fp) 	#Save loaded value in destination
	lw $t0, 516($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 520($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 492($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t3) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 512($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 520($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 504($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t9, 488($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 492($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t3) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 484($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 444($fp) 	#Typeof
	lw $t1, -4($t4) 	#
	sw $t1, 524($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 532($fp) 	#Save loaded value in destination
	lw $t4, 532($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 536($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 540($fp) 	#Save loaded value in destination
	lw $t3, 540($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 544($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_77_meth 	#LOAD
	sw $t5, 548($fp) 	#Save loaded value in destination
	lw $t0, 548($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 552($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 524($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t8) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 544($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 552($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 536($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t5, 444($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 448($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 484($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 524($fp) 	#get type dir for Dynamic Call
	lw $t9, 24($t1) 	#Get method of index 6
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 440($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t9, 440($fp) 	#Obtain value to assign
	sw $t9, 56($fp) 	#Assign value
	lw $t6, 56($fp) 	#Obtain value to assign
	sw $t6, 328($fp) 	#Assign value
	j label_continue_35 	#Jump to label_continue_35
label_else_35:
	lw $t2, 332($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 560($fp) 	#Save obtained attribute in destination
	la $t1, data_78_string 	#LOAD
	sw $t1, 564($fp) 	#Save loaded value in destination
	lw $t8, 564($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 568($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 568($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 572($fp) 	#Save obtained attribute in destination
	sw $t0, 560($fp) 	#Value is direction
	sw $t6, 572($fp) 	#Value is direction
	sub $t2,  $t0, $t6 	#Minus
	sw $t2, 576($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 580($fp) 	#Save loaded value in destination
	sw $t2, 580($fp) 	#Value is direction
	sw $t3, 576($fp) 	#Value is direction
	sub $t8,  $t2, $t3 	#Minus
	sw $t8, 576($fp) 	#Save result of minus
	lw $t2, 576($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 584($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t2, 584($fp) 	#Mov comparisson value to register
	bgt $t9,  $t2, label_then_36 	#Compare values in registers and jump to label_then_36 if the second is greater than 0
	j label_else_36 	#Jump to label_else_36
label_then_36:
	lw $t1, 56($fp) 	#Typeof
	lw $t4, -4($t1) 	#
	sw $t4, 588($fp) 	#Save type value in destination
	la $t9, A 	#LOAD
	sw $t9, 592($fp) 	#Save loaded value in destination
	sw $t8, 588($fp) 	#Value is direction
	sw $t7, 592($fp) 	#Value is direction
	sub $t5,  $t8, $t7 	#Minus
	sw $t5, 596($fp) 	#Save result of minus
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t5, 596($fp) 	#Mov comparisson value to register
	bgt $t8,  $t5, label_case_branch_2 	#Compare values in registers and jump to label_case_branch_2 if the second is greater than 0
	lw $t9, 56($fp) 	#Typeof
	lw $t2, -4($t9) 	#
	sw $t2, 600($fp) 	#Save type value in destination
	la $t2, A 	#LOAD
	sw $t2, 604($fp) 	#Save loaded value in destination
	sw $t4, 600($fp) 	#Value is direction
	sw $t6, 604($fp) 	#Value is direction
	sub $t1,  $t4, $t6 	#Minus
	sw $t1, 608($fp) 	#Save result of minus
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t3, 608($fp) 	#Mov comparisson value to register
	bgt $t0,  $t3, label_case_branch_3 	#Compare values in registers and jump to label_case_branch_3 if the second is greater than 0
	la $t6, data_64_case_err 	#LOAD
	sw $t6, 612($fp) 	#Save loaded value in destination
	lw $t7, 612($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 616($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t4, 616($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
label_case_branch_2:
	lw $t6, 56($fp) 	#Obtain value to assign
	sw $t6, 624($fp) 	#Assign value
	lw $t4, 624($fp) 	#Typeof
	lw $t6, -4($t4) 	#
	sw $t6, 636($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 644($fp) 	#Save loaded value in destination
	lw $t1, 644($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 648($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 652($fp) 	#Save loaded value in destination
	lw $t1, 652($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 656($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_67_meth 	#LOAD
	sw $t6, 660($fp) 	#Save loaded value in destination
	lw $t8, 660($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 664($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 636($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t1) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 656($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 664($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 648($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t5, 624($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 636($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t6) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 632($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 624($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 668($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 676($fp) 	#Save loaded value in destination
	lw $t8, 676($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 680($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_15_under 	#LOAD
	sw $t3, 684($fp) 	#Save loaded value in destination
	lw $t7, 684($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 688($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_79_meth 	#LOAD
	sw $t1, 692($fp) 	#Save loaded value in destination
	lw $t8, 692($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 696($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 668($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t5) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 688($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 696($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 680($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t5, 624($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 632($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 668($fp) 	#get type dir for Dynamic Call
	lw $t8, 40($t7) 	#Get method of index 10
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 628($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 628($fp) 	#Obtain value to assign
	sw $t0, 56($fp) 	#Assign value
	lw $t0, 56($fp) 	#Obtain value to assign
	sw $t0, 620($fp) 	#Assign value
	j label_end_case_1 	#Jump to label_end_case_1
label_case_branch_3:
	lw $t5, 56($fp) 	#Obtain value to assign
	sw $t5, 700($fp) 	#Assign value
	lw $t3, 700($fp) 	#Typeof
	lw $t4, -4($t3) 	#
	sw $t4, 712($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 720($fp) 	#Save loaded value in destination
	lw $t8, 720($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 724($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_15_under 	#LOAD
	sw $t9, 728($fp) 	#Save loaded value in destination
	lw $t0, 728($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 732($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_67_meth 	#LOAD
	sw $t9, 736($fp) 	#Save loaded value in destination
	lw $t7, 736($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 740($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 712($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t0) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 732($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 740($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 724($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t3, 700($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 712($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t1) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 708($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 700($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 744($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 752($fp) 	#Save loaded value in destination
	lw $t4, 752($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 756($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 760($fp) 	#Save loaded value in destination
	lw $t6, 760($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 764($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_80_meth 	#LOAD
	sw $t8, 768($fp) 	#Save loaded value in destination
	lw $t0, 768($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 772($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 744($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t0) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 24($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 764($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 772($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 756($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t2, 700($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 708($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 744($fp) 	#get type dir for Dynamic Call
	lw $t0, 28($t3) 	#Get method of index 7
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 704($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 704($fp) 	#Obtain value to assign
	sw $t1, 56($fp) 	#Assign value
	lw $t1, 56($fp) 	#Obtain value to assign
	sw $t1, 620($fp) 	#Assign value
	j label_end_case_1 	#Jump to label_end_case_1
label_end_case_1:
	lw $t5, 620($fp) 	#Obtain value to assign
	sw $t5, 556($fp) 	#Assign value
	j label_continue_36 	#Jump to label_continue_36
label_else_36:
	lw $t2, 332($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 780($fp) 	#Save obtained attribute in destination
	la $t3, data_81_string 	#LOAD
	sw $t3, 784($fp) 	#Save loaded value in destination
	lw $t0, 784($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 788($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 788($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t0) 	#Load attribute in index 0
	sw $t6, 792($fp) 	#Save obtained attribute in destination
	sw $t4, 780($fp) 	#Value is direction
	sw $t5, 792($fp) 	#Value is direction
	sub $t9,  $t4, $t5 	#Minus
	sw $t9, 796($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 800($fp) 	#Save loaded value in destination
	sw $t2, 800($fp) 	#Value is direction
	sw $t0, 796($fp) 	#Value is direction
	sub $t3,  $t2, $t0 	#Minus
	sw $t3, 796($fp) 	#Save result of minus
	lw $t6, 796($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 804($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t3, 804($fp) 	#Mov comparisson value to register
	bgt $t8,  $t3, label_then_37 	#Compare values in registers and jump to label_then_37 if the second is greater than 0
	j label_else_37 	#Jump to label_else_37
label_then_37:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 812($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t0, -4($t1) 	#
	sw $t0, 820($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 828($fp) 	#Save loaded value in destination
	lw $t8, 828($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 832($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 836($fp) 	#Save loaded value in destination
	lw $t8, 836($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 840($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_76_meth 	#LOAD
	sw $t6, 844($fp) 	#Save loaded value in destination
	lw $t6, 844($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 848($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 820($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t2) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 840($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 848($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 832($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 820($fp) 	#get type dir for Dynamic Call
	lw $t8, 36($t5) 	#Get method of index 9
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 816($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 812($fp) 	#Typeof
	lw $t7, -4($t0) 	#
	sw $t7, 852($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 860($fp) 	#Save loaded value in destination
	lw $t3, 860($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 864($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 868($fp) 	#Save loaded value in destination
	lw $t5, 868($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 872($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_16_meth 	#LOAD
	sw $t6, 876($fp) 	#Save loaded value in destination
	lw $t6, 876($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 880($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 852($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t3) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 872($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 880($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 864($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t4, 812($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 816($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 852($fp) 	#get type dir for Dynamic Call
	lw $t6, 16($t2) 	#Get method of index 4
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 808($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 808($fp) 	#Obtain value to assign
	sw $t3, 488($fp) 	#Assign value
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 888($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 56($fp) 	#Typeof
	lw $t4, -4($t6) 	#
	sw $t4, 896($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 904($fp) 	#Save loaded value in destination
	lw $t1, 904($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 908($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 912($fp) 	#Save loaded value in destination
	lw $t7, 912($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 916($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_67_meth 	#LOAD
	sw $t0, 920($fp) 	#Save loaded value in destination
	lw $t9, 920($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 924($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 896($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t2) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 916($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 924($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 908($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t2, 56($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 896($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t1) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 892($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 488($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 932($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 940($fp) 	#Save loaded value in destination
	lw $t5, 940($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 944($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_15_under 	#LOAD
	sw $t9, 948($fp) 	#Save loaded value in destination
	lw $t1, 948($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 952($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_67_meth 	#LOAD
	sw $t7, 956($fp) 	#Save loaded value in destination
	lw $t4, 956($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 960($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 932($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t0) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 952($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 960($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 944($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t7, 488($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 932($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t5) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 928($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 888($fp) 	#Typeof
	lw $t1, -4($t8) 	#
	sw $t1, 964($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 972($fp) 	#Save loaded value in destination
	lw $t8, 972($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 976($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 980($fp) 	#Save loaded value in destination
	lw $t5, 980($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 984($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_82_meth 	#LOAD
	sw $t7, 988($fp) 	#Save loaded value in destination
	lw $t2, 988($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 992($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 964($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t9) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 984($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 992($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 976($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t0, 888($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 892($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 928($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 964($fp) 	#get type dir for Dynamic Call
	lw $t1, 32($t6) 	#Get method of index 8
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 884($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t8, 884($fp) 	#Obtain value to assign
	sw $t8, 56($fp) 	#Assign value
	lw $t4, 56($fp) 	#Obtain value to assign
	sw $t4, 776($fp) 	#Assign value
	j label_continue_37 	#Jump to label_continue_37
label_else_37:
	lw $t5, 332($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 1000($fp) 	#Save obtained attribute in destination
	la $t6, data_83_string 	#LOAD
	sw $t6, 1004($fp) 	#Save loaded value in destination
	lw $t6, 1004($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1008($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 1008($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 1012($fp) 	#Save obtained attribute in destination
	sw $t6, 1000($fp) 	#Value is direction
	sw $t9, 1012($fp) 	#Value is direction
	sub $t8,  $t6, $t9 	#Minus
	sw $t8, 1016($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 1020($fp) 	#Save loaded value in destination
	sw $t2, 1020($fp) 	#Value is direction
	sw $t0, 1016($fp) 	#Value is direction
	sub $t7,  $t2, $t0 	#Minus
	sw $t7, 1016($fp) 	#Save result of minus
	lw $t0, 1016($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1024($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t0, 1024($fp) 	#Mov comparisson value to register
	bgt $t9,  $t0, label_then_38 	#Compare values in registers and jump to label_then_38 if the second is greater than 0
	j label_else_38 	#Jump to label_else_38
label_then_38:
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1032($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 56($fp) 	#Typeof
	lw $t1, -4($t6) 	#
	sw $t1, 1040($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 1048($fp) 	#Save loaded value in destination
	lw $t8, 1048($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1052($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 1056($fp) 	#Save loaded value in destination
	lw $t6, 1056($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1060($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_67_meth 	#LOAD
	sw $t2, 1064($fp) 	#Save loaded value in destination
	lw $t3, 1064($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1068($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 1040($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t5) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 1060($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 1068($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1052($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t5, 56($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 1040($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t3) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1036($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 1032($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 1036($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal type A : Object {
	[attrib] var : Int;
	[method] value(): Int;
	[method] set_var(num:Int): A;
	[method] method1(num:Int): A;
	[method] method2(num1:Int, num2:Int): A;
	[method] method3(num:Int): A;
	[method] method4(num1:Int, num2:Int): A;
	[method] method5(num:Int): A;
}
_method5 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1028($fp) 	#
	addi $sp,  $sp, -8 	#Remove args from stack
	lw $t4, 1028($fp) 	#Obtain value to assign
	sw $t4, 56($fp) 	#Assign value
	lw $t4, 56($fp) 	#Obtain value to assign
	sw $t4, 996($fp) 	#Assign value
	j label_continue_38 	#Jump to label_continue_38
label_else_38:
	lw $t9, 332($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 1076($fp) 	#Save obtained attribute in destination
	la $t3, data_84_string 	#LOAD
	sw $t3, 1080($fp) 	#Save loaded value in destination
	lw $t4, 1080($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1084($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 1084($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 1088($fp) 	#Save obtained attribute in destination
	sw $t1, 1076($fp) 	#Value is direction
	sw $t4, 1088($fp) 	#Value is direction
	sub $t8,  $t1, $t4 	#Minus
	sw $t8, 1092($fp) 	#Save result of minus
	li $t7, 1 	#Load Int
	sw $t7, 1096($fp) 	#Save loaded value in destination
	sw $t3, 1096($fp) 	#Value is direction
	sw $t5, 1092($fp) 	#Value is direction
	sub $t9,  $t3, $t5 	#Minus
	sw $t9, 1092($fp) 	#Save result of minus
	lw $t7, 1092($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t2, 1100($fp) 	#Mov comparisson value to register
	bgt $t7,  $t2, label_then_39 	#Compare values in registers and jump to label_then_39 if the second is greater than 0
	j label_else_39 	#Jump to label_else_39
label_then_39:
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1108($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 56($fp) 	#Typeof
	lw $t2, -4($t9) 	#
	sw $t2, 1116($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 1124($fp) 	#Save loaded value in destination
	lw $t0, 1124($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_under 	#LOAD
	sw $t8, 1132($fp) 	#Save loaded value in destination
	lw $t4, 1132($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_67_meth 	#LOAD
	sw $t3, 1140($fp) 	#Save loaded value in destination
	lw $t0, 1140($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 1116($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t8) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1136($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1144($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 1128($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t8, 56($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 1116($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t9) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1112($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 1108($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 1112($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal type B : A {
	[method] method5(num:Int): A;
}
_method5 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1104($fp) 	#
	addi $sp,  $sp, -8 	#Remove args from stack
	lw $t6, 1104($fp) 	#Obtain value to assign
	sw $t6, 56($fp) 	#Assign value
	lw $t9, 56($fp) 	#Obtain value to assign
	sw $t9, 1072($fp) 	#Assign value
	j label_continue_39 	#Jump to label_continue_39
label_else_39:
	lw $t0, 332($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 1152($fp) 	#Save obtained attribute in destination
	la $t9, data_85_string 	#LOAD
	sw $t9, 1156($fp) 	#Save loaded value in destination
	lw $t0, 1156($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 1160($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 1164($fp) 	#Save obtained attribute in destination
	sw $t4, 1152($fp) 	#Value is direction
	sw $t2, 1164($fp) 	#Value is direction
	sub $t7,  $t4, $t2 	#Minus
	sw $t7, 1168($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 1172($fp) 	#Save loaded value in destination
	sw $t8, 1172($fp) 	#Value is direction
	sw $t9, 1168($fp) 	#Value is direction
	sub $t3,  $t8, $t9 	#Minus
	sw $t3, 1168($fp) 	#Save result of minus
	lw $t1, 1168($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t3, 1176($fp) 	#Mov comparisson value to register
	bgt $t2,  $t3, label_then_40 	#Compare values in registers and jump to label_then_40 if the second is greater than 0
	j label_else_40 	#Jump to label_else_40
label_then_40:
	jal C___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1184($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 56($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 1192($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 1200($fp) 	#Save loaded value in destination
	lw $t5, 1200($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 1208($fp) 	#Save loaded value in destination
	lw $t8, 1208($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_67_meth 	#LOAD
	sw $t7, 1216($fp) 	#Save loaded value in destination
	lw $t8, 1216($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1220($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 1192($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t1) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1212($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 1220($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 1204($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t4, 56($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 1192($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t5) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1188($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 1184($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 1188($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal type C : B {
	[method] method6(num:Int): A;
	[method] method5(num:Int): A;
}
_method5 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1180($fp) 	#
	addi $sp,  $sp, -8 	#Remove args from stack
	lw $t6, 1180($fp) 	#Obtain value to assign
	sw $t6, 56($fp) 	#Assign value
	lw $t8, 56($fp) 	#Obtain value to assign
	sw $t8, 1148($fp) 	#Assign value
	j label_continue_40 	#Jump to label_continue_40
label_else_40:
	lw $t0, 332($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 1228($fp) 	#Save obtained attribute in destination
	la $t3, data_86_string 	#LOAD
	sw $t3, 1232($fp) 	#Save loaded value in destination
	lw $t5, 1232($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 1236($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t7) 	#Load attribute in index 0
	sw $t1, 1240($fp) 	#Save obtained attribute in destination
	sw $t4, 1228($fp) 	#Value is direction
	sw $t2, 1240($fp) 	#Value is direction
	sub $t7,  $t4, $t2 	#Minus
	sw $t7, 1244($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 1248($fp) 	#Save loaded value in destination
	sw $t1, 1248($fp) 	#Value is direction
	sw $t6, 1244($fp) 	#Value is direction
	sub $t9,  $t1, $t6 	#Minus
	sw $t9, 1244($fp) 	#Save result of minus
	lw $t3, 1244($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t3, 1252($fp) 	#Mov comparisson value to register
	bgt $t8,  $t3, label_then_41 	#Compare values in registers and jump to label_then_41 if the second is greater than 0
	j label_else_41 	#Jump to label_else_41
label_then_41:
	jal D___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1264($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 56($fp) 	#Typeof
	lw $t7, -4($t2) 	#
	sw $t7, 1272($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 1280($fp) 	#Save loaded value in destination
	lw $t9, 1280($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1284($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 1288($fp) 	#Save loaded value in destination
	lw $t3, 1288($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1292($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_67_meth 	#LOAD
	sw $t7, 1296($fp) 	#Save loaded value in destination
	lw $t3, 1296($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 1272($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t8) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 1292($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 1300($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 1284($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t1, 56($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 1272($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t6) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1268($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, 1264($fp) 	#Typeof
	lw $t4, -4($t6) 	#
	sw $t4, 1304($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 1312($fp) 	#Save loaded value in destination
	lw $t2, 1312($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 1320($fp) 	#Save loaded value in destination
	lw $t8, 1320($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1324($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_17_meth 	#LOAD
	sw $t3, 1328($fp) 	#Save loaded value in destination
	lw $t6, 1328($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 1304($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t9) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 1324($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1332($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1316($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t0, 1264($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 1268($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 1304($fp) 	#get type dir for Dynamic Call
	lw $t6, 40($t3) 	#Get method of index 10
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1260($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t3, 1260($fp) 	#Mov comparisson value to register
	bgt $t9,  $t3, label_then_42 	#Compare values in registers and jump to label_then_42 if the second is greater than 0
	j label_else_42 	#Jump to label_else_42
label_then_42:
	la $t5, data_70_string 	#LOAD
	sw $t5, 1340($fp) 	#Save loaded value in destination
	lw $t3, 1340($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1344($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 1348($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 1356($fp) 	#Save loaded value in destination
	lw $t4, 1356($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1360($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_15_under 	#LOAD
	sw $t5, 1364($fp) 	#Save loaded value in destination
	lw $t1, 1364($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1368($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_40_meth 	#LOAD
	sw $t7, 1372($fp) 	#Save loaded value in destination
	lw $t3, 1372($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1376($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 1348($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t2) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 1368($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 1376($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 1360($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 1344($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 1348($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t5) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1336($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, -4($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 1384($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 1392($fp) 	#Save loaded value in destination
	lw $t2, 1392($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 1400($fp) 	#Save loaded value in destination
	lw $t5, 1400($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1404($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_41_meth 	#LOAD
	sw $t4, 1408($fp) 	#Save loaded value in destination
	lw $t9, 1408($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1412($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 1384($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t5) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 1404($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1412($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1396($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 56($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 1384($fp) 	#get type dir for Dynamic Call
	lw $t9, 48($t6) 	#Get method of index 12
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1380($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t4, data_87_string 	#LOAD
	sw $t4, 1420($fp) 	#Save loaded value in destination
	lw $t7, 1420($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1424($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t1, -4($t2) 	#
	sw $t1, 1428($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 1436($fp) 	#Save loaded value in destination
	lw $t9, 1436($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1440($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_15_under 	#LOAD
	sw $t1, 1444($fp) 	#Save loaded value in destination
	lw $t0, 1444($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1448($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_40_meth 	#LOAD
	sw $t3, 1452($fp) 	#Save loaded value in destination
	lw $t7, 1452($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1456($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 1428($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t1) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 1448($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1456($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 1440($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 1424($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 1428($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t7) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1416($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 1416($fp) 	#Obtain value to assign
	sw $t1, 1256($fp) 	#Assign value
	j label_continue_42 	#Jump to label_continue_42
label_else_42:
	la $t8, data_70_string 	#LOAD
	sw $t8, 1464($fp) 	#Save loaded value in destination
	lw $t4, 1464($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1468($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t4, -4($t1) 	#
	sw $t4, 1472($fp) 	#Save type value in destination
	la $t6, data_14_eol 	#LOAD
	sw $t6, 1480($fp) 	#Save loaded value in destination
	lw $t7, 1480($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1484($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 1488($fp) 	#Save loaded value in destination
	lw $t7, 1488($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1492($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_40_meth 	#LOAD
	sw $t7, 1496($fp) 	#Save loaded value in destination
	lw $t6, 1496($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1500($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 1472($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t7) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 1492($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 1500($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 1484($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 1468($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 1472($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t5) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1460($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, -4($fp) 	#Typeof
	lw $t4, -4($t8) 	#
	sw $t4, 1508($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 1516($fp) 	#Save loaded value in destination
	lw $t7, 1516($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1520($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 1524($fp) 	#Save loaded value in destination
	lw $t2, 1524($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1528($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_41_meth 	#LOAD
	sw $t5, 1532($fp) 	#Save loaded value in destination
	lw $t5, 1532($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1536($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 1508($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t9) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1528($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1536($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1520($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 56($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 1508($fp) 	#get type dir for Dynamic Call
	lw $t0, 48($t2) 	#Get method of index 12
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1504($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t9, data_88_string 	#LOAD
	sw $t9, 1544($fp) 	#Save loaded value in destination
	lw $t7, 1544($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1548($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t1, -4($t0) 	#
	sw $t1, 1552($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 1560($fp) 	#Save loaded value in destination
	lw $t3, 1560($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1564($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 1568($fp) 	#Save loaded value in destination
	lw $t0, 1568($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1572($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_40_meth 	#LOAD
	sw $t8, 1576($fp) 	#Save loaded value in destination
	lw $t3, 1576($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1580($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 1552($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t7) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1572($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 1580($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 1564($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 1548($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 1552($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t0) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1540($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 1540($fp) 	#Obtain value to assign
	sw $t4, 1256($fp) 	#Assign value
label_continue_42:
	lw $t0, 1256($fp) 	#Obtain value to assign
	sw $t0, 1224($fp) 	#Assign value
	j label_continue_41 	#Jump to label_continue_41
label_else_41:
	lw $t5, 332($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 1588($fp) 	#Save obtained attribute in destination
	la $t3, data_89_string 	#LOAD
	sw $t3, 1592($fp) 	#Save loaded value in destination
	lw $t5, 1592($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1596($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 1596($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 1600($fp) 	#Save obtained attribute in destination
	sw $t1, 1588($fp) 	#Value is direction
	sw $t3, 1600($fp) 	#Value is direction
	sub $t0,  $t1, $t3 	#Minus
	sw $t0, 1604($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 1608($fp) 	#Save loaded value in destination
	sw $t8, 1608($fp) 	#Value is direction
	sw $t0, 1604($fp) 	#Value is direction
	sub $t9,  $t8, $t0 	#Minus
	sw $t9, 1604($fp) 	#Save result of minus
	lw $t5, 1604($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1612($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t3, 1612($fp) 	#Mov comparisson value to register
	bgt $t2,  $t3, label_then_43 	#Compare values in registers and jump to label_then_43 if the second is greater than 0
	j label_else_43 	#Jump to label_else_43
label_then_43:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1616($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	jal E___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1624($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 56($fp) 	#Typeof
	lw $t1, -4($t3) 	#
	sw $t1, 1632($fp) 	#Save type value in destination
	la $t3, data_14_eol 	#LOAD
	sw $t3, 1640($fp) 	#Save loaded value in destination
	lw $t2, 1640($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1644($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 1648($fp) 	#Save loaded value in destination
	lw $t7, 1648($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1652($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_67_meth 	#LOAD
	sw $t1, 1656($fp) 	#Save loaded value in destination
	lw $t9, 1656($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1660($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 1632($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t0) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1652($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 1660($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1644($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t9, 56($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 1632($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t8) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1628($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 1624($fp) 	#Typeof
	lw $t6, -4($t0) 	#
	sw $t6, 1664($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 1672($fp) 	#Save loaded value in destination
	lw $t0, 1672($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1676($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 1680($fp) 	#Save loaded value in destination
	lw $t1, 1680($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1684($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_79_meth 	#LOAD
	sw $t2, 1688($fp) 	#Save loaded value in destination
	lw $t9, 1688($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1692($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 1664($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t6) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 1684($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1692($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 1676($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t6, 1624($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 1628($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 1664($fp) 	#get type dir for Dynamic Call
	lw $t3, 44($t9) 	#Get method of index 11
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1620($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 1620($fp) 	#Obtain value to assign
	sw $t3, 1616($fp) 	#Assign value
	lw $t4, 56($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 1704($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 1712($fp) 	#Save loaded value in destination
	lw $t3, 1712($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1716($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 1720($fp) 	#Save loaded value in destination
	lw $t1, 1720($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1724($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_67_meth 	#LOAD
	sw $t2, 1728($fp) 	#Save loaded value in destination
	lw $t4, 1728($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1732($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 1704($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t9) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1724($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1732($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1716($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t5, 56($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 1704($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t0) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1700($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, 1700($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t6) 	#Load attribute in index 0
	sw $t0, 1736($fp) 	#Save obtained attribute in destination
	lw $t6, 1616($fp) 	#Typeof
	lw $t8, -4($t6) 	#
	sw $t8, 1744($fp) 	#Save type value in destination
	la $t9, data_14_eol 	#LOAD
	sw $t9, 1752($fp) 	#Save loaded value in destination
	lw $t8, 1752($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1756($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 1760($fp) 	#Save loaded value in destination
	lw $t1, 1760($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1764($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_67_meth 	#LOAD
	sw $t0, 1768($fp) 	#Save loaded value in destination
	lw $t4, 1768($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1772($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 1744($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t4) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1764($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 1772($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1756($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t3, 1616($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 1744($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t3) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1740($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 1740($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 1776($fp) 	#Save obtained attribute in destination
	li $t5, 8 	#Load Int
	sw $t5, 1780($fp) 	#Save loaded value in destination
	lw $t7, 1780($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1784($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 1784($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 1788($fp) 	#Save obtained attribute in destination
	sw $t6, 1776($fp) 	#Value is direction
	sw $t7, 1788($fp) 	#Value is direction
	mult $t6, $t7 	#Mult
	mfhi $t6 	#
	sw $t6, 1792($fp) 	#Save result of Mult
	lw $t0, 1792($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 1796($fp) 	#Save obtained attribute in destination
	sw $t7, 1736($fp) 	#Value is direction
	sw $t3, 1796($fp) 	#Value is direction
	sub $t4,  $t7, $t3 	#Minus
	sw $t4, 1800($fp) 	#Save result of minus
	lw $t2, 1800($fp) 	#Obtain value to assign
	sw $t2, 1696($fp) 	#Assign value
	la $t6, data_70_string 	#LOAD
	sw $t6, 1808($fp) 	#Save loaded value in destination
	lw $t7, 1808($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1812($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t9, -4($t8) 	#
	sw $t9, 1816($fp) 	#Save type value in destination
	la $t7, data_14_eol 	#LOAD
	sw $t7, 1824($fp) 	#Save loaded value in destination
	lw $t5, 1824($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1828($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 1832($fp) 	#Save loaded value in destination
	lw $t4, 1832($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1836($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_40_meth 	#LOAD
	sw $t5, 1840($fp) 	#Save loaded value in destination
	lw $t1, 1840($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1844($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 1816($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t4) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1836($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 1844($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 1828($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 1812($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 1816($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t2) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1804($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, -4($fp) 	#Typeof
	lw $t8, -4($t9) 	#
	sw $t8, 1852($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 1860($fp) 	#Save loaded value in destination
	lw $t5, 1860($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1864($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_15_under 	#LOAD
	sw $t7, 1868($fp) 	#Save loaded value in destination
	lw $t0, 1868($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1872($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_41_meth 	#LOAD
	sw $t2, 1876($fp) 	#Save loaded value in destination
	lw $t0, 1876($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1880($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 1852($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t5) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 1872($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 1880($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1864($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 56($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 1852($fp) 	#get type dir for Dynamic Call
	lw $t8, 48($t9) 	#Get method of index 12
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1848($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_90_string 	#LOAD
	sw $t8, 1888($fp) 	#Save loaded value in destination
	lw $t7, 1888($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1892($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t4, -4($t8) 	#
	sw $t4, 1896($fp) 	#Save type value in destination
	la $t1, data_14_eol 	#LOAD
	sw $t1, 1904($fp) 	#Save loaded value in destination
	lw $t4, 1904($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1908($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 1912($fp) 	#Save loaded value in destination
	lw $t3, 1912($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1916($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_40_meth 	#LOAD
	sw $t0, 1920($fp) 	#Save loaded value in destination
	lw $t6, 1920($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1924($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 1896($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t3) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1916($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 1924($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1908($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 1892($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 1896($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t0) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1884($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, -4($fp) 	#Typeof
	lw $t1, -4($t6) 	#
	sw $t1, 1932($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 1940($fp) 	#Save loaded value in destination
	lw $t2, 1940($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 1944($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 1948($fp) 	#Save loaded value in destination
	lw $t5, 1948($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1952($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_41_meth 	#LOAD
	sw $t7, 1956($fp) 	#Save loaded value in destination
	lw $t6, 1956($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1960($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 1932($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t7) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1952($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1960($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 1944($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 1616($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 1932($fp) 	#get type dir for Dynamic Call
	lw $t9, 48($t4) 	#Get method of index 12
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1928($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t9, data_91_string 	#LOAD
	sw $t9, 1968($fp) 	#Save loaded value in destination
	lw $t0, 1968($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1972($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t1, -4($t3) 	#
	sw $t1, 1976($fp) 	#Save type value in destination
	la $t4, data_14_eol 	#LOAD
	sw $t4, 1984($fp) 	#Save loaded value in destination
	lw $t8, 1984($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1988($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_under 	#LOAD
	sw $t0, 1992($fp) 	#Save loaded value in destination
	lw $t8, 1992($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1996($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_40_meth 	#LOAD
	sw $t0, 2000($fp) 	#Save loaded value in destination
	lw $t0, 2000($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 2004($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 1976($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t2) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 1996($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 2004($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 1988($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 1972($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 1976($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t3) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1964($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 2008($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 2008($fp) 	#Obtain value to assign
	sw $t2, 700($fp) 	#Assign value
	lw $t6, 700($fp) 	#Typeof
	lw $t9, -4($t6) 	#
	sw $t9, 2020($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 2028($fp) 	#Save loaded value in destination
	lw $t2, 2028($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 2032($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 2036($fp) 	#Save loaded value in destination
	lw $t7, 2036($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 2040($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_68_meth 	#LOAD
	sw $t8, 2044($fp) 	#Save loaded value in destination
	lw $t0, 2044($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 2048($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 2020($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t6) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 2040($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 2048($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 2032($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t4, 700($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 1696($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 2020($fp) 	#get type dir for Dynamic Call
	lw $t8, 28($t2) 	#Get method of index 7
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 2016($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, -4($fp) 	#Typeof
	lw $t9, -4($t6) 	#
	sw $t9, 2052($fp) 	#Save type value in destination
	la $t2, data_14_eol 	#LOAD
	sw $t2, 2060($fp) 	#Save loaded value in destination
	lw $t9, 2060($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 2064($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_15_under 	#LOAD
	sw $t4, 2068($fp) 	#Save loaded value in destination
	lw $t8, 2068($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 2072($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_40_meth 	#LOAD
	sw $t8, 2076($fp) 	#Save loaded value in destination
	lw $t2, 2076($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 2080($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 2052($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t7) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 2072($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 2080($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 2064($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 2016($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 2052($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t4) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 2012($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_14_eol 	#LOAD
	sw $t8, 2088($fp) 	#Save loaded value in destination
	lw $t3, 2088($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 2092($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t4, -4($t9) 	#
	sw $t4, 2096($fp) 	#Save type value in destination
	la $t0, data_14_eol 	#LOAD
	sw $t0, 2104($fp) 	#Save loaded value in destination
	lw $t6, 2104($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 2108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 2112($fp) 	#Save loaded value in destination
	lw $t6, 2112($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 2116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_40_meth 	#LOAD
	sw $t6, 2120($fp) 	#Save loaded value in destination
	lw $t4, 2120($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 2124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 2096($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t8) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 2116($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 2124($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 2108($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 2092($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 2096($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t9) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 2084($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 1616($fp) 	#Obtain value to assign
	sw $t5, 56($fp) 	#Assign value
	lw $t5, 56($fp) 	#Obtain value to assign
	sw $t5, 1584($fp) 	#Assign value
	j label_continue_43 	#Jump to label_continue_43
label_else_43:
	lw $t2, 332($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t2) 	#Load attribute in index 0
	sw $t8, 2132($fp) 	#Save obtained attribute in destination
	la $t5, data_92_string 	#LOAD
	sw $t5, 2136($fp) 	#Save loaded value in destination
	lw $t1, 2136($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 2140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 2140($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 2144($fp) 	#Save obtained attribute in destination
	sw $t0, 2132($fp) 	#Value is direction
	sw $t3, 2144($fp) 	#Value is direction
	sub $t6,  $t0, $t3 	#Minus
	sw $t6, 2148($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 2152($fp) 	#Save loaded value in destination
	sw $t9, 2152($fp) 	#Value is direction
	sw $t8, 2148($fp) 	#Value is direction
	sub $t4,  $t9, $t8 	#Minus
	sw $t4, 2148($fp) 	#Save result of minus
	lw $t0, 2148($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 2156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t1, 2156($fp) 	#Mov comparisson value to register
	bgt $t0,  $t1, label_then_44 	#Compare values in registers and jump to label_then_44 if the second is greater than 0
	j label_else_44 	#Jump to label_else_44
label_then_44:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 2160($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 2160($fp) 	#Obtain value to assign
	sw $t7, 56($fp) 	#Assign value
	lw $t9, 56($fp) 	#Obtain value to assign
	sw $t9, 2128($fp) 	#Assign value
	j label_continue_44 	#Jump to label_continue_44
label_else_44:
	lw $t3, 332($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 2168($fp) 	#Save obtained attribute in destination
	la $t6, data_93_string 	#LOAD
	sw $t6, 2172($fp) 	#Save loaded value in destination
	lw $t5, 2172($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 2176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 2176($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 2180($fp) 	#Save obtained attribute in destination
	sw $t0, 2168($fp) 	#Value is direction
	sw $t3, 2180($fp) 	#Value is direction
	sub $t7,  $t0, $t3 	#Minus
	sw $t7, 2184($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 2188($fp) 	#Save loaded value in destination
	sw $t9, 2188($fp) 	#Value is direction
	sw $t7, 2184($fp) 	#Value is direction
	sub $t6,  $t9, $t7 	#Minus
	sw $t6, 2184($fp) 	#Save result of minus
	lw $t6, 2184($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 2192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t9, 2192($fp) 	#Mov comparisson value to register
	bgt $t8,  $t9, label_then_45 	#Compare values in registers and jump to label_then_45 if the second is greater than 0
	j label_else_45 	#Jump to label_else_45
label_then_45:
	li $t5, 0 	#Load Int
	sw $t5, 2196($fp) 	#Save loaded value in destination
	lw $t5, 2196($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 2200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 2200($fp) 	#Obtain value to assign
	sw $t2, 4($fp) 	#Assign value
	lw $t6, 4($fp) 	#Obtain value to assign
	sw $t6, 2164($fp) 	#Assign value
	j label_continue_45 	#Jump to label_continue_45
label_else_45:
	jal A___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 2208($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 56($fp) 	#Typeof
	lw $t3, -4($t5) 	#
	sw $t3, 2216($fp) 	#Save type value in destination
	la $t8, data_14_eol 	#LOAD
	sw $t8, 2224($fp) 	#Save loaded value in destination
	lw $t7, 2224($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 2228($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_15_under 	#LOAD
	sw $t2, 2232($fp) 	#Save loaded value in destination
	lw $t7, 2232($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 2236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_67_meth 	#LOAD
	sw $t5, 2240($fp) 	#Save loaded value in destination
	lw $t1, 2240($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 2244($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 2216($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t2) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 2236($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 2244($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 2228($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t6, 56($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 2216($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t8) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 2212($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 2208($fp) 	#Typeof
	lw $t9, -4($t1) 	#
	sw $t9, 2248($fp) 	#Save type value in destination
	la $t5, data_14_eol 	#LOAD
	sw $t5, 2256($fp) 	#Save loaded value in destination
	lw $t0, 2256($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 2260($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_under 	#LOAD
	sw $t6, 2264($fp) 	#Save loaded value in destination
	lw $t0, 2264($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 2268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_94_meth 	#LOAD
	sw $t1, 2272($fp) 	#Save loaded value in destination
	lw $t8, 2272($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 2276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 2248($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t7) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 2268($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 2276($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 2260($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t7, 2208($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 2212($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 2248($fp) 	#get type dir for Dynamic Call
	lw $t2, 20($t3) 	#Get method of index 5
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 2204($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 2204($fp) 	#Obtain value to assign
	sw $t0, 56($fp) 	#Assign value
	lw $t0, 56($fp) 	#Obtain value to assign
	sw $t0, 2164($fp) 	#Assign value
label_continue_45:
	lw $t6, 2164($fp) 	#Obtain value to assign
	sw $t6, 2128($fp) 	#Assign value
label_continue_44:
	lw $t7, 2128($fp) 	#Obtain value to assign
	sw $t7, 1584($fp) 	#Assign value
label_continue_43:
	lw $t7, 1584($fp) 	#Obtain value to assign
	sw $t7, 1224($fp) 	#Assign value
label_continue_41:
	lw $t7, 1224($fp) 	#Obtain value to assign
	sw $t7, 1148($fp) 	#Assign value
label_continue_40:
	lw $t8, 1148($fp) 	#Obtain value to assign
	sw $t8, 1072($fp) 	#Assign value
label_continue_39:
	lw $t9, 1072($fp) 	#Obtain value to assign
	sw $t9, 996($fp) 	#Assign value
label_continue_38:
	lw $t3, 996($fp) 	#Obtain value to assign
	sw $t3, 776($fp) 	#Assign value
label_continue_37:
	lw $t0, 776($fp) 	#Obtain value to assign
	sw $t0, 556($fp) 	#Assign value
label_continue_36:
	lw $t5, 556($fp) 	#Obtain value to assign
	sw $t5, 328($fp) 	#Assign value
label_continue_35:
	j label_while_label_2 	#Jump to label_while_label_2
label_pool_label_2:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 2280($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 2280($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -2284 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
