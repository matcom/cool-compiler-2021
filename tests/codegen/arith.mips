.data
	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_A: .word 56
	type_A_inherits_from: .word type_Object
	type_A_name_address: .word type_A_name_size
	type_A___init__: .word function___init___at_A
	type_A_abort: .word function_abort_at_Object
	type_A_type_name: .word function_type_name_at_Object
	type_A_copy: .word function_copy_at_Object
	type_A_value: .word function_value_at_A
	type_A_set_var: .word function_set_var_at_A
	type_A_method1: .word function_method1_at_A
	type_A_method2: .word function_method2_at_A
	type_A_method3: .word function_method3_at_A
	type_A_method4: .word function_method4_at_A
	type_A_method5: .word function_method5_at_A
	
	type_B: .word 56
	type_B_inherits_from: .word type_A
	type_B_name_address: .word type_B_name_size
	type_B___init__: .word function___init___at_B
	type_B_abort: .word function_abort_at_Object
	type_B_type_name: .word function_type_name_at_Object
	type_B_copy: .word function_copy_at_Object
	type_B_value: .word function_value_at_A
	type_B_set_var: .word function_set_var_at_A
	type_B_method1: .word function_method1_at_A
	type_B_method2: .word function_method2_at_A
	type_B_method3: .word function_method3_at_A
	type_B_method4: .word function_method4_at_A
	type_B_method5: .word function_method5_at_B
	
	type_C: .word 60
	type_C_inherits_from: .word type_B
	type_C_name_address: .word type_C_name_size
	type_C___init__: .word function___init___at_C
	type_C_abort: .word function_abort_at_Object
	type_C_type_name: .word function_type_name_at_Object
	type_C_copy: .word function_copy_at_Object
	type_C_value: .word function_value_at_A
	type_C_set_var: .word function_set_var_at_A
	type_C_method1: .word function_method1_at_A
	type_C_method2: .word function_method2_at_A
	type_C_method3: .word function_method3_at_A
	type_C_method4: .word function_method4_at_A
	type_C_method5: .word function_method5_at_C
	type_C_method6: .word function_method6_at_C
	
	type_D: .word 60
	type_D_inherits_from: .word type_B
	type_D_name_address: .word type_D_name_size
	type_D___init__: .word function___init___at_D
	type_D_abort: .word function_abort_at_Object
	type_D_type_name: .word function_type_name_at_Object
	type_D_copy: .word function_copy_at_Object
	type_D_value: .word function_value_at_A
	type_D_set_var: .word function_set_var_at_A
	type_D_method1: .word function_method1_at_A
	type_D_method2: .word function_method2_at_A
	type_D_method3: .word function_method3_at_A
	type_D_method4: .word function_method4_at_A
	type_D_method5: .word function_method5_at_B
	type_D_method7: .word function_method7_at_D
	
	type_E: .word 64
	type_E_inherits_from: .word type_D
	type_E_name_address: .word type_E_name_size
	type_E___init__: .word function___init___at_E
	type_E_abort: .word function_abort_at_Object
	type_E_type_name: .word function_type_name_at_Object
	type_E_copy: .word function_copy_at_Object
	type_E_value: .word function_value_at_A
	type_E_set_var: .word function_set_var_at_A
	type_E_method1: .word function_method1_at_A
	type_E_method2: .word function_method2_at_A
	type_E_method3: .word function_method3_at_A
	type_E_method4: .word function_method4_at_A
	type_E_method5: .word function_method5_at_B
	type_E_method7: .word function_method7_at_D
	type_E_method6: .word function_method6_at_E
	
	type_A2I: .word 48
	type_A2I_inherits_from: .word type_Object
	type_A2I_name_address: .word type_A2I_name_size
	type_A2I___init__: .word function___init___at_A2I
	type_A2I_abort: .word function_abort_at_Object
	type_A2I_type_name: .word function_type_name_at_Object
	type_A2I_copy: .word function_copy_at_Object
	type_A2I_c2i: .word function_c2i_at_A2I
	type_A2I_i2c: .word function_i2c_at_A2I
	type_A2I_a2i: .word function_a2i_at_A2I
	type_A2I_a2i_aux: .word function_a2i_aux_at_A2I
	type_A2I_i2a: .word function_i2a_at_A2I
	type_A2I_i2a_aux: .word function_i2a_aux_at_A2I
	
	type_Main: .word 84
	type_Main_inherits_from: .word type_IO
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_menu: .word function_menu_at_Main
	type_Main_prompt: .word function_prompt_at_Main
	type_Main_get_int: .word function_get_int_at_Main
	type_Main_is_even: .word function_is_even_at_Main
	type_Main_class_type: .word function_class_type_at_Main
	type_Main_print: .word function_print_at_Main
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_A_name_size: .word 1
	type_A_name: .asciiz "A"
	
	type_B_name_size: .word 1
	type_B_name: .asciiz "B"
	
	type_C_name_size: .word 1
	type_C_name: .asciiz "C"
	
	type_D_name_size: .word 1
	type_D_name: .asciiz "D"
	
	type_E_name_size: .word 1
	type_E_name: .asciiz "E"
	
	type_A2I_name_size: .word 3
	type_A2I_name: .asciiz "A2I"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	function_add:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Addition operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		add $t2, $t0, $t1 # $t2 = $t0 + $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Subtraction operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sub $t2, $t0, $t1 # $t2 = $t0 - $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Multiplication operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		mult $t0, $t1 # $t2 = $t0 * $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Division operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		div $t0, $t1 # $t2 = $t0 / $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Xor operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		xor $t2, $t0, $t1 # $t0 = $t0 ^ $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		slt $t2, $t0, $t1 # $t2 = $t0 < $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sle $t2, $t0, $t1 # $t2 = $t0 <= $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# Function parameters
		#   $ra = 48($sp)
		#   a = 44($sp)
		#   b = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_0 = address of allocated object Int
		
		# Allocating NUll to internal_1
		sw $zero, 32($sp) # internal_1 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_2 = address of allocated object Int
		
		# internal_2 = EqualAddress(a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 = EqualAddress(b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# If internal_2 then goto a_is_type_object
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_object
		
		# internal_3 = typeof a that is the first word of the object
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 = direction of Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 = direction of Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 = direction of String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_7 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_8 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_9 = address of allocated object Int
		
		# internal_7 = EqualAddress(internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 = EqualAddress(internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 = EqualAddress(internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_7 then goto a_is_type_int_or_bool
		lw $t0, 8($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_8 then goto a_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_9 then goto a_is_type_string
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_string
		
		# Jumping to a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 = EqualInt(a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 = EqualStr(a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		# By default we assume the strings are equals
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		# The strings are no equals
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# Equal operation
		lw $t0, 44($sp) # Save in $t0 the left operand address
		lw $t1, 40($sp) # Save in $t1 the right operand address
		seq $t2, $t0, $t1 # $t2 = $t0 == $t1
		
		lw $t0, 36($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Jumping to end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# Function parameters
		#   $ra = 36($sp)
		#   dest = 32($sp)
		#   source = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating NUll to internal_0
		sw $zero, 24($sp) # internal_0 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_1 = address of allocated object Int
		
		# internal_1 = EqualAddress(source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 = EqualAddress(dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# If internal_1 then goto source_is_type_object
		lw $t0, 20($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_object
		
		# internal_2 = typeof source that is the first word of the object
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 = direction of Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 = direction of Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_6 = address of allocated object Int
		
		# internal_5 = EqualAddress(internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 = EqualAddress(internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto source_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# If internal_6 then goto source_is_type_int_or_bool
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# Jumping to source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest = source where source is an integer
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp) # Pointer to source
		lw $t1, 0($t0) # $t1 = type of source
		lw $t2, 8($t0) # $t2 = value of source
		sw $t1, 0($v0) # Save type of dest
		sw $a0, 4($v0) # Save size of dest
		sw $t2, 8($v0) # Save value of dest
		sw $v0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest = source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 32($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# Function parameters
		#   $ra = 28($sp)
		#   self = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 33
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 65
		sb $t0, 8($v0) # internal_0[0] = 'A'
		
		addi $t0, $zero, 98
		sb $t0, 9($v0) # internal_0[1] = 'b'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_0[2] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_0[3] = 'r'
		
		addi $t0, $zero, 116
		sb $t0, 12($v0) # internal_0[4] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_0[5] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 14($v0) # internal_0[6] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_0[7] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_0[8] = 'l'
		
		addi $t0, $zero, 108
		sb $t0, 17($v0) # internal_0[9] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_0[10] = 'e'
		
		addi $t0, $zero, 100
		sb $t0, 19($v0) # internal_0[11] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_0[12] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 21($v0) # internal_0[13] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 22($v0) # internal_0[14] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_0[15] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 24($v0) # internal_0[16] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_0[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_0[18] = 'c'
		
		addi $t0, $zero, 108
		sb $t0, 27($v0) # internal_0[19] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_0[20] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 29($v0) # internal_0[21] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_0[22] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_0[23] = ' '
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_0 = "Abort called from class "
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_3[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 8($sp) # internal_3 = "\n"
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method type_name of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp) # internal_1 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_0
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 12($sp) # $t0 = internal_2
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Exit program
		li $v0, 10
		syscall
		
		# Loading return value in $v1
		lw $v1, 24($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = name of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 8($t1) # $t2 = direction of the type name
		la $t3, 4($t2) # $t3 = address of the name
		lw $t2, 0($t2) # $t2 = length of the name
		
		addi $t2, $t2, 9 # Setting space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9 # Restoring space for the type, the size and the null byte
		
		la $t4, type_String
		sw $t4, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t4, $v0, 0 # $t4 = direction of the new string
		addi $t4, $t4, 8 # Pointer to the first character of the string
		xor $t5, $t5, $t5 # Initializing counter
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3) # Loading the character
		sb $t6, 0($t4)
		addi $t4, $t4, 1 # Incrementing the pointer to the new string
		addi $t3, $t3, 1 # Incrementing the pointer to the string in self
		addi $t5, $t5, 1 # Incrementing counter
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4) # Setting the null byte
		
		sw $v0, 0($sp) # Storing the new string in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = copy of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 4($t0) # $t2 = length of self in bytes
		
		# Allocating space for the new object
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0 # $t3 = direction of the new object
		sw $t1, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		# Initializing the variable of the loop
		addi $t0, $t0, 8 # Pointer to the first character of the object
		addi $t3, $t3, 8 # Pointer to the first character of the object
		addi $t2, $2, -8 # Decrementing in 8 the length of the object
		xor $t4, $t4, $t4 # Initializing counter
		
		# Loop copying the object
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t0, $t0, 1 # Incrementing the pointer to the object
		addi $t3, $t3, 1 # Incrementing the pointer to the new object
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		lw $t0, 0($sp) # $t0 = x
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String x
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		# Printing the Int x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0 # Initializing counter
		while_read_start:
		lb $t1, buffer_input($t0) # Loading the byte
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1 # Incrementing counter
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9 # Adding space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9 # Adding space for the type, the size and the null byte
		la $t2, type_String
		sw $t2, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t3, $v0, 8 # Pointer to the first character of the string
		xor $t4, $t4, $t4 # Initializing counter
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t3, $t3, 1 # Imcremeenting pointer
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3) # Storing the null byte
		
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# internal_0 = length of self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9 # Subtracting 9 for the type, length, and null-terminator
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   s = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0) # $t2 = length of str1
		lw $t3, 4($t1) # $t3 = length of str2
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3 # $t4 = length of str1 + str2
		addi $t4, $t4, 9 # Adding the space for the type (4bytes), the length(4bytes) and the null-terminator(1byte)
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9 # Restoring $t4 = length of str1 + str2
		add $t5, $zero, $v0 # $t5 = address of the new string object
		addi $t5, $t5, 8 # $t5 = address of the first byte of the new string
		
		la $t8, type_String
		sw $t8, 0($v0) # Setting type in the first word of th object
		
		sw $a0, 4($v0) # Setting length of the string in the second word of the object
		
		# Copying str1 to the new string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str1_start
		while_copy_str1_end:
		
		# Copying str2 to the new string
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self + s
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		#   i = 8($sp)
		#   l = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self[i:i + l]
		lw $t0, 12($sp) # $t0 = address of the string
		lw $t1, 4($t0) # $t1 = length of the string
		addi $t1, $t1, -9 # $t1 = length of the string + 9
		lw $t2, 8($sp) # $t2 = start of the substring
		lw $t2, 8($t2)
		lw $t3, 4($sp) # $t3 = length of the substring
		lw $t3, 8($t3)
		add $t4, $t2, $t3 # $t4 = start of the substring + length of the substring
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0) # Setting type in the first word of the object
		
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t0, $t0, 8 # pointing to the first byte of the string
		add $t0, $t0, $t2 # pointing to the first byte of the substring
		move $t5, $v0 # $t5 = address of the new string
		add $t5, $t5, 8 # pointing to the first byte of the string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of the string
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self[i:i + l]
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_A:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Set attribute var of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8759045249606
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045249606
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045249606
		j object_set_attribute_8759045249606
		int_set_attribute_8759045249606:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045249606
		bool_set_attribute_8759045249606:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045249606
		object_set_attribute_8759045249606:
		sw $t1, 8($t0) # self.var = internal_0
		end_set_attribute_8759045249606:
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_value_at_A:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Get attribute var of self
		lw $t0, 4($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'var' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045249630
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045249630
		j object_get_attribute_8759045249630
		int_get_attribute_8759045249630:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp) # internal_0 = self.var
		j end_get_attribute_8759045249630
		bool_get_attribute_8759045249630:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp) # internal_0 = self.var
		j end_get_attribute_8759045249630
		object_get_attribute_8759045249630:
		sw $t1, 0($sp) # internal_0 = self.var
		end_get_attribute_8759045249630:
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_set_var_at_A:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   num = 0($sp)
		
		# Set attribute var of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = num
		beq $t1, $zero, object_set_attribute_8759045249684
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045249684
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045249684
		j object_set_attribute_8759045249684
		int_set_attribute_8759045249684:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = num
		j end_set_attribute_8759045249684
		bool_set_attribute_8759045249684:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = num
		j end_set_attribute_8759045249684
		object_set_attribute_8759045249684:
		sw $t1, 8($t0) # self.var = num
		end_set_attribute_8759045249684:
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method1_at_A:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   num = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method2_at_A:
		# Function parameters
		#   $ra = 36($sp)
		#   self = 32($sp)
		#   num1 = 28($sp)
		#   num2 = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num1
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing num1
		
		# Argument num2
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing num2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_1 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 32($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_2 = address of allocated object B
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function___init___at_B
		jal function___init___at_B
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_2 = result of function___init___at_B
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method set_var of B
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function_method3_at_A:
		# Function parameters
		#   $ra = 40($sp)
		#   self = 36($sp)
		#   num = 32($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -32
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # x = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_2
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_1
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_4 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_4 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_6 = address of allocated object Int
		
		# Get method set_var of C
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_7
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method4_at_A:
		# Function parameters
		#   $ra = 72($sp)
		#   self = 68($sp)
		#   num1 = 64($sp)
		#   num2 = 60($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -60
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num2
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing num2
		
		# Argument num1
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing num1
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_2 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_2
		lw $t0, 48($sp)
		sw $t0, 52($sp)
		
		# If internal_1 then goto then_8759045309160
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045309160
		
		# Jumping to else_8759045309160
		j else_8759045309160
		
		then_8759045309160:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num1
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing num1
		
		# Argument num2
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing num2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_4 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_4
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 56($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 36($sp) # internal_5 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 44($sp) # internal_5 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_7 = address of allocated object Int
		
		# Get method set_var of D
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_8
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_6
		lw $t0, 32($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8759045309160
		j endif_8759045309160
		
		else_8759045309160:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num2
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing num2
		
		# Argument num1
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing num1
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_10 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_10
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 56($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_11 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_11
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_11 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_13 = address of allocated object Int
		
		# Get method set_var of D
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_11
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_11
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_14
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_12
		lw $t0, 8($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8759045309160
		j endif_8759045309160
		
		endif_8759045309160:
		
		# Loading return value in $v1
		lw $v1, 56($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 60
		
		jr $ra
		
	function_method5_at_A:
		# Function parameters
		#   $ra = 60($sp)
		#   self = 56($sp)
		#   num = 52($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -52
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_1
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 60($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument internal_3
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # y = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating NUll to internal_4
		sw $zero, 32($sp) # internal_4 = 0
		
		while_start_8759045309742:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument num
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_less_than_or_equal
		jal function_less_than_or_equal
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_5 = result of function_less_than_or_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_5 then goto while_body_8759045309742
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8759045309742
		
		# Jumping to while_end_8759045309742
		j while_end_8759045309742
		
		while_body_8759045309742:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing y
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_6 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_6
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 60($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument internal_7
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_8 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument internal_8
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # y = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to while_start_8759045309742
		j while_start_8759045309742
		
		while_end_8759045309742:
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_9 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_9 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_11 = address of allocated object Int
		
		# Get method set_var of E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_9
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_12
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_10 = result of internal_12
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 52
		
		jr $ra
		
	function___init___at_B:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Set attribute var of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8759045221316
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045221316
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045221316
		j object_set_attribute_8759045221316
		int_set_attribute_8759045221316:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045221316
		bool_set_attribute_8759045221316:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045221316
		object_set_attribute_8759045221316:
		sw $t1, 8($t0) # self.var = internal_0
		end_set_attribute_8759045221316:
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method5_at_B:
		# Function parameters
		#   $ra = 32($sp)
		#   self = 28($sp)
		#   num = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument num
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_1 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 32($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_2 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_2 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method set_var of E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function___init___at_C:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Set attribute var of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8759045222304
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045222304
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045222304
		j object_set_attribute_8759045222304
		int_set_attribute_8759045222304:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045222304
		bool_set_attribute_8759045222304:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045222304
		object_set_attribute_8759045222304:
		sw $t1, 8($t0) # self.var = internal_0
		end_set_attribute_8759045222304:
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_C:
		# Function parameters
		#   $ra = 40($sp)
		#   self = 36($sp)
		#   num = 32($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -32
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # x = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_2
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_1
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_4 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_4 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_6 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_7
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method5_at_C:
		# Function parameters
		#   $ra = 36($sp)
		#   self = 32($sp)
		#   num = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_1 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_1
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_2 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_2
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_3 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_3 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Get method set_var of E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_6
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_4 = result of internal_6
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_D:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Set attribute var of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8759045223536
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045223536
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045223536
		j object_set_attribute_8759045223536
		int_set_attribute_8759045223536:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045223536
		bool_set_attribute_8759045223536:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045223536
		object_set_attribute_8759045223536:
		sw $t1, 8($t0) # self.var = internal_0
		end_set_attribute_8759045223536:
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method7_at_D:
		# Function parameters
		#   $ra = 132($sp)
		#   self = 128($sp)
		#   num = 124($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -124
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument num
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 120($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_4 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_2 = internal_4
		lw $t0, 104($sp)
		sw $t0, 112($sp)
		
		# If internal_2 then goto then_8759045311103
		lw $t0, 112($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045311103
		
		# Jumping to else_8759045311103
		j else_8759045311103
		
		then_8759045311103:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_5 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_6
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_7 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument internal_5
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_7 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_9 = address of allocated object Int
		
		# Get method method7 of D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 140($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_7
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function internal_10
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_8
		lw $t0, 88($sp)
		sw $t0, 116($sp)
		
		# Jumping to endif_8759045311103
		j endif_8759045311103
		
		else_8759045311103:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_12 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_13 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing internal_13
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_14 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_12 = internal_14
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# If internal_12 then goto then_8759045311184
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045311184
		
		# Jumping to else_8759045311184
		j else_8759045311184
		
		then_8759045311184:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_15 = address of allocated object Int
		
		# internal_11 = internal_15
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8759045311184
		j endif_8759045311184
		
		else_8759045311184:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_17 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_18 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_17 = internal_19
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# If internal_17 then goto then_8759045312010
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312010
		
		# Jumping to else_8759045312010
		j else_8759045312010
		
		then_8759045312010:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_20 = address of allocated object Int
		
		# internal_16 = internal_20
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8759045312010
		j endif_8759045312010
		
		else_8759045312010:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_22 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_23 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_23
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_23
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_24 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_22 = internal_24
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# If internal_22 then goto then_8759045312085
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312085
		
		# Jumping to else_8759045312085
		j else_8759045312085
		
		then_8759045312085:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_25 = address of allocated object Int
		
		# internal_21 = internal_25
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8759045312085
		j endif_8759045312085
		
		else_8759045312085:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_26 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_26
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_26
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_27 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_29 = address of allocated object Int
		
		# Get method method7 of D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 140($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_27
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_27
		
		# Calling function internal_30
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_28 = result of internal_30
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_21 = internal_28
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8759045312085
		j endif_8759045312085
		
		endif_8759045312085:
		
		# internal_16 = internal_21
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8759045312010
		j endif_8759045312010
		
		endif_8759045312010:
		
		# internal_11 = internal_16
		lw $t0, 56($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8759045311184
		j endif_8759045311184
		
		endif_8759045311184:
		
		# internal_1 = internal_11
		lw $t0, 76($sp)
		sw $t0, 116($sp)
		
		# Jumping to endif_8759045311103
		j endif_8759045311103
		
		endif_8759045311103:
		
		# Loading return value in $v1
		lw $v1, 116($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 124
		
		jr $ra
		
	function___init___at_E:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Set attribute var of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8759045226018
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045226018
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045226018
		j object_set_attribute_8759045226018
		int_set_attribute_8759045226018:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045226018
		bool_set_attribute_8759045226018:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.var = internal_0
		j end_set_attribute_8759045226018
		object_set_attribute_8759045226018:
		sw $t1, 8($t0) # self.var = internal_0
		end_set_attribute_8759045226018:
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_E:
		# Function parameters
		#   $ra = 36($sp)
		#   self = 32($sp)
		#   num = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # x = address of allocated object Int
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_1
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_2 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_2
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_3 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_3 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_6
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_4 = result of internal_6
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_A2I:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_c2i_at_A2I:
		# Function parameters
		#   $ra = 224($sp)
		#   self = 220($sp)
		#   char = 216($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -216
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_1 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 48
		sb $t0, 8($v0) # internal_2[0] = '0'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 204($sp) # internal_2 = "0"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_2
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# If internal_1 then goto then_8759045312043
		lw $t0, 208($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312043
		
		# Jumping to else_8759045312043
		j else_8759045312043
		
		then_8759045312043:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_4 = address of allocated object Int
		
		# internal_0 = internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8759045312043
		j endif_8759045312043
		
		else_8759045312043:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_6 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 49
		sb $t0, 8($v0) # internal_7[0] = '1'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 184($sp) # internal_7 = "1"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_7
		lw $t0, 196($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_8 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_6 = internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# If internal_6 then goto then_8759045312151
		lw $t0, 188($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312151
		
		# Jumping to else_8759045312151
		j else_8759045312151
		
		then_8759045312151:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_9 = address of allocated object Int
		
		# internal_5 = internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8759045312151
		j endif_8759045312151
		
		else_8759045312151:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_11 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 50
		sb $t0, 8($v0) # internal_12[0] = '2'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 164($sp) # internal_12 = "2"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_12
		lw $t0, 176($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_11 = internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# If internal_11 then goto then_8759045312205
		lw $t0, 168($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312205
		
		# Jumping to else_8759045312205
		j else_8759045312205
		
		then_8759045312205:
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_14 = address of allocated object Int
		
		# internal_10 = internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8759045312205
		j endif_8759045312205
		
		else_8759045312205:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_16 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 51
		sb $t0, 8($v0) # internal_17[0] = '3'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 144($sp) # internal_17 = "3"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_17
		lw $t0, 156($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_18 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_16 = internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# If internal_16 then goto then_8759045312253
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312253
		
		# Jumping to else_8759045312253
		j else_8759045312253
		
		then_8759045312253:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_19 = address of allocated object Int
		
		# internal_15 = internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8759045312253
		j endif_8759045312253
		
		else_8759045312253:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_21 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 52
		sb $t0, 8($v0) # internal_22[0] = '4'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 124($sp) # internal_22 = "4"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_22
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_23 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_21 = internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# If internal_21 then goto then_8759045312317
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312317
		
		# Jumping to else_8759045312317
		j else_8759045312317
		
		then_8759045312317:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_24 = address of allocated object Int
		
		# internal_20 = internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8759045312317
		j endif_8759045312317
		
		else_8759045312317:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_26 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 53
		sb $t0, 8($v0) # internal_27[0] = '5'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 104($sp) # internal_27 = "5"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_27
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_27
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_28 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_26 = internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# If internal_26 then goto then_8759045312371
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312371
		
		# Jumping to else_8759045312371
		j else_8759045312371
		
		then_8759045312371:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_29 = address of allocated object Int
		
		# internal_25 = internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8759045312371
		j endif_8759045312371
		
		else_8759045312371:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_31 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 54
		sb $t0, 8($v0) # internal_32[0] = '6'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # internal_32 = "6"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_32
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_33 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_31 = internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# If internal_31 then goto then_8759045312425
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312425
		
		# Jumping to else_8759045312425
		j else_8759045312425
		
		then_8759045312425:
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_34 = address of allocated object Int
		
		# internal_30 = internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045312425
		j endif_8759045312425
		
		else_8759045312425:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_36 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 55
		sb $t0, 8($v0) # internal_37[0] = '7'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_37 = "7"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_37
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_37
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_38 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_36 = internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# If internal_36 then goto then_8759045312479
		lw $t0, 68($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312479
		
		# Jumping to else_8759045312479
		j else_8759045312479
		
		then_8759045312479:
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_39 = address of allocated object Int
		
		# internal_35 = internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8759045312479
		j endif_8759045312479
		
		else_8759045312479:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_41 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 56
		sb $t0, 8($v0) # internal_42[0] = '8'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_42 = "8"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_42
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_42
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_43 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_41 = internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# If internal_41 then goto then_8759045313049
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313049
		
		# Jumping to else_8759045313049
		j else_8759045313049
		
		then_8759045313049:
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_44 = address of allocated object Int
		
		# internal_40 = internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8759045313049
		j endif_8759045313049
		
		else_8759045313049:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_46 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 57
		sb $t0, 8($v0) # internal_47[0] = '9'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_47 = "9"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_47
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_48 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_46 = internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# If internal_46 then goto then_8759045313103
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313103
		
		# Jumping to else_8759045313103
		j else_8759045313103
		
		then_8759045313103:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_49 = address of allocated object Int
		
		# internal_45 = internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8759045313103
		j endif_8759045313103
		
		else_8759045313103:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_51 = address of allocated object Int
		
		# Get method abort of A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_52
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_50 = result of internal_52
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_53 = address of allocated object Int
		
		# internal_45 = internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8759045313103
		j endif_8759045313103
		
		endif_8759045313103:
		
		# internal_40 = internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8759045313049
		j endif_8759045313049
		
		endif_8759045313049:
		
		# internal_35 = internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8759045312479
		j endif_8759045312479
		
		endif_8759045312479:
		
		# internal_30 = internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045312425
		j endif_8759045312425
		
		endif_8759045312425:
		
		# internal_25 = internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8759045312371
		j endif_8759045312371
		
		endif_8759045312371:
		
		# internal_20 = internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8759045312317
		j endif_8759045312317
		
		endif_8759045312317:
		
		# internal_15 = internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8759045312253
		j endif_8759045312253
		
		endif_8759045312253:
		
		# internal_10 = internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8759045312205
		j endif_8759045312205
		
		endif_8759045312205:
		
		# internal_5 = internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8759045312151
		j endif_8759045312151
		
		endif_8759045312151:
		
		# internal_0 = internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8759045312043
		j endif_8759045312043
		
		endif_8759045312043:
		
		# Loading return value in $v1
		lw $v1, 212($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 216
		
		jr $ra
		
	function_i2c_at_A2I:
		# Function parameters
		#   $ra = 224($sp)
		#   self = 220($sp)
		#   i = 216($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -216
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_2
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# If internal_1 then goto then_8759045312154
		lw $t0, 208($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312154
		
		# Jumping to else_8759045312154
		j else_8759045312154
		
		then_8759045312154:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 48
		sb $t0, 8($v0) # internal_4[0] = '0'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 196($sp) # internal_4 = "0"
		
		# internal_0 = internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8759045312154
		j endif_8759045312154
		
		else_8759045312154:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_7
		lw $t0, 196($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_8 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_6 = internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# If internal_6 then goto then_8759045312272
		lw $t0, 188($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312272
		
		# Jumping to else_8759045312272
		j else_8759045312272
		
		then_8759045312272:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 49
		sb $t0, 8($v0) # internal_9[0] = '1'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 176($sp) # internal_9 = "1"
		
		# internal_5 = internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8759045312272
		j endif_8759045312272
		
		else_8759045312272:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_11 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_12 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_12
		lw $t0, 176($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_11 = internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# If internal_11 then goto then_8759045312503
		lw $t0, 168($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312503
		
		# Jumping to else_8759045312503
		j else_8759045312503
		
		then_8759045312503:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 50
		sb $t0, 8($v0) # internal_14[0] = '2'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 156($sp) # internal_14 = "2"
		
		# internal_10 = internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8759045312503
		j endif_8759045312503
		
		else_8759045312503:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_16 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_17 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_17
		lw $t0, 156($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_18 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_16 = internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# If internal_16 then goto then_8759045313130
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313130
		
		# Jumping to else_8759045313130
		j else_8759045313130
		
		then_8759045313130:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 51
		sb $t0, 8($v0) # internal_19[0] = '3'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 136($sp) # internal_19 = "3"
		
		# internal_15 = internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8759045313130
		j endif_8759045313130
		
		else_8759045313130:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_21 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_22 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_22
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_23 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_21 = internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# If internal_21 then goto then_8759045313163
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313163
		
		# Jumping to else_8759045313163
		j else_8759045313163
		
		then_8759045313163:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 52
		sb $t0, 8($v0) # internal_24[0] = '4'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 116($sp) # internal_24 = "4"
		
		# internal_20 = internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8759045313163
		j endif_8759045313163
		
		else_8759045313163:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_26 = address of allocated object Int
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_27 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_27
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_27
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_28 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_26 = internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# If internal_26 then goto then_8759045313217
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313217
		
		# Jumping to else_8759045313217
		j else_8759045313217
		
		then_8759045313217:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 53
		sb $t0, 8($v0) # internal_29[0] = '5'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 96($sp) # internal_29 = "5"
		
		# internal_25 = internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8759045313217
		j endif_8759045313217
		
		else_8759045313217:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_32 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_32
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_33 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_31 = internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# If internal_31 then goto then_8759045313271
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313271
		
		# Jumping to else_8759045313271
		j else_8759045313271
		
		then_8759045313271:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 54
		sb $t0, 8($v0) # internal_34[0] = '6'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 76($sp) # internal_34 = "6"
		
		# internal_30 = internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045313271
		j endif_8759045313271
		
		else_8759045313271:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_36 = address of allocated object Int
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_37 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_37
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_37
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_38 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_36 = internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# If internal_36 then goto then_8759045313329
		lw $t0, 68($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313329
		
		# Jumping to else_8759045313329
		j else_8759045313329
		
		then_8759045313329:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 55
		sb $t0, 8($v0) # internal_39[0] = '7'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 56($sp) # internal_39 = "7"
		
		# internal_35 = internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8759045313329
		j endif_8759045313329
		
		else_8759045313329:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_41 = address of allocated object Int
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_42 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_42
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_42
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_43 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_41 = internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# If internal_41 then goto then_8759045313383
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313383
		
		# Jumping to else_8759045313383
		j else_8759045313383
		
		then_8759045313383:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 56
		sb $t0, 8($v0) # internal_44[0] = '8'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 36($sp) # internal_44 = "8"
		
		# internal_40 = internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8759045313383
		j endif_8759045313383
		
		else_8759045313383:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_46 = address of allocated object Int
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_47 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_47
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_48 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_46 = internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# If internal_46 then goto then_8759045313437
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313437
		
		# Jumping to else_8759045313437
		j else_8759045313437
		
		then_8759045313437:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 57
		sb $t0, 8($v0) # internal_49[0] = '9'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 16($sp) # internal_49 = "9"
		
		# internal_45 = internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8759045313437
		j endif_8759045313437
		
		else_8759045313437:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_51 = address of allocated object Int
		
		# Get method abort of A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_52
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_50 = result of internal_52
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_53 = ""
		
		# internal_45 = internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8759045313437
		j endif_8759045313437
		
		endif_8759045313437:
		
		# internal_40 = internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8759045313383
		j endif_8759045313383
		
		endif_8759045313383:
		
		# internal_35 = internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8759045313329
		j endif_8759045313329
		
		endif_8759045313329:
		
		# internal_30 = internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045313271
		j endif_8759045313271
		
		endif_8759045313271:
		
		# internal_25 = internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8759045313217
		j endif_8759045313217
		
		endif_8759045313217:
		
		# internal_20 = internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8759045313163
		j endif_8759045313163
		
		endif_8759045313163:
		
		# internal_15 = internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8759045313130
		j endif_8759045313130
		
		endif_8759045313130:
		
		# internal_10 = internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8759045312503
		j endif_8759045312503
		
		endif_8759045312503:
		
		# internal_5 = internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8759045312272
		j endif_8759045312272
		
		endif_8759045312272:
		
		# internal_0 = internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8759045312154
		j endif_8759045312154
		
		endif_8759045312154:
		
		# Loading return value in $v1
		lw $v1, 212($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 216
		
		jr $ra
		
	function_a2i_at_A2I:
		# Function parameters
		#   $ra = 232($sp)
		#   self = 228($sp)
		#   s = 224($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -224
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_3 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_4
		lw $t0, 212($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 220($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_5 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_6 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_6
		lw $t0, 196($sp)
		sw $t0, 216($sp)
		
		# If internal_1 then goto then_8759045312494
		lw $t0, 216($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045312494
		
		# Jumping to else_8759045312494
		j else_8759045312494
		
		then_8759045312494:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_7 = address of allocated object Int
		
		# internal_0 = internal_7
		lw $t0, 192($sp)
		sw $t0, 220($sp)
		
		# Jumping to endif_8759045312494
		j endif_8759045312494
		
		else_8759045312494:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_9 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 180($sp) # internal_10 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_11 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_13 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 168($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 164($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_10
		lw $t0, 196($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 192($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function internal_14
		lw $t0, 180($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 188($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_15[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 160($sp) # internal_15 = "-"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 184($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_15
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 168($sp) # internal_16 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_9 = internal_16
		lw $t0, 156($sp)
		sw $t0, 184($sp)
		
		# If internal_9 then goto then_8759045313181
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313181
		
		# Jumping to else_8759045313181
		j else_8759045313181
		
		then_8759045313181:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_17 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_19 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_20
		lw $t0, 148($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 156($sp) # internal_18 = result of internal_20
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_21 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument internal_21
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_22 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_24 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 124($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 120($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_17
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing internal_17
		
		# Argument internal_22
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function internal_25
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 144($sp) # internal_23 = result of internal_25
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_27 = address of allocated object Int
		
		# Get method a2i_aux of A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_23
		lw $t0, 140($sp)
		sw $t0, 0($sp) # Storing internal_23
		
		# Calling function internal_28
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_26 = result of internal_28
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_31 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_26
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing internal_26
		
		# Argument internal_30
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing internal_30
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 108($sp) # internal_31 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 108($sp) # internal_31 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_8 = internal_31
		lw $t0, 96($sp)
		sw $t0, 188($sp)
		
		# Jumping to endif_8759045313181
		j endif_8759045313181
		
		else_8759045313181:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_33 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_34 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_35 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_37 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_34
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing internal_34
		
		# Argument internal_35
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_35
		
		# Calling function internal_38
		lw $t0, 84($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 92($sp) # internal_36 = result of internal_38
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 43
		sb $t0, 8($v0) # internal_39[0] = '+'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_39 = "+"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_36
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing internal_36
		
		# Argument internal_39
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_39
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_40 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_33 = internal_40
		lw $t0, 60($sp)
		sw $t0, 88($sp)
		
		# If internal_33 then goto then_8759045313446
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045313446
		
		# Jumping to else_8759045313446
		j else_8759045313446
		
		then_8759045313446:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_41 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_43 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_44
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_42 = result of internal_44
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_45 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_42
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing internal_42
		
		# Argument internal_45
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_45
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_46 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_48 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_41
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing internal_41
		
		# Argument internal_46
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_46
		
		# Calling function internal_49
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 48($sp) # internal_47 = result of internal_49
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_51 = address of allocated object Int
		
		# Get method a2i_aux of A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_47
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function internal_52
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_50 = result of internal_52
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_32 = internal_50
		lw $t0, 20($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045313446
		j endif_8759045313446
		
		else_8759045313446:
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_54 = address of allocated object Int
		
		# Get method a2i_aux of A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument s
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_55
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_32 = internal_53
		lw $t0, 8($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045313446
		j endif_8759045313446
		
		endif_8759045313446:
		
		# internal_8 = internal_32
		lw $t0, 92($sp)
		sw $t0, 188($sp)
		
		# Jumping to endif_8759045313181
		j endif_8759045313181
		
		endif_8759045313181:
		
		# internal_0 = internal_8
		lw $t0, 188($sp)
		sw $t0, 220($sp)
		
		# Jumping to endif_8759045312494
		j endif_8759045312494
		
		endif_8759045312494:
		
		# Loading return value in $v1
		lw $v1, 220($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 224
		
		jr $ra
		
	function_a2i_aux_at_A2I:
		# Function parameters
		#   $ra = 96($sp)
		#   self = 92($sp)
		#   s = 88($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -88
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument int
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing int
		
		# Argument internal_1
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp) # int = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_4 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 68($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 64($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_5
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 80($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument j
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing j
		
		# Argument internal_3
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 88($sp) # j = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_7
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating NUll to internal_8
		sw $zero, 52($sp) # internal_8 = 0
		
		while_start_8759045314091:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument j
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing j
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_9 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_9 then goto while_body_8759045314091
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8759045314091
		
		# Jumping to while_end_8759045314091
		j while_end_8759045314091
		
		while_body_8759045314091:
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_10 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument int
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing int
		
		# Argument internal_10
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_11 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_12 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_14 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 104($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument i
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_12
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function internal_15
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 48($sp) # internal_13 = result of internal_15
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_17 = address of allocated object Int
		
		# Get method c2i of A2I
		lw $t0, 92($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function internal_18
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_16 = result of internal_18
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_11
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_11
		
		# Argument internal_16
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_19 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument int
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing int
		
		# Argument internal_19
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp) # int = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_20 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_20
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_21 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_21
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to while_start_8759045314091
		j while_start_8759045314091
		
		while_end_8759045314091:
		
		# Loading return value in $v1
		lw $v1, 84($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 88
		
		jr $ra
		
	function_i2a_at_A2I:
		# Function parameters
		#   $ra = 104($sp)
		#   self = 100($sp)
		#   i = 96($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -96
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_2
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# If internal_1 then goto then_8759045314193
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045314193
		
		# Jumping to else_8759045314193
		j else_8759045314193
		
		then_8759045314193:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 48
		sb $t0, 8($v0) # internal_4[0] = '0'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 76($sp) # internal_4 = "0"
		
		# internal_0 = internal_4
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045314193
		j endif_8759045314193
		
		else_8759045314193:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing i
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_8 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_6 = internal_8
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# If internal_6 then goto then_8759045314286
		lw $t0, 68($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045314286
		
		# Jumping to else_8759045314286
		j else_8759045314286
		
		then_8759045314286:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_10 = address of allocated object Int
		
		# Get method i2a_aux of A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing i
		
		# Calling function internal_11
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_5 = internal_9
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8759045314286
		j endif_8759045314286
		
		else_8759045314286:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_12[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_12 = "-"
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_13 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_14 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_15 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_16 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_13
		
		# Argument internal_15
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_16 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_16
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_16
		
		# Argument internal_14
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_16 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_16
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_17 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_19 = address of allocated object Int
		
		# Get method i2a_aux of A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_17
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function internal_20
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_18 = result of internal_20
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_22 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_18
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_21 = result of internal_23
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_5 = internal_21
		lw $t0, 8($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8759045314286
		j endif_8759045314286
		
		endif_8759045314286:
		
		# internal_0 = internal_5
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8759045314193
		j endif_8759045314193
		
		endif_8759045314193:
		
		# Loading return value in $v1
		lw $v1, 92($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 96
		
		jr $ra
		
	function_i2a_aux_at_A2I:
		# Function parameters
		#   $ra = 88($sp)
		#   self = 84($sp)
		#   i = 80($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -80
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_2
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# If internal_1 then goto then_8759045314277
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045314277
		
		# Jumping to else_8759045314277
		j else_8759045314277
		
		then_8759045314277:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 60($sp) # internal_4 = ""
		
		# internal_0 = internal_4
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8759045314277
		j endif_8759045314277
		
		else_8759045314277:
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_6 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_6
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_7 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument next
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing next
		
		# Argument internal_7
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # next = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_9 = address of allocated object Int
		
		# Get method i2a_aux of A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument next
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing next
		
		# Calling function internal_10
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_11 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument next
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing next
		
		# Argument internal_11
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_12 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_12
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_13 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_15 = address of allocated object Int
		
		# Get method i2c of A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function internal_16
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_14 = result of internal_16
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_18 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_8
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_8
		
		# Argument internal_14
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function internal_19
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_17 = result of internal_19
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_17
		lw $t0, 8($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8759045314277
		j endif_8759045314277
		
		endif_8759045314277:
		
		# Loading return value in $v1
		lw $v1, 76($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 80
		
		jr $ra
		
	function___init___at_Main:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_0 = ""
		
		# Set attribute char of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8759045207640
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045207640
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045207640
		j object_set_attribute_8759045207640
		int_set_attribute_8759045207640:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.char = internal_0
		j end_set_attribute_8759045207640
		bool_set_attribute_8759045207640:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.char = internal_0
		j end_set_attribute_8759045207640
		object_set_attribute_8759045207640:
		sw $t1, 8($t0) # self.char = internal_0
		end_set_attribute_8759045207640:
		
		# Allocating NUll to internal_1
		sw $zero, 8($sp) # internal_1 = 0
		
		# Set attribute avar of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_1
		beq $t1, $zero, object_set_attribute_8759045207664
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045207664
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045207664
		j object_set_attribute_8759045207664
		int_set_attribute_8759045207664:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_1
		j end_set_attribute_8759045207664
		bool_set_attribute_8759045207664:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_1
		j end_set_attribute_8759045207664
		object_set_attribute_8759045207664:
		sw $t1, 12($t0) # self.avar = internal_1
		end_set_attribute_8759045207664:
		
		# Allocating NUll to internal_2
		sw $zero, 4($sp) # internal_2 = 0
		
		# Set attribute a_var of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_2
		beq $t1, $zero, object_set_attribute_8759045207688
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045207688
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045207688
		j object_set_attribute_8759045207688
		int_set_attribute_8759045207688:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.a_var = internal_2
		j end_set_attribute_8759045207688
		bool_set_attribute_8759045207688:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.a_var = internal_2
		j end_set_attribute_8759045207688
		object_set_attribute_8759045207688:
		sw $t1, 16($t0) # self.a_var = internal_2
		end_set_attribute_8759045207688:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_3 = address of allocated object Int
		
		# Set attribute flag of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_3
		beq $t1, $zero, object_set_attribute_8759045207712
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045207712
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045207712
		j object_set_attribute_8759045207712
		int_set_attribute_8759045207712:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.flag = internal_3
		j end_set_attribute_8759045207712
		bool_set_attribute_8759045207712:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.flag = internal_3
		j end_set_attribute_8759045207712
		object_set_attribute_8759045207712:
		sw $t1, 20($t0) # self.flag = internal_3
		end_set_attribute_8759045207712:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_menu_at_Main:
		# Function parameters
		#   $ra = 432($sp)
		#   self = 428($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -428
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 30
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_0[0] = '\n'
		
		addi $t0, $zero, 9
		sb $t0, 9($v0) # internal_0[1] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 10($v0) # internal_0[2] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_0[3] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_0[4] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 13($v0) # internal_0[5] = 'a'
		
		addi $t0, $zero, 100
		sb $t0, 14($v0) # internal_0[6] = 'd'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_0[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_0[8] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 17($v0) # internal_0[9] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_0[10] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 19($v0) # internal_0[11] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 20($v0) # internal_0[12] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 21($v0) # internal_0[13] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 22($v0) # internal_0[14] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 23($v0) # internal_0[15] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 24($v0) # internal_0[16] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_0[17] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 26($v0) # internal_0[18] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 27($v0) # internal_0[19] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_0[20] = ' '
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 424($sp) # internal_0 = "\n\tTo add a number to "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 416($sp) # internal_2 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 416($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 412($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_0
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 424($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 432($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045208348
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045208348
		j object_get_attribute_8759045208348
		int_get_attribute_8759045208348:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 408($sp) # internal_4 = self.avar
		j end_get_attribute_8759045208348
		bool_get_attribute_8759045208348:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 408($sp) # internal_4 = self.avar
		j end_get_attribute_8759045208348
		object_get_attribute_8759045208348:
		sw $t1, 408($sp) # internal_4 = self.avar
		end_get_attribute_8759045208348:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 400($sp) # internal_6 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 400($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 396($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_4
		lw $t0, 420($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function internal_7
		lw $t0, 408($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 416($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_8[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_8[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_8[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_8[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_8[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_8[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_8[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_8[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_8[8] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 17($v0) # internal_8[9] = 'a'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_8[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_8[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 392($sp) # internal_8 = "...enter a:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 384($sp) # internal_10 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 384($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 380($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_8
		lw $t0, 404($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function internal_11
		lw $t0, 392($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 400($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_12[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_12[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_12[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_12[3] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_12[4] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_12[5] = 'e'
		
		addi $t0, $zero, 103
		sb $t0, 14($v0) # internal_12[6] = 'g'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_12[7] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 16($v0) # internal_12[8] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_12[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_12[10] = ' '
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 376($sp) # internal_12 = "\tTo negate "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 368($sp) # internal_14 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 368($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 364($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_12
		lw $t0, 388($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function internal_15
		lw $t0, 376($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 384($sp) # internal_13 = result of internal_15
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045208528
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045208528
		j object_get_attribute_8759045208528
		int_get_attribute_8759045208528:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 360($sp) # internal_16 = self.avar
		j end_get_attribute_8759045208528
		bool_get_attribute_8759045208528:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 360($sp) # internal_16 = self.avar
		j end_get_attribute_8759045208528
		object_get_attribute_8759045208528:
		sw $t1, 360($sp) # internal_16 = self.avar
		end_get_attribute_8759045208528:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 352($sp) # internal_18 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 352($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 348($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_16
		lw $t0, 372($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function internal_19
		lw $t0, 360($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 368($sp) # internal_17 = result of internal_19
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_20[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_20[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_20[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_20[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_20[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_20[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_20[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_20[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_20[8] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 17($v0) # internal_20[9] = 'b'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_20[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_20[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 344($sp) # internal_20 = "...enter b:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 336($sp) # internal_22 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 336($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 332($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_20
		lw $t0, 356($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function internal_23
		lw $t0, 344($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 352($sp) # internal_21 = result of internal_23
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 41 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 41
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_24[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_24[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_24[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_24[3] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 12($v0) # internal_24[4] = 'f'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_24[5] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_24[6] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_24[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_24[8] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_24[9] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_24[10] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_24[11] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_24[12] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 21($v0) # internal_24[13] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 22($v0) # internal_24[14] = 'i'
		
		addi $t0, $zero, 102
		sb $t0, 23($v0) # internal_24[15] = 'f'
		
		addi $t0, $zero, 102
		sb $t0, 24($v0) # internal_24[16] = 'f'
		
		addi $t0, $zero, 101
		sb $t0, 25($v0) # internal_24[17] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 26($v0) # internal_24[18] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_24[19] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 28($v0) # internal_24[20] = 'n'
		
		addi $t0, $zero, 99
		sb $t0, 29($v0) # internal_24[21] = 'c'
		
		addi $t0, $zero, 101
		sb $t0, 30($v0) # internal_24[22] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_24[23] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 32($v0) # internal_24[24] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 33($v0) # internal_24[25] = 'e'
		
		addi $t0, $zero, 116
		sb $t0, 34($v0) # internal_24[26] = 't'
		
		addi $t0, $zero, 119
		sb $t0, 35($v0) # internal_24[27] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 36($v0) # internal_24[28] = 'e'
		
		addi $t0, $zero, 101
		sb $t0, 37($v0) # internal_24[29] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 38($v0) # internal_24[30] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_24[31] = ' '
		
		sb $zero, 40($v0) # Null-terminator at the end of the string
		
		sw $v0, 328($sp) # internal_24 = "\tTo find the difference between "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 320($sp) # internal_26 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 320($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 316($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_24
		lw $t0, 340($sp)
		sw $t0, 0($sp) # Storing internal_24
		
		# Calling function internal_27
		lw $t0, 328($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 336($sp) # internal_25 = result of internal_27
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045208968
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045208968
		j object_get_attribute_8759045208968
		int_get_attribute_8759045208968:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp) # internal_28 = self.avar
		j end_get_attribute_8759045208968
		bool_get_attribute_8759045208968:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp) # internal_28 = self.avar
		j end_get_attribute_8759045208968
		object_get_attribute_8759045208968:
		sw $t1, 312($sp) # internal_28 = self.avar
		end_get_attribute_8759045208968:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 304($sp) # internal_30 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 304($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 300($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_28
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_28
		
		# Calling function internal_31
		lw $t0, 312($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 320($sp) # internal_29 = result of internal_31
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 39 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 39
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 97
		sb $t0, 8($v0) # internal_32[0] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 9($v0) # internal_32[1] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 10($v0) # internal_32[2] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_32[3] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 12($v0) # internal_32[4] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 13($v0) # internal_32[5] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 14($v0) # internal_32[6] = 'o'
		
		addi $t0, $zero, 116
		sb $t0, 15($v0) # internal_32[7] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 16($v0) # internal_32[8] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_32[9] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 18($v0) # internal_32[10] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_32[11] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 20($v0) # internal_32[12] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 21($v0) # internal_32[13] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 22($v0) # internal_32[14] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 23($v0) # internal_32[15] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 24($v0) # internal_32[16] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 25($v0) # internal_32[17] = 'r'
		
		addi $t0, $zero, 46
		sb $t0, 26($v0) # internal_32[18] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 27($v0) # internal_32[19] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 28($v0) # internal_32[20] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 29($v0) # internal_32[21] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 30($v0) # internal_32[22] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 31($v0) # internal_32[23] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_32[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_32[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_32[26] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 35($v0) # internal_32[27] = 'c'
		
		addi $t0, $zero, 58
		sb $t0, 36($v0) # internal_32[28] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 37($v0) # internal_32[29] = '\n'
		
		sb $zero, 38($v0) # Null-terminator at the end of the string
		
		sw $v0, 296($sp) # internal_32 = "and another number...enter c:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 288($sp) # internal_34 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 288($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 284($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_32
		lw $t0, 308($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function internal_35
		lw $t0, 296($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_33 = result of internal_35
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 35 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 35
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_36[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_36[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_36[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_36[3] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 12($v0) # internal_36[4] = 'f'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_36[5] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_36[6] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_36[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_36[8] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_36[9] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_36[10] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_36[11] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_36[12] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 21($v0) # internal_36[13] = 'f'
		
		addi $t0, $zero, 97
		sb $t0, 22($v0) # internal_36[14] = 'a'
		
		addi $t0, $zero, 99
		sb $t0, 23($v0) # internal_36[15] = 'c'
		
		addi $t0, $zero, 116
		sb $t0, 24($v0) # internal_36[16] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 25($v0) # internal_36[17] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 26($v0) # internal_36[18] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_36[19] = 'i'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_36[20] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 29($v0) # internal_36[21] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_36[22] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_36[23] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 32($v0) # internal_36[24] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_36[25] = ' '
		
		sb $zero, 34($v0) # Null-terminator at the end of the string
		
		sw $v0, 280($sp) # internal_36 = "\tTo find the factorial of "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_38 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 272($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 268($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_36
		lw $t0, 292($sp)
		sw $t0, 0($sp) # Storing internal_36
		
		# Calling function internal_39
		lw $t0, 280($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 288($sp) # internal_37 = result of internal_39
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045209408
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045209408
		j object_get_attribute_8759045209408
		int_get_attribute_8759045209408:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 264($sp) # internal_40 = self.avar
		j end_get_attribute_8759045209408
		bool_get_attribute_8759045209408:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 264($sp) # internal_40 = self.avar
		j end_get_attribute_8759045209408
		object_get_attribute_8759045209408:
		sw $t1, 264($sp) # internal_40 = self.avar
		end_get_attribute_8759045209408:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 256($sp) # internal_42 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 256($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 252($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_40
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_40
		
		# Calling function internal_43
		lw $t0, 264($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 272($sp) # internal_41 = result of internal_43
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_44[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_44[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_44[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_44[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_44[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_44[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_44[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_44[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_44[8] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 17($v0) # internal_44[9] = 'd'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_44[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_44[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 248($sp) # internal_44 = "...enter d:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 240($sp) # internal_46 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 240($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 236($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_44
		lw $t0, 260($sp)
		sw $t0, 0($sp) # Storing internal_44
		
		# Calling function internal_47
		lw $t0, 248($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 256($sp) # internal_45 = result of internal_47
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_48[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_48[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_48[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_48[3] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_48[4] = 's'
		
		addi $t0, $zero, 113
		sb $t0, 13($v0) # internal_48[5] = 'q'
		
		addi $t0, $zero, 117
		sb $t0, 14($v0) # internal_48[6] = 'u'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_48[7] = 'a'
		
		addi $t0, $zero, 114
		sb $t0, 16($v0) # internal_48[8] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_48[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_48[10] = ' '
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 232($sp) # internal_48 = "\tTo square "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 224($sp) # internal_50 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 224($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 220($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_48
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_48
		
		# Calling function internal_51
		lw $t0, 232($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_49 = result of internal_51
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045209588
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045209588
		j object_get_attribute_8759045209588
		int_get_attribute_8759045209588:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 216($sp) # internal_52 = self.avar
		j end_get_attribute_8759045209588
		bool_get_attribute_8759045209588:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 216($sp) # internal_52 = self.avar
		j end_get_attribute_8759045209588
		object_get_attribute_8759045209588:
		sw $t1, 216($sp) # internal_52 = self.avar
		end_get_attribute_8759045209588:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_54 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_52
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_52
		
		# Calling function internal_55
		lw $t0, 216($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 224($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_56[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_56[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_56[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_56[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_56[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_56[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_56[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_56[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_56[8] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_56[9] = 'e'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_56[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_56[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 200($sp) # internal_56 = "...enter e:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_58 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 192($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 188($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_56
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function internal_59
		lw $t0, 200($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_57 = result of internal_59
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 18 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 18
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_60[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_60[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_60[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_60[3] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 12($v0) # internal_60[4] = 'c'
		
		addi $t0, $zero, 117
		sb $t0, 13($v0) # internal_60[5] = 'u'
		
		addi $t0, $zero, 98
		sb $t0, 14($v0) # internal_60[6] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_60[7] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_60[8] = ' '
		
		sb $zero, 17($v0) # Null-terminator at the end of the string
		
		sw $v0, 184($sp) # internal_60 = "\tTo cube "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_62 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 176($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 172($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_60
		lw $t0, 196($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function internal_63
		lw $t0, 184($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_61 = result of internal_63
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045210284
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045210284
		j object_get_attribute_8759045210284
		int_get_attribute_8759045210284:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 168($sp) # internal_64 = self.avar
		j end_get_attribute_8759045210284
		bool_get_attribute_8759045210284:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 168($sp) # internal_64 = self.avar
		j end_get_attribute_8759045210284
		object_get_attribute_8759045210284:
		sw $t1, 168($sp) # internal_64 = self.avar
		end_get_attribute_8759045210284:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_66 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 160($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 156($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_64
		lw $t0, 180($sp)
		sw $t0, 0($sp) # Storing internal_64
		
		# Calling function internal_67
		lw $t0, 168($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 176($sp) # internal_65 = result of internal_67
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_68[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_68[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_68[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_68[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_68[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_68[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_68[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_68[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_68[8] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 17($v0) # internal_68[9] = 'f'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_68[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_68[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 152($sp) # internal_68 = "...enter f:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_70 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_68
		lw $t0, 164($sp)
		sw $t0, 0($sp) # Storing internal_68
		
		# Calling function internal_71
		lw $t0, 152($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_69 = result of internal_71
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_72[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_72[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_72[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_72[3] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 12($v0) # internal_72[4] = 'f'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_72[5] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_72[6] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_72[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_72[8] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 17($v0) # internal_72[9] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 18($v0) # internal_72[10] = 'u'
		
		addi $t0, $zero, 116
		sb $t0, 19($v0) # internal_72[11] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_72[12] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 21($v0) # internal_72[13] = 'i'
		
		addi $t0, $zero, 102
		sb $t0, 22($v0) # internal_72[14] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_72[15] = ' '
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 136($sp) # internal_72 = "\tTo find out if "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_74 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 128($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 124($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_72
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_72
		
		# Calling function internal_75
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_73 = result of internal_75
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045210724
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045210724
		j object_get_attribute_8759045210724
		int_get_attribute_8759045210724:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 120($sp) # internal_76 = self.avar
		j end_get_attribute_8759045210724
		bool_get_attribute_8759045210724:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 120($sp) # internal_76 = self.avar
		j end_get_attribute_8759045210724
		object_get_attribute_8759045210724:
		sw $t1, 120($sp) # internal_76 = self.avar
		end_get_attribute_8759045210724:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_78 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_76
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing internal_76
		
		# Calling function internal_79
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_77 = result of internal_79
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 39 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 39
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_80[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_80[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_80[2] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_80[3] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_80[4] = ' '
		
		addi $t0, $zero, 109
		sb $t0, 13($v0) # internal_80[5] = 'm'
		
		addi $t0, $zero, 117
		sb $t0, 14($v0) # internal_80[6] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_80[7] = 'l'
		
		addi $t0, $zero, 116
		sb $t0, 16($v0) # internal_80[8] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 17($v0) # internal_80[9] = 'i'
		
		addi $t0, $zero, 112
		sb $t0, 18($v0) # internal_80[10] = 'p'
		
		addi $t0, $zero, 108
		sb $t0, 19($v0) # internal_80[11] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 20($v0) # internal_80[12] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_80[13] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 22($v0) # internal_80[14] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 23($v0) # internal_80[15] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_80[16] = ' '
		
		addi $t0, $zero, 51
		sb $t0, 25($v0) # internal_80[17] = '3'
		
		addi $t0, $zero, 46
		sb $t0, 26($v0) # internal_80[18] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 27($v0) # internal_80[19] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 28($v0) # internal_80[20] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 29($v0) # internal_80[21] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 30($v0) # internal_80[22] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 31($v0) # internal_80[23] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_80[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_80[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_80[26] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 35($v0) # internal_80[27] = 'g'
		
		addi $t0, $zero, 58
		sb $t0, 36($v0) # internal_80[28] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 37($v0) # internal_80[29] = '\n'
		
		sb $zero, 38($v0) # Null-terminator at the end of the string
		
		sw $v0, 104($sp) # internal_80 = "is a multiple of 3...enter g:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_82 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 96($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 92($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_80
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_80
		
		# Calling function internal_83
		lw $t0, 104($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_81 = result of internal_83
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_84[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_84[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_84[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_84[3] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_84[4] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_84[5] = 'i'
		
		addi $t0, $zero, 118
		sb $t0, 14($v0) # internal_84[6] = 'v'
		
		addi $t0, $zero, 105
		sb $t0, 15($v0) # internal_84[7] = 'i'
		
		addi $t0, $zero, 100
		sb $t0, 16($v0) # internal_84[8] = 'd'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_84[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_84[10] = ' '
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 88($sp) # internal_84 = "\tTo divide "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_86 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 80($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 76($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_84
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function internal_87
		lw $t0, 88($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 96($sp) # internal_85 = result of internal_87
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 428($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045211164
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045211164
		j object_get_attribute_8759045211164
		int_get_attribute_8759045211164:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp) # internal_88 = self.avar
		j end_get_attribute_8759045211164
		bool_get_attribute_8759045211164:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp) # internal_88 = self.avar
		j end_get_attribute_8759045211164
		object_get_attribute_8759045211164:
		sw $t1, 72($sp) # internal_88 = self.avar
		end_get_attribute_8759045211164:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_90 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_88
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_88
		
		# Calling function internal_91
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_89 = result of internal_91
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 98
		sb $t0, 8($v0) # internal_92[0] = 'b'
		
		addi $t0, $zero, 121
		sb $t0, 9($v0) # internal_92[1] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_92[2] = ' '
		
		addi $t0, $zero, 56
		sb $t0, 11($v0) # internal_92[3] = '8'
		
		addi $t0, $zero, 46
		sb $t0, 12($v0) # internal_92[4] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 13($v0) # internal_92[5] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 14($v0) # internal_92[6] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_92[7] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 16($v0) # internal_92[8] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_92[9] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_92[10] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 19($v0) # internal_92[11] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_92[12] = ' '
		
		addi $t0, $zero, 104
		sb $t0, 21($v0) # internal_92[13] = 'h'
		
		addi $t0, $zero, 58
		sb $t0, 22($v0) # internal_92[14] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 23($v0) # internal_92[15] = '\n'
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 56($sp) # internal_92 = "by 8...enter h:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_94 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_92
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_92
		
		# Calling function internal_95
		lw $t0, 56($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_93 = result of internal_95
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 41 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 41
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_96[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_96[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_96[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_96[3] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 12($v0) # internal_96[4] = 'g'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_96[5] = 'e'
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_96[6] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_96[7] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 16($v0) # internal_96[8] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_96[9] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 18($v0) # internal_96[10] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_96[11] = 'e'
		
		addi $t0, $zero, 119
		sb $t0, 20($v0) # internal_96[12] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_96[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_96[14] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 23($v0) # internal_96[15] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 24($v0) # internal_96[16] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 25($v0) # internal_96[17] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 26($v0) # internal_96[18] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 27($v0) # internal_96[19] = 'r'
		
		addi $t0, $zero, 46
		sb $t0, 28($v0) # internal_96[20] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 29($v0) # internal_96[21] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 30($v0) # internal_96[22] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 31($v0) # internal_96[23] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 32($v0) # internal_96[24] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 33($v0) # internal_96[25] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 34($v0) # internal_96[26] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 35($v0) # internal_96[27] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 36($v0) # internal_96[28] = ' '
		
		addi $t0, $zero, 106
		sb $t0, 37($v0) # internal_96[29] = 'j'
		
		addi $t0, $zero, 58
		sb $t0, 38($v0) # internal_96[30] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 39($v0) # internal_96[31] = '\n'
		
		sb $zero, 40($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # internal_96 = "\tTo get a new number...enter j:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_98 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_96
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_96
		
		# Calling function internal_99
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_97 = result of internal_99
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 30
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_100[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_100[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_100[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_100[3] = ' '
		
		addi $t0, $zero, 113
		sb $t0, 12($v0) # internal_100[4] = 'q'
		
		addi $t0, $zero, 117
		sb $t0, 13($v0) # internal_100[5] = 'u'
		
		addi $t0, $zero, 105
		sb $t0, 14($v0) # internal_100[6] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 15($v0) # internal_100[7] = 't'
		
		addi $t0, $zero, 46
		sb $t0, 16($v0) # internal_100[8] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 17($v0) # internal_100[9] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 18($v0) # internal_100[10] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_100[11] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 20($v0) # internal_100[12] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 21($v0) # internal_100[13] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_100[14] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_100[15] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_100[16] = ' '
		
		addi $t0, $zero, 113
		sb $t0, 25($v0) # internal_100[17] = 'q'
		
		addi $t0, $zero, 58
		sb $t0, 26($v0) # internal_100[18] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_100[19] = '\n'
		
		addi $t0, $zero, 10
		sb $t0, 28($v0) # internal_100[20] = '\n'
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_100 = "\tTo quit...enter q:\n\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_102 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_100
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_100
		
		# Calling function internal_103
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_101 = result of internal_103
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_105 = address of allocated object Int
		
		# Get method in_string of Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_106
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_104 = result of internal_106
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 428
		
		jr $ra
		
	function_prompt_at_Main:
		# Function parameters
		#   $ra = 48($sp)
		#   self = 44($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -44
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_0[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # internal_0 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_2 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_0
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 35 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 35
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 80
		sb $t0, 8($v0) # internal_4[0] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_4[1] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_4[2] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_4[3] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_4[4] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_4[5] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_4[6] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_4[7] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 16($v0) # internal_4[8] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_4[9] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_4[10] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 19($v0) # internal_4[11] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_4[12] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 21($v0) # internal_4[13] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_4[14] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 23($v0) # internal_4[15] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 24($v0) # internal_4[16] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 25($v0) # internal_4[17] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 26($v0) # internal_4[18] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_4[19] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 28($v0) # internal_4[20] = 'r'
		
		addi $t0, $zero, 46
		sb $t0, 29($v0) # internal_4[21] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 30($v0) # internal_4[22] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 31($v0) # internal_4[23] = '.'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_4[24] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_4[25] = ' '
		
		sb $zero, 34($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_4 = "Please enter a number...  "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_6 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_4
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function internal_7
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_9 = address of allocated object Int
		
		# Get method in_string of Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_10
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 44
		
		jr $ra
		
	function_get_int_at_Main:
		# Function parameters
		#   $ra = 40($sp)
		#   self = 36($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -36
		
		# Allocating A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 28($sp) # internal_1 = address of allocated object A2I
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_1 = result of function___init___at_A2I
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument internal_1
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 44($sp) # z = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_4 = address of allocated object Int
		
		# Get method prompt of Main
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_5
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument s
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing s
		
		# Argument internal_3
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp) # s = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_7 = address of allocated object Int
		
		# Get method a2i of A2I
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument s
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_8
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 36
		
		jr $ra
		
	function_is_even_at_Main:
		# Function parameters
		#   $ra = 112($sp)
		#   self = 108($sp)
		#   num = 104($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -104
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument num
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 96($sp) # internal_4 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_2 = internal_4
		lw $t0, 84($sp)
		sw $t0, 92($sp)
		
		# If internal_2 then goto then_8759045315578
		lw $t0, 92($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045315578
		
		# Jumping to else_8759045315578
		j else_8759045315578
		
		then_8759045315578:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_5 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_6
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_7 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument internal_5
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_7 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_9 = address of allocated object Int
		
		# Get method is_even of Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_7
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function internal_10
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_8
		lw $t0, 68($sp)
		sw $t0, 96($sp)
		
		# Jumping to endif_8759045315578
		j endif_8759045315578
		
		else_8759045315578:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_12 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_13 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing internal_13
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_14 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_12 = internal_14
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# If internal_12 then goto then_8759045283389
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045283389
		
		# Jumping to else_8759045283389
		j else_8759045283389
		
		then_8759045283389:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_15 = address of allocated object Int
		
		# internal_11 = internal_15
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8759045283389
		j endif_8759045283389
		
		else_8759045283389:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_17 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_18 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_17 = internal_19
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# If internal_17 then goto then_8759045283500
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045283500
		
		# Jumping to else_8759045283500
		j else_8759045283500
		
		then_8759045283500:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_20 = address of allocated object Int
		
		# internal_16 = internal_20
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8759045283500
		j endif_8759045283500
		
		else_8759045283500:
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_21 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_21
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_22 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_24 = address of allocated object Int
		
		# Get method is_even of Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_22
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function internal_25
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_23 = result of internal_25
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_16 = internal_23
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8759045283500
		j endif_8759045283500
		
		endif_8759045283500:
		
		# internal_11 = internal_16
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8759045283389
		j endif_8759045283389
		
		endif_8759045283389:
		
		# internal_1 = internal_11
		lw $t0, 56($sp)
		sw $t0, 96($sp)
		
		# Jumping to endif_8759045315578
		j endif_8759045315578
		
		endif_8759045315578:
		
		# Loading return value in $v1
		lw $v1, 96($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 104
		
		jr $ra
		
	function_class_type_at_Main:
		# Function parameters
		#   $ra = 340($sp)
		#   self = 336($sp)
		#   var = 332($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -332
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_0 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 324($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 320($sp) # internal_2 = address of allocated object Int
		
		# Allocating NUll to internal_3
		sw $zero, 316($sp) # internal_3 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_4 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 308($sp) # internal_5 = address of allocated object Int
		
		# internal_6 = typeof var that is the first word of the object
		lw $t0, 332($sp)
		lw $t0, 0($t0)
		sw $t0, 304($sp)
		
		# internal_7 = internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		while_start_8759045315335:
		
		# internal_5 = EqualAddress(internal_7, internal_3)
		lw $t0, 300($sp)
		lw $t1, 316($sp)
		seq $t2, $t0, $t1
		lw $t0, 308($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto while_end_8759045315335
		lw $t0, 308($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8759045315335
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 324($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		# Jumping to while_start_8759045315335
		j while_start_8759045315335
		
		while_end_8759045315335:
		
		# internal_7 = internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		# initialize Array [internal_4]
		lw $t0, 312($sp) # $t0 = internal_4
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 296($sp) # internal_8 = new Array[internal_4]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 292($sp) # internal_9 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 288($sp) # internal_10 = address of allocated object Int
		
		foreach_start_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_9
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 300($sp) # internal_10 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_10 then goto foreach_body_8759045315335
		lw $t0, 288($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8759045315335
		
		# Jumping to foreach_end_8759045315335
		j foreach_end_8759045315335
		
		foreach_body_8759045315335:
		
		# array internal_8[4 * internal_9] = internal_7
		lw $t0, 292($sp) # $t0 = internal_9
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 296($sp) # $t1 = internal_8
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 300($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_9
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_9 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8759045315335
		j foreach_start_8759045315335
		
		foreach_end_8759045315335:
		
		# initialize Array [internal_2]
		lw $t0, 320($sp) # $t0 = internal_2
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 284($sp) # internal_11 = new Array[internal_2]
		
		# initialize Array [internal_2]
		lw $t0, 320($sp) # $t0 = internal_2
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 280($sp) # internal_12 = new Array[internal_2]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_14 = address of allocated object Int
		
		# internal_13 = direction of A
		la $t0, type_A
		sw $t0, 276($sp)
		
		# array internal_11[4 * internal_14] = internal_13
		lw $t0, 272($sp) # $t0 = internal_14
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 276($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_14] = internal_4
		lw $t0, 272($sp) # $t0 = internal_14
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 264($sp) # internal_16 = address of allocated object Int
		
		# internal_15 = direction of B
		la $t0, type_B
		sw $t0, 268($sp)
		
		# array internal_11[4 * internal_16] = internal_15
		lw $t0, 264($sp) # $t0 = internal_16
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 268($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_16] = internal_4
		lw $t0, 264($sp) # $t0 = internal_16
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 256($sp) # internal_18 = address of allocated object Int
		
		# internal_17 = direction of C
		la $t0, type_C
		sw $t0, 260($sp)
		
		# array internal_11[4 * internal_18] = internal_17
		lw $t0, 256($sp) # $t0 = internal_18
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 260($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_18] = internal_4
		lw $t0, 256($sp) # $t0 = internal_18
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 248($sp) # internal_20 = address of allocated object Int
		
		# internal_19 = direction of D
		la $t0, type_D
		sw $t0, 252($sp)
		
		# array internal_11[4 * internal_20] = internal_19
		lw $t0, 248($sp) # $t0 = internal_20
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 252($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_20] = internal_4
		lw $t0, 248($sp) # $t0 = internal_20
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 240($sp) # internal_22 = address of allocated object Int
		
		# internal_21 = direction of E
		la $t0, type_E
		sw $t0, 244($sp)
		
		# array internal_11[4 * internal_22] = internal_21
		lw $t0, 240($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 244($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_22] = internal_4
		lw $t0, 240($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_24 = address of allocated object Int
		
		# internal_23 = direction of Object
		la $t0, type_Object
		sw $t0, 236($sp)
		
		# array internal_11[4 * internal_24] = internal_23
		lw $t0, 232($sp) # $t0 = internal_24
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 236($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_24] = internal_4
		lw $t0, 232($sp) # $t0 = internal_24
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 228($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 224($sp) # internal_26 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_28 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_29 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_31 = address of allocated object Int
		
		foreach_type_start_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 332($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 236($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_type_body_8759045315335
		lw $t0, 224($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8759045315335
		
		# Jumping to foreach_type_end_8759045315335
		j foreach_type_end_8759045315335
		
		foreach_type_body_8759045315335:
		
		# internal_27 = array internal_11[4 * internal_25]
		lw $t0, 228($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 220($sp) # internal_27 = array internal_11[4 * internal_25]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_28
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing internal_28
		
		# Argument internal_0
		lw $t0, 340($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 228($sp) # internal_28 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_28
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing internal_28
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 224($sp) # internal_29 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_29 then goto foreach_ancestor_body_8759045315335
		lw $t0, 212($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8759045315335
		
		# Jumping to foreach_ancestor_end_8759045315335
		j foreach_ancestor_end_8759045315335
		
		foreach_ancestor_body_8759045315335:
		
		# internal_30 = array internal_8[4 * internal_28]
		lw $t0, 216($sp) # $t0 = internal_28
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 296($sp) # $t1 = internal_8
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 208($sp) # internal_30 = array internal_8[4 * internal_28]
		
		# internal_31 = EqualAddress(internal_27, internal_30)
		lw $t0, 220($sp)
		lw $t1, 208($sp)
		seq $t2, $t0, $t1
		lw $t0, 204($sp)
		sw $t2, 8($t0)
		
		# If internal_31 then goto foreach_ancestor_end_8759045315335
		lw $t0, 204($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8759045315335
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_28
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing internal_28
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 228($sp) # internal_28 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8759045315335
		j foreach_ancestor_start_8759045315335
		
		foreach_ancestor_end_8759045315335:
		
		# array internal_12[4 * internal_25] = internal_28
		lw $t0, 228($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8759045315335
		j foreach_type_start_8759045315335
		
		foreach_type_end_8759045315335:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_32 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_33 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_34 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_35 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_36 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_35
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_35 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_2
		lw $t0, 332($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_36 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_36 then goto foreach_min_body_8759045315335
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8759045315335
		
		# Jumping to foreach_min_end_8759045315335
		j foreach_min_end_8759045315335
		
		foreach_min_body_8759045315335:
		
		# internal_34 = array internal_12[4 * internal_32]
		lw $t0, 200($sp) # $t0 = internal_32
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 192($sp) # internal_34 = array internal_12[4 * internal_32]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_34
		lw $t0, 204($sp)
		sw $t0, 4($sp) # Storing internal_34
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 0($sp) # Storing internal_35
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_36 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_36 then goto update_min_8759045315335
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8759045315335
		
		# Jumping to update_min_end_8759045315335
		j update_min_end_8759045315335
		
		update_min_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_35
		
		# Argument internal_34
		lw $t0, 204($sp)
		sw $t0, 0($sp) # Storing internal_34
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_35 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_33
		lw $t0, 208($sp)
		sw $t0, 4($sp) # Storing internal_33
		
		# Argument internal_32
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_33 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_32 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8759045315335
		j foreach_min_start_8759045315335
		
		foreach_min_end_8759045315335:
		
		# initialize Array [internal_2]
		lw $t0, 320($sp) # $t0 = internal_2
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 180($sp) # internal_37 = new Array[internal_2]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_38 = address of allocated object Int
		
		# array internal_37[4 * internal_38] = internal_0
		lw $t0, 176($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_39 = address of allocated object Int
		
		# array internal_37[4 * internal_39] = internal_0
		lw $t0, 172($sp) # $t0 = internal_39
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_40 = address of allocated object Int
		
		# array internal_37[4 * internal_40] = internal_0
		lw $t0, 168($sp) # $t0 = internal_40
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_41 = address of allocated object Int
		
		# array internal_37[4 * internal_41] = internal_0
		lw $t0, 164($sp) # $t0 = internal_41
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_42 = address of allocated object Int
		
		# array internal_37[4 * internal_42] = internal_0
		lw $t0, 160($sp) # $t0 = internal_42
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_43 = address of allocated object Int
		
		# array internal_37[4 * internal_43] = internal_0
		lw $t0, 156($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_44 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_35
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 164($sp) # internal_44 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_44 then goto error_branch_8759045315335
		lw $t0, 152($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8759045315335
		
		# array internal_37[4 * internal_33] = internal_1
		lw $t0, 196($sp) # $t0 = internal_33
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 324($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_45 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_46 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_46]
		lw $t0, 144($sp) # $t0 = internal_46
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_46]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_A_8759045315335
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_A_8759045315335
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_47 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_47]
		lw $t0, 140($sp) # $t0 = internal_47
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_47]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_B_8759045315335
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_B_8759045315335
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_48 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_48]
		lw $t0, 136($sp) # $t0 = internal_48
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_48]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_C_8759045315335
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_C_8759045315335
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_49 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_49]
		lw $t0, 132($sp) # $t0 = internal_49
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_49]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_D_8759045315335
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_D_8759045315335
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_50 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_50]
		lw $t0, 128($sp) # $t0 = internal_50
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_50]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_E_8759045315335
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_E_8759045315335
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_51 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_51]
		lw $t0, 124($sp) # $t0 = internal_51
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_51]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_Object_8759045315335
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Object_8759045315335
		
		branch_A_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 128($sp) # a = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_54[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_54[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_54[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_54[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_54[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_54[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_54[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_54[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_54[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_54[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_54[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_54[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_54[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_54[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_54[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_54[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_54[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_54[17] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 26($v0) # internal_54[18] = 'A'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_54[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 112($sp) # internal_54 = "Class type is now A\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_56 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 100($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_54
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_54
		
		# Calling function internal_57
		lw $t0, 112($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_55 = result of internal_57
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_55
		lw $t0, 120($sp)
		sw $t0, 0($sp) # Storing internal_55
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_55
		lw $t0, 108($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8759045315335
		j branch_end_8759045315335
		
		branch_B_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument b
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing b
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 108($sp) # b = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_59[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_59[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_59[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_59[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_59[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_59[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_59[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_59[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_59[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_59[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_59[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_59[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_59[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_59[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_59[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_59[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_59[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_59[17] = ' '
		
		addi $t0, $zero, 66
		sb $t0, 26($v0) # internal_59[18] = 'B'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_59[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 92($sp) # internal_59 = "Class type is now B\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_61 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_59
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_59
		
		# Calling function internal_62
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_60 = result of internal_62
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_60
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_60
		lw $t0, 88($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8759045315335
		j branch_end_8759045315335
		
		branch_C_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument c
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing c
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 88($sp) # c = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_64[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_64[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_64[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_64[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_64[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_64[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_64[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_64[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_64[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_64[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_64[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_64[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_64[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_64[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_64[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_64[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_64[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_64[17] = ' '
		
		addi $t0, $zero, 67
		sb $t0, 26($v0) # internal_64[18] = 'C'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_64[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 72($sp) # internal_64 = "Class type is now C\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_66 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_64
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_64
		
		# Calling function internal_67
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_65 = result of internal_67
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_65
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_65
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_65
		lw $t0, 68($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8759045315335
		j branch_end_8759045315335
		
		branch_D_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument d
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing d
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # d = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_69[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_69[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_69[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_69[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_69[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_69[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_69[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_69[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_69[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_69[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_69[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_69[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_69[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_69[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_69[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_69[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_69[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_69[17] = ' '
		
		addi $t0, $zero, 68
		sb $t0, 26($v0) # internal_69[18] = 'D'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_69[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # internal_69 = "Class type is now D\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_71 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_69
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function internal_72
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_70 = result of internal_72
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_70
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_70
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_70
		lw $t0, 48($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8759045315335
		j branch_end_8759045315335
		
		branch_E_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument e
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing e
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp) # e = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_74[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_74[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_74[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_74[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_74[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_74[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_74[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_74[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_74[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_74[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_74[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_74[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_74[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_74[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_74[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_74[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_74[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_74[17] = ' '
		
		addi $t0, $zero, 69
		sb $t0, 26($v0) # internal_74[18] = 'E'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_74[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 32($sp) # internal_74 = "Class type is now E\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_76 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_74
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_74
		
		# Calling function internal_77
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_75 = result of internal_77
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_75
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_75
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_75
		lw $t0, 28($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8759045315335
		j branch_end_8759045315335
		
		branch_Object_8759045315335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument o
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing o
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp) # o = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 79
		sb $t0, 8($v0) # internal_79[0] = 'O'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_79[1] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_79[2] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_79[3] = 'o'
		
		addi $t0, $zero, 112
		sb $t0, 12($v0) # internal_79[4] = 'p'
		
		addi $t0, $zero, 115
		sb $t0, 13($v0) # internal_79[5] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 14($v0) # internal_79[6] = '\n'
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_79 = "Oooops\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_81 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_79
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_79
		
		# Calling function internal_82
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_80 = result of internal_82
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_80
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_80
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_80
		lw $t0, 8($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8759045315335
		j branch_end_8759045315335
		
		error_branch_8759045315335:
		
		branch_end_8759045315335:
		
		# Loading return value in $v1
		lw $v1, 120($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 332
		
		jr $ra
		
	function_print_at_Main:
		# Function parameters
		#   $ra = 68($sp)
		#   self = 64($sp)
		#   var = 60($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -60
		
		# Allocating A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 52($sp) # internal_1 = address of allocated object A2I
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_1 = result of function___init___at_A2I
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument internal_1
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # z = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_3 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 60($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument var
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function internal_4
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 56($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_6 = address of allocated object Int
		
		# Get method i2a of A2I
		lw $t0, 56($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument internal_2
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function internal_7
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_9 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_5
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function internal_10
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_11[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_11 = " "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_13 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_11
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function internal_14
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 60
		
		jr $ra
		
	function_main_at_Main:
		# Function parameters
		#   $ra = 1232($sp)
		#   self = 1228($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -1228
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 1224($sp) # internal_0 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 1232($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 1232($sp) # internal_0 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 1224($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8759045187184
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045187184
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045187184
		j object_set_attribute_8759045187184
		int_set_attribute_8759045187184:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_0
		j end_set_attribute_8759045187184
		bool_set_attribute_8759045187184:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_0
		j end_set_attribute_8759045187184
		object_set_attribute_8759045187184:
		sw $t1, 12($t0) # self.avar = internal_0
		end_set_attribute_8759045187184:
		
		# Allocating NUll to internal_1
		sw $zero, 1220($sp) # internal_1 = 0
		
		while_start_8759045284425:
		
		# Get attribute flag of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'flag' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045187265
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045187265
		j object_get_attribute_8759045187265
		int_get_attribute_8759045187265:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1216($sp) # internal_2 = self.flag
		j end_get_attribute_8759045187265
		bool_get_attribute_8759045187265:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1216($sp) # internal_2 = self.flag
		j end_get_attribute_8759045187265
		object_get_attribute_8759045187265:
		sw $t1, 1216($sp) # internal_2 = self.flag
		end_get_attribute_8759045187265:
		
		# If internal_2 then goto while_body_8759045284425
		lw $t0, 1216($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8759045284425
		
		# Jumping to while_end_8759045284425
		j while_end_8759045284425
		
		while_body_8759045284425:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_3[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_3[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_3[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_3[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_3[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_3[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_3[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 1212($sp) # internal_3 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1204($sp) # internal_5 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1204($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1200($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_3
		lw $t0, 1224($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function internal_6
		lw $t0, 1212($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1220($sp) # internal_4 = result of internal_6
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045187657
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045187657
		j object_get_attribute_8759045187657
		int_get_attribute_8759045187657:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1196($sp) # internal_7 = self.avar
		j end_get_attribute_8759045187657
		bool_get_attribute_8759045187657:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1196($sp) # internal_7 = self.avar
		j end_get_attribute_8759045187657
		object_get_attribute_8759045187657:
		sw $t1, 1196($sp) # internal_7 = self.avar
		end_get_attribute_8759045187657:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1188($sp) # internal_9 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1188($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1184($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_7
		lw $t0, 1208($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function internal_10
		lw $t0, 1196($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1204($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1176($sp) # internal_12 = address of allocated object Int
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045187771
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045187771
		j object_get_attribute_8759045187771
		int_get_attribute_8759045187771:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1172($sp) # internal_13 = self.avar
		j end_get_attribute_8759045187771
		bool_get_attribute_8759045187771:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1172($sp) # internal_13 = self.avar
		j end_get_attribute_8759045187771
		object_get_attribute_8759045187771:
		sw $t1, 1172($sp) # internal_13 = self.avar
		end_get_attribute_8759045187771:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1164($sp) # internal_15 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 1172($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1164($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1160($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 1180($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function internal_16
		lw $t0, 1168($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1176($sp) # internal_14 = result of internal_16
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1152($sp) # internal_18 = address of allocated object Int
		
		# Get method is_even of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1152($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1148($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_14
		lw $t0, 1180($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function internal_19
		lw $t0, 1160($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1168($sp) # internal_17 = result of internal_19
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_12 = internal_17
		lw $t0, 1156($sp)
		sw $t0, 1176($sp)
		
		# If internal_12 then goto then_8759045284506
		lw $t0, 1176($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045284506
		
		# Jumping to else_8759045284506
		j else_8759045284506
		
		then_8759045284506:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 18 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 18
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_20[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_20[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_20[2] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_20[3] = 'e'
		
		addi $t0, $zero, 118
		sb $t0, 12($v0) # internal_20[4] = 'v'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_20[5] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_20[6] = 'n'
		
		addi $t0, $zero, 33
		sb $t0, 15($v0) # internal_20[7] = '!'
		
		addi $t0, $zero, 10
		sb $t0, 16($v0) # internal_20[8] = '\n'
		
		sb $zero, 17($v0) # Null-terminator at the end of the string
		
		sw $v0, 1144($sp) # internal_20 = "is even!\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1136($sp) # internal_22 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1136($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1132($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_20
		lw $t0, 1156($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function internal_23
		lw $t0, 1144($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1152($sp) # internal_21 = result of internal_23
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_11 = internal_21
		lw $t0, 1140($sp)
		sw $t0, 1180($sp)
		
		# Jumping to endif_8759045284506
		j endif_8759045284506
		
		else_8759045284506:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 17 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 17
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_24[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_24[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_24[2] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_24[3] = 'o'
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_24[4] = 'd'
		
		addi $t0, $zero, 100
		sb $t0, 13($v0) # internal_24[5] = 'd'
		
		addi $t0, $zero, 33
		sb $t0, 14($v0) # internal_24[6] = '!'
		
		addi $t0, $zero, 10
		sb $t0, 15($v0) # internal_24[7] = '\n'
		
		sb $zero, 16($v0) # Null-terminator at the end of the string
		
		sw $v0, 1128($sp) # internal_24 = "is odd!\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1120($sp) # internal_26 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1120($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1116($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_24
		lw $t0, 1140($sp)
		sw $t0, 0($sp) # Storing internal_24
		
		# Calling function internal_27
		lw $t0, 1128($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1136($sp) # internal_25 = result of internal_27
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_11 = internal_25
		lw $t0, 1124($sp)
		sw $t0, 1180($sp)
		
		# Jumping to endif_8759045284506
		j endif_8759045284506
		
		endif_8759045284506:
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045188301
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045188301
		j object_get_attribute_8759045188301
		int_get_attribute_8759045188301:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1112($sp) # internal_28 = self.avar
		j end_get_attribute_8759045188301
		bool_get_attribute_8759045188301:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1112($sp) # internal_28 = self.avar
		j end_get_attribute_8759045188301
		object_get_attribute_8759045188301:
		sw $t1, 1112($sp) # internal_28 = self.avar
		end_get_attribute_8759045188301:
		
		# Allocating Int 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 12
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1104($sp) # internal_30 = address of allocated object Int
		
		# Get method class_type of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1100($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_28
		lw $t0, 1124($sp)
		sw $t0, 0($sp) # Storing internal_28
		
		# Calling function internal_31
		lw $t0, 1112($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1120($sp) # internal_29 = result of internal_31
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1092($sp) # internal_33 = address of allocated object Int
		
		# Get method menu of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1092($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1088($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_34
		lw $t0, 1096($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1104($sp) # internal_32 = result of internal_34
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute char of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 1096($sp) # $t1 = internal_32
		beq $t1, $zero, object_set_attribute_8759045188343
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045188343
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045188343
		j object_set_attribute_8759045188343
		int_set_attribute_8759045188343:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.char = internal_32
		j end_set_attribute_8759045188343
		bool_set_attribute_8759045188343:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.char = internal_32
		j end_set_attribute_8759045188343
		object_set_attribute_8759045188343:
		sw $t1, 8($t0) # self.char = internal_32
		end_set_attribute_8759045188343:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1080($sp) # internal_36 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045188967
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045188967
		j object_get_attribute_8759045188967
		int_get_attribute_8759045188967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1076($sp) # internal_37 = self.char
		j end_get_attribute_8759045188967
		bool_get_attribute_8759045188967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1076($sp) # internal_37 = self.char
		j end_get_attribute_8759045188967
		object_get_attribute_8759045188967:
		sw $t1, 1076($sp) # internal_37 = self.char
		end_get_attribute_8759045188967:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 97
		sb $t0, 8($v0) # internal_38[0] = 'a'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 1072($sp) # internal_38 = "a"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_37
		lw $t0, 1088($sp)
		sw $t0, 4($sp) # Storing internal_37
		
		# Argument internal_38
		lw $t0, 1084($sp)
		sw $t0, 0($sp) # Storing internal_38
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 1080($sp) # internal_39 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_36 = internal_39
		lw $t0, 1068($sp)
		sw $t0, 1080($sp)
		
		# If internal_36 then goto then_8759045284602
		lw $t0, 1080($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045284602
		
		# Jumping to else_8759045284602
		j else_8759045284602
		
		then_8759045284602:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 1064($sp) # internal_40 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_40
		lw $t0, 1072($sp)
		sw $t0, 0($sp) # Storing internal_40
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 1072($sp) # internal_40 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1056($sp) # internal_42 = address of allocated object Int
		
		# Get method get_int of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1056($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1052($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_43
		lw $t0, 1060($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1068($sp) # internal_41 = result of internal_43
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1044($sp) # internal_45 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 1064($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1044($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1040($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_40
		lw $t0, 1076($sp)
		sw $t0, 4($sp) # Storing internal_40
		
		# Argument internal_41
		lw $t0, 1072($sp)
		sw $t0, 0($sp) # Storing internal_41
		
		# Calling function internal_46
		lw $t0, 1052($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1060($sp) # internal_44 = result of internal_46
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute a_var of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 1048($sp) # $t1 = internal_44
		beq $t1, $zero, object_set_attribute_8759045189054
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045189054
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045189054
		j object_set_attribute_8759045189054
		int_set_attribute_8759045189054:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.a_var = internal_44
		j end_set_attribute_8759045189054
		bool_set_attribute_8759045189054:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.a_var = internal_44
		j end_set_attribute_8759045189054
		object_set_attribute_8759045189054:
		sw $t1, 16($t0) # self.a_var = internal_44
		end_set_attribute_8759045189054:
		
		# Allocating B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 1036($sp) # internal_47 = address of allocated object B
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 1044($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function___init___at_B
		jal function___init___at_B
		lw $ra, 4($sp)
		sw $v1, 1044($sp) # internal_47 = result of function___init___at_B
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045189512
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045189512
		j object_get_attribute_8759045189512
		int_get_attribute_8759045189512:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1032($sp) # internal_48 = self.avar
		j end_get_attribute_8759045189512
		bool_get_attribute_8759045189512:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1032($sp) # internal_48 = self.avar
		j end_get_attribute_8759045189512
		object_get_attribute_8759045189512:
		sw $t1, 1032($sp) # internal_48 = self.avar
		end_get_attribute_8759045189512:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1024($sp) # internal_50 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 1032($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1024($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1020($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_48
		lw $t0, 1040($sp)
		sw $t0, 0($sp) # Storing internal_48
		
		# Calling function internal_51
		lw $t0, 1028($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1036($sp) # internal_49 = result of internal_51
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute a_var of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'a_var' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045189566
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045189566
		j object_get_attribute_8759045189566
		int_get_attribute_8759045189566:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1016($sp) # internal_52 = self.a_var
		j end_get_attribute_8759045189566
		bool_get_attribute_8759045189566:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1016($sp) # internal_52 = self.a_var
		j end_get_attribute_8759045189566
		object_get_attribute_8759045189566:
		sw $t1, 1016($sp) # internal_52 = self.a_var
		end_get_attribute_8759045189566:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1008($sp) # internal_54 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 1016($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1008($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1004($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 1024($sp)
		sw $t0, 0($sp) # Storing internal_52
		
		# Calling function internal_55
		lw $t0, 1012($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1020($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 996($sp) # internal_57 = address of allocated object Int
		
		# Get method method2 of B
		lw $t0, 1036($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 996($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 992($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_47
		lw $t0, 1052($sp)
		sw $t0, 8($sp) # Storing internal_47
		
		# Argument internal_49
		lw $t0, 1044($sp)
		sw $t0, 4($sp) # Storing internal_49
		
		# Argument internal_53
		lw $t0, 1028($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function internal_58
		lw $t0, 1008($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 1016($sp) # internal_56 = result of internal_58
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 1000($sp) # $t1 = internal_56
		beq $t1, $zero, object_set_attribute_8759045189440
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045189440
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045189440
		j object_set_attribute_8759045189440
		int_set_attribute_8759045189440:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_56
		j end_set_attribute_8759045189440
		bool_set_attribute_8759045189440:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_56
		j end_set_attribute_8759045189440
		object_set_attribute_8759045189440:
		sw $t1, 12($t0) # self.avar = internal_56
		end_set_attribute_8759045189440:
		
		# internal_35 = internal_56
		lw $t0, 1000($sp)
		sw $t0, 1084($sp)
		
		# Jumping to endif_8759045284602
		j endif_8759045284602
		
		else_8759045284602:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 984($sp) # internal_60 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045243185
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045243185
		j object_get_attribute_8759045243185
		int_get_attribute_8759045243185:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 980($sp) # internal_61 = self.char
		j end_get_attribute_8759045243185
		bool_get_attribute_8759045243185:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 980($sp) # internal_61 = self.char
		j end_get_attribute_8759045243185
		object_get_attribute_8759045243185:
		sw $t1, 980($sp) # internal_61 = self.char
		end_get_attribute_8759045243185:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 98
		sb $t0, 8($v0) # internal_62[0] = 'b'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 976($sp) # internal_62 = "b"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_61
		lw $t0, 992($sp)
		sw $t0, 4($sp) # Storing internal_61
		
		# Argument internal_62
		lw $t0, 988($sp)
		sw $t0, 0($sp) # Storing internal_62
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 984($sp) # internal_63 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_60 = internal_63
		lw $t0, 972($sp)
		sw $t0, 984($sp)
		
		# If internal_60 then goto then_8759045285684
		lw $t0, 984($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045285684
		
		# Jumping to else_8759045285684
		j else_8759045285684
		
		then_8759045285684:
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045241778
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045241778
		j object_get_attribute_8759045241778
		int_get_attribute_8759045241778:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 968($sp) # internal_64 = self.avar
		j end_get_attribute_8759045241778
		bool_get_attribute_8759045241778:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 968($sp) # internal_64 = self.avar
		j end_get_attribute_8759045241778
		object_get_attribute_8759045241778:
		sw $t1, 968($sp) # internal_64 = self.avar
		end_get_attribute_8759045241778:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 964($sp) # internal_65 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 960($sp) # internal_66 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 956($sp) # internal_67 = address of allocated object Int
		
		# Allocating NUll to internal_68
		sw $zero, 952($sp) # internal_68 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 948($sp) # internal_69 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 944($sp) # internal_70 = address of allocated object Int
		
		# internal_71 = typeof internal_64 that is the first word of the object
		lw $t0, 968($sp)
		lw $t0, 0($t0)
		sw $t0, 940($sp)
		
		# internal_72 = internal_71
		lw $t0, 940($sp)
		sw $t0, 936($sp)
		
		while_start_8759045285681:
		
		# internal_70 = EqualAddress(internal_72, internal_68)
		lw $t0, 936($sp)
		lw $t1, 952($sp)
		seq $t2, $t0, $t1
		lw $t0, 944($sp)
		sw $t2, 8($t0)
		
		# If internal_70 then goto while_end_8759045285681
		lw $t0, 944($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8759045285681
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_69
		lw $t0, 960($sp)
		sw $t0, 4($sp) # Storing internal_69
		
		# Argument internal_66
		lw $t0, 972($sp)
		sw $t0, 0($sp) # Storing internal_66
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 960($sp) # internal_69 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_72 = ancestor of internal_72
		lw $t0, 936($sp)
		lw $t0, 4($t0)
		sw $t0, 936($sp)
		
		# Jumping to while_start_8759045285681
		j while_start_8759045285681
		
		while_end_8759045285681:
		
		# internal_72 = internal_71
		lw $t0, 940($sp)
		sw $t0, 936($sp)
		
		# initialize Array [internal_69]
		lw $t0, 948($sp) # $t0 = internal_69
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 932($sp) # internal_73 = new Array[internal_69]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 928($sp) # internal_74 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 924($sp) # internal_75 = address of allocated object Int
		
		foreach_start_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_74
		lw $t0, 940($sp)
		sw $t0, 4($sp) # Storing internal_74
		
		# Argument internal_69
		lw $t0, 960($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 936($sp) # internal_75 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_75 then goto foreach_body_8759045285681
		lw $t0, 924($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8759045285681
		
		# Jumping to foreach_end_8759045285681
		j foreach_end_8759045285681
		
		foreach_body_8759045285681:
		
		# array internal_73[4 * internal_74] = internal_72
		lw $t0, 928($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 932($sp) # $t1 = internal_73
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 936($sp)
		sw $t0, 0($t1)
		
		# internal_72 = ancestor of internal_72
		lw $t0, 936($sp)
		lw $t0, 4($t0)
		sw $t0, 936($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_74
		lw $t0, 940($sp)
		sw $t0, 4($sp) # Storing internal_74
		
		# Argument internal_66
		lw $t0, 972($sp)
		sw $t0, 0($sp) # Storing internal_66
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 940($sp) # internal_74 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8759045285681
		j foreach_start_8759045285681
		
		foreach_end_8759045285681:
		
		# initialize Array [internal_67]
		lw $t0, 956($sp) # $t0 = internal_67
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 920($sp) # internal_76 = new Array[internal_67]
		
		# initialize Array [internal_67]
		lw $t0, 956($sp) # $t0 = internal_67
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 916($sp) # internal_77 = new Array[internal_67]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 908($sp) # internal_79 = address of allocated object Int
		
		# internal_78 = direction of C
		la $t0, type_C
		sw $t0, 912($sp)
		
		# array internal_76[4 * internal_79] = internal_78
		lw $t0, 908($sp) # $t0 = internal_79
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 920($sp) # $t1 = internal_76
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 912($sp)
		sw $t0, 0($t1)
		
		# array internal_77[4 * internal_79] = internal_69
		lw $t0, 908($sp) # $t0 = internal_79
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 916($sp) # $t1 = internal_77
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 948($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 900($sp) # internal_81 = address of allocated object Int
		
		# internal_80 = direction of A
		la $t0, type_A
		sw $t0, 904($sp)
		
		# array internal_76[4 * internal_81] = internal_80
		lw $t0, 900($sp) # $t0 = internal_81
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 920($sp) # $t1 = internal_76
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 904($sp)
		sw $t0, 0($t1)
		
		# array internal_77[4 * internal_81] = internal_69
		lw $t0, 900($sp) # $t0 = internal_81
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 916($sp) # $t1 = internal_77
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 948($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 892($sp) # internal_83 = address of allocated object Int
		
		# internal_82 = direction of Object
		la $t0, type_Object
		sw $t0, 896($sp)
		
		# array internal_76[4 * internal_83] = internal_82
		lw $t0, 892($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 920($sp) # $t1 = internal_76
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 896($sp)
		sw $t0, 0($t1)
		
		# array internal_77[4 * internal_83] = internal_69
		lw $t0, 892($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 916($sp) # $t1 = internal_77
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 948($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 888($sp) # internal_84 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 884($sp) # internal_85 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 876($sp) # internal_87 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 872($sp) # internal_88 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 864($sp) # internal_90 = address of allocated object Int
		
		foreach_type_start_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 900($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_67
		lw $t0, 968($sp)
		sw $t0, 0($sp) # Storing internal_67
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 896($sp) # internal_85 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_85 then goto foreach_type_body_8759045285681
		lw $t0, 884($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8759045285681
		
		# Jumping to foreach_type_end_8759045285681
		j foreach_type_end_8759045285681
		
		foreach_type_body_8759045285681:
		
		# internal_86 = array internal_76[4 * internal_84]
		lw $t0, 888($sp) # $t0 = internal_84
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 920($sp) # $t1 = internal_76
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 880($sp) # internal_86 = array internal_76[4 * internal_84]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_87
		lw $t0, 888($sp)
		sw $t0, 4($sp) # Storing internal_87
		
		# Argument internal_65
		lw $t0, 976($sp)
		sw $t0, 0($sp) # Storing internal_65
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 888($sp) # internal_87 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_87
		lw $t0, 888($sp)
		sw $t0, 4($sp) # Storing internal_87
		
		# Argument internal_69
		lw $t0, 960($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 884($sp) # internal_88 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_88 then goto foreach_ancestor_body_8759045285681
		lw $t0, 872($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8759045285681
		
		# Jumping to foreach_ancestor_end_8759045285681
		j foreach_ancestor_end_8759045285681
		
		foreach_ancestor_body_8759045285681:
		
		# internal_89 = array internal_73[4 * internal_87]
		lw $t0, 876($sp) # $t0 = internal_87
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 932($sp) # $t1 = internal_73
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 868($sp) # internal_89 = array internal_73[4 * internal_87]
		
		# internal_90 = EqualAddress(internal_86, internal_89)
		lw $t0, 880($sp)
		lw $t1, 868($sp)
		seq $t2, $t0, $t1
		lw $t0, 864($sp)
		sw $t2, 8($t0)
		
		# If internal_90 then goto foreach_ancestor_end_8759045285681
		lw $t0, 864($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8759045285681
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_87
		lw $t0, 888($sp)
		sw $t0, 4($sp) # Storing internal_87
		
		# Argument internal_66
		lw $t0, 972($sp)
		sw $t0, 0($sp) # Storing internal_66
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 888($sp) # internal_87 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8759045285681
		j foreach_ancestor_start_8759045285681
		
		foreach_ancestor_end_8759045285681:
		
		# array internal_77[4 * internal_84] = internal_87
		lw $t0, 888($sp) # $t0 = internal_84
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 916($sp) # $t1 = internal_77
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 876($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 900($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_66
		lw $t0, 972($sp)
		sw $t0, 0($sp) # Storing internal_66
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 900($sp) # internal_84 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8759045285681
		j foreach_type_start_8759045285681
		
		foreach_type_end_8759045285681:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 860($sp) # internal_91 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 856($sp) # internal_92 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 852($sp) # internal_93 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 848($sp) # internal_94 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 844($sp) # internal_95 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_94
		lw $t0, 860($sp)
		sw $t0, 4($sp) # Storing internal_94
		
		# Argument internal_69
		lw $t0, 960($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 860($sp) # internal_94 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_91
		lw $t0, 872($sp)
		sw $t0, 4($sp) # Storing internal_91
		
		# Argument internal_67
		lw $t0, 968($sp)
		sw $t0, 0($sp) # Storing internal_67
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 856($sp) # internal_95 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_95 then goto foreach_min_body_8759045285681
		lw $t0, 844($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8759045285681
		
		# Jumping to foreach_min_end_8759045285681
		j foreach_min_end_8759045285681
		
		foreach_min_body_8759045285681:
		
		# internal_93 = array internal_77[4 * internal_91]
		lw $t0, 860($sp) # $t0 = internal_91
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 916($sp) # $t1 = internal_77
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 852($sp) # internal_93 = array internal_77[4 * internal_91]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_93
		lw $t0, 864($sp)
		sw $t0, 4($sp) # Storing internal_93
		
		# Argument internal_94
		lw $t0, 860($sp)
		sw $t0, 0($sp) # Storing internal_94
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 856($sp) # internal_95 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_95 then goto update_min_8759045285681
		lw $t0, 844($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8759045285681
		
		# Jumping to update_min_end_8759045285681
		j update_min_end_8759045285681
		
		update_min_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_94
		lw $t0, 860($sp)
		sw $t0, 4($sp) # Storing internal_94
		
		# Argument internal_93
		lw $t0, 864($sp)
		sw $t0, 0($sp) # Storing internal_93
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 860($sp) # internal_94 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_92
		lw $t0, 868($sp)
		sw $t0, 4($sp) # Storing internal_92
		
		# Argument internal_91
		lw $t0, 872($sp)
		sw $t0, 0($sp) # Storing internal_91
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 868($sp) # internal_92 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_91
		lw $t0, 872($sp)
		sw $t0, 4($sp) # Storing internal_91
		
		# Argument internal_66
		lw $t0, 972($sp)
		sw $t0, 0($sp) # Storing internal_66
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 872($sp) # internal_91 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8759045285681
		j foreach_min_start_8759045285681
		
		foreach_min_end_8759045285681:
		
		# initialize Array [internal_67]
		lw $t0, 956($sp) # $t0 = internal_67
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 840($sp) # internal_96 = new Array[internal_67]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 836($sp) # internal_97 = address of allocated object Int
		
		# array internal_96[4 * internal_97] = internal_65
		lw $t0, 836($sp) # $t0 = internal_97
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_96
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 964($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 832($sp) # internal_98 = address of allocated object Int
		
		# array internal_96[4 * internal_98] = internal_65
		lw $t0, 832($sp) # $t0 = internal_98
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_96
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 964($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 828($sp) # internal_99 = address of allocated object Int
		
		# array internal_96[4 * internal_99] = internal_65
		lw $t0, 828($sp) # $t0 = internal_99
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_96
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 964($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 824($sp) # internal_100 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_94
		lw $t0, 860($sp)
		sw $t0, 4($sp) # Storing internal_94
		
		# Argument internal_69
		lw $t0, 960($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 836($sp) # internal_100 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_100 then goto error_branch_8759045285681
		lw $t0, 824($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8759045285681
		
		# array internal_96[4 * internal_92] = internal_66
		lw $t0, 856($sp) # $t0 = internal_92
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_96
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 960($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 820($sp) # internal_101 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 816($sp) # internal_102 = address of allocated object Int
		
		# internal_101 = array internal_96[4 * internal_102]
		lw $t0, 816($sp) # $t0 = internal_102
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_96
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 820($sp) # internal_101 = array internal_96[4 * internal_102]
		sw $t0, 8($t2)
		
		# If internal_101 then goto branch_C_8759045285681
		lw $t0, 820($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_C_8759045285681
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 812($sp) # internal_103 = address of allocated object Int
		
		# internal_101 = array internal_96[4 * internal_103]
		lw $t0, 812($sp) # $t0 = internal_103
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_96
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 820($sp) # internal_101 = array internal_96[4 * internal_103]
		sw $t0, 8($t2)
		
		# If internal_101 then goto branch_A_8759045285681
		lw $t0, 820($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_A_8759045285681
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 808($sp) # internal_104 = address of allocated object Int
		
		# internal_101 = array internal_96[4 * internal_104]
		lw $t0, 808($sp) # $t0 = internal_104
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_96
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 820($sp) # internal_101 = array internal_96[4 * internal_104]
		sw $t0, 8($t2)
		
		# If internal_101 then goto branch_Object_8759045285681
		lw $t0, 820($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Object_8759045285681
		
		branch_C_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument c
		lw $t0, 812($sp)
		sw $t0, 4($sp) # Storing c
		
		# Argument internal_64
		lw $t0, 980($sp)
		sw $t0, 0($sp) # Storing internal_64
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 812($sp) # c = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 792($sp) # internal_108 = address of allocated object Int
		
		# Get method value of C
		lw $t0, 800($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 792($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 788($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument c
		lw $t0, 808($sp)
		sw $t0, 0($sp) # Storing c
		
		# Calling function internal_109
		lw $t0, 796($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 804($sp) # internal_107 = result of internal_109
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 780($sp) # internal_111 = address of allocated object Int
		
		# Get method method6 of C
		lw $t0, 800($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 780($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 776($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument c
		lw $t0, 812($sp)
		sw $t0, 4($sp) # Storing c
		
		# Argument internal_107
		lw $t0, 808($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function internal_112
		lw $t0, 788($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 796($sp) # internal_110 = result of internal_112
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 784($sp) # $t1 = internal_110
		beq $t1, $zero, object_set_attribute_8759045190096
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045190096
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045190096
		j object_set_attribute_8759045190096
		int_set_attribute_8759045190096:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_110
		j end_set_attribute_8759045190096
		bool_set_attribute_8759045190096:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_110
		j end_set_attribute_8759045190096
		object_set_attribute_8759045190096:
		sw $t1, 12($t0) # self.avar = internal_110
		end_set_attribute_8759045190096:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_105
		lw $t0, 816($sp)
		sw $t0, 4($sp) # Storing internal_105
		
		# Argument internal_110
		lw $t0, 796($sp)
		sw $t0, 0($sp) # Storing internal_110
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 816($sp) # internal_105 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_105 = internal_110
		lw $t0, 784($sp)
		sw $t0, 804($sp)
		
		# Jumping to branch_end_8759045285681
		j branch_end_8759045285681
		
		branch_A_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 784($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument internal_64
		lw $t0, 980($sp)
		sw $t0, 0($sp) # Storing internal_64
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 784($sp) # a = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 764($sp) # internal_115 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 772($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 764($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 760($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument a
		lw $t0, 780($sp)
		sw $t0, 0($sp) # Storing a
		
		# Calling function internal_116
		lw $t0, 768($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 776($sp) # internal_114 = result of internal_116
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 752($sp) # internal_118 = address of allocated object Int
		
		# Get method method3 of A
		lw $t0, 772($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 752($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 748($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 784($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument internal_114
		lw $t0, 780($sp)
		sw $t0, 0($sp) # Storing internal_114
		
		# Calling function internal_119
		lw $t0, 760($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 768($sp) # internal_117 = result of internal_119
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 756($sp) # $t1 = internal_117
		beq $t1, $zero, object_set_attribute_8759045240444
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045240444
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045240444
		j object_set_attribute_8759045240444
		int_set_attribute_8759045240444:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_117
		j end_set_attribute_8759045240444
		bool_set_attribute_8759045240444:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_117
		j end_set_attribute_8759045240444
		object_set_attribute_8759045240444:
		sw $t1, 12($t0) # self.avar = internal_117
		end_set_attribute_8759045240444:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_105
		lw $t0, 816($sp)
		sw $t0, 4($sp) # Storing internal_105
		
		# Argument internal_117
		lw $t0, 768($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 816($sp) # internal_105 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_105 = internal_117
		lw $t0, 756($sp)
		sw $t0, 804($sp)
		
		# Jumping to branch_end_8759045285681
		j branch_end_8759045285681
		
		branch_Object_8759045285681:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument o
		lw $t0, 756($sp)
		sw $t0, 4($sp) # Storing o
		
		# Argument internal_64
		lw $t0, 980($sp)
		sw $t0, 0($sp) # Storing internal_64
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 756($sp) # o = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 79
		sb $t0, 8($v0) # internal_121[0] = 'O'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_121[1] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_121[2] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_121[3] = 'o'
		
		addi $t0, $zero, 112
		sb $t0, 12($v0) # internal_121[4] = 'p'
		
		addi $t0, $zero, 115
		sb $t0, 13($v0) # internal_121[5] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 14($v0) # internal_121[6] = '\n'
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 740($sp) # internal_121 = "Oooops\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 732($sp) # internal_123 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 732($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 728($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_121
		lw $t0, 752($sp)
		sw $t0, 0($sp) # Storing internal_121
		
		# Calling function internal_124
		lw $t0, 740($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 748($sp) # internal_122 = result of internal_124
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 720($sp) # internal_126 = address of allocated object Int
		
		# Get method abort of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 720($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 716($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_127
		lw $t0, 724($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 732($sp) # internal_125 = result of internal_127
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 712($sp) # internal_128 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_105
		lw $t0, 816($sp)
		sw $t0, 4($sp) # Storing internal_105
		
		# Argument internal_128
		lw $t0, 724($sp)
		sw $t0, 0($sp) # Storing internal_128
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 816($sp) # internal_105 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_105 = internal_128
		lw $t0, 712($sp)
		sw $t0, 804($sp)
		
		# Jumping to branch_end_8759045285681
		j branch_end_8759045285681
		
		error_branch_8759045285681:
		
		branch_end_8759045285681:
		
		# internal_59 = internal_105
		lw $t0, 804($sp)
		sw $t0, 988($sp)
		
		# Jumping to endif_8759045285684
		j endif_8759045285684
		
		else_8759045285684:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 704($sp) # internal_130 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045190669
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045190669
		j object_get_attribute_8759045190669
		int_get_attribute_8759045190669:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 700($sp) # internal_131 = self.char
		j end_get_attribute_8759045190669
		bool_get_attribute_8759045190669:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 700($sp) # internal_131 = self.char
		j end_get_attribute_8759045190669
		object_get_attribute_8759045190669:
		sw $t1, 700($sp) # internal_131 = self.char
		end_get_attribute_8759045190669:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 99
		sb $t0, 8($v0) # internal_132[0] = 'c'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 696($sp) # internal_132 = "c"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_131
		lw $t0, 712($sp)
		sw $t0, 4($sp) # Storing internal_131
		
		# Argument internal_132
		lw $t0, 708($sp)
		sw $t0, 0($sp) # Storing internal_132
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 704($sp) # internal_133 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_130 = internal_133
		lw $t0, 692($sp)
		sw $t0, 704($sp)
		
		# If internal_130 then goto then_8759045285885
		lw $t0, 704($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045285885
		
		# Jumping to else_8759045285885
		j else_8759045285885
		
		then_8759045285885:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 688($sp) # internal_134 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_134
		lw $t0, 696($sp)
		sw $t0, 0($sp) # Storing internal_134
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 696($sp) # internal_134 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 680($sp) # internal_136 = address of allocated object Int
		
		# Get method get_int of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 680($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 676($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1236($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_137
		lw $t0, 684($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 692($sp) # internal_135 = result of internal_137
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 668($sp) # internal_139 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 688($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 668($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 664($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_134
		lw $t0, 700($sp)
		sw $t0, 4($sp) # Storing internal_134
		
		# Argument internal_135
		lw $t0, 696($sp)
		sw $t0, 0($sp) # Storing internal_135
		
		# Calling function internal_140
		lw $t0, 676($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 684($sp) # internal_138 = result of internal_140
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute a_var of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 672($sp) # $t1 = internal_138
		beq $t1, $zero, object_set_attribute_8759045190756
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045190756
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045190756
		j object_set_attribute_8759045190756
		int_set_attribute_8759045190756:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.a_var = internal_138
		j end_set_attribute_8759045190756
		bool_set_attribute_8759045190756:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.a_var = internal_138
		j end_set_attribute_8759045190756
		object_set_attribute_8759045190756:
		sw $t1, 16($t0) # self.a_var = internal_138
		end_set_attribute_8759045190756:
		
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 660($sp) # internal_141 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_141
		lw $t0, 668($sp)
		sw $t0, 0($sp) # Storing internal_141
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 668($sp) # internal_141 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045190958
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045190958
		j object_get_attribute_8759045190958
		int_get_attribute_8759045190958:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 656($sp) # internal_142 = self.avar
		j end_get_attribute_8759045190958
		bool_get_attribute_8759045190958:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 656($sp) # internal_142 = self.avar
		j end_get_attribute_8759045190958
		object_get_attribute_8759045190958:
		sw $t1, 656($sp) # internal_142 = self.avar
		end_get_attribute_8759045190958:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 648($sp) # internal_144 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 656($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 648($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 644($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_142
		lw $t0, 664($sp)
		sw $t0, 0($sp) # Storing internal_142
		
		# Calling function internal_145
		lw $t0, 652($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 660($sp) # internal_143 = result of internal_145
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute a_var of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'a_var' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045191012
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045191012
		j object_get_attribute_8759045191012
		int_get_attribute_8759045191012:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 640($sp) # internal_146 = self.a_var
		j end_get_attribute_8759045191012
		bool_get_attribute_8759045191012:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 640($sp) # internal_146 = self.a_var
		j end_get_attribute_8759045191012
		object_get_attribute_8759045191012:
		sw $t1, 640($sp) # internal_146 = self.a_var
		end_get_attribute_8759045191012:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 632($sp) # internal_148 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 640($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 632($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 628($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_146
		lw $t0, 648($sp)
		sw $t0, 0($sp) # Storing internal_146
		
		# Calling function internal_149
		lw $t0, 636($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 644($sp) # internal_147 = result of internal_149
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 620($sp) # internal_151 = address of allocated object Int
		
		# Get method method4 of D
		lw $t0, 660($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 620($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 616($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_141
		lw $t0, 676($sp)
		sw $t0, 8($sp) # Storing internal_141
		
		# Argument internal_143
		lw $t0, 668($sp)
		sw $t0, 4($sp) # Storing internal_143
		
		# Argument internal_147
		lw $t0, 652($sp)
		sw $t0, 0($sp) # Storing internal_147
		
		# Calling function internal_152
		lw $t0, 632($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 640($sp) # internal_150 = result of internal_152
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 624($sp) # $t1 = internal_150
		beq $t1, $zero, object_set_attribute_8759045190882
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045190882
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045190882
		j object_set_attribute_8759045190882
		int_set_attribute_8759045190882:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_150
		j end_set_attribute_8759045190882
		bool_set_attribute_8759045190882:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_150
		j end_set_attribute_8759045190882
		object_set_attribute_8759045190882:
		sw $t1, 12($t0) # self.avar = internal_150
		end_set_attribute_8759045190882:
		
		# internal_129 = internal_150
		lw $t0, 624($sp)
		sw $t0, 708($sp)
		
		# Jumping to endif_8759045285885
		j endif_8759045285885
		
		else_8759045285885:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 608($sp) # internal_154 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045191144
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045191144
		j object_get_attribute_8759045191144
		int_get_attribute_8759045191144:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 604($sp) # internal_155 = self.char
		j end_get_attribute_8759045191144
		bool_get_attribute_8759045191144:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 604($sp) # internal_155 = self.char
		j end_get_attribute_8759045191144
		object_get_attribute_8759045191144:
		sw $t1, 604($sp) # internal_155 = self.char
		end_get_attribute_8759045191144:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 100
		sb $t0, 8($v0) # internal_156[0] = 'd'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 600($sp) # internal_156 = "d"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_155
		lw $t0, 616($sp)
		sw $t0, 4($sp) # Storing internal_155
		
		# Argument internal_156
		lw $t0, 612($sp)
		sw $t0, 0($sp) # Storing internal_156
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 608($sp) # internal_157 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_154 = internal_157
		lw $t0, 596($sp)
		sw $t0, 608($sp)
		
		# If internal_154 then goto then_8759045286404
		lw $t0, 608($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045286404
		
		# Jumping to else_8759045286404
		j else_8759045286404
		
		then_8759045286404:
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 592($sp) # internal_158 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_158
		lw $t0, 600($sp)
		sw $t0, 0($sp) # Storing internal_158
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 600($sp) # internal_158 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045191545
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045191545
		j object_get_attribute_8759045191545
		int_get_attribute_8759045191545:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 588($sp) # internal_159 = self.avar
		j end_get_attribute_8759045191545
		bool_get_attribute_8759045191545:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 588($sp) # internal_159 = self.avar
		j end_get_attribute_8759045191545
		object_get_attribute_8759045191545:
		sw $t1, 588($sp) # internal_159 = self.avar
		end_get_attribute_8759045191545:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 580($sp) # internal_161 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 588($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 580($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 576($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_159
		lw $t0, 596($sp)
		sw $t0, 0($sp) # Storing internal_159
		
		# Calling function internal_162
		lw $t0, 584($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 592($sp) # internal_160 = result of internal_162
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 568($sp) # internal_164 = address of allocated object Int
		
		# Get method method5 of A
		lw $t0, 592($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 568($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 564($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_158
		lw $t0, 604($sp)
		sw $t0, 4($sp) # Storing internal_158
		
		# Argument internal_160
		lw $t0, 596($sp)
		sw $t0, 0($sp) # Storing internal_160
		
		# Calling function function_method5_at_A
		jal function_method5_at_A
		lw $ra, 8($sp)
		sw $v1, 584($sp) # internal_163 = result of function_method5_at_A
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 572($sp) # $t1 = internal_163
		beq $t1, $zero, object_set_attribute_8759045191473
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045191473
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045191473
		j object_set_attribute_8759045191473
		int_set_attribute_8759045191473:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_163
		j end_set_attribute_8759045191473
		bool_set_attribute_8759045191473:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_163
		j end_set_attribute_8759045191473
		object_set_attribute_8759045191473:
		sw $t1, 12($t0) # self.avar = internal_163
		end_set_attribute_8759045191473:
		
		# internal_153 = internal_163
		lw $t0, 572($sp)
		sw $t0, 612($sp)
		
		# Jumping to endif_8759045286404
		j endif_8759045286404
		
		else_8759045286404:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 556($sp) # internal_167 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045191949
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045191949
		j object_get_attribute_8759045191949
		int_get_attribute_8759045191949:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 552($sp) # internal_168 = self.char
		j end_get_attribute_8759045191949
		bool_get_attribute_8759045191949:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 552($sp) # internal_168 = self.char
		j end_get_attribute_8759045191949
		object_get_attribute_8759045191949:
		sw $t1, 552($sp) # internal_168 = self.char
		end_get_attribute_8759045191949:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 101
		sb $t0, 8($v0) # internal_169[0] = 'e'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 548($sp) # internal_169 = "e"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_168
		lw $t0, 564($sp)
		sw $t0, 4($sp) # Storing internal_168
		
		# Argument internal_169
		lw $t0, 560($sp)
		sw $t0, 0($sp) # Storing internal_169
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 556($sp) # internal_170 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_167 = internal_170
		lw $t0, 544($sp)
		sw $t0, 556($sp)
		
		# If internal_167 then goto then_8759045286527
		lw $t0, 556($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045286527
		
		# Jumping to else_8759045286527
		j else_8759045286527
		
		then_8759045286527:
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 540($sp) # internal_171 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_171
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing internal_171
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 548($sp) # internal_171 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045192090
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045192090
		j object_get_attribute_8759045192090
		int_get_attribute_8759045192090:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 536($sp) # internal_172 = self.avar
		j end_get_attribute_8759045192090
		bool_get_attribute_8759045192090:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 536($sp) # internal_172 = self.avar
		j end_get_attribute_8759045192090
		object_get_attribute_8759045192090:
		sw $t1, 536($sp) # internal_172 = self.avar
		end_get_attribute_8759045192090:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 528($sp) # internal_174 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 536($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 528($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 524($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_172
		lw $t0, 544($sp)
		sw $t0, 0($sp) # Storing internal_172
		
		# Calling function internal_175
		lw $t0, 532($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 540($sp) # internal_173 = result of internal_175
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 516($sp) # internal_177 = address of allocated object Int
		
		# Get method method5 of B
		lw $t0, 540($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 516($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 512($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_171
		lw $t0, 552($sp)
		sw $t0, 4($sp) # Storing internal_171
		
		# Argument internal_173
		lw $t0, 544($sp)
		sw $t0, 0($sp) # Storing internal_173
		
		# Calling function function_method5_at_B
		jal function_method5_at_B
		lw $ra, 8($sp)
		sw $v1, 532($sp) # internal_176 = result of function_method5_at_B
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 520($sp) # $t1 = internal_176
		beq $t1, $zero, object_set_attribute_8759045192018
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045192018
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045192018
		j object_set_attribute_8759045192018
		int_set_attribute_8759045192018:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_176
		j end_set_attribute_8759045192018
		bool_set_attribute_8759045192018:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_176
		j end_set_attribute_8759045192018
		object_set_attribute_8759045192018:
		sw $t1, 12($t0) # self.avar = internal_176
		end_set_attribute_8759045192018:
		
		# internal_166 = internal_176
		lw $t0, 520($sp)
		sw $t0, 560($sp)
		
		# Jumping to endif_8759045286527
		j endif_8759045286527
		
		else_8759045286527:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 504($sp) # internal_180 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045192750
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045192750
		j object_get_attribute_8759045192750
		int_get_attribute_8759045192750:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 500($sp) # internal_181 = self.char
		j end_get_attribute_8759045192750
		bool_get_attribute_8759045192750:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 500($sp) # internal_181 = self.char
		j end_get_attribute_8759045192750
		object_get_attribute_8759045192750:
		sw $t1, 500($sp) # internal_181 = self.char
		end_get_attribute_8759045192750:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 102
		sb $t0, 8($v0) # internal_182[0] = 'f'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 496($sp) # internal_182 = "f"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_181
		lw $t0, 512($sp)
		sw $t0, 4($sp) # Storing internal_181
		
		# Argument internal_182
		lw $t0, 508($sp)
		sw $t0, 0($sp) # Storing internal_182
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 504($sp) # internal_183 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_180 = internal_183
		lw $t0, 492($sp)
		sw $t0, 504($sp)
		
		# If internal_180 then goto then_8759045286641
		lw $t0, 504($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045286641
		
		# Jumping to else_8759045286641
		j else_8759045286641
		
		then_8759045286641:
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 488($sp) # internal_184 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_184
		lw $t0, 496($sp)
		sw $t0, 0($sp) # Storing internal_184
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 496($sp) # internal_184 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045192891
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045192891
		j object_get_attribute_8759045192891
		int_get_attribute_8759045192891:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 484($sp) # internal_185 = self.avar
		j end_get_attribute_8759045192891
		bool_get_attribute_8759045192891:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 484($sp) # internal_185 = self.avar
		j end_get_attribute_8759045192891
		object_get_attribute_8759045192891:
		sw $t1, 484($sp) # internal_185 = self.avar
		end_get_attribute_8759045192891:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 476($sp) # internal_187 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 484($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 476($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 472($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_185
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_185
		
		# Calling function internal_188
		lw $t0, 480($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 488($sp) # internal_186 = result of internal_188
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 464($sp) # internal_190 = address of allocated object Int
		
		# Get method method5 of C
		lw $t0, 488($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 464($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 460($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_184
		lw $t0, 500($sp)
		sw $t0, 4($sp) # Storing internal_184
		
		# Argument internal_186
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_186
		
		# Calling function function_method5_at_C
		jal function_method5_at_C
		lw $ra, 8($sp)
		sw $v1, 480($sp) # internal_189 = result of function_method5_at_C
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 468($sp) # $t1 = internal_189
		beq $t1, $zero, object_set_attribute_8759045192819
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045192819
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045192819
		j object_set_attribute_8759045192819
		int_set_attribute_8759045192819:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_189
		j end_set_attribute_8759045192819
		bool_set_attribute_8759045192819:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_189
		j end_set_attribute_8759045192819
		object_set_attribute_8759045192819:
		sw $t1, 12($t0) # self.avar = internal_189
		end_set_attribute_8759045192819:
		
		# internal_179 = internal_189
		lw $t0, 468($sp)
		sw $t0, 508($sp)
		
		# Jumping to endif_8759045286641
		j endif_8759045286641
		
		else_8759045286641:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 452($sp) # internal_193 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045193551
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045193551
		j object_get_attribute_8759045193551
		int_get_attribute_8759045193551:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 448($sp) # internal_194 = self.char
		j end_get_attribute_8759045193551
		bool_get_attribute_8759045193551:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 448($sp) # internal_194 = self.char
		j end_get_attribute_8759045193551
		object_get_attribute_8759045193551:
		sw $t1, 448($sp) # internal_194 = self.char
		end_get_attribute_8759045193551:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 103
		sb $t0, 8($v0) # internal_195[0] = 'g'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 444($sp) # internal_195 = "g"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_194
		lw $t0, 460($sp)
		sw $t0, 4($sp) # Storing internal_194
		
		# Argument internal_195
		lw $t0, 456($sp)
		sw $t0, 0($sp) # Storing internal_195
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 452($sp) # internal_196 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_193 = internal_196
		lw $t0, 440($sp)
		sw $t0, 452($sp)
		
		# If internal_193 then goto then_8759045287220
		lw $t0, 452($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045287220
		
		# Jumping to else_8759045287220
		j else_8759045287220
		
		then_8759045287220:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 432($sp) # internal_198 = address of allocated object Int
		
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 428($sp) # internal_199 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_199
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing internal_199
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 436($sp) # internal_199 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045193716
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045193716
		j object_get_attribute_8759045193716
		int_get_attribute_8759045193716:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 424($sp) # internal_200 = self.avar
		j end_get_attribute_8759045193716
		bool_get_attribute_8759045193716:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 424($sp) # internal_200 = self.avar
		j end_get_attribute_8759045193716
		object_get_attribute_8759045193716:
		sw $t1, 424($sp) # internal_200 = self.avar
		end_get_attribute_8759045193716:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 416($sp) # internal_202 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 424($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 416($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 412($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_200
		lw $t0, 432($sp)
		sw $t0, 0($sp) # Storing internal_200
		
		# Calling function internal_203
		lw $t0, 420($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 428($sp) # internal_201 = result of internal_203
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 404($sp) # internal_205 = address of allocated object Int
		
		# Get method method7 of D
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 404($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 400($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_199
		lw $t0, 440($sp)
		sw $t0, 4($sp) # Storing internal_199
		
		# Argument internal_201
		lw $t0, 432($sp)
		sw $t0, 0($sp) # Storing internal_201
		
		# Calling function internal_206
		lw $t0, 412($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 420($sp) # internal_204 = result of internal_206
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_198 = internal_204
		lw $t0, 408($sp)
		sw $t0, 432($sp)
		
		# If internal_198 then goto then_8759045287298
		lw $t0, 432($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045287298
		
		# Jumping to else_8759045287298
		j else_8759045287298
		
		then_8759045287298:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_207[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_207[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_207[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_207[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_207[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_207[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_207[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 396($sp) # internal_207 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 388($sp) # internal_209 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 388($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 384($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_207
		lw $t0, 408($sp)
		sw $t0, 0($sp) # Storing internal_207
		
		# Calling function internal_210
		lw $t0, 396($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 404($sp) # internal_208 = result of internal_210
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045193915
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045193915
		j object_get_attribute_8759045193915
		int_get_attribute_8759045193915:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 380($sp) # internal_211 = self.avar
		j end_get_attribute_8759045193915
		bool_get_attribute_8759045193915:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 380($sp) # internal_211 = self.avar
		j end_get_attribute_8759045193915
		object_get_attribute_8759045193915:
		sw $t1, 380($sp) # internal_211 = self.avar
		end_get_attribute_8759045193915:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_213 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 372($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 368($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_211
		lw $t0, 392($sp)
		sw $t0, 0($sp) # Storing internal_211
		
		# Calling function internal_214
		lw $t0, 380($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 388($sp) # internal_212 = result of internal_214
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 28 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 28
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_215[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_215[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_215[2] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 11($v0) # internal_215[3] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 12($v0) # internal_215[4] = 'i'
		
		addi $t0, $zero, 118
		sb $t0, 13($v0) # internal_215[5] = 'v'
		
		addi $t0, $zero, 105
		sb $t0, 14($v0) # internal_215[6] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 15($v0) # internal_215[7] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_215[8] = 'i'
		
		addi $t0, $zero, 98
		sb $t0, 17($v0) # internal_215[9] = 'b'
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_215[10] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_215[11] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_215[12] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 21($v0) # internal_215[13] = 'b'
		
		addi $t0, $zero, 121
		sb $t0, 22($v0) # internal_215[14] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_215[15] = ' '
		
		addi $t0, $zero, 51
		sb $t0, 24($v0) # internal_215[16] = '3'
		
		addi $t0, $zero, 46
		sb $t0, 25($v0) # internal_215[17] = '.'
		
		addi $t0, $zero, 10
		sb $t0, 26($v0) # internal_215[18] = '\n'
		
		sb $zero, 27($v0) # Null-terminator at the end of the string
		
		sw $v0, 364($sp) # internal_215 = "is divisible by 3.\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_217 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 356($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 352($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_215
		lw $t0, 376($sp)
		sw $t0, 0($sp) # Storing internal_215
		
		# Calling function internal_218
		lw $t0, 364($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_216 = result of internal_218
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_197 = internal_216
		lw $t0, 360($sp)
		sw $t0, 436($sp)
		
		# Jumping to endif_8759045287298
		j endif_8759045287298
		
		else_8759045287298:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_219[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_219[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_219[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_219[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_219[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_219[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_219[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 348($sp) # internal_219 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 340($sp) # internal_221 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 340($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 336($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_219
		lw $t0, 360($sp)
		sw $t0, 0($sp) # Storing internal_219
		
		# Calling function internal_222
		lw $t0, 348($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 356($sp) # internal_220 = result of internal_222
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045194379
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045194379
		j object_get_attribute_8759045194379
		int_get_attribute_8759045194379:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 332($sp) # internal_223 = self.avar
		j end_get_attribute_8759045194379
		bool_get_attribute_8759045194379:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 332($sp) # internal_223 = self.avar
		j end_get_attribute_8759045194379
		object_get_attribute_8759045194379:
		sw $t1, 332($sp) # internal_223 = self.avar
		end_get_attribute_8759045194379:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 324($sp) # internal_225 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 324($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 320($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_223
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing internal_223
		
		# Calling function internal_226
		lw $t0, 332($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 340($sp) # internal_224 = result of internal_226
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 32 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 32
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_227[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_227[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_227[2] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 11($v0) # internal_227[3] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 12($v0) # internal_227[4] = 'o'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_227[5] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_227[6] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_227[7] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_227[8] = 'i'
		
		addi $t0, $zero, 118
		sb $t0, 17($v0) # internal_227[9] = 'v'
		
		addi $t0, $zero, 105
		sb $t0, 18($v0) # internal_227[10] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_227[11] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 20($v0) # internal_227[12] = 'i'
		
		addi $t0, $zero, 98
		sb $t0, 21($v0) # internal_227[13] = 'b'
		
		addi $t0, $zero, 108
		sb $t0, 22($v0) # internal_227[14] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 23($v0) # internal_227[15] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_227[16] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 25($v0) # internal_227[17] = 'b'
		
		addi $t0, $zero, 121
		sb $t0, 26($v0) # internal_227[18] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_227[19] = ' '
		
		addi $t0, $zero, 51
		sb $t0, 28($v0) # internal_227[20] = '3'
		
		addi $t0, $zero, 46
		sb $t0, 29($v0) # internal_227[21] = '.'
		
		addi $t0, $zero, 10
		sb $t0, 30($v0) # internal_227[22] = '\n'
		
		sb $zero, 31($v0) # Null-terminator at the end of the string
		
		sw $v0, 316($sp) # internal_227 = "is not divisible by 3.\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 308($sp) # internal_229 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 308($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 304($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_227
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing internal_227
		
		# Calling function internal_230
		lw $t0, 316($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 324($sp) # internal_228 = result of internal_230
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_197 = internal_228
		lw $t0, 312($sp)
		sw $t0, 436($sp)
		
		# Jumping to endif_8759045287298
		j endif_8759045287298
		
		endif_8759045287298:
		
		# internal_192 = internal_197
		lw $t0, 436($sp)
		sw $t0, 456($sp)
		
		# Jumping to endif_8759045287220
		j endif_8759045287220
		
		else_8759045287220:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_232 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045194810
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045194810
		j object_get_attribute_8759045194810
		int_get_attribute_8759045194810:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 292($sp) # internal_233 = self.char
		j end_get_attribute_8759045194810
		bool_get_attribute_8759045194810:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 292($sp) # internal_233 = self.char
		j end_get_attribute_8759045194810
		object_get_attribute_8759045194810:
		sw $t1, 292($sp) # internal_233 = self.char
		end_get_attribute_8759045194810:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 104
		sb $t0, 8($v0) # internal_234[0] = 'h'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 288($sp) # internal_234 = "h"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_233
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_233
		
		# Argument internal_234
		lw $t0, 300($sp)
		sw $t0, 0($sp) # Storing internal_234
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 296($sp) # internal_235 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_232 = internal_235
		lw $t0, 284($sp)
		sw $t0, 296($sp)
		
		# If internal_232 then goto then_8759045287271
		lw $t0, 296($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045287271
		
		# Jumping to else_8759045287271
		j else_8759045287271
		
		then_8759045287271:
		
		# Allocating NUll to x
		sw $zero, 280($sp) # x = 0
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 276($sp) # internal_237 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_237
		lw $t0, 284($sp)
		sw $t0, 0($sp) # Storing internal_237
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 284($sp) # internal_237 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045195002
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045195002
		j object_get_attribute_8759045195002
		int_get_attribute_8759045195002:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 272($sp) # internal_238 = self.avar
		j end_get_attribute_8759045195002
		bool_get_attribute_8759045195002:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 272($sp) # internal_238 = self.avar
		j end_get_attribute_8759045195002
		object_get_attribute_8759045195002:
		sw $t1, 272($sp) # internal_238 = self.avar
		end_get_attribute_8759045195002:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 264($sp) # internal_240 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 272($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 264($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 260($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_238
		lw $t0, 280($sp)
		sw $t0, 0($sp) # Storing internal_238
		
		# Calling function internal_241
		lw $t0, 268($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 276($sp) # internal_239 = result of internal_241
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 12
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 252($sp) # internal_243 = address of allocated object Int
		
		# Get method method6 of E
		lw $t0, 276($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 252($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 248($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_237
		lw $t0, 288($sp)
		sw $t0, 4($sp) # Storing internal_237
		
		# Argument internal_239
		lw $t0, 280($sp)
		sw $t0, 0($sp) # Storing internal_239
		
		# Calling function internal_244
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 268($sp) # internal_242 = result of internal_244
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 292($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_242
		lw $t0, 268($sp)
		sw $t0, 0($sp) # Storing internal_242
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 292($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045195662
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045195662
		j object_get_attribute_8759045195662
		int_get_attribute_8759045195662:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp) # internal_246 = self.avar
		j end_get_attribute_8759045195662
		bool_get_attribute_8759045195662:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp) # internal_246 = self.avar
		j end_get_attribute_8759045195662
		object_get_attribute_8759045195662:
		sw $t1, 240($sp) # internal_246 = self.avar
		end_get_attribute_8759045195662:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_248 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 240($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 232($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 228($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_246
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_246
		
		# Calling function internal_249
		lw $t0, 236($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 244($sp) # internal_247 = result of internal_249
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 220($sp) # internal_251 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 280($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 220($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 216($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument x
		lw $t0, 288($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_252
		lw $t0, 224($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 232($sp) # internal_250 = result of internal_252
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_253 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_250
		lw $t0, 236($sp)
		sw $t0, 4($sp) # Storing internal_250
		
		# Argument internal_253
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_253
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 220($sp) # internal_254 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_247
		lw $t0, 248($sp)
		sw $t0, 4($sp) # Storing internal_247
		
		# Argument internal_254
		lw $t0, 220($sp)
		sw $t0, 0($sp) # Storing internal_254
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 216($sp) # internal_255 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument r
		lw $t0, 256($sp)
		sw $t0, 4($sp) # Storing r
		
		# Argument internal_255
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_255
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 256($sp) # r = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_256[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_256[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_256[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_256[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_256[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_256[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_256[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 200($sp) # internal_256 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_258 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 192($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 188($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_256
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_256
		
		# Calling function internal_259
		lw $t0, 200($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_257 = result of internal_259
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045196427
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045196427
		j object_get_attribute_8759045196427
		int_get_attribute_8759045196427:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 184($sp) # internal_260 = self.avar
		j end_get_attribute_8759045196427
		bool_get_attribute_8759045196427:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 184($sp) # internal_260 = self.avar
		j end_get_attribute_8759045196427
		object_get_attribute_8759045196427:
		sw $t1, 184($sp) # internal_260 = self.avar
		end_get_attribute_8759045196427:
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_262 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 176($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 172($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_260
		lw $t0, 196($sp)
		sw $t0, 0($sp) # Storing internal_260
		
		# Calling function internal_263
		lw $t0, 184($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_261 = result of internal_263
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_264[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_264[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_264[2] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_264[3] = 'e'
		
		addi $t0, $zero, 113
		sb $t0, 12($v0) # internal_264[4] = 'q'
		
		addi $t0, $zero, 117
		sb $t0, 13($v0) # internal_264[5] = 'u'
		
		addi $t0, $zero, 97
		sb $t0, 14($v0) # internal_264[6] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_264[7] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_264[8] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_264[9] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 18($v0) # internal_264[10] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_264[11] = ' '
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 168($sp) # internal_264 = "is equal to "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_266 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 160($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 156($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_264
		lw $t0, 180($sp)
		sw $t0, 0($sp) # Storing internal_264
		
		# Calling function internal_267
		lw $t0, 168($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 176($sp) # internal_265 = result of internal_267
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_269 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 148($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 144($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument x
		lw $t0, 292($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_270
		lw $t0, 156($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 164($sp) # internal_268 = result of internal_270
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 37
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 116
		sb $t0, 8($v0) # internal_271[0] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 9($v0) # internal_271[1] = 'i'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_271[2] = 'm'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_271[3] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_271[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_271[5] = ' '
		
		addi $t0, $zero, 56
		sb $t0, 14($v0) # internal_271[6] = '8'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_271[7] = ' '
		
		addi $t0, $zero, 119
		sb $t0, 16($v0) # internal_271[8] = 'w'
		
		addi $t0, $zero, 105
		sb $t0, 17($v0) # internal_271[9] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 18($v0) # internal_271[10] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 19($v0) # internal_271[11] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_271[12] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 21($v0) # internal_271[13] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_271[14] = ' '
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_271[15] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 24($v0) # internal_271[16] = 'e'
		
		addi $t0, $zero, 109
		sb $t0, 25($v0) # internal_271[17] = 'm'
		
		addi $t0, $zero, 97
		sb $t0, 26($v0) # internal_271[18] = 'a'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_271[19] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 28($v0) # internal_271[20] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 29($v0) # internal_271[21] = 'd'
		
		addi $t0, $zero, 101
		sb $t0, 30($v0) # internal_271[22] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 31($v0) # internal_271[23] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_271[24] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 33($v0) # internal_271[25] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 34($v0) # internal_271[26] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_271[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 140($sp) # internal_271 = "times 8 with a remainder of "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_273 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 132($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 128($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_271
		lw $t0, 152($sp)
		sw $t0, 0($sp) # Storing internal_271
		
		# Calling function internal_274
		lw $t0, 140($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_272 = result of internal_274
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 120($sp) # internal_276 = address of allocated object A2I
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_276
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_276
		
		# Calling function function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 128($sp) # internal_276 = result of function___init___at_A2I
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 784($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument internal_276
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing internal_276
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 784($sp) # a = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_278 = address of allocated object Int
		
		# Get method i2a of A2I
		lw $t0, 772($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 784($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument r
		lw $t0, 256($sp)
		sw $t0, 0($sp) # Storing r
		
		# Calling function internal_279
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_277 = result of internal_279
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_281 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 100($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 96($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_277
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_277
		
		# Calling function internal_282
		lw $t0, 108($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_280 = result of internal_282
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_283[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 92($sp) # internal_283 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_285 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_283
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_283
		
		# Calling function internal_286
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_284 = result of internal_286
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 280($sp) # $t1 = x
		beq $t1, $zero, object_set_attribute_8759045196316
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045196316
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045196316
		j object_set_attribute_8759045196316
		int_set_attribute_8759045196316:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = x
		j end_set_attribute_8759045196316
		bool_set_attribute_8759045196316:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = x
		j end_set_attribute_8759045196316
		object_set_attribute_8759045196316:
		sw $t1, 12($t0) # self.avar = x
		end_set_attribute_8759045196316:
		
		# internal_231 = x
		lw $t0, 280($sp)
		sw $t0, 300($sp)
		
		# Jumping to endif_8759045287271
		j endif_8759045287271
		
		else_8759045287271:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_288 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045197237
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045197237
		j object_get_attribute_8759045197237
		int_get_attribute_8759045197237:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_289 = self.char
		j end_get_attribute_8759045197237
		bool_get_attribute_8759045197237:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_289 = self.char
		j end_get_attribute_8759045197237
		object_get_attribute_8759045197237:
		sw $t1, 68($sp) # internal_289 = self.char
		end_get_attribute_8759045197237:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 106
		sb $t0, 8($v0) # internal_290[0] = 'j'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_290 = "j"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_289
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing internal_289
		
		# Argument internal_290
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_290
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_291 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_288 = internal_291
		lw $t0, 60($sp)
		sw $t0, 72($sp)
		
		# If internal_288 then goto then_8759045288135
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045288135
		
		# Jumping to else_8759045288135
		j else_8759045288135
		
		then_8759045288135:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 56($sp) # internal_292 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_292
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_292
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 64($sp) # internal_292 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 56($sp) # $t1 = internal_292
		beq $t1, $zero, object_set_attribute_8759045197722
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045197722
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045197722
		j object_set_attribute_8759045197722
		int_set_attribute_8759045197722:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_292
		j end_set_attribute_8759045197722
		bool_set_attribute_8759045197722:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_292
		j end_set_attribute_8759045197722
		object_set_attribute_8759045197722:
		sw $t1, 12($t0) # self.avar = internal_292
		end_set_attribute_8759045197722:
		
		# internal_287 = internal_292
		lw $t0, 56($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8759045288135
		j endif_8759045288135
		
		else_8759045288135:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_294 = address of allocated object Int
		
		# Get attribute char of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 8($t0) # Get the attribute 'char' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045198096
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045198096
		j object_get_attribute_8759045198096
		int_get_attribute_8759045198096:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp) # internal_295 = self.char
		j end_get_attribute_8759045198096
		bool_get_attribute_8759045198096:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp) # internal_295 = self.char
		j end_get_attribute_8759045198096
		object_get_attribute_8759045198096:
		sw $t1, 44($sp) # internal_295 = self.char
		end_get_attribute_8759045198096:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 113
		sb $t0, 8($v0) # internal_296[0] = 'q'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # internal_296 = "q"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_295
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_295
		
		# Argument internal_296
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_296
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_297 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_294 = internal_297
		lw $t0, 36($sp)
		sw $t0, 48($sp)
		
		# If internal_294 then goto then_8759045288171
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8759045288171
		
		# Jumping to else_8759045288171
		j else_8759045288171
		
		then_8759045288171:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_298 = address of allocated object Int
		
		# Set attribute flag of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 32($sp) # $t1 = internal_298
		beq $t1, $zero, object_set_attribute_8759045198165
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045198165
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045198165
		j object_set_attribute_8759045198165
		int_set_attribute_8759045198165:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.flag = internal_298
		j end_set_attribute_8759045198165
		bool_set_attribute_8759045198165:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.flag = internal_298
		j end_set_attribute_8759045198165
		object_set_attribute_8759045198165:
		sw $t1, 20($t0) # self.flag = internal_298
		end_set_attribute_8759045198165:
		
		# internal_293 = internal_298
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8759045288171
		j endif_8759045288171
		
		else_8759045288171:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 28($sp) # internal_299 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_299
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_299
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_299 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute avar of self
		lw $t0, 1228($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'avar' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8759045198285
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8759045198285
		j object_get_attribute_8759045198285
		int_get_attribute_8759045198285:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp) # internal_300 = self.avar
		j end_get_attribute_8759045198285
		bool_get_attribute_8759045198285:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp) # internal_300 = self.avar
		j end_get_attribute_8759045198285
		object_get_attribute_8759045198285:
		sw $t1, 24($sp) # internal_300 = self.avar
		end_get_attribute_8759045198285:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_302 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_300
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_300
		
		# Calling function internal_303
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_301 = result of internal_303
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_305 = address of allocated object Int
		
		# Get method method1 of A
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_299
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_299
		
		# Argument internal_301
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_301
		
		# Calling function internal_306
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_304 = result of internal_306
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute avar of self
		lw $t0, 1228($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_304
		beq $t1, $zero, object_set_attribute_8759045198213
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8759045198213
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8759045198213
		j object_set_attribute_8759045198213
		int_set_attribute_8759045198213:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_304
		j end_set_attribute_8759045198213
		bool_set_attribute_8759045198213:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.avar = internal_304
		j end_set_attribute_8759045198213
		object_set_attribute_8759045198213:
		sw $t1, 12($t0) # self.avar = internal_304
		end_set_attribute_8759045198213:
		
		# internal_293 = internal_304
		lw $t0, 8($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8759045288171
		j endif_8759045288171
		
		endif_8759045288171:
		
		# internal_287 = internal_293
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8759045288135
		j endif_8759045288135
		
		endif_8759045288135:
		
		# internal_231 = internal_287
		lw $t0, 76($sp)
		sw $t0, 300($sp)
		
		# Jumping to endif_8759045287271
		j endif_8759045287271
		
		endif_8759045287271:
		
		# internal_192 = internal_231
		lw $t0, 300($sp)
		sw $t0, 456($sp)
		
		# Jumping to endif_8759045287220
		j endif_8759045287220
		
		endif_8759045287220:
		
		# internal_179 = internal_192
		lw $t0, 456($sp)
		sw $t0, 508($sp)
		
		# Jumping to endif_8759045286641
		j endif_8759045286641
		
		endif_8759045286641:
		
		# internal_166 = internal_179
		lw $t0, 508($sp)
		sw $t0, 560($sp)
		
		# Jumping to endif_8759045286527
		j endif_8759045286527
		
		endif_8759045286527:
		
		# internal_153 = internal_166
		lw $t0, 560($sp)
		sw $t0, 612($sp)
		
		# Jumping to endif_8759045286404
		j endif_8759045286404
		
		endif_8759045286404:
		
		# internal_129 = internal_153
		lw $t0, 612($sp)
		sw $t0, 708($sp)
		
		# Jumping to endif_8759045285885
		j endif_8759045285885
		
		endif_8759045285885:
		
		# internal_59 = internal_129
		lw $t0, 708($sp)
		sw $t0, 988($sp)
		
		# Jumping to endif_8759045285684
		j endif_8759045285684
		
		endif_8759045285684:
		
		# internal_35 = internal_59
		lw $t0, 988($sp)
		sw $t0, 1084($sp)
		
		# Jumping to endif_8759045284602
		j endif_8759045284602
		
		endif_8759045284602:
		
		# Jumping to while_start_8759045284425
		j while_start_8759045284425
		
		while_end_8759045284425:
		
		# Loading return value in $v1
		lw $v1, 1220($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 1228
		
		jr $ra
		
	main:
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_0 = address of allocated object Main
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_0 = result of function___init___at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 14
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Get method main of Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Exit program
		li $v0, 10
		syscall
		
		