.data
	type_Object: .word 28
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object__init_: .word function__init__at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_get_type: .word function_get_type_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 44
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO__init_: .word function__init__at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_get_type: .word function_get_type_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 40
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String__init_: .word function__init__at_String
	type_String_abort: .word function_abort_at_Object
	type_String_get_type: .word function_get_type_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 28
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int__init_: .word function__init__at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_get_type: .word function_get_type_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 28
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool__init_: .word function__init__at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_get_type: .word function_get_type_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_A: .word 60
	type_A_inherits_from: .word type_Object
	type_A_name_address: .word type_A_name_size
	type_A__init_: .word function__init__at_A
	type_A_abort: .word function_abort_at_Object
	type_A_get_type: .word function_get_type_at_Object
	type_A_type_name: .word function_type_name_at_Object
	type_A_copy: .word function_copy_at_Object
	type_A_value: .word function_value_at_A
	type_A_set_var: .word function_set_var_at_A
	type_A_method1: .word function_method1_at_A
	type_A_method2: .word function_method2_at_A
	type_A_method3: .word function_method3_at_A
	type_A_method4: .word function_method4_at_A
	type_A_method5: .word function_method5_at_A
	
	type_B: .word 60
	type_B_inherits_from: .word type_A
	type_B_name_address: .word type_B_name_size
	type_B__init_: .word function__init__at_B
	type_B_abort: .word function_abort_at_Object
	type_B_get_type: .word function_get_type_at_Object
	type_B_type_name: .word function_type_name_at_Object
	type_B_copy: .word function_copy_at_Object
	type_B_value: .word function_value_at_A
	type_B_set_var: .word function_set_var_at_A
	type_B_method1: .word function_method1_at_A
	type_B_method2: .word function_method2_at_A
	type_B_method3: .word function_method3_at_A
	type_B_method4: .word function_method4_at_A
	type_B_method5: .word function_method5_at_B
	
	type_C: .word 64
	type_C_inherits_from: .word type_B
	type_C_name_address: .word type_C_name_size
	type_C__init_: .word function__init__at_C
	type_C_abort: .word function_abort_at_Object
	type_C_get_type: .word function_get_type_at_Object
	type_C_type_name: .word function_type_name_at_Object
	type_C_copy: .word function_copy_at_Object
	type_C_value: .word function_value_at_A
	type_C_set_var: .word function_set_var_at_A
	type_C_method1: .word function_method1_at_A
	type_C_method2: .word function_method2_at_A
	type_C_method3: .word function_method3_at_A
	type_C_method4: .word function_method4_at_A
	type_C_method5: .word function_method5_at_C
	type_C_method6: .word function_method6_at_C
	
	type_D: .word 64
	type_D_inherits_from: .word type_B
	type_D_name_address: .word type_D_name_size
	type_D__init_: .word function__init__at_D
	type_D_abort: .word function_abort_at_Object
	type_D_get_type: .word function_get_type_at_Object
	type_D_type_name: .word function_type_name_at_Object
	type_D_copy: .word function_copy_at_Object
	type_D_value: .word function_value_at_A
	type_D_set_var: .word function_set_var_at_A
	type_D_method1: .word function_method1_at_A
	type_D_method2: .word function_method2_at_A
	type_D_method3: .word function_method3_at_A
	type_D_method4: .word function_method4_at_A
	type_D_method5: .word function_method5_at_B
	type_D_method7: .word function_method7_at_D
	
	type_E: .word 68
	type_E_inherits_from: .word type_D
	type_E_name_address: .word type_E_name_size
	type_E__init_: .word function__init__at_E
	type_E_abort: .word function_abort_at_Object
	type_E_get_type: .word function_get_type_at_Object
	type_E_type_name: .word function_type_name_at_Object
	type_E_copy: .word function_copy_at_Object
	type_E_value: .word function_value_at_A
	type_E_set_var: .word function_set_var_at_A
	type_E_method1: .word function_method1_at_A
	type_E_method2: .word function_method2_at_A
	type_E_method3: .word function_method3_at_A
	type_E_method4: .word function_method4_at_A
	type_E_method5: .word function_method5_at_B
	type_E_method7: .word function_method7_at_D
	type_E_method6: .word function_method6_at_E
	
	type_A2I: .word 52
	type_A2I_inherits_from: .word type_Object
	type_A2I_name_address: .word type_A2I_name_size
	type_A2I__init_: .word function__init__at_A2I
	type_A2I_abort: .word function_abort_at_Object
	type_A2I_get_type: .word function_get_type_at_Object
	type_A2I_type_name: .word function_type_name_at_Object
	type_A2I_copy: .word function_copy_at_Object
	type_A2I_c2i: .word function_c2i_at_A2I
	type_A2I_i2c: .word function_i2c_at_A2I
	type_A2I_a2i: .word function_a2i_at_A2I
	type_A2I_a2i_aux: .word function_a2i_aux_at_A2I
	type_A2I_i2a: .word function_i2a_at_A2I
	type_A2I_i2a_aux: .word function_i2a_aux_at_A2I
	
	type_Main: .word 88
	type_Main_inherits_from: .word type_IO
	type_Main_name_address: .word type_Main_name_size
	type_Main__init_: .word function__init__at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_get_type: .word function_get_type_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_menu: .word function_menu_at_Main
	type_Main_prompt: .word function_prompt_at_Main
	type_Main_get_int: .word function_get_int_at_Main
	type_Main_is_even: .word function_is_even_at_Main
	type_Main_class_type: .word function_class_type_at_Main
	type_Main_print: .word function_print_at_Main
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_A_name_size: .word 1
	type_A_name: .asciiz "A"
	
	type_B_name_size: .word 1
	type_B_name: .asciiz "B"
	
	type_C_name_size: .word 1
	type_C_name: .asciiz "C"
	
	type_D_name_size: .word 1
	type_D_name: .asciiz "D"
	
	type_E_name_size: .word 1
	type_E_name: .asciiz "E"
	
	type_A2I_name_size: .word 3
	type_A2I_name: .asciiz "A2I"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
		add_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# ADD
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		add $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		minus_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# MINUS
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sub $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		times_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# MULT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		mult $t0, $t1
		mflo $t2
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		div_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# DIV
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		div $t0, $t1
		mflo $t2
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		lessthan_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS THAN
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		slt $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		lesseq_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS EQUAL
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sle $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
		xor_funct:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# XOR
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		xor $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_Object:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function_abort_at_Object:
		addi $sp, $sp, -24
		
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		addi $t0, $zero, 65
		sb $t0, 8($v0)
		addi $t0, $zero, 98
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		addi $t0, $zero, 116
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		addi $t0, $zero, 100
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		addi $t0, $zero, 108
		sb $t0, 27($v0)
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		sb $zero, 32($v0)
		sw $v0, 20($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 8($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD type_name OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		lw $t0, 12($sp)
		addi $t0, $t0, 8
		# PRINT STRING -> internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# EXIT
		li $v0, 10
		syscall
		
		lw $v1, 24($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		addi $sp, $sp, -4
		
		# internal_0 <- NAME self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t1)
		la $t3, 4($t2)
		lw $t2, 0($t2)
		addi $t2, $t2, 9
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9
		la $t4, type_String
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		addi $t4, $v0, 0
		addi $t4, $t4, 8
		xor $t5, $t5, $t5
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3)
		sb $t6, 0($t4)
		addi $t4, $t4, 1
		addi $t3, $t3, 1
		addi $t5, $t5, 1
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		addi $sp, $sp, -4
		
		# COPY self INTO internal_0
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 4($t0)
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		addi $t3, $t3, 8
		addi $t2, $2, -8
		xor $t4, $t4, $t4
		
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0)
		sb $t5, 0($t3)
		addi $t0, $t0, 1
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_IO:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function_out_string_at_IO:
		lw $t0, 0($sp)
		addi $t0, $t0, 8
		# PRINT STRING -> x
		li $v0, 4
		move $a0, $t0
		syscall
		
		lw $v1, 4($sp)
		
		
		jr $ra
		
	function_out_int_at_IO:
		# PRINT INT
		li $v0, 1
		lw $v1, 4($sp)
		
		
		jr $ra
		
	function_in_string_at_IO:
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		xor $t0, $t0, $t0
		while_read_start:
		lb $t1, buffer_input($t0)
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9
		la $t2, type_String
		sw $t2, 0($v0)
		sw $a0, 4($v0)
		
		addi $t3, $v0, 8
		xor $t4, $t4, $t4
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4)
		sb $t5, 0($t3)
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_String:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function_length_at_String:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LENGHT: internal_0 <- self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		addi $sp, $sp, -4
		
		# internal_0 = CONCAT (self, s)
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0)
		lw $t3, 4($t1)
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3
		addi $t4, $t4, 9
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9
		add $t5, $zero, $v0
		addi $t5, $t5, 8
		la $t8, type_String
		sw $t8, 0($v0)
		
		sw $a0, 4($v0)
		xor $t6, $t6, $t6
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str1_start
		while_copy_str1_end:
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		addi $sp, $sp, -4
		
		# internal_0 <- self[i:i + l]
		lw $t0, 12($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t2, 8($sp)
		lw $t2, 8($t2)
		lw $t3, 4($sp)
		lw $t3, 8($t3)
		add $t4, $t2, $t3
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0)
		
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		add $t0, $t0, $t2
		move $t5, $v0
		add $t5, $t5, 8
		xor $t6, $t6, $t6
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		lw $v1, 0($sp)
		
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function__init__at_Bool:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	function__init__at_Int:
		lw $v1, 0($sp)
		
		
		jr $ra
		
	main:
		addi $sp, $sp, -16
		
		# ALLOCATE Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Main
		jal function__init__at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 15
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_3
		
		# EXIT
		li $v0, 10
		syscall
		
		
	function__init__at_A:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 4($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_value_at_A:
		jr $ra
		
	function_set_var_at_A:
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method1_at_A:
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method2_at_A:
		addi $sp, $sp, -24
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_B
		jal function__init__at_B
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF B
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 24
		
		jr $ra
		
	function_method3_at_A:
		addi $sp, $sp, -32
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL xor_funct
		jal xor_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_C
		jal function__init__at_C
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF C
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_7
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method4_at_A:
		addi $sp, $sp, -60
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_2
		lw $t0, 48($sp)
		sw $t0, 52($sp)
		
		# IF internal_1 IS TRUE -> GO TO then_8741340517705
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340517705
		
		then_8741340517705:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 36($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_D
		jal function__init__at_D
		lw $ra, 4($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD set_var OF D
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_8
		# internal_0 <- internal_6
		lw $t0, 32($sp)
		sw $t0, 56($sp)
		
		else_8741340517705:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_D
		jal function__init__at_D
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF D
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_14
		# internal_0 <- internal_12
		lw $t0, 8($sp)
		sw $t0, 56($sp)
		
		endif_8741340517705:
		
		lw $v1, 56($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 60
		
		jr $ra
		
	function_method5_at_A:
		addi $sp, $sp, -52
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE NUll into internal_4
		sw $zero, 32($sp)
		
		while_start_8741340517756:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lesseq_funct
		jal lesseq_funct
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# IF internal_5 IS TRUE -> GO TO while_body_8741340517756
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8741340517756
		
		while_body_8741340517756:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		while_end_8741340517756:
		
		# ALLOCATE E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_E
		jal function__init__at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_12
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 52
		
		jr $ra
		
	function__init__at_B:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 4($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method5_at_B:
		addi $sp, $sp, -24
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_E
		jal function__init__at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 24
		
		jr $ra
		
	function__init__at_C:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 4($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_C:
		addi $sp, $sp, -32
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL xor_funct
		jal xor_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A
		jal function__init__at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_7
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method5_at_C:
		addi $sp, $sp, -28
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_E
		jal function__init__at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_6
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 28
		
		jr $ra
		
	function__init__at_D:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 4($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method7_at_D:
		addi $sp, $sp, -124
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 12
		
		# internal_2 <- internal_4
		lw $t0, 104($sp)
		sw $t0, 112($sp)
		
		# IF internal_2 IS TRUE -> GO TO then_8741340519723
		lw $t0, 112($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340519723
		
		then_8741340519723:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL xor_funct
		jal xor_funct
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD method7 OF D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 140($sp)
		sw $t0, 4($sp)
		
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_10
		# internal_1 <- internal_8
		lw $t0, 88($sp)
		sw $t0, 116($sp)
		
		else_8741340519723:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# internal_12 <- internal_14
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# IF internal_12 IS TRUE -> GO TO then_8741340519804
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340519804
		
		then_8741340519804:
		
		# ALLOCATE BOOL 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# internal_11 <- internal_15
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		else_8741340519804:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# internal_17 <- internal_19
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# IF internal_17 IS TRUE -> GO TO then_8741340519858
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340519858
		
		then_8741340519858:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# internal_16 <- internal_20
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		else_8741340519858:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_22 <- internal_24
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# IF internal_22 IS TRUE -> GO TO then_8741340519933
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340519933
		
		then_8741340519933:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_21 <- internal_25
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		else_8741340519933:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD method7 OF D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 140($sp)
		sw $t0, 4($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_30
		# internal_21 <- internal_28
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		endif_8741340519933:
		
		# internal_16 <- internal_21
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		endif_8741340519858:
		
		# internal_11 <- internal_16
		lw $t0, 56($sp)
		sw $t0, 76($sp)
		
		endif_8741340519804:
		
		# internal_1 <- internal_11
		lw $t0, 76($sp)
		sw $t0, 116($sp)
		
		endif_8741340519723:
		
		lw $v1, 116($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 124
		
		jr $ra
		
	function__init__at_E:
		addi $sp, $sp, -4
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 4($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_E:
		addi $sp, $sp, -28
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL div_funct
		jal div_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A
		jal function__init__at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_6
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 28
		
		jr $ra
		
	function__init__at_A2I:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_c2i_at_A2I:
		addi $sp, $sp, -216
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 48
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 204($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 216($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# IF internal_1 IS TRUE -> GO TO then_8741340519979
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340519979
		
		then_8741340519979:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# internal_0 <- internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		else_8741340519979:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 49
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 184($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# IF internal_6 IS TRUE -> GO TO then_8741340520033
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340520033
		
		then_8741340520033:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# internal_5 <- internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		else_8741340520033:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 50
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 164($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 176($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# IF internal_11 IS TRUE -> GO TO then_8741340520087
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340520087
		
		then_8741340520087:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# internal_10 <- internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		else_8741340520087:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 51
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 144($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# IF internal_16 IS TRUE -> GO TO then_8741340520141
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340520141
		
		then_8741340520141:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# internal_15 <- internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		else_8741340520141:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 52
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 124($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_21 <- internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# IF internal_21 IS TRUE -> GO TO then_8741340520189
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340520189
		
		then_8741340520189:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# internal_20 <- internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		else_8741340520189:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 53
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 104($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# internal_26 <- internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# IF internal_26 IS TRUE -> GO TO then_8741340521021
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521021
		
		then_8741340521021:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# internal_25 <- internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		else_8741340521021:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 54
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 84($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_31 <- internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# IF internal_31 IS TRUE -> GO TO then_8741340521075
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521075
		
		then_8741340521075:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# internal_30 <- internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		else_8741340521075:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 55
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 64($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_36 <- internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# IF internal_36 IS TRUE -> GO TO then_8741340521129
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521129
		
		then_8741340521129:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# internal_35 <- internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		else_8741340521129:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 56
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 44($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_41 <- internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# IF internal_41 IS TRUE -> GO TO then_8741340521183
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521183
		
		then_8741340521183:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# internal_40 <- internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		else_8741340521183:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 57
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 24($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_46 <- internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# IF internal_46 IS TRUE -> GO TO then_8741340521189
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521189
		
		then_8741340521189:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# internal_45 <- internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		else_8741340521189:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_52
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_45 <- internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		endif_8741340521189:
		
		# internal_40 <- internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		endif_8741340521183:
		
		# internal_35 <- internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		endif_8741340521129:
		
		# internal_30 <- internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		endif_8741340521075:
		
		# internal_25 <- internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		endif_8741340521021:
		
		# internal_20 <- internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		endif_8741340520189:
		
		# internal_15 <- internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		endif_8741340520141:
		
		# internal_10 <- internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		endif_8741340520087:
		
		# internal_5 <- internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		endif_8741340520033:
		
		# internal_0 <- internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		endif_8741340519979:
		
		lw $v1, 212($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 216
		
		jr $ra
		
	function_i2c_at_A2I:
		addi $sp, $sp, -216
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 216($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# IF internal_1 IS TRUE -> GO TO then_8741340520042
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340520042
		
		then_8741340520042:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 48
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 196($sp)
		
		# internal_0 <- internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		else_8741340520042:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# IF internal_6 IS TRUE -> GO TO then_8741340521099
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521099
		
		then_8741340521099:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 49
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 176($sp)
		
		# internal_5 <- internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		else_8741340521099:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 176($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# IF internal_11 IS TRUE -> GO TO then_8741340521144
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521144
		
		then_8741340521144:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 50
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 156($sp)
		
		# internal_10 <- internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		else_8741340521144:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# IF internal_16 IS TRUE -> GO TO then_8741340521530
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521530
		
		then_8741340521530:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 51
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 136($sp)
		
		# internal_15 <- internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		else_8741340521530:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_21 <- internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# IF internal_21 IS TRUE -> GO TO then_8741340521563
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521563
		
		then_8741340521563:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 52
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 116($sp)
		
		# internal_20 <- internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		else_8741340521563:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# internal_26 <- internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# IF internal_26 IS TRUE -> GO TO then_8741340521617
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521617
		
		then_8741340521617:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 53
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 96($sp)
		
		# internal_25 <- internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		else_8741340521617:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_31 <- internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# IF internal_31 IS TRUE -> GO TO then_8741340521671
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521671
		
		then_8741340521671:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 54
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 76($sp)
		
		# internal_30 <- internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		else_8741340521671:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_36 <- internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# IF internal_36 IS TRUE -> GO TO then_8741340521725
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521725
		
		then_8741340521725:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 55
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 56($sp)
		
		# internal_35 <- internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		else_8741340521725:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_41 <- internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# IF internal_41 IS TRUE -> GO TO then_8741340522039
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340522039
		
		then_8741340522039:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 56
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 36($sp)
		
		# internal_40 <- internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		else_8741340522039:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_46 <- internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# IF internal_46 IS TRUE -> GO TO then_8741340522093
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340522093
		
		then_8741340522093:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 57
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 16($sp)
		
		# internal_45 <- internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		else_8741340522093:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_52
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		sb $zero, 8($v0)
		sw $v0, 0($sp)
		
		# internal_45 <- internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		endif_8741340522093:
		
		# internal_40 <- internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		endif_8741340522039:
		
		# internal_35 <- internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		endif_8741340521725:
		
		# internal_30 <- internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		endif_8741340521671:
		
		# internal_25 <- internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		endif_8741340521617:
		
		# internal_20 <- internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		endif_8741340521563:
		
		# internal_15 <- internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		endif_8741340521530:
		
		# internal_10 <- internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		endif_8741340521144:
		
		# internal_5 <- internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		endif_8741340521099:
		
		# internal_0 <- internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		endif_8741340520042:
		
		lw $v1, 212($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 216
		
		jr $ra
		
	function_a2i_at_A2I:
		addi $sp, $sp, -224
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_4
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 224($sp)
		sw $t0, 4($sp)
		
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_6
		lw $t0, 196($sp)
		sw $t0, 216($sp)
		
		# IF internal_1 IS TRUE -> GO TO then_8741340521090
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521090
		
		then_8741340521090:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# internal_0 <- internal_7
		lw $t0, 192($sp)
		sw $t0, 220($sp)
		
		else_8741340521090:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 168($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 164($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		lw $t0, 196($sp)
		sw $t0, 4($sp)
		
		lw $t0, 192($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_14
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 45
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 160($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		# internal_9 <- internal_16
		lw $t0, 156($sp)
		sw $t0, 184($sp)
		
		# IF internal_9 IS TRUE -> GO TO then_8741340521578
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521578
		
		then_8741340521578:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_20
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 124($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 120($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		lw $t0, 168($sp)
		sw $t0, 4($sp)
		
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_25
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# GET METHOD a2i_aux OF A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		lw $t0, 140($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_28
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 128($sp)
		sw $t0, 4($sp)
		
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL xor_funct
		jal xor_funct
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- internal_31
		lw $t0, 96($sp)
		sw $t0, 188($sp)
		
		else_8741340521578:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_38
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 43
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 64($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_33 <- internal_40
		lw $t0, 60($sp)
		sw $t0, 88($sp)
		
		# IF internal_33 IS TRUE -> GO TO then_8741340522105
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340522105
		
		then_8741340522105:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_44
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_49
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD a2i_aux OF A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_52
		# internal_32 <- internal_50
		lw $t0, 20($sp)
		sw $t0, 92($sp)
		
		else_8741340522105:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD a2i_aux OF A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_55
		# internal_32 <- internal_53
		lw $t0, 8($sp)
		sw $t0, 92($sp)
		
		endif_8741340522105:
		
		# internal_8 <- internal_32
		lw $t0, 92($sp)
		sw $t0, 188($sp)
		
		endif_8741340521578:
		
		# internal_0 <- internal_8
		lw $t0, 188($sp)
		sw $t0, 220($sp)
		
		endif_8741340521090:
		
		lw $v1, 220($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 224
		
		jr $ra
		
	function_a2i_aux_at_A2I:
		addi $sp, $sp, -88
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# GET METHOD length OF String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 68($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 64($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE NUll into internal_8
		sw $zero, 52($sp)
		
		while_start_8741340522204:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# IF internal_9 IS TRUE -> GO TO while_body_8741340522204
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8741340522204
		
		while_body_8741340522204:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD substr OF String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		lw $t0, 104($sp)
		sw $t0, 8($sp)
		
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_15
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD c2i OF A2I
		lw $t0, 92($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_18
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		while_end_8741340522204:
		
		lw $v1, 84($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 88
		
		jr $ra
		
	function_i2a_at_A2I:
		addi $sp, $sp, -96
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# IF internal_1 IS TRUE -> GO TO then_8741340521744
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521744
		
		then_8741340521744:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 48
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 76($sp)
		
		# internal_0 <- internal_4
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		else_8741340521744:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_8
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# IF internal_6 IS TRUE -> GO TO then_8741340521954
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521954
		
		then_8741340521954:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# GET METHOD i2a_aux OF A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_11
		# internal_5 <- internal_9
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		else_8741340521954:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 45
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 44($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL xor_funct
		jal xor_funct
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD i2a_aux OF A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_20
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_23
		# internal_5 <- internal_21
		lw $t0, 8($sp)
		sw $t0, 72($sp)
		
		endif_8741340521954:
		
		# internal_0 <- internal_5
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		endif_8741340521744:
		
		lw $v1, 92($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 96
		
		jr $ra
		
	function_i2a_aux_at_A2I:
		addi $sp, $sp, -80
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# IF internal_1 IS TRUE -> GO TO then_8741340521975
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340521975
		
		then_8741340521975:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		sb $zero, 8($v0)
		sw $v0, 60($sp)
		
		# internal_0 <- internal_4
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		else_8741340521975:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL div_funct
		jal div_funct
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD i2a_aux OF A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_10
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD i2c OF A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_16
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_19
		# internal_0 <- internal_17
		lw $t0, 8($sp)
		sw $t0, 76($sp)
		
		endif_8741340521975:
		
		lw $v1, 76($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 80
		
		jr $ra
		
	function__init__at_Main:
		addi $sp, $sp, -16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		sb $zero, 8($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE NUll into internal_1
		sw $zero, 8($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE NUll into internal_2
		sw $zero, 4($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE BOOL 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		lw $v1, 16($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 16
		
		jr $ra
		
	function_menu_at_Main:
		addi $sp, $sp, -396
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 30
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 30
		sw $t0, 4($v0)
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		addi $t0, $zero, 9
		sb $t0, 9($v0)
		addi $t0, $zero, 84
		sb $t0, 10($v0)
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		addi $t0, $zero, 97
		sb $t0, 13($v0)
		addi $t0, $zero, 100
		sb $t0, 14($v0)
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 97
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		addi $t0, $zero, 110
		sb $t0, 19($v0)
		addi $t0, $zero, 117
		sb $t0, 20($v0)
		addi $t0, $zero, 109
		sb $t0, 21($v0)
		addi $t0, $zero, 98
		sb $t0, 22($v0)
		addi $t0, $zero, 101
		sb $t0, 23($v0)
		addi $t0, $zero, 114
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 116
		sb $t0, 26($v0)
		addi $t0, $zero, 111
		sb $t0, 27($v0)
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		sb $zero, 29($v0)
		sw $v0, 392($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 384($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 384($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 380($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 404($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_3
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 372($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 368($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_6
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 97
		sb $t0, 17($v0)
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		sb $zero, 20($v0)
		sw $v0, 364($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 356($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 356($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 352($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 376($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_10
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		addi $t0, $zero, 103
		sb $t0, 14($v0)
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		addi $t0, $zero, 116
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		sb $zero, 19($v0)
		sw $v0, 348($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 340($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 340($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 336($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 360($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_14
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 328($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 328($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 324($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_17
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 98
		sb $t0, 17($v0)
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		sb $zero, 20($v0)
		sw $v0, 320($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 312($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 308($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 332($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_21
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 41
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 41
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 102
		sb $t0, 12($v0)
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		addi $t0, $zero, 104
		sb $t0, 18($v0)
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 100
		sb $t0, 21($v0)
		addi $t0, $zero, 105
		sb $t0, 22($v0)
		addi $t0, $zero, 102
		sb $t0, 23($v0)
		addi $t0, $zero, 102
		sb $t0, 24($v0)
		addi $t0, $zero, 101
		sb $t0, 25($v0)
		addi $t0, $zero, 114
		sb $t0, 26($v0)
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		addi $t0, $zero, 110
		sb $t0, 28($v0)
		addi $t0, $zero, 99
		sb $t0, 29($v0)
		addi $t0, $zero, 101
		sb $t0, 30($v0)
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		addi $t0, $zero, 98
		sb $t0, 32($v0)
		addi $t0, $zero, 101
		sb $t0, 33($v0)
		addi $t0, $zero, 116
		sb $t0, 34($v0)
		addi $t0, $zero, 119
		sb $t0, 35($v0)
		addi $t0, $zero, 101
		sb $t0, 36($v0)
		addi $t0, $zero, 101
		sb $t0, 37($v0)
		addi $t0, $zero, 110
		sb $t0, 38($v0)
		addi $t0, $zero, 32
		sb $t0, 39($v0)
		sb $zero, 40($v0)
		sw $v0, 304($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 296($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 296($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 292($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 316($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_25
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 284($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 284($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 280($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_28
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 39
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 39
		sw $t0, 4($v0)
		addi $t0, $zero, 97
		sb $t0, 8($v0)
		addi $t0, $zero, 110
		sb $t0, 9($v0)
		addi $t0, $zero, 100
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 97
		sb $t0, 12($v0)
		addi $t0, $zero, 110
		sb $t0, 13($v0)
		addi $t0, $zero, 111
		sb $t0, 14($v0)
		addi $t0, $zero, 116
		sb $t0, 15($v0)
		addi $t0, $zero, 104
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 114
		sb $t0, 18($v0)
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		addi $t0, $zero, 110
		sb $t0, 20($v0)
		addi $t0, $zero, 117
		sb $t0, 21($v0)
		addi $t0, $zero, 109
		sb $t0, 22($v0)
		addi $t0, $zero, 98
		sb $t0, 23($v0)
		addi $t0, $zero, 101
		sb $t0, 24($v0)
		addi $t0, $zero, 114
		sb $t0, 25($v0)
		addi $t0, $zero, 46
		sb $t0, 26($v0)
		addi $t0, $zero, 46
		sb $t0, 27($v0)
		addi $t0, $zero, 46
		sb $t0, 28($v0)
		addi $t0, $zero, 101
		sb $t0, 29($v0)
		addi $t0, $zero, 110
		sb $t0, 30($v0)
		addi $t0, $zero, 116
		sb $t0, 31($v0)
		addi $t0, $zero, 101
		sb $t0, 32($v0)
		addi $t0, $zero, 114
		sb $t0, 33($v0)
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		addi $t0, $zero, 99
		sb $t0, 35($v0)
		addi $t0, $zero, 58
		sb $t0, 36($v0)
		addi $t0, $zero, 10
		sb $t0, 37($v0)
		sb $zero, 38($v0)
		sw $v0, 276($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 268($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 268($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 264($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 288($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_32
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 35
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 35
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 102
		sb $t0, 12($v0)
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		addi $t0, $zero, 104
		sb $t0, 18($v0)
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		addi $t0, $zero, 97
		sb $t0, 22($v0)
		addi $t0, $zero, 99
		sb $t0, 23($v0)
		addi $t0, $zero, 116
		sb $t0, 24($v0)
		addi $t0, $zero, 111
		sb $t0, 25($v0)
		addi $t0, $zero, 114
		sb $t0, 26($v0)
		addi $t0, $zero, 105
		sb $t0, 27($v0)
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		addi $t0, $zero, 108
		sb $t0, 29($v0)
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		addi $t0, $zero, 111
		sb $t0, 31($v0)
		addi $t0, $zero, 102
		sb $t0, 32($v0)
		addi $t0, $zero, 32
		sb $t0, 33($v0)
		sb $zero, 34($v0)
		sw $v0, 260($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 252($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 252($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 248($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 272($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_36
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 240($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 236($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_39
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 100
		sb $t0, 17($v0)
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		sb $zero, 20($v0)
		sw $v0, 232($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 224($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 220($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_43
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 113
		sb $t0, 13($v0)
		addi $t0, $zero, 117
		sb $t0, 14($v0)
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		addi $t0, $zero, 114
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		sb $zero, 19($v0)
		sw $v0, 216($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_47
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 196($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 192($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_50
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		sb $zero, 20($v0)
		sw $v0, 188($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 180($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 176($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 200($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_54
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 18
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 18
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 99
		sb $t0, 12($v0)
		addi $t0, $zero, 117
		sb $t0, 13($v0)
		addi $t0, $zero, 98
		sb $t0, 14($v0)
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		sb $zero, 17($v0)
		sw $v0, 172($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 164($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 160($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 184($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_58
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 152($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 148($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_61
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 102
		sb $t0, 17($v0)
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		sb $zero, 20($v0)
		sw $v0, 144($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 136($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 132($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_65
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 25
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 25
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 102
		sb $t0, 12($v0)
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 111
		sb $t0, 17($v0)
		addi $t0, $zero, 117
		sb $t0, 18($v0)
		addi $t0, $zero, 116
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 105
		sb $t0, 21($v0)
		addi $t0, $zero, 102
		sb $t0, 22($v0)
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		sb $zero, 24($v0)
		sw $v0, 128($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 120($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 116($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 140($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_69
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 108($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 104($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_72
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 39
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 39
		sw $t0, 4($v0)
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 97
		sb $t0, 11($v0)
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		addi $t0, $zero, 109
		sb $t0, 13($v0)
		addi $t0, $zero, 117
		sb $t0, 14($v0)
		addi $t0, $zero, 108
		sb $t0, 15($v0)
		addi $t0, $zero, 116
		sb $t0, 16($v0)
		addi $t0, $zero, 105
		sb $t0, 17($v0)
		addi $t0, $zero, 112
		sb $t0, 18($v0)
		addi $t0, $zero, 108
		sb $t0, 19($v0)
		addi $t0, $zero, 101
		sb $t0, 20($v0)
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		addi $t0, $zero, 111
		sb $t0, 22($v0)
		addi $t0, $zero, 102
		sb $t0, 23($v0)
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		addi $t0, $zero, 51
		sb $t0, 25($v0)
		addi $t0, $zero, 46
		sb $t0, 26($v0)
		addi $t0, $zero, 46
		sb $t0, 27($v0)
		addi $t0, $zero, 46
		sb $t0, 28($v0)
		addi $t0, $zero, 101
		sb $t0, 29($v0)
		addi $t0, $zero, 110
		sb $t0, 30($v0)
		addi $t0, $zero, 116
		sb $t0, 31($v0)
		addi $t0, $zero, 101
		sb $t0, 32($v0)
		addi $t0, $zero, 114
		sb $t0, 33($v0)
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		addi $t0, $zero, 103
		sb $t0, 35($v0)
		addi $t0, $zero, 58
		sb $t0, 36($v0)
		addi $t0, $zero, 10
		sb $t0, 37($v0)
		sb $zero, 38($v0)
		sw $v0, 100($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 92($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 88($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_76
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 100
		sb $t0, 12($v0)
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		addi $t0, $zero, 118
		sb $t0, 14($v0)
		addi $t0, $zero, 105
		sb $t0, 15($v0)
		addi $t0, $zero, 100
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		sb $zero, 19($v0)
		sw $v0, 84($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 76($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 72($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_80
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD print OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_83
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 25
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 25
		sw $t0, 4($v0)
		addi $t0, $zero, 98
		sb $t0, 8($v0)
		addi $t0, $zero, 121
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 56
		sb $t0, 11($v0)
		addi $t0, $zero, 46
		sb $t0, 12($v0)
		addi $t0, $zero, 46
		sb $t0, 13($v0)
		addi $t0, $zero, 46
		sb $t0, 14($v0)
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		addi $t0, $zero, 110
		sb $t0, 16($v0)
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		addi $t0, $zero, 114
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 104
		sb $t0, 21($v0)
		addi $t0, $zero, 58
		sb $t0, 22($v0)
		addi $t0, $zero, 10
		sb $t0, 23($v0)
		sb $zero, 24($v0)
		sw $v0, 56($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_87
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 41
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 41
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 103
		sb $t0, 12($v0)
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		addi $t0, $zero, 97
		sb $t0, 16($v0)
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		addi $t0, $zero, 110
		sb $t0, 18($v0)
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		addi $t0, $zero, 119
		sb $t0, 20($v0)
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		addi $t0, $zero, 117
		sb $t0, 23($v0)
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		addi $t0, $zero, 98
		sb $t0, 25($v0)
		addi $t0, $zero, 101
		sb $t0, 26($v0)
		addi $t0, $zero, 114
		sb $t0, 27($v0)
		addi $t0, $zero, 46
		sb $t0, 28($v0)
		addi $t0, $zero, 46
		sb $t0, 29($v0)
		addi $t0, $zero, 46
		sb $t0, 30($v0)
		addi $t0, $zero, 101
		sb $t0, 31($v0)
		addi $t0, $zero, 110
		sb $t0, 32($v0)
		addi $t0, $zero, 116
		sb $t0, 33($v0)
		addi $t0, $zero, 101
		sb $t0, 34($v0)
		addi $t0, $zero, 114
		sb $t0, 35($v0)
		addi $t0, $zero, 32
		sb $t0, 36($v0)
		addi $t0, $zero, 106
		sb $t0, 37($v0)
		addi $t0, $zero, 58
		sb $t0, 38($v0)
		addi $t0, $zero, 10
		sb $t0, 39($v0)
		sb $zero, 40($v0)
		sw $v0, 40($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_91
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 30
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 30
		sw $t0, 4($v0)
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		addi $t0, $zero, 113
		sb $t0, 12($v0)
		addi $t0, $zero, 117
		sb $t0, 13($v0)
		addi $t0, $zero, 105
		sb $t0, 14($v0)
		addi $t0, $zero, 116
		sb $t0, 15($v0)
		addi $t0, $zero, 46
		sb $t0, 16($v0)
		addi $t0, $zero, 46
		sb $t0, 17($v0)
		addi $t0, $zero, 46
		sb $t0, 18($v0)
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		addi $t0, $zero, 110
		sb $t0, 20($v0)
		addi $t0, $zero, 116
		sb $t0, 21($v0)
		addi $t0, $zero, 101
		sb $t0, 22($v0)
		addi $t0, $zero, 114
		sb $t0, 23($v0)
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		addi $t0, $zero, 113
		sb $t0, 25($v0)
		addi $t0, $zero, 58
		sb $t0, 26($v0)
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		addi $t0, $zero, 10
		sb $t0, 28($v0)
		sb $zero, 29($v0)
		sw $v0, 24($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 408($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_95
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD in_string OF Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 404($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_98
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 396
		
		jr $ra
		
	function_prompt_at_Main:
		addi $sp, $sp, -44
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 40($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_3
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 35
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 35
		sw $t0, 4($v0)
		addi $t0, $zero, 80
		sb $t0, 8($v0)
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		addi $t0, $zero, 101
		sb $t0, 10($v0)
		addi $t0, $zero, 97
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		addi $t0, $zero, 110
		sb $t0, 16($v0)
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		addi $t0, $zero, 114
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 97
		sb $t0, 21($v0)
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		addi $t0, $zero, 110
		sb $t0, 23($v0)
		addi $t0, $zero, 117
		sb $t0, 24($v0)
		addi $t0, $zero, 109
		sb $t0, 25($v0)
		addi $t0, $zero, 98
		sb $t0, 26($v0)
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		addi $t0, $zero, 114
		sb $t0, 28($v0)
		addi $t0, $zero, 46
		sb $t0, 29($v0)
		addi $t0, $zero, 46
		sb $t0, 30($v0)
		addi $t0, $zero, 46
		sb $t0, 31($v0)
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		addi $t0, $zero, 32
		sb $t0, 33($v0)
		sb $zero, 34($v0)
		sw $v0, 24($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_7
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD in_string OF Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_10
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 44
		
		jr $ra
		
	function_get_int_at_Main:
		addi $sp, $sp, -36
		
		# ALLOCATE A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 28($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A2I
		jal function__init__at_A2I
		lw $ra, 4($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD prompt OF Main
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD a2i OF A2I
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_8
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 36
		
		jr $ra
		
	function_is_even_at_Main:
		addi $sp, $sp, -104
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# internal_2 <- internal_4
		lw $t0, 84($sp)
		sw $t0, 92($sp)
		
		# IF internal_2 IS TRUE -> GO TO then_8741340523545
		lw $t0, 92($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340523545
		
		then_8741340523545:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL xor_funct
		jal xor_funct
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD is_even OF Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_10
		# internal_1 <- internal_8
		lw $t0, 68($sp)
		sw $t0, 96($sp)
		
		else_8741340523545:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# internal_12 <- internal_14
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# IF internal_12 IS TRUE -> GO TO then_8741340524954
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340524954
		
		then_8741340524954:
		
		# ALLOCATE BOOL 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# internal_11 <- internal_15
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		else_8741340524954:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_17 <- internal_19
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# IF internal_17 IS TRUE -> GO TO then_8741340524990
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340524990
		
		then_8741340524990:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_16 <- internal_20
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		else_8741340524990:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD is_even OF Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_25
		# internal_16 <- internal_23
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		endif_8741340524990:
		
		# internal_11 <- internal_16
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		endif_8741340524954:
		
		# internal_1 <- internal_11
		lw $t0, 56($sp)
		sw $t0, 96($sp)
		
		endif_8741340523545:
		
		lw $v1, 96($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 104
		
		jr $ra
		
	function_class_type_at_Main:
		addi $sp, $sp, -332
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 328($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 324($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 320($sp)
		
		# ALLOCATE NUll into internal_3
		sw $zero, 316($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 308($sp)
		
		
		# internal_7 <- internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		while_start_8741340524858:
		
		# internal_5 <-- EQUAL ADDRESS(internal_7, internal_3)
		lw $t0, 300($sp)
		lw $t1, 316($sp)
		seq $t2, $t0, $t1
		lw $t0, 308($sp)
		sw $t2, 8($t0)
		
		# IF internal_5 IS TRUE -> GO TO while_end_8741340524858
		lw $t0, 308($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8741340524858
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 324($sp)
		sw $t0, 4($sp)
		
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 324($sp)
		addi $sp, $sp, 12
		
		# internal_7 PARENT OF: internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		while_end_8741340524858:
		
		
		# internal_7 <- internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		# ARRAY OF SIZE [internal_4]
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 296($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 292($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 288($sp)
		
		foreach_start_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# IF internal_10 IS TRUE -> GO TO foreach_body_8741340524858
		lw $t0, 288($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8741340524858
		
		foreach_body_8741340524858:
		
		# ARRAY internal_8[internal_9] = internal_7
		lw $t0, 292($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 296($sp)
		add $t1, $t1, $t0
		lw $t0, 300($sp)
		sw $t0, 0($t1)
		
		# internal_7 PARENT OF: internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		foreach_end_8741340524858:
		
		
		# ARRAY OF SIZE [internal_2]
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 284($sp)
		
		# ARRAY OF SIZE [internal_2]
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 280($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 272($sp)
		
		# internal_13 <- DIRECTION OF (A)
		la $t0, type_A
		sw $t0, 276($sp)
		
		# ARRAY internal_11[internal_14] = internal_13
		lw $t0, 272($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 276($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 264($sp)
		
		# internal_15 <- DIRECTION OF (B)
		la $t0, type_B
		sw $t0, 268($sp)
		
		# ARRAY internal_11[internal_16] = internal_15
		lw $t0, 264($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 268($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 256($sp)
		
		# internal_17 <- DIRECTION OF (C)
		la $t0, type_C
		sw $t0, 260($sp)
		
		# ARRAY internal_11[internal_18] = internal_17
		lw $t0, 256($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 260($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 248($sp)
		
		# internal_19 <- DIRECTION OF (D)
		la $t0, type_D
		sw $t0, 252($sp)
		
		# ARRAY internal_11[internal_20] = internal_19
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 252($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# internal_21 <- DIRECTION OF (E)
		la $t0, type_E
		sw $t0, 244($sp)
		
		# ARRAY internal_11[internal_22] = internal_21
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 244($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# internal_23 <- DIRECTION OF (Object)
		la $t0, type_Object
		sw $t0, 236($sp)
		
		# ARRAY internal_11[internal_24] = internal_23
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 236($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 228($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		foreach_type_start_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		lw $t0, 332($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 236($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 IS TRUE -> GO TO foreach_type_body_8741340524858
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8741340524858
		
		foreach_type_body_8741340524858:
		
		# internal_27 = ARRAY internal_11[internal_25]
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 220($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 340($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 228($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 224($sp)
		addi $sp, $sp, 12
		
		# IF internal_29 IS TRUE -> GO TO foreach_ancestor_body_8741340524858
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8741340524858
		
		foreach_ancestor_body_8741340524858:
		
		# internal_30 = ARRAY internal_8[internal_28]
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 296($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 208($sp)
		
		# internal_31 <-- EQUAL ADDRESS(internal_27, internal_30)
		lw $t0, 220($sp)
		lw $t1, 208($sp)
		seq $t2, $t0, $t1
		lw $t0, 204($sp)
		sw $t2, 8($t0)
		
		# IF internal_31 IS TRUE -> GO TO foreach_ancestor_end_8741340524858
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8741340524858
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 228($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8741340524858:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8741340524858:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		lw $t0, 332($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 196($sp)
		addi $sp, $sp, 12
		
		# IF internal_36 IS TRUE -> GO TO foreach_min_body_8741340524858
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8741340524858
		
		foreach_min_body_8741340524858:
		
		# ARRAY internal_12[internal_32]
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 192($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 204($sp)
		sw $t0, 4($sp)
		
		lw $t0, 200($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 196($sp)
		addi $sp, $sp, 12
		
		# IF internal_36 IS TRUE -> GO TO update_min_8741340524858
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8741340524858
		
		update_min_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		lw $t0, 204($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 208($sp)
		sw $t0, 4($sp)
		
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		update_min_end_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8741340524858:
		
		# ARRAY OF SIZE [internal_2]
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 180($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 164($sp)
		addi $sp, $sp, 12
		
		# IF internal_44 IS TRUE -> GO TO error_branch_8741340524858
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8741340524858
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# ARRAY internal_37[internal_46]
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 IS TRUE -> GO TO branch_A_8741340524858
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_A_8741340524858
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		# ARRAY internal_37[internal_47]
		lw $t0, 140($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 IS TRUE -> GO TO branch_B_8741340524858
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_B_8741340524858
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# ARRAY internal_37[internal_48]
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 IS TRUE -> GO TO branch_C_8741340524858
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_C_8741340524858
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# ARRAY internal_37[internal_49]
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 IS TRUE -> GO TO branch_D_8741340524858
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_D_8741340524858
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ARRAY internal_37[internal_50]
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 IS TRUE -> GO TO branch_E_8741340524858
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_E_8741340524858
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# ARRAY internal_37[internal_51]
		lw $t0, 124($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 IS TRUE -> GO TO branch_Object_8741340524858
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Object_8741340524858
		
		
		branch_A_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 128($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 65
		sb $t0, 26($v0)
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		sb $zero, 28($v0)
		sw $v0, 112($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 100($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 124($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_57
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_55
		lw $t0, 108($sp)
		sw $t0, 120($sp)
		
		
		branch_B_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 66
		sb $t0, 26($v0)
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		sb $zero, 28($v0)
		sw $v0, 92($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_62
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_60
		lw $t0, 88($sp)
		sw $t0, 120($sp)
		
		
		branch_C_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 67
		sb $t0, 26($v0)
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		sb $zero, 28($v0)
		sw $v0, 72($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_67
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_65
		lw $t0, 68($sp)
		sw $t0, 120($sp)
		
		
		branch_D_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 68
		sb $t0, 26($v0)
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		sb $zero, 28($v0)
		sw $v0, 52($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_72
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_70
		lw $t0, 48($sp)
		sw $t0, 120($sp)
		
		
		branch_E_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		addi $t0, $zero, 69
		sb $t0, 26($v0)
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		sb $zero, 28($v0)
		sw $v0, 32($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_77
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_75
		lw $t0, 28($sp)
		sw $t0, 120($sp)
		
		
		branch_Object_8741340524858:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		addi $t0, $zero, 79
		sb $t0, 8($v0)
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		addi $t0, $zero, 112
		sb $t0, 12($v0)
		addi $t0, $zero, 115
		sb $t0, 13($v0)
		addi $t0, $zero, 10
		sb $t0, 14($v0)
		sb $zero, 15($v0)
		sw $v0, 12($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_82
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_80
		lw $t0, 8($sp)
		sw $t0, 120($sp)
		
		
		error_branch_8741340524858:
		
		branch_end_8741340524858:
		
		lw $v1, 120($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 332
		
		jr $ra
		
	function_print_at_Main:
		addi $sp, $sp, -60
		
		# ALLOCATE A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 52($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A2I
		jal function__init__at_A2I
		lw $ra, 4($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET METHOD value OF A
		lw $t0, 60($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_4
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD i2a OF A2I
		lw $t0, 56($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_7
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_10
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 12($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_14
		lw $v1, 8($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 60
		
		jr $ra
		
	function_main_at_Main:
		addi $sp, $sp, -1112
		
		# ALLOCATE A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 1108($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 1116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A
		jal function__init__at_A
		lw $ra, 4($sp)
		sw $v1, 1116($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1120($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE NUll into internal_1
		sw $zero, 1104($sp)
		
		while_start_8741340525665:
		
		# IF flag IS TRUE -> GO TO while_body_8741340525665
		while_body_8741340525665:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		sb $zero, 15($v0)
		sw $v0, 1100($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 1092($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1092($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1088($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 1112($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_5
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 1080($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1080($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1076($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_8
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 1068($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 1060($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_13
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 1048($sp)
		
		# GET METHOD is_even OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1048($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1044($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 1076($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_16
		# internal_10 <- internal_14
		lw $t0, 1052($sp)
		sw $t0, 1068($sp)
		
		# IF internal_10 IS TRUE -> GO TO then_8741340525728
		lw $t0, 1068($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340525728
		
		then_8741340525728:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 18
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 18
		sw $t0, 4($v0)
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 118
		sb $t0, 12($v0)
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		addi $t0, $zero, 33
		sb $t0, 15($v0)
		addi $t0, $zero, 10
		sb $t0, 16($v0)
		sb $zero, 17($v0)
		sw $v0, 1040($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 1032($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1032($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1028($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 1052($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_20
		# internal_9 <- internal_18
		lw $t0, 1036($sp)
		sw $t0, 1072($sp)
		
		else_8741340525728:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 17
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 17
		sw $t0, 4($v0)
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		addi $t0, $zero, 100
		sb $t0, 12($v0)
		addi $t0, $zero, 100
		sb $t0, 13($v0)
		addi $t0, $zero, 33
		sb $t0, 14($v0)
		addi $t0, $zero, 10
		sb $t0, 15($v0)
		sb $zero, 16($v0)
		sw $v0, 1024($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 1016($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1016($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1012($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 1036($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_24
		# internal_9 <- internal_22
		lw $t0, 1020($sp)
		sw $t0, 1072($sp)
		
		endif_8741340525728:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 1004($sp)
		
		# GET METHOD class_type OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1004($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1000($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_27
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 992($sp)
		
		# GET METHOD menu OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 992($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 988($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 1120($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_30
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1008($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 980($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 97
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 976($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 988($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 984($sp)
		addi $sp, $sp, 12
		
		# internal_32 <- internal_34
		lw $t0, 972($sp)
		sw $t0, 980($sp)
		
		# IF internal_32 IS TRUE -> GO TO then_8741340526924
		lw $t0, 980($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340526924
		
		then_8741340526924:
		
		# ALLOCATE A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 968($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 976($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A
		jal function__init__at_A
		lw $ra, 4($sp)
		sw $v1, 976($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 960($sp)
		
		# GET METHOD get_int OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 960($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 956($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 1120($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_38
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 948($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 968($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 948($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 944($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 980($sp)
		sw $t0, 4($sp)
		
		lw $t0, 976($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_41
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 964($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 940($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 948($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_B
		jal function__init__at_B
		lw $ra, 4($sp)
		sw $v1, 948($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 932($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_45
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 920($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_48
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 908($sp)
		
		# GET METHOD method2 OF B
		lw $t0, 940($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 908($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 904($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		lw $t0, 956($sp)
		sw $t0, 8($sp)
		
		lw $t0, 952($sp)
		sw $t0, 4($sp)
		
		lw $t0, 940($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_51
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 924($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_31 <- avar
		else_8741340526924:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 896($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 98
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 892($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 904($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 900($sp)
		addi $sp, $sp, 12
		
		# internal_53 <- internal_55
		lw $t0, 888($sp)
		sw $t0, 896($sp)
		
		# IF internal_53 IS TRUE -> GO TO then_8741340526960
		lw $t0, 896($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340526960
		
		then_8741340526960:
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 884($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 880($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 876($sp)
		
		# ALLOCATE NUll into internal_59
		sw $zero, 872($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 868($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 864($sp)
		
		
		# internal_63 <- internal_62
		lw $t0, 860($sp)
		sw $t0, 856($sp)
		
		while_start_8741340526957:
		
		# internal_61 <-- EQUAL ADDRESS(internal_63, internal_59)
		lw $t0, 856($sp)
		lw $t1, 872($sp)
		seq $t2, $t0, $t1
		lw $t0, 864($sp)
		sw $t2, 8($t0)
		
		# IF internal_61 IS TRUE -> GO TO while_end_8741340526957
		lw $t0, 864($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8741340526957
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 880($sp)
		sw $t0, 4($sp)
		
		lw $t0, 892($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 880($sp)
		addi $sp, $sp, 12
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 856($sp)
		lw $t0, 4($t0)
		sw $t0, 856($sp)
		
		while_end_8741340526957:
		
		
		# internal_63 <- internal_62
		lw $t0, 860($sp)
		sw $t0, 856($sp)
		
		# ARRAY OF SIZE [internal_60]
		lw $t0, 868($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 852($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 848($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 844($sp)
		
		foreach_start_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 860($sp)
		sw $t0, 4($sp)
		
		lw $t0, 880($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 856($sp)
		addi $sp, $sp, 12
		
		# IF internal_66 IS TRUE -> GO TO foreach_body_8741340526957
		lw $t0, 844($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8741340526957
		
		foreach_body_8741340526957:
		
		# ARRAY internal_64[internal_65] = internal_63
		lw $t0, 848($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 852($sp)
		add $t1, $t1, $t0
		lw $t0, 856($sp)
		sw $t0, 0($t1)
		
		# internal_63 PARENT OF: internal_63
		lw $t0, 856($sp)
		lw $t0, 4($t0)
		sw $t0, 856($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 860($sp)
		sw $t0, 4($sp)
		
		lw $t0, 892($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 860($sp)
		addi $sp, $sp, 12
		
		foreach_end_8741340526957:
		
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 876($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 840($sp)
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 876($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 836($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 828($sp)
		
		# internal_69 <- DIRECTION OF (C)
		la $t0, type_C
		sw $t0, 832($sp)
		
		# ARRAY internal_67[internal_70] = internal_69
		lw $t0, 828($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 832($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 820($sp)
		
		# internal_71 <- DIRECTION OF (A)
		la $t0, type_A
		sw $t0, 824($sp)
		
		# ARRAY internal_67[internal_72] = internal_71
		lw $t0, 820($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 824($sp)
		sw $t0, 0($t1)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 812($sp)
		
		# internal_73 <- DIRECTION OF (Object)
		la $t0, type_Object
		sw $t0, 816($sp)
		
		# ARRAY internal_67[internal_74] = internal_73
		lw $t0, 812($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 816($sp)
		sw $t0, 0($t1)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 808($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 804($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 796($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 792($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 784($sp)
		
		foreach_type_start_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 820($sp)
		sw $t0, 4($sp)
		
		lw $t0, 888($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 816($sp)
		addi $sp, $sp, 12
		
		# IF internal_76 IS TRUE -> GO TO foreach_type_body_8741340526957
		lw $t0, 804($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8741340526957
		
		foreach_type_body_8741340526957:
		
		# internal_77 = ARRAY internal_67[internal_75]
		lw $t0, 808($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 800($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 808($sp)
		sw $t0, 4($sp)
		
		lw $t0, 896($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 808($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 808($sp)
		sw $t0, 4($sp)
		
		lw $t0, 880($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 804($sp)
		addi $sp, $sp, 12
		
		# IF internal_79 IS TRUE -> GO TO foreach_ancestor_body_8741340526957
		lw $t0, 792($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8741340526957
		
		foreach_ancestor_body_8741340526957:
		
		# internal_80 = ARRAY internal_64[internal_78]
		lw $t0, 796($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 852($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 788($sp)
		
		# internal_81 <-- EQUAL ADDRESS(internal_77, internal_80)
		lw $t0, 800($sp)
		lw $t1, 788($sp)
		seq $t2, $t0, $t1
		lw $t0, 784($sp)
		sw $t2, 8($t0)
		
		# IF internal_81 IS TRUE -> GO TO foreach_ancestor_end_8741340526957
		lw $t0, 784($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8741340526957
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 808($sp)
		sw $t0, 4($sp)
		
		lw $t0, 892($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 808($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_end_8741340526957:
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 820($sp)
		sw $t0, 4($sp)
		
		lw $t0, 892($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 820($sp)
		addi $sp, $sp, 12
		
		foreach_type_end_8741340526957:
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 780($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 776($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 772($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 768($sp)
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 764($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 780($sp)
		sw $t0, 4($sp)
		
		lw $t0, 880($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 780($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 792($sp)
		sw $t0, 4($sp)
		
		lw $t0, 888($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 776($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO foreach_min_body_8741340526957
		lw $t0, 764($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8741340526957
		
		foreach_min_body_8741340526957:
		
		# ARRAY internal_68[internal_82]
		lw $t0, 780($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 836($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 772($sp)
		sw $t0, 8($t2)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 784($sp)
		sw $t0, 4($sp)
		
		lw $t0, 780($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL lessthan_funct
		jal lessthan_funct
		lw $ra, 8($sp)
		sw $v1, 776($sp)
		addi $sp, $sp, 12
		
		# IF internal_86 IS TRUE -> GO TO update_min_8741340526957
		lw $t0, 764($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8741340526957
		
		update_min_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 780($sp)
		sw $t0, 4($sp)
		
		lw $t0, 784($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 780($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 788($sp)
		sw $t0, 4($sp)
		
		lw $t0, 792($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 788($sp)
		addi $sp, $sp, 12
		
		update_min_end_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 792($sp)
		sw $t0, 4($sp)
		
		lw $t0, 892($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL add_funct
		jal add_funct
		lw $ra, 8($sp)
		sw $v1, 792($sp)
		addi $sp, $sp, 12
		
		foreach_min_end_8741340526957:
		
		# ARRAY OF SIZE [internal_58]
		lw $t0, 876($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 760($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 756($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 752($sp)
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 748($sp)
		
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 744($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 780($sp)
		sw $t0, 4($sp)
		
		lw $t0, 880($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 756($sp)
		addi $sp, $sp, 12
		
		# IF internal_91 IS TRUE -> GO TO error_branch_8741340526957
		lw $t0, 744($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8741340526957
		
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 740($sp)
		
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 736($sp)
		
		# ARRAY internal_87[internal_93]
		lw $t0, 736($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 760($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 740($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_C_8741340526957
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_C_8741340526957
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 732($sp)
		
		# ARRAY internal_87[internal_94]
		lw $t0, 732($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 760($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 740($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_A_8741340526957
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_A_8741340526957
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 728($sp)
		
		# ARRAY internal_87[internal_95]
		lw $t0, 728($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 760($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 740($sp)
		sw $t0, 8($t2)
		
		# IF internal_92 IS TRUE -> GO TO branch_Object_8741340526957
		lw $t0, 740($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Object_8741340526957
		
		
		branch_C_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 732($sp)
		sw $t0, 4($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 732($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 712($sp)
		
		# GET METHOD value OF C
		lw $t0, 720($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 712($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 708($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_100
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 700($sp)
		
		# GET METHOD method6 OF C
		lw $t0, 720($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 700($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 696($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 732($sp)
		sw $t0, 4($sp)
		
		lw $t0, 728($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_103
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 736($sp)
		sw $t0, 4($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 736($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- avar
		
		branch_A_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 704($sp)
		sw $t0, 4($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 704($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 684($sp)
		
		# GET METHOD value OF A
		lw $t0, 692($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 684($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 680($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 700($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_107
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 672($sp)
		
		# GET METHOD method3 OF A
		lw $t0, 692($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 672($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 668($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 704($sp)
		sw $t0, 4($sp)
		
		lw $t0, 700($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_110
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 688($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 736($sp)
		sw $t0, 4($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 736($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- avar
		
		branch_Object_8741340526957:
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 676($sp)
		sw $t0, 4($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 676($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		addi $t0, $zero, 79
		sb $t0, 8($v0)
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		addi $t0, $zero, 112
		sb $t0, 12($v0)
		addi $t0, $zero, 115
		sb $t0, 13($v0)
		addi $t0, $zero, 10
		sb $t0, 14($v0)
		sb $zero, 15($v0)
		sw $v0, 660($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 652($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 652($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 648($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 672($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_115
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 640($sp)
		
		# GET METHOD abort OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 640($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 636($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 1120($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_118
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 632($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 736($sp)
		sw $t0, 4($sp)
		
		lw $t0, 644($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 736($sp)
		addi $sp, $sp, 12
		
		# internal_96 <- internal_119
		lw $t0, 632($sp)
		sw $t0, 724($sp)
		
		
		error_branch_8741340526957:
		
		branch_end_8741340526957:
		
		# internal_52 <- internal_96
		lw $t0, 724($sp)
		sw $t0, 900($sp)
		
		else_8741340526960:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 624($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 99
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 620($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 632($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 628($sp)
		addi $sp, $sp, 12
		
		# internal_121 <- internal_123
		lw $t0, 616($sp)
		sw $t0, 624($sp)
		
		# IF internal_121 IS TRUE -> GO TO then_8741340527689
		lw $t0, 624($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340527689
		
		then_8741340527689:
		
		# ALLOCATE A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 612($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 620($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A
		jal function__init__at_A
		lw $ra, 4($sp)
		sw $v1, 620($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 604($sp)
		
		# GET METHOD get_int OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 604($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 600($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 1120($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_127
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 592($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 612($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 592($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 588($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 624($sp)
		sw $t0, 4($sp)
		
		lw $t0, 620($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_130
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 608($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# ALLOCATE D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 584($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 592($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_D
		jal function__init__at_D
		lw $ra, 4($sp)
		sw $v1, 592($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 576($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_134
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 564($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_137
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 552($sp)
		
		# GET METHOD method4 OF D
		lw $t0, 584($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 552($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 548($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		lw $t0, 600($sp)
		sw $t0, 8($sp)
		
		lw $t0, 596($sp)
		sw $t0, 4($sp)
		
		lw $t0, 584($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_140
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 568($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_120 <- avar
		else_8741340527689:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 540($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 100
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 536($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 548($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 544($sp)
		addi $sp, $sp, 12
		
		# internal_142 <- internal_144
		lw $t0, 532($sp)
		sw $t0, 540($sp)
		
		# IF internal_142 IS TRUE -> GO TO then_8741340527782
		lw $t0, 540($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340527782
		
		then_8741340527782:
		
		# ALLOCATE C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 528($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 536($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_C
		jal function__init__at_C
		lw $ra, 4($sp)
		sw $v1, 536($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 520($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_148
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 508($sp)
		
		# GET METHOD method5 OF A
		lw $t0, 528($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 508($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 504($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 540($sp)
		sw $t0, 4($sp)
		
		lw $t0, 536($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function_method5_at_A
		jal function_method5_at_A
		lw $ra, 8($sp)
		sw $v1, 524($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 524($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_141 <- avar
		else_8741340527782:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 496($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 101
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 492($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 504($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 500($sp)
		addi $sp, $sp, 12
		
		# internal_153 <- internal_155
		lw $t0, 488($sp)
		sw $t0, 496($sp)
		
		# IF internal_153 IS TRUE -> GO TO then_8741340527869
		lw $t0, 496($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340527869
		
		then_8741340527869:
		
		# ALLOCATE C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 484($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_C
		jal function__init__at_C
		lw $ra, 4($sp)
		sw $v1, 492($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 476($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_159
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 464($sp)
		
		# GET METHOD method5 OF B
		lw $t0, 484($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 464($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 460($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 496($sp)
		sw $t0, 4($sp)
		
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function_method5_at_B
		jal function_method5_at_B
		lw $ra, 8($sp)
		sw $v1, 480($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 480($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_152 <- avar
		else_8741340527869:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 452($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 102
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 448($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 460($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 456($sp)
		addi $sp, $sp, 12
		
		# internal_164 <- internal_166
		lw $t0, 444($sp)
		sw $t0, 452($sp)
		
		# IF internal_164 IS TRUE -> GO TO then_8741340528198
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340528198
		
		then_8741340528198:
		
		# ALLOCATE C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 440($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 448($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_C
		jal function__init__at_C
		lw $ra, 4($sp)
		sw $v1, 448($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 432($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_170
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 420($sp)
		
		# GET METHOD method5 OF C
		lw $t0, 440($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 420($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 416($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 452($sp)
		sw $t0, 4($sp)
		
		lw $t0, 448($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function_method5_at_C
		jal function_method5_at_C
		lw $ra, 8($sp)
		sw $v1, 436($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 436($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_163 <- avar
		else_8741340528198:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 408($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 103
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 404($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 416($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 412($sp)
		addi $sp, $sp, 12
		
		# internal_175 <- internal_177
		lw $t0, 400($sp)
		sw $t0, 408($sp)
		
		# IF internal_175 IS TRUE -> GO TO then_8741340528270
		lw $t0, 408($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340528270
		
		then_8741340528270:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 392($sp)
		
		# ALLOCATE D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 388($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 396($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_D
		jal function__init__at_D
		lw $ra, 4($sp)
		sw $v1, 396($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 380($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_183
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 368($sp)
		
		# GET METHOD method7 OF D
		lw $t0, 388($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 368($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 364($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 400($sp)
		sw $t0, 4($sp)
		
		lw $t0, 396($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_186
		# internal_179 <- internal_184
		lw $t0, 372($sp)
		sw $t0, 392($sp)
		
		# IF internal_179 IS TRUE -> GO TO then_8741340528360
		lw $t0, 392($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340528360
		
		then_8741340528360:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		sb $zero, 15($v0)
		sw $v0, 360($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 352($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 352($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 348($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 372($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_190
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 340($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 340($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 336($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_193
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 28
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 28
		sw $t0, 4($v0)
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 100
		sb $t0, 11($v0)
		addi $t0, $zero, 105
		sb $t0, 12($v0)
		addi $t0, $zero, 118
		sb $t0, 13($v0)
		addi $t0, $zero, 105
		sb $t0, 14($v0)
		addi $t0, $zero, 115
		sb $t0, 15($v0)
		addi $t0, $zero, 105
		sb $t0, 16($v0)
		addi $t0, $zero, 98
		sb $t0, 17($v0)
		addi $t0, $zero, 108
		sb $t0, 18($v0)
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 98
		sb $t0, 21($v0)
		addi $t0, $zero, 121
		sb $t0, 22($v0)
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		addi $t0, $zero, 51
		sb $t0, 24($v0)
		addi $t0, $zero, 46
		sb $t0, 25($v0)
		addi $t0, $zero, 10
		sb $t0, 26($v0)
		sb $zero, 27($v0)
		sw $v0, 332($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 324($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 324($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 320($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_197
		# internal_178 <- internal_195
		lw $t0, 328($sp)
		sw $t0, 396($sp)
		
		else_8741340528360:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		sb $zero, 15($v0)
		sw $v0, 316($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 308($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 308($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 304($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_201
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 296($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 296($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 292($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_204
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 32
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 32
		sw $t0, 4($v0)
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 110
		sb $t0, 11($v0)
		addi $t0, $zero, 111
		sb $t0, 12($v0)
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		addi $t0, $zero, 105
		sb $t0, 16($v0)
		addi $t0, $zero, 118
		sb $t0, 17($v0)
		addi $t0, $zero, 105
		sb $t0, 18($v0)
		addi $t0, $zero, 115
		sb $t0, 19($v0)
		addi $t0, $zero, 105
		sb $t0, 20($v0)
		addi $t0, $zero, 98
		sb $t0, 21($v0)
		addi $t0, $zero, 108
		sb $t0, 22($v0)
		addi $t0, $zero, 101
		sb $t0, 23($v0)
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		addi $t0, $zero, 98
		sb $t0, 25($v0)
		addi $t0, $zero, 121
		sb $t0, 26($v0)
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		addi $t0, $zero, 51
		sb $t0, 28($v0)
		addi $t0, $zero, 46
		sb $t0, 29($v0)
		addi $t0, $zero, 10
		sb $t0, 30($v0)
		sb $zero, 31($v0)
		sw $v0, 288($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 280($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 280($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 276($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 300($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_208
		# internal_178 <- internal_206
		lw $t0, 284($sp)
		sw $t0, 396($sp)
		
		endif_8741340528360:
		
		# internal_174 <- internal_178
		lw $t0, 396($sp)
		sw $t0, 412($sp)
		
		else_8741340528270:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 268($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 104
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 264($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 272($sp)
		addi $sp, $sp, 12
		
		# internal_210 <- internal_212
		lw $t0, 260($sp)
		sw $t0, 268($sp)
		
		# IF internal_210 IS TRUE -> GO TO then_8741340528990
		lw $t0, 268($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340528990
		
		then_8741340528990:
		
		# ALLOCATE NUll into x
		sw $zero, 256($sp)
		
		# ALLOCATE E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 252($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 260($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_E
		jal function__init__at_E
		lw $ra, 4($sp)
		sw $v1, 260($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 244($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_217
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# GET METHOD method6 OF E
		lw $t0, 252($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 232($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 228($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 264($sp)
		sw $t0, 4($sp)
		
		lw $t0, 260($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_220
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 268($sp)
		sw $t0, 4($sp)
		
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 268($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_224
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		# GET METHOD value OF A
		lw $t0, 256($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 204($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 200($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_227
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 220($sp)
		sw $t0, 4($sp)
		
		lw $t0, 208($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL times_funct
		jal times_funct
		lw $ra, 8($sp)
		sw $v1, 204($sp)
		addi $sp, $sp, 12
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		lw $t0, 204($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL minus_funct
		jal minus_funct
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 236($sp)
		sw $t0, 4($sp)
		
		lw $t0, 200($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 236($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		sb $zero, 15($v0)
		sw $v0, 184($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 176($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 172($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_234
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 164($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 160($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_237
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 113
		sb $t0, 12($v0)
		addi $t0, $zero, 117
		sb $t0, 13($v0)
		addi $t0, $zero, 97
		sb $t0, 14($v0)
		addi $t0, $zero, 108
		sb $t0, 15($v0)
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		addi $t0, $zero, 111
		sb $t0, 18($v0)
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		sb $zero, 20($v0)
		sw $v0, 156($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 148($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 144($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 168($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_241
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 136($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 132($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 268($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_244
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 37
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 37
		sw $t0, 4($v0)
		addi $t0, $zero, 116
		sb $t0, 8($v0)
		addi $t0, $zero, 105
		sb $t0, 9($v0)
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		addi $t0, $zero, 56
		sb $t0, 14($v0)
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		addi $t0, $zero, 119
		sb $t0, 16($v0)
		addi $t0, $zero, 105
		sb $t0, 17($v0)
		addi $t0, $zero, 116
		sb $t0, 18($v0)
		addi $t0, $zero, 104
		sb $t0, 19($v0)
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		addi $t0, $zero, 97
		sb $t0, 21($v0)
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		addi $t0, $zero, 114
		sb $t0, 23($v0)
		addi $t0, $zero, 101
		sb $t0, 24($v0)
		addi $t0, $zero, 109
		sb $t0, 25($v0)
		addi $t0, $zero, 97
		sb $t0, 26($v0)
		addi $t0, $zero, 105
		sb $t0, 27($v0)
		addi $t0, $zero, 110
		sb $t0, 28($v0)
		addi $t0, $zero, 100
		sb $t0, 29($v0)
		addi $t0, $zero, 101
		sb $t0, 30($v0)
		addi $t0, $zero, 114
		sb $t0, 31($v0)
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		addi $t0, $zero, 111
		sb $t0, 33($v0)
		addi $t0, $zero, 102
		sb $t0, 34($v0)
		addi $t0, $zero, 32
		sb $t0, 35($v0)
		sb $zero, 36($v0)
		sw $v0, 128($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 120($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 116($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 140($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_248
		# ALLOCATE A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 108($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A2I
		jal function__init__at_A2I
		lw $ra, 4($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 704($sp)
		sw $t0, 4($sp)
		
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		sw $v1, 704($sp)
		addi $sp, $sp, 12
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# GET METHOD i2a OF A2I
		lw $t0, 692($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 100($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 96($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 704($sp)
		sw $t0, 4($sp)
		
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_253
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 88($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 84($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_256
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 80($sp)
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 1124($sp)
		sw $t0, 4($sp)
		
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_260
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 268($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_209 <- avar
		else_8741340528990:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 106
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 56($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# internal_262 <- internal_264
		lw $t0, 52($sp)
		sw $t0, 60($sp)
		
		# IF internal_262 IS TRUE -> GO TO then_8741340528930
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340528930
		
		then_8741340528930:
		
		# ALLOCATE A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 48($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A
		jal function__init__at_A
		lw $ra, 4($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 8
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_261 <- avar
		else_8741340528930:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		la $t0, type_String
		sw $t0, 0($v0)
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		addi $t0, $zero, 113
		sb $t0, 8($v0)
		sb $zero, 9($v0)
		sw $v0, 36($sp)
		
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL equal_funct
		jal equal_funct
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# internal_267 <- internal_269
		lw $t0, 32($sp)
		sw $t0, 40($sp)
		
		# IF internal_267 IS TRUE -> GO TO then_8741340529791
		lw $t0, 40($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8741340529791
		
		then_8741340529791:
		
		# ALLOCATE BOOL 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_266 <- flag
		else_8741340529791:
		
		# ALLOCATE A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 24($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_A
		jal function__init__at_A
		lw $ra, 4($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 8
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD value OF A
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# DYNAMIC FUNCT CALL internal_274
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD method1 OF A
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_277
		# FUNCT ARGS
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL assign_funct
		jal assign_funct
		lw $ra, 8($sp)
		# internal_266 <- avar
		endif_8741340529791:
		
		# internal_261 <- internal_266
		lw $t0, 44($sp)
		sw $t0, 64($sp)
		
		endif_8741340528930:
		
		# internal_209 <- internal_261
		lw $t0, 64($sp)
		sw $t0, 272($sp)
		
		endif_8741340528990:
		
		# internal_174 <- internal_209
		lw $t0, 272($sp)
		sw $t0, 412($sp)
		
		endif_8741340528270:
		
		# internal_163 <- internal_174
		lw $t0, 412($sp)
		sw $t0, 456($sp)
		
		endif_8741340528198:
		
		# internal_152 <- internal_163
		lw $t0, 456($sp)
		sw $t0, 500($sp)
		
		endif_8741340527869:
		
		# internal_141 <- internal_152
		lw $t0, 500($sp)
		sw $t0, 544($sp)
		
		endif_8741340527782:
		
		# internal_120 <- internal_141
		lw $t0, 544($sp)
		sw $t0, 628($sp)
		
		endif_8741340527689:
		
		# internal_52 <- internal_120
		lw $t0, 628($sp)
		sw $t0, 900($sp)
		
		endif_8741340526960:
		
		# internal_31 <- internal_52
		lw $t0, 900($sp)
		sw $t0, 984($sp)
		
		endif_8741340526924:
		
		while_end_8741340525665:
		
		lw $v1, 1104($sp)
		
		# FREE SPACE FOR LOCALVARS
		addi $sp, $sp, 1112
		
		jr $ra
		
	main:
		addi $sp, $sp, -16
		
		# ALLOCATE Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# STATIC FUNCT CALL function__init__at_Main
		jal function__init__at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		
		# ALLOCATE INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 15
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCT ARGS
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# DYNAMIC FUNCT CALL internal_3
		
		# EXIT
		li $v0, 10
		syscall
		
		