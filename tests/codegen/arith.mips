.data
	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_A: .word 56
	type_A_inherits_from: .word type_Object
	type_A_name_address: .word type_A_name_size
	type_A___init__: .word function___init___at_A
	type_A_abort: .word function_abort_at_Object
	type_A_type_name: .word function_type_name_at_Object
	type_A_copy: .word function_copy_at_Object
	type_A_value: .word function_value_at_A
	type_A_set_var: .word function_set_var_at_A
	type_A_method1: .word function_method1_at_A
	type_A_method2: .word function_method2_at_A
	type_A_method3: .word function_method3_at_A
	type_A_method4: .word function_method4_at_A
	type_A_method5: .word function_method5_at_A
	
	type_B: .word 56
	type_B_inherits_from: .word type_A
	type_B_name_address: .word type_B_name_size
	type_B___init__: .word function___init___at_B
	type_B_abort: .word function_abort_at_Object
	type_B_type_name: .word function_type_name_at_Object
	type_B_copy: .word function_copy_at_Object
	type_B_value: .word function_value_at_A
	type_B_set_var: .word function_set_var_at_A
	type_B_method1: .word function_method1_at_A
	type_B_method2: .word function_method2_at_A
	type_B_method3: .word function_method3_at_A
	type_B_method4: .word function_method4_at_A
	type_B_method5: .word function_method5_at_B
	
	type_C: .word 60
	type_C_inherits_from: .word type_B
	type_C_name_address: .word type_C_name_size
	type_C___init__: .word function___init___at_C
	type_C_abort: .word function_abort_at_Object
	type_C_type_name: .word function_type_name_at_Object
	type_C_copy: .word function_copy_at_Object
	type_C_value: .word function_value_at_A
	type_C_set_var: .word function_set_var_at_A
	type_C_method1: .word function_method1_at_A
	type_C_method2: .word function_method2_at_A
	type_C_method3: .word function_method3_at_A
	type_C_method4: .word function_method4_at_A
	type_C_method5: .word function_method5_at_C
	type_C_method6: .word function_method6_at_C
	
	type_D: .word 60
	type_D_inherits_from: .word type_B
	type_D_name_address: .word type_D_name_size
	type_D___init__: .word function___init___at_D
	type_D_abort: .word function_abort_at_Object
	type_D_type_name: .word function_type_name_at_Object
	type_D_copy: .word function_copy_at_Object
	type_D_value: .word function_value_at_A
	type_D_set_var: .word function_set_var_at_A
	type_D_method1: .word function_method1_at_A
	type_D_method2: .word function_method2_at_A
	type_D_method3: .word function_method3_at_A
	type_D_method4: .word function_method4_at_A
	type_D_method5: .word function_method5_at_B
	type_D_method7: .word function_method7_at_D
	
	type_E: .word 64
	type_E_inherits_from: .word type_D
	type_E_name_address: .word type_E_name_size
	type_E___init__: .word function___init___at_E
	type_E_abort: .word function_abort_at_Object
	type_E_type_name: .word function_type_name_at_Object
	type_E_copy: .word function_copy_at_Object
	type_E_value: .word function_value_at_A
	type_E_set_var: .word function_set_var_at_A
	type_E_method1: .word function_method1_at_A
	type_E_method2: .word function_method2_at_A
	type_E_method3: .word function_method3_at_A
	type_E_method4: .word function_method4_at_A
	type_E_method5: .word function_method5_at_B
	type_E_method7: .word function_method7_at_D
	type_E_method6: .word function_method6_at_E
	
	type_A2I: .word 48
	type_A2I_inherits_from: .word type_Object
	type_A2I_name_address: .word type_A2I_name_size
	type_A2I___init__: .word function___init___at_A2I
	type_A2I_abort: .word function_abort_at_Object
	type_A2I_type_name: .word function_type_name_at_Object
	type_A2I_copy: .word function_copy_at_Object
	type_A2I_c2i: .word function_c2i_at_A2I
	type_A2I_i2c: .word function_i2c_at_A2I
	type_A2I_a2i: .word function_a2i_at_A2I
	type_A2I_a2i_aux: .word function_a2i_aux_at_A2I
	type_A2I_i2a: .word function_i2a_at_A2I
	type_A2I_i2a_aux: .word function_i2a_aux_at_A2I
	
	type_Main: .word 84
	type_Main_inherits_from: .word type_IO
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_menu: .word function_menu_at_Main
	type_Main_prompt: .word function_prompt_at_Main
	type_Main_get_int: .word function_get_int_at_Main
	type_Main_is_even: .word function_is_even_at_Main
	type_Main_class_type: .word function_class_type_at_Main
	type_Main_print: .word function_print_at_Main
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_A_name_size: .word 1
	type_A_name: .asciiz "A"
	
	type_B_name_size: .word 1
	type_B_name: .asciiz "B"
	
	type_C_name_size: .word 1
	type_C_name: .asciiz "C"
	
	type_D_name_size: .word 1
	type_D_name: .asciiz "D"
	
	type_E_name_size: .word 1
	type_E_name: .asciiz "E"
	
	type_A2I_name_size: .word 3
	type_A2I_name: .asciiz "A2I"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	function_add:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Addition operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		add $t2, $t0, $t1 # $t2 = $t0 + $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Subtraction operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sub $t2, $t0, $t1 # $t2 = $t0 - $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Multiplication operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		mult $t0, $t1 # $t2 = $t0 * $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Division operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		div $t0, $t1 # $t2 = $t0 / $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Xor operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		xor $t2, $t0, $t1 # $t0 = $t0 ^ $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		slt $t2, $t0, $t1 # $t2 = $t0 < $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sle $t2, $t0, $t1 # $t2 = $t0 <= $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# Function parameters
		#   $ra = 48($sp)
		#   a = 44($sp)
		#   b = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_0 = address of allocated object Int
		
		# Allocating NUll to internal_1
		sw $zero, 32($sp) # internal_1 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_2 = address of allocated object Int
		
		# internal_2 = EqualAddress(a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 = EqualAddress(b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# If internal_2 then goto a_is_type_object
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_object
		
		# internal_3 = typeof a that is the first word of the object
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 = direction of Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 = direction of Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 = direction of String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_7 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_8 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_9 = address of allocated object Int
		
		# internal_7 = EqualAddress(internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 = EqualAddress(internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 = EqualAddress(internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_7 then goto a_is_type_int_or_bool
		lw $t0, 8($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_8 then goto a_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_9 then goto a_is_type_string
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_string
		
		# Jumping to a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 = EqualInt(a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 = EqualStr(a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		# By default we assume the strings are equals
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		# The strings are no equals
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# Equal operation
		lw $t0, 44($sp) # Save in $t0 the left operand address
		lw $t1, 40($sp) # Save in $t1 the right operand address
		seq $t2, $t0, $t1 # $t2 = $t0 == $t1
		
		lw $t0, 36($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Jumping to end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# Function parameters
		#   $ra = 36($sp)
		#   dest = 32($sp)
		#   source = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating NUll to internal_0
		sw $zero, 24($sp) # internal_0 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_1 = address of allocated object Int
		
		# internal_1 = EqualAddress(source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 = EqualAddress(dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# If internal_1 then goto source_is_type_object
		lw $t0, 20($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_object
		
		# internal_2 = typeof source that is the first word of the object
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 = direction of Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 = direction of Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_6 = address of allocated object Int
		
		# internal_5 = EqualAddress(internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 = EqualAddress(internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto source_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# If internal_6 then goto source_is_type_int_or_bool
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# Jumping to source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest = source where source is an integer
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp) # Pointer to source
		lw $t1, 0($t0) # $t1 = type of source
		lw $t2, 8($t0) # $t2 = value of source
		sw $t1, 0($v0) # Save type of dest
		sw $a0, 4($v0) # Save size of dest
		sw $t2, 8($v0) # Save value of dest
		sw $v0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest = source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 32($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# Function parameters
		#   $ra = 28($sp)
		#   self = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 33
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 65
		sb $t0, 8($v0) # internal_0[0] = 'A'
		
		addi $t0, $zero, 98
		sb $t0, 9($v0) # internal_0[1] = 'b'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_0[2] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_0[3] = 'r'
		
		addi $t0, $zero, 116
		sb $t0, 12($v0) # internal_0[4] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_0[5] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 14($v0) # internal_0[6] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_0[7] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_0[8] = 'l'
		
		addi $t0, $zero, 108
		sb $t0, 17($v0) # internal_0[9] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_0[10] = 'e'
		
		addi $t0, $zero, 100
		sb $t0, 19($v0) # internal_0[11] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_0[12] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 21($v0) # internal_0[13] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 22($v0) # internal_0[14] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_0[15] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 24($v0) # internal_0[16] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_0[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_0[18] = 'c'
		
		addi $t0, $zero, 108
		sb $t0, 27($v0) # internal_0[19] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_0[20] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 29($v0) # internal_0[21] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_0[22] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_0[23] = ' '
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_0 = "Abort called from class "
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_3[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 8($sp) # internal_3 = "\n"
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method type_name of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp) # internal_1 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_0
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 12($sp) # $t0 = internal_2
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Exit program
		li $v0, 10
		syscall
		
		# Loading return value in $v1
		lw $v1, 24($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = name of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 8($t1) # $t2 = direction of the type name
		la $t3, 4($t2) # $t3 = address of the name
		lw $t2, 0($t2) # $t2 = length of the name
		
		addi $t2, $t2, 9 # Setting space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9 # Restoring space for the type, the size and the null byte
		
		la $t4, type_String
		sw $t4, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t4, $v0, 0 # $t4 = direction of the new string
		addi $t4, $t4, 8 # Pointer to the first character of the string
		xor $t5, $t5, $t5 # Initializing counter
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3) # Loading the character
		sb $t6, 0($t4)
		addi $t4, $t4, 1 # Incrementing the pointer to the new string
		addi $t3, $t3, 1 # Incrementing the pointer to the string in self
		addi $t5, $t5, 1 # Incrementing counter
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4) # Setting the null byte
		
		sw $v0, 0($sp) # Storing the new string in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = copy of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 4($t0) # $t2 = length of self in bytes
		
		# Allocating space for the new object
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0 # $t3 = direction of the new object
		sw $t1, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		# Initializing the variable of the loop
		addi $t0, $t0, 8 # Pointer to the first character of the object
		addi $t3, $t3, 8 # Pointer to the first character of the object
		addi $t2, $2, -8 # Decrementing in 8 the length of the object
		xor $t4, $t4, $t4 # Initializing counter
		
		# Loop copying the object
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t0, $t0, 1 # Incrementing the pointer to the object
		addi $t3, $t3, 1 # Incrementing the pointer to the new object
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		lw $t0, 0($sp) # $t0 = x
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String x
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		# Printing the Int x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0 # Initializing counter
		while_read_start:
		lb $t1, buffer_input($t0) # Loading the byte
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1 # Incrementing counter
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9 # Adding space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9 # Adding space for the type, the size and the null byte
		la $t2, type_String
		sw $t2, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t3, $v0, 8 # Pointer to the first character of the string
		xor $t4, $t4, $t4 # Initializing counter
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t3, $t3, 1 # Imcremeenting pointer
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3) # Storing the null byte
		
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# internal_0 = length of self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9 # Subtracting 9 for the type, length, and null-terminator
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   s = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0) # $t2 = length of str1
		lw $t3, 4($t1) # $t3 = length of str2
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3 # $t4 = length of str1 + str2
		addi $t4, $t4, 9 # Adding the space for the type (4bytes), the length(4bytes) and the null-terminator(1byte)
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9 # Restoring $t4 = length of str1 + str2
		add $t5, $zero, $v0 # $t5 = address of the new string object
		addi $t5, $t5, 8 # $t5 = address of the first byte of the new string
		
		la $t8, type_String
		sw $t8, 0($v0) # Setting type in the first word of th object
		
		sw $a0, 4($v0) # Setting length of the string in the second word of the object
		
		# Copying str1 to the new string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str1_start
		while_copy_str1_end:
		
		# Copying str2 to the new string
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self + s
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		#   i = 8($sp)
		#   l = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self[i:i + l]
		lw $t0, 12($sp) # $t0 = address of the string
		lw $t1, 4($t0) # $t1 = length of the string
		addi $t1, $t1, -9 # $t1 = length of the string + 9
		lw $t2, 8($sp) # $t2 = start of the substring
		lw $t2, 8($t2)
		lw $t3, 4($sp) # $t3 = length of the substring
		lw $t3, 8($t3)
		add $t4, $t2, $t3 # $t4 = start of the substring + length of the substring
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0) # Setting type in the first word of the object
		
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t0, $t0, 8 # pointing to the first byte of the string
		add $t0, $t0, $t2 # pointing to the first byte of the substring
		move $t5, $v0 # $t5 = address of the new string
		add $t5, $t5, 8 # pointing to the first byte of the string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of the string
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self[i:i + l]
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_A:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument var
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_value_at_A:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		jr $ra
		
	function_set_var_at_A:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   num = 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument var
		# Argument num
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method1_at_A:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   num = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method2_at_A:
		# Function parameters
		#   $ra = 36($sp)
		#   self = 32($sp)
		#   num1 = 28($sp)
		#   num2 = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num1
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing num1
		
		# Argument num2
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing num2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_1 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 32($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_2 = address of allocated object B
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function___init___at_B
		jal function___init___at_B
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_2 = result of function___init___at_B
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method set_var of B
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function_method3_at_A:
		# Function parameters
		#   $ra = 40($sp)
		#   self = 36($sp)
		#   num = 32($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -32
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # x = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_2
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_1
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_4 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_4 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_6 = address of allocated object Int
		
		# Get method set_var of C
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_7
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method4_at_A:
		# Function parameters
		#   $ra = 72($sp)
		#   self = 68($sp)
		#   num1 = 64($sp)
		#   num2 = 60($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -60
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num2
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing num2
		
		# Argument num1
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing num1
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_2 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_2
		lw $t0, 48($sp)
		sw $t0, 52($sp)
		
		# If internal_1 then goto then_8792964879562
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964879562
		
		# Jumping to else_8792964879562
		j else_8792964879562
		
		then_8792964879562:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num1
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing num1
		
		# Argument num2
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing num2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_4 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_4
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 56($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 36($sp) # internal_5 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 44($sp) # internal_5 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_7 = address of allocated object Int
		
		# Get method set_var of D
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_8
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_6
		lw $t0, 32($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8792964879562
		j endif_8792964879562
		
		else_8792964879562:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num2
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing num2
		
		# Argument num1
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing num1
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_10 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_10
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 56($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_11 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_11
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_11 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_13 = address of allocated object Int
		
		# Get method set_var of D
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_11
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_11
		
		# Argument x
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_14
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_12
		lw $t0, 8($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8792964879562
		j endif_8792964879562
		
		endif_8792964879562:
		
		# Loading return value in $v1
		lw $v1, 56($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 60
		
		jr $ra
		
	function_method5_at_A:
		# Function parameters
		#   $ra = 60($sp)
		#   self = 56($sp)
		#   num = 52($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -52
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_1
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 60($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument internal_3
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # y = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating NUll to internal_4
		sw $zero, 32($sp) # internal_4 = 0
		
		while_start_8792964880418:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument num
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_less_than_or_equal
		jal function_less_than_or_equal
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_5 = result of function_less_than_or_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_5 then goto while_body_8792964880418
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8792964880418
		
		# Jumping to while_end_8792964880418
		j while_end_8792964880418
		
		while_body_8792964880418:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing y
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_6 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_6
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 60($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument internal_7
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_8 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument y
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing y
		
		# Argument internal_8
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # y = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to while_start_8792964880418
		j while_start_8792964880418
		
		while_end_8792964880418:
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_9 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_9 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_11 = address of allocated object Int
		
		# Get method set_var of E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_9
		
		# Argument x
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_12
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_10 = result of internal_12
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 52
		
		jr $ra
		
	function___init___at_B:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument var
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method5_at_B:
		# Function parameters
		#   $ra = 32($sp)
		#   self = 28($sp)
		#   num = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument num
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_1 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 32($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_2 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_2 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method set_var of E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument x
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function___init___at_C:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument var
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_C:
		# Function parameters
		#   $ra = 40($sp)
		#   self = 36($sp)
		#   num = 32($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -32
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # x = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_2
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_1
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_3 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_4 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_4 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_6 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument x
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_7
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method5_at_C:
		# Function parameters
		#   $ra = 36($sp)
		#   self = 32($sp)
		#   num = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # x = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_1 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_1
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_2 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_2
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_3 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_3 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Get method set_var of E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_6
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_4 = result of internal_6
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_D:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument var
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method7_at_D:
		# Function parameters
		#   $ra = 132($sp)
		#   self = 128($sp)
		#   num = 124($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -124
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument num
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 120($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_4 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_2 = internal_4
		lw $t0, 104($sp)
		sw $t0, 112($sp)
		
		# If internal_2 then goto then_8792964881357
		lw $t0, 112($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964881357
		
		# Jumping to else_8792964881357
		j else_8792964881357
		
		then_8792964881357:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_5 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_6
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_7 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument internal_5
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_7 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_9 = address of allocated object Int
		
		# Get method method7 of D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 140($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_7
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function internal_10
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_8
		lw $t0, 88($sp)
		sw $t0, 116($sp)
		
		# Jumping to endif_8792964881357
		j endif_8792964881357
		
		else_8792964881357:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_12 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_13 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing internal_13
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_14 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_12 = internal_14
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# If internal_12 then goto then_8792964881698
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964881698
		
		# Jumping to else_8792964881698
		j else_8792964881698
		
		then_8792964881698:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_15 = address of allocated object Int
		
		# internal_11 = internal_15
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8792964881698
		j endif_8792964881698
		
		else_8792964881698:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_17 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_18 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_17 = internal_19
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# If internal_17 then goto then_8792964881752
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964881752
		
		# Jumping to else_8792964881752
		j else_8792964881752
		
		then_8792964881752:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_20 = address of allocated object Int
		
		# internal_16 = internal_20
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8792964881752
		j endif_8792964881752
		
		else_8792964881752:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_22 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_23 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_23
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_23
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_24 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_22 = internal_24
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# If internal_22 then goto then_8792964881827
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964881827
		
		# Jumping to else_8792964881827
		j else_8792964881827
		
		then_8792964881827:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_25 = address of allocated object Int
		
		# internal_21 = internal_25
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8792964881827
		j endif_8792964881827
		
		else_8792964881827:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_26 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_26
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_26
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_27 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_29 = address of allocated object Int
		
		# Get method method7 of D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 140($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_27
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_27
		
		# Calling function internal_30
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_28 = result of internal_30
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_21 = internal_28
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8792964881827
		j endif_8792964881827
		
		endif_8792964881827:
		
		# internal_16 = internal_21
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8792964881752
		j endif_8792964881752
		
		endif_8792964881752:
		
		# internal_11 = internal_16
		lw $t0, 56($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8792964881698
		j endif_8792964881698
		
		endif_8792964881698:
		
		# internal_1 = internal_11
		lw $t0, 76($sp)
		sw $t0, 116($sp)
		
		# Jumping to endif_8792964881357
		j endif_8792964881357
		
		endif_8792964881357:
		
		# Loading return value in $v1
		lw $v1, 116($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 124
		
		jr $ra
		
	function___init___at_E:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument var
		# Argument internal_0
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_E:
		# Function parameters
		#   $ra = 36($sp)
		#   self = 32($sp)
		#   num = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # x = address of allocated object Int
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_1
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_2 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_2
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_3 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_3 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument x
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_6
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_4 = result of internal_6
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_A2I:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_c2i_at_A2I:
		# Function parameters
		#   $ra = 224($sp)
		#   self = 220($sp)
		#   char = 216($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -216
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_1 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 48
		sb $t0, 8($v0) # internal_2[0] = '0'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 204($sp) # internal_2 = "0"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_2
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# If internal_1 then goto then_8792964881869
		lw $t0, 208($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964881869
		
		# Jumping to else_8792964881869
		j else_8792964881869
		
		then_8792964881869:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_4 = address of allocated object Int
		
		# internal_0 = internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8792964881869
		j endif_8792964881869
		
		else_8792964881869:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_6 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 49
		sb $t0, 8($v0) # internal_7[0] = '1'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 184($sp) # internal_7 = "1"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_7
		lw $t0, 196($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_8 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_6 = internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# If internal_6 then goto then_8792964881917
		lw $t0, 188($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964881917
		
		# Jumping to else_8792964881917
		j else_8792964881917
		
		then_8792964881917:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_9 = address of allocated object Int
		
		# internal_5 = internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8792964881917
		j endif_8792964881917
		
		else_8792964881917:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_11 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 50
		sb $t0, 8($v0) # internal_12[0] = '2'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 164($sp) # internal_12 = "2"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_12
		lw $t0, 176($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_11 = internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# If internal_11 then goto then_8792964882493
		lw $t0, 168($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882493
		
		# Jumping to else_8792964882493
		j else_8792964882493
		
		then_8792964882493:
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_14 = address of allocated object Int
		
		# internal_10 = internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8792964882493
		j endif_8792964882493
		
		else_8792964882493:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_16 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 51
		sb $t0, 8($v0) # internal_17[0] = '3'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 144($sp) # internal_17 = "3"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_17
		lw $t0, 156($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_18 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_16 = internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# If internal_16 then goto then_8792964882547
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882547
		
		# Jumping to else_8792964882547
		j else_8792964882547
		
		then_8792964882547:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_19 = address of allocated object Int
		
		# internal_15 = internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8792964882547
		j endif_8792964882547
		
		else_8792964882547:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_21 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 52
		sb $t0, 8($v0) # internal_22[0] = '4'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 124($sp) # internal_22 = "4"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_22
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_23 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_21 = internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# If internal_21 then goto then_8792964882601
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882601
		
		# Jumping to else_8792964882601
		j else_8792964882601
		
		then_8792964882601:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_24 = address of allocated object Int
		
		# internal_20 = internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8792964882601
		j endif_8792964882601
		
		else_8792964882601:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_26 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 53
		sb $t0, 8($v0) # internal_27[0] = '5'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 104($sp) # internal_27 = "5"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_27
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_27
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_28 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_26 = internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# If internal_26 then goto then_8792964882655
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882655
		
		# Jumping to else_8792964882655
		j else_8792964882655
		
		then_8792964882655:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_29 = address of allocated object Int
		
		# internal_25 = internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8792964882655
		j endif_8792964882655
		
		else_8792964882655:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_31 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 54
		sb $t0, 8($v0) # internal_32[0] = '6'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # internal_32 = "6"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_32
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_33 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_31 = internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# If internal_31 then goto then_8792964882969
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882969
		
		# Jumping to else_8792964882969
		j else_8792964882969
		
		then_8792964882969:
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_34 = address of allocated object Int
		
		# internal_30 = internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964882969
		j endif_8792964882969
		
		else_8792964882969:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_36 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 55
		sb $t0, 8($v0) # internal_37[0] = '7'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_37 = "7"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_37
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_37
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_38 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_36 = internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# If internal_36 then goto then_8792964883023
		lw $t0, 68($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883023
		
		# Jumping to else_8792964883023
		j else_8792964883023
		
		then_8792964883023:
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_39 = address of allocated object Int
		
		# internal_35 = internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8792964883023
		j endif_8792964883023
		
		else_8792964883023:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_41 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 56
		sb $t0, 8($v0) # internal_42[0] = '8'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_42 = "8"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_42
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_42
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_43 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_41 = internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# If internal_41 then goto then_8792964883077
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883077
		
		# Jumping to else_8792964883077
		j else_8792964883077
		
		then_8792964883077:
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_44 = address of allocated object Int
		
		# internal_40 = internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8792964883077
		j endif_8792964883077
		
		else_8792964883077:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_46 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 57
		sb $t0, 8($v0) # internal_47[0] = '9'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_47 = "9"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing char
		
		# Argument internal_47
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_48 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_46 = internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# If internal_46 then goto then_8792964883131
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883131
		
		# Jumping to else_8792964883131
		j else_8792964883131
		
		then_8792964883131:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_49 = address of allocated object Int
		
		# internal_45 = internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8792964883131
		j endif_8792964883131
		
		else_8792964883131:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_51 = address of allocated object Int
		
		# Get method abort of A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_52
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_50 = result of internal_52
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_53 = address of allocated object Int
		
		# internal_45 = internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8792964883131
		j endif_8792964883131
		
		endif_8792964883131:
		
		# internal_40 = internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8792964883077
		j endif_8792964883077
		
		endif_8792964883077:
		
		# internal_35 = internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8792964883023
		j endif_8792964883023
		
		endif_8792964883023:
		
		# internal_30 = internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964882969
		j endif_8792964882969
		
		endif_8792964882969:
		
		# internal_25 = internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8792964882655
		j endif_8792964882655
		
		endif_8792964882655:
		
		# internal_20 = internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8792964882601
		j endif_8792964882601
		
		endif_8792964882601:
		
		# internal_15 = internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8792964882547
		j endif_8792964882547
		
		endif_8792964882547:
		
		# internal_10 = internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8792964882493
		j endif_8792964882493
		
		endif_8792964882493:
		
		# internal_5 = internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8792964881917
		j endif_8792964881917
		
		endif_8792964881917:
		
		# internal_0 = internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8792964881869
		j endif_8792964881869
		
		endif_8792964881869:
		
		# Loading return value in $v1
		lw $v1, 212($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 216
		
		jr $ra
		
	function_i2c_at_A2I:
		# Function parameters
		#   $ra = 224($sp)
		#   self = 220($sp)
		#   i = 216($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -216
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_2
		lw $t0, 216($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# If internal_1 then goto then_8792964882448
		lw $t0, 208($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882448
		
		# Jumping to else_8792964882448
		j else_8792964882448
		
		then_8792964882448:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 48
		sb $t0, 8($v0) # internal_4[0] = '0'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 196($sp) # internal_4 = "0"
		
		# internal_0 = internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8792964882448
		j endif_8792964882448
		
		else_8792964882448:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_7
		lw $t0, 196($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_8 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_6 = internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# If internal_6 then goto then_8792964882679
		lw $t0, 188($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882679
		
		# Jumping to else_8792964882679
		j else_8792964882679
		
		then_8792964882679:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 49
		sb $t0, 8($v0) # internal_9[0] = '1'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 176($sp) # internal_9 = "1"
		
		# internal_5 = internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8792964882679
		j endif_8792964882679
		
		else_8792964882679:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_11 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_12 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_12
		lw $t0, 176($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_11 = internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# If internal_11 then goto then_8792964883104
		lw $t0, 168($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883104
		
		# Jumping to else_8792964883104
		j else_8792964883104
		
		then_8792964883104:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 50
		sb $t0, 8($v0) # internal_14[0] = '2'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 156($sp) # internal_14 = "2"
		
		# internal_10 = internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8792964883104
		j endif_8792964883104
		
		else_8792964883104:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_16 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_17 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_17
		lw $t0, 156($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_18 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_16 = internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# If internal_16 then goto then_8792964883080
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883080
		
		# Jumping to else_8792964883080
		j else_8792964883080
		
		then_8792964883080:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 51
		sb $t0, 8($v0) # internal_19[0] = '3'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 136($sp) # internal_19 = "3"
		
		# internal_15 = internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8792964883080
		j endif_8792964883080
		
		else_8792964883080:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_21 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_22 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_22
		lw $t0, 136($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_23 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_21 = internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# If internal_21 then goto then_8792964883197
		lw $t0, 128($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883197
		
		# Jumping to else_8792964883197
		j else_8792964883197
		
		then_8792964883197:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 52
		sb $t0, 8($v0) # internal_24[0] = '4'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 116($sp) # internal_24 = "4"
		
		# internal_20 = internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8792964883197
		j endif_8792964883197
		
		else_8792964883197:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_26 = address of allocated object Int
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_27 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_27
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_27
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 112($sp) # internal_28 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_26 = internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# If internal_26 then goto then_8792964883511
		lw $t0, 108($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883511
		
		# Jumping to else_8792964883511
		j else_8792964883511
		
		then_8792964883511:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 53
		sb $t0, 8($v0) # internal_29[0] = '5'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 96($sp) # internal_29 = "5"
		
		# internal_25 = internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8792964883511
		j endif_8792964883511
		
		else_8792964883511:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_31 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_32 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_32
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_33 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_31 = internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# If internal_31 then goto then_8792964971460
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964971460
		
		# Jumping to else_8792964971460
		j else_8792964971460
		
		then_8792964971460:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 54
		sb $t0, 8($v0) # internal_34[0] = '6'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 76($sp) # internal_34 = "6"
		
		# internal_30 = internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964971460
		j endif_8792964971460
		
		else_8792964971460:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_36 = address of allocated object Int
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_37 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_37
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_37
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_38 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_36 = internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# If internal_36 then goto then_8792964883613
		lw $t0, 68($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883613
		
		# Jumping to else_8792964883613
		j else_8792964883613
		
		then_8792964883613:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 55
		sb $t0, 8($v0) # internal_39[0] = '7'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 56($sp) # internal_39 = "7"
		
		# internal_35 = internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8792964883613
		j endif_8792964883613
		
		else_8792964883613:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_41 = address of allocated object Int
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_42 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_42
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_42
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_43 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_41 = internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# If internal_41 then goto then_8792964883667
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883667
		
		# Jumping to else_8792964883667
		j else_8792964883667
		
		then_8792964883667:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 56
		sb $t0, 8($v0) # internal_44[0] = '8'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 36($sp) # internal_44 = "8"
		
		# internal_40 = internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8792964883667
		j endif_8792964883667
		
		else_8792964883667:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_46 = address of allocated object Int
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_47 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_47
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_48 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_46 = internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# If internal_46 then goto then_8792964883673
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883673
		
		# Jumping to else_8792964883673
		j else_8792964883673
		
		then_8792964883673:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 57
		sb $t0, 8($v0) # internal_49[0] = '9'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 16($sp) # internal_49 = "9"
		
		# internal_45 = internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8792964883673
		j endif_8792964883673
		
		else_8792964883673:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_51 = address of allocated object Int
		
		# Get method abort of A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_52
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_50 = result of internal_52
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_53 = ""
		
		# internal_45 = internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		# Jumping to endif_8792964883673
		j endif_8792964883673
		
		endif_8792964883673:
		
		# internal_40 = internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8792964883667
		j endif_8792964883667
		
		endif_8792964883667:
		
		# internal_35 = internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8792964883613
		j endif_8792964883613
		
		endif_8792964883613:
		
		# internal_30 = internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964971460
		j endif_8792964971460
		
		endif_8792964971460:
		
		# internal_25 = internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# Jumping to endif_8792964883511
		j endif_8792964883511
		
		endif_8792964883511:
		
		# internal_20 = internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		# Jumping to endif_8792964883197
		j endif_8792964883197
		
		endif_8792964883197:
		
		# internal_15 = internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# Jumping to endif_8792964883080
		j endif_8792964883080
		
		endif_8792964883080:
		
		# internal_10 = internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		# Jumping to endif_8792964883104
		j endif_8792964883104
		
		endif_8792964883104:
		
		# internal_5 = internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# Jumping to endif_8792964882679
		j endif_8792964882679
		
		endif_8792964882679:
		
		# internal_0 = internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		# Jumping to endif_8792964882448
		j endif_8792964882448
		
		endif_8792964882448:
		
		# Loading return value in $v1
		lw $v1, 212($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 216
		
		jr $ra
		
	function_a2i_at_A2I:
		# Function parameters
		#   $ra = 232($sp)
		#   self = 228($sp)
		#   s = 224($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -224
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_3 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_4
		lw $t0, 212($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 220($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_5 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 224($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_5
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_6 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_6
		lw $t0, 196($sp)
		sw $t0, 216($sp)
		
		# If internal_1 then goto then_8792964882984
		lw $t0, 216($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964882984
		
		# Jumping to else_8792964882984
		j else_8792964882984
		
		then_8792964882984:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_7 = address of allocated object Int
		
		# internal_0 = internal_7
		lw $t0, 192($sp)
		sw $t0, 220($sp)
		
		# Jumping to endif_8792964882984
		j endif_8792964882984
		
		else_8792964882984:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_9 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 180($sp) # internal_10 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_11 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_13 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 168($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 164($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_10
		lw $t0, 196($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 192($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function internal_14
		lw $t0, 180($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 188($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_15[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 160($sp) # internal_15 = "-"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 184($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_15
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 168($sp) # internal_16 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_9 = internal_16
		lw $t0, 156($sp)
		sw $t0, 184($sp)
		
		# If internal_9 then goto then_8792964883472
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883472
		
		# Jumping to else_8792964883472
		j else_8792964883472
		
		then_8792964883472:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_17 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_19 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_20
		lw $t0, 148($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 156($sp) # internal_18 = result of internal_20
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_21 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument internal_21
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_22 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_24 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 124($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 120($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_17
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing internal_17
		
		# Argument internal_22
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function internal_25
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 144($sp) # internal_23 = result of internal_25
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_27 = address of allocated object Int
		
		# Get method a2i_aux of A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_23
		lw $t0, 140($sp)
		sw $t0, 0($sp) # Storing internal_23
		
		# Calling function internal_28
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp) # internal_26 = result of internal_28
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_31 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_26
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing internal_26
		
		# Argument internal_30
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing internal_30
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 108($sp) # internal_31 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_29
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 108($sp) # internal_31 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_8 = internal_31
		lw $t0, 96($sp)
		sw $t0, 188($sp)
		
		# Jumping to endif_8792964883472
		j endif_8792964883472
		
		else_8792964883472:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_33 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_34 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_35 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_37 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_34
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing internal_34
		
		# Argument internal_35
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_35
		
		# Calling function internal_38
		lw $t0, 84($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 92($sp) # internal_36 = result of internal_38
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 43
		sb $t0, 8($v0) # internal_39[0] = '+'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_39 = "+"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_36
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing internal_36
		
		# Argument internal_39
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_39
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_40 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_33 = internal_40
		lw $t0, 60($sp)
		sw $t0, 88($sp)
		
		# If internal_33 then goto then_8792964883514
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964883514
		
		# Jumping to else_8792964883514
		j else_8792964883514
		
		then_8792964883514:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_41 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_43 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 232($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_44
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_42 = result of internal_44
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_45 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_42
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing internal_42
		
		# Argument internal_45
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_45
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_46 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_48 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 240($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument internal_41
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing internal_41
		
		# Argument internal_46
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_46
		
		# Calling function internal_49
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 48($sp) # internal_47 = result of internal_49
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_51 = address of allocated object Int
		
		# Get method a2i_aux of A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_47
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_47
		
		# Calling function internal_52
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_50 = result of internal_52
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_32 = internal_50
		lw $t0, 20($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964883514
		j endif_8792964883514
		
		else_8792964883514:
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_54 = address of allocated object Int
		
		# Get method a2i_aux of A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument s
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_55
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_53 = result of internal_55
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_32 = internal_53
		lw $t0, 8($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964883514
		j endif_8792964883514
		
		endif_8792964883514:
		
		# internal_8 = internal_32
		lw $t0, 92($sp)
		sw $t0, 188($sp)
		
		# Jumping to endif_8792964883472
		j endif_8792964883472
		
		endif_8792964883472:
		
		# internal_0 = internal_8
		lw $t0, 188($sp)
		sw $t0, 220($sp)
		
		# Jumping to endif_8792964882984
		j endif_8792964882984
		
		endif_8792964882984:
		
		# Loading return value in $v1
		lw $v1, 220($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 224
		
		jr $ra
		
	function_a2i_aux_at_A2I:
		# Function parameters
		#   $ra = 96($sp)
		#   self = 92($sp)
		#   s = 88($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -88
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument int
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing int
		
		# Argument internal_1
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp) # int = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_4 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 68($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 64($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument s
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_5
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 80($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument j
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing j
		
		# Argument internal_3
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 88($sp) # j = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_7
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating NUll to internal_8
		sw $zero, 52($sp) # internal_8 = 0
		
		while_start_8792964883993:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument j
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing j
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_9 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_9 then goto while_body_8792964883993
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8792964883993
		
		# Jumping to while_end_8792964883993
		j while_end_8792964883993
		
		while_body_8792964883993:
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_10 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument int
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing int
		
		# Argument internal_10
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_10
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_11 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_12 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_14 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument s
		lw $t0, 104($sp)
		sw $t0, 8($sp) # Storing s
		
		# Argument i
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_12
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function internal_15
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 48($sp) # internal_13 = result of internal_15
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_17 = address of allocated object Int
		
		# Get method c2i of A2I
		lw $t0, 92($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 104($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function internal_18
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_16 = result of internal_18
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_11
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_11
		
		# Argument internal_16
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_19 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument int
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing int
		
		# Argument internal_19
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp) # int = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_20 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_20
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_21 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 72($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_21
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to while_start_8792964883993
		j while_start_8792964883993
		
		while_end_8792964883993:
		
		# Loading return value in $v1
		lw $v1, 84($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 88
		
		jr $ra
		
	function_i2a_at_A2I:
		# Function parameters
		#   $ra = 104($sp)
		#   self = 100($sp)
		#   i = 96($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -96
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_2
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# If internal_1 then goto then_8792964885014
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964885014
		
		# Jumping to else_8792964885014
		j else_8792964885014
		
		then_8792964885014:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 48
		sb $t0, 8($v0) # internal_4[0] = '0'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 76($sp) # internal_4 = "0"
		
		# internal_0 = internal_4
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964885014
		j endif_8792964885014
		
		else_8792964885014:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing i
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_8 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_6 = internal_8
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# If internal_6 then goto then_8792964885122
		lw $t0, 68($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964885122
		
		# Jumping to else_8792964885122
		j else_8792964885122
		
		then_8792964885122:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_10 = address of allocated object Int
		
		# Get method i2a_aux of A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing i
		
		# Calling function internal_11
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_5 = internal_9
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8792964885122
		j endif_8792964885122
		
		else_8792964885122:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_12[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_12 = "-"
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_13 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_14 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_15 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_16 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_13
		
		# Argument internal_15
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_16 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_16
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_16
		
		# Argument internal_14
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_16 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_16
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_17 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_19 = address of allocated object Int
		
		# Get method i2a_aux of A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_17
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function internal_20
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_18 = result of internal_20
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_22 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_18
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_21 = result of internal_23
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_5 = internal_21
		lw $t0, 8($sp)
		sw $t0, 72($sp)
		
		# Jumping to endif_8792964885122
		j endif_8792964885122
		
		endif_8792964885122:
		
		# internal_0 = internal_5
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8792964885014
		j endif_8792964885014
		
		endif_8792964885014:
		
		# Loading return value in $v1
		lw $v1, 92($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 96
		
		jr $ra
		
	function_i2a_aux_at_A2I:
		# Function parameters
		#   $ra = 88($sp)
		#   self = 84($sp)
		#   i = 80($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -80
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_2
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# If internal_1 then goto then_8792964885158
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964885158
		
		# Jumping to else_8792964885158
		j else_8792964885158
		
		then_8792964885158:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 60($sp) # internal_4 = ""
		
		# internal_0 = internal_4
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8792964885158
		j endif_8792964885158
		
		else_8792964885158:
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_6 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_6
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_7 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument next
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing next
		
		# Argument internal_7
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # next = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_9 = address of allocated object Int
		
		# Get method i2a_aux of A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument next
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing next
		
		# Calling function internal_10
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_11 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument next
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing next
		
		# Argument internal_11
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_12 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_12
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_13 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_15 = address of allocated object Int
		
		# Get method i2c of A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function internal_16
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_14 = result of internal_16
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_18 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_8
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_8
		
		# Argument internal_14
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function internal_19
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_17 = result of internal_19
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_17
		lw $t0, 8($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8792964885158
		j endif_8792964885158
		
		endif_8792964885158:
		
		# Loading return value in $v1
		lw $v1, 76($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 80
		
		jr $ra
		
	function___init___at_Main:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_0 = ""
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_0
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Allocating NUll to internal_1
		sw $zero, 8($sp) # internal_1 = 0
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_1
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Allocating NUll to internal_2
		sw $zero, 4($sp) # internal_2 = 0
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a_var
		# Argument internal_2
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument flag
		# Argument internal_3
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_menu_at_Main:
		# Function parameters
		#   $ra = 400($sp)
		#   self = 396($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -396
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 30
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_0[0] = '\n'
		
		addi $t0, $zero, 9
		sb $t0, 9($v0) # internal_0[1] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 10($v0) # internal_0[2] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_0[3] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_0[4] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 13($v0) # internal_0[5] = 'a'
		
		addi $t0, $zero, 100
		sb $t0, 14($v0) # internal_0[6] = 'd'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_0[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_0[8] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 17($v0) # internal_0[9] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_0[10] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 19($v0) # internal_0[11] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 20($v0) # internal_0[12] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 21($v0) # internal_0[13] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 22($v0) # internal_0[14] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 23($v0) # internal_0[15] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 24($v0) # internal_0[16] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_0[17] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 26($v0) # internal_0[18] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 27($v0) # internal_0[19] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_0[20] = ' '
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 392($sp) # internal_0 = "\n\tTo add a number to "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 384($sp) # internal_2 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 384($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 380($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_0
		lw $t0, 404($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 392($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 400($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_5 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 372($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 368($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_6
		lw $t0, 380($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 388($sp) # internal_4 = result of internal_6
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_7[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_7[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_7[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_7[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_7[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_7[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_7[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_7[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_7[8] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 17($v0) # internal_7[9] = 'a'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_7[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_7[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 364($sp) # internal_7 = "...enter a:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_9 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 356($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 352($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_7
		lw $t0, 376($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function internal_10
		lw $t0, 364($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 372($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_11[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_11[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_11[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_11[3] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_11[4] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_11[5] = 'e'
		
		addi $t0, $zero, 103
		sb $t0, 14($v0) # internal_11[6] = 'g'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_11[7] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 16($v0) # internal_11[8] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_11[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_11[10] = ' '
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 348($sp) # internal_11 = "\tTo negate "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 340($sp) # internal_13 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 340($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 336($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_11
		lw $t0, 360($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function internal_14
		lw $t0, 348($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 356($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_16 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 328($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 324($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_17
		lw $t0, 336($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 344($sp) # internal_15 = result of internal_17
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_18[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_18[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_18[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_18[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_18[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_18[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_18[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_18[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_18[8] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 17($v0) # internal_18[9] = 'b'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_18[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_18[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 320($sp) # internal_18 = "...enter b:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_20 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 312($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 308($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_18
		lw $t0, 332($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function internal_21
		lw $t0, 320($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 328($sp) # internal_19 = result of internal_21
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 41 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 41
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_22[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_22[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_22[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_22[3] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 12($v0) # internal_22[4] = 'f'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_22[5] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_22[6] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_22[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_22[8] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_22[9] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_22[10] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_22[11] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_22[12] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 21($v0) # internal_22[13] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 22($v0) # internal_22[14] = 'i'
		
		addi $t0, $zero, 102
		sb $t0, 23($v0) # internal_22[15] = 'f'
		
		addi $t0, $zero, 102
		sb $t0, 24($v0) # internal_22[16] = 'f'
		
		addi $t0, $zero, 101
		sb $t0, 25($v0) # internal_22[17] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 26($v0) # internal_22[18] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_22[19] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 28($v0) # internal_22[20] = 'n'
		
		addi $t0, $zero, 99
		sb $t0, 29($v0) # internal_22[21] = 'c'
		
		addi $t0, $zero, 101
		sb $t0, 30($v0) # internal_22[22] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_22[23] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 32($v0) # internal_22[24] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 33($v0) # internal_22[25] = 'e'
		
		addi $t0, $zero, 116
		sb $t0, 34($v0) # internal_22[26] = 't'
		
		addi $t0, $zero, 119
		sb $t0, 35($v0) # internal_22[27] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 36($v0) # internal_22[28] = 'e'
		
		addi $t0, $zero, 101
		sb $t0, 37($v0) # internal_22[29] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 38($v0) # internal_22[30] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_22[31] = ' '
		
		sb $zero, 40($v0) # Null-terminator at the end of the string
		
		sw $v0, 304($sp) # internal_22 = "\tTo find the difference between "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_24 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 296($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 292($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_22
		lw $t0, 316($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function internal_25
		lw $t0, 304($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 312($sp) # internal_23 = result of internal_25
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 284($sp) # internal_27 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 284($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 280($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_28
		lw $t0, 292($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 300($sp) # internal_26 = result of internal_28
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 39 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 39
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 97
		sb $t0, 8($v0) # internal_29[0] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 9($v0) # internal_29[1] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 10($v0) # internal_29[2] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_29[3] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 12($v0) # internal_29[4] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 13($v0) # internal_29[5] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 14($v0) # internal_29[6] = 'o'
		
		addi $t0, $zero, 116
		sb $t0, 15($v0) # internal_29[7] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 16($v0) # internal_29[8] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_29[9] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 18($v0) # internal_29[10] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_29[11] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 20($v0) # internal_29[12] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 21($v0) # internal_29[13] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 22($v0) # internal_29[14] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 23($v0) # internal_29[15] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 24($v0) # internal_29[16] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 25($v0) # internal_29[17] = 'r'
		
		addi $t0, $zero, 46
		sb $t0, 26($v0) # internal_29[18] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 27($v0) # internal_29[19] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 28($v0) # internal_29[20] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 29($v0) # internal_29[21] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 30($v0) # internal_29[22] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 31($v0) # internal_29[23] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_29[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_29[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_29[26] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 35($v0) # internal_29[27] = 'c'
		
		addi $t0, $zero, 58
		sb $t0, 36($v0) # internal_29[28] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 37($v0) # internal_29[29] = '\n'
		
		sb $zero, 38($v0) # Null-terminator at the end of the string
		
		sw $v0, 276($sp) # internal_29 = "and another number...enter c:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 268($sp) # internal_31 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 268($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 264($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_29
		lw $t0, 288($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function internal_32
		lw $t0, 276($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 284($sp) # internal_30 = result of internal_32
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 35 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 35
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_33[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_33[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_33[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_33[3] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 12($v0) # internal_33[4] = 'f'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_33[5] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_33[6] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_33[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_33[8] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_33[9] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_33[10] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_33[11] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_33[12] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 21($v0) # internal_33[13] = 'f'
		
		addi $t0, $zero, 97
		sb $t0, 22($v0) # internal_33[14] = 'a'
		
		addi $t0, $zero, 99
		sb $t0, 23($v0) # internal_33[15] = 'c'
		
		addi $t0, $zero, 116
		sb $t0, 24($v0) # internal_33[16] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 25($v0) # internal_33[17] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 26($v0) # internal_33[18] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_33[19] = 'i'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_33[20] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 29($v0) # internal_33[21] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_33[22] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_33[23] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 32($v0) # internal_33[24] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_33[25] = ' '
		
		sb $zero, 34($v0) # Null-terminator at the end of the string
		
		sw $v0, 260($sp) # internal_33 = "\tTo find the factorial of "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 252($sp) # internal_35 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 252($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 248($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_33
		lw $t0, 272($sp)
		sw $t0, 0($sp) # Storing internal_33
		
		# Calling function internal_36
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 268($sp) # internal_34 = result of internal_36
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 240($sp) # internal_38 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 240($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 236($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_39
		lw $t0, 248($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 256($sp) # internal_37 = result of internal_39
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_40[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_40[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_40[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_40[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_40[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_40[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_40[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_40[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_40[8] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 17($v0) # internal_40[9] = 'd'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_40[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_40[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 232($sp) # internal_40 = "...enter d:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 224($sp) # internal_42 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 224($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 220($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_40
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_40
		
		# Calling function internal_43
		lw $t0, 232($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_41 = result of internal_43
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_44[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_44[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_44[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_44[3] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_44[4] = 's'
		
		addi $t0, $zero, 113
		sb $t0, 13($v0) # internal_44[5] = 'q'
		
		addi $t0, $zero, 117
		sb $t0, 14($v0) # internal_44[6] = 'u'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_44[7] = 'a'
		
		addi $t0, $zero, 114
		sb $t0, 16($v0) # internal_44[8] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_44[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_44[10] = ' '
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 216($sp) # internal_44 = "\tTo square "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_46 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_44
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_44
		
		# Calling function internal_47
		lw $t0, 216($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 224($sp) # internal_45 = result of internal_47
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_49 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 196($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 192($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_50
		lw $t0, 204($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_48 = result of internal_50
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_51[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_51[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_51[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_51[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_51[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_51[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_51[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_51[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_51[8] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_51[9] = 'e'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_51[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_51[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 188($sp) # internal_51 = "...enter e:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 180($sp) # internal_53 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 180($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 176($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_51
		lw $t0, 200($sp)
		sw $t0, 0($sp) # Storing internal_51
		
		# Calling function internal_54
		lw $t0, 188($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_52 = result of internal_54
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 18 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 18
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_55[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_55[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_55[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_55[3] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 12($v0) # internal_55[4] = 'c'
		
		addi $t0, $zero, 117
		sb $t0, 13($v0) # internal_55[5] = 'u'
		
		addi $t0, $zero, 98
		sb $t0, 14($v0) # internal_55[6] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_55[7] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_55[8] = ' '
		
		sb $zero, 17($v0) # Null-terminator at the end of the string
		
		sw $v0, 172($sp) # internal_55 = "\tTo cube "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_57 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 164($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 160($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_55
		lw $t0, 184($sp)
		sw $t0, 0($sp) # Storing internal_55
		
		# Calling function internal_58
		lw $t0, 172($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 180($sp) # internal_56 = result of internal_58
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_60 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 152($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 148($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_61
		lw $t0, 160($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 168($sp) # internal_59 = result of internal_61
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 46
		sb $t0, 8($v0) # internal_62[0] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 9($v0) # internal_62[1] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 10($v0) # internal_62[2] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_62[3] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 12($v0) # internal_62[4] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_62[5] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_62[6] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_62[7] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_62[8] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 17($v0) # internal_62[9] = 'f'
		
		addi $t0, $zero, 58
		sb $t0, 18($v0) # internal_62[10] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_62[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 144($sp) # internal_62 = "...enter f:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_64 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 136($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 132($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_62
		lw $t0, 156($sp)
		sw $t0, 0($sp) # Storing internal_62
		
		# Calling function internal_65
		lw $t0, 144($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_63 = result of internal_65
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_66[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_66[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_66[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_66[3] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 12($v0) # internal_66[4] = 'f'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_66[5] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_66[6] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_66[7] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_66[8] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 17($v0) # internal_66[9] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 18($v0) # internal_66[10] = 'u'
		
		addi $t0, $zero, 116
		sb $t0, 19($v0) # internal_66[11] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_66[12] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 21($v0) # internal_66[13] = 'i'
		
		addi $t0, $zero, 102
		sb $t0, 22($v0) # internal_66[14] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_66[15] = ' '
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 128($sp) # internal_66 = "\tTo find out if "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_68 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 120($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 116($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_66
		lw $t0, 140($sp)
		sw $t0, 0($sp) # Storing internal_66
		
		# Calling function internal_69
		lw $t0, 128($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 136($sp) # internal_67 = result of internal_69
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_71 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 108($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 104($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_72
		lw $t0, 116($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 124($sp) # internal_70 = result of internal_72
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 39 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 39
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_73[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_73[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_73[2] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_73[3] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_73[4] = ' '
		
		addi $t0, $zero, 109
		sb $t0, 13($v0) # internal_73[5] = 'm'
		
		addi $t0, $zero, 117
		sb $t0, 14($v0) # internal_73[6] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_73[7] = 'l'
		
		addi $t0, $zero, 116
		sb $t0, 16($v0) # internal_73[8] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 17($v0) # internal_73[9] = 'i'
		
		addi $t0, $zero, 112
		sb $t0, 18($v0) # internal_73[10] = 'p'
		
		addi $t0, $zero, 108
		sb $t0, 19($v0) # internal_73[11] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 20($v0) # internal_73[12] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_73[13] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 22($v0) # internal_73[14] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 23($v0) # internal_73[15] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_73[16] = ' '
		
		addi $t0, $zero, 51
		sb $t0, 25($v0) # internal_73[17] = '3'
		
		addi $t0, $zero, 46
		sb $t0, 26($v0) # internal_73[18] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 27($v0) # internal_73[19] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 28($v0) # internal_73[20] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 29($v0) # internal_73[21] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 30($v0) # internal_73[22] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 31($v0) # internal_73[23] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_73[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_73[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_73[26] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 35($v0) # internal_73[27] = 'g'
		
		addi $t0, $zero, 58
		sb $t0, 36($v0) # internal_73[28] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 37($v0) # internal_73[29] = '\n'
		
		sb $zero, 38($v0) # Null-terminator at the end of the string
		
		sw $v0, 100($sp) # internal_73 = "is a multiple of 3...enter g:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_75 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 92($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 88($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_73
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing internal_73
		
		# Calling function internal_76
		lw $t0, 100($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 108($sp) # internal_74 = result of internal_76
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_77[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_77[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_77[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_77[3] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_77[4] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 13($v0) # internal_77[5] = 'i'
		
		addi $t0, $zero, 118
		sb $t0, 14($v0) # internal_77[6] = 'v'
		
		addi $t0, $zero, 105
		sb $t0, 15($v0) # internal_77[7] = 'i'
		
		addi $t0, $zero, 100
		sb $t0, 16($v0) # internal_77[8] = 'd'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_77[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_77[10] = ' '
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # internal_77 = "\tTo divide "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_79 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 76($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 72($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_77
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_77
		
		# Calling function internal_80
		lw $t0, 84($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_78 = result of internal_80
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_82 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_83
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_81 = result of internal_83
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 98
		sb $t0, 8($v0) # internal_84[0] = 'b'
		
		addi $t0, $zero, 121
		sb $t0, 9($v0) # internal_84[1] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_84[2] = ' '
		
		addi $t0, $zero, 56
		sb $t0, 11($v0) # internal_84[3] = '8'
		
		addi $t0, $zero, 46
		sb $t0, 12($v0) # internal_84[4] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 13($v0) # internal_84[5] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 14($v0) # internal_84[6] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_84[7] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 16($v0) # internal_84[8] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_84[9] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_84[10] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 19($v0) # internal_84[11] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_84[12] = ' '
		
		addi $t0, $zero, 104
		sb $t0, 21($v0) # internal_84[13] = 'h'
		
		addi $t0, $zero, 58
		sb $t0, 22($v0) # internal_84[14] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 23($v0) # internal_84[15] = '\n'
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 56($sp) # internal_84 = "by 8...enter h:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_86 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_84
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function internal_87
		lw $t0, 56($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_85 = result of internal_87
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 41 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 41
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_88[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_88[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_88[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_88[3] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 12($v0) # internal_88[4] = 'g'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_88[5] = 'e'
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_88[6] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_88[7] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 16($v0) # internal_88[8] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_88[9] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 18($v0) # internal_88[10] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_88[11] = 'e'
		
		addi $t0, $zero, 119
		sb $t0, 20($v0) # internal_88[12] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_88[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_88[14] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 23($v0) # internal_88[15] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 24($v0) # internal_88[16] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 25($v0) # internal_88[17] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 26($v0) # internal_88[18] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 27($v0) # internal_88[19] = 'r'
		
		addi $t0, $zero, 46
		sb $t0, 28($v0) # internal_88[20] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 29($v0) # internal_88[21] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 30($v0) # internal_88[22] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 31($v0) # internal_88[23] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 32($v0) # internal_88[24] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 33($v0) # internal_88[25] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 34($v0) # internal_88[26] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 35($v0) # internal_88[27] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 36($v0) # internal_88[28] = ' '
		
		addi $t0, $zero, 106
		sb $t0, 37($v0) # internal_88[29] = 'j'
		
		addi $t0, $zero, 58
		sb $t0, 38($v0) # internal_88[30] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 39($v0) # internal_88[31] = '\n'
		
		sb $zero, 40($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # internal_88 = "\tTo get a new number...enter j:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_90 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_88
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_88
		
		# Calling function internal_91
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_89 = result of internal_91
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 30
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_92[0] = '\t'
		
		addi $t0, $zero, 84
		sb $t0, 9($v0) # internal_92[1] = 'T'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_92[2] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_92[3] = ' '
		
		addi $t0, $zero, 113
		sb $t0, 12($v0) # internal_92[4] = 'q'
		
		addi $t0, $zero, 117
		sb $t0, 13($v0) # internal_92[5] = 'u'
		
		addi $t0, $zero, 105
		sb $t0, 14($v0) # internal_92[6] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 15($v0) # internal_92[7] = 't'
		
		addi $t0, $zero, 46
		sb $t0, 16($v0) # internal_92[8] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 17($v0) # internal_92[9] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 18($v0) # internal_92[10] = '.'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_92[11] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 20($v0) # internal_92[12] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 21($v0) # internal_92[13] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_92[14] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_92[15] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_92[16] = ' '
		
		addi $t0, $zero, 113
		sb $t0, 25($v0) # internal_92[17] = 'q'
		
		addi $t0, $zero, 58
		sb $t0, 26($v0) # internal_92[18] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_92[19] = '\n'
		
		addi $t0, $zero, 10
		sb $t0, 28($v0) # internal_92[20] = '\n'
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_92 = "\tTo quit...enter q:\n\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_94 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 408($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_92
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_92
		
		# Calling function internal_95
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_93 = result of internal_95
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_97 = address of allocated object Int
		
		# Get method in_string of Main
		lw $t0, 396($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 404($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_98
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_96 = result of internal_98
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 396
		
		jr $ra
		
	function_prompt_at_Main:
		# Function parameters
		#   $ra = 48($sp)
		#   self = 44($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -44
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_0[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # internal_0 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_2 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_0
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 35 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 35
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 80
		sb $t0, 8($v0) # internal_4[0] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_4[1] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_4[2] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_4[3] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_4[4] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_4[5] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_4[6] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_4[7] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 16($v0) # internal_4[8] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_4[9] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_4[10] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 19($v0) # internal_4[11] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_4[12] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 21($v0) # internal_4[13] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_4[14] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 23($v0) # internal_4[15] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 24($v0) # internal_4[16] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 25($v0) # internal_4[17] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 26($v0) # internal_4[18] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_4[19] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 28($v0) # internal_4[20] = 'r'
		
		addi $t0, $zero, 46
		sb $t0, 29($v0) # internal_4[21] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 30($v0) # internal_4[22] = '.'
		
		addi $t0, $zero, 46
		sb $t0, 31($v0) # internal_4[23] = '.'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_4[24] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_4[25] = ' '
		
		sb $zero, 34($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_4 = "Please enter a number...  "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_6 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_4
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function internal_7
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_9 = address of allocated object Int
		
		# Get method in_string of Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_10
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 44
		
		jr $ra
		
	function_get_int_at_Main:
		# Function parameters
		#   $ra = 40($sp)
		#   self = 36($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -36
		
		# Allocating A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 28($sp) # internal_1 = address of allocated object A2I
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_1 = result of function___init___at_A2I
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument internal_1
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 44($sp) # z = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_4 = address of allocated object Int
		
		# Get method prompt of Main
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_5
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument s
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing s
		
		# Argument internal_3
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp) # s = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_7 = address of allocated object Int
		
		# Get method a2i of A2I
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument s
		lw $t0, 36($sp)
		sw $t0, 0($sp) # Storing s
		
		# Calling function internal_8
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 36
		
		jr $ra
		
	function_is_even_at_Main:
		# Function parameters
		#   $ra = 112($sp)
		#   self = 108($sp)
		#   num = 104($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -104
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument num
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_2 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_3
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 96($sp) # internal_4 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_2 = internal_4
		lw $t0, 84($sp)
		sw $t0, 92($sp)
		
		# If internal_2 then goto then_8792964886456
		lw $t0, 92($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964886456
		
		# Jumping to else_8792964886456
		j else_8792964886456
		
		then_8792964886456:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_5 = address of allocated object Int
		
		# Allocating Int 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_6 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_7 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_6
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_7 = result of function_xor
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument internal_5
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_7 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_9 = address of allocated object Int
		
		# Get method is_even of Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_7
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function internal_10
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_8
		lw $t0, 68($sp)
		sw $t0, 96($sp)
		
		# Jumping to endif_8792964886456
		j endif_8792964886456
		
		else_8792964886456:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_12 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_13 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_13
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing internal_13
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_14 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_12 = internal_14
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# If internal_12 then goto then_8792964886830
		lw $t0, 52($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964886830
		
		# Jumping to else_8792964886830
		j else_8792964886830
		
		then_8792964886830:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_15 = address of allocated object Int
		
		# internal_11 = internal_15
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8792964886830
		j endif_8792964886830
		
		else_8792964886830:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_17 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_18 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_17 = internal_19
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# If internal_17 then goto then_8792964886878
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964886878
		
		# Jumping to else_8792964886878
		j else_8792964886878
		
		then_8792964886878:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_20 = address of allocated object Int
		
		# internal_16 = internal_20
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8792964886878
		j endif_8792964886878
		
		else_8792964886878:
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_21 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_21
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_22 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_24 = address of allocated object Int
		
		# Get method is_even of Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_22
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function internal_25
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_23 = result of internal_25
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_16 = internal_23
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8792964886878
		j endif_8792964886878
		
		endif_8792964886878:
		
		# internal_11 = internal_16
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		# Jumping to endif_8792964886830
		j endif_8792964886830
		
		endif_8792964886830:
		
		# internal_1 = internal_11
		lw $t0, 56($sp)
		sw $t0, 96($sp)
		
		# Jumping to endif_8792964886456
		j endif_8792964886456
		
		endif_8792964886456:
		
		# Loading return value in $v1
		lw $v1, 96($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 104
		
		jr $ra
		
	function_class_type_at_Main:
		# Function parameters
		#   $ra = 340($sp)
		#   self = 336($sp)
		#   var = 332($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -332
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 328($sp) # internal_0 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 324($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 320($sp) # internal_2 = address of allocated object Int
		
		# Allocating NUll to internal_3
		sw $zero, 316($sp) # internal_3 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_4 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 308($sp) # internal_5 = address of allocated object Int
		
		# internal_6 = typeof var that is the first word of the object
		lw $t0, 332($sp)
		lw $t0, 0($t0)
		sw $t0, 304($sp)
		
		# internal_7 = internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		while_start_8792964886438:
		
		# internal_5 = EqualAddress(internal_7, internal_3)
		lw $t0, 300($sp)
		lw $t1, 316($sp)
		seq $t2, $t0, $t1
		lw $t0, 308($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto while_end_8792964886438
		lw $t0, 308($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8792964886438
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 324($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = ancestor of internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		# Jumping to while_start_8792964886438
		j while_start_8792964886438
		
		while_end_8792964886438:
		
		# internal_7 = internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		# initialize Array [internal_4]
		lw $t0, 312($sp) # $t0 = internal_4
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 296($sp) # internal_8 = new Array[internal_4]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 292($sp) # internal_9 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 288($sp) # internal_10 = address of allocated object Int
		
		foreach_start_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_9
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 300($sp) # internal_10 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_10 then goto foreach_body_8792964886438
		lw $t0, 288($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8792964886438
		
		# Jumping to foreach_end_8792964886438
		j foreach_end_8792964886438
		
		foreach_body_8792964886438:
		
		# array internal_8[4 * internal_9] = internal_7
		lw $t0, 292($sp) # $t0 = internal_9
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 296($sp) # $t1 = internal_8
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 300($sp)
		sw $t0, 0($t1)
		
		# internal_7 = ancestor of internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_9
		lw $t0, 304($sp)
		sw $t0, 4($sp) # Storing internal_9
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 304($sp) # internal_9 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8792964886438
		j foreach_start_8792964886438
		
		foreach_end_8792964886438:
		
		# initialize Array [internal_2]
		lw $t0, 320($sp) # $t0 = internal_2
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 284($sp) # internal_11 = new Array[internal_2]
		
		# initialize Array [internal_2]
		lw $t0, 320($sp) # $t0 = internal_2
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 280($sp) # internal_12 = new Array[internal_2]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_14 = address of allocated object Int
		
		# internal_13 = direction of A
		la $t0, type_A
		sw $t0, 276($sp)
		
		# array internal_11[4 * internal_14] = internal_13
		lw $t0, 272($sp) # $t0 = internal_14
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 276($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_14] = internal_4
		lw $t0, 272($sp) # $t0 = internal_14
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 264($sp) # internal_16 = address of allocated object Int
		
		# internal_15 = direction of B
		la $t0, type_B
		sw $t0, 268($sp)
		
		# array internal_11[4 * internal_16] = internal_15
		lw $t0, 264($sp) # $t0 = internal_16
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 268($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_16] = internal_4
		lw $t0, 264($sp) # $t0 = internal_16
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 256($sp) # internal_18 = address of allocated object Int
		
		# internal_17 = direction of C
		la $t0, type_C
		sw $t0, 260($sp)
		
		# array internal_11[4 * internal_18] = internal_17
		lw $t0, 256($sp) # $t0 = internal_18
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 260($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_18] = internal_4
		lw $t0, 256($sp) # $t0 = internal_18
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 248($sp) # internal_20 = address of allocated object Int
		
		# internal_19 = direction of D
		la $t0, type_D
		sw $t0, 252($sp)
		
		# array internal_11[4 * internal_20] = internal_19
		lw $t0, 248($sp) # $t0 = internal_20
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 252($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_20] = internal_4
		lw $t0, 248($sp) # $t0 = internal_20
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 240($sp) # internal_22 = address of allocated object Int
		
		# internal_21 = direction of E
		la $t0, type_E
		sw $t0, 244($sp)
		
		# array internal_11[4 * internal_22] = internal_21
		lw $t0, 240($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 244($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_22] = internal_4
		lw $t0, 240($sp) # $t0 = internal_22
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_24 = address of allocated object Int
		
		# internal_23 = direction of Object
		la $t0, type_Object
		sw $t0, 236($sp)
		
		# array internal_11[4 * internal_24] = internal_23
		lw $t0, 232($sp) # $t0 = internal_24
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 236($sp)
		sw $t0, 0($t1)
		
		# array internal_12[4 * internal_24] = internal_4
		lw $t0, 232($sp) # $t0 = internal_24
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 228($sp) # internal_25 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 224($sp) # internal_26 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_28 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_29 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_31 = address of allocated object Int
		
		foreach_type_start_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_2
		lw $t0, 332($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 236($sp) # internal_26 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_26 then goto foreach_type_body_8792964886438
		lw $t0, 224($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8792964886438
		
		# Jumping to foreach_type_end_8792964886438
		j foreach_type_end_8792964886438
		
		foreach_type_body_8792964886438:
		
		# internal_27 = array internal_11[4 * internal_25]
		lw $t0, 228($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 284($sp) # $t1 = internal_11
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 220($sp) # internal_27 = array internal_11[4 * internal_25]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_28
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing internal_28
		
		# Argument internal_0
		lw $t0, 340($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 228($sp) # internal_28 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_28
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing internal_28
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 224($sp) # internal_29 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_29 then goto foreach_ancestor_body_8792964886438
		lw $t0, 212($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8792964886438
		
		# Jumping to foreach_ancestor_end_8792964886438
		j foreach_ancestor_end_8792964886438
		
		foreach_ancestor_body_8792964886438:
		
		# internal_30 = array internal_8[4 * internal_28]
		lw $t0, 216($sp) # $t0 = internal_28
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 296($sp) # $t1 = internal_8
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 208($sp) # internal_30 = array internal_8[4 * internal_28]
		
		# internal_31 = EqualAddress(internal_27, internal_30)
		lw $t0, 220($sp)
		lw $t1, 208($sp)
		seq $t2, $t0, $t1
		lw $t0, 204($sp)
		sw $t2, 8($t0)
		
		# If internal_31 then goto foreach_ancestor_end_8792964886438
		lw $t0, 204($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8792964886438
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_28
		lw $t0, 228($sp)
		sw $t0, 4($sp) # Storing internal_28
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 228($sp) # internal_28 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8792964886438
		j foreach_ancestor_start_8792964886438
		
		foreach_ancestor_end_8792964886438:
		
		# array internal_12[4 * internal_25] = internal_28
		lw $t0, 228($sp) # $t0 = internal_25
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_25
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing internal_25
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_25 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8792964886438
		j foreach_type_start_8792964886438
		
		foreach_type_end_8792964886438:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 200($sp) # internal_32 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_33 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_34 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 188($sp) # internal_35 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_36 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_35
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_35 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_2
		lw $t0, 332($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_36 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_36 then goto foreach_min_body_8792964886438
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8792964886438
		
		# Jumping to foreach_min_end_8792964886438
		j foreach_min_end_8792964886438
		
		foreach_min_body_8792964886438:
		
		# internal_34 = array internal_12[4 * internal_32]
		lw $t0, 200($sp) # $t0 = internal_32
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 280($sp) # $t1 = internal_12
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 192($sp) # internal_34 = array internal_12[4 * internal_32]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_34
		lw $t0, 204($sp)
		sw $t0, 4($sp) # Storing internal_34
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 0($sp) # Storing internal_35
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp) # internal_36 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_36 then goto update_min_8792964886438
		lw $t0, 184($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8792964886438
		
		# Jumping to update_min_end_8792964886438
		j update_min_end_8792964886438
		
		update_min_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_35
		
		# Argument internal_34
		lw $t0, 204($sp)
		sw $t0, 0($sp) # Storing internal_34
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_35 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_33
		lw $t0, 208($sp)
		sw $t0, 4($sp) # Storing internal_33
		
		# Argument internal_32
		lw $t0, 212($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 208($sp) # internal_33 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_32
		
		# Argument internal_1
		lw $t0, 336($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_32 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8792964886438
		j foreach_min_start_8792964886438
		
		foreach_min_end_8792964886438:
		
		# initialize Array [internal_2]
		lw $t0, 320($sp) # $t0 = internal_2
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 180($sp) # internal_37 = new Array[internal_2]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_38 = address of allocated object Int
		
		# array internal_37[4 * internal_38] = internal_0
		lw $t0, 176($sp) # $t0 = internal_38
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_39 = address of allocated object Int
		
		# array internal_37[4 * internal_39] = internal_0
		lw $t0, 172($sp) # $t0 = internal_39
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_40 = address of allocated object Int
		
		# array internal_37[4 * internal_40] = internal_0
		lw $t0, 168($sp) # $t0 = internal_40
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_41 = address of allocated object Int
		
		# array internal_37[4 * internal_41] = internal_0
		lw $t0, 164($sp) # $t0 = internal_41
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # internal_42 = address of allocated object Int
		
		# array internal_37[4 * internal_42] = internal_0
		lw $t0, 160($sp) # $t0 = internal_42
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_43 = address of allocated object Int
		
		# array internal_37[4 * internal_43] = internal_0
		lw $t0, 156($sp) # $t0 = internal_43
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_44 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_35
		
		# Argument internal_4
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 164($sp) # internal_44 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_44 then goto error_branch_8792964886438
		lw $t0, 152($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8792964886438
		
		# array internal_37[4 * internal_33] = internal_1
		lw $t0, 196($sp) # $t0 = internal_33
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 324($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_45 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_46 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_46]
		lw $t0, 144($sp) # $t0 = internal_46
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_46]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_A_8792964886438
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_A_8792964886438
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_47 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_47]
		lw $t0, 140($sp) # $t0 = internal_47
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_47]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_B_8792964886438
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_B_8792964886438
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_48 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_48]
		lw $t0, 136($sp) # $t0 = internal_48
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_48]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_C_8792964886438
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_C_8792964886438
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_49 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_49]
		lw $t0, 132($sp) # $t0 = internal_49
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_49]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_D_8792964886438
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_D_8792964886438
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_50 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_50]
		lw $t0, 128($sp) # $t0 = internal_50
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_50]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_E_8792964886438
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_E_8792964886438
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_51 = address of allocated object Int
		
		# internal_45 = array internal_37[4 * internal_51]
		lw $t0, 124($sp) # $t0 = internal_51
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 180($sp) # $t1 = internal_37
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 148($sp) # internal_45 = array internal_37[4 * internal_51]
		sw $t0, 8($t2)
		
		# If internal_45 then goto branch_Object_8792964886438
		lw $t0, 148($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Object_8792964886438
		
		branch_A_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 128($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 128($sp) # a = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_54[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_54[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_54[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_54[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_54[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_54[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_54[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_54[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_54[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_54[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_54[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_54[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_54[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_54[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_54[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_54[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_54[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_54[17] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 26($v0) # internal_54[18] = 'A'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_54[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 112($sp) # internal_54 = "Class type is now A\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_56 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 100($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_54
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_54
		
		# Calling function internal_57
		lw $t0, 112($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_55 = result of internal_57
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_55
		lw $t0, 120($sp)
		sw $t0, 0($sp) # Storing internal_55
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_55
		lw $t0, 108($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8792964886438
		j branch_end_8792964886438
		
		branch_B_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument b
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing b
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 108($sp) # b = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_59[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_59[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_59[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_59[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_59[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_59[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_59[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_59[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_59[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_59[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_59[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_59[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_59[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_59[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_59[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_59[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_59[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_59[17] = ' '
		
		addi $t0, $zero, 66
		sb $t0, 26($v0) # internal_59[18] = 'B'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_59[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 92($sp) # internal_59 = "Class type is now B\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_61 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_59
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_59
		
		# Calling function internal_62
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_60 = result of internal_62
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_60
		lw $t0, 100($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_60
		lw $t0, 88($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8792964886438
		j branch_end_8792964886438
		
		branch_C_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument c
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing c
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 88($sp) # c = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_64[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_64[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_64[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_64[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_64[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_64[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_64[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_64[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_64[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_64[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_64[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_64[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_64[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_64[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_64[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_64[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_64[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_64[17] = ' '
		
		addi $t0, $zero, 67
		sb $t0, 26($v0) # internal_64[18] = 'C'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_64[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 72($sp) # internal_64 = "Class type is now C\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_66 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_64
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_64
		
		# Calling function internal_67
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_65 = result of internal_67
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_65
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_65
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_65
		lw $t0, 68($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8792964886438
		j branch_end_8792964886438
		
		branch_D_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument d
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing d
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # d = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_69[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_69[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_69[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_69[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_69[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_69[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_69[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_69[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_69[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_69[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_69[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_69[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_69[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_69[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_69[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_69[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_69[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_69[17] = ' '
		
		addi $t0, $zero, 68
		sb $t0, 26($v0) # internal_69[18] = 'D'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_69[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # internal_69 = "Class type is now D\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_71 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_69
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function internal_72
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_70 = result of internal_72
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_70
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_70
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_70
		lw $t0, 48($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8792964886438
		j branch_end_8792964886438
		
		branch_E_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument e
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing e
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp) # e = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 67
		sb $t0, 8($v0) # internal_74[0] = 'C'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_74[1] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 10($v0) # internal_74[2] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 11($v0) # internal_74[3] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_74[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_74[5] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 14($v0) # internal_74[6] = 't'
		
		addi $t0, $zero, 121
		sb $t0, 15($v0) # internal_74[7] = 'y'
		
		addi $t0, $zero, 112
		sb $t0, 16($v0) # internal_74[8] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_74[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_74[10] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_74[11] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 20($v0) # internal_74[12] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_74[13] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_74[14] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_74[15] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 24($v0) # internal_74[16] = 'w'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_74[17] = ' '
		
		addi $t0, $zero, 69
		sb $t0, 26($v0) # internal_74[18] = 'E'
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_74[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 32($sp) # internal_74 = "Class type is now E\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_76 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_74
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_74
		
		# Calling function internal_77
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_75 = result of internal_77
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_75
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_75
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_75
		lw $t0, 28($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8792964886438
		j branch_end_8792964886438
		
		branch_Object_8792964886438:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument o
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing o
		
		# Argument var
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp) # o = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 79
		sb $t0, 8($v0) # internal_79[0] = 'O'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_79[1] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_79[2] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_79[3] = 'o'
		
		addi $t0, $zero, 112
		sb $t0, 12($v0) # internal_79[4] = 'p'
		
		addi $t0, $zero, 115
		sb $t0, 13($v0) # internal_79[5] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 14($v0) # internal_79[6] = '\n'
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_79 = "Oooops\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_81 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 348($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_79
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_79
		
		# Calling function internal_82
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_80 = result of internal_82
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_52
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_52
		
		# Argument internal_80
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_80
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_52 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_52 = internal_80
		lw $t0, 8($sp)
		sw $t0, 120($sp)
		
		# Jumping to branch_end_8792964886438
		j branch_end_8792964886438
		
		error_branch_8792964886438:
		
		branch_end_8792964886438:
		
		# Loading return value in $v1
		lw $v1, 120($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 332
		
		jr $ra
		
	function_print_at_Main:
		# Function parameters
		#   $ra = 68($sp)
		#   self = 64($sp)
		#   var = 60($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -60
		
		# Allocating A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 52($sp) # internal_1 = address of allocated object A2I
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_1
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_1 = result of function___init___at_A2I
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument internal_1
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # z = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_3 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 60($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument var
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing var
		
		# Calling function internal_4
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 56($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_6 = address of allocated object Int
		
		# Get method i2a of A2I
		lw $t0, 56($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument z
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing z
		
		# Argument internal_2
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function internal_7
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_9 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_5
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function internal_10
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_8 = result of internal_10
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_11[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_11 = " "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_13 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_11
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function internal_14
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 60
		
		jr $ra
		
	function_main_at_Main:
		# Function parameters
		#   $ra = 1116($sp)
		#   self = 1112($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -1112
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 1108($sp) # internal_0 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 1116($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 1116($sp) # internal_0 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_0
		lw $t0, 1120($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Allocating NUll to internal_1
		sw $zero, 1104($sp) # internal_1 = 0
		
		while_start_8792964886962:
		
		# If flag then goto while_body_8792964886962
		# Jumping to while_end_8792964886962
		j while_end_8792964886962
		
		while_body_8792964886962:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_2[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_2[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_2[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_2[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_2[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_2[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_2[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 1100($sp) # internal_2 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1092($sp) # internal_4 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1092($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1088($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_2
		lw $t0, 1112($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function internal_5
		lw $t0, 1100($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1108($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1080($sp) # internal_7 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1080($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1076($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_8
		lw $t0, 1088($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1096($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1068($sp) # internal_10 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1060($sp) # internal_12 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_13
		lw $t0, 1064($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1072($sp) # internal_11 = result of internal_13
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1048($sp) # internal_15 = address of allocated object Int
		
		# Get method is_even of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1048($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1044($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_11
		lw $t0, 1076($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function internal_16
		lw $t0, 1056($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1064($sp) # internal_14 = result of internal_16
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_10 = internal_14
		lw $t0, 1052($sp)
		sw $t0, 1068($sp)
		
		# If internal_10 then goto then_8792964888384
		lw $t0, 1068($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964888384
		
		# Jumping to else_8792964888384
		j else_8792964888384
		
		then_8792964888384:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 18 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 18
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_17[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_17[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_17[2] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_17[3] = 'e'
		
		addi $t0, $zero, 118
		sb $t0, 12($v0) # internal_17[4] = 'v'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_17[5] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_17[6] = 'n'
		
		addi $t0, $zero, 33
		sb $t0, 15($v0) # internal_17[7] = '!'
		
		addi $t0, $zero, 10
		sb $t0, 16($v0) # internal_17[8] = '\n'
		
		sb $zero, 17($v0) # Null-terminator at the end of the string
		
		sw $v0, 1040($sp) # internal_17 = "is even!\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1032($sp) # internal_19 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1032($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1028($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_17
		lw $t0, 1052($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function internal_20
		lw $t0, 1040($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1048($sp) # internal_18 = result of internal_20
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_9 = internal_18
		lw $t0, 1036($sp)
		sw $t0, 1072($sp)
		
		# Jumping to endif_8792964888384
		j endif_8792964888384
		
		else_8792964888384:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 17 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 17
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_21[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_21[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_21[2] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_21[3] = 'o'
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_21[4] = 'd'
		
		addi $t0, $zero, 100
		sb $t0, 13($v0) # internal_21[5] = 'd'
		
		addi $t0, $zero, 33
		sb $t0, 14($v0) # internal_21[6] = '!'
		
		addi $t0, $zero, 10
		sb $t0, 15($v0) # internal_21[7] = '\n'
		
		sb $zero, 16($v0) # Null-terminator at the end of the string
		
		sw $v0, 1024($sp) # internal_21 = "is odd!\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1016($sp) # internal_23 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1016($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1012($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_21
		lw $t0, 1036($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function internal_24
		lw $t0, 1024($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1032($sp) # internal_22 = result of internal_24
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_9 = internal_22
		lw $t0, 1020($sp)
		sw $t0, 1072($sp)
		
		# Jumping to endif_8792964888384
		j endif_8792964888384
		
		endif_8792964888384:
		
		# Allocating Int 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 12
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 1004($sp) # internal_26 = address of allocated object Int
		
		# Get method class_type of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1004($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1000($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_27
		lw $t0, 1012($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1020($sp) # internal_25 = result of internal_27
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 992($sp) # internal_29 = address of allocated object Int
		
		# Get method menu of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 992($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 988($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1120($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_30
		lw $t0, 996($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1004($sp) # internal_28 = result of internal_30
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_28
		lw $t0, 1008($sp)
		sw $t0, 0($sp) # Storing internal_28
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 980($sp) # internal_32 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 97
		sb $t0, 8($v0) # internal_33[0] = 'a'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 976($sp) # internal_33 = "a"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_33
		lw $t0, 988($sp)
		sw $t0, 0($sp) # Storing internal_33
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 984($sp) # internal_34 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_32 = internal_34
		lw $t0, 972($sp)
		sw $t0, 980($sp)
		
		# If internal_32 then goto then_8792964888540
		lw $t0, 980($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964888540
		
		# Jumping to else_8792964888540
		j else_8792964888540
		
		then_8792964888540:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 968($sp) # internal_35 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 976($sp)
		sw $t0, 0($sp) # Storing internal_35
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 976($sp) # internal_35 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 960($sp) # internal_37 = address of allocated object Int
		
		# Get method get_int of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 960($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 956($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1120($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_38
		lw $t0, 964($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 972($sp) # internal_36 = result of internal_38
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 948($sp) # internal_40 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 968($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 948($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 944($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_35
		lw $t0, 980($sp)
		sw $t0, 4($sp) # Storing internal_35
		
		# Argument internal_36
		lw $t0, 976($sp)
		sw $t0, 0($sp) # Storing internal_36
		
		# Calling function internal_41
		lw $t0, 956($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 964($sp) # internal_39 = result of internal_41
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a_var
		# Argument internal_39
		lw $t0, 964($sp)
		sw $t0, 0($sp) # Storing internal_39
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Allocating B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 940($sp) # internal_42 = address of allocated object B
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_42
		lw $t0, 948($sp)
		sw $t0, 0($sp) # Storing internal_42
		
		# Calling function function___init___at_B
		jal function___init___at_B
		lw $ra, 4($sp)
		sw $v1, 948($sp) # internal_42 = result of function___init___at_B
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 932($sp) # internal_44 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_45
		lw $t0, 936($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 944($sp) # internal_43 = result of internal_45
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 920($sp) # internal_47 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument a_var
		# Calling function internal_48
		lw $t0, 924($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 932($sp) # internal_46 = result of internal_48
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 908($sp) # internal_50 = address of allocated object Int
		
		# Get method method2 of B
		lw $t0, 940($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 908($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 904($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_42
		lw $t0, 956($sp)
		sw $t0, 8($sp) # Storing internal_42
		
		# Argument internal_43
		lw $t0, 952($sp)
		sw $t0, 4($sp) # Storing internal_43
		
		# Argument internal_46
		lw $t0, 940($sp)
		sw $t0, 0($sp) # Storing internal_46
		
		# Calling function internal_51
		lw $t0, 920($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 928($sp) # internal_49 = result of internal_51
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_49
		lw $t0, 924($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_31 = avar
		# Jumping to endif_8792964888540
		j endif_8792964888540
		
		else_8792964888540:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 896($sp) # internal_53 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 98
		sb $t0, 8($v0) # internal_54[0] = 'b'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 892($sp) # internal_54 = "b"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_54
		lw $t0, 904($sp)
		sw $t0, 0($sp) # Storing internal_54
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 900($sp) # internal_55 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_53 = internal_55
		lw $t0, 888($sp)
		sw $t0, 896($sp)
		
		# If internal_53 then goto then_8792964889125
		lw $t0, 896($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964889125
		
		# Jumping to else_8792964889125
		j else_8792964889125
		
		then_8792964889125:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 884($sp) # internal_56 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 880($sp) # internal_57 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 876($sp) # internal_58 = address of allocated object Int
		
		# Allocating NUll to internal_59
		sw $zero, 872($sp) # internal_59 = 0
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 868($sp) # internal_60 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 864($sp) # internal_61 = address of allocated object Int
		
		# internal_62 = typeof avar that is the first word of the object
		# internal_63 = internal_62
		lw $t0, 860($sp)
		sw $t0, 856($sp)
		
		while_start_8792964889098:
		
		# internal_61 = EqualAddress(internal_63, internal_59)
		lw $t0, 856($sp)
		lw $t1, 872($sp)
		seq $t2, $t0, $t1
		lw $t0, 864($sp)
		sw $t2, 8($t0)
		
		# If internal_61 then goto while_end_8792964889098
		lw $t0, 864($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_end_8792964889098
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_60
		lw $t0, 880($sp)
		sw $t0, 4($sp) # Storing internal_60
		
		# Argument internal_57
		lw $t0, 892($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 880($sp) # internal_60 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_63 = ancestor of internal_63
		lw $t0, 856($sp)
		lw $t0, 4($t0)
		sw $t0, 856($sp)
		
		# Jumping to while_start_8792964889098
		j while_start_8792964889098
		
		while_end_8792964889098:
		
		# internal_63 = internal_62
		lw $t0, 860($sp)
		sw $t0, 856($sp)
		
		# initialize Array [internal_60]
		lw $t0, 868($sp) # $t0 = internal_60
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 852($sp) # internal_64 = new Array[internal_60]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 848($sp) # internal_65 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 844($sp) # internal_66 = address of allocated object Int
		
		foreach_start_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 860($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_60
		lw $t0, 880($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 856($sp) # internal_66 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_66 then goto foreach_body_8792964889098
		lw $t0, 844($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_body_8792964889098
		
		# Jumping to foreach_end_8792964889098
		j foreach_end_8792964889098
		
		foreach_body_8792964889098:
		
		# array internal_64[4 * internal_65] = internal_63
		lw $t0, 848($sp) # $t0 = internal_65
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 852($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 856($sp)
		sw $t0, 0($t1)
		
		# internal_63 = ancestor of internal_63
		lw $t0, 856($sp)
		lw $t0, 4($t0)
		sw $t0, 856($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_65
		lw $t0, 860($sp)
		sw $t0, 4($sp) # Storing internal_65
		
		# Argument internal_57
		lw $t0, 892($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 860($sp) # internal_65 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_start_8792964889098
		j foreach_start_8792964889098
		
		foreach_end_8792964889098:
		
		# initialize Array [internal_58]
		lw $t0, 876($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 840($sp) # internal_67 = new Array[internal_58]
		
		# initialize Array [internal_58]
		lw $t0, 876($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 836($sp) # internal_68 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 828($sp) # internal_70 = address of allocated object Int
		
		# internal_69 = direction of C
		la $t0, type_C
		sw $t0, 832($sp)
		
		# array internal_67[4 * internal_70] = internal_69
		lw $t0, 828($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 832($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_70] = internal_60
		lw $t0, 828($sp) # $t0 = internal_70
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 836($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 868($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 820($sp) # internal_72 = address of allocated object Int
		
		# internal_71 = direction of A
		la $t0, type_A
		sw $t0, 824($sp)
		
		# array internal_67[4 * internal_72] = internal_71
		lw $t0, 820($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 824($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_72] = internal_60
		lw $t0, 820($sp) # $t0 = internal_72
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 836($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 868($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 812($sp) # internal_74 = address of allocated object Int
		
		# internal_73 = direction of Object
		la $t0, type_Object
		sw $t0, 816($sp)
		
		# array internal_67[4 * internal_74] = internal_73
		lw $t0, 812($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 816($sp)
		sw $t0, 0($t1)
		
		# array internal_68[4 * internal_74] = internal_60
		lw $t0, 812($sp) # $t0 = internal_74
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 836($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 868($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 808($sp) # internal_75 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 804($sp) # internal_76 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 796($sp) # internal_78 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 792($sp) # internal_79 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 784($sp) # internal_81 = address of allocated object Int
		
		foreach_type_start_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 820($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_58
		lw $t0, 888($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 816($sp) # internal_76 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_76 then goto foreach_type_body_8792964889098
		lw $t0, 804($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_type_body_8792964889098
		
		# Jumping to foreach_type_end_8792964889098
		j foreach_type_end_8792964889098
		
		foreach_type_body_8792964889098:
		
		# internal_77 = array internal_67[4 * internal_75]
		lw $t0, 808($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 840($sp) # $t1 = internal_67
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 800($sp) # internal_77 = array internal_67[4 * internal_75]
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 808($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_56
		lw $t0, 896($sp)
		sw $t0, 0($sp) # Storing internal_56
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 808($sp) # internal_78 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_ancestor_start_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 808($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_60
		lw $t0, 880($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 804($sp) # internal_79 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_79 then goto foreach_ancestor_body_8792964889098
		lw $t0, 792($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_body_8792964889098
		
		# Jumping to foreach_ancestor_end_8792964889098
		j foreach_ancestor_end_8792964889098
		
		foreach_ancestor_body_8792964889098:
		
		# internal_80 = array internal_64[4 * internal_78]
		lw $t0, 796($sp) # $t0 = internal_78
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 852($sp) # $t1 = internal_64
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		sw $t0, 788($sp) # internal_80 = array internal_64[4 * internal_78]
		
		# internal_81 = EqualAddress(internal_77, internal_80)
		lw $t0, 800($sp)
		lw $t1, 788($sp)
		seq $t2, $t0, $t1
		lw $t0, 784($sp)
		sw $t2, 8($t0)
		
		# If internal_81 then goto foreach_ancestor_end_8792964889098
		lw $t0, 784($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_ancestor_end_8792964889098
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_78
		lw $t0, 808($sp)
		sw $t0, 4($sp) # Storing internal_78
		
		# Argument internal_57
		lw $t0, 892($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 808($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_ancestor_start_8792964889098
		j foreach_ancestor_start_8792964889098
		
		foreach_ancestor_end_8792964889098:
		
		# array internal_68[4 * internal_75] = internal_78
		lw $t0, 808($sp) # $t0 = internal_75
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 836($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 796($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_75
		lw $t0, 820($sp)
		sw $t0, 4($sp) # Storing internal_75
		
		# Argument internal_57
		lw $t0, 892($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 820($sp) # internal_75 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_type_start_8792964889098
		j foreach_type_start_8792964889098
		
		foreach_type_end_8792964889098:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 780($sp) # internal_82 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 776($sp) # internal_83 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 772($sp) # internal_84 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 768($sp) # internal_85 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 764($sp) # internal_86 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 780($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 880($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 780($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		foreach_min_start_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 792($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_58
		lw $t0, 888($sp)
		sw $t0, 0($sp) # Storing internal_58
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 776($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto foreach_min_body_8792964889098
		lw $t0, 764($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, foreach_min_body_8792964889098
		
		# Jumping to foreach_min_end_8792964889098
		j foreach_min_end_8792964889098
		
		foreach_min_body_8792964889098:
		
		# internal_84 = array internal_68[4 * internal_82]
		lw $t0, 780($sp) # $t0 = internal_82
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 836($sp) # $t1 = internal_68
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 772($sp) # internal_84 = array internal_68[4 * internal_82]
		sw $t0, 8($t2)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_84
		lw $t0, 784($sp)
		sw $t0, 4($sp) # Storing internal_84
		
		# Argument internal_85
		lw $t0, 780($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 776($sp) # internal_86 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_86 then goto update_min_8792964889098
		lw $t0, 764($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, update_min_8792964889098
		
		# Jumping to update_min_end_8792964889098
		j update_min_end_8792964889098
		
		update_min_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 780($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_84
		lw $t0, 784($sp)
		sw $t0, 0($sp) # Storing internal_84
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 780($sp) # internal_85 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_83
		lw $t0, 788($sp)
		sw $t0, 4($sp) # Storing internal_83
		
		# Argument internal_82
		lw $t0, 792($sp)
		sw $t0, 0($sp) # Storing internal_82
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 788($sp) # internal_83 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		update_min_end_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_82
		lw $t0, 792($sp)
		sw $t0, 4($sp) # Storing internal_82
		
		# Argument internal_57
		lw $t0, 892($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 792($sp) # internal_82 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to foreach_min_start_8792964889098
		j foreach_min_start_8792964889098
		
		foreach_min_end_8792964889098:
		
		# initialize Array [internal_58]
		lw $t0, 876($sp) # $t0 = internal_58
		lw $t0, 8($t0) # $t0 = value of the size
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 760($sp) # internal_87 = new Array[internal_58]
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 756($sp) # internal_88 = address of allocated object Int
		
		# array internal_87[4 * internal_88] = internal_56
		lw $t0, 756($sp) # $t0 = internal_88
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 760($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 884($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 752($sp) # internal_89 = address of allocated object Int
		
		# array internal_87[4 * internal_89] = internal_56
		lw $t0, 752($sp) # $t0 = internal_89
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 760($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 884($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 748($sp) # internal_90 = address of allocated object Int
		
		# array internal_87[4 * internal_90] = internal_56
		lw $t0, 748($sp) # $t0 = internal_90
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 760($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 884($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 744($sp) # internal_91 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_85
		lw $t0, 780($sp)
		sw $t0, 4($sp) # Storing internal_85
		
		# Argument internal_60
		lw $t0, 880($sp)
		sw $t0, 0($sp) # Storing internal_60
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 756($sp) # internal_91 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_91 then goto error_branch_8792964889098
		lw $t0, 744($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, error_branch_8792964889098
		
		# array internal_87[4 * internal_83] = internal_57
		lw $t0, 776($sp) # $t0 = internal_83
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 760($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 880($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 740($sp) # internal_92 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 736($sp) # internal_93 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_93]
		lw $t0, 736($sp) # $t0 = internal_93
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 760($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 740($sp) # internal_92 = array internal_87[4 * internal_93]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_C_8792964889098
		lw $t0, 740($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_C_8792964889098
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 732($sp) # internal_94 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_94]
		lw $t0, 732($sp) # $t0 = internal_94
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 760($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 740($sp) # internal_92 = array internal_87[4 * internal_94]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_A_8792964889098
		lw $t0, 740($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_A_8792964889098
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 728($sp) # internal_95 = address of allocated object Int
		
		# internal_92 = array internal_87[4 * internal_95]
		lw $t0, 728($sp) # $t0 = internal_95
		lw $t0, 8($t0) # $t0 = value of the index
		addi $t1, $zero, 4 # $t1 = 4
		mult $t0, $t1 # $t0 = $t0 * 4
		mflo $t0
		lw $t1, 760($sp) # $t1 = internal_87
		add $t1, $t1, $t0 # Move the pointer to the index
		lw $t0, 0($t1) # $t1 = value in the position
		lw $t2, 740($sp) # internal_92 = array internal_87[4 * internal_95]
		sw $t0, 8($t2)
		
		# If internal_92 then goto branch_Object_8792964889098
		lw $t0, 740($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, branch_Object_8792964889098
		
		branch_C_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument c
		lw $t0, 732($sp)
		sw $t0, 4($sp) # Storing c
		
		# Argument avar
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 732($sp) # c = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 712($sp) # internal_99 = address of allocated object Int
		
		# Get method value of C
		lw $t0, 720($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 712($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 708($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument c
		lw $t0, 728($sp)
		sw $t0, 0($sp) # Storing c
		
		# Calling function internal_100
		lw $t0, 716($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 724($sp) # internal_98 = result of internal_100
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 700($sp) # internal_102 = address of allocated object Int
		
		# Get method method6 of C
		lw $t0, 720($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 700($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 696($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument c
		lw $t0, 732($sp)
		sw $t0, 4($sp) # Storing c
		
		# Argument internal_98
		lw $t0, 728($sp)
		sw $t0, 0($sp) # Storing internal_98
		
		# Calling function internal_103
		lw $t0, 708($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 716($sp) # internal_101 = result of internal_103
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_101
		lw $t0, 716($sp)
		sw $t0, 0($sp) # Storing internal_101
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 736($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument avar
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 736($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = avar
		# Jumping to branch_end_8792964889098
		j branch_end_8792964889098
		
		branch_A_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 704($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument avar
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 704($sp) # a = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 684($sp) # internal_106 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 692($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 684($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 680($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument a
		lw $t0, 700($sp)
		sw $t0, 0($sp) # Storing a
		
		# Calling function internal_107
		lw $t0, 688($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 696($sp) # internal_105 = result of internal_107
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 672($sp) # internal_109 = address of allocated object Int
		
		# Get method method3 of A
		lw $t0, 692($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 672($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 668($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 704($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument internal_105
		lw $t0, 700($sp)
		sw $t0, 0($sp) # Storing internal_105
		
		# Calling function internal_110
		lw $t0, 680($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 688($sp) # internal_108 = result of internal_110
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_108
		lw $t0, 688($sp)
		sw $t0, 0($sp) # Storing internal_108
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 736($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument avar
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 736($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = avar
		# Jumping to branch_end_8792964889098
		j branch_end_8792964889098
		
		branch_Object_8792964889098:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument o
		lw $t0, 676($sp)
		sw $t0, 4($sp) # Storing o
		
		# Argument avar
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 676($sp) # o = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 79
		sb $t0, 8($v0) # internal_112[0] = 'O'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_112[1] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_112[2] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 11($v0) # internal_112[3] = 'o'
		
		addi $t0, $zero, 112
		sb $t0, 12($v0) # internal_112[4] = 'p'
		
		addi $t0, $zero, 115
		sb $t0, 13($v0) # internal_112[5] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 14($v0) # internal_112[6] = '\n'
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 660($sp) # internal_112 = "Oooops\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 652($sp) # internal_114 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 652($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 648($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_112
		lw $t0, 672($sp)
		sw $t0, 0($sp) # Storing internal_112
		
		# Calling function internal_115
		lw $t0, 660($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 668($sp) # internal_113 = result of internal_115
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 640($sp) # internal_117 = address of allocated object Int
		
		# Get method abort of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 640($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 636($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1120($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_118
		lw $t0, 644($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 652($sp) # internal_116 = result of internal_118
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 632($sp) # internal_119 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_96
		lw $t0, 736($sp)
		sw $t0, 4($sp) # Storing internal_96
		
		# Argument internal_119
		lw $t0, 644($sp)
		sw $t0, 0($sp) # Storing internal_119
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 736($sp) # internal_96 = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_96 = internal_119
		lw $t0, 632($sp)
		sw $t0, 724($sp)
		
		# Jumping to branch_end_8792964889098
		j branch_end_8792964889098
		
		error_branch_8792964889098:
		
		branch_end_8792964889098:
		
		# internal_52 = internal_96
		lw $t0, 724($sp)
		sw $t0, 900($sp)
		
		# Jumping to endif_8792964889125
		j endif_8792964889125
		
		else_8792964889125:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 624($sp) # internal_121 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 99
		sb $t0, 8($v0) # internal_122[0] = 'c'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 620($sp) # internal_122 = "c"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_122
		lw $t0, 632($sp)
		sw $t0, 0($sp) # Storing internal_122
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 628($sp) # internal_123 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_121 = internal_123
		lw $t0, 616($sp)
		sw $t0, 624($sp)
		
		# If internal_121 then goto then_8792964889302
		lw $t0, 624($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964889302
		
		# Jumping to else_8792964889302
		j else_8792964889302
		
		then_8792964889302:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 612($sp) # internal_124 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_124
		lw $t0, 620($sp)
		sw $t0, 0($sp) # Storing internal_124
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 620($sp) # internal_124 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 604($sp) # internal_126 = address of allocated object Int
		
		# Get method get_int of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 604($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 600($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 1120($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_127
		lw $t0, 608($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 616($sp) # internal_125 = result of internal_127
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 592($sp) # internal_129 = address of allocated object Int
		
		# Get method set_var of A
		lw $t0, 612($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 592($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 588($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_124
		lw $t0, 624($sp)
		sw $t0, 4($sp) # Storing internal_124
		
		# Argument internal_125
		lw $t0, 620($sp)
		sw $t0, 0($sp) # Storing internal_125
		
		# Calling function internal_130
		lw $t0, 600($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 608($sp) # internal_128 = result of internal_130
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a_var
		# Argument internal_128
		lw $t0, 608($sp)
		sw $t0, 0($sp) # Storing internal_128
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 584($sp) # internal_131 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_131
		lw $t0, 592($sp)
		sw $t0, 0($sp) # Storing internal_131
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 592($sp) # internal_131 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 576($sp) # internal_133 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_134
		lw $t0, 580($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 588($sp) # internal_132 = result of internal_134
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 564($sp) # internal_136 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument a_var
		# Calling function internal_137
		lw $t0, 568($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 576($sp) # internal_135 = result of internal_137
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 552($sp) # internal_139 = address of allocated object Int
		
		# Get method method4 of D
		lw $t0, 584($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 552($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 548($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_131
		lw $t0, 600($sp)
		sw $t0, 8($sp) # Storing internal_131
		
		# Argument internal_132
		lw $t0, 596($sp)
		sw $t0, 4($sp) # Storing internal_132
		
		# Argument internal_135
		lw $t0, 584($sp)
		sw $t0, 0($sp) # Storing internal_135
		
		# Calling function internal_140
		lw $t0, 564($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 572($sp) # internal_138 = result of internal_140
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_138
		lw $t0, 568($sp)
		sw $t0, 0($sp) # Storing internal_138
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_120 = avar
		# Jumping to endif_8792964889302
		j endif_8792964889302
		
		else_8792964889302:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 540($sp) # internal_142 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 100
		sb $t0, 8($v0) # internal_143[0] = 'd'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 536($sp) # internal_143 = "d"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_143
		lw $t0, 548($sp)
		sw $t0, 0($sp) # Storing internal_143
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 544($sp) # internal_144 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_142 = internal_144
		lw $t0, 532($sp)
		sw $t0, 540($sp)
		
		# If internal_142 then goto then_8792964889670
		lw $t0, 540($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964889670
		
		# Jumping to else_8792964889670
		j else_8792964889670
		
		then_8792964889670:
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 528($sp) # internal_145 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_145
		lw $t0, 536($sp)
		sw $t0, 0($sp) # Storing internal_145
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 536($sp) # internal_145 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 520($sp) # internal_147 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_148
		lw $t0, 524($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 532($sp) # internal_146 = result of internal_148
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 508($sp) # internal_150 = address of allocated object Int
		
		# Get method method5 of A
		lw $t0, 528($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 508($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 504($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_145
		lw $t0, 540($sp)
		sw $t0, 4($sp) # Storing internal_145
		
		# Argument internal_146
		lw $t0, 536($sp)
		sw $t0, 0($sp) # Storing internal_146
		
		# Calling function function_method5_at_A
		jal function_method5_at_A
		lw $ra, 8($sp)
		sw $v1, 524($sp) # internal_149 = result of function_method5_at_A
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_149
		lw $t0, 524($sp)
		sw $t0, 0($sp) # Storing internal_149
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_141 = avar
		# Jumping to endif_8792964889670
		j endif_8792964889670
		
		else_8792964889670:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 496($sp) # internal_153 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 101
		sb $t0, 8($v0) # internal_154[0] = 'e'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 492($sp) # internal_154 = "e"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_154
		lw $t0, 504($sp)
		sw $t0, 0($sp) # Storing internal_154
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 500($sp) # internal_155 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_153 = internal_155
		lw $t0, 488($sp)
		sw $t0, 496($sp)
		
		# If internal_153 then goto then_8792964889748
		lw $t0, 496($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964889748
		
		# Jumping to else_8792964889748
		j else_8792964889748
		
		then_8792964889748:
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 484($sp) # internal_156 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_156
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_156
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 492($sp) # internal_156 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 476($sp) # internal_158 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_159
		lw $t0, 480($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 488($sp) # internal_157 = result of internal_159
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 464($sp) # internal_161 = address of allocated object Int
		
		# Get method method5 of B
		lw $t0, 484($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 464($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 460($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_156
		lw $t0, 496($sp)
		sw $t0, 4($sp) # Storing internal_156
		
		# Argument internal_157
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function_method5_at_B
		jal function_method5_at_B
		lw $ra, 8($sp)
		sw $v1, 480($sp) # internal_160 = result of function_method5_at_B
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_160
		lw $t0, 480($sp)
		sw $t0, 0($sp) # Storing internal_160
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_152 = avar
		# Jumping to endif_8792964889748
		j endif_8792964889748
		
		else_8792964889748:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 452($sp) # internal_164 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 102
		sb $t0, 8($v0) # internal_165[0] = 'f'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 448($sp) # internal_165 = "f"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_165
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing internal_165
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 456($sp) # internal_166 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_164 = internal_166
		lw $t0, 444($sp)
		sw $t0, 452($sp)
		
		# If internal_164 then goto then_8792964889832
		lw $t0, 452($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964889832
		
		# Jumping to else_8792964889832
		j else_8792964889832
		
		then_8792964889832:
		
		# Allocating C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 440($sp) # internal_167 = address of allocated object C
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_167
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_167
		
		# Calling function function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 448($sp) # internal_167 = result of function___init___at_C
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 432($sp) # internal_169 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_170
		lw $t0, 436($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 444($sp) # internal_168 = result of internal_170
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 420($sp) # internal_172 = address of allocated object Int
		
		# Get method method5 of C
		lw $t0, 440($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 420($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 416($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_167
		lw $t0, 452($sp)
		sw $t0, 4($sp) # Storing internal_167
		
		# Argument internal_168
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_168
		
		# Calling function function_method5_at_C
		jal function_method5_at_C
		lw $ra, 8($sp)
		sw $v1, 436($sp) # internal_171 = result of function_method5_at_C
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_171
		lw $t0, 436($sp)
		sw $t0, 0($sp) # Storing internal_171
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_163 = avar
		# Jumping to endif_8792964889832
		j endif_8792964889832
		
		else_8792964889832:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 408($sp) # internal_175 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 103
		sb $t0, 8($v0) # internal_176[0] = 'g'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 404($sp) # internal_176 = "g"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_176
		lw $t0, 416($sp)
		sw $t0, 0($sp) # Storing internal_176
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 412($sp) # internal_177 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_175 = internal_177
		lw $t0, 400($sp)
		sw $t0, 408($sp)
		
		# If internal_175 then goto then_8792964890670
		lw $t0, 408($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964890670
		
		# Jumping to else_8792964890670
		j else_8792964890670
		
		then_8792964890670:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 392($sp) # internal_179 = address of allocated object Int
		
		# Allocating D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 388($sp) # internal_180 = address of allocated object D
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_180
		lw $t0, 396($sp)
		sw $t0, 0($sp) # Storing internal_180
		
		# Calling function function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 396($sp) # internal_180 = result of function___init___at_D
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 380($sp) # internal_182 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_183
		lw $t0, 384($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 392($sp) # internal_181 = result of internal_183
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 368($sp) # internal_185 = address of allocated object Int
		
		# Get method method7 of D
		lw $t0, 388($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 368($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 364($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_180
		lw $t0, 400($sp)
		sw $t0, 4($sp) # Storing internal_180
		
		# Argument internal_181
		lw $t0, 396($sp)
		sw $t0, 0($sp) # Storing internal_181
		
		# Calling function internal_186
		lw $t0, 376($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 384($sp) # internal_184 = result of internal_186
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_179 = internal_184
		lw $t0, 372($sp)
		sw $t0, 392($sp)
		
		# If internal_179 then goto then_8792964890760
		lw $t0, 392($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964890760
		
		# Jumping to else_8792964890760
		j else_8792964890760
		
		then_8792964890760:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_187[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_187[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_187[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_187[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_187[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_187[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_187[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 360($sp) # internal_187 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 352($sp) # internal_189 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 352($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 348($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_187
		lw $t0, 372($sp)
		sw $t0, 0($sp) # Storing internal_187
		
		# Calling function internal_190
		lw $t0, 360($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 368($sp) # internal_188 = result of internal_190
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 340($sp) # internal_192 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 340($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 336($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_193
		lw $t0, 348($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 356($sp) # internal_191 = result of internal_193
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 28 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 28
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_194[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_194[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_194[2] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 11($v0) # internal_194[3] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 12($v0) # internal_194[4] = 'i'
		
		addi $t0, $zero, 118
		sb $t0, 13($v0) # internal_194[5] = 'v'
		
		addi $t0, $zero, 105
		sb $t0, 14($v0) # internal_194[6] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 15($v0) # internal_194[7] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_194[8] = 'i'
		
		addi $t0, $zero, 98
		sb $t0, 17($v0) # internal_194[9] = 'b'
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_194[10] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_194[11] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_194[12] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 21($v0) # internal_194[13] = 'b'
		
		addi $t0, $zero, 121
		sb $t0, 22($v0) # internal_194[14] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_194[15] = ' '
		
		addi $t0, $zero, 51
		sb $t0, 24($v0) # internal_194[16] = '3'
		
		addi $t0, $zero, 46
		sb $t0, 25($v0) # internal_194[17] = '.'
		
		addi $t0, $zero, 10
		sb $t0, 26($v0) # internal_194[18] = '\n'
		
		sb $zero, 27($v0) # Null-terminator at the end of the string
		
		sw $v0, 332($sp) # internal_194 = "is divisible by 3.\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 324($sp) # internal_196 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 324($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 320($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_194
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing internal_194
		
		# Calling function internal_197
		lw $t0, 332($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 340($sp) # internal_195 = result of internal_197
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_178 = internal_195
		lw $t0, 328($sp)
		sw $t0, 396($sp)
		
		# Jumping to endif_8792964890760
		j endif_8792964890760
		
		else_8792964890760:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_198[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_198[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_198[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_198[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_198[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_198[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_198[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 316($sp) # internal_198 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 308($sp) # internal_200 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 308($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 304($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_198
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing internal_198
		
		# Calling function internal_201
		lw $t0, 316($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 324($sp) # internal_199 = result of internal_201
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_203 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 296($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 292($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_204
		lw $t0, 304($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 312($sp) # internal_202 = result of internal_204
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 32 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 32
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_205[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_205[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_205[2] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 11($v0) # internal_205[3] = 'n'
		
		addi $t0, $zero, 111
		sb $t0, 12($v0) # internal_205[4] = 'o'
		
		addi $t0, $zero, 116
		sb $t0, 13($v0) # internal_205[5] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_205[6] = ' '
		
		addi $t0, $zero, 100
		sb $t0, 15($v0) # internal_205[7] = 'd'
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_205[8] = 'i'
		
		addi $t0, $zero, 118
		sb $t0, 17($v0) # internal_205[9] = 'v'
		
		addi $t0, $zero, 105
		sb $t0, 18($v0) # internal_205[10] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_205[11] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 20($v0) # internal_205[12] = 'i'
		
		addi $t0, $zero, 98
		sb $t0, 21($v0) # internal_205[13] = 'b'
		
		addi $t0, $zero, 108
		sb $t0, 22($v0) # internal_205[14] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 23($v0) # internal_205[15] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_205[16] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 25($v0) # internal_205[17] = 'b'
		
		addi $t0, $zero, 121
		sb $t0, 26($v0) # internal_205[18] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_205[19] = ' '
		
		addi $t0, $zero, 51
		sb $t0, 28($v0) # internal_205[20] = '3'
		
		addi $t0, $zero, 46
		sb $t0, 29($v0) # internal_205[21] = '.'
		
		addi $t0, $zero, 10
		sb $t0, 30($v0) # internal_205[22] = '\n'
		
		sb $zero, 31($v0) # Null-terminator at the end of the string
		
		sw $v0, 288($sp) # internal_205 = "is not divisible by 3.\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 280($sp) # internal_207 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 280($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 276($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_205
		lw $t0, 300($sp)
		sw $t0, 0($sp) # Storing internal_205
		
		# Calling function internal_208
		lw $t0, 288($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 296($sp) # internal_206 = result of internal_208
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_178 = internal_206
		lw $t0, 284($sp)
		sw $t0, 396($sp)
		
		# Jumping to endif_8792964890760
		j endif_8792964890760
		
		endif_8792964890760:
		
		# internal_174 = internal_178
		lw $t0, 396($sp)
		sw $t0, 412($sp)
		
		# Jumping to endif_8792964890670
		j endif_8792964890670
		
		else_8792964890670:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 268($sp) # internal_210 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 104
		sb $t0, 8($v0) # internal_211[0] = 'h'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 264($sp) # internal_211 = "h"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_211
		lw $t0, 276($sp)
		sw $t0, 0($sp) # Storing internal_211
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 272($sp) # internal_212 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_210 = internal_212
		lw $t0, 260($sp)
		sw $t0, 268($sp)
		
		# If internal_210 then goto then_8792964890715
		lw $t0, 268($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964890715
		
		# Jumping to else_8792964890715
		j else_8792964890715
		
		then_8792964890715:
		
		# Allocating NUll to x
		sw $zero, 256($sp) # x = 0
		
		# Allocating E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 252($sp) # internal_214 = address of allocated object E
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_214
		lw $t0, 260($sp)
		sw $t0, 0($sp) # Storing internal_214
		
		# Calling function function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 260($sp) # internal_214 = result of function___init___at_E
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 244($sp) # internal_216 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_217
		lw $t0, 248($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 256($sp) # internal_215 = result of internal_217
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 12
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_219 = address of allocated object Int
		
		# Get method method6 of E
		lw $t0, 252($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 232($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 228($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_214
		lw $t0, 264($sp)
		sw $t0, 4($sp) # Storing internal_214
		
		# Argument internal_215
		lw $t0, 260($sp)
		sw $t0, 0($sp) # Storing internal_215
		
		# Calling function internal_220
		lw $t0, 240($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 248($sp) # internal_218 = result of internal_220
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument x
		lw $t0, 268($sp)
		sw $t0, 4($sp) # Storing x
		
		# Argument internal_218
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_218
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 268($sp) # x = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_223 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_224
		lw $t0, 220($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 228($sp) # internal_222 = result of internal_224
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_226 = address of allocated object Int
		
		# Get method value of A
		lw $t0, 256($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 204($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 200($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument x
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_227
		lw $t0, 208($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 216($sp) # internal_225 = result of internal_227
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_228 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_225
		lw $t0, 220($sp)
		sw $t0, 4($sp) # Storing internal_225
		
		# Argument internal_228
		lw $t0, 208($sp)
		sw $t0, 0($sp) # Storing internal_228
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 204($sp) # internal_229 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_222
		lw $t0, 232($sp)
		sw $t0, 4($sp) # Storing internal_222
		
		# Argument internal_229
		lw $t0, 204($sp)
		sw $t0, 0($sp) # Storing internal_229
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_230 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument r
		lw $t0, 236($sp)
		sw $t0, 4($sp) # Storing r
		
		# Argument internal_230
		lw $t0, 200($sp)
		sw $t0, 0($sp) # Storing internal_230
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 236($sp) # r = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 16 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 16
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_231[0] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 9($v0) # internal_231[1] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_231[2] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 11($v0) # internal_231[3] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_231[4] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 13($v0) # internal_231[5] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_231[6] = ' '
		
		sb $zero, 15($v0) # Null-terminator at the end of the string
		
		sw $v0, 184($sp) # internal_231 = "number "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_233 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 176($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 172($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_231
		lw $t0, 196($sp)
		sw $t0, 0($sp) # Storing internal_231
		
		# Calling function internal_234
		lw $t0, 184($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 192($sp) # internal_232 = result of internal_234
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_236 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 164($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 160($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument avar
		# Calling function internal_237
		lw $t0, 172($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 180($sp) # internal_235 = result of internal_237
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 105
		sb $t0, 8($v0) # internal_238[0] = 'i'
		
		addi $t0, $zero, 115
		sb $t0, 9($v0) # internal_238[1] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_238[2] = ' '
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_238[3] = 'e'
		
		addi $t0, $zero, 113
		sb $t0, 12($v0) # internal_238[4] = 'q'
		
		addi $t0, $zero, 117
		sb $t0, 13($v0) # internal_238[5] = 'u'
		
		addi $t0, $zero, 97
		sb $t0, 14($v0) # internal_238[6] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_238[7] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_238[8] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 17($v0) # internal_238[9] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 18($v0) # internal_238[10] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_238[11] = ' '
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 156($sp) # internal_238 = "is equal to "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 148($sp) # internal_240 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 148($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 144($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_238
		lw $t0, 168($sp)
		sw $t0, 0($sp) # Storing internal_238
		
		# Calling function internal_241
		lw $t0, 156($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 164($sp) # internal_239 = result of internal_241
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_243 = address of allocated object Int
		
		# Get method print of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 136($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 132($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument x
		lw $t0, 268($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function internal_244
		lw $t0, 144($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 152($sp) # internal_242 = result of internal_244
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 37
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 116
		sb $t0, 8($v0) # internal_245[0] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 9($v0) # internal_245[1] = 'i'
		
		addi $t0, $zero, 109
		sb $t0, 10($v0) # internal_245[2] = 'm'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_245[3] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_245[4] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_245[5] = ' '
		
		addi $t0, $zero, 56
		sb $t0, 14($v0) # internal_245[6] = '8'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_245[7] = ' '
		
		addi $t0, $zero, 119
		sb $t0, 16($v0) # internal_245[8] = 'w'
		
		addi $t0, $zero, 105
		sb $t0, 17($v0) # internal_245[9] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 18($v0) # internal_245[10] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 19($v0) # internal_245[11] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_245[12] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 21($v0) # internal_245[13] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_245[14] = ' '
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_245[15] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 24($v0) # internal_245[16] = 'e'
		
		addi $t0, $zero, 109
		sb $t0, 25($v0) # internal_245[17] = 'm'
		
		addi $t0, $zero, 97
		sb $t0, 26($v0) # internal_245[18] = 'a'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_245[19] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 28($v0) # internal_245[20] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 29($v0) # internal_245[21] = 'd'
		
		addi $t0, $zero, 101
		sb $t0, 30($v0) # internal_245[22] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 31($v0) # internal_245[23] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_245[24] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 33($v0) # internal_245[25] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 34($v0) # internal_245[26] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_245[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 128($sp) # internal_245 = "times 8 with a remainder of "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_247 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 120($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 116($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_245
		lw $t0, 140($sp)
		sw $t0, 0($sp) # Storing internal_245
		
		# Calling function internal_248
		lw $t0, 128($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 136($sp) # internal_246 = result of internal_248
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 108($sp) # internal_250 = address of allocated object A2I
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_250
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_250
		
		# Calling function function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 116($sp) # internal_250 = result of function___init___at_A2I
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 704($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument internal_250
		lw $t0, 120($sp)
		sw $t0, 0($sp) # Storing internal_250
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 704($sp) # a = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 100($sp) # internal_252 = address of allocated object Int
		
		# Get method i2a of A2I
		lw $t0, 692($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 100($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 96($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument a
		lw $t0, 704($sp)
		sw $t0, 4($sp) # Storing a
		
		# Argument r
		lw $t0, 236($sp)
		sw $t0, 0($sp) # Storing r
		
		# Calling function internal_253
		lw $t0, 108($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 116($sp) # internal_251 = result of internal_253
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_255 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 88($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 84($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_251
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_251
		
		# Calling function internal_256
		lw $t0, 96($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_254 = result of internal_256
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_257[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 80($sp) # internal_257 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_259 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 1112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 1124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_257
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_257
		
		# Calling function internal_260
		lw $t0, 80($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_258 = result of internal_260
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument x
		lw $t0, 268($sp)
		sw $t0, 0($sp) # Storing x
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_209 = avar
		# Jumping to endif_8792964890715
		j endif_8792964890715
		
		else_8792964890715:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_262 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 106
		sb $t0, 8($v0) # internal_263[0] = 'j'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 56($sp) # internal_263 = "j"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_263
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_263
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_264 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_262 = internal_264
		lw $t0, 52($sp)
		sw $t0, 60($sp)
		
		# If internal_262 then goto then_8792964891733
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964891733
		
		# Jumping to else_8792964891733
		j else_8792964891733
		
		then_8792964891733:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 48($sp) # internal_265 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_265
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_265
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 56($sp) # internal_265 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_265
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_265
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_261 = avar
		# Jumping to endif_8792964891733
		j endif_8792964891733
		
		else_8792964891733:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_267 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 113
		sb $t0, 8($v0) # internal_268[0] = 'q'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 36($sp) # internal_268 = "q"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument char
		# Argument internal_268
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_268
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_269 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_267 = internal_269
		lw $t0, 32($sp)
		sw $t0, 40($sp)
		
		# If internal_267 then goto then_8792964892191
		lw $t0, 40($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8792964892191
		
		# Jumping to else_8792964892191
		j else_8792964892191
		
		then_8792964892191:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_270 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument flag
		# Argument internal_270
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_270
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_266 = flag
		# Jumping to endif_8792964892191
		j endif_8792964892191
		
		else_8792964892191:
		
		# Allocating A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 24($sp) # internal_271 = address of allocated object A
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_271
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_271
		
		# Calling function function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 32($sp) # internal_271 = result of function___init___at_A
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_273 = address of allocated object Int
		
		# Get method value of A
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument avar
		# Calling function internal_274
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp) # internal_272 = result of internal_274
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_276 = address of allocated object Int
		
		# Get method method1 of A
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_271
		lw $t0, 36($sp)
		sw $t0, 4($sp) # Storing internal_271
		
		# Argument internal_272
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_272
		
		# Calling function internal_277
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_275 = result of internal_277
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument avar
		# Argument internal_275
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_275
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		# internal_266 = avar
		# Jumping to endif_8792964892191
		j endif_8792964892191
		
		endif_8792964892191:
		
		# internal_261 = internal_266
		lw $t0, 44($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8792964891733
		j endif_8792964891733
		
		endif_8792964891733:
		
		# internal_209 = internal_261
		lw $t0, 64($sp)
		sw $t0, 272($sp)
		
		# Jumping to endif_8792964890715
		j endif_8792964890715
		
		endif_8792964890715:
		
		# internal_174 = internal_209
		lw $t0, 272($sp)
		sw $t0, 412($sp)
		
		# Jumping to endif_8792964890670
		j endif_8792964890670
		
		endif_8792964890670:
		
		# internal_163 = internal_174
		lw $t0, 412($sp)
		sw $t0, 456($sp)
		
		# Jumping to endif_8792964889832
		j endif_8792964889832
		
		endif_8792964889832:
		
		# internal_152 = internal_163
		lw $t0, 456($sp)
		sw $t0, 500($sp)
		
		# Jumping to endif_8792964889748
		j endif_8792964889748
		
		endif_8792964889748:
		
		# internal_141 = internal_152
		lw $t0, 500($sp)
		sw $t0, 544($sp)
		
		# Jumping to endif_8792964889670
		j endif_8792964889670
		
		endif_8792964889670:
		
		# internal_120 = internal_141
		lw $t0, 544($sp)
		sw $t0, 628($sp)
		
		# Jumping to endif_8792964889302
		j endif_8792964889302
		
		endif_8792964889302:
		
		# internal_52 = internal_120
		lw $t0, 628($sp)
		sw $t0, 900($sp)
		
		# Jumping to endif_8792964889125
		j endif_8792964889125
		
		endif_8792964889125:
		
		# internal_31 = internal_52
		lw $t0, 900($sp)
		sw $t0, 984($sp)
		
		# Jumping to endif_8792964888540
		j endif_8792964888540
		
		endif_8792964888540:
		
		# Jumping to while_start_8792964886962
		j while_start_8792964886962
		
		while_end_8792964886962:
		
		# Loading return value in $v1
		lw $v1, 1104($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 1112
		
		jr $ra
		
	main:
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_0 = address of allocated object Main
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_0 = result of function___init___at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 14
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Get method main of Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Exit program
		li $v0, 10
		syscall
		
		