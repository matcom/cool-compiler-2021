.data
	
	################
	# DATA SECTION #
	################

	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_A: .word 56
	type_A_inherits_from: .word type_Object
	type_A_name_address: .word type_A_name_size
	type_A___init__: .word function___init___at_A
	type_A_abort: .word function_abort_at_Object
	type_A_type_name: .word function_type_name_at_Object
	type_A_copy: .word function_copy_at_Object
	type_A_value: .word function_value_at_A
	type_A_set_var: .word function_set_var_at_A
	type_A_method1: .word function_method1_at_A
	type_A_method2: .word function_method2_at_A
	type_A_method3: .word function_method3_at_A
	type_A_method4: .word function_method4_at_A
	type_A_method5: .word function_method5_at_A
	
	type_B: .word 56
	type_B_inherits_from: .word type_A
	type_B_name_address: .word type_B_name_size
	type_B___init__: .word function___init___at_B
	type_B_abort: .word function_abort_at_Object
	type_B_type_name: .word function_type_name_at_Object
	type_B_copy: .word function_copy_at_Object
	type_B_value: .word function_value_at_A
	type_B_set_var: .word function_set_var_at_A
	type_B_method1: .word function_method1_at_A
	type_B_method2: .word function_method2_at_A
	type_B_method3: .word function_method3_at_A
	type_B_method4: .word function_method4_at_A
	type_B_method5: .word function_method5_at_B
	
	type_C: .word 60
	type_C_inherits_from: .word type_B
	type_C_name_address: .word type_C_name_size
	type_C___init__: .word function___init___at_C
	type_C_abort: .word function_abort_at_Object
	type_C_type_name: .word function_type_name_at_Object
	type_C_copy: .word function_copy_at_Object
	type_C_value: .word function_value_at_A
	type_C_set_var: .word function_set_var_at_A
	type_C_method1: .word function_method1_at_A
	type_C_method2: .word function_method2_at_A
	type_C_method3: .word function_method3_at_A
	type_C_method4: .word function_method4_at_A
	type_C_method5: .word function_method5_at_C
	type_C_method6: .word function_method6_at_C
	
	type_D: .word 60
	type_D_inherits_from: .word type_B
	type_D_name_address: .word type_D_name_size
	type_D___init__: .word function___init___at_D
	type_D_abort: .word function_abort_at_Object
	type_D_type_name: .word function_type_name_at_Object
	type_D_copy: .word function_copy_at_Object
	type_D_value: .word function_value_at_A
	type_D_set_var: .word function_set_var_at_A
	type_D_method1: .word function_method1_at_A
	type_D_method2: .word function_method2_at_A
	type_D_method3: .word function_method3_at_A
	type_D_method4: .word function_method4_at_A
	type_D_method5: .word function_method5_at_B
	type_D_method7: .word function_method7_at_D
	
	type_E: .word 64
	type_E_inherits_from: .word type_D
	type_E_name_address: .word type_E_name_size
	type_E___init__: .word function___init___at_E
	type_E_abort: .word function_abort_at_Object
	type_E_type_name: .word function_type_name_at_Object
	type_E_copy: .word function_copy_at_Object
	type_E_value: .word function_value_at_A
	type_E_set_var: .word function_set_var_at_A
	type_E_method1: .word function_method1_at_A
	type_E_method2: .word function_method2_at_A
	type_E_method3: .word function_method3_at_A
	type_E_method4: .word function_method4_at_A
	type_E_method5: .word function_method5_at_B
	type_E_method7: .word function_method7_at_D
	type_E_method6: .word function_method6_at_E
	
	type_A2I: .word 48
	type_A2I_inherits_from: .word type_Object
	type_A2I_name_address: .word type_A2I_name_size
	type_A2I___init__: .word function___init___at_A2I
	type_A2I_abort: .word function_abort_at_Object
	type_A2I_type_name: .word function_type_name_at_Object
	type_A2I_copy: .word function_copy_at_Object
	type_A2I_c2i: .word function_c2i_at_A2I
	type_A2I_i2c: .word function_i2c_at_A2I
	type_A2I_a2i: .word function_a2i_at_A2I
	type_A2I_a2i_aux: .word function_a2i_aux_at_A2I
	type_A2I_i2a: .word function_i2a_at_A2I
	type_A2I_i2a_aux: .word function_i2a_aux_at_A2I
	
	type_Main: .word 84
	type_Main_inherits_from: .word type_IO
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_menu: .word function_menu_at_Main
	type_Main_prompt: .word function_prompt_at_Main
	type_Main_get_int: .word function_get_int_at_Main
	type_Main_is_even: .word function_is_even_at_Main
	type_Main_class_type: .word function_class_type_at_Main
	type_Main_print: .word function_print_at_Main
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_A_name_size: .word 1
	type_A_name: .asciiz "A"
	
	type_B_name_size: .word 1
	type_B_name: .asciiz "B"
	
	type_C_name_size: .word 1
	type_C_name: .asciiz "C"
	
	type_D_name_size: .word 1
	type_D_name: .asciiz "D"
	
	type_E_name_size: .word 1
	type_E_name: .asciiz "E"
	
	type_A2I_name_size: .word 3
	type_A2I_name: .asciiz "A2I"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	
	################
	# TEXT SECTION #
	################

	function_add:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# ADD FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		add $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SUB FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sub $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# TIMES FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		mult $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# DIV FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		div $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# XOR FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		xor $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		slt $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS EQ FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sle $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -40
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 32($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# internal_2 <- EQUALADDRESS (a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 <- EQUALADDRESS (b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# IF internal_2 THEN GOTO a_is_type_object
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_object
		
		# internal_3 <- TYPEOF a
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 <- DIRECTION OF String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_7 <- EQUALADDRESS (internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 <- EQUALADDRESS (internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 <- EQUALADDRESS (internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_7 THEN GOTO a_is_type_int_or_bool
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_8 THEN GOTO a_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_9 THEN GOTO a_is_type_string
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_string
		
		# JUMP TO a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 <- EQUALINT (a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 <- EQUALSTRING (a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# EQUAL FUNCT
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		seq $t2, $t0, $t1
		
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		lw $v1, 36($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -28
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 24($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_1 <- EQUALADDRESS (source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 <- EQUALADDRESS (dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# IF internal_1 THEN GOTO source_is_type_object
		lw $t0, 20($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_object
		
		# internal_2 <- TYPEOF source
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_5 <- EQUALADDRESS (internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 <- EQUALADDRESS (internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_5 THEN GOTO source_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# IF internal_6 THEN GOTO source_is_type_int_or_bool
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# JUMP TO source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest <- source WHERE source IS AN INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t0)
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		sw $t2, 8($v0)
		sw $v0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest <- source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		lw $v1, 32($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -24
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		
		addi $t0, $zero, 65
		sb $t0, 8($v0)
		
		addi $t0, $zero, 98
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		
		addi $t0, $zero, 116
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 100
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		
		addi $t0, $zero, 108
		sb $t0, 27($v0)
		
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		sb $zero, 32($v0)
		
		sw $v0, 20($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 8($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD type_name OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		lw $t0, 12($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# EXIT!
		li $v0, 10
		syscall
		
		lw $v1, 24($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- NAME OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t1)
		la $t3, 4($t2)
		lw $t2, 0($t2)
		
		addi $t2, $t2, 9
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9
		
		la $t4, type_String
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		
		addi $t4, $v0, 0
		addi $t4, $t4, 8
		xor $t5, $t5, $t5
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3)
		sb $t6, 0($t4)
		addi $t4, $t4, 1
		addi $t3, $t3, 1
		addi $t5, $t5, 1
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- COPY OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 4($t0)
		
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		addi $t3, $t3, 8
		addi $t2, $2, -8
		xor $t4, $t4, $t4
		
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0)
		sb $t5, 0($t3)
		addi $t0, $t0, 1
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		lw $t0, 0($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: x
		li $v0, 4
		move $a0, $t0
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# PRINTING INT: x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0
		while_read_start:
		lb $t1, buffer_input($t0)
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9
		la $t2, type_String
		sw $t2, 0($v0)
		sw $a0, 4($v0)
		
		addi $t3, $v0, 8
		xor $t4, $t4, $t4
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4)
		sb $t5, 0($t3)
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_0 <- LENGTH (self)
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0)
		lw $t3, 4($t1)
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3
		addi $t4, $t4, 9
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9
		add $t5, $zero, $v0
		addi $t5, $t5, 8
		
		la $t8, type_String
		sw $t8, 0($v0)
		
		sw $a0, 4($v0)
		
		xor $t6, $t6, $t6
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str1_start
		while_copy_str1_end:
		
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self[i:i + l]
		lw $t0, 12($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t2, 8($sp)
		lw $t2, 8($t2)
		lw $t3, 4($sp)
		lw $t3, 8($t3)
		add $t4, $t2, $t3
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0)
		
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		add $t0, $t0, $t2
		move $t5, $v0
		add $t5, $t5, 8
		xor $t6, $t6, $t6
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_A:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE var OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8733052823492
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052823492
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052823492
		j object_set_attribute_8733052823492
		int_set_attribute_8733052823492:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052823492
		bool_set_attribute_8733052823492:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052823492
		object_set_attribute_8733052823492:
		sw $t1, 8($t0)
		end_set_attribute_8733052823492:
		
		lw $v1, 4($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_value_at_A:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# GET ATTRIBUTE var OF self
		lw $t0, 4($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052823516
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052823516
		j object_get_attribute_8733052823516
		int_get_attribute_8733052823516:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8733052823516
		bool_get_attribute_8733052823516:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8733052823516
		object_get_attribute_8733052823516:
		sw $t1, 0($sp)
		end_get_attribute_8733052823516:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_set_var_at_A:
		# SET ATTRIBUTE var OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8733052793622
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052793622
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052793622
		j object_set_attribute_8733052793622
		int_set_attribute_8733052793622:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052793622
		bool_set_attribute_8733052793622:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052793622
		object_set_attribute_8733052793622:
		sw $t1, 8($t0)
		end_set_attribute_8733052793622:
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method1_at_A:
		lw $v1, 4($sp)
		
		jr $ra
		
	function_method2_at_A:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -24
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num1]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num2]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_B
		jal function___init___at_B
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF B
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 24
		
		jr $ra
		
	function_method3_at_A:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -32
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# ALLOCATING INT -> 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF C
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method4_at_A:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -60
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num2]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num1]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_2
		lw $t0, 48($sp)
		sw $t0, 52($sp)
		
		# IF internal_1 THEN GOTO then_8733052885899
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052885899
		
		# JUMP TO else_8733052885899
		j else_8733052885899
		
		then_8733052885899:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num1]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num2]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD set_var OF D
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_8
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# internal_0 <- internal_6
		lw $t0, 32($sp)
		sw $t0, 56($sp)
		
		# JUMP TO endif_8733052885899
		j endif_8733052885899
		
		else_8733052885899:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num2]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num1]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF D
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_14
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_0 <- internal_12
		lw $t0, 8($sp)
		sw $t0, 56($sp)
		
		# JUMP TO endif_8733052885899
		j endif_8733052885899
		
		endif_8733052885899:
		
		lw $v1, 56($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 60
		
		jr $ra
		
	function_method5_at_A:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -52
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [y]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING NUll INTO -> internal_4
		sw $zero, 32($sp)
		
		while_start_8733052886806:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [y]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than_or_equal
		jal function_less_than_or_equal
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# IF internal_5 THEN GOTO while_body_8733052886806
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8733052886806
		
		# JUMP TO while_end_8733052886806
		j while_end_8733052886806
		
		while_body_8733052886806:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [y]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_6]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [y]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [y]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# JUMP TO while_start_8733052886806
		j while_start_8733052886806
		
		while_end_8733052886806:
		
		# ALLOCATING -> E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_12
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 52
		
		jr $ra
		
	function___init___at_B:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE var OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8733052797510
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052797510
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052797510
		j object_set_attribute_8733052797510
		int_set_attribute_8733052797510:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052797510
		bool_set_attribute_8733052797510:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052797510
		object_set_attribute_8733052797510:
		sw $t1, 8($t0)
		end_set_attribute_8733052797510:
		
		lw $v1, 4($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method5_at_B:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -24
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 24
		
		jr $ra
		
	function___init___at_C:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE var OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8733052797986
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052797986
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052797986
		j object_set_attribute_8733052797986
		int_set_attribute_8733052797986:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052797986
		bool_set_attribute_8733052797986:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052797986
		object_set_attribute_8733052797986:
		sw $t1, 8($t0)
		end_set_attribute_8733052797986:
		
		lw $v1, 4($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_C:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -32
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# ALLOCATING INT -> 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 32
		
		jr $ra
		
	function_method5_at_C:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -28
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF E
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_6
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_D:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE var OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8733052798958
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052798958
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052798958
		j object_set_attribute_8733052798958
		int_set_attribute_8733052798958:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052798958
		bool_set_attribute_8733052798958:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052798958
		object_set_attribute_8733052798958:
		sw $t1, 8($t0)
		end_set_attribute_8733052798958:
		
		lw $v1, 4($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method7_at_D:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -124
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 12
		
		# internal_2 <- internal_4
		lw $t0, 104($sp)
		sw $t0, 112($sp)
		
		# IF internal_2 THEN GOTO then_8733052887028
		lw $t0, 112($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052887028
		
		# JUMP TO else_8733052887028
		j else_8733052887028
		
		then_8733052887028:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# ALLOCATING INT -> 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_6]
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD method7 OF D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 140($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_8
		lw $t0, 88($sp)
		sw $t0, 116($sp)
		
		# JUMP TO endif_8733052887028
		j endif_8733052887028
		
		else_8733052887028:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# internal_12 <- internal_14
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# IF internal_12 THEN GOTO then_8733052887890
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052887890
		
		# JUMP TO else_8733052887890
		j else_8733052887890
		
		then_8733052887890:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# internal_11 <- internal_15
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8733052887890
		j endif_8733052887890
		
		else_8733052887890:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# internal_17 <- internal_19
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# IF internal_17 THEN GOTO then_8733052887944
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052887944
		
		# JUMP TO else_8733052887944
		j else_8733052887944
		
		then_8733052887944:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# internal_16 <- internal_20
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		# JUMP TO endif_8733052887944
		j endif_8733052887944
		
		else_8733052887944:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_23]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_22 <- internal_24
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# IF internal_22 THEN GOTO then_8733052888019
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888019
		
		# JUMP TO else_8733052888019
		j else_8733052888019
		
		then_8733052888019:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_21 <- internal_25
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8733052888019
		j endif_8733052888019
		
		else_8733052888019:
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_26]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD method7 OF D
		lw $t0, 128($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 140($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_27]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_30
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_21 <- internal_28
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8733052888019
		j endif_8733052888019
		
		endif_8733052888019:
		
		# internal_16 <- internal_21
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		# JUMP TO endif_8733052887944
		j endif_8733052887944
		
		endif_8733052887944:
		
		# internal_11 <- internal_16
		lw $t0, 56($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8733052887890
		j endif_8733052887890
		
		endif_8733052887890:
		
		# internal_1 <- internal_11
		lw $t0, 76($sp)
		sw $t0, 116($sp)
		
		# JUMP TO endif_8733052887028
		j endif_8733052887028
		
		endif_8733052887028:
		
		lw $v1, 116($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 124
		
		jr $ra
		
	function___init___at_E:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE var OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8733052801440
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052801440
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052801440
		j object_set_attribute_8733052801440
		int_set_attribute_8733052801440:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052801440
		bool_set_attribute_8733052801440:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052801440
		object_set_attribute_8733052801440:
		sw $t1, 8($t0)
		end_set_attribute_8733052801440:
		
		lw $v1, 4($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_method6_at_E:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -28
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_6
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_A2I:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_c2i_at_A2I:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -216
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 48
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 204($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 216($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# IF internal_1 THEN GOTO then_8733052887977
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052887977
		
		# JUMP TO else_8733052887977
		j else_8733052887977
		
		then_8733052887977:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# internal_0 <- internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		# JUMP TO endif_8733052887977
		j endif_8733052887977
		
		else_8733052887977:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 49
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 184($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# IF internal_6 THEN GOTO then_8733052888601
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888601
		
		# JUMP TO else_8733052888601
		j else_8733052888601
		
		then_8733052888601:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# internal_5 <- internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		# JUMP TO endif_8733052888601
		j endif_8733052888601
		
		else_8733052888601:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 50
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 164($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 176($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# IF internal_11 THEN GOTO then_8733052888655
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888655
		
		# JUMP TO else_8733052888655
		j else_8733052888655
		
		then_8733052888655:
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# internal_10 <- internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		# JUMP TO endif_8733052888655
		j endif_8733052888655
		
		else_8733052888655:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 51
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 144($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# IF internal_16 THEN GOTO then_8733052888709
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888709
		
		# JUMP TO else_8733052888709
		j else_8733052888709
		
		then_8733052888709:
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# internal_15 <- internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		# JUMP TO endif_8733052888709
		j endif_8733052888709
		
		else_8733052888709:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 52
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 124($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_21 <- internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# IF internal_21 THEN GOTO then_8733052888763
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888763
		
		# JUMP TO else_8733052888763
		j else_8733052888763
		
		then_8733052888763:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# internal_20 <- internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		# JUMP TO endif_8733052888763
		j endif_8733052888763
		
		else_8733052888763:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 53
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 104($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_27]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# internal_26 <- internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# IF internal_26 THEN GOTO then_8733052888817
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888817
		
		# JUMP TO else_8733052888817
		j else_8733052888817
		
		then_8733052888817:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# internal_25 <- internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		# JUMP TO endif_8733052888817
		j endif_8733052888817
		
		else_8733052888817:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 54
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 84($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_31 <- internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# IF internal_31 THEN GOTO then_8733052889131
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052889131
		
		# JUMP TO else_8733052889131
		j else_8733052889131
		
		then_8733052889131:
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# internal_30 <- internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052889131
		j endif_8733052889131
		
		else_8733052889131:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 55
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_37]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_36 <- internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# IF internal_36 THEN GOTO then_8733052889185
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052889185
		
		# JUMP TO else_8733052889185
		j else_8733052889185
		
		then_8733052889185:
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# internal_35 <- internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8733052889185
		j endif_8733052889185
		
		else_8733052889185:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 56
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_42]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_41 <- internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# IF internal_41 THEN GOTO then_8733052889239
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052889239
		
		# JUMP TO else_8733052889239
		j else_8733052889239
		
		then_8733052889239:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# internal_40 <- internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8733052889239
		j endif_8733052889239
		
		else_8733052889239:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 57
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_46 <- internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# IF internal_46 THEN GOTO then_8733052889293
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052889293
		
		# JUMP TO else_8733052889293
		j else_8733052889293
		
		then_8733052889293:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# internal_45 <- internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# JUMP TO endif_8733052889293
		j endif_8733052889293
		
		else_8733052889293:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_52
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_45 <- internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		# JUMP TO endif_8733052889293
		j endif_8733052889293
		
		endif_8733052889293:
		
		# internal_40 <- internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8733052889239
		j endif_8733052889239
		
		endif_8733052889239:
		
		# internal_35 <- internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8733052889185
		j endif_8733052889185
		
		endif_8733052889185:
		
		# internal_30 <- internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052889131
		j endif_8733052889131
		
		endif_8733052889131:
		
		# internal_25 <- internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# JUMP TO endif_8733052888817
		j endif_8733052888817
		
		endif_8733052888817:
		
		# internal_20 <- internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		# JUMP TO endif_8733052888763
		j endif_8733052888763
		
		endif_8733052888763:
		
		# internal_15 <- internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# JUMP TO endif_8733052888709
		j endif_8733052888709
		
		endif_8733052888709:
		
		# internal_10 <- internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		# JUMP TO endif_8733052888655
		j endif_8733052888655
		
		endif_8733052888655:
		
		# internal_5 <- internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# JUMP TO endif_8733052888601
		j endif_8733052888601
		
		endif_8733052888601:
		
		# internal_0 <- internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		# JUMP TO endif_8733052887977
		j endif_8733052887977
		
		endif_8733052887977:
		
		lw $v1, 212($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 216
		
		jr $ra
		
	function_i2c_at_A2I:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -216
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 216($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# IF internal_1 THEN GOTO then_8733052888604
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888604
		
		# JUMP TO else_8733052888604
		j else_8733052888604
		
		then_8733052888604:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 48
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 196($sp)
		
		# internal_0 <- internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		# JUMP TO endif_8733052888604
		j endif_8733052888604
		
		else_8733052888604:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# IF internal_6 THEN GOTO then_8733052888718
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052888718
		
		# JUMP TO else_8733052888718
		j else_8733052888718
		
		then_8733052888718:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 49
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 176($sp)
		
		# internal_5 <- internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		# JUMP TO endif_8733052888718
		j endif_8733052888718
		
		else_8733052888718:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 176($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# IF internal_11 THEN GOTO then_8733052889263
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052889263
		
		# JUMP TO else_8733052889263
		j else_8733052889263
		
		then_8733052889263:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 50
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 156($sp)
		
		# internal_10 <- internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		# JUMP TO endif_8733052889263
		j endif_8733052889263
		
		else_8733052889263:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# IF internal_16 THEN GOTO then_8733052889320
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052889320
		
		# JUMP TO else_8733052889320
		j else_8733052889320
		
		then_8733052889320:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 51
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 136($sp)
		
		# internal_15 <- internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		# JUMP TO endif_8733052889320
		j endif_8733052889320
		
		else_8733052889320:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_21 <- internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# IF internal_21 THEN GOTO then_8733052856845
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052856845
		
		# JUMP TO else_8733052856845
		j else_8733052856845
		
		then_8733052856845:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 52
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 116($sp)
		
		# internal_20 <- internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		# JUMP TO endif_8733052856845
		j endif_8733052856845
		
		else_8733052856845:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_27]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# internal_26 <- internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# IF internal_26 THEN GOTO then_8733052856899
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052856899
		
		# JUMP TO else_8733052856899
		j else_8733052856899
		
		then_8733052856899:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 53
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 96($sp)
		
		# internal_25 <- internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		# JUMP TO endif_8733052856899
		j endif_8733052856899
		
		else_8733052856899:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_31 <- internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# IF internal_31 THEN GOTO then_8733052856953
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052856953
		
		# JUMP TO else_8733052856953
		j else_8733052856953
		
		then_8733052856953:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 54
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 76($sp)
		
		# internal_30 <- internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052856953
		j endif_8733052856953
		
		else_8733052856953:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_37]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_36 <- internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# IF internal_36 THEN GOTO then_8733052857007
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052857007
		
		# JUMP TO else_8733052857007
		j else_8733052857007
		
		then_8733052857007:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 55
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 56($sp)
		
		# internal_35 <- internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8733052857007
		j endif_8733052857007
		
		else_8733052857007:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_42]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_41 <- internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# IF internal_41 THEN GOTO then_8733052857061
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052857061
		
		# JUMP TO else_8733052857061
		j else_8733052857061
		
		then_8733052857061:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 56
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 36($sp)
		
		# internal_40 <- internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8733052857061
		j endif_8733052857061
		
		else_8733052857061:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_46 <- internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# IF internal_46 THEN GOTO then_8733052857067
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052857067
		
		# JUMP TO else_8733052857067
		j else_8733052857067
		
		then_8733052857067:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 57
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 16($sp)
		
		# internal_45 <- internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# JUMP TO endif_8733052857067
		j endif_8733052857067
		
		else_8733052857067:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF A2I
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_52
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 0($sp)
		
		# internal_45 <- internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		# JUMP TO endif_8733052857067
		j endif_8733052857067
		
		endif_8733052857067:
		
		# internal_40 <- internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8733052857061
		j endif_8733052857061
		
		endif_8733052857061:
		
		# internal_35 <- internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8733052857007
		j endif_8733052857007
		
		endif_8733052857007:
		
		# internal_30 <- internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052856953
		j endif_8733052856953
		
		endif_8733052856953:
		
		# internal_25 <- internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# JUMP TO endif_8733052856899
		j endif_8733052856899
		
		endif_8733052856899:
		
		# internal_20 <- internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		# JUMP TO endif_8733052856845
		j endif_8733052856845
		
		endif_8733052856845:
		
		# internal_15 <- internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# JUMP TO endif_8733052889320
		j endif_8733052889320
		
		endif_8733052889320:
		
		# internal_10 <- internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		# JUMP TO endif_8733052889263
		j endif_8733052889263
		
		endif_8733052889263:
		
		# internal_5 <- internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# JUMP TO endif_8733052888718
		j endif_8733052888718
		
		endif_8733052888718:
		
		# internal_0 <- internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		# JUMP TO endif_8733052888604
		j endif_8733052888604
		
		endif_8733052888604:
		
		lw $v1, 212($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 216
		
		jr $ra
		
	function_a2i_at_A2I:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -224
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 212($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 220($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 224($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_6
		lw $t0, 196($sp)
		sw $t0, 216($sp)
		
		# IF internal_1 THEN GOTO then_8733052889212
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052889212
		
		# JUMP TO else_8733052889212
		j else_8733052889212
		
		then_8733052889212:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# internal_0 <- internal_7
		lw $t0, 192($sp)
		sw $t0, 220($sp)
		
		# JUMP TO endif_8733052889212
		j endif_8733052889212
		
		else_8733052889212:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 168($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 164($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 196($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 192($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_14
		lw $t0, 180($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 45
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 160($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		# internal_9 <- internal_16
		lw $t0, 156($sp)
		sw $t0, 184($sp)
		
		# IF internal_9 THEN GOTO then_8733052856860
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052856860
		
		# JUMP TO else_8733052856860
		j else_8733052856860
		
		then_8733052856860:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_20
		lw $t0, 148($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_21]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 124($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 120($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 168($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_25
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# GET METHOD a2i_aux OF A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_23]
		lw $t0, 140($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_28
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# ALLOCATING INT -> 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_26]
		lw $t0, 128($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- internal_31
		lw $t0, 96($sp)
		sw $t0, 188($sp)
		
		# JUMP TO endif_8733052856860
		j endif_8733052856860
		
		else_8733052856860:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_34]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_35]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_38
		lw $t0, 84($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 43
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_36]
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_39]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_33 <- internal_40
		lw $t0, 60($sp)
		sw $t0, 88($sp)
		
		# IF internal_33 THEN GOTO then_8733052857043
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052857043
		
		# JUMP TO else_8733052857043
		j else_8733052857043
		
		then_8733052857043:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_44
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_42]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_41]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_46]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_49
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD a2i_aux OF A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_52
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_32 <- internal_50
		lw $t0, 20($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052857043
		j endif_8733052857043
		
		else_8733052857043:
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD a2i_aux OF A2I
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_32 <- internal_53
		lw $t0, 8($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052857043
		j endif_8733052857043
		
		endif_8733052857043:
		
		# internal_8 <- internal_32
		lw $t0, 92($sp)
		sw $t0, 188($sp)
		
		# JUMP TO endif_8733052856860
		j endif_8733052856860
		
		endif_8733052856860:
		
		# internal_0 <- internal_8
		lw $t0, 188($sp)
		sw $t0, 220($sp)
		
		# JUMP TO endif_8733052889212
		j endif_8733052889212
		
		endif_8733052889212:
		
		lw $v1, 220($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 224
		
		jr $ra
		
	function_a2i_aux_at_A2I:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -88
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [int]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# GET METHOD length OF String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 68($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [j]
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING NUll INTO -> internal_8
		sw $zero, 52($sp)
		
		while_start_8733052857221:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [j]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# IF internal_9 THEN GOTO while_body_8733052857221
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8733052857221
		
		# JUMP TO while_end_8733052857221
		j while_end_8733052857221
		
		while_body_8733052857221:
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [int]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD substr OF String
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 104($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_15
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD c2i OF A2I
		lw $t0, 92($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_18
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [int]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_21]
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# JUMP TO while_start_8733052857221
		j while_start_8733052857221
		
		while_end_8733052857221:
		
		lw $v1, 84($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 88
		
		jr $ra
		
	function_i2a_at_A2I:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -96
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# IF internal_1 THEN GOTO then_8733052857323
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052857323
		
		# JUMP TO else_8733052857323
		j else_8733052857323
		
		then_8733052857323:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 48
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 76($sp)
		
		# internal_0 <- internal_4
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052857323
		j endif_8733052857323
		
		else_8733052857323:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [i]
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_8
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# IF internal_6 THEN GOTO then_8733052857968
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052857968
		
		# JUMP TO else_8733052857968
		j else_8733052857968
		
		then_8733052857968:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# GET METHOD i2a_aux OF A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [i]
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# internal_5 <- internal_9
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8733052857968
		j endif_8733052857968
		
		else_8733052857968:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 45
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 44($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING INT -> 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD i2a_aux OF A2I
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_20
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_5 <- internal_21
		lw $t0, 8($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8733052857968
		j endif_8733052857968
		
		endif_8733052857968:
		
		# internal_0 <- internal_5
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8733052857323
		j endif_8733052857323
		
		endif_8733052857323:
		
		lw $v1, 92($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 96
		
		jr $ra
		
	function_i2a_aux_at_A2I:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -80
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# IF internal_1 THEN GOTO then_8733052857947
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052857947
		
		# JUMP TO else_8733052857947
		j else_8733052857947
		
		then_8733052857947:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 60($sp)
		
		# internal_0 <- internal_4
		lw $t0, 60($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8733052857947
		j endif_8733052857947
		
		else_8733052857947:
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_6]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [next]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD i2a_aux OF A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [next]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [next]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD i2c OF A2I
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_16
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_19
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_0 <- internal_17
		lw $t0, 8($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8733052857947
		j endif_8733052857947
		
		endif_8733052857947:
		
		lw $v1, 76($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 80
		
		jr $ra
		
	function___init___at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 12($sp)
		
		# SET ATTRIBUTE char OF self
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		beq $t1, $zero, object_set_attribute_8733052782294
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052782294
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052782294
		j object_set_attribute_8733052782294
		int_set_attribute_8733052782294:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052782294
		bool_set_attribute_8733052782294:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052782294
		object_set_attribute_8733052782294:
		sw $t1, 8($t0)
		end_set_attribute_8733052782294:
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 8($sp)
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8733052782318
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052782318
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052782318
		j object_set_attribute_8733052782318
		int_set_attribute_8733052782318:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052782318
		bool_set_attribute_8733052782318:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052782318
		object_set_attribute_8733052782318:
		sw $t1, 12($t0)
		end_set_attribute_8733052782318:
		
		# ALLOCATING NUll INTO -> internal_2
		sw $zero, 4($sp)
		
		# SET ATTRIBUTE a_var OF self
		lw $t0, 16($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8733052782605
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052782605
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052782605
		j object_set_attribute_8733052782605
		int_set_attribute_8733052782605:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8733052782605
		bool_set_attribute_8733052782605:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8733052782605
		object_set_attribute_8733052782605:
		sw $t1, 16($t0)
		end_set_attribute_8733052782605:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE flag OF self
		lw $t0, 16($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8733052782626
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052782626
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052782626
		j object_set_attribute_8733052782626
		int_set_attribute_8733052782626:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8733052782626
		bool_set_attribute_8733052782626:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8733052782626
		object_set_attribute_8733052782626:
		sw $t1, 20($t0)
		end_set_attribute_8733052782626:
		
		lw $v1, 16($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_menu_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -428
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 30
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 30
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		addi $t0, $zero, 9
		sb $t0, 9($v0)
		
		addi $t0, $zero, 84
		sb $t0, 10($v0)
		
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 97
		sb $t0, 13($v0)
		
		addi $t0, $zero, 100
		sb $t0, 14($v0)
		
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 97
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 110
		sb $t0, 19($v0)
		
		addi $t0, $zero, 117
		sb $t0, 20($v0)
		
		addi $t0, $zero, 109
		sb $t0, 21($v0)
		
		addi $t0, $zero, 98
		sb $t0, 22($v0)
		
		addi $t0, $zero, 101
		sb $t0, 23($v0)
		
		addi $t0, $zero, 114
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 116
		sb $t0, 26($v0)
		
		addi $t0, $zero, 111
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		sb $zero, 29($v0)
		
		sw $v0, 424($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 416($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 416($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 412($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 436($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 424($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 432($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052782746
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052782746
		j object_get_attribute_8733052782746
		int_get_attribute_8733052782746:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 408($sp)
		j end_get_attribute_8733052782746
		bool_get_attribute_8733052782746:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 408($sp)
		j end_get_attribute_8733052782746
		object_get_attribute_8733052782746:
		sw $t1, 408($sp)
		end_get_attribute_8733052782746:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 400($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 400($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 396($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 420($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 408($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 416($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 97
		sb $t0, 17($v0)
		
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 392($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 384($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 384($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 380($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 404($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 392($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 400($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		
		addi $t0, $zero, 103
		sb $t0, 14($v0)
		
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		
		addi $t0, $zero, 116
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		sb $zero, 19($v0)
		
		sw $v0, 376($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 368($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 368($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 364($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 388($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_15
		lw $t0, 376($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 384($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052783186
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052783186
		j object_get_attribute_8733052783186
		int_get_attribute_8733052783186:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 360($sp)
		j end_get_attribute_8733052783186
		bool_get_attribute_8733052783186:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 360($sp)
		j end_get_attribute_8733052783186
		object_get_attribute_8733052783186:
		sw $t1, 360($sp)
		end_get_attribute_8733052783186:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 352($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 352($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 348($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 372($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_19
		lw $t0, 360($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 368($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 98
		sb $t0, 17($v0)
		
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 344($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 336($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 336($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 332($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 356($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 344($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 352($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 41
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 41
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 102
		sb $t0, 12($v0)
		
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		
		addi $t0, $zero, 104
		sb $t0, 18($v0)
		
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 100
		sb $t0, 21($v0)
		
		addi $t0, $zero, 105
		sb $t0, 22($v0)
		
		addi $t0, $zero, 102
		sb $t0, 23($v0)
		
		addi $t0, $zero, 102
		sb $t0, 24($v0)
		
		addi $t0, $zero, 101
		sb $t0, 25($v0)
		
		addi $t0, $zero, 114
		sb $t0, 26($v0)
		
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		
		addi $t0, $zero, 110
		sb $t0, 28($v0)
		
		addi $t0, $zero, 99
		sb $t0, 29($v0)
		
		addi $t0, $zero, 101
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 98
		sb $t0, 32($v0)
		
		addi $t0, $zero, 101
		sb $t0, 33($v0)
		
		addi $t0, $zero, 116
		sb $t0, 34($v0)
		
		addi $t0, $zero, 119
		sb $t0, 35($v0)
		
		addi $t0, $zero, 101
		sb $t0, 36($v0)
		
		addi $t0, $zero, 101
		sb $t0, 37($v0)
		
		addi $t0, $zero, 110
		sb $t0, 38($v0)
		
		addi $t0, $zero, 32
		sb $t0, 39($v0)
		
		sb $zero, 40($v0)
		
		sw $v0, 328($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 320($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 320($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 316($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_24]
		lw $t0, 340($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_27
		lw $t0, 328($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 336($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052783626
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052783626
		j object_get_attribute_8733052783626
		int_get_attribute_8733052783626:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp)
		j end_get_attribute_8733052783626
		bool_get_attribute_8733052783626:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 312($sp)
		j end_get_attribute_8733052783626
		object_get_attribute_8733052783626:
		sw $t1, 312($sp)
		end_get_attribute_8733052783626:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 304($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 304($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 300($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_31
		lw $t0, 312($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 320($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 39
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 39
		sw $t0, 4($v0)
		
		addi $t0, $zero, 97
		sb $t0, 8($v0)
		
		addi $t0, $zero, 110
		sb $t0, 9($v0)
		
		addi $t0, $zero, 100
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 97
		sb $t0, 12($v0)
		
		addi $t0, $zero, 110
		sb $t0, 13($v0)
		
		addi $t0, $zero, 111
		sb $t0, 14($v0)
		
		addi $t0, $zero, 116
		sb $t0, 15($v0)
		
		addi $t0, $zero, 104
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 114
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 110
		sb $t0, 20($v0)
		
		addi $t0, $zero, 117
		sb $t0, 21($v0)
		
		addi $t0, $zero, 109
		sb $t0, 22($v0)
		
		addi $t0, $zero, 98
		sb $t0, 23($v0)
		
		addi $t0, $zero, 101
		sb $t0, 24($v0)
		
		addi $t0, $zero, 114
		sb $t0, 25($v0)
		
		addi $t0, $zero, 46
		sb $t0, 26($v0)
		
		addi $t0, $zero, 46
		sb $t0, 27($v0)
		
		addi $t0, $zero, 46
		sb $t0, 28($v0)
		
		addi $t0, $zero, 101
		sb $t0, 29($v0)
		
		addi $t0, $zero, 110
		sb $t0, 30($v0)
		
		addi $t0, $zero, 116
		sb $t0, 31($v0)
		
		addi $t0, $zero, 101
		sb $t0, 32($v0)
		
		addi $t0, $zero, 114
		sb $t0, 33($v0)
		
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		
		addi $t0, $zero, 99
		sb $t0, 35($v0)
		
		addi $t0, $zero, 58
		sb $t0, 36($v0)
		
		addi $t0, $zero, 10
		sb $t0, 37($v0)
		
		sb $zero, 38($v0)
		
		sw $v0, 296($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 288($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 288($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 284($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 308($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_35
		lw $t0, 296($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 35
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 35
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 102
		sb $t0, 12($v0)
		
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		
		addi $t0, $zero, 104
		sb $t0, 18($v0)
		
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		
		addi $t0, $zero, 97
		sb $t0, 22($v0)
		
		addi $t0, $zero, 99
		sb $t0, 23($v0)
		
		addi $t0, $zero, 116
		sb $t0, 24($v0)
		
		addi $t0, $zero, 111
		sb $t0, 25($v0)
		
		addi $t0, $zero, 114
		sb $t0, 26($v0)
		
		addi $t0, $zero, 105
		sb $t0, 27($v0)
		
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		
		addi $t0, $zero, 108
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 111
		sb $t0, 31($v0)
		
		addi $t0, $zero, 102
		sb $t0, 32($v0)
		
		addi $t0, $zero, 32
		sb $t0, 33($v0)
		
		sb $zero, 34($v0)
		
		sw $v0, 280($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 272($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 272($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 268($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_36]
		lw $t0, 292($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_39
		lw $t0, 280($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 288($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052783806
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052783806
		j object_get_attribute_8733052783806
		int_get_attribute_8733052783806:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 264($sp)
		j end_get_attribute_8733052783806
		bool_get_attribute_8733052783806:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 264($sp)
		j end_get_attribute_8733052783806
		object_get_attribute_8733052783806:
		sw $t1, 264($sp)
		end_get_attribute_8733052783806:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 256($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 256($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 252($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_40]
		lw $t0, 276($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_43
		lw $t0, 264($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 272($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 100
		sb $t0, 17($v0)
		
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 248($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 240($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 236($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_44]
		lw $t0, 260($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_47
		lw $t0, 248($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 256($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 113
		sb $t0, 13($v0)
		
		addi $t0, $zero, 117
		sb $t0, 14($v0)
		
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		
		addi $t0, $zero, 114
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		sb $zero, 19($v0)
		
		sw $v0, 232($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 224($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 220($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_48]
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_51
		lw $t0, 232($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052784246
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052784246
		j object_get_attribute_8733052784246
		int_get_attribute_8733052784246:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 216($sp)
		j end_get_attribute_8733052784246
		bool_get_attribute_8733052784246:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 216($sp)
		j end_get_attribute_8733052784246
		object_get_attribute_8733052784246:
		sw $t1, 216($sp)
		end_get_attribute_8733052784246:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 216($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 224($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 200($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 192($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 188($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_56]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_59
		lw $t0, 200($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 18
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 18
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 99
		sb $t0, 12($v0)
		
		addi $t0, $zero, 117
		sb $t0, 13($v0)
		
		addi $t0, $zero, 98
		sb $t0, 14($v0)
		
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		sb $zero, 17($v0)
		
		sw $v0, 184($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 176($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 172($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_63
		lw $t0, 184($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052784686
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052784686
		j object_get_attribute_8733052784686
		int_get_attribute_8733052784686:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 168($sp)
		j end_get_attribute_8733052784686
		bool_get_attribute_8733052784686:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 168($sp)
		j end_get_attribute_8733052784686
		object_get_attribute_8733052784686:
		sw $t1, 168($sp)
		end_get_attribute_8733052784686:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 160($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 156($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_64]
		lw $t0, 180($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_67
		lw $t0, 168($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 46
		sb $t0, 8($v0)
		
		addi $t0, $zero, 46
		sb $t0, 9($v0)
		
		addi $t0, $zero, 46
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 110
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 102
		sb $t0, 17($v0)
		
		addi $t0, $zero, 58
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 152($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_68]
		lw $t0, 164($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_71
		lw $t0, 152($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 25
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 25
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 102
		sb $t0, 12($v0)
		
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 111
		sb $t0, 17($v0)
		
		addi $t0, $zero, 117
		sb $t0, 18($v0)
		
		addi $t0, $zero, 116
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 105
		sb $t0, 21($v0)
		
		addi $t0, $zero, 102
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		sb $zero, 24($v0)
		
		sw $v0, 136($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 128($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 124($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_72]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_75
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052784866
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052784866
		j object_get_attribute_8733052784866
		int_get_attribute_8733052784866:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 120($sp)
		j end_get_attribute_8733052784866
		bool_get_attribute_8733052784866:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 120($sp)
		j end_get_attribute_8733052784866
		object_get_attribute_8733052784866:
		sw $t1, 120($sp)
		end_get_attribute_8733052784866:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_76]
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_79
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 39
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 39
		sw $t0, 4($v0)
		
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 97
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 109
		sb $t0, 13($v0)
		
		addi $t0, $zero, 117
		sb $t0, 14($v0)
		
		addi $t0, $zero, 108
		sb $t0, 15($v0)
		
		addi $t0, $zero, 116
		sb $t0, 16($v0)
		
		addi $t0, $zero, 105
		sb $t0, 17($v0)
		
		addi $t0, $zero, 112
		sb $t0, 18($v0)
		
		addi $t0, $zero, 108
		sb $t0, 19($v0)
		
		addi $t0, $zero, 101
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 111
		sb $t0, 22($v0)
		
		addi $t0, $zero, 102
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 51
		sb $t0, 25($v0)
		
		addi $t0, $zero, 46
		sb $t0, 26($v0)
		
		addi $t0, $zero, 46
		sb $t0, 27($v0)
		
		addi $t0, $zero, 46
		sb $t0, 28($v0)
		
		addi $t0, $zero, 101
		sb $t0, 29($v0)
		
		addi $t0, $zero, 110
		sb $t0, 30($v0)
		
		addi $t0, $zero, 116
		sb $t0, 31($v0)
		
		addi $t0, $zero, 101
		sb $t0, 32($v0)
		
		addi $t0, $zero, 114
		sb $t0, 33($v0)
		
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		
		addi $t0, $zero, 103
		sb $t0, 35($v0)
		
		addi $t0, $zero, 58
		sb $t0, 36($v0)
		
		addi $t0, $zero, 10
		sb $t0, 37($v0)
		
		sb $zero, 38($v0)
		
		sw $v0, 104($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 96($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_80]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_83
		lw $t0, 104($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 100
		sb $t0, 12($v0)
		
		addi $t0, $zero, 105
		sb $t0, 13($v0)
		
		addi $t0, $zero, 118
		sb $t0, 14($v0)
		
		addi $t0, $zero, 105
		sb $t0, 15($v0)
		
		addi $t0, $zero, 100
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		sb $zero, 19($v0)
		
		sw $v0, 88($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 80($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 76($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_87
		lw $t0, 88($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 428($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052785306
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052785306
		j object_get_attribute_8733052785306
		int_get_attribute_8733052785306:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8733052785306
		bool_get_attribute_8733052785306:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8733052785306
		object_get_attribute_8733052785306:
		sw $t1, 72($sp)
		end_get_attribute_8733052785306:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD print OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_88]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_91
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 25
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 25
		sw $t0, 4($v0)
		
		addi $t0, $zero, 98
		sb $t0, 8($v0)
		
		addi $t0, $zero, 121
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 56
		sb $t0, 11($v0)
		
		addi $t0, $zero, 46
		sb $t0, 12($v0)
		
		addi $t0, $zero, 46
		sb $t0, 13($v0)
		
		addi $t0, $zero, 46
		sb $t0, 14($v0)
		
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		
		addi $t0, $zero, 110
		sb $t0, 16($v0)
		
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 114
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 104
		sb $t0, 21($v0)
		
		addi $t0, $zero, 58
		sb $t0, 22($v0)
		
		addi $t0, $zero, 10
		sb $t0, 23($v0)
		
		sb $zero, 24($v0)
		
		sw $v0, 56($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_92]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_95
		lw $t0, 56($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 41
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 41
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 103
		sb $t0, 12($v0)
		
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 97
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 110
		sb $t0, 18($v0)
		
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		
		addi $t0, $zero, 119
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		
		addi $t0, $zero, 117
		sb $t0, 23($v0)
		
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		
		addi $t0, $zero, 98
		sb $t0, 25($v0)
		
		addi $t0, $zero, 101
		sb $t0, 26($v0)
		
		addi $t0, $zero, 114
		sb $t0, 27($v0)
		
		addi $t0, $zero, 46
		sb $t0, 28($v0)
		
		addi $t0, $zero, 46
		sb $t0, 29($v0)
		
		addi $t0, $zero, 46
		sb $t0, 30($v0)
		
		addi $t0, $zero, 101
		sb $t0, 31($v0)
		
		addi $t0, $zero, 110
		sb $t0, 32($v0)
		
		addi $t0, $zero, 116
		sb $t0, 33($v0)
		
		addi $t0, $zero, 101
		sb $t0, 34($v0)
		
		addi $t0, $zero, 114
		sb $t0, 35($v0)
		
		addi $t0, $zero, 32
		sb $t0, 36($v0)
		
		addi $t0, $zero, 106
		sb $t0, 37($v0)
		
		addi $t0, $zero, 58
		sb $t0, 38($v0)
		
		addi $t0, $zero, 10
		sb $t0, 39($v0)
		
		sb $zero, 40($v0)
		
		sw $v0, 40($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_99
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 30
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 30
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 84
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 113
		sb $t0, 12($v0)
		
		addi $t0, $zero, 117
		sb $t0, 13($v0)
		
		addi $t0, $zero, 105
		sb $t0, 14($v0)
		
		addi $t0, $zero, 116
		sb $t0, 15($v0)
		
		addi $t0, $zero, 46
		sb $t0, 16($v0)
		
		addi $t0, $zero, 46
		sb $t0, 17($v0)
		
		addi $t0, $zero, 46
		sb $t0, 18($v0)
		
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		
		addi $t0, $zero, 110
		sb $t0, 20($v0)
		
		addi $t0, $zero, 116
		sb $t0, 21($v0)
		
		addi $t0, $zero, 101
		sb $t0, 22($v0)
		
		addi $t0, $zero, 114
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 113
		sb $t0, 25($v0)
		
		addi $t0, $zero, 58
		sb $t0, 26($v0)
		
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		
		addi $t0, $zero, 10
		sb $t0, 28($v0)
		
		sb $zero, 29($v0)
		
		sw $v0, 24($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_100]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_103
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD in_string OF Main
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 436($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_106
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 428
		
		jr $ra
		
	function_prompt_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -44
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 40($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 35
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 35
		sw $t0, 4($v0)
		
		addi $t0, $zero, 80
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 101
		sb $t0, 10($v0)
		
		addi $t0, $zero, 97
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		
		addi $t0, $zero, 110
		sb $t0, 16($v0)
		
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 114
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 97
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 110
		sb $t0, 23($v0)
		
		addi $t0, $zero, 117
		sb $t0, 24($v0)
		
		addi $t0, $zero, 109
		sb $t0, 25($v0)
		
		addi $t0, $zero, 98
		sb $t0, 26($v0)
		
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		
		addi $t0, $zero, 114
		sb $t0, 28($v0)
		
		addi $t0, $zero, 46
		sb $t0, 29($v0)
		
		addi $t0, $zero, 46
		sb $t0, 30($v0)
		
		addi $t0, $zero, 46
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		addi $t0, $zero, 32
		sb $t0, 33($v0)
		
		sb $zero, 34($v0)
		
		sw $v0, 24($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD in_string OF Main
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 44
		
		jr $ra
		
	function_get_int_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -36
		
		# ALLOCATING -> A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [z]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD prompt OF Main
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [s]
		lw $t0, 36($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD a2i OF A2I
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [z]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_8
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 36
		
		jr $ra
		
	function_is_even_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -104
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# internal_2 <- internal_4
		lw $t0, 84($sp)
		sw $t0, 92($sp)
		
		# IF internal_2 THEN GOTO then_8733052859444
		lw $t0, 92($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052859444
		
		# JUMP TO else_8733052859444
		j else_8733052859444
		
		then_8733052859444:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# ALLOCATING INT -> 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_6]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD is_even OF Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_8
		lw $t0, 68($sp)
		sw $t0, 96($sp)
		
		# JUMP TO endif_8733052859444
		j endif_8733052859444
		
		else_8733052859444:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# internal_12 <- internal_14
		lw $t0, 44($sp)
		sw $t0, 52($sp)
		
		# IF internal_12 THEN GOTO then_8733052859639
		lw $t0, 52($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052859639
		
		# JUMP TO else_8733052859639
		j else_8733052859639
		
		then_8733052859639:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# internal_11 <- internal_15
		lw $t0, 40($sp)
		sw $t0, 56($sp)
		
		# JUMP TO endif_8733052859639
		j endif_8733052859639
		
		else_8733052859639:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_17 <- internal_19
		lw $t0, 24($sp)
		sw $t0, 32($sp)
		
		# IF internal_17 THEN GOTO then_8733052860206
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052860206
		
		# JUMP TO else_8733052860206
		j else_8733052860206
		
		then_8733052860206:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_16 <- internal_20
		lw $t0, 20($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8733052860206
		j endif_8733052860206
		
		else_8733052860206:
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_21]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD is_even OF Main
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_25
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_23
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8733052860206
		j endif_8733052860206
		
		endif_8733052860206:
		
		# internal_11 <- internal_16
		lw $t0, 36($sp)
		sw $t0, 56($sp)
		
		# JUMP TO endif_8733052859639
		j endif_8733052859639
		
		endif_8733052859639:
		
		# internal_1 <- internal_11
		lw $t0, 56($sp)
		sw $t0, 96($sp)
		
		# JUMP TO endif_8733052859444
		j endif_8733052859444
		
		endif_8733052859444:
		
		lw $v1, 96($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 104
		
		jr $ra
		
	function_class_type_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -332
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 328($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 324($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 320($sp)
		
		# ALLOCATING NUll INTO -> internal_3
		sw $zero, 316($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 308($sp)
		
		# internal_6 <- TYPEOF var
		lw $t0, 332($sp)
		lw $t0, 0($t0)
		sw $t0, 304($sp)
		
		# internal_7 <- internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		while_start_8733052859408:
		
		# internal_5 <- EQUALADDRESS (internal_7, internal_3)
		lw $t0, 300($sp)
		lw $t1, 316($sp)
		seq $t2, $t0, $t1
		lw $t0, 308($sp)
		sw $t2, 8($t0)
		
		# IF internal_5 THEN GOTO while_end_8733052859408
		lw $t0, 308($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8733052859408
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 324($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 324($sp)
		addi $sp, $sp, 12
		
		# internal_7 <- ANCESTOR OF internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		# JUMP TO while_start_8733052859408
		j while_start_8733052859408
		
		while_end_8733052859408:
		
		# internal_7 <- internal_6
		lw $t0, 304($sp)
		sw $t0, 300($sp)
		
		# INITIALIZE ARRAY [internal_4]
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 296($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 292($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 288($sp)
		
		foreach_start_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# IF internal_10 THEN GOTO foreach_body_8733052859408
		lw $t0, 288($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8733052859408
		
		# JUMP TO foreach_end_8733052859408
		j foreach_end_8733052859408
		
		foreach_body_8733052859408:
		
		# ARRAY internal_8[internal_9] <- internal_7
		lw $t0, 292($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 296($sp)
		add $t1, $t1, $t0
		lw $t0, 300($sp)
		sw $t0, 0($t1)
		
		# internal_7 <- ANCESTOR OF internal_7
		lw $t0, 300($sp)
		lw $t0, 4($t0)
		sw $t0, 300($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 304($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8733052859408
		j foreach_start_8733052859408
		
		foreach_end_8733052859408:
		
		# INITIALIZE ARRAY [internal_2]
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 284($sp)
		
		# INITIALIZE ARRAY [internal_2]
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 280($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 272($sp)
		
		# internal_13 <- DIRECTION OF A
		la $t0, type_A
		sw $t0, 276($sp)
		
		# ARRAY internal_11[internal_14] <- internal_13
		lw $t0, 272($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 276($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_12[internal_14] <- internal_4
		lw $t0, 272($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 264($sp)
		
		# internal_15 <- DIRECTION OF B
		la $t0, type_B
		sw $t0, 268($sp)
		
		# ARRAY internal_11[internal_16] <- internal_15
		lw $t0, 264($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 268($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_12[internal_16] <- internal_4
		lw $t0, 264($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 256($sp)
		
		# internal_17 <- DIRECTION OF C
		la $t0, type_C
		sw $t0, 260($sp)
		
		# ARRAY internal_11[internal_18] <- internal_17
		lw $t0, 256($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 260($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_12[internal_18] <- internal_4
		lw $t0, 256($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 248($sp)
		
		# internal_19 <- DIRECTION OF D
		la $t0, type_D
		sw $t0, 252($sp)
		
		# ARRAY internal_11[internal_20] <- internal_19
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 252($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_12[internal_20] <- internal_4
		lw $t0, 248($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# internal_21 <- DIRECTION OF E
		la $t0, type_E
		sw $t0, 244($sp)
		
		# ARRAY internal_11[internal_22] <- internal_21
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 244($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_12[internal_22] <- internal_4
		lw $t0, 240($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# internal_23 <- DIRECTION OF Object
		la $t0, type_Object
		sw $t0, 236($sp)
		
		# ARRAY internal_11[internal_24] <- internal_23
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 236($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_12[internal_24] <- internal_4
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 312($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 228($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		foreach_type_start_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 332($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 236($sp)
		addi $sp, $sp, 12
		
		# IF internal_26 THEN GOTO foreach_type_body_8733052859408
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8733052859408
		
		# JUMP TO foreach_type_end_8733052859408
		j foreach_type_end_8733052859408
		
		foreach_type_body_8733052859408:
		
		# internal_27 <- ARRAY internal_11[internal_25]
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 284($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 220($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 340($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 228($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 224($sp)
		addi $sp, $sp, 12
		
		# IF internal_29 THEN GOTO foreach_ancestor_body_8733052859408
		lw $t0, 212($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8733052859408
		
		# JUMP TO foreach_ancestor_end_8733052859408
		j foreach_ancestor_end_8733052859408
		
		foreach_ancestor_body_8733052859408:
		
		# internal_30 <- ARRAY internal_8[internal_28]
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 296($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 208($sp)
		
		# internal_31 <- EQUALADDRESS (internal_27, internal_30)
		lw $t0, 220($sp)
		lw $t1, 208($sp)
		seq $t2, $t0, $t1
		lw $t0, 204($sp)
		sw $t2, 8($t0)
		
		# IF internal_31 THEN GOTO foreach_ancestor_end_8733052859408
		lw $t0, 204($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8733052859408
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 228($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8733052859408
		j foreach_ancestor_start_8733052859408
		
		foreach_ancestor_end_8733052859408:
		
		# ARRAY internal_12[internal_25] <- internal_28
		lw $t0, 228($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8733052859408
		j foreach_type_start_8733052859408
		
		foreach_type_end_8733052859408:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_35]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 332($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp)
		addi $sp, $sp, 12
		
		# IF internal_36 THEN GOTO foreach_min_body_8733052859408
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8733052859408
		
		# JUMP TO foreach_min_end_8733052859408
		j foreach_min_end_8733052859408
		
		foreach_min_body_8733052859408:
		
		# internal_34 <- ARRAY internal_12[internal_32]
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 280($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 192($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_34]
		lw $t0, 204($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_35]
		lw $t0, 200($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 196($sp)
		addi $sp, $sp, 12
		
		# IF internal_36 THEN GOTO update_min_8733052859408
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8733052859408
		
		# JUMP TO update_min_end_8733052859408
		j update_min_end_8733052859408
		
		update_min_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_35]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_34]
		lw $t0, 204($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_33]
		lw $t0, 208($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		update_min_end_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 336($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8733052859408
		j foreach_min_start_8733052859408
		
		foreach_min_end_8733052859408:
		
		# INITIALIZE ARRAY [internal_2]
		lw $t0, 320($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 180($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# ARRAY internal_37[internal_38] <- internal_0
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		# ARRAY internal_37[internal_39] <- internal_0
		lw $t0, 172($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ARRAY internal_37[internal_40] <- internal_0
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# ARRAY internal_37[internal_41] <- internal_0
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ARRAY internal_37[internal_42] <- internal_0
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# ARRAY internal_37[internal_43] <- internal_0
		lw $t0, 156($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 328($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_35]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 164($sp)
		addi $sp, $sp, 12
		
		# IF internal_44 THEN GOTO error_branch_8733052859408
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8733052859408
		
		# ARRAY internal_37[internal_33] <- internal_1
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 324($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# internal_45 <- ARRAY internal_37[internal_46]
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 THEN GOTO branch_A_8733052859408
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_A_8733052859408
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		# internal_45 <- ARRAY internal_37[internal_47]
		lw $t0, 140($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 THEN GOTO branch_B_8733052859408
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_B_8733052859408
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# internal_45 <- ARRAY internal_37[internal_48]
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 THEN GOTO branch_C_8733052859408
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_C_8733052859408
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# internal_45 <- ARRAY internal_37[internal_49]
		lw $t0, 132($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 THEN GOTO branch_D_8733052859408
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_D_8733052859408
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# internal_45 <- ARRAY internal_37[internal_50]
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 THEN GOTO branch_E_8733052859408
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_E_8733052859408
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# internal_45 <- ARRAY internal_37[internal_51]
		lw $t0, 124($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 180($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 148($sp)
		sw $t0, 8($t2)
		
		# IF internal_45 THEN GOTO branch_Object_8733052859408
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Object_8733052859408
		
		branch_A_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [a]
		lw $t0, 128($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [var]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 65
		sb $t0, 26($v0)
		
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 112($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 100($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_54]
		lw $t0, 124($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_57
		lw $t0, 112($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_55]
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_55
		lw $t0, 108($sp)
		sw $t0, 120($sp)
		
		# JUMP TO branch_end_8733052859408
		j branch_end_8733052859408
		
		branch_B_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [b]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [var]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 66
		sb $t0, 26($v0)
		
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 92($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_59]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_62
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_60]
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_60
		lw $t0, 88($sp)
		sw $t0, 120($sp)
		
		# JUMP TO branch_end_8733052859408
		j branch_end_8733052859408
		
		branch_C_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [c]
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [var]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 67
		sb $t0, 26($v0)
		
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 72($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_64]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_67
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_65
		lw $t0, 68($sp)
		sw $t0, 120($sp)
		
		# JUMP TO branch_end_8733052859408
		j branch_end_8733052859408
		
		branch_D_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [d]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [var]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 68
		sb $t0, 26($v0)
		
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 52($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_72
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_70]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_70
		lw $t0, 48($sp)
		sw $t0, 120($sp)
		
		# JUMP TO branch_end_8733052859408
		j branch_end_8733052859408
		
		branch_E_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [e]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [var]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 67
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 97
		sb $t0, 10($v0)
		
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 116
		sb $t0, 14($v0)
		
		addi $t0, $zero, 121
		sb $t0, 15($v0)
		
		addi $t0, $zero, 112
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		
		addi $t0, $zero, 115
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 119
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 69
		sb $t0, 26($v0)
		
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 32($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_74]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_77
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_75]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_75
		lw $t0, 28($sp)
		sw $t0, 120($sp)
		
		# JUMP TO branch_end_8733052859408
		j branch_end_8733052859408
		
		branch_Object_8733052859408:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [o]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [var]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		
		addi $t0, $zero, 79
		sb $t0, 8($v0)
		
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		
		addi $t0, $zero, 112
		sb $t0, 12($v0)
		
		addi $t0, $zero, 115
		sb $t0, 13($v0)
		
		addi $t0, $zero, 10
		sb $t0, 14($v0)
		
		sb $zero, 15($v0)
		
		sw $v0, 12($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 336($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 348($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_79]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_82
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_80]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_52 <- internal_80
		lw $t0, 8($sp)
		sw $t0, 120($sp)
		
		# JUMP TO branch_end_8733052859408
		j branch_end_8733052859408
		
		error_branch_8733052859408:
		
		branch_end_8733052859408:
		
		lw $v1, 120($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 332
		
		jr $ra
		
	function_print_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -60
		
		# ALLOCATING -> A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [z]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET METHOD value OF A
		lw $t0, 60($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [var]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET METHOD i2a OF A2I
		lw $t0, 56($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 32($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [z]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 12($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 64($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_14
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 60
		
		jr $ra
		
	function_main_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -1228
		
		# ALLOCATING -> A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 1224($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 1232($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 1232($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 1224($sp)
		beq $t1, $zero, object_set_attribute_8733052760330
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052760330
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052760330
		j object_set_attribute_8733052760330
		int_set_attribute_8733052760330:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052760330
		bool_set_attribute_8733052760330:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052760330
		object_set_attribute_8733052760330:
		sw $t1, 12($t0)
		end_set_attribute_8733052760330:
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 1220($sp)
		
		while_start_8733052860170:
		
		# GET ATTRIBUTE flag OF self
		lw $t0, 1228($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052760411
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052760411
		j object_get_attribute_8733052760411
		int_get_attribute_8733052760411:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1216($sp)
		j end_get_attribute_8733052760411
		bool_get_attribute_8733052760411:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1216($sp)
		j end_get_attribute_8733052760411
		object_get_attribute_8733052760411:
		sw $t1, 1216($sp)
		end_get_attribute_8733052760411:
		
		# IF internal_2 THEN GOTO while_body_8733052860170
		lw $t0, 1216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8733052860170
		
		# JUMP TO while_end_8733052860170
		j while_end_8733052860170
		
		while_body_8733052860170:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		sb $zero, 15($v0)
		
		sw $v0, 1212($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 1204($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1204($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1200($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 1224($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_6
		lw $t0, 1212($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1220($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052760543
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052760543
		j object_get_attribute_8733052760543
		int_get_attribute_8733052760543:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1196($sp)
		j end_get_attribute_8733052760543
		bool_get_attribute_8733052760543:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1196($sp)
		j end_get_attribute_8733052760543
		object_get_attribute_8733052760543:
		sw $t1, 1196($sp)
		end_get_attribute_8733052760543:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 1188($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1188($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1184($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 1208($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 1196($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1204($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 1176($sp)
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052761173
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052761173
		j object_get_attribute_8733052761173
		int_get_attribute_8733052761173:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1172($sp)
		j end_get_attribute_8733052761173
		bool_get_attribute_8733052761173:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1172($sp)
		j end_get_attribute_8733052761173
		object_get_attribute_8733052761173:
		sw $t1, 1172($sp)
		end_get_attribute_8733052761173:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 1164($sp)
		
		# GET METHOD value OF A
		lw $t0, 1172($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1164($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1160($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 1180($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_16
		lw $t0, 1168($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1176($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 1152($sp)
		
		# GET METHOD is_even OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1152($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1148($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 1180($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_19
		lw $t0, 1160($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1168($sp)
		addi $sp, $sp, 12
		
		# internal_12 <- internal_17
		lw $t0, 1156($sp)
		sw $t0, 1176($sp)
		
		# IF internal_12 THEN GOTO then_8733052860350
		lw $t0, 1176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052860350
		
		# JUMP TO else_8733052860350
		j else_8733052860350
		
		then_8733052860350:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 18
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 18
		sw $t0, 4($v0)
		
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 118
		sb $t0, 12($v0)
		
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 33
		sb $t0, 15($v0)
		
		addi $t0, $zero, 10
		sb $t0, 16($v0)
		
		sb $zero, 17($v0)
		
		sw $v0, 1144($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 1136($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1136($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1132($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 1156($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 1144($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1152($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_21
		lw $t0, 1140($sp)
		sw $t0, 1180($sp)
		
		# JUMP TO endif_8733052860350
		j endif_8733052860350
		
		else_8733052860350:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 17
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 17
		sw $t0, 4($v0)
		
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		
		addi $t0, $zero, 100
		sb $t0, 12($v0)
		
		addi $t0, $zero, 100
		sb $t0, 13($v0)
		
		addi $t0, $zero, 33
		sb $t0, 14($v0)
		
		addi $t0, $zero, 10
		sb $t0, 15($v0)
		
		sb $zero, 16($v0)
		
		sw $v0, 1128($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 1120($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1120($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1116($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_24]
		lw $t0, 1140($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_27
		lw $t0, 1128($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1136($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_25
		lw $t0, 1124($sp)
		sw $t0, 1180($sp)
		
		# JUMP TO endif_8733052860350
		j endif_8733052860350
		
		endif_8733052860350:
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052761447
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052761447
		j object_get_attribute_8733052761447
		int_get_attribute_8733052761447:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1112($sp)
		j end_get_attribute_8733052761447
		bool_get_attribute_8733052761447:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1112($sp)
		j end_get_attribute_8733052761447
		object_get_attribute_8733052761447:
		sw $t1, 1112($sp)
		end_get_attribute_8733052761447:
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 1104($sp)
		
		# GET METHOD class_type OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1100($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 1124($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_31
		lw $t0, 1112($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1120($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 1092($sp)
		
		# GET METHOD menu OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1092($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1088($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 1236($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_34
		lw $t0, 1096($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1104($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 1096($sp)
		beq $t1, $zero, object_set_attribute_8733052761489
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052761489
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052761489
		j object_set_attribute_8733052761489
		int_set_attribute_8733052761489:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052761489
		bool_set_attribute_8733052761489:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8733052761489
		object_set_attribute_8733052761489:
		sw $t1, 8($t0)
		end_set_attribute_8733052761489:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 1080($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052761597
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052761597
		j object_get_attribute_8733052761597
		int_get_attribute_8733052761597:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1076($sp)
		j end_get_attribute_8733052761597
		bool_get_attribute_8733052761597:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1076($sp)
		j end_get_attribute_8733052761597
		object_get_attribute_8733052761597:
		sw $t1, 1076($sp)
		end_get_attribute_8733052761597:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 97
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 1072($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_37]
		lw $t0, 1088($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_38]
		lw $t0, 1084($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 1080($sp)
		addi $sp, $sp, 12
		
		# internal_36 <- internal_39
		lw $t0, 1068($sp)
		sw $t0, 1080($sp)
		
		# IF internal_36 THEN GOTO then_8733052861052
		lw $t0, 1080($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052861052
		
		# JUMP TO else_8733052861052
		j else_8733052861052
		
		then_8733052861052:
		
		# ALLOCATING -> A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 1064($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_40]
		lw $t0, 1072($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 1072($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 1056($sp)
		
		# GET METHOD get_int OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1056($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1052($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 1236($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_43
		lw $t0, 1060($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1068($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 1044($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 1064($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1044($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1040($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_40]
		lw $t0, 1076($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_41]
		lw $t0, 1072($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_46
		lw $t0, 1052($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 1060($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE a_var OF self
		lw $t0, 1228($sp)
		lw $t1, 1048($sp)
		beq $t1, $zero, object_set_attribute_8733052761944
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052761944
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052761944
		j object_set_attribute_8733052761944
		int_set_attribute_8733052761944:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8733052761944
		bool_set_attribute_8733052761944:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8733052761944
		object_set_attribute_8733052761944:
		sw $t1, 16($t0)
		end_set_attribute_8733052761944:
		
		# ALLOCATING -> B
		li $v0, 9
		lw $a0, type_B
		syscall
		la $t0, type_B
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 1036($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 1044($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_B
		jal function___init___at_B
		lw $ra, 4($sp)
		sw $v1, 1044($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052762658
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052762658
		j object_get_attribute_8733052762658
		int_get_attribute_8733052762658:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1032($sp)
		j end_get_attribute_8733052762658
		bool_get_attribute_8733052762658:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1032($sp)
		j end_get_attribute_8733052762658
		object_get_attribute_8733052762658:
		sw $t1, 1032($sp)
		end_get_attribute_8733052762658:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 1024($sp)
		
		# GET METHOD value OF A
		lw $t0, 1032($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1024($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1020($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_48]
		lw $t0, 1040($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_51
		lw $t0, 1028($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1036($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE a_var OF self
		lw $t0, 1228($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052762712
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052762712
		j object_get_attribute_8733052762712
		int_get_attribute_8733052762712:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1016($sp)
		j end_get_attribute_8733052762712
		bool_get_attribute_8733052762712:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 1016($sp)
		j end_get_attribute_8733052762712
		object_get_attribute_8733052762712:
		sw $t1, 1016($sp)
		end_get_attribute_8733052762712:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 1008($sp)
		
		# GET METHOD value OF A
		lw $t0, 1016($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 1008($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 1004($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_52]
		lw $t0, 1024($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 1012($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 1020($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 996($sp)
		
		# GET METHOD method2 OF B
		lw $t0, 1036($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 996($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 992($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 1052($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 1044($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_53]
		lw $t0, 1028($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_58
		lw $t0, 1008($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 1016($sp)
		addi $sp, $sp, 16
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 1000($sp)
		beq $t1, $zero, object_set_attribute_8733052762070
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052762070
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052762070
		j object_set_attribute_8733052762070
		int_set_attribute_8733052762070:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052762070
		bool_set_attribute_8733052762070:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052762070
		object_set_attribute_8733052762070:
		sw $t1, 12($t0)
		end_set_attribute_8733052762070:
		
		# internal_35 <- internal_56
		lw $t0, 1000($sp)
		sw $t0, 1084($sp)
		
		# JUMP TO endif_8733052861052
		j endif_8733052861052
		
		else_8733052861052:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 984($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052762844
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052762844
		j object_get_attribute_8733052762844
		int_get_attribute_8733052762844:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 980($sp)
		j end_get_attribute_8733052762844
		bool_get_attribute_8733052762844:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 980($sp)
		j end_get_attribute_8733052762844
		object_get_attribute_8733052762844:
		sw $t1, 980($sp)
		end_get_attribute_8733052762844:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 98
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 976($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_61]
		lw $t0, 992($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_62]
		lw $t0, 988($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 984($sp)
		addi $sp, $sp, 12
		
		# internal_60 <- internal_63
		lw $t0, 972($sp)
		sw $t0, 984($sp)
		
		# IF internal_60 THEN GOTO then_8733052861106
		lw $t0, 984($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052861106
		
		# JUMP TO else_8733052861106
		j else_8733052861106
		
		then_8733052861106:
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052763191
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052763191
		j object_get_attribute_8733052763191
		int_get_attribute_8733052763191:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 968($sp)
		j end_get_attribute_8733052763191
		bool_get_attribute_8733052763191:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 968($sp)
		j end_get_attribute_8733052763191
		object_get_attribute_8733052763191:
		sw $t1, 968($sp)
		end_get_attribute_8733052763191:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 964($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 960($sp)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 956($sp)
		
		# ALLOCATING NUll INTO -> internal_68
		sw $zero, 952($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 948($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 944($sp)
		
		# internal_71 <- TYPEOF internal_64
		lw $t0, 968($sp)
		lw $t0, 0($t0)
		sw $t0, 940($sp)
		
		# internal_72 <- internal_71
		lw $t0, 940($sp)
		sw $t0, 936($sp)
		
		while_start_8733052861103:
		
		# internal_70 <- EQUALADDRESS (internal_72, internal_68)
		lw $t0, 936($sp)
		lw $t1, 952($sp)
		seq $t2, $t0, $t1
		lw $t0, 944($sp)
		sw $t2, 8($t0)
		
		# IF internal_70 THEN GOTO while_end_8733052861103
		lw $t0, 944($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_end_8733052861103
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 960($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_66]
		lw $t0, 972($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 960($sp)
		addi $sp, $sp, 12
		
		# internal_72 <- ANCESTOR OF internal_72
		lw $t0, 936($sp)
		lw $t0, 4($t0)
		sw $t0, 936($sp)
		
		# JUMP TO while_start_8733052861103
		j while_start_8733052861103
		
		while_end_8733052861103:
		
		# internal_72 <- internal_71
		lw $t0, 940($sp)
		sw $t0, 936($sp)
		
		# INITIALIZE ARRAY [internal_69]
		lw $t0, 948($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 932($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 928($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 924($sp)
		
		foreach_start_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_74]
		lw $t0, 940($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 960($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 936($sp)
		addi $sp, $sp, 12
		
		# IF internal_75 THEN GOTO foreach_body_8733052861103
		lw $t0, 924($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_body_8733052861103
		
		# JUMP TO foreach_end_8733052861103
		j foreach_end_8733052861103
		
		foreach_body_8733052861103:
		
		# ARRAY internal_73[internal_74] <- internal_72
		lw $t0, 928($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 932($sp)
		add $t1, $t1, $t0
		lw $t0, 936($sp)
		sw $t0, 0($t1)
		
		# internal_72 <- ANCESTOR OF internal_72
		lw $t0, 936($sp)
		lw $t0, 4($t0)
		sw $t0, 936($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_74]
		lw $t0, 940($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_66]
		lw $t0, 972($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 940($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_start_8733052861103
		j foreach_start_8733052861103
		
		foreach_end_8733052861103:
		
		# INITIALIZE ARRAY [internal_67]
		lw $t0, 956($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 920($sp)
		
		# INITIALIZE ARRAY [internal_67]
		lw $t0, 956($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 916($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 908($sp)
		
		# internal_78 <- DIRECTION OF C
		la $t0, type_C
		sw $t0, 912($sp)
		
		# ARRAY internal_76[internal_79] <- internal_78
		lw $t0, 908($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 920($sp)
		add $t1, $t1, $t0
		lw $t0, 912($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_77[internal_79] <- internal_69
		lw $t0, 908($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 916($sp)
		add $t1, $t1, $t0
		lw $t0, 948($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 900($sp)
		
		# internal_80 <- DIRECTION OF A
		la $t0, type_A
		sw $t0, 904($sp)
		
		# ARRAY internal_76[internal_81] <- internal_80
		lw $t0, 900($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 920($sp)
		add $t1, $t1, $t0
		lw $t0, 904($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_77[internal_81] <- internal_69
		lw $t0, 900($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 916($sp)
		add $t1, $t1, $t0
		lw $t0, 948($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 892($sp)
		
		# internal_82 <- DIRECTION OF Object
		la $t0, type_Object
		sw $t0, 896($sp)
		
		# ARRAY internal_76[internal_83] <- internal_82
		lw $t0, 892($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 920($sp)
		add $t1, $t1, $t0
		lw $t0, 896($sp)
		sw $t0, 0($t1)
		
		# ARRAY internal_77[internal_83] <- internal_69
		lw $t0, 892($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 916($sp)
		add $t1, $t1, $t0
		lw $t0, 948($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 888($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 884($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 876($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 872($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 864($sp)
		
		foreach_type_start_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 900($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_67]
		lw $t0, 968($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 896($sp)
		addi $sp, $sp, 12
		
		# IF internal_85 THEN GOTO foreach_type_body_8733052861103
		lw $t0, 884($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_type_body_8733052861103
		
		# JUMP TO foreach_type_end_8733052861103
		j foreach_type_end_8733052861103
		
		foreach_type_body_8733052861103:
		
		# internal_86 <- ARRAY internal_76[internal_84]
		lw $t0, 888($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 920($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 880($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_87]
		lw $t0, 888($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 976($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 888($sp)
		addi $sp, $sp, 12
		
		foreach_ancestor_start_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_87]
		lw $t0, 888($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 960($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 884($sp)
		addi $sp, $sp, 12
		
		# IF internal_88 THEN GOTO foreach_ancestor_body_8733052861103
		lw $t0, 872($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_body_8733052861103
		
		# JUMP TO foreach_ancestor_end_8733052861103
		j foreach_ancestor_end_8733052861103
		
		foreach_ancestor_body_8733052861103:
		
		# internal_89 <- ARRAY internal_73[internal_87]
		lw $t0, 876($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 932($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		sw $t0, 868($sp)
		
		# internal_90 <- EQUALADDRESS (internal_86, internal_89)
		lw $t0, 880($sp)
		lw $t1, 868($sp)
		seq $t2, $t0, $t1
		lw $t0, 864($sp)
		sw $t2, 8($t0)
		
		# IF internal_90 THEN GOTO foreach_ancestor_end_8733052861103
		lw $t0, 864($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_ancestor_end_8733052861103
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_87]
		lw $t0, 888($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_66]
		lw $t0, 972($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 888($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_ancestor_start_8733052861103
		j foreach_ancestor_start_8733052861103
		
		foreach_ancestor_end_8733052861103:
		
		# ARRAY internal_77[internal_84] <- internal_87
		lw $t0, 888($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 916($sp)
		add $t1, $t1, $t0
		lw $t0, 876($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_84]
		lw $t0, 900($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_66]
		lw $t0, 972($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 900($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_type_start_8733052861103
		j foreach_type_start_8733052861103
		
		foreach_type_end_8733052861103:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 860($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 856($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 852($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 848($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 844($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_94]
		lw $t0, 860($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 960($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 860($sp)
		addi $sp, $sp, 12
		
		foreach_min_start_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_91]
		lw $t0, 872($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_67]
		lw $t0, 968($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 856($sp)
		addi $sp, $sp, 12
		
		# IF internal_95 THEN GOTO foreach_min_body_8733052861103
		lw $t0, 844($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, foreach_min_body_8733052861103
		
		# JUMP TO foreach_min_end_8733052861103
		j foreach_min_end_8733052861103
		
		foreach_min_body_8733052861103:
		
		# internal_93 <- ARRAY internal_77[internal_91]
		lw $t0, 860($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 916($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 852($sp)
		sw $t0, 8($t2)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_93]
		lw $t0, 864($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_94]
		lw $t0, 860($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 856($sp)
		addi $sp, $sp, 12
		
		# IF internal_95 THEN GOTO update_min_8733052861103
		lw $t0, 844($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, update_min_8733052861103
		
		# JUMP TO update_min_end_8733052861103
		j update_min_end_8733052861103
		
		update_min_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_94]
		lw $t0, 860($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_93]
		lw $t0, 864($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 860($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_92]
		lw $t0, 868($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_91]
		lw $t0, 872($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 868($sp)
		addi $sp, $sp, 12
		
		update_min_end_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_91]
		lw $t0, 872($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_66]
		lw $t0, 972($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 872($sp)
		addi $sp, $sp, 12
		
		# JUMP TO foreach_min_start_8733052861103
		j foreach_min_start_8733052861103
		
		foreach_min_end_8733052861103:
		
		# INITIALIZE ARRAY [internal_67]
		lw $t0, 956($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		li $v0, 9
		move $a0, $t0
		syscall
		sw $v0, 840($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 836($sp)
		
		# ARRAY internal_96[internal_97] <- internal_65
		lw $t0, 836($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 964($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 832($sp)
		
		# ARRAY internal_96[internal_98] <- internal_65
		lw $t0, 832($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 964($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 828($sp)
		
		# ARRAY internal_96[internal_99] <- internal_65
		lw $t0, 828($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 964($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 824($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_94]
		lw $t0, 860($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 960($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 836($sp)
		addi $sp, $sp, 12
		
		# IF internal_100 THEN GOTO error_branch_8733052861103
		lw $t0, 824($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, error_branch_8733052861103
		
		# ARRAY internal_96[internal_92] <- internal_66
		lw $t0, 856($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 960($sp)
		lw $t0, 8($t0)
		sw $t0, 0($t1)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 820($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 816($sp)
		
		# internal_101 <- ARRAY internal_96[internal_102]
		lw $t0, 816($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 820($sp)
		sw $t0, 8($t2)
		
		# IF internal_101 THEN GOTO branch_C_8733052861103
		lw $t0, 820($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_C_8733052861103
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 812($sp)
		
		# internal_101 <- ARRAY internal_96[internal_103]
		lw $t0, 812($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 820($sp)
		sw $t0, 8($t2)
		
		# IF internal_101 THEN GOTO branch_A_8733052861103
		lw $t0, 820($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_A_8733052861103
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 808($sp)
		
		# internal_101 <- ARRAY internal_96[internal_104]
		lw $t0, 808($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 4
		mult $t0, $t1
		mflo $t0
		lw $t1, 840($sp)
		add $t1, $t1, $t0
		lw $t0, 0($t1)
		lw $t2, 820($sp)
		sw $t0, 8($t2)
		
		# IF internal_101 THEN GOTO branch_Object_8733052861103
		lw $t0, 820($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, branch_Object_8733052861103
		
		branch_C_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [c]
		lw $t0, 812($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_64]
		lw $t0, 980($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 812($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 792($sp)
		
		# GET METHOD value OF C
		lw $t0, 800($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 792($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 788($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [c]
		lw $t0, 808($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_109
		lw $t0, 796($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 804($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 780($sp)
		
		# GET METHOD method6 OF C
		lw $t0, 800($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 780($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 776($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [c]
		lw $t0, 812($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_107]
		lw $t0, 808($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_112
		lw $t0, 788($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 796($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 784($sp)
		beq $t1, $zero, object_set_attribute_8733052765450
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052765450
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052765450
		j object_set_attribute_8733052765450
		int_set_attribute_8733052765450:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052765450
		bool_set_attribute_8733052765450:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052765450
		object_set_attribute_8733052765450:
		sw $t1, 12($t0)
		end_set_attribute_8733052765450:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_105]
		lw $t0, 816($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_110]
		lw $t0, 796($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 816($sp)
		addi $sp, $sp, 12
		
		# internal_105 <- internal_110
		lw $t0, 784($sp)
		sw $t0, 804($sp)
		
		# JUMP TO branch_end_8733052861103
		j branch_end_8733052861103
		
		branch_A_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [a]
		lw $t0, 784($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_64]
		lw $t0, 980($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 784($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 764($sp)
		
		# GET METHOD value OF A
		lw $t0, 772($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 764($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 760($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [a]
		lw $t0, 780($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_116
		lw $t0, 768($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 776($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 752($sp)
		
		# GET METHOD method3 OF A
		lw $t0, 772($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 752($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 748($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [a]
		lw $t0, 784($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_114]
		lw $t0, 780($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_119
		lw $t0, 760($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 768($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 756($sp)
		beq $t1, $zero, object_set_attribute_8733052765618
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052765618
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052765618
		j object_set_attribute_8733052765618
		int_set_attribute_8733052765618:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052765618
		bool_set_attribute_8733052765618:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052765618
		object_set_attribute_8733052765618:
		sw $t1, 12($t0)
		end_set_attribute_8733052765618:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_105]
		lw $t0, 816($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_117]
		lw $t0, 768($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 816($sp)
		addi $sp, $sp, 12
		
		# internal_105 <- internal_117
		lw $t0, 756($sp)
		sw $t0, 804($sp)
		
		# JUMP TO branch_end_8733052861103
		j branch_end_8733052861103
		
		branch_Object_8733052861103:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [o]
		lw $t0, 756($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_64]
		lw $t0, 980($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 756($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		
		addi $t0, $zero, 79
		sb $t0, 8($v0)
		
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 111
		sb $t0, 11($v0)
		
		addi $t0, $zero, 112
		sb $t0, 12($v0)
		
		addi $t0, $zero, 115
		sb $t0, 13($v0)
		
		addi $t0, $zero, 10
		sb $t0, 14($v0)
		
		sb $zero, 15($v0)
		
		sw $v0, 740($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 732($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 732($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 728($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_121]
		lw $t0, 752($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_124
		lw $t0, 740($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 748($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 720($sp)
		
		# GET METHOD abort OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 720($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 716($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 1236($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_127
		lw $t0, 724($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 732($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 712($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_105]
		lw $t0, 816($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_128]
		lw $t0, 724($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 816($sp)
		addi $sp, $sp, 12
		
		# internal_105 <- internal_128
		lw $t0, 712($sp)
		sw $t0, 804($sp)
		
		# JUMP TO branch_end_8733052861103
		j branch_end_8733052861103
		
		error_branch_8733052861103:
		
		branch_end_8733052861103:
		
		# internal_59 <- internal_105
		lw $t0, 804($sp)
		sw $t0, 988($sp)
		
		# JUMP TO endif_8733052861106
		j endif_8733052861106
		
		else_8733052861106:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 704($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052766525
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052766525
		j object_get_attribute_8733052766525
		int_get_attribute_8733052766525:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 700($sp)
		j end_get_attribute_8733052766525
		bool_get_attribute_8733052766525:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 700($sp)
		j end_get_attribute_8733052766525
		object_get_attribute_8733052766525:
		sw $t1, 700($sp)
		end_get_attribute_8733052766525:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 99
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 696($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_131]
		lw $t0, 712($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_132]
		lw $t0, 708($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 704($sp)
		addi $sp, $sp, 12
		
		# internal_130 <- internal_133
		lw $t0, 692($sp)
		sw $t0, 704($sp)
		
		# IF internal_130 THEN GOTO then_8733052862043
		lw $t0, 704($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052862043
		
		# JUMP TO else_8733052862043
		j else_8733052862043
		
		then_8733052862043:
		
		# ALLOCATING -> A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 688($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_134]
		lw $t0, 696($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 696($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 680($sp)
		
		# GET METHOD get_int OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 680($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 676($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 1236($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_137
		lw $t0, 684($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 692($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 668($sp)
		
		# GET METHOD set_var OF A
		lw $t0, 688($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 668($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 664($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_134]
		lw $t0, 700($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_135]
		lw $t0, 696($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_140
		lw $t0, 676($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 684($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE a_var OF self
		lw $t0, 1228($sp)
		lw $t1, 672($sp)
		beq $t1, $zero, object_set_attribute_8733052819074
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052819074
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052819074
		j object_set_attribute_8733052819074
		int_set_attribute_8733052819074:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8733052819074
		bool_set_attribute_8733052819074:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8733052819074
		object_set_attribute_8733052819074:
		sw $t1, 16($t0)
		end_set_attribute_8733052819074:
		
		# ALLOCATING -> D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 660($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_141]
		lw $t0, 668($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 668($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052817357
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052817357
		j object_get_attribute_8733052817357
		int_get_attribute_8733052817357:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 656($sp)
		j end_get_attribute_8733052817357
		bool_get_attribute_8733052817357:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 656($sp)
		j end_get_attribute_8733052817357
		object_get_attribute_8733052817357:
		sw $t1, 656($sp)
		end_get_attribute_8733052817357:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 648($sp)
		
		# GET METHOD value OF A
		lw $t0, 656($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 648($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 644($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_142]
		lw $t0, 664($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_145
		lw $t0, 652($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 660($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE a_var OF self
		lw $t0, 1228($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052817315
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052817315
		j object_get_attribute_8733052817315
		int_get_attribute_8733052817315:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 640($sp)
		j end_get_attribute_8733052817315
		bool_get_attribute_8733052817315:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 640($sp)
		j end_get_attribute_8733052817315
		object_get_attribute_8733052817315:
		sw $t1, 640($sp)
		end_get_attribute_8733052817315:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 632($sp)
		
		# GET METHOD value OF A
		lw $t0, 640($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 632($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 628($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_146]
		lw $t0, 648($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_149
		lw $t0, 636($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 644($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 620($sp)
		
		# GET METHOD method4 OF D
		lw $t0, 660($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 620($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 616($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [internal_141]
		lw $t0, 676($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_143]
		lw $t0, 668($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_147]
		lw $t0, 652($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_152
		lw $t0, 632($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 640($sp)
		addi $sp, $sp, 16
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 624($sp)
		beq $t1, $zero, object_set_attribute_8733052819047
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052819047
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052819047
		j object_set_attribute_8733052819047
		int_set_attribute_8733052819047:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052819047
		bool_set_attribute_8733052819047:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052819047
		object_set_attribute_8733052819047:
		sw $t1, 12($t0)
		end_set_attribute_8733052819047:
		
		# internal_129 <- internal_150
		lw $t0, 624($sp)
		sw $t0, 708($sp)
		
		# JUMP TO endif_8733052862043
		j endif_8733052862043
		
		else_8733052862043:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 608($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052872632
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052872632
		j object_get_attribute_8733052872632
		int_get_attribute_8733052872632:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 604($sp)
		j end_get_attribute_8733052872632
		bool_get_attribute_8733052872632:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 604($sp)
		j end_get_attribute_8733052872632
		object_get_attribute_8733052872632:
		sw $t1, 604($sp)
		end_get_attribute_8733052872632:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 100
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 600($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_155]
		lw $t0, 616($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_156]
		lw $t0, 612($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 608($sp)
		addi $sp, $sp, 12
		
		# internal_154 <- internal_157
		lw $t0, 596($sp)
		sw $t0, 608($sp)
		
		# IF internal_154 THEN GOTO then_8733052862118
		lw $t0, 608($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052862118
		
		# JUMP TO else_8733052862118
		j else_8733052862118
		
		then_8733052862118:
		
		# ALLOCATING -> C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 592($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_158]
		lw $t0, 600($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 600($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052840831
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052840831
		j object_get_attribute_8733052840831
		int_get_attribute_8733052840831:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 588($sp)
		j end_get_attribute_8733052840831
		bool_get_attribute_8733052840831:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 588($sp)
		j end_get_attribute_8733052840831
		object_get_attribute_8733052840831:
		sw $t1, 588($sp)
		end_get_attribute_8733052840831:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 580($sp)
		
		# GET METHOD value OF A
		lw $t0, 588($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 580($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 576($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_159]
		lw $t0, 596($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_162
		lw $t0, 584($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 592($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 568($sp)
		
		# GET METHOD method5 OF A
		lw $t0, 592($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 568($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 564($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_158]
		lw $t0, 604($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_160]
		lw $t0, 596($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_method5_at_A
		jal function_method5_at_A
		lw $ra, 8($sp)
		sw $v1, 584($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 572($sp)
		beq $t1, $zero, object_set_attribute_8733052840735
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052840735
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052840735
		j object_set_attribute_8733052840735
		int_set_attribute_8733052840735:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052840735
		bool_set_attribute_8733052840735:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052840735
		object_set_attribute_8733052840735:
		sw $t1, 12($t0)
		end_set_attribute_8733052840735:
		
		# internal_153 <- internal_163
		lw $t0, 572($sp)
		sw $t0, 612($sp)
		
		# JUMP TO endif_8733052862118
		j endif_8733052862118
		
		else_8733052862118:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 556($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052843283
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052843283
		j object_get_attribute_8733052843283
		int_get_attribute_8733052843283:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 552($sp)
		j end_get_attribute_8733052843283
		bool_get_attribute_8733052843283:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 552($sp)
		j end_get_attribute_8733052843283
		object_get_attribute_8733052843283:
		sw $t1, 552($sp)
		end_get_attribute_8733052843283:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 101
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 548($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_168]
		lw $t0, 564($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_169]
		lw $t0, 560($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 556($sp)
		addi $sp, $sp, 12
		
		# internal_167 <- internal_170
		lw $t0, 544($sp)
		sw $t0, 556($sp)
		
		# IF internal_167 THEN GOTO then_8733052862178
		lw $t0, 556($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052862178
		
		# JUMP TO else_8733052862178
		j else_8733052862178
		
		then_8733052862178:
		
		# ALLOCATING -> C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 540($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_171]
		lw $t0, 548($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 548($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052817469
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052817469
		j object_get_attribute_8733052817469
		int_get_attribute_8733052817469:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 536($sp)
		j end_get_attribute_8733052817469
		bool_get_attribute_8733052817469:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 536($sp)
		j end_get_attribute_8733052817469
		object_get_attribute_8733052817469:
		sw $t1, 536($sp)
		end_get_attribute_8733052817469:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 528($sp)
		
		# GET METHOD value OF A
		lw $t0, 536($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 528($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 524($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_172]
		lw $t0, 544($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_175
		lw $t0, 532($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 540($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 516($sp)
		
		# GET METHOD method5 OF B
		lw $t0, 540($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 516($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 512($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_171]
		lw $t0, 552($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_173]
		lw $t0, 544($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_method5_at_B
		jal function_method5_at_B
		lw $ra, 8($sp)
		sw $v1, 532($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 520($sp)
		beq $t1, $zero, object_set_attribute_8733052817607
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052817607
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052817607
		j object_set_attribute_8733052817607
		int_set_attribute_8733052817607:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052817607
		bool_set_attribute_8733052817607:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052817607
		object_set_attribute_8733052817607:
		sw $t1, 12($t0)
		end_set_attribute_8733052817607:
		
		# internal_166 <- internal_176
		lw $t0, 520($sp)
		sw $t0, 560($sp)
		
		# JUMP TO endif_8733052862178
		j endif_8733052862178
		
		else_8733052862178:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 504($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052817740
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052817740
		j object_get_attribute_8733052817740
		int_get_attribute_8733052817740:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 500($sp)
		j end_get_attribute_8733052817740
		bool_get_attribute_8733052817740:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 500($sp)
		j end_get_attribute_8733052817740
		object_get_attribute_8733052817740:
		sw $t1, 500($sp)
		end_get_attribute_8733052817740:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 102
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 496($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_181]
		lw $t0, 512($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_182]
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 504($sp)
		addi $sp, $sp, 12
		
		# internal_180 <- internal_183
		lw $t0, 492($sp)
		sw $t0, 504($sp)
		
		# IF internal_180 THEN GOTO then_8733052863049
		lw $t0, 504($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052863049
		
		# JUMP TO else_8733052863049
		j else_8733052863049
		
		then_8733052863049:
		
		# ALLOCATING -> C
		li $v0, 9
		lw $a0, type_C
		syscall
		la $t0, type_C
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 488($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_184]
		lw $t0, 496($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_C
		jal function___init___at_C
		lw $ra, 4($sp)
		sw $v1, 496($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052818300
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052818300
		j object_get_attribute_8733052818300
		int_get_attribute_8733052818300:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 484($sp)
		j end_get_attribute_8733052818300
		bool_get_attribute_8733052818300:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 484($sp)
		j end_get_attribute_8733052818300
		object_get_attribute_8733052818300:
		sw $t1, 484($sp)
		end_get_attribute_8733052818300:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 476($sp)
		
		# GET METHOD value OF A
		lw $t0, 484($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 476($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 472($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_185]
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_188
		lw $t0, 480($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 488($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 464($sp)
		
		# GET METHOD method5 OF C
		lw $t0, 488($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 464($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 460($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_184]
		lw $t0, 500($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_186]
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_method5_at_C
		jal function_method5_at_C
		lw $ra, 8($sp)
		sw $v1, 480($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 468($sp)
		beq $t1, $zero, object_set_attribute_8733052817911
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052817911
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052817911
		j object_set_attribute_8733052817911
		int_set_attribute_8733052817911:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052817911
		bool_set_attribute_8733052817911:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052817911
		object_set_attribute_8733052817911:
		sw $t1, 12($t0)
		end_set_attribute_8733052817911:
		
		# internal_179 <- internal_189
		lw $t0, 468($sp)
		sw $t0, 508($sp)
		
		# JUMP TO endif_8733052863049
		j endif_8733052863049
		
		else_8733052863049:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 452($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052841840
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052841840
		j object_get_attribute_8733052841840
		int_get_attribute_8733052841840:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 448($sp)
		j end_get_attribute_8733052841840
		bool_get_attribute_8733052841840:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 448($sp)
		j end_get_attribute_8733052841840
		object_get_attribute_8733052841840:
		sw $t1, 448($sp)
		end_get_attribute_8733052841840:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 103
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 444($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_194]
		lw $t0, 460($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_195]
		lw $t0, 456($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 452($sp)
		addi $sp, $sp, 12
		
		# internal_193 <- internal_196
		lw $t0, 440($sp)
		sw $t0, 452($sp)
		
		# IF internal_193 THEN GOTO then_8733052863187
		lw $t0, 452($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052863187
		
		# JUMP TO else_8733052863187
		j else_8733052863187
		
		then_8733052863187:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 432($sp)
		
		# ALLOCATING -> D
		li $v0, 9
		lw $a0, type_D
		syscall
		la $t0, type_D
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 428($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_199]
		lw $t0, 436($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_D
		jal function___init___at_D
		lw $ra, 4($sp)
		sw $v1, 436($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052766606
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052766606
		j object_get_attribute_8733052766606
		int_get_attribute_8733052766606:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 424($sp)
		j end_get_attribute_8733052766606
		bool_get_attribute_8733052766606:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 424($sp)
		j end_get_attribute_8733052766606
		object_get_attribute_8733052766606:
		sw $t1, 424($sp)
		end_get_attribute_8733052766606:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 416($sp)
		
		# GET METHOD value OF A
		lw $t0, 424($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 416($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 412($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_200]
		lw $t0, 432($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_203
		lw $t0, 420($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 428($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 404($sp)
		
		# GET METHOD method7 OF D
		lw $t0, 428($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 404($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 400($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_199]
		lw $t0, 440($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_201]
		lw $t0, 432($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_206
		lw $t0, 412($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 420($sp)
		addi $sp, $sp, 12
		
		# internal_198 <- internal_204
		lw $t0, 408($sp)
		sw $t0, 432($sp)
		
		# IF internal_198 THEN GOTO then_8733052863172
		lw $t0, 432($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052863172
		
		# JUMP TO else_8733052863172
		j else_8733052863172
		
		then_8733052863172:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		sb $zero, 15($v0)
		
		sw $v0, 396($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 388($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 388($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 384($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_207]
		lw $t0, 408($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_210
		lw $t0, 396($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 404($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052819565
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052819565
		j object_get_attribute_8733052819565
		int_get_attribute_8733052819565:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 380($sp)
		j end_get_attribute_8733052819565
		bool_get_attribute_8733052819565:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 380($sp)
		j end_get_attribute_8733052819565
		object_get_attribute_8733052819565:
		sw $t1, 380($sp)
		end_get_attribute_8733052819565:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 372($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 368($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_211]
		lw $t0, 392($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_214
		lw $t0, 380($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 388($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 28
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 28
		sw $t0, 4($v0)
		
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 100
		sb $t0, 11($v0)
		
		addi $t0, $zero, 105
		sb $t0, 12($v0)
		
		addi $t0, $zero, 118
		sb $t0, 13($v0)
		
		addi $t0, $zero, 105
		sb $t0, 14($v0)
		
		addi $t0, $zero, 115
		sb $t0, 15($v0)
		
		addi $t0, $zero, 105
		sb $t0, 16($v0)
		
		addi $t0, $zero, 98
		sb $t0, 17($v0)
		
		addi $t0, $zero, 108
		sb $t0, 18($v0)
		
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 98
		sb $t0, 21($v0)
		
		addi $t0, $zero, 121
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 51
		sb $t0, 24($v0)
		
		addi $t0, $zero, 46
		sb $t0, 25($v0)
		
		addi $t0, $zero, 10
		sb $t0, 26($v0)
		
		sb $zero, 27($v0)
		
		sw $v0, 364($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 356($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 356($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 352($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_215]
		lw $t0, 376($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_218
		lw $t0, 364($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 372($sp)
		addi $sp, $sp, 12
		
		# internal_197 <- internal_216
		lw $t0, 360($sp)
		sw $t0, 436($sp)
		
		# JUMP TO endif_8733052863172
		j endif_8733052863172
		
		else_8733052863172:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		sb $zero, 15($v0)
		
		sw $v0, 348($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 340($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 340($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 336($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_219]
		lw $t0, 360($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_222
		lw $t0, 348($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 356($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052767037
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052767037
		j object_get_attribute_8733052767037
		int_get_attribute_8733052767037:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 332($sp)
		j end_get_attribute_8733052767037
		bool_get_attribute_8733052767037:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 332($sp)
		j end_get_attribute_8733052767037
		object_get_attribute_8733052767037:
		sw $t1, 332($sp)
		end_get_attribute_8733052767037:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 324($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 324($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 320($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_223]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_226
		lw $t0, 332($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 340($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 32
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 32
		sw $t0, 4($v0)
		
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 110
		sb $t0, 11($v0)
		
		addi $t0, $zero, 111
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 100
		sb $t0, 15($v0)
		
		addi $t0, $zero, 105
		sb $t0, 16($v0)
		
		addi $t0, $zero, 118
		sb $t0, 17($v0)
		
		addi $t0, $zero, 105
		sb $t0, 18($v0)
		
		addi $t0, $zero, 115
		sb $t0, 19($v0)
		
		addi $t0, $zero, 105
		sb $t0, 20($v0)
		
		addi $t0, $zero, 98
		sb $t0, 21($v0)
		
		addi $t0, $zero, 108
		sb $t0, 22($v0)
		
		addi $t0, $zero, 101
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 98
		sb $t0, 25($v0)
		
		addi $t0, $zero, 121
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 51
		sb $t0, 28($v0)
		
		addi $t0, $zero, 46
		sb $t0, 29($v0)
		
		addi $t0, $zero, 10
		sb $t0, 30($v0)
		
		sb $zero, 31($v0)
		
		sw $v0, 316($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 308($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 308($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 304($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_227]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_230
		lw $t0, 316($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 324($sp)
		addi $sp, $sp, 12
		
		# internal_197 <- internal_228
		lw $t0, 312($sp)
		sw $t0, 436($sp)
		
		# JUMP TO endif_8733052863172
		j endif_8733052863172
		
		endif_8733052863172:
		
		# internal_192 <- internal_197
		lw $t0, 436($sp)
		sw $t0, 456($sp)
		
		# JUMP TO endif_8733052863187
		j endif_8733052863187
		
		else_8733052863187:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 296($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052767208
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052767208
		j object_get_attribute_8733052767208
		int_get_attribute_8733052767208:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 292($sp)
		j end_get_attribute_8733052767208
		bool_get_attribute_8733052767208:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 292($sp)
		j end_get_attribute_8733052767208
		object_get_attribute_8733052767208:
		sw $t1, 292($sp)
		end_get_attribute_8733052767208:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 104
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 288($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_233]
		lw $t0, 304($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_234]
		lw $t0, 300($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 296($sp)
		addi $sp, $sp, 12
		
		# internal_232 <- internal_235
		lw $t0, 284($sp)
		sw $t0, 296($sp)
		
		# IF internal_232 THEN GOTO then_8733052863856
		lw $t0, 296($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052863856
		
		# JUMP TO else_8733052863856
		j else_8733052863856
		
		then_8733052863856:
		
		# ALLOCATING NUll INTO -> x
		sw $zero, 280($sp)
		
		# ALLOCATING -> E
		li $v0, 9
		lw $a0, type_E
		syscall
		la $t0, type_E
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 276($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_237]
		lw $t0, 284($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_E
		jal function___init___at_E
		lw $ra, 4($sp)
		sw $v1, 284($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052766892
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052766892
		j object_get_attribute_8733052766892
		int_get_attribute_8733052766892:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 272($sp)
		j end_get_attribute_8733052766892
		bool_get_attribute_8733052766892:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 272($sp)
		j end_get_attribute_8733052766892
		object_get_attribute_8733052766892:
		sw $t1, 272($sp)
		end_get_attribute_8733052766892:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 264($sp)
		
		# GET METHOD value OF A
		lw $t0, 272($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 264($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 260($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_238]
		lw $t0, 280($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_241
		lw $t0, 268($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 276($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 252($sp)
		
		# GET METHOD method6 OF E
		lw $t0, 276($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 252($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 248($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_237]
		lw $t0, 288($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_239]
		lw $t0, 280($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_244
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 268($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [x]
		lw $t0, 292($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_242]
		lw $t0, 268($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 292($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052767808
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052767808
		j object_get_attribute_8733052767808
		int_get_attribute_8733052767808:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp)
		j end_get_attribute_8733052767808
		bool_get_attribute_8733052767808:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp)
		j end_get_attribute_8733052767808
		object_get_attribute_8733052767808:
		sw $t1, 240($sp)
		end_get_attribute_8733052767808:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# GET METHOD value OF A
		lw $t0, 240($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 232($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 228($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_246]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_249
		lw $t0, 236($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 244($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 220($sp)
		
		# GET METHOD value OF A
		lw $t0, 280($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 220($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 216($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 288($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_252
		lw $t0, 224($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 232($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_250]
		lw $t0, 236($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_253]
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 220($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_247]
		lw $t0, 248($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_254]
		lw $t0, 220($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 216($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [r]
		lw $t0, 256($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_255]
		lw $t0, 216($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 256($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 16
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 16
		sw $t0, 4($v0)
		
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		
		addi $t0, $zero, 117
		sb $t0, 9($v0)
		
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		
		addi $t0, $zero, 98
		sb $t0, 11($v0)
		
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		sb $zero, 15($v0)
		
		sw $v0, 200($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 192($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 188($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_256]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_259
		lw $t0, 200($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052768317
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052768317
		j object_get_attribute_8733052768317
		int_get_attribute_8733052768317:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 184($sp)
		j end_get_attribute_8733052768317
		bool_get_attribute_8733052768317:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 184($sp)
		j end_get_attribute_8733052768317
		object_get_attribute_8733052768317:
		sw $t1, 184($sp)
		end_get_attribute_8733052768317:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 176($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 172($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_260]
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_263
		lw $t0, 184($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 105
		sb $t0, 8($v0)
		
		addi $t0, $zero, 115
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 113
		sb $t0, 12($v0)
		
		addi $t0, $zero, 117
		sb $t0, 13($v0)
		
		addi $t0, $zero, 97
		sb $t0, 14($v0)
		
		addi $t0, $zero, 108
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 116
		sb $t0, 17($v0)
		
		addi $t0, $zero, 111
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 168($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 160($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 156($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_264]
		lw $t0, 180($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_267
		lw $t0, 168($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# GET METHOD print OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 148($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 144($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [x]
		lw $t0, 292($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_270
		lw $t0, 156($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 164($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 37
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 37
		sw $t0, 4($v0)
		
		addi $t0, $zero, 116
		sb $t0, 8($v0)
		
		addi $t0, $zero, 105
		sb $t0, 9($v0)
		
		addi $t0, $zero, 109
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 56
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 119
		sb $t0, 16($v0)
		
		addi $t0, $zero, 105
		sb $t0, 17($v0)
		
		addi $t0, $zero, 116
		sb $t0, 18($v0)
		
		addi $t0, $zero, 104
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 97
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 114
		sb $t0, 23($v0)
		
		addi $t0, $zero, 101
		sb $t0, 24($v0)
		
		addi $t0, $zero, 109
		sb $t0, 25($v0)
		
		addi $t0, $zero, 97
		sb $t0, 26($v0)
		
		addi $t0, $zero, 105
		sb $t0, 27($v0)
		
		addi $t0, $zero, 110
		sb $t0, 28($v0)
		
		addi $t0, $zero, 100
		sb $t0, 29($v0)
		
		addi $t0, $zero, 101
		sb $t0, 30($v0)
		
		addi $t0, $zero, 114
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		addi $t0, $zero, 111
		sb $t0, 33($v0)
		
		addi $t0, $zero, 102
		sb $t0, 34($v0)
		
		addi $t0, $zero, 32
		sb $t0, 35($v0)
		
		sb $zero, 36($v0)
		
		sw $v0, 140($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 132($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 128($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_271]
		lw $t0, 152($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_274
		lw $t0, 140($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> A2I
		li $v0, 9
		lw $a0, type_A2I
		syscall
		la $t0, type_A2I
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 120($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_276]
		lw $t0, 128($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A2I
		jal function___init___at_A2I
		lw $ra, 4($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [a]
		lw $t0, 784($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_276]
		lw $t0, 132($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 784($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# GET METHOD i2a OF A2I
		lw $t0, 772($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [a]
		lw $t0, 784($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [r]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_279
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 100($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 96($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_277]
		lw $t0, 128($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_282
		lw $t0, 108($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 92($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 1228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 1240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_283]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_286
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 280($sp)
		beq $t1, $zero, object_set_attribute_8733052767946
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052767946
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052767946
		j object_set_attribute_8733052767946
		int_set_attribute_8733052767946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052767946
		bool_set_attribute_8733052767946:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052767946
		object_set_attribute_8733052767946:
		sw $t1, 12($t0)
		end_set_attribute_8733052767946:
		
		# internal_231 <- x
		lw $t0, 280($sp)
		sw $t0, 300($sp)
		
		# JUMP TO endif_8733052863856
		j endif_8733052863856
		
		else_8733052863856:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052768871
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052768871
		j object_get_attribute_8733052768871
		int_get_attribute_8733052768871:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8733052768871
		bool_get_attribute_8733052768871:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8733052768871
		object_get_attribute_8733052768871:
		sw $t1, 68($sp)
		end_get_attribute_8733052768871:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 106
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_289]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_290]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_288 <- internal_291
		lw $t0, 60($sp)
		sw $t0, 72($sp)
		
		# IF internal_288 THEN GOTO then_8733052863946
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052863946
		
		# JUMP TO else_8733052863946
		j else_8733052863946
		
		then_8733052863946:
		
		# ALLOCATING -> A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 56($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_292]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 56($sp)
		beq $t1, $zero, object_set_attribute_8733052769356
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052769356
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052769356
		j object_set_attribute_8733052769356
		int_set_attribute_8733052769356:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052769356
		bool_set_attribute_8733052769356:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052769356
		object_set_attribute_8733052769356:
		sw $t1, 12($t0)
		end_set_attribute_8733052769356:
		
		# internal_287 <- internal_292
		lw $t0, 56($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8733052863946
		j endif_8733052863946
		
		else_8733052863946:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET ATTRIBUTE char OF self
		lw $t0, 1228($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052769470
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052769470
		j object_get_attribute_8733052769470
		int_get_attribute_8733052769470:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp)
		j end_get_attribute_8733052769470
		bool_get_attribute_8733052769470:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp)
		j end_get_attribute_8733052769470
		object_get_attribute_8733052769470:
		sw $t1, 44($sp)
		end_get_attribute_8733052769470:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 113
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_295]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_296]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# internal_294 <- internal_297
		lw $t0, 36($sp)
		sw $t0, 48($sp)
		
		# IF internal_294 THEN GOTO then_8733052864621
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8733052864621
		
		# JUMP TO else_8733052864621
		j else_8733052864621
		
		then_8733052864621:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# SET ATTRIBUTE flag OF self
		lw $t0, 1228($sp)
		lw $t1, 32($sp)
		beq $t1, $zero, object_set_attribute_8733052770058
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052770058
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052770058
		j object_set_attribute_8733052770058
		int_set_attribute_8733052770058:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8733052770058
		bool_set_attribute_8733052770058:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8733052770058
		object_set_attribute_8733052770058:
		sw $t1, 20($t0)
		end_set_attribute_8733052770058:
		
		# internal_293 <- internal_298
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8733052864621
		j endif_8733052864621
		
		else_8733052864621:
		
		# ALLOCATING -> A
		li $v0, 9
		lw $a0, type_A
		syscall
		la $t0, type_A
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_299]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_A
		jal function___init___at_A
		lw $ra, 4($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8733052770175
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8733052770175
		j object_get_attribute_8733052770175
		int_get_attribute_8733052770175:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp)
		j end_get_attribute_8733052770175
		bool_get_attribute_8733052770175:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp)
		j end_get_attribute_8733052770175
		object_get_attribute_8733052770175:
		sw $t1, 24($sp)
		end_get_attribute_8733052770175:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD value OF A
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_300]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_303
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD method1 OF A
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_299]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_301]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_306
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE avar OF self
		lw $t0, 1228($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8733052770103
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8733052770103
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8733052770103
		j object_set_attribute_8733052770103
		int_set_attribute_8733052770103:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052770103
		bool_set_attribute_8733052770103:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8733052770103
		object_set_attribute_8733052770103:
		sw $t1, 12($t0)
		end_set_attribute_8733052770103:
		
		# internal_293 <- internal_304
		lw $t0, 8($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8733052864621
		j endif_8733052864621
		
		endif_8733052864621:
		
		# internal_287 <- internal_293
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8733052863946
		j endif_8733052863946
		
		endif_8733052863946:
		
		# internal_231 <- internal_287
		lw $t0, 76($sp)
		sw $t0, 300($sp)
		
		# JUMP TO endif_8733052863856
		j endif_8733052863856
		
		endif_8733052863856:
		
		# internal_192 <- internal_231
		lw $t0, 300($sp)
		sw $t0, 456($sp)
		
		# JUMP TO endif_8733052863187
		j endif_8733052863187
		
		endif_8733052863187:
		
		# internal_179 <- internal_192
		lw $t0, 456($sp)
		sw $t0, 508($sp)
		
		# JUMP TO endif_8733052863049
		j endif_8733052863049
		
		endif_8733052863049:
		
		# internal_166 <- internal_179
		lw $t0, 508($sp)
		sw $t0, 560($sp)
		
		# JUMP TO endif_8733052862178
		j endif_8733052862178
		
		endif_8733052862178:
		
		# internal_153 <- internal_166
		lw $t0, 560($sp)
		sw $t0, 612($sp)
		
		# JUMP TO endif_8733052862118
		j endif_8733052862118
		
		endif_8733052862118:
		
		# internal_129 <- internal_153
		lw $t0, 612($sp)
		sw $t0, 708($sp)
		
		# JUMP TO endif_8733052862043
		j endif_8733052862043
		
		endif_8733052862043:
		
		# internal_59 <- internal_129
		lw $t0, 708($sp)
		sw $t0, 988($sp)
		
		# JUMP TO endif_8733052861106
		j endif_8733052861106
		
		endif_8733052861106:
		
		# internal_35 <- internal_59
		lw $t0, 988($sp)
		sw $t0, 1084($sp)
		
		# JUMP TO endif_8733052861052
		j endif_8733052861052
		
		endif_8733052861052:
		
		# JUMP TO while_start_8733052860170
		j while_start_8733052860170
		
		while_end_8733052860170:
		
		lw $v1, 1220($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 1228
		
		jr $ra
		
	main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# EXIT!
		li $v0, 10
		syscall
		
		