	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_Graph: .asciiz "Graph"
data_7_type_name_Vertice: .asciiz "Vertice"
data_8_type_name_Edge: .asciiz "Edge"
data_9_type_name_EList: .asciiz "EList"
data_10_type_name_ECons: .asciiz "ECons"
data_11_type_name_VList: .asciiz "VList"
data_12_type_name_VCons: .asciiz "VCons"
data_13_type_name_Parse: .asciiz "Parse"
data_14_type_name_Main: .asciiz "Main"
data_15_type_name_BoolOp: .asciiz "BoolOp"
data_16_sep_cat: .asciiz " ++ "
data_17_eol: .asciiz "\n"
data_18_under: .asciiz "_"
data_19_meth: .asciiz "outgoing"
data_20_meth: .asciiz "append"
data_21_meth: .asciiz "cons"
data_22_meth: .asciiz "print"
data_23_meth: .asciiz "out_int"
data_24_string: .asciiz " ("
data_25_meth: .asciiz "out_string"
data_26_string: .asciiz ","
data_27_string: .asciiz ")"
data_28_meth: .asciiz "abort"
data_29_meth: .asciiz "init"
data_30_meth: .asciiz "isNil"
data_31_meth: .asciiz "tail"
data_32_meth: .asciiz "head"
data_33_meth: .asciiz "in_string"
data_34_string: .asciiz ""
data_35_meth: .asciiz "and"
data_36_meth: .asciiz "parse_line"
data_37_meth: .asciiz "add_vertice"
data_38_meth: .asciiz "a2i"
data_39_meth: .asciiz "length"
data_40_meth: .asciiz "number"
data_41_meth: .asciiz "add_out"
data_42_string: .asciiz "0"
data_43_string: .asciiz "1"
data_44_string: .asciiz "2"
data_45_string: .asciiz "3"
data_46_string: .asciiz "4"
data_47_string: .asciiz "5"
data_48_string: .asciiz "6"
data_49_string: .asciiz "7"
data_50_string: .asciiz "8"
data_51_string: .asciiz "9"
data_52_meth: .asciiz "substr"
data_53_string: .asciiz "-"
data_54_meth: .asciiz "a2i_aux"
data_55_string: .asciiz " "
data_56_meth: .asciiz "c2i"
data_57_meth: .asciiz "read_input"
data_58_meth: .asciiz "print_V"
data_59_meth: .asciiz "print_E"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Int_copy
Bool: .word Object_abort,Bool_type_name,Bool_copy
String: .word Object_abort,String_type_name,String_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,IO_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
Graph: .word Object_abort,Graph_type_name,Graph_copy,Graph_add_vertice,Graph_print_E,Graph_print_V
Vertice: .word Object_abort,Vertice_type_name,Vertice_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Vertice_outgoing,Vertice_number,Vertice_init,Vertice_add_out,Vertice_print
Edge: .word Object_abort,Edge_type_name,Edge_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Edge_init,Edge_print
EList: .word Object_abort,EList_type_name,EList_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,EList_isNil,EList_head,EList_tail,EList_cons,EList_append,EList_print
ECons: .word Object_abort,ECons_type_name,ECons_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,ECons_isNil,ECons_head,ECons_tail,EList_cons,EList_append,ECons_print,ECons_init
VList: .word Object_abort,VList_type_name,VList_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,VList_isNil,VList_head,VList_tail,VList_cons,VList_print
VCons: .word Object_abort,VCons_type_name,VCons_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,VCons_isNil,VCons_head,VCons_tail,VList_cons,VCons_print,VCons_init
Parse: .word Object_abort,Parse_type_name,Parse_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Parse_read_input,Parse_parse_line,Parse_c2i,Parse_a2i,Parse_a2i_aux
Main: .word Object_abort,Main_type_name,Main_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Parse_read_input,Parse_parse_line,Parse_c2i,Parse_a2i,Parse_a2i_aux,Main_main
BoolOp: .word Object_abort,BoolOp_type_name,BoolOp_copy,BoolOp_and,BoolOp_or

	.text
Void___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t6, 0 	#Save value 0 in register
	sw $t6, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Main___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_0_abort_msg 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t4, 4($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_1_type_name_Object 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t5, Object 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_2_type_name_Int 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, Int 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_3_type_name_Bool 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, Bool 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_4_type_name_String 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, String 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_5_type_name_IO 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t7, IO 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_6_type_name_Graph 	#LOAD
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph_copy:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Graph
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t8, Graph 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t6) 	#Save value in attribute of index 0
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 4($t1) 	#Load attribute in index 1
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 4($t5) 	#Save value in attribute of index 1
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_7_type_name_Vertice 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Vertice
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t3, Vertice 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t9) 	#Save value in attribute of index 0
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 4($t3) 	#Load attribute in index 1
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 4($t7) 	#Save value in attribute of index 1
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t6, data_8_type_name_Edge 	#LOAD
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Edge
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t0, Edge 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t2) 	#Save value in attribute of index 0
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 4($t1) 	#Load attribute in index 1
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t1) 	#Save value in attribute of index 1
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 8($t9) 	#Load attribute in index 2
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 8($t2) 	#Save value in attribute of index 2
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_9_type_name_EList 	#LOAD
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type EList
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, EList 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t6) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_type_name:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_10_type_name_ECons 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type ECons
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t0, ECons 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t8) 	#Save value in attribute of index 0
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 4($t7) 	#Load attribute in index 1
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t5) 	#Save value in attribute of index 1
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_type_name:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t7, data_11_type_name_VList 	#LOAD
	sw $t7, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type VList
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, VList 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t3) 	#Save value in attribute of index 0
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_12_type_name_VCons 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type VCons
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t0, VCons 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t2) 	#Save value in attribute of index 0
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 4($t8) 	#Load attribute in index 1
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 4($t9) 	#Save value in attribute of index 1
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_13_type_name_Parse 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Parse
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t2, Parse 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t3) 	#Save value in attribute of index 0
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 4($t3) 	#Load attribute in index 1
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 4($t8) 	#Save value in attribute of index 1
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_14_type_name_Main 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t4, Main 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t6, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t4) 	#Save value in attribute of index 0
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 4($t8) 	#Load attribute in index 1
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 4($t4) 	#Save value in attribute of index 1
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 8($t6) 	#Load attribute in index 2
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 8($t3) 	#Save value in attribute of index 2
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
BoolOp_type_name:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_15_type_name_BoolOp 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
BoolOp_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type BoolOp
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t3, BoolOp 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t0, -4($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t9, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t6, -8($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 5 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 8 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 0($fp) 	#Save obtained attribute in destination
	lw $a0, 4($fp) 	#Calculate Lenght
	li $t6, 0 	#
loop1:
	lb $t2, 0($a0) 	#
	beqz $t2, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t6,  $t6, 1 	#
	j loop1 	#
exit1:
	sw $t6, 0($fp) 	#Save Calculated Length
	lw $t2, 4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_16_sep_cat 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t2, -8($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 4($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, -4($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t5, -8($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 8($fp) 	#Save obtained attribute in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 12($fp) 	#Save obtained attribute in destination
	lw $a0, 8($fp) 	#Calculate Lenght
	li $t1, 0 	#
loop2:
	lb $t2, 0($a0) 	#
	beqz $t2, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t1,  $t1, 1 	#
	j loop2 	#
exit2:
	sw $t1, 20($fp) 	#Save Calculated Length
	lw $a0, 12($fp) 	#Calculate Lenght
	li $t0, 0 	#
loop3:
	lb $t1, 0($a0) 	#
	beqz $t1, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t0,  $t0, 1 	#
	j loop3 	#
exit3:
	sw $t0, 24($fp) 	#Save Calculated Length
	lw $t5, 24($fp) 	#
	lw $t0, 20($fp) 	#
	add $t4,  $t5, $t0 	#Plus
	sw $t4, 28($fp) 	#Save result of plus
	lw $t2, 28($fp) 	#Concat two Strings
	addi $t2,  $t2, 1 	#
	li $v0, 9 	#
	move $a0, $t2 	#
	syscall 	#
	la $t3, 0($v0) 	#
	lw $a1, 8($fp) 	#
	lw $a2, 12($fp) 	#
loop4:
	lb $t2, 0($a1) 	#
	beqz $t2, exit4 	#
	sb $t2, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t2, 0($a2) 	#
	sb $t2, 0($v0) 	#
	beqz $t2, exit5 	#
	addi $v0,  $v0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t3, 16($fp) 	#Save concated Strings
	lw $t4, 16($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -12($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t5) 	#Load attribute in index 0
	sw $t6, 0($fp) 	#Save obtained attribute in destination
	lw $t2, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 8($fp) 	#Save obtained attribute in destination
	lw $t1, 8($fp) 	#Obtain substring
	li $v0, 9 	#
	move $a0, $t1 	#
	syscall 	#
	lw $t7, 0($v0) 	#
	lw $t0, 4($fp) 	#
	lw $a1, 0($fp) 	#
	add $a1,  $a1, $t0 	#
loop6:
	lb $t4, 0($a1) 	#
	beqz $t1, exit6 	#
	sb $t4, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t1,  $t1, -1 	#
	j loop6 	#
exit6:
	sw $t7, 12($fp) 	#Save substring
	lw $t2, 12($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, Object 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, Int 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, -4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t5) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, Bool 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, -4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 0($t5) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, String 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t2) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Graph
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t8, Graph 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Graph_vertices___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t5) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Graph_edges___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 8($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t2) 	#Save value in attribute of index 1
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph_vertices___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal VList___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph_edges___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal EList___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph_add_vertice:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 116 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Typeof
	lw $t6, -4($t9) 	#
	sw $t6, 8($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 16($fp) 	#Save loaded value in destination
	lw $t1, 16($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_18_under 	#LOAD
	sw $t7, 24($fp) 	#Save loaded value in destination
	lw $t0, 24($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_19_meth 	#LOAD
	sw $t0, 32($fp) 	#Save loaded value in destination
	lw $t6, 32($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 8($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t1) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 12($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 28($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 36($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 20($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 8($fp) 	#get type dir for Dynamic Call
	lw $t0, 28($t7) 	#Get method of index 7
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t8, 4($t6) 	#Load attribute in index 1
	sw $t8, 40($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Typeof
	lw $t8, -4($t4) 	#
	sw $t8, 44($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 52($fp) 	#Save loaded value in destination
	lw $t8, 52($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 60($fp) 	#Save loaded value in destination
	lw $t2, 60($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_20_meth 	#LOAD
	sw $t0, 68($fp) 	#Save loaded value in destination
	lw $t6, 68($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 44($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t2) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 12($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 64($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 72($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 56($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 40($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 44($fp) 	#get type dir for Dynamic Call
	lw $t7, 44($t4) 	#Get method of index 11
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 0($fp) 	#Obtain value to assign
	sw $t2, 40($fp) 	#Assign value
	lw $t0, -8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 80($fp) 	#Save obtained attribute in destination
	lw $t9, 80($fp) 	#Typeof
	lw $t1, -4($t9) 	#
	sw $t1, 84($fp) 	#Save type value in destination
	la $t4, data_17_eol 	#LOAD
	sw $t4, 92($fp) 	#Save loaded value in destination
	lw $t0, 92($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 100($fp) 	#Save loaded value in destination
	lw $t1, 100($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_21_meth 	#LOAD
	sw $t4, 108($fp) 	#Save loaded value in destination
	lw $t3, 108($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 84($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t1) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 12($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 104($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 112($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 96($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t6, 80($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 84($fp) 	#get type dir for Dynamic Call
	lw $t4, 40($t5) 	#Get method of index 10
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 76($fp) 	#Obtain value to assign
	sw $t3, 80($fp) 	#Assign value
	lw $t0, 80($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -116 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph_print_E:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 4($t9) 	#Load attribute in index 1
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	lw $t3, 4($fp) 	#Typeof
	lw $t5, -4($t3) 	#
	sw $t5, 8($fp) 	#Save type value in destination
	la $t4, data_17_eol 	#LOAD
	sw $t4, 16($fp) 	#Save loaded value in destination
	lw $t8, 16($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 24($fp) 	#Save loaded value in destination
	lw $t1, 24($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_22_meth 	#LOAD
	sw $t8, 32($fp) 	#Save loaded value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t3) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 12($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 28($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 36($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 20($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 8($fp) 	#get type dir for Dynamic Call
	lw $t4, 48($t3) 	#Get method of index 12
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Graph_print_V:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 4($fp) 	#Save obtained attribute in destination
	lw $t7, 4($fp) 	#Typeof
	lw $t3, -4($t7) 	#
	sw $t3, 8($fp) 	#Save type value in destination
	la $t5, data_17_eol 	#LOAD
	sw $t5, 16($fp) 	#Save loaded value in destination
	lw $t1, 16($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 24($fp) 	#Save loaded value in destination
	lw $t6, 24($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_22_meth 	#LOAD
	sw $t8, 32($fp) 	#Save loaded value in destination
	lw $t4, 32($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 8($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t1) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 28($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 36($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 20($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t6, 4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 8($fp) 	#get type dir for Dynamic Call
	lw $t4, 44($t5) 	#Get method of index 11
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Vertice
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t3, Vertice 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Vertice_num___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 0($t0) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Vertice_out___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 8($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 4($t5) 	#Save value in attribute of index 1
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_num___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t3, 0 	#Load Int
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_out___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal EList___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_outgoing:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 4($t1) 	#Load attribute in index 1
	sw $t7, 0($fp) 	#Save obtained attribute in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_number:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t4) 	#Load attribute in index 0
	sw $t3, 0($fp) 	#Save obtained attribute in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Obtain value from source dir
	lw $t8, -8($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t8) 	#Save value in attribute of index 0
	lw $t3, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_add_out:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -8($fp) 	#Dir of instance of attribute to get
	lw $t1, 4($t7) 	#Load attribute in index 1
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Typeof
	lw $t2, -4($t8) 	#
	sw $t2, 8($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 16($fp) 	#Save loaded value in destination
	lw $t1, 16($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 24($fp) 	#Save loaded value in destination
	lw $t7, 24($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_21_meth 	#LOAD
	sw $t0, 32($fp) 	#Save loaded value in destination
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 8($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t6) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 28($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 36($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 20($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 8($fp) 	#get type dir for Dynamic Call
	lw $t0, 40($t6) 	#Get method of index 10
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 0($fp) 	#Obtain value to assign
	sw $t8, 4($fp) 	#Assign value
	lw $t1, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Vertice_print:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 80 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	lw $t9, -4($fp) 	#Typeof
	lw $t7, -4($t9) 	#
	sw $t7, 8($fp) 	#Save type value in destination
	la $t4, data_17_eol 	#LOAD
	sw $t4, 16($fp) 	#Save loaded value in destination
	lw $t2, 16($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 24($fp) 	#Save loaded value in destination
	lw $t8, 24($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_23_meth 	#LOAD
	sw $t8, 32($fp) 	#Save loaded value in destination
	lw $t8, 32($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 8($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t1) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 12($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 28($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 36($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 20($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 8($fp) 	#get type dir for Dynamic Call
	lw $t0, 16($t3) 	#Get method of index 4
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 4($t3) 	#Load attribute in index 1
	sw $t1, 44($fp) 	#Save obtained attribute in destination
	lw $t0, 44($fp) 	#Typeof
	lw $t5, -4($t0) 	#
	sw $t5, 48($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 56($fp) 	#Save loaded value in destination
	lw $t5, 56($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_18_under 	#LOAD
	sw $t3, 64($fp) 	#Save loaded value in destination
	lw $t0, 64($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_22_meth 	#LOAD
	sw $t0, 72($fp) 	#Save loaded value in destination
	lw $t0, 72($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 48($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t6) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 12($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 68($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 76($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 60($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t0, 44($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 48($fp) 	#get type dir for Dynamic Call
	lw $t8, 48($t6) 	#Get method of index 12
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -80 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Edge
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t0, Edge 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Edge_from___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t8) 	#Save value in attribute of index 0
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Edge_to___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 4($t7) 	#Save value in attribute of index 1
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Edge_weight___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 12($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 8($t0) 	#Save value in attribute of index 2
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge_from___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t5, 0 	#Load Int
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge_to___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t7, 0 	#Load Int
	sw $t7, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge_weight___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t6, 0 	#Load Int
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge_init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -12($fp) 	#Obtain value from source dir
	lw $t0, -16($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t0) 	#Save value in attribute of index 0
	lw $t0, -8($fp) 	#Obtain value from source dir
	lw $t8, -16($fp) 	#Dir of instance of attribute to set
	sw $t0, 4($t8) 	#Save value in attribute of index 1
	lw $t5, -4($fp) 	#Obtain value from source dir
	lw $t1, -16($fp) 	#Dir of instance of attribute to set
	sw $t5, 8($t1) 	#Save value in attribute of index 2
	lw $t4, -16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Edge_print:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 252 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_24_string 	#LOAD
	sw $t5, 4($fp) 	#Save loaded value in destination
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t5, -4($t1) 	#
	sw $t5, 12($fp) 	#Save type value in destination
	la $t5, data_17_eol 	#LOAD
	sw $t5, 20($fp) 	#Save loaded value in destination
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_18_under 	#LOAD
	sw $t8, 28($fp) 	#Save loaded value in destination
	lw $t6, 28($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_25_meth 	#LOAD
	sw $t8, 36($fp) 	#Save loaded value in destination
	lw $t6, 36($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t9) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 16($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 32($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 40($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 12($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t8) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t4) 	#Load attribute in index 0
	sw $t8, 48($fp) 	#Save obtained attribute in destination
	lw $t9, -4($fp) 	#Typeof
	lw $t8, -4($t9) 	#
	sw $t8, 52($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 60($fp) 	#Save loaded value in destination
	lw $t0, 60($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 68($fp) 	#Save loaded value in destination
	lw $t2, 68($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_23_meth 	#LOAD
	sw $t4, 76($fp) 	#Save loaded value in destination
	lw $t0, 76($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 52($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t9) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 72($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 80($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 64($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 48($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 52($fp) 	#get type dir for Dynamic Call
	lw $t9, 16($t0) 	#Get method of index 4
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_26_string 	#LOAD
	sw $t5, 88($fp) 	#Save loaded value in destination
	lw $t0, 88($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 96($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 104($fp) 	#Save loaded value in destination
	lw $t9, 104($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_18_under 	#LOAD
	sw $t0, 112($fp) 	#Save loaded value in destination
	lw $t3, 112($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_25_meth 	#LOAD
	sw $t6, 120($fp) 	#Save loaded value in destination
	lw $t2, 120($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 96($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t3) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 116($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 124($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 108($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 92($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 96($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t5) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 84($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 4($t3) 	#Load attribute in index 1
	sw $t8, 132($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Typeof
	lw $t4, -4($t7) 	#
	sw $t4, 136($fp) 	#Save type value in destination
	la $t3, data_17_eol 	#LOAD
	sw $t3, 144($fp) 	#Save loaded value in destination
	lw $t0, 144($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_18_under 	#LOAD
	sw $t3, 152($fp) 	#Save loaded value in destination
	lw $t3, 152($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_23_meth 	#LOAD
	sw $t1, 160($fp) 	#Save loaded value in destination
	lw $t1, 160($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 164($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 136($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t2) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 156($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 164($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 148($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 132($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 136($fp) 	#get type dir for Dynamic Call
	lw $t1, 16($t8) 	#Get method of index 4
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 128($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_27_string 	#LOAD
	sw $t8, 172($fp) 	#Save loaded value in destination
	lw $t4, 172($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 180($fp) 	#Save type value in destination
	la $t3, data_17_eol 	#LOAD
	sw $t3, 188($fp) 	#Save loaded value in destination
	lw $t7, 188($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_18_under 	#LOAD
	sw $t0, 196($fp) 	#Save loaded value in destination
	lw $t7, 196($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_25_meth 	#LOAD
	sw $t6, 204($fp) 	#Save loaded value in destination
	lw $t7, 204($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 180($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t8) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 16($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 200($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 208($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 192($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 176($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 180($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t4) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 168($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 8($t3) 	#Load attribute in index 2
	sw $t4, 216($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Typeof
	lw $t2, -4($t3) 	#
	sw $t2, 220($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 228($fp) 	#Save loaded value in destination
	lw $t2, 228($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 236($fp) 	#Save loaded value in destination
	lw $t1, 236($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_23_meth 	#LOAD
	sw $t1, 244($fp) 	#Save loaded value in destination
	lw $t9, 244($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 220($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t4) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 240($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 248($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 232($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 216($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 220($fp) 	#get type dir for Dynamic Call
	lw $t4, 16($t5) 	#Get method of index 4
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 212($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 212($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -252 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type EList
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, EList 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal EList_car___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 0($t6) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_car___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_isNil:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t6, 1 	#Load Int
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_head:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -4($fp) 	#Typeof
	lw $t0, -4($t1) 	#
	sw $t0, 4($fp) 	#Save type value in destination
	la $t0, data_17_eol 	#LOAD
	sw $t0, 12($fp) 	#Save loaded value in destination
	lw $t0, 12($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_18_under 	#LOAD
	sw $t8, 20($fp) 	#Save loaded value in destination
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_28_meth 	#LOAD
	sw $t5, 28($fp) 	#Save loaded value in destination
	lw $t8, 28($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t8) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 8($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 32($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 16($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 4($fp) 	#get type dir for Dynamic Call
	lw $t5, 0($t6) 	#Get method of index 0
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 36($fp) 	#Save obtained attribute in destination
	lw $t5, 36($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_tail:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -4($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 4($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 12($fp) 	#Save loaded value in destination
	lw $t1, 12($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_18_under 	#LOAD
	sw $t6, 20($fp) 	#Save loaded value in destination
	lw $t5, 20($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_28_meth 	#LOAD
	sw $t7, 28($fp) 	#Save loaded value in destination
	lw $t2, 28($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t7) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 8($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 32($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 4($fp) 	#get type dir for Dynamic Call
	lw $t9, 0($t7) 	#Get method of index 0
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_cons:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal ECons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t8, 4($fp) 	#Typeof
	lw $t9, -4($t8) 	#
	sw $t9, 8($fp) 	#Save type value in destination
	la $t0, data_17_eol 	#LOAD
	sw $t0, 16($fp) 	#Save loaded value in destination
	lw $t8, 16($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_18_under 	#LOAD
	sw $t1, 24($fp) 	#Save loaded value in destination
	lw $t1, 24($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_29_meth 	#LOAD
	sw $t6, 32($fp) 	#Save loaded value in destination
	lw $t5, 32($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 8($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t8) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 12($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 28($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 36($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 20($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, -8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#get type dir for Dynamic Call
	lw $t2, 52($t0) 	#Get method of index 13
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_append:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 184 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -8($fp) 	#Typeof
	lw $t1, -4($t7) 	#
	sw $t1, 8($fp) 	#Save type value in destination
	la $t4, data_17_eol 	#LOAD
	sw $t4, 16($fp) 	#Save loaded value in destination
	lw $t3, 16($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_18_under 	#LOAD
	sw $t0, 24($fp) 	#Save loaded value in destination
	lw $t2, 24($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_30_meth 	#LOAD
	sw $t7, 32($fp) 	#Save loaded value in destination
	lw $t5, 32($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 8($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t9) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 12($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 28($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 36($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 20($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 8($fp) 	#get type dir for Dynamic Call
	lw $t4, 28($t2) 	#Get method of index 7
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 4($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_0 	#Compare values in registers and jump to label_then_0 if the second is greater than 0
	j label_else_0 	#Jump to label_else_0
label_then_0:
	lw $t5, -4($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	j label_continue_0 	#Jump to label_continue_0
label_else_0:
	lw $t4, -8($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 52($fp) 	#Save type value in destination
	la $t8, data_17_eol 	#LOAD
	sw $t8, 60($fp) 	#Save loaded value in destination
	lw $t6, 60($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_18_under 	#LOAD
	sw $t0, 68($fp) 	#Save loaded value in destination
	lw $t1, 68($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_31_meth 	#LOAD
	sw $t8, 76($fp) 	#Save loaded value in destination
	lw $t1, 76($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 52($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t9) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 12($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 72($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 80($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 64($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t9, -8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 52($fp) 	#get type dir for Dynamic Call
	lw $t7, 36($t1) 	#Get method of index 9
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 48($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 84($fp) 	#Save type value in destination
	la $t2, data_17_eol 	#LOAD
	sw $t2, 92($fp) 	#Save loaded value in destination
	lw $t0, 92($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 100($fp) 	#Save loaded value in destination
	lw $t3, 100($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_20_meth 	#LOAD
	sw $t4, 108($fp) 	#Save loaded value in destination
	lw $t2, 108($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 84($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t4) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 12($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 104($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 112($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 96($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t6, 48($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 84($fp) 	#get type dir for Dynamic Call
	lw $t5, 44($t8) 	#Get method of index 11
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, -8($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 120($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 128($fp) 	#Save loaded value in destination
	lw $t9, 128($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_18_under 	#LOAD
	sw $t7, 136($fp) 	#Save loaded value in destination
	lw $t7, 136($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_32_meth 	#LOAD
	sw $t2, 144($fp) 	#Save loaded value in destination
	lw $t6, 144($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 120($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t9) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 12($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 140($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 148($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 132($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 120($fp) 	#get type dir for Dynamic Call
	lw $t8, 32($t6) 	#Get method of index 8
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 116($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 44($fp) 	#Typeof
	lw $t7, -4($t9) 	#
	sw $t7, 152($fp) 	#Save type value in destination
	la $t4, data_17_eol 	#LOAD
	sw $t4, 160($fp) 	#Save loaded value in destination
	lw $t1, 160($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 164($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_18_under 	#LOAD
	sw $t5, 168($fp) 	#Save loaded value in destination
	lw $t5, 168($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_21_meth 	#LOAD
	sw $t1, 176($fp) 	#Save loaded value in destination
	lw $t5, 176($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 180($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 152($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t2) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 172($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 180($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 164($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t4, 44($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 116($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 152($fp) 	#get type dir for Dynamic Call
	lw $t7, 40($t5) 	#Get method of index 10
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 40($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
label_continue_0:
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -184 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
EList_print:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 44 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t7, data_17_eol 	#LOAD
	sw $t7, 4($fp) 	#Save loaded value in destination
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t3, -4($t1) 	#
	sw $t3, 12($fp) 	#Save type value in destination
	la $t6, data_17_eol 	#LOAD
	sw $t6, 20($fp) 	#Save loaded value in destination
	lw $t7, 20($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_18_under 	#LOAD
	sw $t0, 28($fp) 	#Save loaded value in destination
	lw $t2, 28($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_25_meth 	#LOAD
	sw $t4, 36($fp) 	#Save loaded value in destination
	lw $t3, 36($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t9) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 32($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 40($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 12($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t4) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -44 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type ECons
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t5, ECons 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal EList_car___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t3) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal ECons_cdr___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 8($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t8) 	#Save value in attribute of index 1
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_cdr___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_isNil:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t8, 0 	#Load Int
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_head:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 0($fp) 	#Save obtained attribute in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_tail:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 4($t7) 	#Load attribute in index 1
	sw $t4, 0($fp) 	#Save obtained attribute in destination
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -8($fp) 	#Obtain value from source dir
	lw $t5, -12($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t5) 	#Save value in attribute of index 0
	lw $t1, -4($fp) 	#Obtain value from source dir
	lw $t4, -12($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t4) 	#Save value in attribute of index 1
	lw $t9, -12($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
ECons_print:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 80 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Typeof
	lw $t1, -4($t0) 	#
	sw $t1, 8($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 16($fp) 	#Save loaded value in destination
	lw $t7, 16($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_18_under 	#LOAD
	sw $t5, 24($fp) 	#Save loaded value in destination
	lw $t0, 24($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_22_meth 	#LOAD
	sw $t3, 32($fp) 	#Save loaded value in destination
	lw $t8, 32($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 8($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t6) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 12($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 28($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 36($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 20($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 8($fp) 	#get type dir for Dynamic Call
	lw $t5, 32($t6) 	#Get method of index 8
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 4($t4) 	#Load attribute in index 1
	sw $t8, 44($fp) 	#Save obtained attribute in destination
	lw $t4, 44($fp) 	#Typeof
	lw $t7, -4($t4) 	#
	sw $t7, 48($fp) 	#Save type value in destination
	la $t6, data_17_eol 	#LOAD
	sw $t6, 56($fp) 	#Save loaded value in destination
	lw $t5, 56($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_18_under 	#LOAD
	sw $t3, 64($fp) 	#Save loaded value in destination
	lw $t2, 64($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_22_meth 	#LOAD
	sw $t5, 72($fp) 	#Save loaded value in destination
	lw $t4, 72($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 48($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t8) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 68($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 76($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 60($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t2, 44($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 48($fp) 	#get type dir for Dynamic Call
	lw $t1, 48($t7) 	#Get method of index 12
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -80 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type VList
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, VList 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal VList_car___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t3) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_car___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_isNil:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t1, 1 	#Load Int
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_head:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 4($fp) 	#Save type value in destination
	la $t8, data_17_eol 	#LOAD
	sw $t8, 12($fp) 	#Save loaded value in destination
	lw $t7, 12($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_18_under 	#LOAD
	sw $t5, 20($fp) 	#Save loaded value in destination
	lw $t1, 20($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_28_meth 	#LOAD
	sw $t1, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t2) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 8($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 32($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 4($fp) 	#get type dir for Dynamic Call
	lw $t1, 0($t7) 	#Get method of index 0
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 36($fp) 	#Save obtained attribute in destination
	lw $t8, 36($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_tail:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 4($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 12($fp) 	#Save loaded value in destination
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_18_under 	#LOAD
	sw $t3, 20($fp) 	#Save loaded value in destination
	lw $t2, 20($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_28_meth 	#LOAD
	sw $t9, 28($fp) 	#Save loaded value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t2) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 8($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 32($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 16($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 4($fp) 	#get type dir for Dynamic Call
	lw $t1, 0($t9) 	#Get method of index 0
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_cons:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal VCons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 4($fp) 	#Typeof
	lw $t2, -4($t5) 	#
	sw $t2, 8($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 16($fp) 	#Save loaded value in destination
	lw $t9, 16($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 24($fp) 	#Save loaded value in destination
	lw $t9, 24($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_29_meth 	#LOAD
	sw $t3, 32($fp) 	#Save loaded value in destination
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 8($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t9) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 12($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 28($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 36($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 20($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t5, 4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 8($fp) 	#get type dir for Dynamic Call
	lw $t5, 48($t3) 	#Get method of index 12
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VList_print:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 44 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_17_eol 	#LOAD
	sw $t0, 4($fp) 	#Save loaded value in destination
	lw $t5, 4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 12($fp) 	#Save type value in destination
	la $t5, data_17_eol 	#LOAD
	sw $t5, 20($fp) 	#Save loaded value in destination
	lw $t0, 20($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_18_under 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_25_meth 	#LOAD
	sw $t2, 36($fp) 	#Save loaded value in destination
	lw $t7, 36($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 12($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t3) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 16($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 32($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 40($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 12($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t2) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -44 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type VCons
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t4, VCons 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal VList_car___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t1) 	#Save value in attribute of index 0
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal VCons_cdr___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 8($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 4($t2) 	#Save value in attribute of index 1
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_cdr___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_isNil:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t2, 0 	#Load Int
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_head:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 0($fp) 	#Save obtained attribute in destination
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_tail:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 4($t7) 	#Load attribute in index 1
	sw $t0, 0($fp) 	#Save obtained attribute in destination
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -8($fp) 	#Obtain value from source dir
	lw $t6, -12($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t6) 	#Save value in attribute of index 0
	lw $t6, -4($fp) 	#Obtain value from source dir
	lw $t5, -12($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t5) 	#Save value in attribute of index 1
	lw $t2, -12($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
VCons_print:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 80 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Typeof
	lw $t7, -4($t1) 	#
	sw $t7, 8($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 16($fp) 	#Save loaded value in destination
	lw $t8, 16($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 24($fp) 	#Save loaded value in destination
	lw $t4, 24($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_22_meth 	#LOAD
	sw $t3, 32($fp) 	#Save loaded value in destination
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 8($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t9) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 12($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 28($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 36($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 20($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t1, 4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 8($fp) 	#get type dir for Dynamic Call
	lw $t8, 44($t4) 	#Get method of index 11
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 4($t2) 	#Load attribute in index 1
	sw $t5, 44($fp) 	#Save obtained attribute in destination
	lw $t4, 44($fp) 	#Typeof
	lw $t5, -4($t4) 	#
	sw $t5, 48($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 56($fp) 	#Save loaded value in destination
	lw $t4, 56($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 64($fp) 	#Save loaded value in destination
	lw $t5, 64($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_22_meth 	#LOAD
	sw $t6, 72($fp) 	#Save loaded value in destination
	lw $t0, 72($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 48($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t9) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 12($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 68($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 76($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 60($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t9, 44($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 48($fp) 	#get type dir for Dynamic Call
	lw $t2, 44($t3) 	#Get method of index 11
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -80 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Parse
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t5, Parse 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Parse_boolop___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t1) 	#Save value in attribute of index 0
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Parse_rest___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 8($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t8) 	#Save value in attribute of index 1
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_boolop___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal BoolOp___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_read_input:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 292 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Graph___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	lw $t0, -4($fp) 	#Typeof
	lw $t1, -4($t0) 	#
	sw $t1, 16($fp) 	#Save type value in destination
	la $t3, data_17_eol 	#LOAD
	sw $t3, 24($fp) 	#Save loaded value in destination
	lw $t2, 24($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_18_under 	#LOAD
	sw $t5, 32($fp) 	#Save loaded value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_33_meth 	#LOAD
	sw $t2, 40($fp) 	#Save loaded value in destination
	lw $t3, 40($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 16($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t6) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 20($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 36($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 44($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 28($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 16($fp) 	#get type dir for Dynamic Call
	lw $t7, 20($t6) 	#Get method of index 5
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 12($fp) 	#Obtain value to assign
	sw $t4, 8($fp) 	#Assign value
label_while_label_0:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t5) 	#Load attribute in index 0
	sw $t9, 52($fp) 	#Save obtained attribute in destination
	lw $t4, 8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 64($fp) 	#Save obtained attribute in destination
	la $t6, data_17_eol 	#LOAD
	sw $t6, 68($fp) 	#Save loaded value in destination
	lw $t2, 68($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 72($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t9) 	#Load attribute in index 0
	sw $t6, 76($fp) 	#Save obtained attribute in destination
	lw $t2, 76($fp) 	#
	lw $t1, 64($fp) 	#
	sub $t9,  $t1, $t2 	#Minus
	sw $t9, 80($fp) 	#Save result of minus
	lw $t3, 80($fp) 	#
	lw $t0, 80($fp) 	#
	mult $t3, $t0 	#Mult
	mfhi $t3 	#
	sw $t3, 80($fp) 	#Save result of Mult
	li $t4, 1 	#Load Int
	sw $t4, 84($fp) 	#Save loaded value in destination
	lw $t3, 80($fp) 	#
	lw $t4, 84($fp) 	#
	sub $t7,  $t4, $t3 	#Minus
	sw $t7, 80($fp) 	#Save result of minus
	lw $t5, 80($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 88($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 60($fp) 	#Save obtained attribute in destination
	li $t3, 1 	#Load Int
	sw $t3, 92($fp) 	#Save loaded value in destination
	lw $t4, 60($fp) 	#
	lw $t0, 92($fp) 	#
	sub $t1,  $t0, $t4 	#Minus
	sw $t1, 56($fp) 	#Save result of minus
	lw $t4, 56($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 108($fp) 	#Save obtained attribute in destination
	la $t1, data_34_string 	#LOAD
	sw $t1, 112($fp) 	#Save loaded value in destination
	lw $t2, 112($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 116($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t0) 	#Load attribute in index 0
	sw $t4, 120($fp) 	#Save obtained attribute in destination
	lw $t0, 120($fp) 	#
	lw $t4, 108($fp) 	#
	sub $t6,  $t4, $t0 	#Minus
	sw $t6, 124($fp) 	#Save result of minus
	lw $t0, 124($fp) 	#
	lw $t8, 124($fp) 	#
	mult $t0, $t8 	#Mult
	mfhi $t0 	#
	sw $t0, 124($fp) 	#Save result of Mult
	li $t4, 1 	#Load Int
	sw $t4, 128($fp) 	#Save loaded value in destination
	lw $t7, 124($fp) 	#
	lw $t1, 128($fp) 	#
	sub $t0,  $t1, $t7 	#Minus
	sw $t0, 124($fp) 	#Save result of minus
	lw $t1, 124($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 132($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 104($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 136($fp) 	#Save loaded value in destination
	lw $t8, 104($fp) 	#
	lw $t1, 136($fp) 	#
	sub $t0,  $t1, $t8 	#Minus
	sw $t0, 100($fp) 	#Save result of minus
	lw $t0, 100($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 52($fp) 	#Typeof
	lw $t9, -4($t2) 	#
	sw $t9, 144($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 152($fp) 	#Save loaded value in destination
	lw $t0, 152($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 160($fp) 	#Save loaded value in destination
	lw $t6, 160($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 164($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_35_meth 	#LOAD
	sw $t0, 168($fp) 	#Save loaded value in destination
	lw $t8, 168($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 144($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t1) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 20($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 164($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 172($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 156($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t6, 52($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 96($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 140($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 144($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t0) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t9, 48($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 176($fp) 	#Save obtained attribute in destination
	lw $t0, 176($fp) 	#Mov comparisson value to register
	bgtz $t0, label_loop_label_0 	#Compare values in registers and jump to label_loop_label_0 if the second is greater than 0
	j label_pool_label_0 	#Jump to label_pool_label_0
label_loop_label_0:
	lw $t3, -4($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 188($fp) 	#Save type value in destination
	la $t0, data_17_eol 	#LOAD
	sw $t0, 196($fp) 	#Save loaded value in destination
	lw $t5, 196($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_18_under 	#LOAD
	sw $t5, 204($fp) 	#Save loaded value in destination
	lw $t1, 204($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_36_meth 	#LOAD
	sw $t9, 212($fp) 	#Save loaded value in destination
	lw $t4, 212($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 188($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t9) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 20($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 208($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 216($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 200($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 188($fp) 	#get type dir for Dynamic Call
	lw $t3, 32($t8) 	#Get method of index 8
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 184($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 0($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 220($fp) 	#Save type value in destination
	la $t3, data_17_eol 	#LOAD
	sw $t3, 228($fp) 	#Save loaded value in destination
	lw $t9, 228($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 236($fp) 	#Save loaded value in destination
	lw $t3, 236($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_37_meth 	#LOAD
	sw $t1, 244($fp) 	#Save loaded value in destination
	lw $t5, 244($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 220($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t5) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 20($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 240($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 248($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 232($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 184($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 220($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t2) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 180($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, -4($fp) 	#Typeof
	lw $t4, -4($t8) 	#
	sw $t4, 256($fp) 	#Save type value in destination
	la $t8, data_17_eol 	#LOAD
	sw $t8, 264($fp) 	#Save loaded value in destination
	lw $t5, 264($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_18_under 	#LOAD
	sw $t7, 272($fp) 	#Save loaded value in destination
	lw $t3, 272($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_33_meth 	#LOAD
	sw $t7, 280($fp) 	#Save loaded value in destination
	lw $t2, 280($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 284($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 256($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t2) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 20($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 276($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 284($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 268($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 256($fp) 	#get type dir for Dynamic Call
	lw $t0, 20($t6) 	#Get method of index 5
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 252($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 252($fp) 	#Obtain value to assign
	sw $t1, 8($fp) 	#Assign value
	j label_while_label_0 	#Jump to label_while_label_0
label_pool_label_0:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 288($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -292 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_parse_line:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 364 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Vertice___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t8, -8($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 16($fp) 	#Save type value in destination
	la $t6, data_17_eol 	#LOAD
	sw $t6, 24($fp) 	#Save loaded value in destination
	lw $t3, 24($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_18_under 	#LOAD
	sw $t7, 32($fp) 	#Save loaded value in destination
	lw $t5, 32($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_38_meth 	#LOAD
	sw $t3, 40($fp) 	#Save loaded value in destination
	lw $t9, 40($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 16($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t7) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 20($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 36($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 44($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 28($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 16($fp) 	#get type dir for Dynamic Call
	lw $t6, 40($t9) 	#Get method of index 10
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 8($fp) 	#Typeof
	lw $t1, -4($t9) 	#
	sw $t1, 48($fp) 	#Save type value in destination
	la $t0, data_17_eol 	#LOAD
	sw $t0, 56($fp) 	#Save loaded value in destination
	lw $t0, 56($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 64($fp) 	#Save loaded value in destination
	lw $t5, 64($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_29_meth 	#LOAD
	sw $t2, 72($fp) 	#Save loaded value in destination
	lw $t9, 72($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 48($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t7) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 20($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 68($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 76($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 60($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t5, 8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 12($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 48($fp) 	#get type dir for Dynamic Call
	lw $t9, 36($t7) 	#Get method of index 9
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 4($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
label_while_label_1:
	lw $t5, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 4($t5) 	#Load attribute in index 1
	sw $t4, 92($fp) 	#Save obtained attribute in destination
	lw $t5, 92($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 96($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 104($fp) 	#Save loaded value in destination
	lw $t2, 104($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 112($fp) 	#Save loaded value in destination
	lw $t1, 112($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_39_meth 	#LOAD
	sw $t9, 120($fp) 	#Save loaded value in destination
	lw $t3, 120($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 96($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t1) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 20($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 116($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 124($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 108($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t2, 92($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 96($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t0) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 88($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 88($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 128($fp) 	#Save obtained attribute in destination
	li $t5, 0 	#Load Int
	sw $t5, 132($fp) 	#Save loaded value in destination
	lw $t8, 132($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 136($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 140($fp) 	#Save obtained attribute in destination
	lw $t8, 140($fp) 	#
	lw $t2, 128($fp) 	#
	sub $t4,  $t2, $t8 	#Minus
	sw $t4, 144($fp) 	#Save result of minus
	lw $t7, 144($fp) 	#
	lw $t5, 144($fp) 	#
	mult $t7, $t5 	#Mult
	mfhi $t7 	#
	sw $t7, 144($fp) 	#Save result of Mult
	li $t6, 1 	#Load Int
	sw $t6, 148($fp) 	#Save loaded value in destination
	lw $t4, 144($fp) 	#
	lw $t0, 148($fp) 	#
	sub $t8,  $t0, $t4 	#Minus
	sw $t8, 144($fp) 	#Save result of minus
	lw $t5, 144($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 152($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 84($fp) 	#Save obtained attribute in destination
	li $t0, 1 	#Load Int
	sw $t0, 156($fp) 	#Save loaded value in destination
	lw $t4, 84($fp) 	#
	lw $t5, 156($fp) 	#
	sub $t2,  $t5, $t4 	#Minus
	sw $t2, 80($fp) 	#Save result of minus
	lw $t5, 80($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 160($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 164($fp) 	#Save obtained attribute in destination
	lw $t8, 164($fp) 	#Mov comparisson value to register
	bgtz $t8, label_loop_label_1 	#Compare values in registers and jump to label_loop_label_1 if the second is greater than 0
	j label_pool_label_1 	#Jump to label_pool_label_1
label_loop_label_1:
	lw $t9, -8($fp) 	#Typeof
	lw $t0, -4($t9) 	#
	sw $t0, 176($fp) 	#Save type value in destination
	la $t8, data_17_eol 	#LOAD
	sw $t8, 184($fp) 	#Save loaded value in destination
	lw $t6, 184($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 192($fp) 	#Save loaded value in destination
	lw $t6, 192($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_38_meth 	#LOAD
	sw $t3, 200($fp) 	#Save loaded value in destination
	lw $t2, 200($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 176($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t6) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 20($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 196($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 204($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 188($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 92($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 176($fp) 	#get type dir for Dynamic Call
	lw $t3, 40($t0) 	#Get method of index 10
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 172($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 172($fp) 	#Obtain value to assign
	sw $t4, 168($fp) 	#Assign value
	lw $t8, -8($fp) 	#Typeof
	lw $t9, -4($t8) 	#
	sw $t9, 216($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 224($fp) 	#Save loaded value in destination
	lw $t1, 224($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 228($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 232($fp) 	#Save loaded value in destination
	lw $t0, 232($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_38_meth 	#LOAD
	sw $t3, 240($fp) 	#Save loaded value in destination
	lw $t9, 240($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 244($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 216($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t1) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 20($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 236($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 244($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 228($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 92($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 216($fp) 	#get type dir for Dynamic Call
	lw $t0, 40($t6) 	#Get method of index 10
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 212($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 212($fp) 	#Obtain value to assign
	sw $t7, 208($fp) 	#Assign value
	jal Edge___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 256($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 0($fp) 	#Typeof
	lw $t2, -4($t9) 	#
	sw $t2, 264($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 272($fp) 	#Save loaded value in destination
	lw $t8, 272($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_18_under 	#LOAD
	sw $t1, 280($fp) 	#Save loaded value in destination
	lw $t8, 280($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 284($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_40_meth 	#LOAD
	sw $t2, 288($fp) 	#Save loaded value in destination
	lw $t9, 288($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 292($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 264($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t1) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 20($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 284($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 292($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 276($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 264($fp) 	#get type dir for Dynamic Call
	lw $t7, 32($t5) 	#Get method of index 8
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 260($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 256($fp) 	#Typeof
	lw $t6, -4($t1) 	#
	sw $t6, 296($fp) 	#Save type value in destination
	la $t4, data_17_eol 	#LOAD
	sw $t4, 304($fp) 	#Save loaded value in destination
	lw $t5, 304($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_18_under 	#LOAD
	sw $t6, 312($fp) 	#Save loaded value in destination
	lw $t9, 312($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_29_meth 	#LOAD
	sw $t7, 320($fp) 	#Save loaded value in destination
	lw $t1, 320($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 324($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 296($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t2) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 20($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 316($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 324($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 308($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t1, 256($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 260($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 168($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 208($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 296($fp) 	#get type dir for Dynamic Call
	lw $t1, 28($t8) 	#Get method of index 7
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 252($fp) 	#Save return value in destination
	addi $sp,  $sp, -16 	#Remove Args from Stack
	lw $t1, 0($fp) 	#Typeof
	lw $t2, -4($t1) 	#
	sw $t2, 328($fp) 	#Save type value in destination
	la $t3, data_17_eol 	#LOAD
	sw $t3, 336($fp) 	#Save loaded value in destination
	lw $t3, 336($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 340($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 344($fp) 	#Save loaded value in destination
	lw $t7, 344($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_41_meth 	#LOAD
	sw $t9, 352($fp) 	#Save loaded value in destination
	lw $t2, 352($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 328($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t6) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 20($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 348($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 356($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 340($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 252($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 328($fp) 	#get type dir for Dynamic Call
	lw $t4, 40($t1) 	#Get method of index 10
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 248($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	j label_while_label_1 	#Jump to label_while_label_1
label_pool_label_1:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 360($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -364 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_c2i:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 444 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	la $t5, data_42_string 	#LOAD
	sw $t5, 8($fp) 	#Save loaded value in destination
	lw $t1, 8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 16($fp) 	#Save obtained attribute in destination
	lw $t6, 16($fp) 	#
	lw $t0, 4($fp) 	#
	sub $t1,  $t0, $t6 	#Minus
	sw $t1, 20($fp) 	#Save result of minus
	lw $t2, 20($fp) 	#
	lw $t9, 20($fp) 	#
	mult $t2, $t9 	#Mult
	mfhi $t2 	#
	sw $t2, 20($fp) 	#Save result of Mult
	li $t4, 1 	#Load Int
	sw $t4, 24($fp) 	#Save loaded value in destination
	lw $t5, 20($fp) 	#
	lw $t8, 24($fp) 	#
	sub $t3,  $t8, $t5 	#Minus
	sw $t3, 20($fp) 	#Save result of minus
	lw $t3, 20($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 28($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_1 	#Compare values in registers and jump to label_then_1 if the second is greater than 0
	j label_else_1 	#Jump to label_else_1
label_then_1:
	li $t2, 0 	#Load Int
	sw $t2, 32($fp) 	#Save loaded value in destination
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 36($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	j label_continue_1 	#Jump to label_continue_1
label_else_1:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 44($fp) 	#Save obtained attribute in destination
	la $t9, data_43_string 	#LOAD
	sw $t9, 48($fp) 	#Save loaded value in destination
	lw $t5, 48($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 52($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 56($fp) 	#Save obtained attribute in destination
	lw $t0, 56($fp) 	#
	lw $t2, 44($fp) 	#
	sub $t8,  $t2, $t0 	#Minus
	sw $t8, 60($fp) 	#Save result of minus
	lw $t4, 60($fp) 	#
	lw $t9, 60($fp) 	#
	mult $t4, $t9 	#Mult
	mfhi $t4 	#
	sw $t4, 60($fp) 	#Save result of Mult
	li $t8, 1 	#Load Int
	sw $t8, 64($fp) 	#Save loaded value in destination
	lw $t0, 60($fp) 	#
	lw $t4, 64($fp) 	#
	sub $t5,  $t4, $t0 	#Minus
	sw $t5, 60($fp) 	#Save result of minus
	lw $t4, 60($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 68($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_2 	#Compare values in registers and jump to label_then_2 if the second is greater than 0
	j label_else_2 	#Jump to label_else_2
label_then_2:
	li $t5, 1 	#Load Int
	sw $t5, 72($fp) 	#Save loaded value in destination
	lw $t3, 72($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 76($fp) 	#Obtain value to assign
	sw $t4, 40($fp) 	#Assign value
	j label_continue_2 	#Jump to label_continue_2
label_else_2:
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 84($fp) 	#Save obtained attribute in destination
	la $t5, data_44_string 	#LOAD
	sw $t5, 88($fp) 	#Save loaded value in destination
	lw $t0, 88($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 92($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t4) 	#Load attribute in index 0
	sw $t7, 96($fp) 	#Save obtained attribute in destination
	lw $t1, 96($fp) 	#
	lw $t0, 84($fp) 	#
	sub $t6,  $t0, $t1 	#Minus
	sw $t6, 100($fp) 	#Save result of minus
	lw $t4, 100($fp) 	#
	lw $t9, 100($fp) 	#
	mult $t4, $t9 	#Mult
	mfhi $t4 	#
	sw $t4, 100($fp) 	#Save result of Mult
	li $t5, 1 	#Load Int
	sw $t5, 104($fp) 	#Save loaded value in destination
	lw $t2, 100($fp) 	#
	lw $t6, 104($fp) 	#
	sub $t5,  $t6, $t2 	#Minus
	sw $t5, 100($fp) 	#Save result of minus
	lw $t3, 100($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 108($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_3 	#Compare values in registers and jump to label_then_3 if the second is greater than 0
	j label_else_3 	#Jump to label_else_3
label_then_3:
	li $t7, 2 	#Load Int
	sw $t7, 112($fp) 	#Save loaded value in destination
	lw $t9, 112($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 116($fp) 	#Obtain value to assign
	sw $t7, 80($fp) 	#Assign value
	j label_continue_3 	#Jump to label_continue_3
label_else_3:
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t8) 	#Load attribute in index 0
	sw $t2, 124($fp) 	#Save obtained attribute in destination
	la $t9, data_45_string 	#LOAD
	sw $t9, 128($fp) 	#Save loaded value in destination
	lw $t5, 128($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 132($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 136($fp) 	#Save obtained attribute in destination
	lw $t8, 136($fp) 	#
	lw $t5, 124($fp) 	#
	sub $t6,  $t5, $t8 	#Minus
	sw $t6, 140($fp) 	#Save result of minus
	lw $t2, 140($fp) 	#
	lw $t0, 140($fp) 	#
	mult $t2, $t0 	#Mult
	mfhi $t2 	#
	sw $t2, 140($fp) 	#Save result of Mult
	li $t2, 1 	#Load Int
	sw $t2, 144($fp) 	#Save loaded value in destination
	lw $t5, 140($fp) 	#
	lw $t9, 144($fp) 	#
	sub $t8,  $t9, $t5 	#Minus
	sw $t8, 140($fp) 	#Save result of minus
	lw $t9, 140($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 148($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_4 	#Compare values in registers and jump to label_then_4 if the second is greater than 0
	j label_else_4 	#Jump to label_else_4
label_then_4:
	li $t6, 3 	#Load Int
	sw $t6, 152($fp) 	#Save loaded value in destination
	lw $t7, 152($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 156($fp) 	#Obtain value to assign
	sw $t6, 120($fp) 	#Assign value
	j label_continue_4 	#Jump to label_continue_4
label_else_4:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 164($fp) 	#Save obtained attribute in destination
	la $t0, data_46_string 	#LOAD
	sw $t0, 168($fp) 	#Save loaded value in destination
	lw $t3, 168($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 172($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t7) 	#Load attribute in index 0
	sw $t0, 176($fp) 	#Save obtained attribute in destination
	lw $t5, 176($fp) 	#
	lw $t9, 164($fp) 	#
	sub $t2,  $t9, $t5 	#Minus
	sw $t2, 180($fp) 	#Save result of minus
	lw $t0, 180($fp) 	#
	lw $t2, 180($fp) 	#
	mult $t0, $t2 	#Mult
	mfhi $t0 	#
	sw $t0, 180($fp) 	#Save result of Mult
	li $t6, 1 	#Load Int
	sw $t6, 184($fp) 	#Save loaded value in destination
	lw $t1, 180($fp) 	#
	lw $t8, 184($fp) 	#
	sub $t2,  $t8, $t1 	#Minus
	sw $t2, 180($fp) 	#Save result of minus
	lw $t0, 180($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 188($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_5 	#Compare values in registers and jump to label_then_5 if the second is greater than 0
	j label_else_5 	#Jump to label_else_5
label_then_5:
	li $t0, 4 	#Load Int
	sw $t0, 192($fp) 	#Save loaded value in destination
	lw $t7, 192($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 196($fp) 	#Obtain value to assign
	sw $t5, 160($fp) 	#Assign value
	j label_continue_5 	#Jump to label_continue_5
label_else_5:
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 204($fp) 	#Save obtained attribute in destination
	la $t6, data_47_string 	#LOAD
	sw $t6, 208($fp) 	#Save loaded value in destination
	lw $t6, 208($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 212($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t3) 	#Load attribute in index 0
	sw $t5, 216($fp) 	#Save obtained attribute in destination
	lw $t5, 216($fp) 	#
	lw $t8, 204($fp) 	#
	sub $t2,  $t8, $t5 	#Minus
	sw $t2, 220($fp) 	#Save result of minus
	lw $t6, 220($fp) 	#
	lw $t0, 220($fp) 	#
	mult $t6, $t0 	#Mult
	mfhi $t6 	#
	sw $t6, 220($fp) 	#Save result of Mult
	li $t5, 1 	#Load Int
	sw $t5, 224($fp) 	#Save loaded value in destination
	lw $t6, 220($fp) 	#
	lw $t0, 224($fp) 	#
	sub $t3,  $t0, $t6 	#Minus
	sw $t3, 220($fp) 	#Save result of minus
	lw $t8, 220($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 228($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 228($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_6 	#Compare values in registers and jump to label_then_6 if the second is greater than 0
	j label_else_6 	#Jump to label_else_6
label_then_6:
	li $t7, 5 	#Load Int
	sw $t7, 232($fp) 	#Save loaded value in destination
	lw $t7, 232($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 236($fp) 	#Obtain value to assign
	sw $t2, 200($fp) 	#Assign value
	j label_continue_6 	#Jump to label_continue_6
label_else_6:
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t8) 	#Load attribute in index 0
	sw $t1, 244($fp) 	#Save obtained attribute in destination
	la $t0, data_48_string 	#LOAD
	sw $t0, 248($fp) 	#Save loaded value in destination
	lw $t9, 248($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 252($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 256($fp) 	#Save obtained attribute in destination
	lw $t7, 256($fp) 	#
	lw $t6, 244($fp) 	#
	sub $t0,  $t6, $t7 	#Minus
	sw $t0, 260($fp) 	#Save result of minus
	lw $t8, 260($fp) 	#
	lw $t1, 260($fp) 	#
	mult $t8, $t1 	#Mult
	mfhi $t8 	#
	sw $t8, 260($fp) 	#Save result of Mult
	li $t2, 1 	#Load Int
	sw $t2, 264($fp) 	#Save loaded value in destination
	lw $t0, 260($fp) 	#
	lw $t9, 264($fp) 	#
	sub $t1,  $t9, $t0 	#Minus
	sw $t1, 260($fp) 	#Save result of minus
	lw $t8, 260($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 268($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_7 	#Compare values in registers and jump to label_then_7 if the second is greater than 0
	j label_else_7 	#Jump to label_else_7
label_then_7:
	li $t9, 6 	#Load Int
	sw $t9, 272($fp) 	#Save loaded value in destination
	lw $t0, 272($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 276($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 276($fp) 	#Obtain value to assign
	sw $t5, 240($fp) 	#Assign value
	j label_continue_7 	#Jump to label_continue_7
label_else_7:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 284($fp) 	#Save obtained attribute in destination
	la $t6, data_49_string 	#LOAD
	sw $t6, 288($fp) 	#Save loaded value in destination
	lw $t7, 288($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 292($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 292($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 296($fp) 	#Save obtained attribute in destination
	lw $t3, 296($fp) 	#
	lw $t9, 284($fp) 	#
	sub $t8,  $t9, $t3 	#Minus
	sw $t8, 300($fp) 	#Save result of minus
	lw $t8, 300($fp) 	#
	lw $t3, 300($fp) 	#
	mult $t8, $t3 	#Mult
	mfhi $t8 	#
	sw $t8, 300($fp) 	#Save result of Mult
	li $t1, 1 	#Load Int
	sw $t1, 304($fp) 	#Save loaded value in destination
	lw $t6, 300($fp) 	#
	lw $t4, 304($fp) 	#
	sub $t3,  $t4, $t6 	#Minus
	sw $t3, 300($fp) 	#Save result of minus
	lw $t3, 300($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 308($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_8 	#Compare values in registers and jump to label_then_8 if the second is greater than 0
	j label_else_8 	#Jump to label_else_8
label_then_8:
	li $t2, 7 	#Load Int
	sw $t2, 312($fp) 	#Save loaded value in destination
	lw $t4, 312($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 316($fp) 	#Obtain value to assign
	sw $t9, 280($fp) 	#Assign value
	j label_continue_8 	#Jump to label_continue_8
label_else_8:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 324($fp) 	#Save obtained attribute in destination
	la $t3, data_50_string 	#LOAD
	sw $t3, 328($fp) 	#Save loaded value in destination
	lw $t1, 328($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 332($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t5) 	#Load attribute in index 0
	sw $t6, 336($fp) 	#Save obtained attribute in destination
	lw $t1, 336($fp) 	#
	lw $t7, 324($fp) 	#
	sub $t6,  $t7, $t1 	#Minus
	sw $t6, 340($fp) 	#Save result of minus
	lw $t0, 340($fp) 	#
	lw $t5, 340($fp) 	#
	mult $t0, $t5 	#Mult
	mfhi $t0 	#
	sw $t0, 340($fp) 	#Save result of Mult
	li $t1, 1 	#Load Int
	sw $t1, 344($fp) 	#Save loaded value in destination
	lw $t6, 340($fp) 	#
	lw $t7, 344($fp) 	#
	sub $t4,  $t7, $t6 	#Minus
	sw $t4, 340($fp) 	#Save result of minus
	lw $t9, 340($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 348($fp) 	#Mov comparisson value to register
	bgtz $t2, label_then_9 	#Compare values in registers and jump to label_then_9 if the second is greater than 0
	j label_else_9 	#Jump to label_else_9
label_then_9:
	li $t1, 8 	#Load Int
	sw $t1, 352($fp) 	#Save loaded value in destination
	lw $t1, 352($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 356($fp) 	#Obtain value to assign
	sw $t2, 320($fp) 	#Assign value
	j label_continue_9 	#Jump to label_continue_9
label_else_9:
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t6) 	#Load attribute in index 0
	sw $t8, 364($fp) 	#Save obtained attribute in destination
	la $t0, data_51_string 	#LOAD
	sw $t0, 368($fp) 	#Save loaded value in destination
	lw $t8, 368($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 372($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 372($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 376($fp) 	#Save obtained attribute in destination
	lw $t0, 376($fp) 	#
	lw $t2, 364($fp) 	#
	sub $t4,  $t2, $t0 	#Minus
	sw $t4, 380($fp) 	#Save result of minus
	lw $t3, 380($fp) 	#
	lw $t0, 380($fp) 	#
	mult $t3, $t0 	#Mult
	mfhi $t3 	#
	sw $t3, 380($fp) 	#Save result of Mult
	li $t1, 1 	#Load Int
	sw $t1, 384($fp) 	#Save loaded value in destination
	lw $t2, 380($fp) 	#
	lw $t7, 384($fp) 	#
	sub $t6,  $t7, $t2 	#Minus
	sw $t6, 380($fp) 	#Save result of minus
	lw $t2, 380($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 388($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 388($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_10 	#Compare values in registers and jump to label_then_10 if the second is greater than 0
	j label_else_10 	#Jump to label_else_10
label_then_10:
	li $t9, 9 	#Load Int
	sw $t9, 392($fp) 	#Save loaded value in destination
	lw $t0, 392($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 396($fp) 	#Obtain value to assign
	sw $t7, 360($fp) 	#Assign value
	j label_continue_10 	#Jump to label_continue_10
label_else_10:
	lw $t3, -8($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 404($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 412($fp) 	#Save loaded value in destination
	lw $t8, 412($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 416($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 420($fp) 	#Save loaded value in destination
	lw $t1, 420($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 424($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_28_meth 	#LOAD
	sw $t7, 428($fp) 	#Save loaded value in destination
	lw $t3, 428($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 432($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 404($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t7) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 408($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 408($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 424($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 432($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 416($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t6, -8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 404($fp) 	#get type dir for Dynamic Call
	lw $t6, 0($t4) 	#Get method of index 0
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 400($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	li $t9, 0 	#Load Int
	sw $t9, 436($fp) 	#Save loaded value in destination
	lw $t2, 436($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 440($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 440($fp) 	#Obtain value to assign
	sw $t7, 360($fp) 	#Assign value
label_continue_10:
	lw $t7, 360($fp) 	#Obtain value to assign
	sw $t7, 320($fp) 	#Assign value
label_continue_9:
	lw $t0, 320($fp) 	#Obtain value to assign
	sw $t0, 280($fp) 	#Assign value
label_continue_8:
	lw $t6, 280($fp) 	#Obtain value to assign
	sw $t6, 240($fp) 	#Assign value
label_continue_7:
	lw $t1, 240($fp) 	#Obtain value to assign
	sw $t1, 200($fp) 	#Assign value
label_continue_6:
	lw $t5, 200($fp) 	#Obtain value to assign
	sw $t5, 160($fp) 	#Assign value
label_continue_5:
	lw $t2, 160($fp) 	#Obtain value to assign
	sw $t2, 120($fp) 	#Assign value
label_continue_4:
	lw $t1, 120($fp) 	#Obtain value to assign
	sw $t1, 80($fp) 	#Assign value
label_continue_3:
	lw $t0, 80($fp) 	#Obtain value to assign
	sw $t0, 40($fp) 	#Assign value
label_continue_2:
	lw $t6, 40($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
label_continue_1:
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -444 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_rest___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_34_string 	#LOAD
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_a2i:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 576 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 8($fp) 	#Save type value in destination
	la $t6, data_17_eol 	#LOAD
	sw $t6, 16($fp) 	#Save loaded value in destination
	lw $t4, 16($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_18_under 	#LOAD
	sw $t1, 24($fp) 	#Save loaded value in destination
	lw $t7, 24($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_39_meth 	#LOAD
	sw $t6, 32($fp) 	#Save loaded value in destination
	lw $t3, 32($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 8($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t7) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 28($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 36($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 20($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t0) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 40($fp) 	#Save obtained attribute in destination
	li $t7, 0 	#Load Int
	sw $t7, 44($fp) 	#Save loaded value in destination
	lw $t7, 44($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 48($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 52($fp) 	#Save obtained attribute in destination
	lw $t6, 52($fp) 	#
	lw $t5, 40($fp) 	#
	sub $t7,  $t5, $t6 	#Minus
	sw $t7, 56($fp) 	#Save result of minus
	lw $t1, 56($fp) 	#
	lw $t4, 56($fp) 	#
	mult $t1, $t4 	#Mult
	mfhi $t1 	#
	sw $t1, 56($fp) 	#Save result of Mult
	li $t0, 1 	#Load Int
	sw $t0, 60($fp) 	#Save loaded value in destination
	lw $t9, 56($fp) 	#
	lw $t2, 60($fp) 	#
	sub $t6,  $t2, $t9 	#Minus
	sw $t6, 56($fp) 	#Save result of minus
	lw $t9, 56($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 64($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_11 	#Compare values in registers and jump to label_then_11 if the second is greater than 0
	j label_else_11 	#Jump to label_else_11
label_then_11:
	li $t3, 0 	#Load Int
	sw $t3, 68($fp) 	#Save loaded value in destination
	lw $t6, 68($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 72($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	j label_continue_11 	#Jump to label_continue_11
label_else_11:
	li $t7, 0 	#Load Int
	sw $t7, 84($fp) 	#Save loaded value in destination
	lw $t4, 84($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 1 	#Load Int
	sw $t6, 92($fp) 	#Save loaded value in destination
	lw $t9, 92($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t4, -4($t6) 	#
	sw $t4, 100($fp) 	#Save type value in destination
	la $t5, data_17_eol 	#LOAD
	sw $t5, 108($fp) 	#Save loaded value in destination
	lw $t1, 108($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_18_under 	#LOAD
	sw $t6, 116($fp) 	#Save loaded value in destination
	lw $t0, 116($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_52_meth 	#LOAD
	sw $t8, 124($fp) 	#Save loaded value in destination
	lw $t4, 124($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 100($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t4) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 12($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 120($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 128($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 112($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 88($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 96($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 100($fp) 	#get type dir for Dynamic Call
	lw $t8, 20($t7) 	#Get method of index 5
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 80($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t0, 80($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 132($fp) 	#Save obtained attribute in destination
	la $t8, data_53_string 	#LOAD
	sw $t8, 136($fp) 	#Save loaded value in destination
	lw $t6, 136($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 140($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 144($fp) 	#Save obtained attribute in destination
	lw $t8, 144($fp) 	#
	lw $t3, 132($fp) 	#
	sub $t7,  $t3, $t8 	#Minus
	sw $t7, 148($fp) 	#Save result of minus
	lw $t7, 148($fp) 	#
	lw $t5, 148($fp) 	#
	mult $t7, $t5 	#Mult
	mfhi $t7 	#
	sw $t7, 148($fp) 	#Save result of Mult
	li $t5, 1 	#Load Int
	sw $t5, 152($fp) 	#Save loaded value in destination
	lw $t6, 148($fp) 	#
	lw $t9, 152($fp) 	#
	sub $t3,  $t9, $t6 	#Minus
	sw $t3, 148($fp) 	#Save result of minus
	lw $t7, 148($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 156($fp) 	#Mov comparisson value to register
	bgtz $t3, label_then_12 	#Compare values in registers and jump to label_then_12 if the second is greater than 0
	j label_else_12 	#Jump to label_else_12
label_then_12:
	li $t0, 1 	#Load Int
	sw $t0, 176($fp) 	#Save loaded value in destination
	lw $t4, 176($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 180($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t6, -4($t4) 	#
	sw $t6, 188($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 196($fp) 	#Save loaded value in destination
	lw $t3, 196($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 204($fp) 	#Save loaded value in destination
	lw $t1, 204($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_39_meth 	#LOAD
	sw $t0, 212($fp) 	#Save loaded value in destination
	lw $t6, 212($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 188($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t5) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 12($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 208($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 216($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 200($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 188($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t9) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 184($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 184($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 220($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 224($fp) 	#Save loaded value in destination
	lw $t0, 224($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 228($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 228($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 232($fp) 	#Save obtained attribute in destination
	lw $t2, 232($fp) 	#
	lw $t5, 220($fp) 	#
	sub $t4,  $t5, $t2 	#Minus
	sw $t4, 236($fp) 	#Save result of minus
	lw $t6, 236($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t0, -4($t7) 	#
	sw $t0, 244($fp) 	#Save type value in destination
	la $t2, data_17_eol 	#LOAD
	sw $t2, 252($fp) 	#Save loaded value in destination
	lw $t4, 252($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 256($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_18_under 	#LOAD
	sw $t6, 260($fp) 	#Save loaded value in destination
	lw $t5, 260($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 264($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_52_meth 	#LOAD
	sw $t7, 268($fp) 	#Save loaded value in destination
	lw $t1, 268($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 272($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 244($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t5) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 12($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 264($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 272($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 256($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 180($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 240($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 244($fp) 	#get type dir for Dynamic Call
	lw $t3, 20($t8) 	#Get method of index 5
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 172($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, -8($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 276($fp) 	#Save type value in destination
	la $t0, data_17_eol 	#LOAD
	sw $t0, 284($fp) 	#Save loaded value in destination
	lw $t4, 284($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 288($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_18_under 	#LOAD
	sw $t5, 292($fp) 	#Save loaded value in destination
	lw $t4, 292($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 296($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_54_meth 	#LOAD
	sw $t0, 300($fp) 	#Save loaded value in destination
	lw $t1, 300($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 304($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 276($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t0) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 12($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 296($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 304($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 288($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 172($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 276($fp) 	#get type dir for Dynamic Call
	lw $t2, 44($t8) 	#Get method of index 11
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 168($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 168($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 164($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 308($fp) 	#Save loaded value in destination
	lw $t5, 164($fp) 	#
	lw $t7, 308($fp) 	#
	sub $t3,  $t7, $t5 	#Minus
	sw $t3, 160($fp) 	#Save result of minus
	lw $t7, 160($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 312($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 312($fp) 	#Obtain value to assign
	sw $t5, 76($fp) 	#Assign value
	j label_continue_12 	#Jump to label_continue_12
label_else_12:
	li $t7, 0 	#Load Int
	sw $t7, 324($fp) 	#Save loaded value in destination
	lw $t6, 324($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 328($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 1 	#Load Int
	sw $t1, 332($fp) 	#Save loaded value in destination
	lw $t7, 332($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 336($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 340($fp) 	#Save type value in destination
	la $t6, data_17_eol 	#LOAD
	sw $t6, 348($fp) 	#Save loaded value in destination
	lw $t1, 348($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 352($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 356($fp) 	#Save loaded value in destination
	lw $t5, 356($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 360($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_52_meth 	#LOAD
	sw $t6, 364($fp) 	#Save loaded value in destination
	lw $t1, 364($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 368($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 340($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t6) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 12($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 360($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 368($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 352($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 328($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 336($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 340($fp) 	#get type dir for Dynamic Call
	lw $t9, 20($t5) 	#Get method of index 5
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 320($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t3, 320($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 372($fp) 	#Save obtained attribute in destination
	la $t7, data_55_string 	#LOAD
	sw $t7, 376($fp) 	#Save loaded value in destination
	lw $t8, 376($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 380($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 380($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 384($fp) 	#Save obtained attribute in destination
	lw $t5, 384($fp) 	#
	lw $t8, 372($fp) 	#
	sub $t7,  $t8, $t5 	#Minus
	sw $t7, 388($fp) 	#Save result of minus
	lw $t4, 388($fp) 	#
	lw $t9, 388($fp) 	#
	mult $t4, $t9 	#Mult
	mfhi $t4 	#
	sw $t4, 388($fp) 	#Save result of Mult
	li $t9, 1 	#Load Int
	sw $t9, 392($fp) 	#Save loaded value in destination
	lw $t5, 388($fp) 	#
	lw $t6, 392($fp) 	#
	sub $t3,  $t6, $t5 	#Minus
	sw $t3, 388($fp) 	#Save result of minus
	lw $t8, 388($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 396($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_13 	#Compare values in registers and jump to label_then_13 if the second is greater than 0
	j label_else_13 	#Jump to label_else_13
label_then_13:
	li $t0, 1 	#Load Int
	sw $t0, 408($fp) 	#Save loaded value in destination
	lw $t5, 408($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 412($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t2, -4($t0) 	#
	sw $t2, 420($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 428($fp) 	#Save loaded value in destination
	lw $t1, 428($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 432($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 436($fp) 	#Save loaded value in destination
	lw $t1, 436($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 440($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_39_meth 	#LOAD
	sw $t4, 444($fp) 	#Save loaded value in destination
	lw $t2, 444($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 448($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 420($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t0) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 12($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 440($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 448($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 432($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 420($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t1) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 416($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 416($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 452($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 456($fp) 	#Save loaded value in destination
	lw $t1, 456($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 460($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 460($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t6) 	#Load attribute in index 0
	sw $t0, 464($fp) 	#Save obtained attribute in destination
	lw $t9, 464($fp) 	#
	lw $t2, 452($fp) 	#
	sub $t4,  $t2, $t9 	#Minus
	sw $t4, 468($fp) 	#Save result of minus
	lw $t8, 468($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 472($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t4, -4($t2) 	#
	sw $t4, 476($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 484($fp) 	#Save loaded value in destination
	lw $t3, 484($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 488($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_18_under 	#LOAD
	sw $t8, 492($fp) 	#Save loaded value in destination
	lw $t4, 492($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 496($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_52_meth 	#LOAD
	sw $t6, 500($fp) 	#Save loaded value in destination
	lw $t0, 500($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 504($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 476($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t2) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 12($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 496($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 504($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 488($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 412($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 472($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 476($fp) 	#get type dir for Dynamic Call
	lw $t2, 20($t8) 	#Get method of index 5
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 404($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t2, -8($fp) 	#Typeof
	lw $t6, -4($t2) 	#
	sw $t6, 508($fp) 	#Save type value in destination
	la $t4, data_17_eol 	#LOAD
	sw $t4, 516($fp) 	#Save loaded value in destination
	lw $t6, 516($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 520($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_18_under 	#LOAD
	sw $t6, 524($fp) 	#Save loaded value in destination
	lw $t9, 524($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 528($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_38_meth 	#LOAD
	sw $t1, 532($fp) 	#Save loaded value in destination
	lw $t2, 532($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 536($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 508($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t7) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 12($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 528($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 536($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 520($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 404($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 508($fp) 	#get type dir for Dynamic Call
	lw $t0, 40($t9) 	#Get method of index 10
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 400($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 400($fp) 	#Obtain value to assign
	sw $t8, 316($fp) 	#Assign value
	j label_continue_13 	#Jump to label_continue_13
label_else_13:
	lw $t4, -8($fp) 	#Typeof
	lw $t5, -4($t4) 	#
	sw $t5, 544($fp) 	#Save type value in destination
	la $t3, data_17_eol 	#LOAD
	sw $t3, 552($fp) 	#Save loaded value in destination
	lw $t4, 552($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 556($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 560($fp) 	#Save loaded value in destination
	lw $t1, 560($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 564($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_54_meth 	#LOAD
	sw $t0, 568($fp) 	#Save loaded value in destination
	lw $t0, 568($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 572($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 544($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t0) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 12($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 564($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 572($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 556($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 544($fp) 	#get type dir for Dynamic Call
	lw $t7, 44($t3) 	#Get method of index 11
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 540($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 540($fp) 	#Obtain value to assign
	sw $t3, 316($fp) 	#Assign value
label_continue_13:
	lw $t7, 316($fp) 	#Obtain value to assign
	sw $t7, 76($fp) 	#Assign value
label_continue_12:
	lw $t7, 76($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
label_continue_11:
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -576 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Parse_a2i_aux:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 656 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t0, 0 	#Load Int
	sw $t0, 4($fp) 	#Save loaded value in destination
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 8($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	lw $t6, -4($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 20($fp) 	#Save type value in destination
	la $t8, data_17_eol 	#LOAD
	sw $t8, 28($fp) 	#Save loaded value in destination
	lw $t9, 28($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_18_under 	#LOAD
	sw $t7, 36($fp) 	#Save loaded value in destination
	lw $t1, 36($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_39_meth 	#LOAD
	sw $t2, 44($fp) 	#Save loaded value in destination
	lw $t4, 44($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 20($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t7) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 40($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 48($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 32($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 20($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t2) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 16($fp) 	#Obtain value to assign
	sw $t9, 12($fp) 	#Assign value
	li $t4, 0 	#Load Int
	sw $t4, 56($fp) 	#Save loaded value in destination
	lw $t6, 56($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 60($fp) 	#Obtain value to assign
	sw $t6, 52($fp) 	#Assign value
label_while_label_2:
	lw $t7, 52($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 64($fp) 	#Save obtained attribute in destination
	lw $t3, 12($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 68($fp) 	#Save obtained attribute in destination
	lw $t6, 64($fp) 	#
	lw $t1, 68($fp) 	#
	sub $t4,  $t1, $t6 	#Minus
	sw $t4, 72($fp) 	#Save result of minus
	lw $t6, 72($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 76($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 80($fp) 	#Save obtained attribute in destination
	lw $t3, 80($fp) 	#Mov comparisson value to register
	bgtz $t3, label_loop_label_2 	#Compare values in registers and jump to label_loop_label_2 if the second is greater than 0
	j label_pool_label_2 	#Jump to label_pool_label_2
label_loop_label_2:
	li $t2, 1 	#Load Int
	sw $t2, 92($fp) 	#Save loaded value in destination
	lw $t3, 92($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t4, -4($t3) 	#
	sw $t4, 100($fp) 	#Save type value in destination
	la $t0, data_17_eol 	#LOAD
	sw $t0, 108($fp) 	#Save loaded value in destination
	lw $t5, 108($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 116($fp) 	#Save loaded value in destination
	lw $t6, 116($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_52_meth 	#LOAD
	sw $t1, 124($fp) 	#Save loaded value in destination
	lw $t8, 124($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 100($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t1) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 120($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 128($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 112($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 52($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 96($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 100($fp) 	#get type dir for Dynamic Call
	lw $t2, 20($t6) 	#Get method of index 5
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 88($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, 88($fp) 	#Obtain value to assign
	sw $t4, 84($fp) 	#Assign value
	lw $t0, 84($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t0) 	#Load attribute in index 0
	sw $t4, 136($fp) 	#Save obtained attribute in destination
	la $t5, data_55_string 	#LOAD
	sw $t5, 140($fp) 	#Save loaded value in destination
	lw $t5, 140($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 144($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 148($fp) 	#Save obtained attribute in destination
	lw $t8, 148($fp) 	#
	lw $t4, 136($fp) 	#
	sub $t6,  $t4, $t8 	#Minus
	sw $t6, 152($fp) 	#Save result of minus
	lw $t1, 152($fp) 	#
	lw $t3, 152($fp) 	#
	mult $t1, $t3 	#Mult
	mfhi $t1 	#
	sw $t1, 152($fp) 	#Save result of Mult
	li $t7, 1 	#Load Int
	sw $t7, 156($fp) 	#Save loaded value in destination
	lw $t5, 152($fp) 	#
	lw $t9, 156($fp) 	#
	sub $t3,  $t9, $t5 	#Minus
	sw $t3, 152($fp) 	#Save result of minus
	lw $t7, 152($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 160($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_14 	#Compare values in registers and jump to label_then_14 if the second is greater than 0
	j label_else_14 	#Jump to label_else_14
label_then_14:
	lw $t2, 52($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 168($fp) 	#Save obtained attribute in destination
	li $t7, 1 	#Load Int
	sw $t7, 172($fp) 	#Save loaded value in destination
	lw $t6, 172($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 176($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 180($fp) 	#Save obtained attribute in destination
	lw $t1, 180($fp) 	#
	lw $t9, 168($fp) 	#
	add $t4,  $t1, $t9 	#Plus
	sw $t4, 184($fp) 	#Save result of plus
	lw $t9, 184($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 196($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 204($fp) 	#Save loaded value in destination
	lw $t9, 204($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_18_under 	#LOAD
	sw $t2, 212($fp) 	#Save loaded value in destination
	lw $t5, 212($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_39_meth 	#LOAD
	sw $t9, 220($fp) 	#Save loaded value in destination
	lw $t6, 220($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 224($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 196($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t6) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 24($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 216($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 224($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 208($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 196($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t8) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 192($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 192($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 228($fp) 	#Save obtained attribute in destination
	lw $t3, 52($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 232($fp) 	#Save obtained attribute in destination
	lw $t2, 232($fp) 	#
	lw $t9, 228($fp) 	#
	sub $t4,  $t9, $t2 	#Minus
	sw $t4, 236($fp) 	#Save result of minus
	lw $t0, 236($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 240($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t0) 	#Load attribute in index 0
	sw $t8, 244($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 248($fp) 	#Save loaded value in destination
	lw $t7, 248($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 252($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 256($fp) 	#Save obtained attribute in destination
	lw $t5, 256($fp) 	#
	lw $t4, 244($fp) 	#
	sub $t0,  $t4, $t5 	#Minus
	sw $t0, 260($fp) 	#Save result of minus
	lw $t5, 260($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 264($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t3, -4($t8) 	#
	sw $t3, 268($fp) 	#Save type value in destination
	la $t5, data_17_eol 	#LOAD
	sw $t5, 276($fp) 	#Save loaded value in destination
	lw $t2, 276($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_18_under 	#LOAD
	sw $t3, 284($fp) 	#Save loaded value in destination
	lw $t8, 284($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 288($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_52_meth 	#LOAD
	sw $t6, 292($fp) 	#Save loaded value in destination
	lw $t8, 292($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 296($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 268($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t9) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 288($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 296($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 280($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 188($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 264($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 268($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t8) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 164($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t0, 164($fp) 	#Obtain value from source dir
	lw $t9, -8($fp) 	#Dir of instance of attribute to set
	sw $t0, 4($t9) 	#Save value in attribute of index 1
	lw $t9, 12($fp) 	#Obtain value to assign
	sw $t9, 52($fp) 	#Assign value
	lw $t6, 52($fp) 	#Obtain value to assign
	sw $t6, 132($fp) 	#Assign value
	j label_continue_14 	#Jump to label_continue_14
label_else_14:
	lw $t6, 84($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 304($fp) 	#Save obtained attribute in destination
	la $t1, data_26_string 	#LOAD
	sw $t1, 308($fp) 	#Save loaded value in destination
	lw $t2, 308($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 312($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 312($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t0) 	#Load attribute in index 0
	sw $t6, 316($fp) 	#Save obtained attribute in destination
	lw $t5, 316($fp) 	#
	lw $t7, 304($fp) 	#
	sub $t8,  $t7, $t5 	#Minus
	sw $t8, 320($fp) 	#Save result of minus
	lw $t7, 320($fp) 	#
	lw $t4, 320($fp) 	#
	mult $t7, $t4 	#Mult
	mfhi $t7 	#
	sw $t7, 320($fp) 	#Save result of Mult
	li $t9, 1 	#Load Int
	sw $t9, 324($fp) 	#Save loaded value in destination
	lw $t6, 320($fp) 	#
	lw $t9, 324($fp) 	#
	sub $t0,  $t9, $t6 	#Minus
	sw $t0, 320($fp) 	#Save result of minus
	lw $t0, 320($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 328($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 328($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_15 	#Compare values in registers and jump to label_then_15 if the second is greater than 0
	j label_else_15 	#Jump to label_else_15
label_then_15:
	lw $t9, 52($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t9) 	#Load attribute in index 0
	sw $t6, 336($fp) 	#Save obtained attribute in destination
	li $t1, 1 	#Load Int
	sw $t1, 340($fp) 	#Save loaded value in destination
	lw $t7, 340($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 344($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 344($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t4) 	#Load attribute in index 0
	sw $t3, 348($fp) 	#Save obtained attribute in destination
	lw $t2, 348($fp) 	#
	lw $t0, 336($fp) 	#
	add $t1,  $t2, $t0 	#Plus
	sw $t1, 352($fp) 	#Save result of plus
	lw $t8, 352($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 364($fp) 	#Save type value in destination
	la $t1, data_17_eol 	#LOAD
	sw $t1, 372($fp) 	#Save loaded value in destination
	lw $t6, 372($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 376($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_18_under 	#LOAD
	sw $t1, 380($fp) 	#Save loaded value in destination
	lw $t2, 380($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 384($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_39_meth 	#LOAD
	sw $t2, 388($fp) 	#Save loaded value in destination
	lw $t0, 388($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 392($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 364($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t2) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 384($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 392($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 376($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 364($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t6) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 360($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 360($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 396($fp) 	#Save obtained attribute in destination
	lw $t5, 52($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t5) 	#Load attribute in index 0
	sw $t6, 400($fp) 	#Save obtained attribute in destination
	lw $t5, 400($fp) 	#
	lw $t8, 396($fp) 	#
	sub $t3,  $t8, $t5 	#Minus
	sw $t3, 404($fp) 	#Save result of minus
	lw $t0, 404($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 408($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 408($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 412($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 416($fp) 	#Save loaded value in destination
	lw $t5, 416($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 420($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 420($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 424($fp) 	#Save obtained attribute in destination
	lw $t2, 424($fp) 	#
	lw $t3, 412($fp) 	#
	sub $t1,  $t3, $t2 	#Minus
	sw $t1, 428($fp) 	#Save result of minus
	lw $t8, 428($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 432($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t1, -4($t2) 	#
	sw $t1, 436($fp) 	#Save type value in destination
	la $t8, data_17_eol 	#LOAD
	sw $t8, 444($fp) 	#Save loaded value in destination
	lw $t8, 444($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 448($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_18_under 	#LOAD
	sw $t4, 452($fp) 	#Save loaded value in destination
	lw $t8, 452($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 456($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_52_meth 	#LOAD
	sw $t3, 460($fp) 	#Save loaded value in destination
	lw $t5, 460($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 464($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 436($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t4) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 456($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 464($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 448($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 356($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 432($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 436($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t6) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 332($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t3, 332($fp) 	#Obtain value from source dir
	lw $t6, -8($fp) 	#Dir of instance of attribute to set
	sw $t3, 4($t6) 	#Save value in attribute of index 1
	lw $t4, 12($fp) 	#Obtain value to assign
	sw $t4, 52($fp) 	#Assign value
	lw $t5, 52($fp) 	#Obtain value to assign
	sw $t5, 300($fp) 	#Assign value
	j label_continue_15 	#Jump to label_continue_15
label_else_15:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t4) 	#Load attribute in index 0
	sw $t3, 468($fp) 	#Save obtained attribute in destination
	li $t7, 10 	#Load Int
	sw $t7, 472($fp) 	#Save loaded value in destination
	lw $t5, 472($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 476($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 476($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 480($fp) 	#Save obtained attribute in destination
	lw $t7, 480($fp) 	#
	lw $t3, 468($fp) 	#
	mult $t7, $t3 	#Mult
	mfhi $t7 	#
	sw $t7, 484($fp) 	#Save result of Mult
	lw $t8, 484($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 488($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 488($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 492($fp) 	#Save obtained attribute in destination
	li $t3, 1 	#Load Int
	sw $t3, 504($fp) 	#Save loaded value in destination
	lw $t4, 504($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 508($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t7, -4($t2) 	#
	sw $t7, 512($fp) 	#Save type value in destination
	la $t9, data_17_eol 	#LOAD
	sw $t9, 520($fp) 	#Save loaded value in destination
	lw $t4, 520($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 524($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_18_under 	#LOAD
	sw $t6, 528($fp) 	#Save loaded value in destination
	lw $t1, 528($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 532($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_52_meth 	#LOAD
	sw $t9, 536($fp) 	#Save loaded value in destination
	lw $t4, 536($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 540($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 512($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t0) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 532($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 540($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 524($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 52($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 508($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 512($fp) 	#get type dir for Dynamic Call
	lw $t0, 20($t1) 	#Get method of index 5
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 500($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, -8($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 544($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 552($fp) 	#Save loaded value in destination
	lw $t6, 552($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 556($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_18_under 	#LOAD
	sw $t8, 560($fp) 	#Save loaded value in destination
	lw $t9, 560($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 564($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_56_meth 	#LOAD
	sw $t4, 568($fp) 	#Save loaded value in destination
	lw $t4, 568($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 572($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 544($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t8) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 564($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 572($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 556($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t7, -8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 500($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 544($fp) 	#get type dir for Dynamic Call
	lw $t4, 36($t9) 	#Get method of index 9
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 496($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 496($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 576($fp) 	#Save obtained attribute in destination
	lw $t0, 576($fp) 	#
	lw $t3, 492($fp) 	#
	add $t8,  $t0, $t3 	#Plus
	sw $t8, 580($fp) 	#Save result of plus
	lw $t2, 580($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 584($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 584($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	lw $t1, 52($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t1) 	#Load attribute in index 0
	sw $t3, 588($fp) 	#Save obtained attribute in destination
	li $t8, 1 	#Load Int
	sw $t8, 592($fp) 	#Save loaded value in destination
	lw $t2, 592($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 596($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 596($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 600($fp) 	#Save obtained attribute in destination
	lw $t2, 600($fp) 	#
	lw $t7, 588($fp) 	#
	add $t1,  $t2, $t7 	#Plus
	sw $t1, 604($fp) 	#Save result of plus
	lw $t2, 604($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 608($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 608($fp) 	#Obtain value to assign
	sw $t6, 52($fp) 	#Assign value
	lw $t0, 52($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 616($fp) 	#Save obtained attribute in destination
	lw $t9, 12($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 620($fp) 	#Save obtained attribute in destination
	lw $t8, 620($fp) 	#
	lw $t5, 616($fp) 	#
	sub $t1,  $t5, $t8 	#Minus
	sw $t1, 624($fp) 	#Save result of minus
	lw $t5, 624($fp) 	#
	lw $t8, 624($fp) 	#
	mult $t5, $t8 	#Mult
	mfhi $t5 	#
	sw $t5, 624($fp) 	#Save result of Mult
	li $t9, 1 	#Load Int
	sw $t9, 628($fp) 	#Save loaded value in destination
	lw $t6, 624($fp) 	#
	lw $t2, 628($fp) 	#
	sub $t5,  $t2, $t6 	#Minus
	sw $t5, 624($fp) 	#Save result of minus
	lw $t3, 624($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 632($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 632($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_16 	#Compare values in registers and jump to label_then_16 if the second is greater than 0
	j label_else_16 	#Jump to label_else_16
label_then_16:
	la $t0, data_34_string 	#LOAD
	sw $t0, 636($fp) 	#Save loaded value in destination
	lw $t1, 636($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 640($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 640($fp) 	#Obtain value from source dir
	lw $t7, -8($fp) 	#Dir of instance of attribute to set
	sw $t4, 4($t7) 	#Save value in attribute of index 1
	lw $t5, 640($fp) 	#Obtain value to assign
	sw $t5, 612($fp) 	#Assign value
	j label_continue_16 	#Jump to label_continue_16
label_else_16:
	la $t3, data_34_string 	#LOAD
	sw $t3, 644($fp) 	#Save loaded value in destination
	lw $t5, 644($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 648($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 648($fp) 	#Obtain value to assign
	sw $t7, 612($fp) 	#Assign value
label_continue_16:
	lw $t6, 612($fp) 	#Obtain value to assign
	sw $t6, 300($fp) 	#Assign value
label_continue_15:
	lw $t3, 300($fp) 	#Obtain value to assign
	sw $t3, 132($fp) 	#Assign value
label_continue_14:
	j label_while_label_2 	#Jump to label_while_label_2
label_pool_label_2:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 652($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -656 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t7, Main 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Parse_boolop___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 0($t3) 	#Save value in attribute of index 0
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Parse_rest___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 8($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t6) 	#Save value in attribute of index 1
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_g___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 12($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 8($t0) 	#Save value in attribute of index 2
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_g___init:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Typeof
	lw $t2, -4($t8) 	#
	sw $t2, 4($fp) 	#Save type value in destination
	la $t7, data_17_eol 	#LOAD
	sw $t7, 12($fp) 	#Save loaded value in destination
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_18_under 	#LOAD
	sw $t7, 20($fp) 	#Save loaded value in destination
	lw $t0, 20($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_57_meth 	#LOAD
	sw $t3, 28($fp) 	#Save loaded value in destination
	lw $t5, 28($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t5) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 8($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 32($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 4($fp) 	#get type dir for Dynamic Call
	lw $t1, 28($t5) 	#Get method of index 7
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 76 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 8($t3) 	#Load attribute in index 2
	sw $t8, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Typeof
	lw $t8, -4($t4) 	#
	sw $t8, 8($fp) 	#Save type value in destination
	la $t3, data_17_eol 	#LOAD
	sw $t3, 16($fp) 	#Save loaded value in destination
	lw $t2, 16($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_18_under 	#LOAD
	sw $t9, 24($fp) 	#Save loaded value in destination
	lw $t9, 24($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_58_meth 	#LOAD
	sw $t8, 32($fp) 	#Save loaded value in destination
	lw $t5, 32($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 8($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t9) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 12($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 28($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 36($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 20($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t7, 4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 8($fp) 	#get type dir for Dynamic Call
	lw $t3, 20($t2) 	#Get method of index 5
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 4($fp) 	#Typeof
	lw $t1, -4($t0) 	#
	sw $t1, 44($fp) 	#Save type value in destination
	la $t6, data_17_eol 	#LOAD
	sw $t6, 52($fp) 	#Save loaded value in destination
	lw $t2, 52($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_18_under 	#LOAD
	sw $t8, 60($fp) 	#Save loaded value in destination
	lw $t2, 60($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_59_meth 	#LOAD
	sw $t4, 68($fp) 	#Save loaded value in destination
	lw $t5, 68($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 44($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t0) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 12($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 64($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 72($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 56($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t5, 4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 44($fp) 	#get type dir for Dynamic Call
	lw $t9, 16($t3) 	#Get method of index 4
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -76 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
BoolOp___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type BoolOp
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t7, BoolOp 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
BoolOp_and:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -8($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_17 	#Compare values in registers and jump to label_then_17 if the second is greater than 0
	j label_else_17 	#Jump to label_else_17
label_then_17:
	lw $t7, -4($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	j label_continue_17 	#Jump to label_continue_17
label_else_17:
	li $t2, 0 	#Load Int
	sw $t2, 4($fp) 	#Save loaded value in destination
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 8($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
label_continue_17:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
BoolOp_or:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -8($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_18 	#Compare values in registers and jump to label_then_18 if the second is greater than 0
	j label_else_18 	#Jump to label_else_18
label_then_18:
	li $t1, 1 	#Load Int
	sw $t1, 4($fp) 	#Save loaded value in destination
	lw $t6, 4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 8($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_18 	#Jump to label_continue_18
label_else_18:
	lw $t1, -4($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
label_continue_18:
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
