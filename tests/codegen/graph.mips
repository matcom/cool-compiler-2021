	.data
default_str: .asciiz ""
data_1: .asciiz "Object"
data_2: .asciiz "IO"
data_3: .asciiz "String"
data_4: .asciiz "Int"
data_5: .asciiz "Bool"
data_6: .asciiz "Vertice"
data_7: .asciiz "Edge"
data_8: .asciiz "EList"
data_9: .asciiz "ECons"
data_10: .asciiz "VList"
data_11: .asciiz "VCons"
data_12: .asciiz "Parse"
data_13: .asciiz "Main"
data_14: .asciiz "Graph"
data_15: .asciiz "BoolOp"
data_16: .asciiz "Abort called from class "
data_17: .asciiz "
"
data_18: .asciiz "Substring out of range"
data_19: .asciiz "(72,0) - RuntimeError: Dispatch on void
"
data_20: .asciiz "(79,0) - RuntimeError: Dispatch on void
"
data_21: .asciiz "(80,0) - RuntimeError: Dispatch on void
"
data_22: .asciiz " ("
data_23: .asciiz "(103,0) - RuntimeError: Dispatch on void
"
data_24: .asciiz "(104,0) - RuntimeError: Dispatch on void
"
data_25: .asciiz ","
data_26: .asciiz "(105,0) - RuntimeError: Dispatch on void
"
data_27: .asciiz "(106,0) - RuntimeError: Dispatch on void
"
data_28: .asciiz ")"
data_29: .asciiz "(107,0) - RuntimeError: Dispatch on void
"
data_30: .asciiz "(108,0) - RuntimeError: Dispatch on void
"
data_31: .asciiz "(123,0) - RuntimeError: Dispatch on void
"
data_32: .asciiz "(125,0) - RuntimeError: Dispatch on void
"
data_33: .asciiz "(135,0) - RuntimeError: Dispatch on void
"
data_34: .asciiz "(139,0) - RuntimeError: Dispatch on void
"
data_35: .asciiz "(140,0) - RuntimeError: Dispatch on void
"
data_36: .asciiz "(140,0) - RuntimeError: Dispatch on void
"
data_37: .asciiz "(140,0) - RuntimeError: Dispatch on void
"
data_38: .asciiz "(140,0) - RuntimeError: Dispatch on void
"
data_39: .asciiz "(145,0) - RuntimeError: Dispatch on void
"
data_40: .asciiz "(184,0) - RuntimeError: Dispatch on void
"
data_41: .asciiz "(185,0) - RuntimeError: Dispatch on void
"
data_42: .asciiz "(201,0) - RuntimeError: Dispatch on void
"
data_43: .asciiz "(203,0) - RuntimeError: Dispatch on void
"
data_44: .asciiz "(213,0) - RuntimeError: Dispatch on void
"
data_45: .asciiz "(216,0) - RuntimeError: Dispatch on void
"
data_46: .asciiz "(241,0) - RuntimeError: Dispatch on void
"
data_47: .asciiz "(242,0) - RuntimeError: Dispatch on void
"
data_48: .asciiz "(259,0) - RuntimeError: Dispatch on void
"
data_49: .asciiz ""
data_50: .asciiz "(260,0) - RuntimeError: Dispatch on void
"
data_51: .asciiz "(263,0) - RuntimeError: Dispatch on void
"
data_52: .asciiz "(263,0) - RuntimeError: Dispatch on void
"
data_53: .asciiz "(264,0) - RuntimeError: Dispatch on void
"
data_54: .asciiz "(273,0) - RuntimeError: Dispatch on void
"
data_55: .asciiz "(273,0) - RuntimeError: Dispatch on void
"
data_56: .asciiz "(274,0) - RuntimeError: Dispatch on void
"
data_57: .asciiz "(277,0) - RuntimeError: Dispatch on void
"
data_58: .asciiz "(278,0) - RuntimeError: Dispatch on void
"
data_59: .asciiz "(280,0) - RuntimeError: Dispatch on void
"
data_60: .asciiz "(280,0) - RuntimeError: Dispatch on void
"
data_61: .asciiz "(280,0) - RuntimeError: Dispatch on void
"
data_62: .asciiz "0"
data_63: .asciiz "1"
data_64: .asciiz "2"
data_65: .asciiz "3"
data_66: .asciiz "4"
data_67: .asciiz "5"
data_68: .asciiz "6"
data_69: .asciiz "7"
data_70: .asciiz "8"
data_71: .asciiz "9"
data_72: .asciiz "(301,0) - RuntimeError: Dispatch on void
"
data_73: .asciiz "(308,0) - RuntimeError: Dispatch on void
"
data_74: .asciiz "(309,0) - RuntimeError: Dispatch on void
"
data_75: .asciiz "-"
data_76: .asciiz "(309,0) - RuntimeError: Dispatch on void
"
data_77: .asciiz "(309,0) - RuntimeError: Dispatch on void
"
data_78: .asciiz "(309,0) - RuntimeError: Dispatch on void
"
data_79: .asciiz "(310,0) - RuntimeError: Dispatch on void
"
data_80: .asciiz " "
data_81: .asciiz "(310,0) - RuntimeError: Dispatch on void
"
data_82: .asciiz "(310,0) - RuntimeError: Dispatch on void
"
data_83: .asciiz "(310,0) - RuntimeError: Dispatch on void
"
data_84: .asciiz "(311,0) - RuntimeError: Dispatch on void
"
data_85: .asciiz "(324,0) - RuntimeError: Dispatch on void
"
data_86: .asciiz "(327,0) - RuntimeError: Dispatch on void
"
data_87: .asciiz "(330,0) - RuntimeError: Dispatch on void
"
data_88: .asciiz "(330,0) - RuntimeError: Dispatch on void
"
data_89: .asciiz "(335,0) - RuntimeError: Dispatch on void
"
data_90: .asciiz "(335,0) - RuntimeError: Dispatch on void
"
data_91: .asciiz "(340,0) - RuntimeError: Dispatch on void
"
data_92: .asciiz "(340,0) - RuntimeError: Dispatch on void
"
data_93: .asciiz "(363,0) - RuntimeError: Dispatch on void
"
data_94: .asciiz "(364,0) - RuntimeError: Dispatch on void
"
data_95: .asciiz "(359,0) - RuntimeError: Dispatch on void
"
data_96: .asciiz "(44,0) - RuntimeError: Dispatch on void
"
data_97: .asciiz "(44,0) - RuntimeError: Dispatch on void
"
data_98: .asciiz "(45,0) - RuntimeError: Dispatch on void
"
data_99: .asciiz "(48,0) - RuntimeError: Dispatch on void
"
data_100: .asciiz "(49,0) - RuntimeError: Dispatch on void
"

type_name_table:
	.word	data_1
	.word	data_2
	.word	data_3
	.word	data_4
	.word	data_5
	.word	data_6
	.word	data_7
	.word	data_8
	.word	data_9
	.word	data_10
	.word	data_11
	.word	data_12
	.word	data_13
	.word	data_14
	.word	data_15

proto_table:
	.word	type_1_proto
	.word	type_2_proto
	.word	type_3_proto
	.word	type_4_proto
	.word	type_5_proto
	.word	type_6_proto
	.word	type_7_proto
	.word	type_8_proto
	.word	type_9_proto
	.word	type_10_proto
	.word	type_11_proto
	.word	type_12_proto
	.word	type_13_proto
	.word	type_14_proto
	.word	type_15_proto

type_1_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_1

type_1_proto:
	.word	0
	.word	4
	.word	type_1_dispatch
	.word	-1

type_2_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_5

type_2_proto:
	.word	1
	.word	4
	.word	type_2_dispatch
	.word	-1

type_3_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_11
	.word	 L_12
	.word	 L_13
	.word	 L_10

type_3_proto:
	.word	2
	.word	6
	.word	type_3_dispatch
	.word	default_str
	.word	type_4_proto
	.word	-1

type_4_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_14

type_4_proto:
	.word	3
	.word	5
	.word	type_4_dispatch
	.word	0
	.word	-1

type_5_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_15

type_5_proto:
	.word	4
	.word	5
	.word	type_5_dispatch
	.word	0
	.word	-1

type_6_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_16
	.word	 L_17
	.word	 L_18
	.word	 L_19
	.word	 L_20

type_6_proto:
	.word	5
	.word	6
	.word	type_6_dispatch
	.word	0
	.word	0
	.word	-1

type_7_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_23
	.word	 L_24

type_7_proto:
	.word	6
	.word	7
	.word	type_7_dispatch
	.word	0
	.word	0
	.word	0
	.word	-1

type_8_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_27
	.word	 L_28
	.word	 L_29
	.word	 L_30
	.word	 L_31
	.word	 L_32

type_8_proto:
	.word	7
	.word	5
	.word	type_8_dispatch
	.word	0
	.word	-1

type_9_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_35
	.word	 L_36
	.word	 L_37
	.word	 L_30
	.word	 L_31
	.word	 L_39
	.word	 L_38

type_9_proto:
	.word	8
	.word	6
	.word	type_9_dispatch
	.word	0
	.word	0
	.word	-1

type_10_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_42
	.word	 L_43
	.word	 L_44
	.word	 L_45
	.word	 L_46

type_10_proto:
	.word	9
	.word	5
	.word	type_10_dispatch
	.word	0
	.word	-1

type_11_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_49
	.word	 L_50
	.word	 L_51
	.word	 L_45
	.word	 L_53
	.word	 L_52

type_11_proto:
	.word	10
	.word	6
	.word	type_11_dispatch
	.word	0
	.word	0
	.word	-1

type_12_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_56
	.word	 L_57
	.word	 L_58
	.word	 L_59
	.word	 L_60

type_12_proto:
	.word	11
	.word	6
	.word	type_12_dispatch
	.word	0
	.word	0
	.word	-1

type_13_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_6
	.word	 L_7
	.word	 L_8
	.word	 L_9
	.word	 L_56
	.word	 L_57
	.word	 L_58
	.word	 L_59
	.word	 L_60
	.word	 L_63

type_13_proto:
	.word	12
	.word	7
	.word	type_13_dispatch
	.word	0
	.word	0
	.word	0
	.word	-1

type_14_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_66
	.word	 L_67
	.word	 L_68

type_14_proto:
	.word	13
	.word	6
	.word	type_14_dispatch
	.word	0
	.word	0
	.word	-1

type_15_dispatch:
	.word	 L_2
	.word	 L_3
	.word	 L_4
	.word	 L_71
	.word	 L_72

type_15_proto:
	.word	14
	.word	4
	.word	type_15_dispatch
	.word	-1
	.text
	.globl main
main:
	jal mem_manager_init
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	jal L_64
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_63
	move $t0 $v0
	addi $sp, $sp, 4
	li $v0, 0
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	li $v0, 10
	syscall
L_1:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	li $t7, 0
	sll $t7 $t7 2
	la $t4, proto_table
	addu $t4 $t4 $t7
	lw $t4, 0($t4)
	lw $a0, 4($t4)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t4
	move $a1 $v0
	jal copy
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	move $v0 $t0
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_2:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($fp)
	la $t0, data_16 + 0
	li $v0, 4
	move $a0 $t0
	syscall
	lw $a0, 0($t1)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t0 $a0
	li $v0, 4
	move $a0 $t0
	syscall
	la $t0, data_17 + 0
	li $v0, 4
	move $a0 $t0
	syscall
	li $v0, 10
	syscall
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_3:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	lw $t0, 0($fp)
	lw $a0, 0($t0)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t0 $a0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_4:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t0, 0($fp)
	lw $a0, 4($t0)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t0
	move $a1 $v0
	jal copy
	move $t0 $v0
	move $v0 $t0
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_5:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	li $t5, 1
	sll $t5 $t5 2
	la $t9, proto_table
	addu $t9 $t9 $t5
	lw $t9, 0($t9)
	lw $a0, 4($t9)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t9
	move $a1 $v0
	jal copy
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	move $v0 $t0
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_6:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($fp)
	lw $t0, 4($fp)
	lw $a1, 12($t1)
	move $t1 $a1
	li $v0, 4
	move $a0 $t1
	syscall
	move $v0 $t0
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_7:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($fp)
	lw $t0, 4($fp)
	lw $a1, 12($t1)
	move $t1 $a1
	li $v0, 1
	move $a0 $t1
	syscall
	move $v0 $t0
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_8:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	lw $t0, 0($fp)
	jal read_str
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_9:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	lw $t0, 0($fp)
	li $v0, 5
	syscall
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_10:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -12
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	li $t4, 2
	sll $t4 $t4 2
	la $t1, proto_table
	addu $t1 $t1 $t4
	lw $t1, 0($t1)
	lw $a0, 4($t1)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t1
	move $a1 $v0
	jal copy
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	sw $t0, 12($t1)
	move $a0 $t0
	jal len
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	sw $t0, 16($t1)
	move $v0 $t1
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 12
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_11:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 16($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_12:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -24
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t2, 0($fp)
	lw $t0, 4($fp)
	lw $a1, 12($t0)
	move $t3 $a1
	lw $a1, 12($t2)
	move $t1 $a1
	lw $a1, 16($t0)
	move $t0 $a1
	lw $a1, 16($t2)
	move $t2 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	lw $a1, 12($t2)
	move $t2 $a1
	add $t0 $t0 $t2
	move $a0 $t3
	move $a1 $t1
	move $a2 $t0
	jal concat
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 24
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_13:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -32
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t2, 0($fp)
	lw $t0, 4($fp)
	lw $t3, 8($fp)
	lw $a1, 12($t3)
	move $t1 $a1
	lw $a1, 12($t0)
	move $t4 $a1
	lw $a1, 12($t2)
	move $t2 $a1
	lw $a1, 16($t3)
	move $t0 $a1
	add $t3 $t2 $t4
	move $a0 $t0
	move $a1 $t3
	jal less
	move $t0 $v0
	bne $t0 $zero L_75
	j L_76
	L_75:
	li $v0, 4
	la $a0, data_18
	syscall
	li $v0, 10
	syscall
	L_76:
	move $a0 $t1
	move $a1 $t4
	move $a2 $t2
	jal substr
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 32
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_14:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	li $t2, 3
	sll $t2 $t2 2
	la $t9, proto_table
	addu $t9 $t9 $t2
	lw $t9, 0($t9)
	lw $a0, 4($t9)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t9
	move $a1 $v0
	jal copy
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	sw $t0, 12($t1)
	move $v0 $t1
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_15:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	li $t8, 4
	sll $t8 $t8 2
	la $t5, proto_table
	addu $t5 $t5 $t8
	lw $t5, 0($t5)
	lw $a0, 4($t5)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t5
	move $a1 $v0
	jal copy
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	sw $t0, 12($t1)
	move $v0 $t1
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_16:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 16($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_17:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 12($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_18:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($fp)
	lw $t0, 4($fp)
	sw $t1, 12($t0)
	move $v0 $t0
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_19:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -24
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($fp)
	lw $t3, 4($fp)
	move $t0 $t0
	lw $a1, 16($t3)
	move $t1 $a1
	move $t2 $t1
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_77
	j L_78
	L_77:
	li $v0, 4
	la $a0, data_19
	syscall
	li $v0, 10
	syscall
	L_78:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	sw $t0, 16($t3)
	move $v0 $t3
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 24
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_20:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -44
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t2, 0($fp)
	lw $a1, 12($t2)
	move $t0 $a1
	move $t0 $t0
	move $t3 $t2
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_79
	j L_80
	L_79:
	li $v0, 4
	la $a0, data_20
	syscall
	li $v0, 10
	syscall
	L_80:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t3)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 16
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	lw $a1, 16($t2)
	move $t0 $a1
	move $t1 $t0
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_81
	j L_82
	L_81:
	li $v0, 4
	la $a0, data_21
	syscall
	li $v0, 10
	syscall
	L_82:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 48
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 44
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_21:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	li $t7, 5
	sll $t7 $t7 2
	la $t9, proto_table
	addu $t9 $t9 $t7
	lw $t9, 0($t9)
	lw $a0, 4($t9)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t9
	move $a1 $v0
	jal copy
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_22
	move $t1 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_22:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	li $t0, 3
	sll $t0 $t0 2
	la $t1, proto_table
	addu $t1 $t1 $t0
	lw $t1, 0($t1)
	lw $a0, 4($t1)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t1
	move $a1 $v0
	jal copy
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	sw $t1, 12($t0)
	jal L_33
	move $t1 $v0
	sw $t1, 16($t0)
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_23:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t2, 0($fp)
	lw $t1, 4($fp)
	lw $t3, 8($fp)
	lw $t0, 12($fp)
	sw $t3, 12($t0)
	sw $t1, 16($t0)
	sw $t2, 20($t0)
	move $v0 $t0
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_24:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -156
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t2, 0($fp)
	la $t0, data_22 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t3 $t0
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_83
	j L_84
	L_83:
	li $v0, 4
	la $a0, data_23
	syscall
	li $v0, 10
	syscall
	L_84:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	lw $a1, 12($t2)
	move $t0 $a1
	move $t3 $t0
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_85
	j L_86
	L_85:
	li $v0, 4
	la $a0, data_24
	syscall
	li $v0, 10
	syscall
	L_86:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 16
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	la $t0, data_25 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_87
	j L_88
	L_87:
	li $v0, 4
	la $a0, data_26
	syscall
	li $v0, 10
	syscall
	L_88:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	lw $a1, 16($t2)
	move $t0 $a1
	move $t0 $t0
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_89
	j L_90
	L_89:
	li $v0, 4
	la $a0, data_27
	syscall
	li $v0, 10
	syscall
	L_90:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 16
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	la $t0, data_28 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	move $t3 $t2
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_91
	j L_92
	L_91:
	li $v0, 4
	la $a0, data_29
	syscall
	li $v0, 10
	syscall
	L_92:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t3)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	lw $a1, 20($t2)
	move $t0 $a1
	move $t3 $t0
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_93
	j L_94
	L_93:
	li $v0, 4
	la $a0, data_30
	syscall
	li $v0, 10
	syscall
	L_94:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 16
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 156
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_25:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	li $t6, 6
	sll $t6 $t6 2
	la $t1, proto_table
	addu $t1 $t1 $t6
	lw $t1, 0($t1)
	lw $a0, 4($t1)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t1
	move $a1 $v0
	jal copy
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	jal L_26
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t1
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_26:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -12
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t1, 0($fp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	li $t3, 3
	sll $t3 $t3 2
	la $t4, proto_table
	addu $t4 $t4 $t3
	lw $t4, 0($t4)
	lw $a0, 4($t4)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t4
	move $a1 $v0
	jal copy
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	sw $t0, 12($t1)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	li $t2, 3
	sll $t2 $t2 2
	la $t1, proto_table
	addu $t1 $t1 $t2
	lw $t1, 0($t1)
	lw $a0, 4($t1)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t1
	move $a1 $v0
	jal copy
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	sw $t0, 16($t1)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	li $t5, 3
	sll $t5 $t5 2
	la $t3, proto_table
	addu $t3 $t3 $t5
	lw $t3, 0($t3)
	lw $a0, 4($t3)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t3
	move $a1 $v0
	jal copy
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	sw $t0, 20($t1)
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 12
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_27:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	lw $t0, 0($fp)
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_28:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -20
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	move $t0 $t2
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_95
	j L_96
	L_95:
	li $v0, 4
	la $a0, data_31
	syscall
	li $v0, 10
	syscall
	L_96:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 0
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t0 $a1
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 20
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_29:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -16
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_97
	j L_98
	L_97:
	li $v0, 4
	la $a0, data_32
	syscall
	li $v0, 10
	syscall
	L_98:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 0
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t2
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 16
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_30:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -28
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t1, 0($fp)
	lw $t0, 4($fp)
	move $t3 $t1
	move $t0 $t0
	jal L_40
	move $t1 $v0
	move $t2 $t1
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_99
	j L_100
	L_99:
	li $v0, 4
	la $a0, data_33
	syscall
	li $v0, 10
	syscall
	L_100:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 52
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 12
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 28
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_31:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -96
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t1, 0($fp)
	lw $t2, 4($fp)
	move $t3 $t2
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_101
	j L_102
	L_101:
	li $v0, 4
	la $a0, data_34
	syscall
	li $v0, 10
	syscall
	L_102:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t3)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 28
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_103
	j L_104
	L_103:
	move $t0 $t1
	j L_113
	L_104:
	move $t3 $t2
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_105
	j L_106
	L_105:
	li $v0, 4
	la $a0, data_35
	syscall
	li $v0, 10
	syscall
	L_106:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t3)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 32
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $t3 $t0
	move $t0 $t1
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_107
	j L_108
	L_107:
	li $v0, 4
	la $a0, data_36
	syscall
	li $v0, 10
	syscall
	L_108:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($t1)
	la $a1, proto_table
	sll $a2 $t1 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 36
	lw $a1, 0($a1)
	jal $a1
	move $t1 $v0
	addi $sp, $sp, 4
	move $t2 $t1
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_109
	j L_110
	L_109:
	li $v0, 4
	la $a0, data_37
	syscall
	li $v0, 10
	syscall
	L_110:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 44
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t0 $t0
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_111
	j L_112
	L_111:
	li $v0, 4
	la $a0, data_38
	syscall
	li $v0, 10
	syscall
	L_112:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t0 $t0
	L_113:
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 96
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_32:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -28
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t1, 0($fp)
	la $t0, data_17 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t2 $t0
	move $t1 $t1
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_114
	j L_115
	L_114:
	li $v0, 4
	la $a0, data_39
	syscall
	li $v0, 10
	syscall
	L_115:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 28
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_33:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	li $t5, 7
	sll $t5 $t5 2
	la $t8, proto_table
	addu $t8 $t8 $t5
	lw $t8, 0($t8)
	lw $a0, 4($t8)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t8
	move $a1 $v0
	jal copy
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_34
	move $t1 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_34:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_35:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	lw $t0, 0($fp)
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_36:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 12($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_37:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 16($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_38:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($fp)
	lw $t2, 4($fp)
	lw $t1, 8($fp)
	sw $t2, 12($t1)
	sw $t0, 16($t1)
	move $v0 $t1
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_39:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -40
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t1, 0($fp)
	lw $a1, 12($t1)
	move $t0 $a1
	move $t0 $t0
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_116
	j L_117
	L_116:
	li $v0, 4
	la $a0, data_40
	syscall
	li $v0, 10
	syscall
	L_117:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 32
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 16($t1)
	move $t0 $a1
	move $t1 $t0
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_118
	j L_119
	L_118:
	li $v0, 4
	la $a0, data_41
	syscall
	li $v0, 10
	syscall
	L_119:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 48
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 40
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_40:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	li $t3, 8
	sll $t3 $t3 2
	la $t7, proto_table
	addu $t7 $t7 $t3
	lw $t7, 0($t7)
	lw $a0, 4($t7)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t7
	move $a1 $v0
	jal copy
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_41
	move $t1 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_41:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_34
	move $t0 $v0
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_42:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	lw $t0, 0($fp)
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_43:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -20
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	move $t0 $t2
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_120
	j L_121
	L_120:
	li $v0, 4
	la $a0, data_42
	syscall
	li $v0, 10
	syscall
	L_121:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 0
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t0 $a1
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 20
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_44:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -16
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	move $t0 $t2
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_122
	j L_123
	L_122:
	li $v0, 4
	la $a0, data_43
	syscall
	li $v0, 10
	syscall
	L_123:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 0
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t2
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 16
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_45:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -28
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t1, 0($fp)
	lw $t0, 4($fp)
	move $t3 $t1
	move $t1 $t0
	jal L_54
	move $t0 $v0
	move $t2 $t0
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_124
	j L_125
	L_124:
	li $v0, 4
	la $a0, data_44
	syscall
	li $v0, 10
	syscall
	L_125:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 48
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 12
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 28
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_46:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -28
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	la $t0, data_17 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	move $t1 $t0
	move $t0 $t2
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_126
	j L_127
	L_126:
	li $v0, 4
	la $a0, data_45
	syscall
	li $v0, 10
	syscall
	L_127:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 28
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_47:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	li $t6, 9
	sll $t6 $t6 2
	la $t1, proto_table
	addu $t1 $t1 $t6
	lw $t1, 0($t1)
	lw $a0, 4($t1)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t1
	move $a1 $v0
	jal copy
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	jal L_48
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t1
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_48:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_49:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	lw $t0, 0($fp)
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_50:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 12($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_51:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -4
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 16($t0)
	move $t0 $a1
	move $v0 $t0
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 4
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_52:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($fp)
	lw $t2, 4($fp)
	lw $t1, 8($fp)
	sw $t2, 12($t1)
	sw $t0, 16($t1)
	move $v0 $t1
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_53:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -40
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	lw $a1, 12($t2)
	move $t0 $a1
	move $t1 $t0
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_128
	j L_129
	L_128:
	li $v0, 4
	la $a0, data_46
	syscall
	li $v0, 10
	syscall
	L_129:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 44
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 16($t2)
	move $t0 $a1
	move $t0 $t0
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_130
	j L_131
	L_130:
	li $v0, 4
	la $a0, data_47
	syscall
	li $v0, 10
	syscall
	L_131:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 44
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 40
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_54:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	li $t4, 10
	sll $t4 $t4 2
	la $t0, proto_table
	addu $t0 $t0 $t4
	lw $t0, 0($t0)
	lw $a0, 4($t0)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t0
	move $a1 $v0
	jal copy
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	jal L_55
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t1
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_55:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	lw $t0, 0($fp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_48
	move $t0 $v0
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_56:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -236
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t1, 0($fp)
	jal L_69
	move $t0 $v0
	move $t2 $t0
	move $t0 $t1
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_132
	j L_133
	L_132:
	li $v0, 4
	la $a0, data_48
	syscall
	li $v0, 10
	syscall
	L_133:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $t4 $t0
	L_134:
	la $t0, data_17 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t6 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t4)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t0 $a0
	la $t7, type_name_table
	addiu $t7 $t7 12
	lw $t7, 0($t7)
	la $t5, type_name_table
	addiu $t5 $t5 16
	lw $t5, 0($t5)
	la $t3, type_name_table
	addiu $t3 $t3 8
	lw $t3, 0($t3)
	move $a0 $t0
	move $a1 $t7
	jal equals
	move $t7 $v0
	bne $t7 $zero L_135
	move $a0 $t0
	move $a1 $t5
	jal equals
	move $t7 $v0
	bne $t7 $zero L_135
	move $a0 $t0
	move $a1 $t3
	jal equals
	move $t7 $v0
	bne $t7 $zero L_136
	j L_137
	L_135:
	lw $a1, 12($t4)
	move $t0 $a1
	lw $a1, 12($t6)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal equals
	move $t0 $v0
	j L_138
	L_136:
	lw $a1, 12($t4)
	move $t0 $a1
	lw $a1, 12($t6)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal equal_str
	move $t0 $v0
	j L_138
	L_137:
	move $a0 $t4
	move $a1 $t6
	jal equals
	move $t0 $v0
	L_138:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	li $a0, 1
	sub $t0 $a0 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $t5 $t0
	la $t0, data_49 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t4)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t7 $a0
	la $t6, type_name_table
	addiu $t6 $t6 12
	lw $t6, 0($t6)
	la $t8, type_name_table
	addiu $t8 $t8 16
	lw $t8, 0($t8)
	la $t0, type_name_table
	addiu $t0 $t0 8
	lw $t0, 0($t0)
	move $a0 $t7
	move $a1 $t6
	jal equals
	move $t6 $v0
	bne $t6 $zero L_139
	move $a0 $t7
	move $a1 $t8
	jal equals
	move $t6 $v0
	bne $t6 $zero L_139
	move $a0 $t7
	move $a1 $t0
	jal equals
	move $t6 $v0
	bne $t6 $zero L_140
	j L_141
	L_139:
	lw $a1, 12($t4)
	move $t6 $a1
	lw $a1, 12($t3)
	move $t0 $a1
	move $a0 $t6
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_142
	L_140:
	lw $a1, 12($t4)
	move $t6 $a1
	lw $a1, 12($t3)
	move $t0 $a1
	move $a0 $t6
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_142
	L_141:
	move $a0 $t4
	move $a1 $t3
	jal equals
	move $t0 $v0
	L_142:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	li $a0, 1
	sub $t0 $a0 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	lw $a1, 12($t1)
	move $t3 $a1
	move $t3 $t3
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t6 $v0
	bne $t6 $zero L_143
	j L_144
	L_143:
	li $v0, 4
	la $a0, data_50
	syscall
	li $v0, 10
	syscall
	L_144:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t3)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 12
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_145
	j L_152
	L_145:
	move $t3 $t4
	move $t0 $t1
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t4 $v0
	bne $t4 $zero L_146
	j L_147
	L_146:
	li $v0, 4
	la $a0, data_51
	syscall
	li $v0, 10
	syscall
	L_147:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 32
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t3 $t0
	move $t0 $t2
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t4 $v0
	bne $t4 $zero L_148
	j L_149
	L_148:
	li $v0, 4
	la $a0, data_52
	syscall
	li $v0, 10
	syscall
	L_149:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t3 $t1
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_150
	j L_151
	L_150:
	li $v0, 4
	la $a0, data_53
	syscall
	li $v0, 10
	syscall
	L_151:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t3)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $t4 $t0
	j L_134
	L_152:
	move $t0 $zero
	move $t0 $t2
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 236
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_57:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -260
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($fp)
	lw $t1, 4($fp)
	move $t3 $t0
	move $t2 $t1
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_153
	j L_154
	L_153:
	li $v0, 4
	la $a0, data_54
	syscall
	li $v0, 10
	syscall
	L_154:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t3 $t0
	jal L_21
	move $t0 $v0
	move $t0 $t0
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_155
	j L_156
	L_155:
	li $v0, 4
	la $a0, data_55
	syscall
	li $v0, 10
	syscall
	L_156:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 36
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t3 $t0
	L_157:
	lw $a1, 16($t1)
	move $t0 $a1
	move $t2 $t0
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_158
	j L_159
	L_158:
	li $v0, 4
	la $a0, data_56
	syscall
	li $v0, 10
	syscall
	L_159:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t6 $v0
	addi $sp, $sp, 4
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t7 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t6)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t4 $a0
	la $t0, type_name_table
	addiu $t0 $t0 12
	lw $t0, 0($t0)
	la $t2, type_name_table
	addiu $t2 $t2 16
	lw $t2, 0($t2)
	la $t5, type_name_table
	addiu $t5 $t5 8
	lw $t5, 0($t5)
	move $a0 $t4
	move $a1 $t0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_160
	move $a0 $t4
	move $a1 $t2
	jal equals
	move $t0 $v0
	bne $t0 $zero L_160
	move $a0 $t4
	move $a1 $t5
	jal equals
	move $t0 $v0
	bne $t0 $zero L_161
	j L_162
	L_160:
	lw $a1, 12($t6)
	move $t0 $a1
	lw $a1, 12($t7)
	move $t2 $a1
	move $a0 $t0
	move $a1 $t2
	jal equals
	move $t0 $v0
	j L_163
	L_161:
	lw $a1, 12($t6)
	move $t0 $a1
	lw $a1, 12($t7)
	move $t2 $a1
	move $a0 $t0
	move $a1 $t2
	jal equal_str
	move $t0 $v0
	j L_163
	L_162:
	move $a0 $t6
	move $a1 $t7
	jal equals
	move $t0 $v0
	L_163:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	li $a0, 1
	sub $t0 $a0 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_164
	j L_175
	L_164:
	lw $a1, 16($t1)
	move $t0 $a1
	move $t2 $t0
	move $t4 $t1
	move $a0 $t4
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_165
	j L_166
	L_165:
	li $v0, 4
	la $a0, data_57
	syscall
	li $v0, 10
	syscall
	L_166:
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t0, 0($t4)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t5 $t0
	lw $a1, 16($t1)
	move $t0 $a1
	move $t4 $t0
	move $t0 $t1
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_167
	j L_168
	L_167:
	li $v0, 4
	la $a0, data_58
	syscall
	li $v0, 10
	syscall
	L_168:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t2 $t0
	move $t4 $t3
	move $a0 $t4
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_169
	j L_170
	L_169:
	li $v0, 4
	la $a0, data_59
	syscall
	li $v0, 10
	syscall
	L_170:
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	lw $t0, 0($t4)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 32
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $t4 $t0
	move $t6 $t5
	move $t0 $t2
	jal L_25
	move $t2 $v0
	move $t2 $t2
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t5 $v0
	bne $t5 $zero L_171
	j L_172
	L_171:
	li $v0, 4
	la $a0, data_60
	syscall
	li $v0, 10
	syscall
	L_172:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 28
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 16
	move $t2 $t0
	move $t4 $t3
	move $a0 $t4
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_173
	j L_174
	L_173:
	li $v0, 4
	la $a0, data_61
	syscall
	li $v0, 10
	syscall
	L_174:
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t0, 0($t4)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t0 $t0
	move $t0 $t0
	j L_157
	L_175:
	move $t0 $t3
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 260
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_58:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -580
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t2, 0($fp)
	lw $t1, 4($fp)
	la $t0, data_62 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t5 $a0
	la $t3, type_name_table
	addiu $t3 $t3 12
	lw $t3, 0($t3)
	la $t4, type_name_table
	addiu $t4 $t4 16
	lw $t4, 0($t4)
	la $t6, type_name_table
	addiu $t6 $t6 8
	lw $t6, 0($t6)
	move $a0 $t5
	move $a1 $t3
	jal equals
	move $t3 $v0
	bne $t3 $zero L_176
	move $a0 $t5
	move $a1 $t4
	jal equals
	move $t3 $v0
	bne $t3 $zero L_176
	move $a0 $t5
	move $a1 $t6
	jal equals
	move $t3 $v0
	bne $t3 $zero L_177
	j L_178
	L_176:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_179
	L_177:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_179
	L_178:
	move $a0 $t2
	move $a1 $t0
	jal equals
	move $t0 $v0
	L_179:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_180
	j L_181
	L_180:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_247
	L_181:
	la $t0, data_63 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t4 $a0
	la $t0, type_name_table
	addiu $t0 $t0 12
	lw $t0, 0($t0)
	la $t5, type_name_table
	addiu $t5 $t5 16
	lw $t5, 0($t5)
	la $t6, type_name_table
	addiu $t6 $t6 8
	lw $t6, 0($t6)
	move $a0 $t4
	move $a1 $t0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_182
	move $a0 $t4
	move $a1 $t5
	jal equals
	move $t0 $v0
	bne $t0 $zero L_182
	move $a0 $t4
	move $a1 $t6
	jal equals
	move $t0 $v0
	bne $t0 $zero L_183
	j L_184
	L_182:
	lw $a1, 12($t2)
	move $t0 $a1
	lw $a1, 12($t3)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal equals
	move $t0 $v0
	j L_185
	L_183:
	lw $a1, 12($t2)
	move $t0 $a1
	lw $a1, 12($t3)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal equal_str
	move $t0 $v0
	j L_185
	L_184:
	move $a0 $t2
	move $a1 $t3
	jal equals
	move $t0 $v0
	L_185:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_186
	j L_187
	L_186:
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_246
	L_187:
	la $t0, data_64 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t5 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t3 $a0
	la $t4, type_name_table
	addiu $t4 $t4 12
	lw $t4, 0($t4)
	la $t6, type_name_table
	addiu $t6 $t6 16
	lw $t6, 0($t6)
	la $t0, type_name_table
	addiu $t0 $t0 8
	lw $t0, 0($t0)
	move $a0 $t3
	move $a1 $t4
	jal equals
	move $t4 $v0
	bne $t4 $zero L_188
	move $a0 $t3
	move $a1 $t6
	jal equals
	move $t4 $v0
	bne $t4 $zero L_188
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t4 $v0
	bne $t4 $zero L_189
	j L_190
	L_188:
	lw $a1, 12($t2)
	move $t0 $a1
	lw $a1, 12($t5)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal equals
	move $t0 $v0
	j L_191
	L_189:
	lw $a1, 12($t2)
	move $t0 $a1
	lw $a1, 12($t5)
	move $t3 $a1
	move $a0 $t0
	move $a1 $t3
	jal equal_str
	move $t0 $v0
	j L_191
	L_190:
	move $a0 $t2
	move $a1 $t5
	jal equals
	move $t0 $v0
	L_191:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_192
	j L_193
	L_192:
	li $a0, 2
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_245
	L_193:
	la $t0, data_65 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t4 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t3 $a0
	la $t6, type_name_table
	addiu $t6 $t6 12
	lw $t6, 0($t6)
	la $t0, type_name_table
	addiu $t0 $t0 16
	lw $t0, 0($t0)
	la $t5, type_name_table
	addiu $t5 $t5 8
	lw $t5, 0($t5)
	move $a0 $t3
	move $a1 $t6
	jal equals
	move $t6 $v0
	bne $t6 $zero L_194
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t6 $v0
	bne $t6 $zero L_194
	move $a0 $t3
	move $a1 $t5
	jal equals
	move $t6 $v0
	bne $t6 $zero L_195
	j L_196
	L_194:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t4)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_197
	L_195:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t4)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_197
	L_196:
	move $a0 $t2
	move $a1 $t4
	jal equals
	move $t0 $v0
	L_197:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_198
	j L_199
	L_198:
	li $a0, 3
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_244
	L_199:
	la $t0, data_66 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t4 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t5 $a0
	la $t3, type_name_table
	addiu $t3 $t3 12
	lw $t3, 0($t3)
	la $t0, type_name_table
	addiu $t0 $t0 16
	lw $t0, 0($t0)
	la $t6, type_name_table
	addiu $t6 $t6 8
	lw $t6, 0($t6)
	move $a0 $t5
	move $a1 $t3
	jal equals
	move $t3 $v0
	bne $t3 $zero L_200
	move $a0 $t5
	move $a1 $t0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_200
	move $a0 $t5
	move $a1 $t6
	jal equals
	move $t3 $v0
	bne $t3 $zero L_201
	j L_202
	L_200:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t4)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_203
	L_201:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t4)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_203
	L_202:
	move $a0 $t2
	move $a1 $t4
	jal equals
	move $t0 $v0
	L_203:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_204
	j L_205
	L_204:
	li $a0, 4
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_243
	L_205:
	la $t0, data_67 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t6 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t0 $a0
	la $t3, type_name_table
	addiu $t3 $t3 12
	lw $t3, 0($t3)
	la $t5, type_name_table
	addiu $t5 $t5 16
	lw $t5, 0($t5)
	la $t4, type_name_table
	addiu $t4 $t4 8
	lw $t4, 0($t4)
	move $a0 $t0
	move $a1 $t3
	jal equals
	move $t3 $v0
	bne $t3 $zero L_206
	move $a0 $t0
	move $a1 $t5
	jal equals
	move $t3 $v0
	bne $t3 $zero L_206
	move $a0 $t0
	move $a1 $t4
	jal equals
	move $t3 $v0
	bne $t3 $zero L_207
	j L_208
	L_206:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t6)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_209
	L_207:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t6)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_209
	L_208:
	move $a0 $t2
	move $a1 $t6
	jal equals
	move $t0 $v0
	L_209:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_210
	j L_211
	L_210:
	li $a0, 5
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_242
	L_211:
	la $t0, data_68 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t4 $a0
	la $t0, type_name_table
	addiu $t0 $t0 12
	lw $t0, 0($t0)
	la $t6, type_name_table
	addiu $t6 $t6 16
	lw $t6, 0($t6)
	la $t5, type_name_table
	addiu $t5 $t5 8
	lw $t5, 0($t5)
	move $a0 $t4
	move $a1 $t0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_212
	move $a0 $t4
	move $a1 $t6
	jal equals
	move $t0 $v0
	bne $t0 $zero L_212
	move $a0 $t4
	move $a1 $t5
	jal equals
	move $t0 $v0
	bne $t0 $zero L_213
	j L_214
	L_212:
	lw $a1, 12($t2)
	move $t4 $a1
	lw $a1, 12($t3)
	move $t0 $a1
	move $a0 $t4
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_215
	L_213:
	lw $a1, 12($t2)
	move $t4 $a1
	lw $a1, 12($t3)
	move $t0 $a1
	move $a0 $t4
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_215
	L_214:
	move $a0 $t2
	move $a1 $t3
	jal equals
	move $t0 $v0
	L_215:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_216
	j L_217
	L_216:
	li $a0, 6
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_241
	L_217:
	la $t0, data_69 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t5 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t3 $a0
	la $t4, type_name_table
	addiu $t4 $t4 12
	lw $t4, 0($t4)
	la $t6, type_name_table
	addiu $t6 $t6 16
	lw $t6, 0($t6)
	la $t0, type_name_table
	addiu $t0 $t0 8
	lw $t0, 0($t0)
	move $a0 $t3
	move $a1 $t4
	jal equals
	move $t4 $v0
	bne $t4 $zero L_218
	move $a0 $t3
	move $a1 $t6
	jal equals
	move $t4 $v0
	bne $t4 $zero L_218
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t4 $v0
	bne $t4 $zero L_219
	j L_220
	L_218:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t5)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_221
	L_219:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t5)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_221
	L_220:
	move $a0 $t2
	move $a1 $t5
	jal equals
	move $t0 $v0
	L_221:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_222
	j L_223
	L_222:
	li $a0, 7
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_240
	L_223:
	la $t0, data_70 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t6 $a0
	la $t4, type_name_table
	addiu $t4 $t4 12
	lw $t4, 0($t4)
	la $t5, type_name_table
	addiu $t5 $t5 16
	lw $t5, 0($t5)
	la $t3, type_name_table
	addiu $t3 $t3 8
	lw $t3, 0($t3)
	move $a0 $t6
	move $a1 $t4
	jal equals
	move $t4 $v0
	bne $t4 $zero L_224
	move $a0 $t6
	move $a1 $t5
	jal equals
	move $t4 $v0
	bne $t4 $zero L_224
	move $a0 $t6
	move $a1 $t3
	jal equals
	move $t4 $v0
	bne $t4 $zero L_225
	j L_226
	L_224:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_227
	L_225:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t0)
	move $t0 $a1
	move $a0 $t3
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_227
	L_226:
	move $a0 $t2
	move $a1 $t0
	jal equals
	move $t0 $v0
	L_227:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_228
	j L_229
	L_228:
	li $a0, 8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_239
	L_229:
	la $t0, data_71 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t6 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t0 $a0
	la $t3, type_name_table
	addiu $t3 $t3 12
	lw $t3, 0($t3)
	la $t4, type_name_table
	addiu $t4 $t4 16
	lw $t4, 0($t4)
	la $t5, type_name_table
	addiu $t5 $t5 8
	lw $t5, 0($t5)
	move $a0 $t0
	move $a1 $t3
	jal equals
	move $t3 $v0
	bne $t3 $zero L_230
	move $a0 $t0
	move $a1 $t4
	jal equals
	move $t3 $v0
	bne $t3 $zero L_230
	move $a0 $t0
	move $a1 $t5
	jal equals
	move $t3 $v0
	bne $t3 $zero L_231
	j L_232
	L_230:
	lw $a1, 12($t2)
	move $t0 $a1
	lw $a1, 12($t6)
	move $t2 $a1
	move $a0 $t0
	move $a1 $t2
	jal equals
	move $t0 $v0
	j L_233
	L_231:
	lw $a1, 12($t2)
	move $t0 $a1
	lw $a1, 12($t6)
	move $t2 $a1
	move $a0 $t0
	move $a1 $t2
	jal equal_str
	move $t0 $v0
	j L_233
	L_232:
	move $a0 $t2
	move $a1 $t6
	jal equals
	move $t0 $v0
	L_233:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_234
	j L_235
	L_234:
	li $a0, 9
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_238
	L_235:
	move $t1 $t1
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_236
	j L_237
	L_236:
	li $v0, 4
	la $a0, data_72
	syscall
	li $v0, 10
	syscall
	L_237:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 0
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	L_238:
	move $t0 $t0
	L_239:
	move $t0 $t0
	L_240:
	move $t0 $t0
	L_241:
	move $t0 $t0
	L_242:
	move $t0 $t0
	L_243:
	move $t0 $t0
	L_244:
	move $t0 $t0
	L_245:
	move $t0 $t0
	L_246:
	move $t0 $t0
	L_247:
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 580
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_59:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -436
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t3, 0($fp)
	lw $t1, 4($fp)
	move $t2 $t3
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_248
	j L_249
	L_248:
	li $v0, 4
	la $a0, data_73
	syscall
	li $v0, 10
	syscall
	L_249:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t2 $v0
	addi $sp, $sp, 4
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t5 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t7 $a0
	la $t0, type_name_table
	addiu $t0 $t0 12
	lw $t0, 0($t0)
	la $t6, type_name_table
	addiu $t6 $t6 16
	lw $t6, 0($t6)
	la $t4, type_name_table
	addiu $t4 $t4 8
	lw $t4, 0($t4)
	move $a0 $t7
	move $a1 $t0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_250
	move $a0 $t7
	move $a1 $t6
	jal equals
	move $t0 $v0
	bne $t0 $zero L_250
	move $a0 $t7
	move $a1 $t4
	jal equals
	move $t0 $v0
	bne $t0 $zero L_251
	j L_252
	L_250:
	lw $a1, 12($t2)
	move $t2 $a1
	lw $a1, 12($t5)
	move $t0 $a1
	move $a0 $t2
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_253
	L_251:
	lw $a1, 12($t2)
	move $t2 $a1
	lw $a1, 12($t5)
	move $t0 $a1
	move $a0 $t2
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_253
	L_252:
	move $a0 $t2
	move $a1 $t5
	jal equals
	move $t0 $v0
	L_253:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_254
	j L_255
	L_254:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_288
	L_255:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t2 $t0
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t5 $t0
	move $t0 $t3
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t4 $v0
	bne $t4 $zero L_256
	j L_257
	L_256:
	li $v0, 4
	la $a0, data_74
	syscall
	li $v0, 10
	syscall
	L_257:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 12
	la $t2, data_75 + 0
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	jal L_10
	move $t5 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t0)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t7 $a0
	la $t2, type_name_table
	addiu $t2 $t2 12
	lw $t2, 0($t2)
	la $t6, type_name_table
	addiu $t6 $t6 16
	lw $t6, 0($t6)
	la $t4, type_name_table
	addiu $t4 $t4 8
	lw $t4, 0($t4)
	move $a0 $t7
	move $a1 $t2
	jal equals
	move $t2 $v0
	bne $t2 $zero L_258
	move $a0 $t7
	move $a1 $t6
	jal equals
	move $t2 $v0
	bne $t2 $zero L_258
	move $a0 $t7
	move $a1 $t4
	jal equals
	move $t2 $v0
	bne $t2 $zero L_259
	j L_260
	L_258:
	lw $a1, 12($t0)
	move $t2 $a1
	lw $a1, 12($t5)
	move $t0 $a1
	move $a0 $t2
	move $a1 $t0
	jal equals
	move $t0 $v0
	j L_261
	L_259:
	lw $a1, 12($t0)
	move $t2 $a1
	lw $a1, 12($t5)
	move $t0 $a1
	move $a0 $t2
	move $a1 $t0
	jal equal_str
	move $t0 $v0
	j L_261
	L_260:
	move $a0 $t0
	move $a1 $t5
	jal equals
	move $t0 $v0
	L_261:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_262
	j L_269
	L_262:
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t4 $t0
	move $t2 $t3
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_263
	j L_264
	L_263:
	li $v0, 4
	la $a0, data_76
	syscall
	li $v0, 10
	syscall
	L_264:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t2 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	sub $t0 $t2 $t0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	move $t2 $t3
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_265
	j L_266
	L_265:
	li $v0, 4
	la $a0, data_77
	syscall
	li $v0, 10
	syscall
	L_266:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 12
	move $t0 $t0
	move $t1 $t1
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_267
	j L_268
	L_267:
	li $v0, 4
	la $a0, data_78
	syscall
	li $v0, 10
	syscall
	L_268:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 44
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	lw $a1, 12($t0)
	move $t0 $a1
	not $t0 $t0
	addi $t0, $t0, 1
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_287
	L_269:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t5 $t0
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t4 $t0
	move $t2 $t3
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_270
	j L_271
	L_270:
	li $v0, 4
	la $a0, data_79
	syscall
	li $v0, 10
	syscall
	L_271:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t7 $v0
	addi $sp, $sp, 12
	la $t0, data_80 + 0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_10
	move $t4 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t7)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t6 $a0
	la $t5, type_name_table
	addiu $t5 $t5 12
	lw $t5, 0($t5)
	la $t0, type_name_table
	addiu $t0 $t0 16
	lw $t0, 0($t0)
	la $t2, type_name_table
	addiu $t2 $t2 8
	lw $t2, 0($t2)
	move $a0 $t6
	move $a1 $t5
	jal equals
	move $t5 $v0
	bne $t5 $zero L_272
	move $a0 $t6
	move $a1 $t0
	jal equals
	move $t5 $v0
	bne $t5 $zero L_272
	move $a0 $t6
	move $a1 $t2
	jal equals
	move $t5 $v0
	bne $t5 $zero L_273
	j L_274
	L_272:
	lw $a1, 12($t7)
	move $t0 $a1
	lw $a1, 12($t4)
	move $t2 $a1
	move $a0 $t0
	move $a1 $t2
	jal equals
	move $t0 $v0
	j L_275
	L_273:
	lw $a1, 12($t7)
	move $t0 $a1
	lw $a1, 12($t4)
	move $t2 $a1
	move $a0 $t0
	move $a1 $t2
	jal equal_str
	move $t0 $v0
	j L_275
	L_274:
	move $a0 $t7
	move $a1 $t4
	jal equals
	move $t0 $v0
	L_275:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_276
	j L_283
	L_276:
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t4 $t0
	move $t0 $t3
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_277
	j L_278
	L_277:
	li $v0, 4
	la $a0, data_81
	syscall
	li $v0, 10
	syscall
	L_278:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t0)
	move $t0 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t2 $a1
	sub $t0 $t0 $t2
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_14
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	move $t2 $t3
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_279
	j L_280
	L_279:
	li $v0, 4
	la $a0, data_82
	syscall
	li $v0, 10
	syscall
	L_280:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 12
	move $t2 $t0
	move $t0 $t1
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_281
	j L_282
	L_281:
	li $v0, 4
	la $a0, data_83
	syscall
	li $v0, 10
	syscall
	L_282:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t0 $t0
	j L_286
	L_283:
	move $t0 $t3
	move $t1 $t1
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_284
	j L_285
	L_284:
	li $v0, 4
	la $a0, data_84
	syscall
	li $v0, 10
	syscall
	L_285:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 44
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	move $t0 $t0
	L_286:
	move $t0 $t0
	L_287:
	move $t0 $t0
	L_288:
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 436
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_60:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -564
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t7, 0($fp)
	lw $t0, 4($fp)
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t1 $v0
	addi $sp, $sp, 4
	move $t6 $t1
	move $t1 $t7
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_289
	j L_290
	L_289:
	li $v0, 4
	la $a0, data_85
	syscall
	li $v0, 10
	syscall
	L_290:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t1, 0($t1)
	la $a1, proto_table
	sll $a2 $t1 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t1 $v0
	addi $sp, $sp, 4
	move $t1 $t1
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	move $t2 $t2
	L_291:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t1)
	move $t4 $a1
	move $a0 $t3
	move $a1 $t4
	jal less
	move $t3 $v0
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_15
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t3 $a1
	bne $t3 $zero L_292
	j L_328
	L_292:
	move $t8 $t2
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	move $t5 $t3
	move $t4 $t7
	move $a0 $t4
	li $a1, 0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_293
	j L_294
	L_293:
	li $v0, 4
	la $a0, data_86
	syscall
	li $v0, 10
	syscall
	L_294:
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	lw $t3, 0($t4)
	la $a1, proto_table
	sll $a2 $t3 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t3 $v0
	addi $sp, $sp, 12
	move $t9 $t3
	la $t3, data_80 + 0
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_10
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t9)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t8 $a0
	la $t4, type_name_table
	addiu $t4 $t4 12
	lw $t4, 0($t4)
	la $t5, type_name_table
	addiu $t5 $t5 16
	lw $t5, 0($t5)
	la $a0, type_name_table
	addiu $a0 $a0 8
	lw $a0, 0($a0)
	sw $a0, -136($fp)
	move $a0 $t8
	move $a1 $t4
	jal equals
	move $t4 $v0
	bne $t4 $zero L_295
	move $a0 $t8
	move $a1 $t5
	jal equals
	move $t4 $v0
	bne $t4 $zero L_295
	move $a0 $t8
	lw $a1, -136($fp)
	jal equals
	move $t4 $v0
	bne $t4 $zero L_296
	j L_297
	L_295:
	lw $a1, 12($t9)
	move $t4 $a1
	lw $a1, 12($t3)
	move $t3 $a1
	move $a0 $t4
	move $a1 $t3
	jal equals
	move $t3 $v0
	j L_298
	L_296:
	lw $a1, 12($t9)
	move $t4 $a1
	lw $a1, 12($t3)
	move $t3 $a1
	move $a0 $t4
	move $a1 $t3
	jal equal_str
	move $t3 $v0
	j L_298
	L_297:
	move $a0 $t9
	move $a1 $t3
	jal equals
	move $t3 $v0
	L_298:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_15
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t3 $a1
	bne $t3 $zero L_299
	j L_304
	L_299:
	lw $a1, 12($t2)
	move $t3 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t4 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t4)
	move $t4 $a1
	add $t3 $t3 $t4
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	move $t4 $t3
	move $t3 $t7
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t5 $v0
	bne $t5 $zero L_300
	j L_301
	L_300:
	li $v0, 4
	la $a0, data_87
	syscall
	li $v0, 10
	syscall
	L_301:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t3, 0($t3)
	la $a1, proto_table
	sll $a2 $t3 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t3 $a1
	lw $a1, 12($t2)
	move $t2 $a1
	sub $t2 $t3 $t2
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t3 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t2 $a1
	sub $t2 $t3 $t2
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	move $t2 $t2
	move $t5 $t7
	move $a0 $t5
	li $a1, 0
	jal equals
	move $t3 $v0
	bne $t3 $zero L_302
	j L_303
	L_302:
	li $v0, 4
	la $a0, data_88
	syscall
	li $v0, 10
	syscall
	L_303:
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($t5)
	la $a1, proto_table
	sll $a2 $t2 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t2 $v0
	addi $sp, $sp, 12
	sw $t2, 16($t0)
	move $t2 $t1
	move $t3 $t1
	j L_327
	L_304:
	la $t3, data_25 + 0
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_10
	move $t5 $v0
	addi $sp, $sp, 4
	lw $a0, 0($t9)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t3 $a0
	la $t4, type_name_table
	addiu $t4 $t4 12
	lw $t4, 0($t4)
	la $a0, type_name_table
	addiu $a0 $a0 16
	lw $a0, 0($a0)
	sw $a0, -280($fp)
	la $t8, type_name_table
	addiu $t8 $t8 8
	lw $t8, 0($t8)
	move $a0 $t3
	move $a1 $t4
	jal equals
	move $t4 $v0
	bne $t4 $zero L_305
	move $a0 $t3
	lw $a1, -280($fp)
	jal equals
	move $t4 $v0
	bne $t4 $zero L_305
	move $a0 $t3
	move $a1 $t8
	jal equals
	move $t4 $v0
	bne $t4 $zero L_306
	j L_307
	L_305:
	lw $a1, 12($t9)
	move $t3 $a1
	lw $a1, 12($t5)
	move $t4 $a1
	move $a0 $t3
	move $a1 $t4
	jal equals
	move $t3 $v0
	j L_308
	L_306:
	lw $a1, 12($t9)
	move $t3 $a1
	lw $a1, 12($t5)
	move $t4 $a1
	move $a0 $t3
	move $a1 $t4
	jal equal_str
	move $t3 $v0
	j L_308
	L_307:
	move $a0 $t9
	move $a1 $t5
	jal equals
	move $t3 $v0
	L_308:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_15
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t3 $a1
	bne $t3 $zero L_309
	j L_314
	L_309:
	lw $a1, 12($t2)
	move $t3 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t4 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t4)
	move $t4 $a1
	add $t3 $t3 $t4
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	move $t4 $t3
	move $t3 $t7
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t5 $v0
	bne $t5 $zero L_310
	j L_311
	L_310:
	li $v0, 4
	la $a0, data_89
	syscall
	li $v0, 10
	syscall
	L_311:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t3, 0($t3)
	la $a1, proto_table
	sll $a2 $t3 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 12
	lw $a1, 0($a1)
	jal $a1
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t3 $a1
	lw $a1, 12($t2)
	move $t2 $a1
	sub $t2 $t3 $t2
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t3 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t2 $a1
	sub $t2 $t3 $t2
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	move $t2 $t2
	move $t3 $t7
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t5 $v0
	bne $t5 $zero L_312
	j L_313
	L_312:
	li $v0, 4
	la $a0, data_90
	syscall
	li $v0, 10
	syscall
	L_313:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($t3)
	la $a1, proto_table
	sll $a2 $t2 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t2 $v0
	addi $sp, $sp, 12
	sw $t2, 16($t0)
	move $t2 $t1
	move $t3 $t1
	j L_326
	L_314:
	lw $a1, 12($t6)
	move $t4 $a1
	li $a0, 10
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t3 $a1
	mul $t3 $t4 $t3
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t4 $a1
	move $t8 $t2
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	move $t5 $t3
	move $t3 $t7
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t6 $v0
	bne $t6 $zero L_315
	j L_316
	L_315:
	li $v0, 4
	la $a0, data_91
	syscall
	li $v0, 10
	syscall
	L_316:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	lw $t3, 0($t3)
	la $a1, proto_table
	sll $a2 $t3 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t3 $v0
	addi $sp, $sp, 12
	move $t5 $t3
	move $t3 $t0
	move $a0 $t3
	li $a1, 0
	jal equals
	move $t6 $v0
	bne $t6 $zero L_317
	j L_318
	L_317:
	li $v0, 4
	la $a0, data_92
	syscall
	li $v0, 10
	syscall
	L_318:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	lw $t3, 0($t3)
	la $a1, proto_table
	sll $a2 $t3 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 36
	lw $a1, 0($a1)
	jal $a1
	move $t3 $v0
	addi $sp, $sp, 8
	lw $a1, 12($t3)
	move $t3 $a1
	add $t3 $t4 $t3
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_14
	move $t3 $v0
	addi $sp, $sp, 4
	move $t6 $t3
	lw $a1, 12($t2)
	move $t3 $a1
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t2)
	move $t2 $a1
	add $t2 $t3 $t2
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	jal L_14
	move $t2 $v0
	addi $sp, $sp, 4
	move $t2 $t2
	lw $a0, 0($t2)
	sll $a0 $a0 2
	la $a1, type_name_table
	addu $a0 $a0 $a1
	lw $a0, 0($a0)
	move $t8 $a0
	la $t3, type_name_table
	addiu $t3 $t3 12
	lw $t3, 0($t3)
	la $t5, type_name_table
	addiu $t5 $t5 16
	lw $t5, 0($t5)
	la $t4, type_name_table
	addiu $t4 $t4 8
	lw $t4, 0($t4)
	move $a0 $t8
	move $a1 $t3
	jal equals
	move $t3 $v0
	bne $t3 $zero L_319
	move $a0 $t8
	move $a1 $t5
	jal equals
	move $t3 $v0
	bne $t3 $zero L_319
	move $a0 $t8
	move $a1 $t4
	jal equals
	move $t3 $v0
	bne $t3 $zero L_320
	j L_321
	L_319:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t1)
	move $t4 $a1
	move $a0 $t3
	move $a1 $t4
	jal equals
	move $t3 $v0
	j L_322
	L_320:
	lw $a1, 12($t2)
	move $t3 $a1
	lw $a1, 12($t1)
	move $t4 $a1
	move $a0 $t3
	move $a1 $t4
	jal equal_str
	move $t3 $v0
	j L_322
	L_321:
	move $a0 $t2
	move $a1 $t1
	jal equals
	move $t3 $v0
	L_322:
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_15
	move $t3 $v0
	addi $sp, $sp, 4
	lw $a1, 12($t3)
	move $t3 $a1
	bne $t3 $zero L_323
	j L_324
	L_323:
	la $t3, data_49 + 0
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_10
	move $t3 $v0
	addi $sp, $sp, 4
	sw $t3, 16($t0)
	move $t3 $t3
	j L_325
	L_324:
	la $t3, data_49 + 0
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	jal L_10
	move $t3 $v0
	addi $sp, $sp, 4
	move $t3 $t3
	L_325:
	move $t3 $t3
	L_326:
	move $t3 $t3
	L_327:
	move $t3 $t3
	j L_291
	L_328:
	move $t0 $zero
	move $t0 $t0
	move $t0 $t6
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 564
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_61:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	li $t5, 11
	sll $t5 $t5 2
	la $t7, proto_table
	addu $t7 $t7 $t5
	lw $t7, 0($t7)
	lw $a0, 4($t7)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t7
	move $a1 $v0
	jal copy
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_62
	move $t1 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_62:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	lw $t0, 0($fp)
	jal L_73
	move $t1 $v0
	sw $t1, 12($t0)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $t9, 0($sp)
	li $t0, 2
	sll $t0 $t0 2
	la $t9, proto_table
	addu $t9 $t9 $t0
	lw $t9, 0($t9)
	lw $a0, 4($t9)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t9
	move $a1 $v0
	jal copy
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	sw $t1, 16($t0)
	lw $t9, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_63:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -40
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t1, 0($fp)
	lw $a1, 20($t1)
	move $t0 $a1
	move $t0 $t0
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_329
	j L_330
	L_329:
	li $v0, 4
	la $a0, data_93
	syscall
	li $v0, 10
	syscall
	L_330:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 20
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	lw $a1, 20($t1)
	move $t0 $a1
	move $t1 $t0
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_331
	j L_332
	L_331:
	li $v0, 4
	la $a0, data_94
	syscall
	li $v0, 10
	syscall
	L_332:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 16
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 40
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_64:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t7, 0($sp)
	li $t8, 12
	sll $t8 $t8 2
	la $t7, proto_table
	addu $t7 $t7 $t8
	lw $t7, 0($t7)
	lw $a0, 4($t7)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t7
	move $a1 $v0
	jal copy
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	move $t0 $v0
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	jal L_65
	move $t1 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	lw $t7, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_65:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -16
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	jal L_62
	move $t0 $v0
	addi $sp, $sp, 4
	move $t1 $t2
	move $a0 $t1
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_333
	j L_334
	L_333:
	li $v0, 4
	la $a0, data_95
	syscall
	li $v0, 10
	syscall
	L_334:
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t1)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 28
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	sw $t0, 20($t2)
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 16
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_66:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -64
	addi $sp, $sp, -4
	sw $t4, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t3, 0($sp)
	lw $t4, 0($fp)
	lw $t3, 4($fp)
	lw $a1, 16($t3)
	move $t0 $a1
	move $t1 $t0
	move $t0 $t4
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t2 $v0
	bne $t2 $zero L_335
	j L_336
	L_335:
	li $v0, 4
	la $a0, data_96
	syscall
	li $v0, 10
	syscall
	L_336:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 28
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $t2 $t0
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_337
	j L_338
	L_337:
	li $v0, 4
	la $a0, data_97
	syscall
	li $v0, 10
	syscall
	L_338:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 44
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	sw $t0, 16($t3)
	move $t1 $t4
	lw $a1, 12($t3)
	move $t0 $a1
	move $t2 $t0
	move $a0 $t2
	li $a1, 0
	jal equals
	move $t0 $v0
	bne $t0 $zero L_339
	j L_340
	L_339:
	li $v0, 4
	la $a0, data_98
	syscall
	li $v0, 10
	syscall
	L_340:
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($t2)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 40
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 8
	sw $t0, 12($t3)
	move $v0 $t0
	lw $t3, 0($sp)
	addi $sp, $sp, 4
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $t4, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 64
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_67:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -20
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 16($t0)
	move $t0 $a1
	move $t0 $t0
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_341
	j L_342
	L_341:
	li $v0, 4
	la $a0, data_99
	syscall
	li $v0, 10
	syscall
	L_342:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 48
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 20
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_68:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -20
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	lw $t0, 0($fp)
	lw $a1, 12($t0)
	move $t0 $a1
	move $t0 $t0
	move $a0 $t0
	li $a1, 0
	jal equals
	move $t1 $v0
	bne $t1 $zero L_343
	j L_344
	L_343:
	li $v0, 4
	la $a0, data_100
	syscall
	li $v0, 10
	syscall
	L_344:
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	lw $t0, 0($t0)
	la $a1, proto_table
	sll $a2 $t0 2
	addu $a1 $a1 $a2
	lw $a1, 0($a1)
	lw $a1, 8($a1)
	addiu $a1 $a1 44
	lw $a1, 0($a1)
	jal $a1
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t0
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 20
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_69:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t6, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	li $t6, 13
	sll $t6 $t6 2
	la $t0, proto_table
	addu $t0 $t0 $t6
	lw $t0, 0($t0)
	lw $a0, 4($t0)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t0
	move $a1 $v0
	jal copy
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	jal L_70
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t1
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $t6, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_70:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	lw $t0, 0($fp)
	jal L_47
	move $t1 $v0
	sw $t1, 12($t0)
	jal L_33
	move $t1 $v0
	sw $t1, 16($t0)
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_71:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -12
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	lw $t0, 4($fp)
	lw $t1, 8($fp)
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_345
	j L_346
	L_345:
	move $t0 $t2
	j L_347
	L_346:
	li $a0, 0
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	L_347:
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 12
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_72:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -12
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $t2, 0($sp)
	lw $t2, 0($fp)
	lw $t0, 4($fp)
	lw $t1, 8($fp)
	lw $a1, 12($t0)
	move $t0 $a1
	bne $t0 $zero L_348
	j L_349
	L_348:
	li $a0, 1
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	jal L_15
	move $t0 $v0
	addi $sp, $sp, 4
	move $t0 $t0
	j L_350
	L_349:
	move $t0 $t2
	L_350:
	move $v0 $t0
	lw $t2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 12
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_73:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, -8
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	addi $sp, $sp, -4
	sw $a1, 0($sp)
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	addi $sp, $sp, -4
	sw $a2, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t8, 0($sp)
	addi $sp, $sp, -4
	sw $t5, 0($sp)
	li $t8, 14
	sll $t8 $t8 2
	la $t5, proto_table
	addu $t5 $t5 $t8
	lw $t5, 0($t5)
	lw $a0, 4($t5)
	sll $a0 $a0 2
	jal malloc
	move $a2 $a0
	move $a0 $t5
	move $a1 $v0
	jal copy
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	move $t1 $v0
	addi $sp, $sp, -4
	sw $t1, 0($sp)
	jal L_74
	move $t0 $v0
	addi $sp, $sp, 4
	move $v0 $t1
	lw $t8, 0($sp)
	addi $sp, $sp, 4
	lw $a2, 0($sp)
	addi $sp, $sp, 4
	lw $t1, 0($sp)
	addi $sp, $sp, 4
	lw $a1, 0($sp)
	addi $sp, $sp, 4
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($sp)
	addi $sp, $sp, 4
	lw $t5, 0($sp)
	addi $sp, $sp, 4
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	addi $sp, $sp, 8
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra
L_74:
	addi $sp, $sp, -4
	sw $fp, 0($sp)
	addi $fp, $sp, 4
	addi $sp, $sp, 0
	addi $sp, $sp, 0
	lw $fp, 0($sp)
	addi $sp, $sp, 4
	jr $ra

header_size = 12 #in bytes
header_size_slot = 0
header_next_slot = 4
header_reachable_slot = 8
alloc_size       = 2048
total_alloc_size =  2060 #alloc_size + header_size
neg_header_size = -12 #-header_size
free_list = 0
used_list = header_size
state_size = 4
stack_base = -4
init_alloc_size = 28 #(header_size*2) +  state_size
object_mark = -1
meta_data_object_size = 4   #in words
object_expanded = -2
reachable = 1
new_line = 10
str_size_treshold = 1024
int_type = 0
string_type = 0
type_number = 0

    

#####################################################################################################
# Initialize memory manager                                                                         #
# Args:                                                                                             #
#                                                                                                   #
# Return:                                                                                           # 
#                                                                                                   #
# Summary:                                                                                          #
#    The initial blocks for Free-List and Used-List are created.                                    #
#    The $gp is set to use as reference when initial blocks or values related to memory manager     #
#    state are needed.                                                                              #
#    A block of size alloc_size is created an added to Free-List                                    #
##################################################################################################### 
mem_manager_init:
    
    addiu $sp $sp -16
    sw $v0 0($sp)
    sw $a0 4($sp)
    sw $a1 8($sp)
    sw $ra 12($sp)


    li $v0 9
    li $a0 init_alloc_size
    syscall                         #Creating free-list start point
    move $gp $v0                    
    addiu $gp $gp state_size

    sw $zero header_size_slot($gp)       #The free-list start with a block without space, just header, that will always be there.
    sw $zero header_next_slot($gp)
    sw $zero header_reachable_slot($gp) 

    move $a0 $gp
    li $a1 alloc_size
    jal extend_heap

    addiu $a0 $a0 header_size
    sw $zero header_size_slot($a0)      #The used-list start with a block without space, just header, that will always be there.
    sw $zero header_next_slot($a0)
    sw $zero header_reachable_slot($a0)

    
    
    lw $v0 0($sp)
    lw $a0 4($sp)
    lw $a1 8($sp)
    lw $ra 12($sp)
    addiu $sp $sp 16
    
    sw $sp stack_base($gp)

    jr $ra
    

#####################################################################################################
# Free a block previously allocated                                                                 #
# Args:                                                                                             #
# $a0 Block to free address                                                                         #
# Return:                                                                                           # 
#                                                                                                   #
# Summary:                                                                                          #
#    Remove the block from the used-list and add it to the free-list                                #
##################################################################################################### 
free_block:
    addiu $sp $sp -28
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $a0 12($sp)
    sw $ra 16($sp)
    sw $t3 20($sp)
    sw $t4 24($sp)

    move $t0 $a0
    
    addiu $t1 $gp free_list         # Store in $t1 the initial block of the free-list

    addiu $t3 $gp used_list         # Store in $t3 the initial block of the used-list

free_block_loop_used_list:          # Iterate througth the used-list until find the block
    lw $t4 header_next_slot($t3)
    beq $t4 $t0 free_block_loop_free_list
    move $t3 $t4
    j free_block_loop_used_list


free_block_loop_free_list:          # Iterate througth the free-list to find the antecesor of the block in the free-list
    lw $t2 header_next_slot($t1)
    beq $t2 $zero free_block_founded_prev
    bge $t2 $t0 free_block_founded_prev
    move $t1 $t2
    j free_block_loop_free_list

free_block_founded_prev:        
    # Remove the block from the used-list
    lw $t4 header_next_slot($t0)
    sw $t4 header_next_slot($t3)
    
    # Add the block to the free-list
    sw $t2 header_next_slot($t0)
    sw $t0 header_next_slot($t1)

free_block_end:
   
    # Try to merge the list where the new block was added
    move $a0 $t0
    jal expand_block
    move $a0 $t1
    jal expand_block

    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $a0 12($sp)
    lw $ra 16($sp)
    lw $t3 20($sp)
    lw $t4 24($sp)
    addiu $sp $sp 28

    jr $ra


#####################################################################################################
# Merge two continuos blocks of the free-list                                                       #
# Args:                                                                                             #
# $a0  First of the two blocks to merge                                                             #
# Return:                                                                                           # 
#                                                                                                   #
# Summary:                                                                                          #
#    Check if a block can be merged with its sucesor in the free list                               #
##################################################################################################### 
expand_block:
    addiu $sp $sp -16
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $t3 12($sp)

    
    addiu $t0 $gp free_list     # $t0 = the initial block of the free-list

    beq $t0 $a0 expand_block_end  # The initial block can't be expanded, the initial block always will have size 0

    move $t0 $a0

    # Check if the block and its sucesor in the free list are contiguous in memory
    lw $t1 header_next_slot($t0)
    lw $t2 header_size_slot($t0)
    move $t3 $t2
    addiu $t2 $t2 header_size
    addu $t2 $t2 $t0
    beq $t2 $t1 expand_block_expand
    j expand_block_end

expand_block_expand:    #Increment the size of the first block and update next field
    lw $t2 header_size_slot($t1)
    addi $t2 $t2 header_size
    add $t2 $t2 $t3
    sw $t2 header_size_slot($t0)
    lw $t1 header_next_slot($t1)
    sw $t1 header_next_slot($t0)
    
expand_block_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $t3 12($sp)
    addiu $sp $sp 16

    jr $ra


#####################################################################################################
# Allocate more memory for the process and add it to the free-list                                  #
# Args:                                                                                             #
# $a0  Last block of the free-list                                                                  #
# $a1  Memory amount to alloc                                                                       #
# Return:                                                                                           # 
#                                                                                                   #
# Summary:                                                                                          #
#    More memory is allocated and add it to the free-list as a block.                               #
##################################################################################################### 
extend_heap:
    addiu $sp $sp -12
    sw $a0 0($sp)
    sw $a1 4($sp)
    sw $t0 8($sp)

    # Increase the amount of memory by header_size to create a block with that size
    li $v0 9
    addiu $a0 $a1 header_size
    syscall
    
    # Set values of the block_header
    move $t0 $a1 
    sw $t0 header_size_slot($v0)
    sw $zero header_next_slot($v0)
    sw $zero header_reachable_slot($v0)

    # Add block to the end of the free-list
    lw $t0, 0($sp)
    sw $v0 header_next_slot($t0)

    move $a0 $t0
    lw $a1 4($sp)
    lw $t0 8($sp)
    addiu $sp $sp 12

    jr $ra


  
#####################################################################################################
# Split a block into two blocks, one of the requested size and the other with the rest.             #
# Args:                                                                                             #
# $a0  Address of the block to split                                                                #
# $a1  Size requested for one block                                                                 #
# Return:                                                                                           # 
#                                                                                                   #
# Summary:                                                                                          #
#    The block is splitted into two blocks if the size allow it.                                    #
##################################################################################################### 
split_block:
    addiu $sp $sp -16
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $a0 8($sp)
    sw $a1 12($sp)

    # Check if the block can be splitted in two blocks, one of the requested size
    lw $t0 header_size_slot($a0)
    bgt $a1 $t0 split_block_error_small
    
    # Check if after a split the block there is enough space to create another block, if there is not do not split
    sub $t0 $t0 $a1
    li $t1 header_size
    ble $t0 $t1 split_block_same_size

    # Compute the address of the second block
    addu $t0 $a0 $a1
    addiu $t0 $t0 header_size     

    #Update headers of the two blocks
    lw $t1 header_next_slot($a0)    
    sw $t1 header_next_slot($t0)
    sw $t0 header_next_slot($a0)

    lw $t1 header_size_slot($a0)    #update sizes
    sub $t1 $t1 $a1

    addi $t1 $t1 neg_header_size
    sw $t1 header_size_slot($t0)
    sw $a1 header_size_slot($a0)
    move $v0 $a0
    j split_block_end

split_block_same_size:
    move $v0 $a0
    j split_block_end

split_block_error_small:
    j split_block_end

split_block_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $a0 8($sp)
    lw $a1 12($sp)
    addiu $sp $sp 16

    jr $ra


#####################################################################################################
# Best Fit strategy is used to select the block                                                     #
# Args:                                                                                             #
# $a0 size to alloc                                                                                 #
# Return:                                                                                           # 
# $v0 address of allocated block                                                                    #
# Summary:                                                                                          #
#   Actual block is store in $t0, the size block is checked to know if it is a                      #
#   valid block (a block is valid if its size is larger or equal than the required size),           #
#   if the block is valid we compare it with the actual best block and keep the shorter block.      #
#   If there is not a block with the required size, a new block of size                             #
#   max(total_alloc_size, size requested) is requested with sbrk and splitted if necessary          #
##################################################################################################### 
malloc:
    move $v0 $zero
    addiu $sp $sp -28
    sw $t1 0($sp)
    sw $t0 4($sp)
    sw $a0 8($sp)
    sw $a1 12($sp)
    sw $ra 16($sp)
    sw $t2 20($sp)
    sw $t3 24($sp)
    
    addiu $t0 $gp free_list
    j malloc_loop

malloc_end:

    move $a0 $v0
    lw $a1 8($sp)                  # a1 = requested block size
    jal split_block

    lw $t1 header_next_slot($v0)
    sw $t1 header_next_slot($t3)

    addiu $t1 $gp used_list
    lw $a0 header_next_slot($t1)

    sw $a0 header_next_slot($v0)
    sw $v0 header_next_slot($t1)
    
    addiu $v0 $v0 header_size

    lw $t3 24($sp)
    lw $t2 20($sp)
    lw $ra 16($sp)
    lw $a1 12($sp)
    lw $a0 8($sp)
    lw $t0 4($sp)
    lw $t1 0($sp)
    addiu $sp $sp 28

    jr $ra
#######################################################################
# t0 = actual block address                                           #
#######################################################################
malloc_loop:
    move $t2 $t0                        # save previous block in $t2 (this is usefull when we lw $t3 24($sp)need to alloc the new block)
    lw $t0 header_next_slot($t0)        # t0 = next block address
    beq $t0 $zero malloc_search_end     # if t0 == 0 we reach to the free-list end
    j malloc_check_valid_block

#######################################################################
# $v0 = actual selected block address                                 #
#######################################################################
malloc_search_end:
    beq $v0 $zero malloc_alloc_new_block  # if v0 == 0 a valid block was not found
    j malloc_end

#######################################################################
# t2 = last block of free list                                        #
# a0 = requested block size                                           #
#######################################################################
malloc_alloc_new_block:
    li $t1 alloc_size               # t1 = standard alloc size
    move $t3 $t2
    move $a1 $a0                    # a1 = requested block size
    move $a0 $t2                    # a0 = last block of free list
    bge $a1 $t1 malloc_big_block    # if the requested size is bigger than the standar alloc size go to malloc_big_block
    li $a1 alloc_size         # a1 = standard alloc size
    jal extend_heap
    
    j malloc_end

######################################################################
# a1 = requested block size                                          #
######################################################################
malloc_big_block:
    #addiu $a1 $a1 header_size              # Add header size to alloc size
    jal extend_heap
    j malloc_end



########################################################################
# t0 = actual block address                                            #                                            
########################################################################
malloc_check_valid_block:
    lw $t1 header_size_slot($t0)             # t1 = size new block
    bge $t1 $a0 malloc_valid_block    # the actual block have the required size
    j malloc_loop

########################################################################
# t0 = actual block address                                            #
# t1 = size actual block                                               #
# v0 = actual selected block address(0 if no one have been selected)   #
# v1 = actual selected block size                                      #
########################################################################
malloc_valid_block:
    beq $v0 $zero malloc_first_valid_block     # this is the first valid block
    bge $t1 $v1 malloc_loop                    # the selected block is smaller than actual block
    move $v0 $t0                        # selected block address = actual block address
    move $v1 $t1                        # selected block size = actual block size
    move $t3 $t2
    j malloc_loop


########################################################################
# t0 = actual block address                                            # 
# t1 = size actual block                                               # 
# v0 = actual selected block address(0 if no one have been selected)   #
# v1 = actual selected block size                                      #
########################################################################
malloc_first_valid_block:
    move $v0 $t0                        # selected block address = actual block address
    move $v1 $t1                        # selected block size    = actual block size
    move $t3 $t2 
    j malloc_loop


#TODO Look for objects in registers
#####################################################################################################
# Remove from used-list the blocks that are not reachables, the root objects are in the stack and   #
# registers                                                                                         #
# Args:                                                                                             #
#                                                                                                   #
# Return:                                                                                           # 
#                                                                                                   #
# Summary:                                                                                          #
#     First the objects in stack and registers are marked as reachables, after that the objects     #
#     that are reachables from them are marked as reachable too using a dfs algorithm. When all     #
#     reachables objects are marked the used-list is scanned and all the objects that are not       #
#     marked as reachables are released.                                                            #
##################################################################################################### 

gc_collect:
    addiu $sp $sp -24
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $t3 12($sp)
    sw $a0 16($sp)
    sw $ra 20($sp)

    li $t3 reachable    # $t3 = reachable value
    addiu $t0 $sp 20    # $t0 = the start of the stack without count this function
    lw $t1 stack_base($gp)  # $t1 = the end of the stack

    li $t2 1
# Go through the stack searching for objects
gc_collect_loop:
    addiu $t0 $t0 4
    beq $t0 $t1 gc_collect_dfs      # If the end of the stack was reached finish this loop
    
    lw $a0 0($t0)
    jal check_if_is_object
    
    bne $v0 $t2 gc_collect_loop

    addiu $a0 $a0 neg_header_size
    sw $t3 header_reachable_slot($a0)
    
    j gc_collect_loop

gc_collect_dfs:
    addiu $t1 $gp used_list

# Go through the used-list and try to expand any reachable block
gc_collect_outer_loop:
    lw $t1 header_next_slot($t1)
    beq $t1 $zero gc_collect_free
    lw $t2 header_reachable_slot($t1)
    beq $t2 reachable gc_collect_expand
    j gc_collect_outer_loop

gc_collect_expand:
    addiu $a0 $t1 header_size      # expand an object not a block
    jal gc_collect_recursive_expand
    j gc_collect_outer_loop

gc_collect_free:
    addiu $t0 $gp used_list
    lw $t0 header_next_slot($t0)

# Go through the used-list and free any unreachable object and set the reachable and expanded field to their default values
gc_collect_free_loop:
    beq $t0 $zero gc_collect_end
    lw $t1 header_reachable_slot($t0)
    bne $t1 reachable gc_collect_free_loop_free
    sw $zero header_reachable_slot($t0)
    move $a0 $t0
    jal check_if_is_object
    beq $v0 $zero gc_collect_free_loop
    li $t1 object_mark
    addiu $t2 $t0 header_size
    lw $t3 4($t2)
    sll $t3 $t3 2
    addu $t2 $t2 $t3
    sw $t1 -4($t2)
    lw $t0 header_next_slot($t0)
    j gc_collect_free_loop

gc_collect_free_loop_free:
    move $a0 $t0
    lw $t0 header_next_slot($t0)
    jal free_block
    j gc_collect_free_loop

    
gc_collect_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $t3 12($sp)
    lw $a0 16($sp)
    lw $ra 20($sp)
    addiu $sp $sp 24

    jr $ra




#####################################################################################################
# Mark the objects that are reachable from the attrs of one object in a recursive way.              #
# Args:                                                                                             #
# $a0: Object to expand                                                                             #
# Return:                                                                                           # 
#                                                                                                   #
# Summary:                                                                                          #
#     The actual object is marked as reachable and expanded to avoid infinite cycles, and this      #
#     routine is called recursively to expand the objects in the attrs of the actual object.        #
##################################################################################################### 
gc_collect_recursive_expand:
    addiu $sp $sp -16
    sw $a0 0($sp)
    sw $t0 4($sp)
    sw $t1 8($sp)
    sw $ra 12($sp)
    
    jal check_if_is_object  # If is not an object can not be expanded
    beq $v0 $zero gc_collect_recursive_expand_end

    lw $t0 4($a0)
    sll $t0 $t0 2
    addiu $t0 $t0 -4
    addu $t0 $a0 $t0
    lw $t1 0($t0)   # Check if the object was ready expanded to avoid infinite cycles
    beq $t1 object_expanded gc_collect_recursive_expand_end
    
    # Mark the block that contains the object as reachable
    li $t1 reachable
    addiu $a0 $a0 neg_header_size
    sw $t1 header_reachable_slot($a0)
    addiu $a0 $a0 header_size 

    # Mark the object as expanded
    li $t1 object_expanded
    sw $t1 0($t0)

    lw $t0 0($a0)   # $t0 = type of the object
    
    # int and string types are special cases
    la $t1 int_type
    lw $t1 0($t1)
    beq $t0 $t1 gc_collect_recursive_expand_end

    la $t1 string_type
    lw $t1 0($t1)
    beq $t0 $t1 gc_collect_recursive_expand_string_object

    lw $t0 4($a0)
    li $t1 meta_data_object_size
    sub $t0 $t0 $t1
    
    addiu $t1 $a0 12

# call this routine in every attr of the object
gc_collect_recursive_expand_attr_loop:
    beq $t0 $zero gc_collect_recursive_expand_end
    lw $a0 0($t1)
    jal gc_collect_recursive_expand
    addiu $t1 $t1 4
    sub $t0 $t0 1
    j gc_collect_recursive_expand_attr_loop

# the value field of string object is not an object but it is a 
# reference to the block where the string is saved, so that block 
# needs to be marked as reachable
gc_collect_recursive_expand_string_object:
    lw $t0 8($a0)
    addiu $t0 $t0 neg_header_size
    li $t1 reachable
    sw $t1 header_reachable_slot($t0)
    

gc_collect_recursive_expand_end:
    lw $a0 0($sp)
    lw $t0 4($sp)
    lw $t1 8($sp)
    lw $ra 12($sp)
    addiu $sp $sp 16

    jr $ra



  




# $a0 address from 
# $a1 address to
# $a2 size
copy:
    addiu $sp $sp -16
    sw $a0 0($sp)
    sw $a1 4($sp)
    sw $a2 8($sp)
    sw $t0 12($sp)

copy_loop:
    beq $a2 $zero copy_end
    lw $t0 0($a0)
    sw $t0 0($a1)
    addiu $a0 $a0 4
    addiu $a1 $a1 4
    addi $a2 $a2 -4
    j copy_loop 

copy_end:
    lw $a0 0($sp)
    lw $a1 4($sp)
    lw $a2 8($sp)
    lw $t0 12($sp)
    addiu $sp $sp 16

    jr $ra


#####################################################################################################
# Check if a value is a reference to an object                                                      #
# Args:                                                                                             #
# $a0: Value to check                                                                               #
# Return:                                                                                           # 
#    $v0: 1 if is a reference to an object else 0                                                   #
# Summary:                                                                                          #
#     Check if a value is a valid heap address and if it is check if in that address there are      #
#     values that match with the object schema                                                      #
##################################################################################################### 
check_if_is_object:
    addiu $sp $sp -20
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $t3 12($sp)
    sw $a0 16($sp)

    move $t0 $a0

    li $v0 9
    move $a0 $zero
    syscall

    addiu $t1 $v0 -4    # Last word of heap

    # Check that the first word is a type object
    blt $t0 $gp check_if_is_object_not_object
    bgt $t0 $t1 check_if_is_object_not_object
    lw $t2 0($t0)
    blt $t2 $zero check_if_is_object_not_object
    la $t3 type_number
    lw $t3 0($t3)
    bge $t2 $t3 check_if_is_object_not_object

    addiu $t0 $t0 4
    blt $t0 $gp check_if_is_object_not_object
    bgt $t0 $t1 check_if_is_object_not_object
    lw $t2 0($t0)   #Store size in $t2

    addiu $t0 $t0 8
    

    li $t3 meta_data_object_size
    sub $t2 $t2 $t3 
    sll $t2 $t2 2
    addu $t0 $t0 $t2
    
    # Check if the last word of the object is an object mark
    blt $t0 $gp check_if_is_object_not_object
    bgt $t0 $t1 check_if_is_object_not_object
    lw $t2 0($t0)
    beq $t2 object_mark check_if_is_object_is_object
    beq $t2 object_expanded check_if_is_object_is_object

check_if_is_object_not_object:
    li $v0 0
    j check_if_is_object_end
    
    
check_if_is_object_is_object:
    li $v0 1


check_if_is_object_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $t3 12($sp)
    lw $a0 16($sp)
    addiu $sp $sp 20

    jr $ra


equals:
    beq $a0 $a1 equals_equal
    li $v0 0
    j equals_end
    
equals_equal:
    li $v0 1

equals_end:
    jr $ra



less_equal:
    ble $a0 $a1 less_equal_true
    li $v0 0
    j less_equal_end

less_equal_true:
    li $v0 1

less_equal_end:
    jr $ra


less:
    blt $a0 $a1 less_true
    li $v0 0
    j less_end

less_true:
    li $v0 1

less_end:
    jr $ra


len:
    addiu $sp $sp -8
    sw $t0 0($sp)
    sw $t1 4($sp)

    move $t0 $a0
    move $v0 $zero

len_loop:
    lb $t1 0($t0)
    beq $t1 $zero len_end
    addi $v0 $v0 1
    addiu $t0 $t0 1
    j len_loop

len_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    addiu $sp $sp 8

    jr $ra


use_block:
    addiu $sp $sp -12
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)

    addiu $t0 $gp free_list

use_block_loop:
    move $t1 $t0
    lw $t0 header_next_slot($t0)
    beq $t0 $zero use_block_end
    beq $t0 $a0 use_block_founded
    j use_block_loop

use_block_founded:
    lw $t2 header_next_slot($t0)
    sw $t2 header_next_slot($t1)

    addiu $t1 $gp used_list
    lw $t2 header_next_slot($t1)
    sw $t0 header_next_slot($t1)
    sw $t2 header_next_slot($t0)

use_block_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    addiu $sp $sp 12

    jr $ra




read_str:
    addiu $sp $sp -36
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $t3 12($sp)
	sw $t4 16($sp)
	sw $t5 20($sp)
    sw $a0 24($sp)
    sw $a1 28($sp)
    sw $ra 32($sp)
	
    addiu $t0 $gp free_list
    move $t1 $zero
    move $t2 $t0

read_str_larger_block_loop:
    lw $t0 header_next_slot($t0)
    beq $t0 $zero read_str_reading
    lw $t3 header_size_slot($t0)
    bge $t1 $t3 read_str_larger_block_loop
    move $t1 $t3
    move $t2 $t0
    j read_str_larger_block_loop

read_str_reading:
    beq $t1 $zero read_str_new_block
    move $a1 $t1
    li $v0 8
    addiu $a0 $t2 header_size
    syscall
    move $t0 $a0
    move $t1 $zero

read_str_look_nl:
    lb $t2 0($t0)
    beq $t2 new_line read_str_nl_founded
    beq $t2 $zero read_str_zero_founded#read_str_no_nl
    addi $t1 $t1 1
    addi $t0 $t0 1
    j read_str_look_nl

read_str_zero_founded:
    blt $t1 $t3 read_str_nl_founded
    j read_str_no_nl

read_str_nl_founded:
    sb $zero 0($t0)
    addi $t1 $t1 1
	li $t2 4
	div $t1 $t2
	mfhi $t3
	beq $t3 $zero read_str_nl_founded_alligned
	sub $t2 $t2 $t3
	add $t1 $t1 $t2
read_str_nl_founded_alligned:
    move $a1 $t1
    addiu $a0 $a0 neg_header_size
    jal split_block
    jal use_block

    addiu $v0 $a0 header_size
	j read_str_end


read_str_no_nl:
	addi $t1 $t1 1
    blt $t1 str_size_treshold read_str_dup
	addi $t1 $t1 alloc_size
	j read_str_extend_heap
read_str_dup:
	sll $t1 $t1 1
read_str_extend_heap:
	move $a1 $t1
	move $t0 $a0
	addiu $a0 $gp free_list

read_str_last_block_loop:
	lw $t1 header_next_slot($a0)
	beq $t1 $zero read_str_last_block_founded
	lw $a0 header_next_slot($a0)
	j read_str_last_block_loop

read_str_last_block_founded:
	jal extend_heap
	jal expand_block
	lw $t1 header_next_slot($a0)
	bne $t1 $zero read_str_copy_prev
	move $t1 $a0

read_str_copy_prev:
	lw $t3 header_size_slot($t1)
	move $t2 $zero
	move $t5 $t1
	addiu $t1 $t1 header_size

read_str_copy_loop:
	lb $t4 0($t0)
	beq $t4 $zero read_str_copy_end
	sb $t4 0($t1)
	addi $t2 $t2 1
	addi $t0 $t0 1
	addi $t1 $t1 1
	j read_str_copy_loop

read_str_copy_end:
	sub $t3 $t3 $t2
	move $a0 $t1
	move $a1 $t3
	li $v0 8
	syscall
	move $t0 $a0
	move $t1 $t2
	addiu $a0 $t5 header_size
	j read_str_look_nl

	
read_str_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $t3 12($sp)
	lw $t4 16($sp)
	lw $t5 20($sp)
    lw $a0 24($sp)
    lw $a1 28($sp)
    lw $ra 32($sp)
    addiu $sp $sp 36

    jr $ra


read_str_new_block:
    addiu $t0 $gp free_list

read_str_new_block_search_last:
    lw $t1 header_next_slot($t0)
    beq $t1 $zero read_str_new_block_create
    move $t0 $t1
    j read_str_new_block_search_last

read_str_new_block_create:
    move $a0 $t0
    li $a1 alloc_size
    jal extend_heap
    jal expand_block
    lw $t2 header_next_slot($a0)
    beq $t2 $zero read_str_new_block_expanded
    lw $t1 header_size_slot($t2)
    j read_str_reading

read_str_new_block_expanded:
    move $t2 $a0
    lw $t1 header_size_slot($a0)
    j read_str_reading



concat:
    addiu $sp $sp -24
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $a0 12($sp)
    sw $a1 16($sp)
    sw $ra 20($sp)

    move $t0 $a0
    move $t1 $a1


    addiu $a0 $a2 1
    li $t2 4
    div $a0 $t2
    mfhi $a0
    bne $a0 $zero concat_allign_size
    addiu $a0 $a2 1

concat_size_alligned:
    jal malloc
    move $t2 $v0
    j concat_copy_first_loop

concat_allign_size:
    sub $t2 $t2 $a0
    add $a0 $a2 $t2
    addiu $a0 $a0 1
    j concat_size_alligned

concat_copy_first_loop:
    lb $a0 0($t0)
    beq $a0 $zero concat_copy_second_loop
    sb $a0 0($t2)
    addiu $t0 $t0 1
    addiu $t2 $t2 1
    j concat_copy_first_loop

concat_copy_second_loop:
    lb $a0 0($t1)
    beq $a0 $zero concat_end
    sb $a0 0($t2)
    addiu $t1 $t1 1
    addiu $t2 $t2 1
    j concat_copy_second_loop

concat_end:
    sb $zero 0($t2)
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $a0 12($sp)
    lw $a1 16($sp)
    lw $ra 20($sp)
    addiu $sp $sp 24

    jr $ra


substr:
    addiu $sp $sp -24
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $t3 12($sp)
    sw $a0 16($sp)
    sw $ra 20($sp)

    move $t0 $a0
    li $t1 4
    addiu $t3 $a2 1
    div $t3 $t1
 
    mfhi $t2
    bne $t2 $zero substr_allign_size
    move $t1 $t3
    j substr_new_block

substr_allign_size:
    sub $t1 $t1 $t2
    add $t1 $t1 $t3

substr_new_block:
    move $a0 $t1
    jal malloc
    move $t3 $v0
    move $t1 $zero
    addu $t0 $t0 $a1

substr_copy_loop:
    beq $t1 $a2 substr_end
    lb $t2 0($t0)
    sb $t2 0($t3)
    addiu $t0 $t0 1
    addiu $t3 $t3 1
    addiu $t1 $t1 1
    j substr_copy_loop

substr_end:
    sb $zero 0($t3)
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $t3 12($sp)
    lw $a0 16($sp)
    lw $ra 20($sp)
    addiu $sp $sp 24

    jr $ra


equal_str:
    addiu $sp $sp -16
    sw $t0 0($sp)
    sw $t1 4($sp)
    sw $t2 8($sp)
    sw $t3 12($sp)

    move $t0 $a0
    move $t1 $a1

equal_str_loop:
    lb $t2 0($t0)
    lb $t3 0($t1)
    bne $t2 $t3 equal_str_not_equal
    beq $t2 $zero equal_str_equal

    addiu $t0 $t0 1
    addiu $t1 $t1 1
    j equal_str_loop

equal_str_not_equal:
    move $v0 $zero
    j equal_str_end

equal_str_equal:
    li $v0 1

equal_str_end:
    lw $t0 0($sp)
    lw $t1 4($sp)
    lw $t2 8($sp)
    lw $t3 12($sp)
    addiu $sp $sp 16

    jr $ra








    






    

    









