.data
	
	################
	# DATA SECTION #
	################

	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_Graph: .word 44
	type_Graph_inherits_from: .word type_Object
	type_Graph_name_address: .word type_Graph_name_size
	type_Graph___init__: .word function___init___at_Graph
	type_Graph_abort: .word function_abort_at_Object
	type_Graph_type_name: .word function_type_name_at_Object
	type_Graph_copy: .word function_copy_at_Object
	type_Graph_add_vertice: .word function_add_vertice_at_Graph
	type_Graph_print_E: .word function_print_E_at_Graph
	type_Graph_print_V: .word function_print_V_at_Graph
	
	type_Vertice: .word 68
	type_Vertice_inherits_from: .word type_IO
	type_Vertice_name_address: .word type_Vertice_name_size
	type_Vertice___init__: .word function___init___at_Vertice
	type_Vertice_abort: .word function_abort_at_Object
	type_Vertice_type_name: .word function_type_name_at_Object
	type_Vertice_copy: .word function_copy_at_Object
	type_Vertice_out_string: .word function_out_string_at_IO
	type_Vertice_out_int: .word function_out_int_at_IO
	type_Vertice_in_string: .word function_in_string_at_IO
	type_Vertice_in_int: .word function_in_int_at_IO
	type_Vertice_outgoing: .word function_outgoing_at_Vertice
	type_Vertice_number: .word function_number_at_Vertice
	type_Vertice_init: .word function_init_at_Vertice
	type_Vertice_add_out: .word function_add_out_at_Vertice
	type_Vertice_print: .word function_print_at_Vertice
	
	type_Edge: .word 60
	type_Edge_inherits_from: .word type_IO
	type_Edge_name_address: .word type_Edge_name_size
	type_Edge___init__: .word function___init___at_Edge
	type_Edge_abort: .word function_abort_at_Object
	type_Edge_type_name: .word function_type_name_at_Object
	type_Edge_copy: .word function_copy_at_Object
	type_Edge_out_string: .word function_out_string_at_IO
	type_Edge_out_int: .word function_out_int_at_IO
	type_Edge_in_string: .word function_in_string_at_IO
	type_Edge_in_int: .word function_in_int_at_IO
	type_Edge_init: .word function_init_at_Edge
	type_Edge_print: .word function_print_at_Edge
	
	type_EList: .word 68
	type_EList_inherits_from: .word type_IO
	type_EList_name_address: .word type_EList_name_size
	type_EList___init__: .word function___init___at_EList
	type_EList_abort: .word function_abort_at_Object
	type_EList_type_name: .word function_type_name_at_Object
	type_EList_copy: .word function_copy_at_Object
	type_EList_out_string: .word function_out_string_at_IO
	type_EList_out_int: .word function_out_int_at_IO
	type_EList_in_string: .word function_in_string_at_IO
	type_EList_in_int: .word function_in_int_at_IO
	type_EList_isNil: .word function_isNil_at_EList
	type_EList_head: .word function_head_at_EList
	type_EList_tail: .word function_tail_at_EList
	type_EList_cons: .word function_cons_at_EList
	type_EList_append: .word function_append_at_EList
	type_EList_print: .word function_print_at_EList
	
	type_ECons: .word 76
	type_ECons_inherits_from: .word type_EList
	type_ECons_name_address: .word type_ECons_name_size
	type_ECons___init__: .word function___init___at_ECons
	type_ECons_abort: .word function_abort_at_Object
	type_ECons_type_name: .word function_type_name_at_Object
	type_ECons_copy: .word function_copy_at_Object
	type_ECons_out_string: .word function_out_string_at_IO
	type_ECons_out_int: .word function_out_int_at_IO
	type_ECons_in_string: .word function_in_string_at_IO
	type_ECons_in_int: .word function_in_int_at_IO
	type_ECons_isNil: .word function_isNil_at_ECons
	type_ECons_head: .word function_head_at_ECons
	type_ECons_tail: .word function_tail_at_ECons
	type_ECons_cons: .word function_cons_at_EList
	type_ECons_append: .word function_append_at_EList
	type_ECons_print: .word function_print_at_ECons
	type_ECons_init: .word function_init_at_ECons
	
	type_VList: .word 64
	type_VList_inherits_from: .word type_IO
	type_VList_name_address: .word type_VList_name_size
	type_VList___init__: .word function___init___at_VList
	type_VList_abort: .word function_abort_at_Object
	type_VList_type_name: .word function_type_name_at_Object
	type_VList_copy: .word function_copy_at_Object
	type_VList_out_string: .word function_out_string_at_IO
	type_VList_out_int: .word function_out_int_at_IO
	type_VList_in_string: .word function_in_string_at_IO
	type_VList_in_int: .word function_in_int_at_IO
	type_VList_isNil: .word function_isNil_at_VList
	type_VList_head: .word function_head_at_VList
	type_VList_tail: .word function_tail_at_VList
	type_VList_cons: .word function_cons_at_VList
	type_VList_print: .word function_print_at_VList
	
	type_VCons: .word 72
	type_VCons_inherits_from: .word type_VList
	type_VCons_name_address: .word type_VCons_name_size
	type_VCons___init__: .word function___init___at_VCons
	type_VCons_abort: .word function_abort_at_Object
	type_VCons_type_name: .word function_type_name_at_Object
	type_VCons_copy: .word function_copy_at_Object
	type_VCons_out_string: .word function_out_string_at_IO
	type_VCons_out_int: .word function_out_int_at_IO
	type_VCons_in_string: .word function_in_string_at_IO
	type_VCons_in_int: .word function_in_int_at_IO
	type_VCons_isNil: .word function_isNil_at_VCons
	type_VCons_head: .word function_head_at_VCons
	type_VCons_tail: .word function_tail_at_VCons
	type_VCons_cons: .word function_cons_at_VList
	type_VCons_print: .word function_print_at_VCons
	type_VCons_init: .word function_init_at_VCons
	
	type_Parse: .word 68
	type_Parse_inherits_from: .word type_IO
	type_Parse_name_address: .word type_Parse_name_size
	type_Parse___init__: .word function___init___at_Parse
	type_Parse_abort: .word function_abort_at_Object
	type_Parse_type_name: .word function_type_name_at_Object
	type_Parse_copy: .word function_copy_at_Object
	type_Parse_out_string: .word function_out_string_at_IO
	type_Parse_out_int: .word function_out_int_at_IO
	type_Parse_in_string: .word function_in_string_at_IO
	type_Parse_in_int: .word function_in_int_at_IO
	type_Parse_read_input: .word function_read_input_at_Parse
	type_Parse_parse_line: .word function_parse_line_at_Parse
	type_Parse_c2i: .word function_c2i_at_Parse
	type_Parse_a2i: .word function_a2i_at_Parse
	type_Parse_a2i_aux: .word function_a2i_aux_at_Parse
	
	type_Main: .word 76
	type_Main_inherits_from: .word type_Parse
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_read_input: .word function_read_input_at_Parse
	type_Main_parse_line: .word function_parse_line_at_Parse
	type_Main_c2i: .word function_c2i_at_Parse
	type_Main_a2i: .word function_a2i_at_Parse
	type_Main_a2i_aux: .word function_a2i_aux_at_Parse
	type_Main_main: .word function_main_at_Main
	
	type_BoolOp: .word 32
	type_BoolOp_inherits_from: .word type_Object
	type_BoolOp_name_address: .word type_BoolOp_name_size
	type_BoolOp___init__: .word function___init___at_BoolOp
	type_BoolOp_abort: .word function_abort_at_Object
	type_BoolOp_type_name: .word function_type_name_at_Object
	type_BoolOp_copy: .word function_copy_at_Object
	type_BoolOp_and: .word function_and_at_BoolOp
	type_BoolOp_or: .word function_or_at_BoolOp
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Graph_name_size: .word 5
	type_Graph_name: .asciiz "Graph"
	
	type_Vertice_name_size: .word 7
	type_Vertice_name: .asciiz "Vertice"
	
	type_Edge_name_size: .word 4
	type_Edge_name: .asciiz "Edge"
	
	type_EList_name_size: .word 5
	type_EList_name: .asciiz "EList"
	
	type_ECons_name_size: .word 5
	type_ECons_name: .asciiz "ECons"
	
	type_VList_name_size: .word 5
	type_VList_name: .asciiz "VList"
	
	type_VCons_name_size: .word 5
	type_VCons_name: .asciiz "VCons"
	
	type_Parse_name_size: .word 5
	type_Parse_name: .asciiz "Parse"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	type_BoolOp_name_size: .word 6
	type_BoolOp_name: .asciiz "BoolOp"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	
	################
	# TEXT SECTION #
	################

	function_add:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# ADD FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		add $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SUB FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sub $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# TIMES FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		mult $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# DIV FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		div $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# XOR FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		xor $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		slt $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS EQ FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sle $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -40
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 32($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# internal_2 <- EQUALADDRESS (a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 <- EQUALADDRESS (b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# IF internal_2 THEN GOTO a_is_type_object
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_object
		
		# internal_3 <- TYPEOF a
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 <- DIRECTION OF String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_7 <- EQUALADDRESS (internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 <- EQUALADDRESS (internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 <- EQUALADDRESS (internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_7 THEN GOTO a_is_type_int_or_bool
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_8 THEN GOTO a_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_9 THEN GOTO a_is_type_string
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_string
		
		# JUMP TO a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 <- EQUALINT (a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 <- EQUALSTRING (a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# EQUAL FUNCT
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		seq $t2, $t0, $t1
		
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		lw $v1, 36($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -28
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 24($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_1 <- EQUALADDRESS (source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 <- EQUALADDRESS (dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# IF internal_1 THEN GOTO source_is_type_object
		lw $t0, 20($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_object
		
		# internal_2 <- TYPEOF source
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_5 <- EQUALADDRESS (internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 <- EQUALADDRESS (internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_5 THEN GOTO source_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# IF internal_6 THEN GOTO source_is_type_int_or_bool
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# JUMP TO source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest <- source WHERE source IS AN INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t0)
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		sw $t2, 8($v0)
		sw $v0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest <- source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		lw $v1, 32($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -24
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		
		addi $t0, $zero, 65
		sb $t0, 8($v0)
		
		addi $t0, $zero, 98
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		
		addi $t0, $zero, 116
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 100
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		
		addi $t0, $zero, 108
		sb $t0, 27($v0)
		
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		sb $zero, 32($v0)
		
		sw $v0, 20($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 8($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD type_name OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		lw $t0, 12($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# EXIT!
		li $v0, 10
		syscall
		
		lw $v1, 24($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- NAME OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t1)
		la $t3, 4($t2)
		lw $t2, 0($t2)
		
		addi $t2, $t2, 9
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9
		
		la $t4, type_String
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		
		addi $t4, $v0, 0
		addi $t4, $t4, 8
		xor $t5, $t5, $t5
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3)
		sb $t6, 0($t4)
		addi $t4, $t4, 1
		addi $t3, $t3, 1
		addi $t5, $t5, 1
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- COPY OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 4($t0)
		
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		addi $t3, $t3, 8
		addi $t2, $2, -8
		xor $t4, $t4, $t4
		
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0)
		sb $t5, 0($t3)
		addi $t0, $t0, 1
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		lw $t0, 0($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: x
		li $v0, 4
		move $a0, $t0
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# PRINTING INT: x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0
		while_read_start:
		lb $t1, buffer_input($t0)
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9
		la $t2, type_String
		sw $t2, 0($v0)
		sw $a0, 4($v0)
		
		addi $t3, $v0, 8
		xor $t4, $t4, $t4
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4)
		sb $t5, 0($t3)
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_0 <- LENGTH (self)
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0)
		lw $t3, 4($t1)
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3
		addi $t4, $t4, 9
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9
		add $t5, $zero, $v0
		addi $t5, $t5, 8
		
		la $t8, type_String
		sw $t8, 0($v0)
		
		sw $a0, 4($v0)
		
		xor $t6, $t6, $t6
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str1_start
		while_copy_str1_end:
		
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self[i:i + l]
		lw $t0, 12($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t2, 8($sp)
		lw $t2, 8($t2)
		lw $t3, 4($sp)
		lw $t3, 8($t3)
		add $t4, $t2, $t3
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0)
		
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		add $t0, $t0, $t2
		move $t5, $v0
		add $t5, $t5, 8
		xor $t6, $t6, $t6
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Graph:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -8
		
		# ALLOCATING -> VList
		li $v0, 9
		lw $a0, type_VList
		syscall
		la $t0, type_VList
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_VList
		jal function___init___at_VList
		lw $ra, 4($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE vertices OF self
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121873502
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121873502
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121873502
		j object_set_attribute_8756121873502
		int_set_attribute_8756121873502:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121873502
		bool_set_attribute_8756121873502:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121873502
		object_set_attribute_8756121873502:
		sw $t1, 8($t0)
		end_set_attribute_8756121873502:
		
		# ALLOCATING -> EList
		li $v0, 9
		lw $a0, type_EList
		syscall
		la $t0, type_EList
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 8($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_EList
		jal function___init___at_EList
		lw $ra, 4($sp)
		sw $v1, 8($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE edges OF self
		lw $t0, 8($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121873553
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121873553
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121873553
		j object_set_attribute_8756121873553
		int_set_attribute_8756121873553:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121873553
		bool_set_attribute_8756121873553:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121873553
		object_set_attribute_8756121873553:
		sw $t1, 12($t0)
		end_set_attribute_8756121873553:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 8
		
		jr $ra
		
	function_add_vertice_at_Graph:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -44
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# GET METHOD outgoing OF Vertice
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 36($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [v]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_2
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE edges OF self
		lw $t0, 48($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121873050
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121873050
		j object_get_attribute_8756121873050
		int_get_attribute_8756121873050:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121873050
		bool_get_attribute_8756121873050:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121873050
		object_get_attribute_8756121873050:
		sw $t1, 28($sp)
		end_get_attribute_8756121873050:
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD append OF EList
		lw $t0, 40($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_6
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE edges OF self
		lw $t0, 48($sp)
		lw $t1, 24($sp)
		beq $t1, $zero, object_set_attribute_8756121873427
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121873427
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121873427
		j object_set_attribute_8756121873427
		int_set_attribute_8756121873427:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121873427
		bool_set_attribute_8756121873427:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121873427
		object_set_attribute_8756121873427:
		sw $t1, 12($t0)
		end_set_attribute_8756121873427:
		
		# GET ATTRIBUTE vertices OF self
		lw $t0, 48($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121872954
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121872954
		j object_get_attribute_8756121872954
		int_get_attribute_8756121872954:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121872954
		bool_get_attribute_8756121872954:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121872954
		object_get_attribute_8756121872954:
		sw $t1, 12($sp)
		end_get_attribute_8756121872954:
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD cons OF VList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [v]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE vertices OF self
		lw $t0, 48($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8756121873011
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121873011
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121873011
		j object_set_attribute_8756121873011
		int_set_attribute_8756121873011:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121873011
		bool_set_attribute_8756121873011:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121873011
		object_set_attribute_8756121873011:
		sw $t1, 8($t0)
		end_set_attribute_8756121873011:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 44
		
		jr $ra
		
	function_print_E_at_Graph:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# GET ATTRIBUTE edges OF self
		lw $t0, 16($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121872631
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121872631
		j object_get_attribute_8756121872631
		int_get_attribute_8756121872631:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121872631
		bool_get_attribute_8756121872631:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121872631
		object_get_attribute_8756121872631:
		sw $t1, 12($sp)
		end_get_attribute_8756121872631:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD print OF EList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_print_V_at_Graph:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# GET ATTRIBUTE vertices OF self
		lw $t0, 16($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121872505
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121872505
		j object_get_attribute_8756121872505
		int_get_attribute_8756121872505:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121872505
		bool_get_attribute_8756121872505:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121872505
		object_get_attribute_8756121872505:
		sw $t1, 12($sp)
		end_get_attribute_8756121872505:
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD print OF VList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function___init___at_Vertice:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -8
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# SET ATTRIBUTE num OF self
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121871779
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121871779
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121871779
		j object_set_attribute_8756121871779
		int_set_attribute_8756121871779:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121871779
		bool_set_attribute_8756121871779:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121871779
		object_set_attribute_8756121871779:
		sw $t1, 8($t0)
		end_set_attribute_8756121871779:
		
		# ALLOCATING -> EList
		li $v0, 9
		lw $a0, type_EList
		syscall
		la $t0, type_EList
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 8($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_EList
		jal function___init___at_EList
		lw $ra, 4($sp)
		sw $v1, 8($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE out OF self
		lw $t0, 8($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121871737
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121871737
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121871737
		j object_set_attribute_8756121871737
		int_set_attribute_8756121871737:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121871737
		bool_set_attribute_8756121871737:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121871737
		object_set_attribute_8756121871737:
		sw $t1, 12($t0)
		end_set_attribute_8756121871737:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 8
		
		jr $ra
		
	function_outgoing_at_Vertice:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# GET ATTRIBUTE out OF self
		lw $t0, 4($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121871797
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121871797
		j object_get_attribute_8756121871797
		int_get_attribute_8756121871797:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121871797
		bool_get_attribute_8756121871797:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121871797
		object_get_attribute_8756121871797:
		sw $t1, 0($sp)
		end_get_attribute_8756121871797:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_number_at_Vertice:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# GET ATTRIBUTE num OF self
		lw $t0, 4($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121871686
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121871686
		j object_get_attribute_8756121871686
		int_get_attribute_8756121871686:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121871686
		bool_get_attribute_8756121871686:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121871686
		object_get_attribute_8756121871686:
		sw $t1, 0($sp)
		end_get_attribute_8756121871686:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_init_at_Vertice:
		# SET ATTRIBUTE num OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121871635
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121871635
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121871635
		j object_set_attribute_8756121871635
		int_set_attribute_8756121871635:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121871635
		bool_set_attribute_8756121871635:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121871635
		object_set_attribute_8756121871635:
		sw $t1, 8($t0)
		end_set_attribute_8756121871635:
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_add_out_at_Vertice:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# GET ATTRIBUTE out OF self
		lw $t0, 20($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121875700
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121875700
		j object_get_attribute_8756121875700
		int_get_attribute_8756121875700:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121875700
		bool_get_attribute_8756121875700:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121875700
		object_get_attribute_8756121875700:
		sw $t1, 12($sp)
		end_get_attribute_8756121875700:
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD cons OF EList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE out OF self
		lw $t0, 20($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8756121875556
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121875556
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121875556
		j object_set_attribute_8756121875556
		int_set_attribute_8756121875556:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121875556
		bool_set_attribute_8756121875556:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121875556
		object_set_attribute_8756121875556:
		sw $t1, 12($t0)
		end_set_attribute_8756121875556:
		
		lw $v1, 20($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_print_at_Vertice:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -32
		
		# GET ATTRIBUTE num OF self
		lw $t0, 32($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121875535
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121875535
		j object_get_attribute_8756121875535
		int_get_attribute_8756121875535:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121875535
		bool_get_attribute_8756121875535:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121875535
		object_get_attribute_8756121875535:
		sw $t1, 28($sp)
		end_get_attribute_8756121875535:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD out_int OF Vertice
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE out OF self
		lw $t0, 32($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121877218
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121877218
		j object_get_attribute_8756121877218
		int_get_attribute_8756121877218:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121877218
		bool_get_attribute_8756121877218:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121877218
		object_get_attribute_8756121877218:
		sw $t1, 12($sp)
		end_get_attribute_8756121877218:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD print OF EList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 32
		
		jr $ra
		
	function___init___at_Edge:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# SET ATTRIBUTE from OF self
		lw $t0, 12($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8756121877056
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121877056
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121877056
		j object_set_attribute_8756121877056
		int_set_attribute_8756121877056:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121877056
		bool_set_attribute_8756121877056:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121877056
		object_set_attribute_8756121877056:
		sw $t1, 8($t0)
		end_set_attribute_8756121877056:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# SET ATTRIBUTE to OF self
		lw $t0, 12($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121877083
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121877083
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121877083
		j object_set_attribute_8756121877083
		int_set_attribute_8756121877083:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121877083
		bool_set_attribute_8756121877083:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121877083
		object_set_attribute_8756121877083:
		sw $t1, 12($t0)
		end_set_attribute_8756121877083:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE weight OF self
		lw $t0, 12($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121877122
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121877122
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121877122
		j object_set_attribute_8756121877122
		int_set_attribute_8756121877122:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8756121877122
		bool_set_attribute_8756121877122:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8756121877122
		object_set_attribute_8756121877122:
		sw $t1, 16($t0)
		end_set_attribute_8756121877122:
		
		lw $v1, 12($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	function_init_at_Edge:
		# SET ATTRIBUTE from OF self
		lw $t0, 12($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8756121872165
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121872165
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121872165
		j object_set_attribute_8756121872165
		int_set_attribute_8756121872165:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121872165
		bool_set_attribute_8756121872165:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121872165
		object_set_attribute_8756121872165:
		sw $t1, 8($t0)
		end_set_attribute_8756121872165:
		
		# SET ATTRIBUTE to OF self
		lw $t0, 12($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121872132
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121872132
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121872132
		j object_set_attribute_8756121872132
		int_set_attribute_8756121872132:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121872132
		bool_set_attribute_8756121872132:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121872132
		object_set_attribute_8756121872132:
		sw $t1, 12($t0)
		end_set_attribute_8756121872132:
		
		# SET ATTRIBUTE weight OF self
		lw $t0, 12($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121872189
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121872189
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121872189
		j object_set_attribute_8756121872189
		int_set_attribute_8756121872189:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8756121872189
		bool_set_attribute_8756121872189:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8756121872189
		object_set_attribute_8756121872189:
		sw $t1, 16($t0)
		end_set_attribute_8756121872189:
		
		lw $v1, 12($sp)
		
		jr $ra
		
	function_print_at_Edge:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -96
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 11
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 11
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 40
		sb $t0, 9($v0)
		
		sb $zero, 10($v0)
		
		sw $v0, 92($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD out_string OF Edge
		lw $t0, 96($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE from OF self
		lw $t0, 96($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121868743
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121868743
		j object_get_attribute_8756121868743
		int_get_attribute_8756121868743:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 76($sp)
		j end_get_attribute_8756121868743
		bool_get_attribute_8756121868743:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 76($sp)
		j end_get_attribute_8756121868743
		object_get_attribute_8756121868743:
		sw $t1, 76($sp)
		end_get_attribute_8756121868743:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# GET METHOD out_int OF Edge
		lw $t0, 96($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 68($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 76($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 44
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 60($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# GET METHOD out_string OF Edge
		lw $t0, 96($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE to OF self
		lw $t0, 96($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121868662
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121868662
		j object_get_attribute_8756121868662
		int_get_attribute_8756121868662:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp)
		j end_get_attribute_8756121868662
		bool_get_attribute_8756121868662:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 44($sp)
		j end_get_attribute_8756121868662
		object_get_attribute_8756121868662:
		sw $t1, 44($sp)
		end_get_attribute_8756121868662:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# GET METHOD out_int OF Edge
		lw $t0, 96($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 36($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_15
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 41
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 28($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD out_string OF Edge
		lw $t0, 96($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_19
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE weight OF self
		lw $t0, 96($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121867412
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121867412
		j object_get_attribute_8756121867412
		int_get_attribute_8756121867412:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121867412
		bool_get_attribute_8756121867412:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121867412
		object_get_attribute_8756121867412:
		sw $t1, 12($sp)
		end_get_attribute_8756121867412:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_int OF Edge
		lw $t0, 96($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 96
		
		jr $ra
		
	function___init___at_EList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 0($sp)
		
		# SET ATTRIBUTE car OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121867340
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121867340
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121867340
		j object_set_attribute_8756121867340
		int_set_attribute_8756121867340:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121867340
		bool_set_attribute_8756121867340:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121867340
		object_set_attribute_8756121867340:
		sw $t1, 8($t0)
		end_set_attribute_8756121867340:
		
		lw $v1, 4($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_isNil_at_EList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_head_at_EList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF EList
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_2
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE car OF self
		lw $t0, 16($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121866602
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121866602
		j object_get_attribute_8756121866602
		int_get_attribute_8756121866602:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121866602
		bool_get_attribute_8756121866602:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121866602
		object_get_attribute_8756121866602:
		sw $t1, 0($sp)
		end_get_attribute_8756121866602:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_tail_at_EList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD abort OF EList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_2
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 12($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	function_cons_at_EList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> ECons
		li $v0, 9
		lw $a0, type_ECons
		syscall
		la $t0, type_ECons
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_ECons
		jal function___init___at_ECons
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD init OF ECons
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 28($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [e]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 16($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 16
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_append_at_EList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -68
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# GET METHOD isNil OF EList
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 56($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 8
		
		# internal_1 <- internal_2
		lw $t0, 56($sp)
		sw $t0, 60($sp)
		
		# IF internal_1 THEN GOTO then_8756121902141
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121902141
		
		# JUMP TO else_8756121902141
		j else_8756121902141
		
		then_8756121902141:
		
		# internal_0 <- l
		lw $t0, 68($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8756121902141
		j endif_8756121902141
		
		else_8756121902141:
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD tail OF EList
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD append OF EList
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [l]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_10
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD head OF EList
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_13
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD cons OF EList
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_16
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_0 <- internal_14
		lw $t0, 8($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8756121902141
		j endif_8756121902141
		
		endif_8756121902141:
		
		lw $v1, 64($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 68
		
		jr $ra
		
	function_print_at_EList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 12($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_string OF EList
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function___init___at_ECons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -8
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 4($sp)
		
		# SET ATTRIBUTE car OF self
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121869894
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121869894
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121869894
		j object_set_attribute_8756121869894
		int_set_attribute_8756121869894:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121869894
		bool_set_attribute_8756121869894:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121869894
		object_set_attribute_8756121869894:
		sw $t1, 8($t0)
		end_set_attribute_8756121869894:
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 0($sp)
		
		# SET ATTRIBUTE cdr OF self
		lw $t0, 8($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121869840
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121869840
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121869840
		j object_set_attribute_8756121869840
		int_set_attribute_8756121869840:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121869840
		bool_set_attribute_8756121869840:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121869840
		object_set_attribute_8756121869840:
		sw $t1, 12($t0)
		end_set_attribute_8756121869840:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 8
		
		jr $ra
		
	function_isNil_at_ECons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_head_at_ECons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# GET ATTRIBUTE car OF self
		lw $t0, 4($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121870017
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121870017
		j object_get_attribute_8756121870017
		int_get_attribute_8756121870017:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121870017
		bool_get_attribute_8756121870017:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121870017
		object_get_attribute_8756121870017:
		sw $t1, 0($sp)
		end_get_attribute_8756121870017:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_tail_at_ECons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# GET ATTRIBUTE cdr OF self
		lw $t0, 4($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121869903
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121869903
		j object_get_attribute_8756121869903
		int_get_attribute_8756121869903:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121869903
		bool_get_attribute_8756121869903:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121869903
		object_get_attribute_8756121869903:
		sw $t1, 0($sp)
		end_get_attribute_8756121869903:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_init_at_ECons:
		# SET ATTRIBUTE car OF self
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121871282
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121871282
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121871282
		j object_set_attribute_8756121871282
		int_set_attribute_8756121871282:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121871282
		bool_set_attribute_8756121871282:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121871282
		object_set_attribute_8756121871282:
		sw $t1, 8($t0)
		end_set_attribute_8756121871282:
		
		# SET ATTRIBUTE cdr OF self
		lw $t0, 8($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121871270
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121871270
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121871270
		j object_set_attribute_8756121871270
		int_set_attribute_8756121871270:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121871270
		bool_set_attribute_8756121871270:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121871270
		object_set_attribute_8756121871270:
		sw $t1, 12($t0)
		end_set_attribute_8756121871270:
		
		lw $v1, 8($sp)
		
		jr $ra
		
	function_print_at_ECons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -32
		
		# GET ATTRIBUTE car OF self
		lw $t0, 32($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121871135
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121871135
		j object_get_attribute_8756121871135
		int_get_attribute_8756121871135:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121871135
		bool_get_attribute_8756121871135:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121871135
		object_get_attribute_8756121871135:
		sw $t1, 28($sp)
		end_get_attribute_8756121871135:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD print OF Edge
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE cdr OF self
		lw $t0, 32($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121862566
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121862566
		j object_get_attribute_8756121862566
		int_get_attribute_8756121862566:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121862566
		bool_get_attribute_8756121862566:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121862566
		object_get_attribute_8756121862566:
		sw $t1, 12($sp)
		end_get_attribute_8756121862566:
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD print OF EList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 32
		
		jr $ra
		
	function___init___at_VList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 0($sp)
		
		# SET ATTRIBUTE car OF self
		lw $t0, 4($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121862416
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121862416
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121862416
		j object_set_attribute_8756121862416
		int_set_attribute_8756121862416:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121862416
		bool_set_attribute_8756121862416:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121862416
		object_set_attribute_8756121862416:
		sw $t1, 8($t0)
		end_set_attribute_8756121862416:
		
		lw $v1, 4($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_isNil_at_VList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_head_at_VList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF VList
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_2
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE car OF self
		lw $t0, 16($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121891268
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121891268
		j object_get_attribute_8756121891268
		int_get_attribute_8756121891268:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121891268
		bool_get_attribute_8756121891268:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121891268
		object_get_attribute_8756121891268:
		sw $t1, 0($sp)
		end_get_attribute_8756121891268:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_tail_at_VList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD abort OF VList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_2
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 12($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	function_cons_at_VList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> VCons
		li $v0, 9
		lw $a0, type_VCons
		syscall
		la $t0, type_VCons
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_VCons
		jal function___init___at_VCons
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD init OF VCons
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 28($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [v]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 16($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 16
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_print_at_VList:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 12($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_string OF VList
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function___init___at_VCons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -8
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 4($sp)
		
		# SET ATTRIBUTE car OF self
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121886636
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121886636
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121886636
		j object_set_attribute_8756121886636
		int_set_attribute_8756121886636:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121886636
		bool_set_attribute_8756121886636:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121886636
		object_set_attribute_8756121886636:
		sw $t1, 8($t0)
		end_set_attribute_8756121886636:
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 0($sp)
		
		# SET ATTRIBUTE cdr OF self
		lw $t0, 8($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121886468
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121886468
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121886468
		j object_set_attribute_8756121886468
		int_set_attribute_8756121886468:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121886468
		bool_set_attribute_8756121886468:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121886468
		object_set_attribute_8756121886468:
		sw $t1, 12($t0)
		end_set_attribute_8756121886468:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 8
		
		jr $ra
		
	function_isNil_at_VCons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_head_at_VCons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# GET ATTRIBUTE car OF self
		lw $t0, 4($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121886166
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121886166
		j object_get_attribute_8756121886166
		int_get_attribute_8756121886166:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121886166
		bool_get_attribute_8756121886166:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121886166
		object_get_attribute_8756121886166:
		sw $t1, 0($sp)
		end_get_attribute_8756121886166:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_tail_at_VCons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# GET ATTRIBUTE cdr OF self
		lw $t0, 4($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121886196
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121886196
		j object_get_attribute_8756121886196
		int_get_attribute_8756121886196:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121886196
		bool_get_attribute_8756121886196:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 0($sp)
		j end_get_attribute_8756121886196
		object_get_attribute_8756121886196:
		sw $t1, 0($sp)
		end_get_attribute_8756121886196:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_init_at_VCons:
		# SET ATTRIBUTE car OF self
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121886085
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121886085
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121886085
		j object_set_attribute_8756121886085
		int_set_attribute_8756121886085:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121886085
		bool_set_attribute_8756121886085:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121886085
		object_set_attribute_8756121886085:
		sw $t1, 8($t0)
		end_set_attribute_8756121886085:
		
		# SET ATTRIBUTE cdr OF self
		lw $t0, 8($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121885986
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121885986
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121885986
		j object_set_attribute_8756121885986
		int_set_attribute_8756121885986:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121885986
		bool_set_attribute_8756121885986:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121885986
		object_set_attribute_8756121885986:
		sw $t1, 12($t0)
		end_set_attribute_8756121885986:
		
		lw $v1, 8($sp)
		
		jr $ra
		
	function_print_at_VCons:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -32
		
		# GET ATTRIBUTE car OF self
		lw $t0, 32($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121883212
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121883212
		j object_get_attribute_8756121883212
		int_get_attribute_8756121883212:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121883212
		bool_get_attribute_8756121883212:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121883212
		object_get_attribute_8756121883212:
		sw $t1, 28($sp)
		end_get_attribute_8756121883212:
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD print OF Vertice
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE cdr OF self
		lw $t0, 32($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121883200
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121883200
		j object_get_attribute_8756121883200
		int_get_attribute_8756121883200:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121883200
		bool_get_attribute_8756121883200:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121883200
		object_get_attribute_8756121883200:
		sw $t1, 12($sp)
		end_get_attribute_8756121883200:
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD print OF VList
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 32
		
		jr $ra
		
	function___init___at_Parse:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -8
		
		# ALLOCATING -> BoolOp
		li $v0, 9
		lw $a0, type_BoolOp
		syscall
		la $t0, type_BoolOp
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_BoolOp
		jal function___init___at_BoolOp
		lw $ra, 4($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE boolop OF self
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121883197
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121883197
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121883197
		j object_set_attribute_8756121883197
		int_set_attribute_8756121883197:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121883197
		bool_set_attribute_8756121883197:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121883197
		object_set_attribute_8756121883197:
		sw $t1, 8($t0)
		end_set_attribute_8756121883197:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE rest OF self
		lw $t0, 8($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8756121884465
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121884465
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121884465
		j object_set_attribute_8756121884465
		int_set_attribute_8756121884465:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121884465
		bool_set_attribute_8756121884465:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121884465
		object_set_attribute_8756121884465:
		sw $t1, 12($t0)
		end_set_attribute_8756121884465:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 8
		
		jr $ra
		
	function_read_input_at_Parse:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -112
		
		# ALLOCATING -> Graph
		li $v0, 9
		lw $a0, type_Graph
		syscall
		la $t0, type_Graph
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 104($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Graph
		jal function___init___at_Graph
		lw $ra, 4($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [g]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# GET METHOD in_string OF Parse
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 92($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 88($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 96($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [line]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING NUll INTO -> internal_6
		sw $zero, 84($sp)
		
		while_start_8756121903348:
		
		# GET ATTRIBUTE boolop OF self
		lw $t0, 112($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121884221
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121884221
		j object_get_attribute_8756121884221
		int_get_attribute_8756121884221:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 80($sp)
		j end_get_attribute_8756121884221
		bool_get_attribute_8756121884221:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 80($sp)
		j end_get_attribute_8756121884221
		object_get_attribute_8756121884221:
		sw $t1, 80($sp)
		end_get_attribute_8756121884221:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 76($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [line]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [line]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD and OF BoolOp
		lw $t0, 80($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 96($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_18
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 16
		
		# IF internal_16 THEN GOTO while_body_8756121903348
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8756121903348
		
		# JUMP TO while_end_8756121903348
		j while_end_8756121903348
		
		while_body_8756121903348:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD parse_line OF Parse
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [line]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_21
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD add_vertice OF Graph
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [g]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_24
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD in_string OF Parse
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_27
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [line]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# JUMP TO while_start_8756121903348
		j while_start_8756121903348
		
		while_end_8756121903348:
		
		lw $v1, 108($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 112
		
		jr $ra
		
	function_parse_line_at_Parse:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -148
		
		# ALLOCATING -> Vertice
		li $v0, 9
		lw $a0, type_Vertice
		syscall
		la $t0, type_Vertice
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Vertice
		jal function___init___at_Vertice
		lw $ra, 4($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# GET METHOD a2i OF Parse
		lw $t0, 152($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 132($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 128($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 160($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 140($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# GET METHOD init OF Vertice
		lw $t0, 140($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 120($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 116($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 152($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 128($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 136($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [v]
		lw $t0, 156($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING NUll INTO -> internal_8
		sw $zero, 112($sp)
		
		while_start_8756121904153:
		
		# GET ATTRIBUTE rest OF self
		lw $t0, 152($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121840044
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121840044
		j object_get_attribute_8756121840044
		int_get_attribute_8756121840044:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 108($sp)
		j end_get_attribute_8756121840044
		bool_get_attribute_8756121840044:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 108($sp)
		j end_get_attribute_8756121840044
		object_get_attribute_8756121840044:
		sw $t1, 108($sp)
		end_get_attribute_8756121840044:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# GET METHOD length OF String
		lw $t0, 108($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 100($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 96($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_12
		lw $t0, 104($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# IF internal_16 THEN GOTO while_body_8756121904153
		lw $t0, 80($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8756121904153
		
		# JUMP TO while_end_8756121904153
		j while_end_8756121904153
		
		while_body_8756121904153:
		
		# GET ATTRIBUTE rest OF self
		lw $t0, 152($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121840237
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121840237
		j object_get_attribute_8756121840237
		int_get_attribute_8756121840237:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8756121840237
		bool_get_attribute_8756121840237:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8756121840237
		object_get_attribute_8756121840237:
		sw $t1, 72($sp)
		end_get_attribute_8756121840237:
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD a2i OF Parse
		lw $t0, 152($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_21
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [succ]
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE rest OF self
		lw $t0, 152($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121840348
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121840348
		j object_get_attribute_8756121840348
		int_get_attribute_8756121840348:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 52($sp)
		j end_get_attribute_8756121840348
		bool_get_attribute_8756121840348:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 52($sp)
		j end_get_attribute_8756121840348
		object_get_attribute_8756121840348:
		sw $t1, 52($sp)
		end_get_attribute_8756121840348:
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET METHOD a2i OF Parse
		lw $t0, 152($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_23]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_26
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [weight]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_24]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> Edge
		li $v0, 9
		lw $a0, type_Edge
		syscall
		la $t0, type_Edge
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_27]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Edge
		jal function___init___at_Edge
		lw $ra, 4($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD number OF Vertice
		lw $t0, 144($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [v]
		lw $t0, 152($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_30
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD init OF Edge
		lw $t0, 36($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -20
		sw $ra, 16($sp)
		
		# ARGUMENT [internal_27]
		lw $t0, 56($sp)
		sw $t0, 12($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 52($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [succ]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [weight]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_33
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 16($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 20
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD add_out OF Vertice
		lw $t0, 144($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [v]
		lw $t0, 156($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_36
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# JUMP TO while_start_8756121904153
		j while_start_8756121904153
		
		while_end_8756121904153:
		
		lw $v1, 144($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 148
		
		jr $ra
		
	function_c2i_at_Parse:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -216
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 48
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 204($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 216($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 200($sp)
		sw $t0, 208($sp)
		
		# IF internal_1 THEN GOTO then_8756121904327
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121904327
		
		# JUMP TO else_8756121904327
		j else_8756121904327
		
		then_8756121904327:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# internal_0 <- internal_4
		lw $t0, 196($sp)
		sw $t0, 212($sp)
		
		# JUMP TO endif_8756121904327
		j endif_8756121904327
		
		else_8756121904327:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 188($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 49
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 184($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_8
		lw $t0, 180($sp)
		sw $t0, 188($sp)
		
		# IF internal_6 THEN GOTO then_8756121904912
		lw $t0, 188($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121904912
		
		# JUMP TO else_8756121904912
		j else_8756121904912
		
		then_8756121904912:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# internal_5 <- internal_9
		lw $t0, 176($sp)
		sw $t0, 192($sp)
		
		# JUMP TO endif_8756121904912
		j endif_8756121904912
		
		else_8756121904912:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 50
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 164($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 176($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_13
		lw $t0, 160($sp)
		sw $t0, 168($sp)
		
		# IF internal_11 THEN GOTO then_8756121904975
		lw $t0, 168($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121904975
		
		# JUMP TO else_8756121904975
		j else_8756121904975
		
		then_8756121904975:
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# internal_10 <- internal_14
		lw $t0, 156($sp)
		sw $t0, 172($sp)
		
		# JUMP TO endif_8756121904975
		j endif_8756121904975
		
		else_8756121904975:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 148($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 51
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 144($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_18
		lw $t0, 140($sp)
		sw $t0, 148($sp)
		
		# IF internal_16 THEN GOTO then_8756121905029
		lw $t0, 148($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905029
		
		# JUMP TO else_8756121905029
		j else_8756121905029
		
		then_8756121905029:
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# internal_15 <- internal_19
		lw $t0, 136($sp)
		sw $t0, 152($sp)
		
		# JUMP TO endif_8756121905029
		j endif_8756121905029
		
		else_8756121905029:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 52
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 124($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 136($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# internal_21 <- internal_23
		lw $t0, 120($sp)
		sw $t0, 128($sp)
		
		# IF internal_21 THEN GOTO then_8756121905083
		lw $t0, 128($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905083
		
		# JUMP TO else_8756121905083
		j else_8756121905083
		
		then_8756121905083:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# internal_20 <- internal_24
		lw $t0, 116($sp)
		sw $t0, 132($sp)
		
		# JUMP TO endif_8756121905083
		j endif_8756121905083
		
		else_8756121905083:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 53
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 104($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_27]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# internal_26 <- internal_28
		lw $t0, 100($sp)
		sw $t0, 108($sp)
		
		# IF internal_26 THEN GOTO then_8756121905137
		lw $t0, 108($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905137
		
		# JUMP TO else_8756121905137
		j else_8756121905137
		
		then_8756121905137:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# internal_25 <- internal_29
		lw $t0, 96($sp)
		sw $t0, 112($sp)
		
		# JUMP TO endif_8756121905137
		j endif_8756121905137
		
		else_8756121905137:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 54
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 84($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_31 <- internal_33
		lw $t0, 80($sp)
		sw $t0, 88($sp)
		
		# IF internal_31 THEN GOTO then_8756121905963
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905963
		
		# JUMP TO else_8756121905963
		j else_8756121905963
		
		then_8756121905963:
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# internal_30 <- internal_34
		lw $t0, 76($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8756121905963
		j endif_8756121905963
		
		else_8756121905963:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 55
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_37]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_36 <- internal_38
		lw $t0, 60($sp)
		sw $t0, 68($sp)
		
		# IF internal_36 THEN GOTO then_8756121906017
		lw $t0, 68($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121906017
		
		# JUMP TO else_8756121906017
		j else_8756121906017
		
		then_8756121906017:
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# internal_35 <- internal_39
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8756121906017
		j endif_8756121906017
		
		else_8756121906017:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 56
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_42]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_41 <- internal_43
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# IF internal_41 THEN GOTO then_8756121906071
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121906071
		
		# JUMP TO else_8756121906071
		j else_8756121906071
		
		then_8756121906071:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# internal_40 <- internal_44
		lw $t0, 36($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8756121906071
		j endif_8756121906071
		
		else_8756121906071:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 57
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [char]
		lw $t0, 228($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_46 <- internal_48
		lw $t0, 20($sp)
		sw $t0, 28($sp)
		
		# IF internal_46 THEN GOTO then_8756121906125
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121906125
		
		# JUMP TO else_8756121906125
		j else_8756121906125
		
		then_8756121906125:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# internal_45 <- internal_49
		lw $t0, 16($sp)
		sw $t0, 32($sp)
		
		# JUMP TO endif_8756121906125
		j endif_8756121906125
		
		else_8756121906125:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF Parse
		lw $t0, 220($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_52
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_45 <- internal_53
		lw $t0, 0($sp)
		sw $t0, 32($sp)
		
		# JUMP TO endif_8756121906125
		j endif_8756121906125
		
		endif_8756121906125:
		
		# internal_40 <- internal_45
		lw $t0, 32($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8756121906071
		j endif_8756121906071
		
		endif_8756121906071:
		
		# internal_35 <- internal_40
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# JUMP TO endif_8756121906017
		j endif_8756121906017
		
		endif_8756121906017:
		
		# internal_30 <- internal_35
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8756121905963
		j endif_8756121905963
		
		endif_8756121905963:
		
		# internal_25 <- internal_30
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# JUMP TO endif_8756121905137
		j endif_8756121905137
		
		endif_8756121905137:
		
		# internal_20 <- internal_25
		lw $t0, 112($sp)
		sw $t0, 132($sp)
		
		# JUMP TO endif_8756121905083
		j endif_8756121905083
		
		endif_8756121905083:
		
		# internal_15 <- internal_20
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# JUMP TO endif_8756121905029
		j endif_8756121905029
		
		endif_8756121905029:
		
		# internal_10 <- internal_15
		lw $t0, 152($sp)
		sw $t0, 172($sp)
		
		# JUMP TO endif_8756121904975
		j endif_8756121904975
		
		endif_8756121904975:
		
		# internal_5 <- internal_10
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# JUMP TO endif_8756121904912
		j endif_8756121904912
		
		endif_8756121904912:
		
		# internal_0 <- internal_5
		lw $t0, 192($sp)
		sw $t0, 212($sp)
		
		# JUMP TO endif_8756121904327
		j endif_8756121904327
		
		endif_8756121904327:
		
		lw $v1, 212($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 216
		
		jr $ra
		
	function_a2i_at_Parse:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -224
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 208($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 204($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 212($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 220($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 224($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 212($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 208($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_6
		lw $t0, 196($sp)
		sw $t0, 216($sp)
		
		# IF internal_1 THEN GOTO then_8756121905044
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905044
		
		# JUMP TO else_8756121905044
		j else_8756121905044
		
		then_8756121905044:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# internal_0 <- internal_7
		lw $t0, 192($sp)
		sw $t0, 220($sp)
		
		# JUMP TO endif_8756121905044
		j endif_8756121905044
		
		else_8756121905044:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 168($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 164($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 196($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 192($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_14
		lw $t0, 180($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 45
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 160($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		# internal_9 <- internal_16
		lw $t0, 156($sp)
		sw $t0, 184($sp)
		
		# IF internal_9 THEN GOTO then_8756121905062
		lw $t0, 184($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905062
		
		# JUMP TO else_8756121905062
		j else_8756121905062
		
		then_8756121905062:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_20
		lw $t0, 148($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_21]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 124($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 120($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 168($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_25
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# GET METHOD a2i_aux OF Parse
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_23]
		lw $t0, 140($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_28
		lw $t0, 120($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 128($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# ALLOCATING INT -> 4294967295
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4294967295
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_26]
		lw $t0, 128($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_xor
		jal function_xor
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- internal_31
		lw $t0, 96($sp)
		sw $t0, 188($sp)
		
		# JUMP TO endif_8756121905062
		j endif_8756121905062
		
		else_8756121905062:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_34]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_35]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_38
		lw $t0, 84($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_36]
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_39]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# internal_33 <- internal_40
		lw $t0, 60($sp)
		sw $t0, 88($sp)
		
		# IF internal_33 THEN GOTO then_8756121905945
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905945
		
		# JUMP TO else_8756121905945
		j else_8756121905945
		
		then_8756121905945:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD length OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_44
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_42]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD substr OF String
		lw $t0, 224($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 240($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_41]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_46]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_49
		lw $t0, 40($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# GET METHOD a2i OF Parse
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 16($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_52
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_32 <- internal_50
		lw $t0, 20($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8756121905945
		j endif_8756121905945
		
		else_8756121905945:
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD a2i_aux OF Parse
		lw $t0, 228($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 236($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_55
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_32 <- internal_53
		lw $t0, 8($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8756121905945
		j endif_8756121905945
		
		endif_8756121905945:
		
		# internal_8 <- internal_32
		lw $t0, 92($sp)
		sw $t0, 188($sp)
		
		# JUMP TO endif_8756121905062
		j endif_8756121905062
		
		endif_8756121905062:
		
		# internal_0 <- internal_8
		lw $t0, 188($sp)
		sw $t0, 220($sp)
		
		# JUMP TO endif_8756121905044
		j endif_8756121905044
		
		endif_8756121905044:
		
		lw $v1, 220($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 224
		
		jr $ra
		
	function_a2i_aux_at_Parse:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -248
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 240($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [int]
		lw $t0, 256($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 252($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 256($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 228($sp)
		
		# GET METHOD length OF String
		lw $t0, 248($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 228($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 224($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 232($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [j]
		lw $t0, 248($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 248($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 232($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING NUll INTO -> internal_8
		sw $zero, 212($sp)
		
		while_start_8756121905737:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [j]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 220($sp)
		addi $sp, $sp, 12
		
		# IF internal_9 THEN GOTO while_body_8756121905737
		lw $t0, 208($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8756121905737
		
		# JUMP TO while_end_8756121905737
		j while_end_8756121905737
		
		while_body_8756121905737:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 200($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# GET METHOD substr OF String
		lw $t0, 248($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 192($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 188($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 264($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 236($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 216($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_14
		lw $t0, 204($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 16
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [c]
		lw $t0, 216($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 208($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 216($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 180($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 176($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [c]
		lw $t0, 216($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 188($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 184($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_18
		lw $t0, 172($sp)
		sw $t0, 180($sp)
		
		# IF internal_16 THEN GOTO then_8756121907210
		lw $t0, 180($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121907210
		
		# JUMP TO else_8756121907210
		j else_8756121907210
		
		then_8756121907210:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 180($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# GET METHOD length OF String
		lw $t0, 248($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 156($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 152($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 160($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_21]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_24]
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# GET METHOD substr OF String
		lw $t0, 248($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 132($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 128($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 264($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 180($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_26]
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_29
		lw $t0, 144($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 16
		
		# SET ATTRIBUTE rest OF self
		lw $t0, 252($sp)
		lw $t1, 136($sp)
		beq $t1, $zero, object_set_attribute_8756121814803
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121814803
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121814803
		j object_set_attribute_8756121814803
		int_set_attribute_8756121814803:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121814803
		bool_set_attribute_8756121814803:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121814803
		object_set_attribute_8756121814803:
		sw $t1, 12($t0)
		end_set_attribute_8756121814803:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [j]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 232($sp)
		addi $sp, $sp, 12
		
		# internal_15 <- i
		lw $t0, 220($sp)
		sw $t0, 184($sp)
		
		# JUMP TO endif_8756121907210
		j endif_8756121907210
		
		else_8756121907210:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 44
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 116($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [c]
		lw $t0, 216($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 128($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 124($sp)
		addi $sp, $sp, 12
		
		# internal_31 <- internal_33
		lw $t0, 112($sp)
		sw $t0, 120($sp)
		
		# IF internal_31 THEN GOTO then_8756121907327
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121907327
		
		# JUMP TO else_8756121907327
		j else_8756121907327
		
		then_8756121907327:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_34]
		lw $t0, 120($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 116($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# GET METHOD length OF String
		lw $t0, 248($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 96($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [s]
		lw $t0, 256($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_38
		lw $t0, 100($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_36]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_39]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_40]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET METHOD substr OF String
		lw $t0, 248($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 264($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [internal_35]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_41]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_44
		lw $t0, 84($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 16
		
		# SET ATTRIBUTE rest OF self
		lw $t0, 252($sp)
		lw $t1, 76($sp)
		beq $t1, $zero, object_set_attribute_8756121815700
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121815700
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121815700
		j object_set_attribute_8756121815700
		int_set_attribute_8756121815700:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121815700
		bool_set_attribute_8756121815700:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121815700
		object_set_attribute_8756121815700:
		sw $t1, 12($t0)
		end_set_attribute_8756121815700:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [j]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 232($sp)
		addi $sp, $sp, 12
		
		# internal_30 <- i
		lw $t0, 220($sp)
		sw $t0, 124($sp)
		
		# JUMP TO endif_8756121907327
		j endif_8756121907327
		
		else_8756121907327:
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [int]
		lw $t0, 256($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD substr OF String
		lw $t0, 248($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [s]
		lw $t0, 264($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 236($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_50
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# GET METHOD c2i OF Parse
		lw $t0, 252($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 36($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 264($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_48]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_53
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_46]
		lw $t0, 72($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [int]
		lw $t0, 256($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_54]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 256($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_55]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_56]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 232($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [j]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_58 <- internal_59
		lw $t0, 8($sp)
		sw $t0, 12($sp)
		
		# IF internal_58 THEN GOTO then_8756121907806
		lw $t0, 12($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121907806
		
		# JUMP TO else_8756121907806
		j else_8756121907806
		
		then_8756121907806:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 4($sp)
		
		# SET ATTRIBUTE rest OF self
		lw $t0, 252($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8756121816869
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121816869
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121816869
		j object_set_attribute_8756121816869
		int_set_attribute_8756121816869:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121816869
		bool_set_attribute_8756121816869:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121816869
		object_set_attribute_8756121816869:
		sw $t1, 12($t0)
		end_set_attribute_8756121816869:
		
		# internal_57 <- internal_60
		lw $t0, 4($sp)
		sw $t0, 16($sp)
		
		# JUMP TO endif_8756121907806
		j endif_8756121907806
		
		else_8756121907806:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 0($sp)
		
		# internal_57 <- internal_61
		lw $t0, 0($sp)
		sw $t0, 16($sp)
		
		# JUMP TO endif_8756121907806
		j endif_8756121907806
		
		endif_8756121907806:
		
		# internal_30 <- internal_57
		lw $t0, 16($sp)
		sw $t0, 124($sp)
		
		# JUMP TO endif_8756121907327
		j endif_8756121907327
		
		endif_8756121907327:
		
		# internal_15 <- internal_30
		lw $t0, 124($sp)
		sw $t0, 184($sp)
		
		# JUMP TO endif_8756121907210
		j endif_8756121907210
		
		endif_8756121907210:
		
		# JUMP TO while_start_8756121905737
		j while_start_8756121905737
		
		while_end_8756121905737:
		
		lw $v1, 244($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 248
		
		jr $ra
		
	function___init___at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -20
		
		# ALLOCATING -> BoolOp
		li $v0, 9
		lw $a0, type_BoolOp
		syscall
		la $t0, type_BoolOp
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_BoolOp
		jal function___init___at_BoolOp
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE boolop OF self
		lw $t0, 20($sp)
		lw $t1, 16($sp)
		beq $t1, $zero, object_set_attribute_8756121814185
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121814185
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121814185
		j object_set_attribute_8756121814185
		int_set_attribute_8756121814185:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121814185
		bool_set_attribute_8756121814185:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8756121814185
		object_set_attribute_8756121814185:
		sw $t1, 8($t0)
		end_set_attribute_8756121814185:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 12($sp)
		
		# SET ATTRIBUTE rest OF self
		lw $t0, 20($sp)
		lw $t1, 12($sp)
		beq $t1, $zero, object_set_attribute_8756121816944
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121816944
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121816944
		j object_set_attribute_8756121816944
		int_set_attribute_8756121816944:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121816944
		bool_set_attribute_8756121816944:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8756121816944
		object_set_attribute_8756121816944:
		sw $t1, 12($t0)
		end_set_attribute_8756121816944:
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD read_input OF Main
		lw $t0, 20($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# SET ATTRIBUTE g OF self
		lw $t0, 20($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8756121816965
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8756121816965
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8756121816965
		j object_set_attribute_8756121816965
		int_set_attribute_8756121816965:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8756121816965
		bool_set_attribute_8756121816965:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8756121816965
		object_set_attribute_8756121816965:
		sw $t1, 16($t0)
		end_set_attribute_8756121816965:
		
		lw $v1, 20($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 20
		
		jr $ra
		
	function_main_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -32
		
		# GET ATTRIBUTE g OF self
		lw $t0, 32($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121817052
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121817052
		j object_get_attribute_8756121817052
		int_get_attribute_8756121817052:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121817052
		bool_get_attribute_8756121817052:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8756121817052
		object_get_attribute_8756121817052:
		sw $t1, 28($sp)
		end_get_attribute_8756121817052:
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# GET METHOD print_V OF Graph
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 20($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 24($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE g OF self
		lw $t0, 32($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8756121817878
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8756121817878
		j object_get_attribute_8756121817878
		int_get_attribute_8756121817878:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121817878
		bool_get_attribute_8756121817878:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8756121817878
		object_get_attribute_8756121817878:
		sw $t1, 12($sp)
		end_get_attribute_8756121817878:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD print_E OF Graph
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 32
		
		jr $ra
		
	function___init___at_BoolOp:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_and_at_BoolOp:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# internal_1 <- b1
		lw $t0, 16($sp)
		sw $t0, 4($sp)
		
		# IF internal_1 THEN GOTO then_8756121905668
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905668
		
		# JUMP TO else_8756121905668
		j else_8756121905668
		
		then_8756121905668:
		
		# internal_0 <- b2
		lw $t0, 12($sp)
		sw $t0, 8($sp)
		
		# JUMP TO endif_8756121905668
		j endif_8756121905668
		
		else_8756121905668:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_0 <- internal_2
		lw $t0, 0($sp)
		sw $t0, 8($sp)
		
		# JUMP TO endif_8756121905668
		j endif_8756121905668
		
		endif_8756121905668:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	function_or_at_BoolOp:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# internal_1 <- b1
		lw $t0, 16($sp)
		sw $t0, 4($sp)
		
		# IF internal_1 THEN GOTO then_8756121905758
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8756121905758
		
		# JUMP TO else_8756121905758
		j else_8756121905758
		
		then_8756121905758:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_0 <- internal_2
		lw $t0, 0($sp)
		sw $t0, 8($sp)
		
		# JUMP TO endif_8756121905758
		j endif_8756121905758
		
		else_8756121905758:
		
		# internal_0 <- b2
		lw $t0, 12($sp)
		sw $t0, 8($sp)
		
		# JUMP TO endif_8756121905758
		j endif_8756121905758
		
		endif_8756121905758:
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# EXIT!
		li $v0, 10
		syscall
		
		