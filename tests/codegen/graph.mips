.data
div_zero: .asciiz "Runtime Error: Division by zero"
dispatch_void: .asciiz "Runtime Error: A dispatch with void"
case_void: .asciiz "Runtime Error: A case with void"
case_no_match: .asciiz "Runtime Error: Execution of a case statement without a matching branch"
heap: .asciiz "Runtime Error: Heap overflow"
substr: .asciiz "Runtime Error: Index for substring out of range"
input_str: .space 2048
void: .word 0
Object_name: .asciiz "Object"
Object_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
Int_name: .asciiz "Int"
Int_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
String_name: .asciiz "String"
String_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word String.length
.word String.concat
.word String.substr
Bool_name: .asciiz "Bool"
Bool_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
Graph_name: .asciiz "Graph"
Graph_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word Graph.add_vertice
.word Graph.print_E
.word Graph.print_V
Vertice_name: .asciiz "Vertice"
Vertice_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Vertice.outgoing
.word Vertice.number
.word Vertice.init
.word Vertice.add_out
.word Vertice.print
Edge_name: .asciiz "Edge"
Edge_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Edge.init
.word Edge.print
EList_name: .asciiz "EList"
EList_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word EList.isNil
.word EList.head
.word EList.tail
.word EList.cons
.word EList.append
.word EList.print
ECons_name: .asciiz "ECons"
ECons_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word ECons.isNil
.word ECons.head
.word ECons.tail
.word EList.cons
.word EList.append
.word ECons.print
.word ECons.init
VList_name: .asciiz "VList"
VList_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word VList.isNil
.word VList.head
.word VList.tail
.word VList.cons
.word VList.print
VCons_name: .asciiz "VCons"
VCons_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word VCons.isNil
.word VCons.head
.word VCons.tail
.word VList.cons
.word VCons.print
.word VCons.init
Parse_name: .asciiz "Parse"
Parse_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Parse.read_input
.word Parse.parse_line
.word Parse.c2i
.word Parse.a2i
.word Parse.a2i_aux
Main_name: .asciiz "Main"
Main_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Parse.read_input
.word Parse.parse_line
.word Parse.c2i
.word Parse.a2i
.word Parse.a2i_aux
.word Main.main
BoolOp_name: .asciiz "BoolOp"
BoolOp_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word BoolOp.and
.word BoolOp.or
msg_0: .asciiz "Abort called from class "
msg_1: .asciiz "
"
empty_str: .asciiz ""
msg_3: .asciiz " ("
msg_4: .asciiz ","
msg_5: .asciiz ")"
msg_6: .asciiz "0"
msg_7: .asciiz "1"
msg_8: .asciiz "2"
msg_9: .asciiz "3"
msg_10: .asciiz "4"
msg_11: .asciiz "5"
msg_12: .asciiz "6"
msg_13: .asciiz "7"
msg_14: .asciiz "8"
msg_15: .asciiz "9"
msg_16: .asciiz "-"
msg_17: .asciiz " "
.text
div_zero_error:
la $a0, div_zero
li $v0, 4
syscall
li $v0, 10
syscall
dispatch_void_error:
la $a0, dispatch_void
li $v0, 4
syscall
li $v0, 10
syscall
case_void_error:
la $a0, case_void
li $v0, 4
syscall
li $v0, 10
syscall
case_no_match_error:
la $a0, case_no_match
li $v0, 4
syscall
li $v0, 10
syscall
heap_error:
la $a0, heap
li $v0, 4
syscall
li $v0, 10
syscall
substr_error:
la $a0, substr
li $v0, 4
syscall
li $v0, 10
syscall
main:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 7:tag Main:Class_name 7:Class_size
li $a0, 28
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 7
sw $t1, 0($t0)
la $t1, Main_name
sw $t1, 4($t0)
li $t1, 7
sw $t1, 8($t0)
la $t1, Main_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Main_init
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main_init
sw $a1, 8($sp)
#CallNode Main.main
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main.main
sw $a1, 8($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Object_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Object.abort:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_0
la $t0, msg_0
sw $t0, 4($sp)
#PrintString msg_0
lw $a0, 4($sp)
li $v0, 4
syscall
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 8($sp)
#PrintString class_name_1
lw $a0, 8($sp)
li $v0, 4
syscall
#LoadStr msg_1
la $t0, msg_1
sw $t0, 12($sp)
#PrintString eol_2
lw $a0, 12($sp)
li $v0, 4
syscall
#Abort
li $v0, 10
syscall
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.type_name:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg class_name_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.copy:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#Copy self
lw $t0, 8($sp)
lw $a0, 8($t0)
mul $a0, $a0, 4
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t1, $v0
li $a0, 0
lw $t3, 8($t0)
copy_object:
lw $t2, 0($t0)
sw $t2, 0($t1)
addi $t0, $t0, 4
addi $t1, $t1, 4
addi $a0, $a0, 1
blt $a0, $t3, copy_object
sw $v0, 4($sp)
#Return object_copy_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
IO_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
IO.out_string:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = String.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintString v_0
lw $a0, 4($sp)
li $v0, 4
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.out_int:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = Int.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintInteger v_0
li $v0, 1
lw $a0, 4($sp)
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.in_string:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadString read_string_0
la $a0, input_str
li $a1, 2048
li $v0, 8
syscall
move $t0, $a0
read_char:
li $t1, 0
lb $t1, 0($t0)
beqz $t1, remove_characters_str_end
addi $t0, $t0, 1
j read_char
remove_characters_str_end:
addi $t0, $t0, -1
li $t1, 0
lb $t1, 0($t0)
bne $t1, 10, rcs_end
sb $0, 0($t0)
addi $t0, $t0, -1
lb $t1, 0($t0)
bne $t1, 13, rcs_end
sb $0, 0($t0)
j remove_characters_str_end
rcs_end:
sw $a0, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg read_string_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
IO.in_int:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadInteger read_int_0
li $v0, 5
syscall
sw $v0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg read_int_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Int_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Intvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Stringvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String.length:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Length of self
lw $t0, 16($sp)
lw $t0, 16($t0)
li $a0, 0
count:
lb $t1, 0($t0)
beqz $t1, end
addi $t0, $t0, 1
addi $a0, $a0, 1
j count
end:
sw $a0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg length_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
String.concat:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#CallNode String.length
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 8($sp)
#GetAttr str2_2 = String.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#CallNode String.length
move $t0, $sp
# Arg s
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 16($sp)
#GetAttr len1_value_4 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr len2_value_5 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#Concat str1_0 str2_2
lw $a0, 20($sp)
lw $t0, 24($sp)
add $a0, $a0, $t0
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t3, $v0
lw $t0, 4($sp)
lw $t1, 12($sp)
copy_str:
lb $t2, 0($t0)
sb $t2, 0($v0)
beqz $t2, concat_str
addi $t0, $t0, 1
addi $v0, $v0, 1
j copy_str
concat_str:
lb $t2, 0($t1)
sb $t2, 0($v0)
beqz $t2, end_concat_str
addi $t1, $t1, 1
addi $v0, $v0, 1
j concat_str
end_concat_str:
sb $0, ($v0)
sw $t3, 28($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg result_string_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#Return instance_7
lw $a1, 32($sp)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
String.substr:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr i_value_0 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr l_value_1 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Substr self:string i_value_0:index l_value_1:length
lw $a0, 8($sp)
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
lw $t0, 4($sp)
lw $t1, 8($sp)
lw $t4, 24($sp)
lw $t2, 16($t4)
bltz $t0, substr_error
li $a0, 0
skip_char:
beq $a0, $t0, end_skip
addi $a0, $a0, 1
addi $t2, $t2, 1
beq $t2, $zero, substr_error
j skip_char
end_skip:
li $a0, 0
move $t3, $v0
substr_copy:
beq $a0, $t1, end_substr_copy
li $t0, 0
lb $t0, 0($t2)
sb $t0, 0($v0)
addi $t2, $t2, 1
beq $t2, $zero, substr_error
addi $v0, $v0, 1
addi $a0, $a0, 1
j substr_copy
end_substr_copy:
sb $0, ($v0)
sw $t3, 12($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode String_init
move $t0, $sp
# Arg substr_result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 20($sp)
#Return instance_3
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Bool_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Boolvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_equals:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr str2_1 = String.value
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#StringEquals str1_0 = str2_1
lw $t1, 4($sp)
lw $t2, 8($sp)
compare_str:
li $t3, 0
lb $t3, 0($t1)
li $t4, 0
lb $t4, 0($t2)
seq $a0, $t3, $t4
beqz $a0, end_compare_str
beqz $t3, end_compare_str
beqz $t4, end_compare_str
addi $t1, $t1, 1
addi $t2, $t2, 1
j compare_str
end_compare_str:
sw $a0, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Graph_init:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Object_init
move $t0, $sp
# Arg self
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Object_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 5:tag VList:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, VList_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, VList_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode VList_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal VList_init
sw $a1, 12($sp)
#SetAttr Graphvertices = result_1
lw $t0, 24($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Allocate 4:tag EList:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, EList_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, EList_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode EList_init
move $t0, $sp
# Arg result_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal EList_init
sw $a1, 20($sp)
#SetAttr Graphedges = result_3
lw $t0, 24($sp)
lw $t1, 16($sp)
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 28
jr $ra
Graph.add_vertice:
addi $sp, $sp, -28
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall outgoing
move $t0, $sp
# Arg v
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 36($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 8($sp)
#GetAttr Graph.edges = Graph.edges
lw $t0, 32($sp)
lw $t1, 20($t0)
sw $t1, 12($sp)
#VCall append
move $t0, $sp
# Arg Graph.edges
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 4($sp)
#SetAttr Graphedges = result_0
lw $t0, 32($sp)
lw $t1, 4($sp)
sw $t1, 20($t0)
#GetAttr Graph.vertices = Graph.vertices
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#VCall cons
move $t0, $sp
# Arg v
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg Graph.vertices
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 24($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 20($sp)
#SetAttr Graphvertices = result_4
lw $t0, 32($sp)
lw $t1, 20($sp)
sw $t1, 16($t0)
#Return result_4
lw $a1, 20($sp)
lw $ra, 0($sp)
addi $sp, $sp, 40
jr $ra
Graph.print_E:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Graph.edges = Graph.edges
lw $t0, 12($sp)
lw $t1, 20($t0)
sw $t1, 8($sp)
#VCall print
move $t0, $sp
# Arg Graph.edges
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
Graph.print_V:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Graph.vertices = Graph.vertices
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#VCall print
move $t0, $sp
# Arg Graph.vertices
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
Vertice_init:
addi $sp, $sp, -24
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 0
li $t0, 0
sw $t0, 12($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 16($sp)
#SetAttr Verticenum = instance_1
lw $t0, 28($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Allocate 4:tag EList:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, EList_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, EList_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#CallNode EList_init
move $t0, $sp
# Arg result_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal EList_init
sw $a1, 24($sp)
#SetAttr Verticeout = result_4
lw $t0, 28($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 32
jr $ra
Vertice.outgoing:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Vertice.out = Vertice.out
lw $t0, 8($sp)
lw $t1, 20($t0)
sw $t1, 4($sp)
#Return Vertice.out
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Vertice.number:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Vertice.num = Vertice.num
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#Return Vertice.num
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Vertice.init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Verticenum = n
lw $t0, 8($sp)
lw $t1, 12($sp)
sw $t1, 16($t0)
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
Vertice.add_out:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Vertice.out = Vertice.out
lw $t0, 16($sp)
lw $t1, 20($t0)
sw $t1, 8($sp)
#VCall cons
move $t0, $sp
# Arg s
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg Vertice.out
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 4($sp)
#SetAttr Verticeout = result_0
lw $t0, 16($sp)
lw $t1, 4($sp)
sw $t1, 20($t0)
#Return self
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Vertice.print:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Vertice.num = Vertice.num
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#VCall out_int
move $t0, $sp
# Arg Vertice.num
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 4($sp)
#GetAttr Vertice.out = Vertice.out
lw $t0, 20($sp)
lw $t1, 20($t0)
sw $t1, 16($sp)
#VCall print
move $t0, $sp
# Arg Vertice.out
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Edge_init:
addi $sp, $sp, -40
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 0
li $t0, 0
sw $t0, 12($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 16($sp)
#SetAttr Edgefrom = instance_1
lw $t0, 44($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#LoadInt 0
li $t0, 0
sw $t0, 24($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 28($sp)
#SetAttr Edgeto = instance_4
lw $t0, 44($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#LoadInt 0
li $t0, 0
sw $t0, 36($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 40($sp)
#SetAttr Edgeweight = instance_7
lw $t0, 44($sp)
lw $t1, 32($sp)
sw $t1, 24($t0)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
Edge.init:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Edgefrom = f
lw $t0, 16($sp)
lw $t1, 20($sp)
sw $t1, 16($t0)
#SetAttr Edgeto = t
lw $t0, 16($sp)
lw $t1, 24($sp)
sw $t1, 20($t0)
#SetAttr Edgeweight = w
lw $t0, 16($sp)
lw $t1, 28($sp)
sw $t1, 24($t0)
#Return self
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 32
jr $ra
Edge.print:
addi $sp, $sp, -72
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_3
la $t0, msg_3
sw $t0, 8($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 12($sp)
#CallNode String_init
move $t0, $sp
# Arg l_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 16($sp)
#VCall out_string
move $t0, $sp
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 76($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 4($sp)
#GetAttr Edge.from = Edge.from
lw $t0, 76($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#VCall out_int
move $t0, $sp
# Arg Edge.from
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 76($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 20($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 32($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 36($sp)
#CallNode String_init
move $t0, $sp
# Arg l_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 40($sp)
#VCall out_string
move $t0, $sp
# Arg instance_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 76($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 28($sp)
#GetAttr Edge.to = Edge.to
lw $t0, 76($sp)
lw $t1, 20($t0)
sw $t1, 48($sp)
#VCall out_int
move $t0, $sp
# Arg Edge.to
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 76($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 44($sp)
#LoadStr msg_5
la $t0, msg_5
sw $t0, 56($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode String_init
move $t0, $sp
# Arg l_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 64($sp)
#VCall out_string
move $t0, $sp
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 76($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 52($sp)
#GetAttr Edge.weight = Edge.weight
lw $t0, 76($sp)
lw $t1, 24($t0)
sw $t1, 72($sp)
#VCall out_int
move $t0, $sp
# Arg Edge.weight
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 76($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 68($sp)
#Return result_16
lw $a1, 68($sp)
lw $ra, 0($sp)
addi $sp, $sp, 80
jr $ra
EList_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr EListcar = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 16($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
EList.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 1
li $t0, 1
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
EList.head:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#GetAttr EList.car = EList.car
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Return EList.car
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
EList.tail:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
EList.cons:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 5:tag ECons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, ECons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, ECons_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode ECons_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal ECons_init
sw $a1, 12($sp)
#VCall init
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg e
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 52($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
EList.append:
addi $sp, $sp, -24
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall isNil
move $t0, $sp
# Arg self
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 28($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 8($sp)
# IFGoto result_1 -> label_1
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_1
#VCall tail
move $t0, $sp
# Arg self
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 28($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 36($t2)
jal $t3
sw $a1, 20($sp)
#VCall append
move $t0, $sp
# Arg l
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 16($sp)
#VCall head
move $t0, $sp
# Arg self
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 28($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 24($sp)
#VCall cons
move $t0, $sp
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 12($sp)
#AssignNode result_0 = result_2
lw $t1, 12($sp)
sw $t1, 4($sp)
#Goto label_2
b label_2
#LabelNode label_1
label_1:
#AssignNode result_0 = l
lw $t1, 32($sp)
sw $t1, 4($sp)
#LabelNode label_2
label_2:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
EList.print:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 8($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 12($sp)
#CallNode String_init
move $t0, $sp
# Arg l_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 16($sp)
#VCall out_string
move $t0, $sp
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
ECons_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode EList_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal EList_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr EConscdr = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
ECons.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
ECons.head:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr ECons.car = ECons.car
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#Return ECons.car
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
ECons.tail:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr ECons.cdr = ECons.cdr
lw $t0, 8($sp)
lw $t1, 20($t0)
sw $t1, 4($sp)
#Return ECons.cdr
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
ECons.init:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr EConscar = e
lw $t0, 12($sp)
lw $t1, 16($sp)
sw $t1, 16($t0)
#SetAttr EConscdr = rest
lw $t0, 12($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#Return self
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
ECons.print:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr ECons.car = ECons.car
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#VCall print
move $t0, $sp
# Arg ECons.car
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 4($sp)
#GetAttr ECons.cdr = ECons.cdr
lw $t0, 20($sp)
lw $t1, 20($t0)
sw $t1, 16($sp)
#VCall print
move $t0, $sp
# Arg ECons.cdr
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
VList_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr VListcar = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 16($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
VList.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 1
li $t0, 1
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
VList.head:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#GetAttr VList.car = VList.car
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Return VList.car
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
VList.tail:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
VList.cons:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 6:tag VCons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 6
sw $t1, 0($t0)
la $t1, VCons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, VCons_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode VCons_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal VCons_init
sw $a1, 12($sp)
#VCall init
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg v
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
VList.print:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 8($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 12($sp)
#CallNode String_init
move $t0, $sp
# Arg l_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 16($sp)
#VCall out_string
move $t0, $sp
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
VCons_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode VList_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal VList_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr VConscdr = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
VCons.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
VCons.head:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr VCons.car = VCons.car
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#Return VCons.car
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
VCons.tail:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr VCons.cdr = VCons.cdr
lw $t0, 8($sp)
lw $t1, 20($t0)
sw $t1, 4($sp)
#Return VCons.cdr
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
VCons.init:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr VConscar = v
lw $t0, 12($sp)
lw $t1, 16($sp)
sw $t1, 16($t0)
#SetAttr VConscdr = rest
lw $t0, 12($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#Return self
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
VCons.print:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr VCons.car = VCons.car
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#VCall print
move $t0, $sp
# Arg VCons.car
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 4($sp)
#GetAttr VCons.cdr = VCons.cdr
lw $t0, 20($sp)
lw $t1, 20($t0)
sw $t1, 16($sp)
#VCall print
move $t0, $sp
# Arg VCons.cdr
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Parse_init:
addi $sp, $sp, -24
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 6:tag BoolOp:Class_name 4:Class_size
li $a0, 16
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 6
sw $t1, 0($t0)
la $t1, BoolOp_name
sw $t1, 4($t0)
li $t1, 4
sw $t1, 8($t0)
la $t1, BoolOp_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode BoolOp_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal BoolOp_init
sw $a1, 12($sp)
#SetAttr Parseboolop = result_1
lw $t0, 28($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 20($sp)
#CallNode String_init
move $t0, $sp
# Arg value_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 24($sp)
#SetAttr Parserest = instance_3
lw $t0, 28($sp)
lw $t1, 16($sp)
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 32
jr $ra
Parse.read_input:
addi $sp, $sp, -152
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 5:tag Graph:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Graph_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Graph_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Graph_init
move $t0, $sp
# Arg result_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Graph_init
sw $a1, 8($sp)
#AssignNode g_2 = result_0
lw $t1, 4($sp)
sw $t1, 12($sp)
#VCall in_string
move $t0, $sp
# Arg self
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 156($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 16($sp)
#AssignNode line_4 = result_3
lw $t1, 16($sp)
sw $t1, 20($sp)
#LabelNode label_3
label_3:
#GetAttr Parse.boolop = Parse.boolop
lw $t0, 156($sp)
lw $t1, 16($t0)
sw $t1, 32($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 64($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#CallNode String_init
move $t0, $sp
# Arg l_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 72($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg line_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 52($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 76($sp)
#GetAttr l_10 = Bool.value
lw $t0, 48($sp)
lw $t1, 16($t0)
sw $t1, 44($sp)
#UnaryOperator not l_10
lw $t1, 44($sp)
xor $a0, $t1, 1
sw $a0, 40($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 36($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 80($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 112($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 116($sp)
#CallNode String_init
move $t0, $sp
# Arg l_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 120($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg line_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 100($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 96($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 124($sp)
#GetAttr l_22 = Bool.value
lw $t0, 96($sp)
lw $t1, 16($t0)
sw $t1, 92($sp)
#UnaryOperator not l_22
lw $t1, 92($sp)
xor $a0, $t1, 1
sw $a0, 88($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 84($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 128($sp)
#VCall and
move $t0, $sp
# Arg result_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg Parse.boolop
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 32($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 28($sp)
# IFGoto result_6 -> label_4
lw $t0, 28($sp)
lw $a0, 16($t0)
bnez $a0, label_4
#Goto label_5
b label_5
#LabelNode label_4
label_4:
#VCall parse_line
move $t0, $sp
# Arg line_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 156($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 136($sp)
#VCall add_vertice
move $t0, $sp
# Arg result_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg g_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 132($sp)
#VCall in_string
move $t0, $sp
# Arg self
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 156($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 140($sp)
#AssignNode line_4 = result_34
lw $t1, 140($sp)
sw $t1, 20($sp)
#Goto label_3
b label_3
#LabelNode label_5
label_5:
#AssignNode result_36 = result_5
lw $t1, 24($sp)
sw $t1, 148($sp)
#AssignNode result_37 = g_2
lw $t1, 12($sp)
sw $t1, 152($sp)
#Return result_37
lw $a1, 152($sp)
lw $ra, 0($sp)
addi $sp, $sp, 160
jr $ra
Parse.parse_line:
addi $sp, $sp, -136
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 2:tag Vertice:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, Vertice_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Vertice_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Vertice_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Vertice_init
sw $a1, 12($sp)
#VCall a2i
move $t0, $sp
# Arg s
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 16($sp)
#VCall init
move $t0, $sp
# Arg result_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 36($t2)
jal $t3
sw $a1, 4($sp)
#AssignNode v_4 = result_0
lw $t1, 4($sp)
sw $t1, 20($sp)
#LabelNode label_6
label_6:
#GetAttr Parse.rest = Parse.rest
lw $t0, 140($sp)
lw $t1, 20($t0)
sw $t1, 100($sp)
#VCall length
move $t0, $sp
# Arg Parse.rest
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 100($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 56($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 64($sp)
#LoadInt 0
li $t0, 0
sw $t0, 68($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 72($sp)
#GetAttr left_11 = Int.value
lw $t0, 56($sp)
lw $t1, 16($t0)
sw $t1, 48($sp)
#GetAttr right_12 = Int.value
lw $t0, 64($sp)
lw $t1, 16($t0)
sw $t1, 52($sp)
#BinaryOperator left_11 = right_12
lw $a0, 48($sp)
lw $t1, 52($sp)
seq $a0, $a0, $t1
sw $a0, 44($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 40($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 76($sp)
#GetAttr l_8 = Bool.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#UnaryOperator not l_8
lw $t1, 36($sp)
xor $a0, $t1, 1
sw $a0, 32($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 80($sp)
# IFGoto result_6 -> label_7
lw $t0, 28($sp)
lw $a0, 16($t0)
bnez $a0, label_7
#Goto label_8
b label_8
#LabelNode label_7
label_7:
#GetAttr Parse.rest = Parse.rest
lw $t0, 140($sp)
lw $t1, 20($t0)
sw $t1, 100($sp)
#VCall a2i
move $t0, $sp
# Arg Parse.rest
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 84($sp)
#AssignNode succ_22 = result_20
lw $t1, 84($sp)
sw $t1, 92($sp)
#GetAttr Parse.rest = Parse.rest
lw $t0, 140($sp)
lw $t1, 20($t0)
sw $t1, 100($sp)
#VCall a2i
move $t0, $sp
# Arg Parse.rest
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 96($sp)
#AssignNode weight_25 = result_23
lw $t1, 96($sp)
sw $t1, 104($sp)
#Allocate 3:tag Edge:Class_name 7:Class_size
li $a0, 28
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Edge_name
sw $t1, 4($t0)
li $t1, 7
sw $t1, 8($t0)
la $t1, Edge_methods
sw $t1, 12($t0)
sw $t0, 116($sp)
#CallNode Edge_init
move $t0, $sp
# Arg result_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Edge_init
sw $a1, 120($sp)
#VCall number
move $t0, $sp
# Arg v_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 124($sp)
#VCall init
move $t0, $sp
# Arg weight_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg succ_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 116($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 112($sp)
#VCall add_out
move $t0, $sp
# Arg result_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg v_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 108($sp)
#AssignNode result_31 = result_26
lw $t1, 108($sp)
sw $t1, 128($sp)
#AssignNode result_32 = result_31
lw $t1, 128($sp)
sw $t1, 132($sp)
#Goto label_6
b label_6
#LabelNode label_8
label_8:
#AssignNode result_33 = v_4
lw $t1, 20($sp)
sw $t1, 136($sp)
#Return result_33
lw $a1, 136($sp)
lw $ra, 0($sp)
addi $sp, $sp, 148
jr $ra
Parse.c2i:
addi $sp, $sp, -496
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_6
la $t0, msg_6
sw $t0, 24($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode String_init
move $t0, $sp
# Arg l_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 32($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 36($sp)
# IFGoto result_1 -> label_9
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_9
#LoadStr msg_7
la $t0, msg_7
sw $t0, 60($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 64($sp)
#CallNode String_init
move $t0, $sp
# Arg l_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 68($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 48($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 72($sp)
# IFGoto result_10 -> label_10
lw $t0, 44($sp)
lw $a0, 16($t0)
bnez $a0, label_10
#LoadStr msg_8
la $t0, msg_8
sw $t0, 96($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode String_init
move $t0, $sp
# Arg l_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 104($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 84($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 80($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 108($sp)
# IFGoto result_19 -> label_11
lw $t0, 80($sp)
lw $a0, 16($t0)
bnez $a0, label_11
#LoadStr msg_9
la $t0, msg_9
sw $t0, 132($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 136($sp)
#CallNode String_init
move $t0, $sp
# Arg l_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 140($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 120($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 116($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 144($sp)
# IFGoto result_28 -> label_12
lw $t0, 116($sp)
lw $a0, 16($t0)
bnez $a0, label_12
#LoadStr msg_10
la $t0, msg_10
sw $t0, 168($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 172($sp)
#CallNode String_init
move $t0, $sp
# Arg l_41
lw $t1, 168($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_42
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 176($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_42
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 156($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 152($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_38
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_37
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 180($sp)
# IFGoto result_37 -> label_13
lw $t0, 152($sp)
lw $a0, 16($t0)
bnez $a0, label_13
#LoadStr msg_11
la $t0, msg_11
sw $t0, 204($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 208($sp)
#CallNode String_init
move $t0, $sp
# Arg l_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_51
lw $t1, 208($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 212($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_51
lw $t1, 208($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 192($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 188($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_47
lw $t1, 192($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_46
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 216($sp)
# IFGoto result_46 -> label_14
lw $t0, 188($sp)
lw $a0, 16($t0)
bnez $a0, label_14
#LoadStr msg_12
la $t0, msg_12
sw $t0, 240($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 244($sp)
#CallNode String_init
move $t0, $sp
# Arg l_59
lw $t1, 240($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_60
lw $t1, 244($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 248($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_60
lw $t1, 244($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 228($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 224($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_56
lw $t1, 228($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_55
lw $t1, 224($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 252($sp)
# IFGoto result_55 -> label_15
lw $t0, 224($sp)
lw $a0, 16($t0)
bnez $a0, label_15
#LoadStr msg_13
la $t0, msg_13
sw $t0, 276($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 280($sp)
#CallNode String_init
move $t0, $sp
# Arg l_68
lw $t1, 276($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_69
lw $t1, 280($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 284($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_69
lw $t1, 280($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 264($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 260($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_65
lw $t1, 264($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_64
lw $t1, 260($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 288($sp)
# IFGoto result_64 -> label_16
lw $t0, 260($sp)
lw $a0, 16($t0)
bnez $a0, label_16
#LoadStr msg_14
la $t0, msg_14
sw $t0, 312($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 316($sp)
#CallNode String_init
move $t0, $sp
# Arg l_77
lw $t1, 312($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_78
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 320($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_78
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 300($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 296($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_74
lw $t1, 300($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_73
lw $t1, 296($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 324($sp)
# IFGoto result_73 -> label_17
lw $t0, 296($sp)
lw $a0, 16($t0)
bnez $a0, label_17
#LoadStr msg_15
la $t0, msg_15
sw $t0, 348($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 352($sp)
#CallNode String_init
move $t0, $sp
# Arg l_86
lw $t1, 348($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_87
lw $t1, 352($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 356($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_87
lw $t1, 352($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg char
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 336($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 332($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_83
lw $t1, 336($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_82
lw $t1, 332($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 360($sp)
# IFGoto result_82 -> label_18
lw $t0, 332($sp)
lw $a0, 16($t0)
bnez $a0, label_18
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 500($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 500($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 364($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 368($sp)
#LoadInt 0
li $t0, 0
sw $t0, 372($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_92
lw $t1, 372($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_91
lw $t1, 368($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 376($sp)
#AssignNode result_81 = instance_91
lw $t1, 368($sp)
sw $t1, 328($sp)
#Goto label_19
b label_19
#LabelNode label_18
label_18:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 380($sp)
#LoadInt 9
li $t0, 9
sw $t0, 384($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_95
lw $t1, 384($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_94
lw $t1, 380($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 388($sp)
#AssignNode result_81 = instance_94
lw $t1, 380($sp)
sw $t1, 328($sp)
#LabelNode label_19
label_19:
#AssignNode result_72 = result_81
lw $t1, 328($sp)
sw $t1, 292($sp)
#Goto label_20
b label_20
#LabelNode label_17
label_17:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 392($sp)
#LoadInt 8
li $t0, 8
sw $t0, 396($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_98
lw $t1, 396($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_97
lw $t1, 392($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 400($sp)
#AssignNode result_72 = instance_97
lw $t1, 392($sp)
sw $t1, 292($sp)
#LabelNode label_20
label_20:
#AssignNode result_63 = result_72
lw $t1, 292($sp)
sw $t1, 256($sp)
#Goto label_21
b label_21
#LabelNode label_16
label_16:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 404($sp)
#LoadInt 7
li $t0, 7
sw $t0, 408($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_101
lw $t1, 408($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_100
lw $t1, 404($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 412($sp)
#AssignNode result_63 = instance_100
lw $t1, 404($sp)
sw $t1, 256($sp)
#LabelNode label_21
label_21:
#AssignNode result_54 = result_63
lw $t1, 256($sp)
sw $t1, 220($sp)
#Goto label_22
b label_22
#LabelNode label_15
label_15:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 416($sp)
#LoadInt 6
li $t0, 6
sw $t0, 420($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_104
lw $t1, 420($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_103
lw $t1, 416($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 424($sp)
#AssignNode result_54 = instance_103
lw $t1, 416($sp)
sw $t1, 220($sp)
#LabelNode label_22
label_22:
#AssignNode result_45 = result_54
lw $t1, 220($sp)
sw $t1, 184($sp)
#Goto label_23
b label_23
#LabelNode label_14
label_14:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 428($sp)
#LoadInt 5
li $t0, 5
sw $t0, 432($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_107
lw $t1, 432($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_106
lw $t1, 428($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 436($sp)
#AssignNode result_45 = instance_106
lw $t1, 428($sp)
sw $t1, 184($sp)
#LabelNode label_23
label_23:
#AssignNode result_36 = result_45
lw $t1, 184($sp)
sw $t1, 148($sp)
#Goto label_24
b label_24
#LabelNode label_13
label_13:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 440($sp)
#LoadInt 4
li $t0, 4
sw $t0, 444($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_110
lw $t1, 444($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_109
lw $t1, 440($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 448($sp)
#AssignNode result_36 = instance_109
lw $t1, 440($sp)
sw $t1, 148($sp)
#LabelNode label_24
label_24:
#AssignNode result_27 = result_36
lw $t1, 148($sp)
sw $t1, 112($sp)
#Goto label_25
b label_25
#LabelNode label_12
label_12:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 452($sp)
#LoadInt 3
li $t0, 3
sw $t0, 456($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_113
lw $t1, 456($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_112
lw $t1, 452($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 460($sp)
#AssignNode result_27 = instance_112
lw $t1, 452($sp)
sw $t1, 112($sp)
#LabelNode label_25
label_25:
#AssignNode result_18 = result_27
lw $t1, 112($sp)
sw $t1, 76($sp)
#Goto label_26
b label_26
#LabelNode label_11
label_11:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 464($sp)
#LoadInt 2
li $t0, 2
sw $t0, 468($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_116
lw $t1, 468($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_115
lw $t1, 464($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 472($sp)
#AssignNode result_18 = instance_115
lw $t1, 464($sp)
sw $t1, 76($sp)
#LabelNode label_26
label_26:
#AssignNode result_9 = result_18
lw $t1, 76($sp)
sw $t1, 40($sp)
#Goto label_27
b label_27
#LabelNode label_10
label_10:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 476($sp)
#LoadInt 1
li $t0, 1
sw $t0, 480($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_119
lw $t1, 480($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_118
lw $t1, 476($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 484($sp)
#AssignNode result_9 = instance_118
lw $t1, 476($sp)
sw $t1, 40($sp)
#LabelNode label_27
label_27:
#AssignNode result_0 = result_9
lw $t1, 40($sp)
sw $t1, 4($sp)
#Goto label_28
b label_28
#LabelNode label_9
label_9:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 488($sp)
#LoadInt 0
li $t0, 0
sw $t0, 492($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_122
lw $t1, 492($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_121
lw $t1, 488($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 496($sp)
#AssignNode result_0 = instance_121
lw $t1, 488($sp)
sw $t1, 4($sp)
#LabelNode label_28
label_28:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 508
jr $ra
Parse.a2i:
addi $sp, $sp, -312
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall length
move $t0, $sp
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 320($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 24($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#LoadInt 0
li $t0, 0
sw $t0, 32($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 36($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 = right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
seq $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 40($sp)
# IFGoto result_1 -> label_29
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_29
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#LoadInt 1
li $t0, 1
sw $t0, 72($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 76($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 80($sp)
#LoadInt 0
li $t0, 0
sw $t0, 84($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 88($sp)
#VCall substr
move $t0, $sp
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 320($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 64($sp)
#LoadStr msg_16
la $t0, msg_16
sw $t0, 92($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 96($sp)
#CallNode String_init
move $t0, $sp
# Arg l_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 100($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 52($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 104($sp)
# IFGoto result_11 -> label_30
lw $t0, 48($sp)
lw $a0, 16($t0)
bnez $a0, label_30
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 132($sp)
#LoadInt 1
li $t0, 1
sw $t0, 136($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 140($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 144($sp)
#LoadInt 0
li $t0, 0
sw $t0, 148($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 152($sp)
#VCall substr
move $t0, $sp
# Arg instance_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 320($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 128($sp)
#LoadStr msg_17
la $t0, msg_17
sw $t0, 156($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 160($sp)
#CallNode String_init
move $t0, $sp
# Arg l_38
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 164($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_31
lw $t1, 128($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 116($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 112($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 168($sp)
# IFGoto result_27 -> label_31
lw $t0, 112($sp)
lw $a0, 16($t0)
bnez $a0, label_31
#VCall a2i_aux
move $t0, $sp
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 316($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 172($sp)
#AssignNode result_26 = result_42
lw $t1, 172($sp)
sw $t1, 108($sp)
#Goto label_32
b label_32
#LabelNode label_31
label_31:
#VCall length
move $t0, $sp
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 320($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 200($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 204($sp)
#LoadInt 1
li $t0, 1
sw $t0, 208($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_51
lw $t1, 208($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 212($sp)
#GetAttr left_47 = Int.value
lw $t0, 200($sp)
lw $t1, 16($t0)
sw $t1, 192($sp)
#GetAttr right_48 = Int.value
lw $t0, 204($sp)
lw $t1, 16($t0)
sw $t1, 196($sp)
#BinaryOperator left_47 - right_48
lw $a0, 192($sp)
lw $t1, 196($sp)
sub $a0, $a0, $t1
sw $a0, 188($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 184($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_46
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_45
lw $t1, 184($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 216($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 220($sp)
#LoadInt 1
li $t0, 1
sw $t0, 224($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_55
lw $t1, 224($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 228($sp)
#VCall substr
move $t0, $sp
# Arg result_45
lw $t1, 184($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 320($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 180($sp)
#VCall a2i
move $t0, $sp
# Arg result_44
lw $t1, 180($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 316($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 176($sp)
#AssignNode result_26 = result_43
lw $t1, 176($sp)
sw $t1, 108($sp)
#LabelNode label_32
label_32:
#AssignNode result_10 = result_26
lw $t1, 108($sp)
sw $t1, 44($sp)
#Goto label_33
b label_33
#LabelNode label_30
label_30:
#VCall length
move $t0, $sp
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 320($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 268($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 272($sp)
#LoadInt 1
li $t0, 1
sw $t0, 276($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_68
lw $t1, 276($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_67
lw $t1, 272($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 280($sp)
#GetAttr left_64 = Int.value
lw $t0, 268($sp)
lw $t1, 16($t0)
sw $t1, 260($sp)
#GetAttr right_65 = Int.value
lw $t0, 272($sp)
lw $t1, 16($t0)
sw $t1, 264($sp)
#BinaryOperator left_64 - right_65
lw $a0, 260($sp)
lw $t1, 264($sp)
sub $a0, $a0, $t1
sw $a0, 256($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 252($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_63
lw $t1, 256($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_62
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 284($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 288($sp)
#LoadInt 1
li $t0, 1
sw $t0, 292($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_72
lw $t1, 292($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_71
lw $t1, 288($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 296($sp)
#VCall substr
move $t0, $sp
# Arg result_62
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_71
lw $t1, 288($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 320($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 248($sp)
#VCall a2i_aux
move $t0, $sp
# Arg result_61
lw $t1, 248($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 316($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 244($sp)
#GetAttr l_59 = Int.value
lw $t0, 244($sp)
lw $t1, 16($t0)
sw $t1, 240($sp)
#UnaryOperator ~ l_59
lw $t1, 240($sp)
neg $a0, $t1
sw $a0, 236($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 232($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_58
lw $t1, 236($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_57
lw $t1, 232($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 300($sp)
#AssignNode result_10 = result_57
lw $t1, 232($sp)
sw $t1, 44($sp)
#LabelNode label_33
label_33:
#AssignNode result_0 = result_10
lw $t1, 44($sp)
sw $t1, 4($sp)
#Goto label_34
b label_34
#LabelNode label_29
label_29:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 304($sp)
#LoadInt 0
li $t0, 0
sw $t0, 308($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_76
lw $t1, 308($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_75
lw $t1, 304($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 312($sp)
#AssignNode result_0 = instance_75
lw $t1, 304($sp)
sw $t1, 4($sp)
#LabelNode label_34
label_34:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 324
jr $ra
Parse.a2i_aux:
addi $sp, $sp, -536
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#AssignNode int_3 = instance_0
lw $t1, 4($sp)
sw $t1, 16($sp)
#VCall length
move $t0, $sp
# Arg s
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 20($sp)
#AssignNode j_5 = result_4
lw $t1, 20($sp)
sw $t1, 24($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#LoadInt 0
li $t0, 0
sw $t0, 32($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 36($sp)
#AssignNode i_9 = instance_6
lw $t1, 28($sp)
sw $t1, 40($sp)
#LabelNode label_35
label_35:
#GetAttr left_13 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 56($sp)
#GetAttr right_14 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 60($sp)
#BinaryOperator left_13 < right_14
lw $a0, 56($sp)
lw $t1, 60($sp)
slt $a0, $a0, $t1
sw $a0, 52($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 64($sp)
# IFGoto result_11 -> label_36
lw $t0, 48($sp)
lw $a0, 16($t0)
bnez $a0, label_36
#Goto label_37
b label_37
#LabelNode label_36
label_36:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 72($sp)
#LoadInt 1
li $t0, 1
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 80($sp)
#VCall substr
move $t0, $sp
# Arg instance_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg i_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 68($sp)
#AssignNode c_20 = result_16
lw $t1, 68($sp)
sw $t1, 84($sp)
#LoadStr msg_17
la $t0, msg_17
sw $t0, 108($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 112($sp)
#CallNode String_init
move $t0, $sp
# Arg l_26
lw $t1, 108($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 116($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg c_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 96($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 92($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 120($sp)
# IFGoto result_22 -> label_38
lw $t0, 92($sp)
lw $a0, 16($t0)
bnez $a0, label_38
#LoadStr msg_4
la $t0, msg_4
sw $t0, 144($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 148($sp)
#CallNode String_init
move $t0, $sp
# Arg l_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 152($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg c_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 132($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 128($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_31
lw $t1, 128($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 156($sp)
# IFGoto result_31 -> label_39
lw $t0, 128($sp)
lw $a0, 16($t0)
bnez $a0, label_39
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 192($sp)
#LoadInt 10
li $t0, 10
sw $t0, 196($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_48
lw $t1, 196($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_47
lw $t1, 192($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 200($sp)
#GetAttr left_45 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 184($sp)
#GetAttr right_46 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 188($sp)
#BinaryOperator left_45 * right_46
lw $a0, 184($sp)
lw $t1, 188($sp)
mul $a0, $a0, $t1
sw $a0, 180($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 176($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_44
lw $t1, 180($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_43
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 204($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 216($sp)
#LoadInt 1
li $t0, 1
sw $t0, 220($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_53
lw $t1, 216($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 224($sp)
#VCall substr
move $t0, $sp
# Arg instance_53
lw $t1, 216($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg i_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 212($sp)
#VCall c2i
move $t0, $sp
# Arg result_52
lw $t1, 212($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 540($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 540($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 36($t2)
jal $t3
sw $a1, 208($sp)
#GetAttr left_41 = Int.value
lw $t0, 176($sp)
lw $t1, 16($t0)
sw $t1, 168($sp)
#GetAttr right_42 = Int.value
lw $t0, 208($sp)
lw $t1, 16($t0)
sw $t1, 172($sp)
#BinaryOperator left_41 + right_42
lw $a0, 168($sp)
lw $t1, 172($sp)
add $a0, $a0, $t1
sw $a0, 164($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 160($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 228($sp)
#AssignNode int_3 = result_39
lw $t1, 160($sp)
sw $t1, 16($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 252($sp)
#LoadInt 1
li $t0, 1
sw $t0, 256($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_63
lw $t1, 256($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_62
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 260($sp)
#GetAttr left_60 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 244($sp)
#GetAttr right_61 = Int.value
lw $t0, 252($sp)
lw $t1, 16($t0)
sw $t1, 248($sp)
#BinaryOperator left_60 + right_61
lw $a0, 244($sp)
lw $t1, 248($sp)
add $a0, $a0, $t1
sw $a0, 240($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 236($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_59
lw $t1, 240($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_58
lw $t1, 236($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 264($sp)
#AssignNode i_9 = result_58
lw $t1, 236($sp)
sw $t1, 40($sp)
#GetAttr left_70 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 284($sp)
#GetAttr right_71 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 288($sp)
#BinaryOperator left_70 = right_71
lw $a0, 284($sp)
lw $t1, 288($sp)
seq $a0, $a0, $t1
sw $a0, 280($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 276($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_69
lw $t1, 280($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_68
lw $t1, 276($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 292($sp)
# IFGoto result_68 -> label_40
lw $t0, 276($sp)
lw $a0, 16($t0)
bnez $a0, label_40
#LoadStr empty_str
la $t0, empty_str
sw $t0, 296($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 300($sp)
#CallNode String_init
move $t0, $sp
# Arg l_73
lw $t1, 296($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_74
lw $t1, 300($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 304($sp)
#AssignNode result_67 = instance_74
lw $t1, 300($sp)
sw $t1, 272($sp)
#Goto label_41
b label_41
#LabelNode label_40
label_40:
#LoadStr empty_str
la $t0, empty_str
sw $t0, 308($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 312($sp)
#CallNode String_init
move $t0, $sp
# Arg l_76
lw $t1, 308($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_77
lw $t1, 312($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 316($sp)
#SetAttr Parserest = instance_77
lw $t0, 540($sp)
lw $t1, 312($sp)
sw $t1, 20($t0)
#AssignNode result_67 = instance_77
lw $t1, 312($sp)
sw $t1, 272($sp)
#LabelNode label_41
label_41:
#AssignNode result_30 = result_67
lw $t1, 272($sp)
sw $t1, 124($sp)
#Goto label_42
b label_42
#LabelNode label_39
label_39:
#VCall length
move $t0, $sp
# Arg s
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 360($sp)
#GetAttr left_87 = Int.value
lw $t0, 360($sp)
lw $t1, 16($t0)
sw $t1, 352($sp)
#GetAttr right_88 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 356($sp)
#BinaryOperator left_87 - right_88
lw $a0, 352($sp)
lw $t1, 356($sp)
sub $a0, $a0, $t1
sw $a0, 348($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 344($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_86
lw $t1, 348($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_85
lw $t1, 344($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 364($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 368($sp)
#LoadInt 1
li $t0, 1
sw $t0, 372($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_92
lw $t1, 372($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_91
lw $t1, 368($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 376($sp)
#GetAttr left_83 = Int.value
lw $t0, 344($sp)
lw $t1, 16($t0)
sw $t1, 336($sp)
#GetAttr right_84 = Int.value
lw $t0, 368($sp)
lw $t1, 16($t0)
sw $t1, 340($sp)
#BinaryOperator left_83 - right_84
lw $a0, 336($sp)
lw $t1, 340($sp)
sub $a0, $a0, $t1
sw $a0, 332($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 328($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_82
lw $t1, 332($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_81
lw $t1, 328($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 380($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 400($sp)
#LoadInt 1
li $t0, 1
sw $t0, 404($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_100
lw $t1, 404($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_99
lw $t1, 400($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 408($sp)
#GetAttr left_97 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 392($sp)
#GetAttr right_98 = Int.value
lw $t0, 400($sp)
lw $t1, 16($t0)
sw $t1, 396($sp)
#BinaryOperator left_97 + right_98
lw $a0, 392($sp)
lw $t1, 396($sp)
add $a0, $a0, $t1
sw $a0, 388($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 384($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_96
lw $t1, 388($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_95
lw $t1, 384($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 412($sp)
#VCall substr
move $t0, $sp
# Arg result_81
lw $t1, 328($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_95
lw $t1, 384($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 324($sp)
#SetAttr Parserest = result_80
lw $t0, 540($sp)
lw $t1, 324($sp)
sw $t1, 20($t0)
#AssignNode i_9 = j_5
lw $t1, 24($sp)
sw $t1, 40($sp)
#AssignNode result_30 = j_5
lw $t1, 24($sp)
sw $t1, 124($sp)
#LabelNode label_42
label_42:
#AssignNode result_21 = result_30
lw $t1, 124($sp)
sw $t1, 88($sp)
#Goto label_43
b label_43
#LabelNode label_38
label_38:
#VCall length
move $t0, $sp
# Arg s
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 460($sp)
#GetAttr left_112 = Int.value
lw $t0, 460($sp)
lw $t1, 16($t0)
sw $t1, 452($sp)
#GetAttr right_113 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 456($sp)
#BinaryOperator left_112 - right_113
lw $a0, 452($sp)
lw $t1, 456($sp)
sub $a0, $a0, $t1
sw $a0, 448($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 444($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_111
lw $t1, 448($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_110
lw $t1, 444($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 464($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 468($sp)
#LoadInt 1
li $t0, 1
sw $t0, 472($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_117
lw $t1, 472($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_116
lw $t1, 468($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 476($sp)
#GetAttr left_108 = Int.value
lw $t0, 444($sp)
lw $t1, 16($t0)
sw $t1, 436($sp)
#GetAttr right_109 = Int.value
lw $t0, 468($sp)
lw $t1, 16($t0)
sw $t1, 440($sp)
#BinaryOperator left_108 - right_109
lw $a0, 436($sp)
lw $t1, 440($sp)
sub $a0, $a0, $t1
sw $a0, 432($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 428($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_107
lw $t1, 432($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_106
lw $t1, 428($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 480($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 500($sp)
#LoadInt 1
li $t0, 1
sw $t0, 504($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_125
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_124
lw $t1, 500($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 508($sp)
#GetAttr left_122 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 492($sp)
#GetAttr right_123 = Int.value
lw $t0, 500($sp)
lw $t1, 16($t0)
sw $t1, 496($sp)
#BinaryOperator left_122 + right_123
lw $a0, 492($sp)
lw $t1, 496($sp)
add $a0, $a0, $t1
sw $a0, 488($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 484($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_121
lw $t1, 488($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_120
lw $t1, 484($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 512($sp)
#VCall substr
move $t0, $sp
# Arg result_106
lw $t1, 428($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_120
lw $t1, 484($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg s
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 424($sp)
#SetAttr Parserest = result_105
lw $t0, 540($sp)
lw $t1, 424($sp)
sw $t1, 20($t0)
#AssignNode i_9 = j_5
lw $t1, 24($sp)
sw $t1, 40($sp)
#AssignNode result_21 = j_5
lw $t1, 24($sp)
sw $t1, 88($sp)
#LabelNode label_43
label_43:
#AssignNode result_130 = result_21
lw $t1, 88($sp)
sw $t1, 524($sp)
#Goto label_35
b label_35
#LabelNode label_37
label_37:
#AssignNode result_131 = result_10
lw $t1, 44($sp)
sw $t1, 528($sp)
#AssignNode result_132 = result_131
lw $t1, 528($sp)
sw $t1, 532($sp)
#AssignNode result_133 = int_3
lw $t1, 16($sp)
sw $t1, 536($sp)
#Return result_133
lw $a1, 536($sp)
lw $ra, 0($sp)
addi $sp, $sp, 548
jr $ra
Main_init:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Parse_init
move $t0, $sp
# Arg self
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Parse_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#VCall read_input
move $t0, $sp
# Arg self
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 8($sp)
#SetAttr Maing = result_1
lw $t0, 12($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
Main.main:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Main.g = Main.g
lw $t0, 20($sp)
lw $t1, 24($t0)
sw $t1, 16($sp)
#VCall print_V
move $t0, $sp
# Arg Main.g
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 4($sp)
#GetAttr Main.g = Main.g
lw $t0, 20($sp)
lw $t1, 24($t0)
sw $t1, 16($sp)
#VCall print_E
move $t0, $sp
# Arg Main.g
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
BoolOp_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Object_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Object_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
BoolOp.and:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
# IFGoto b1 -> label_44
lw $t0, 24($sp)
lw $a0, 16($t0)
bnez $a0, label_44
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 0
li $t0, 0
sw $t0, 12($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 16($sp)
#AssignNode result_0 = instance_1
lw $t1, 8($sp)
sw $t1, 4($sp)
#Goto label_45
b label_45
#LabelNode label_44
label_44:
#AssignNode result_0 = b2
lw $t1, 28($sp)
sw $t1, 4($sp)
#LabelNode label_45
label_45:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 32
jr $ra
BoolOp.or:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
# IFGoto b1 -> label_46
lw $t0, 24($sp)
lw $a0, 16($t0)
bnez $a0, label_46
#AssignNode result_0 = b2
lw $t1, 28($sp)
sw $t1, 4($sp)
#Goto label_47
b label_47
#LabelNode label_46
label_46:
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 1
li $t0, 1
sw $t0, 12($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 16($sp)
#AssignNode result_0 = instance_1
lw $t1, 8($sp)
sw $t1, 4($sp)
#LabelNode label_47
label_47:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 32
jr $ra