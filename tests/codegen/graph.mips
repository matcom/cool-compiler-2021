.data
			Int_name:     .asciiz      "Int"
			Int_size:     .word     16
__virtual_table__Int:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			String_name:     .asciiz      "String"
			String_size:     .word     16
__virtual_table__String:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_length_at_String
			 .word function_concat_at_String
			 .word function_substr_at_String
			Bool_name:     .asciiz      "Bool"
			Bool_size:     .word     16
__virtual_table__Bool:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			Object_name:     .asciiz      "Object"
			Object_size:     .word     12
__virtual_table__Object:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			IO_name:     .asciiz      "IO"
			IO_size:     .word     12
__virtual_table__IO:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			Graph_name:     .asciiz      "Graph"
			Graph_size:     .word     20
__virtual_table__Graph:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_add_vertice_at_Graph
			 .word function_print_E_at_Graph
			 .word function_print_V_at_Graph
			Vertice_name:     .asciiz      "Vertice"
			Vertice_size:     .word     20
__virtual_table__Vertice:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_outgoing_at_Vertice
			 .word function_number_at_Vertice
			 .word function_init_at_Vertice
			 .word function_add_out_at_Vertice
			 .word function_print_at_Vertice
			Edge_name:     .asciiz      "Edge"
			Edge_size:     .word     24
__virtual_table__Edge:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_init_at_Edge
			 .word function_print_at_Edge
			EList_name:     .asciiz      "EList"
			EList_size:     .word     16
__virtual_table__EList:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_isNil_at_EList
			 .word function_head_at_EList
			 .word function_tail_at_EList
			 .word function_cons_at_EList
			 .word function_append_at_EList
			 .word function_print_at_EList
			ECons_name:     .asciiz      "ECons"
			ECons_size:     .word     20
__virtual_table__ECons:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_isNil_at_ECons
			 .word function_head_at_ECons
			 .word function_tail_at_ECons
			 .word function_cons_at_EList
			 .word function_append_at_EList
			 .word function_print_at_ECons
			 .word function_init_at_ECons
			VList_name:     .asciiz      "VList"
			VList_size:     .word     16
__virtual_table__VList:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_isNil_at_VList
			 .word function_head_at_VList
			 .word function_tail_at_VList
			 .word function_cons_at_VList
			 .word function_print_at_VList
			VCons_name:     .asciiz      "VCons"
			VCons_size:     .word     20
__virtual_table__VCons:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_isNil_at_VCons
			 .word function_head_at_VCons
			 .word function_tail_at_VCons
			 .word function_cons_at_VList
			 .word function_print_at_VCons
			 .word function_init_at_VCons
			Parse_name:     .asciiz      "Parse"
			Parse_size:     .word     20
__virtual_table__Parse:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_read_input_at_Parse
			 .word function_parse_line_at_Parse
			 .word function_c2i_at_Parse
			 .word function_a2i_at_Parse
			 .word function_a2i_aux_at_Parse
			Main_name:     .asciiz      "Main"
			Main_size:     .word     24
__virtual_table__Main:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_out_string_at_IO
			 .word function_out_int_at_IO
			 .word function_in_int_at_IO
			 .word function_in_string_at_IO
			 .word function_read_input_at_Parse
			 .word function_parse_line_at_Parse
			 .word function_c2i_at_Parse
			 .word function_a2i_at_Parse
			 .word function_a2i_aux_at_Parse
			 .word function_main_at_Main
			BoolOp_name:     .asciiz      "BoolOp"
			BoolOp_size:     .word     12
__virtual_table__BoolOp:
			 .word function_abort_at_Object
			 .word function_type_name_at_Object
			 .word function_copy_at_Object
			 .word function_and_at_BoolOp
			 .word function_or_at_BoolOp
			_empty:     .asciiz      ""
			data_1:     .asciiz      "n"
            _error1:    .asciiz     "Abort called from class "
            _salto_para_abort: .asciiz "
"
            _buffer:    .space      2048
            _void:      .asciiz       ""
             

.text
main:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -12

 #init allocate

			li $v0, 9
			lw $a0, Main_size
			syscall
			sw $v0, -4($fp)

 #end allocate


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Ctr_at_Main
			sw $a0, -8($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			la $a0, __virtual_table__Main
			lw $a0, 48($a0)
			jalr $a0
			sw $a0, -12($fp)

 #fin llamada dinamica


 #retornando el valor

			li $a0, 0

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_add_vertice_at_Graph:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -20

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, 8($fp)
			lw $a0, 8($a0)
			lw $a0, 28($a0)
			jalr $a0
			sw $a0, -8($fp)

 #fin llamada dinamica


 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -12($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -12($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 44($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -4($fp)
			sw $t1, 16($a0)

 #end set attribute


 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -20($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -20($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -20($fp)
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -16($fp)

 #fin llamada dinamica


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -16($fp)
			sw $t1, 12($a0)

 #end set attribute


 #retornando el valor

			lw $a0, -16($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 36
			lw $fp, 0($sp)
			jr $ra
function_print_E_at_Graph:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 48($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_print_V_at_Graph:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 44($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_Graph:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, Graph_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, Graph_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__Graph
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Graph
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_Graph:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -12

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Object
			sw $a0, -4($fp)

 #fin llamada dinamica

			la $t1, _void
			sw $t1, -8($fp)

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -8($fp)
			sw $t1, 12($a0)

 #end set attribute

			la $t1, _void
			sw $t1, -12($fp)

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -12($fp)
			sw $t1, 16($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 24
			lw $fp, 0($sp)
			jr $ra
function_outgoing_at_Vertice:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_number_at_Vertice:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_init_at_Vertice:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 8($fp)
			sw $t1, 12($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_add_out_at_Vertice:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -4($fp)
			sw $t1, 16($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 24
			lw $fp, 0($sp)
			jr $ra
function_print_at_Vertice:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -16

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 16($a0)
			jalr $a0
			sw $a0, -4($fp)

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -16($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -16($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -16($fp)
			lw $a0, 8($a0)
			lw $a0, 48($a0)
			jalr $a0
			sw $a0, -12($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -12($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 28
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_Vertice:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, Vertice_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, Vertice_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__Vertice
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Vertice
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_Vertice:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_IO
			sw $a0, -4($fp)

 #fin llamada dinamica


 #init set attribute

			lw $a0, 4($fp)
			li $t1, 0
			sw $t1, 12($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_init_at_Edge:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 8($fp)
			sw $t1, 12($a0)

 #end set attribute


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 12($fp)
			sw $t1, 16($a0)

 #end set attribute


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 16($fp)
			sw $t1, 20($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 24
			lw $fp, 0($sp)
			jr $ra
function_print_at_Edge:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -48
			la $t1, _empty
			sw $t1, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 12($a0)
			jalr $a0
			sw $a0, -4($fp)

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -16($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -16($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 16($a0)
			jalr $a0
			sw $a0, -12($fp)
			la $t1, _empty
			sw $t1, -24($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -24($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 12($a0)
			jalr $a0
			sw $a0, -20($fp)

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -32($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -32($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 16($a0)
			jalr $a0
			sw $a0, -28($fp)
			la $t1, _empty
			sw $t1, -40($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -40($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 12($a0)
			jalr $a0
			sw $a0, -36($fp)

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 20($a0)
			sw $a0, -48($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -48($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 16($a0)
			jalr $a0
			sw $a0, -44($fp)

 #retornando el valor

			lw $a0, -44($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 60
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_Edge:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, Edge_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, Edge_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__Edge
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Edge
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_Edge:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_IO
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_isNil_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #retornando el valor

			li $a0, 1

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 12
			lw $fp, 0($sp)
			jr $ra
function_head_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 0($a0)
			jalr $a0
			sw $a0, -4($fp)

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -8($fp)

 #retornando el valor

			lw $a0, -8($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_tail_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 0($a0)
			jalr $a0
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_cons_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -12

 #init allocate

			li $v0, 9
			lw $a0, ECons_size
			syscall
			sw $v0, -8($fp)

 #end allocate


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Ctr_at_ECons
			sw $a0, -12($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 52($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 28
			lw $fp, 0($sp)
			jr $ra
function_append_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -24

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 28($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica

			lw $a0, -4($fp)
			bne $a0, $zero, label_append_at_EList_0

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 36($a0)
			jalr $a0
			sw $a0, -20($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -20($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -20($fp)
			lw $a0, 8($a0)
			lw $a0, 44($a0)
			jalr $a0
			sw $a0, -16($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 32($a0)
			jalr $a0
			sw $a0, -24($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -24($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -16($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -16($fp)
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -12($fp)

 #fin llamada dinamica

			lw $t1, -12($fp)
			sw $t1, -8($fp)
			j label_append_at_EList_1
label_append_at_EList_0:
			lw $t1, 8($fp)
			sw $t1, -8($fp)
label_append_at_EList_1:

 #retornando el valor

			lw $a0, -8($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 40
			lw $fp, 0($sp)
			jr $ra
function_print_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8
			la $t1, data_1
			sw $t1, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 12($a0)
			jalr $a0
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, EList_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, EList_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__EList
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_EList
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_EList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_IO
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_isNil_at_ECons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #retornando el valor

			li $a0, 0

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 12
			lw $fp, 0($sp)
			jr $ra
function_head_at_ECons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_tail_at_ECons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_init_at_ECons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 8($fp)
			sw $t1, 12($a0)

 #end set attribute


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 12($fp)
			sw $t1, 16($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_print_at_ECons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -16

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 32($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -16($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -16($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -16($fp)
			lw $a0, 8($a0)
			lw $a0, 48($a0)
			jalr $a0
			sw $a0, -12($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -12($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 28
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_ECons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, ECons_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, ECons_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__ECons
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_ECons
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_ECons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_EList
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_isNil_at_VList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #retornando el valor

			li $a0, 1

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 12
			lw $fp, 0($sp)
			jr $ra
function_head_at_VList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 0($a0)
			jalr $a0
			sw $a0, -4($fp)

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -8($fp)

 #retornando el valor

			lw $a0, -8($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_tail_at_VList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 0($a0)
			jalr $a0
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_cons_at_VList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -12

 #init allocate

			li $v0, 9
			lw $a0, VCons_size
			syscall
			sw $v0, -8($fp)

 #end allocate


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Ctr_at_VCons
			sw $a0, -12($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 48($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 28
			lw $fp, 0($sp)
			jr $ra
function_print_at_VList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8
			la $t1, data_1
			sw $t1, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 12($a0)
			jalr $a0
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_VList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, VList_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, VList_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__VList
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_VList
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_VList:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_IO
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_isNil_at_VCons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #retornando el valor

			li $a0, 0

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 12
			lw $fp, 0($sp)
			jr $ra
function_head_at_VCons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_tail_at_VCons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -4($fp)

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_init_at_VCons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -0

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 8($fp)
			sw $t1, 12($a0)

 #end set attribute


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, 12($fp)
			sw $t1, 16($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_print_at_VCons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -16

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 44($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -16($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -16($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -16($fp)
			lw $a0, 8($a0)
			lw $a0, 44($a0)
			jalr $a0
			sw $a0, -12($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -12($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 28
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_VCons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, VCons_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, VCons_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__VCons
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_VCons
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_VCons:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_VList
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_read_input_at_Parse:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -68

 #init allocate

			li $v0, 9
			lw $a0, Graph_size
			syscall
			sw $v0, -4($fp)

 #end allocate


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Ctr_at_Graph
			sw $a0, -8($fp)

 #fin llamada dinamica

			lw $t1, -4($fp)
			sw $t1, -12($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 24($a0)
			jalr $a0
			sw $a0, -16($fp)
			lw $t1, -16($fp)
			sw $t1, -20($fp)
label_read_input_at_Parse_0:

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 12($a0)
			sw $a0, -28($fp)
			la $t1, data_1
			sw $t1, -40($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, None
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -40($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -36($fp)
			lw $a0, -36($fp)
			bne $a0, $zero, label_read_input_at_Parse_3
			li $t1, 1
			sw $t1, -32($fp)
			j label_read_input_at_Parse_4
label_read_input_at_Parse_3:
			li $t1, 0
			sw $t1, -32($fp)
label_read_input_at_Parse_4:
			la $t1, _empty
			sw $t1, -52($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, None
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -52($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -48($fp)
			lw $a0, -48($fp)
			bne $a0, $zero, label_read_input_at_Parse_5
			li $t1, 1
			sw $t1, -44($fp)
			j label_read_input_at_Parse_6
label_read_input_at_Parse_5:
			li $t1, 0
			sw $t1, -44($fp)
label_read_input_at_Parse_6:

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -44($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -32($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -28($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -28($fp)
			lw $a0, 8($a0)
			lw $a0, 12($a0)
			jalr $a0
			sw $a0, -24($fp)

 #fin llamada dinamica

			lw $a0, -24($fp)
			bne $a0, $zero, label_read_input_at_Parse_1
			j label_read_input_at_Parse_2
label_read_input_at_Parse_1:

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			li $a0, line
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 32($a0)
			jalr $a0
			sw $a0, -60($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -60($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, g
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, None
			lw $a0, 8($a0)
			lw $a0, 12($a0)
			jalr $a0
			sw $a0, -56($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 24($a0)
			jalr $a0
			sw $a0, -64($fp)
			lw $t1, -64($fp)
			sw $t1, -20($fp)
			j label_read_input_at_Parse_0
label_read_input_at_Parse_2:
			la $t1, _void
			sw $t1, -68($fp)

 #retornando el valor

			li $a0, g

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 80
			lw $fp, 0($sp)
			jr $ra
function_parse_line_at_Parse:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -88

 #init allocate

			li $v0, 9
			lw $a0, Vertice_size
			syscall
			sw $v0, -8($fp)

 #end allocate


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Ctr_at_Vertice
			sw $a0, -12($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -16($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -16($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 36($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica

			lw $t1, -4($fp)
			sw $t1, -20($fp)
label_parse_line_at_Parse_0:

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -36($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -36($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_length_at_String
			sw $a0, -32($fp)

 #fin llamada dinamica

			lw $t1, -32($fp)
			li $a0, 0
			sub $a0, $t1, $a0
			sw $a0, -40($fp)
			lw $a0, -40($fp)
			bne $a0, $zero, label_parse_line_at_Parse_3
			li $t1, 1
			sw $t1, -28($fp)
			j label_parse_line_at_Parse_4
label_parse_line_at_Parse_3:
			li $t1, 0
			sw $t1, -28($fp)
label_parse_line_at_Parse_4:
			lw $a0, -28($fp)
			bne $a0, $zero, label_parse_line_at_Parse_5
			li $t1, 1
			sw $t1, -24($fp)
			j label_parse_line_at_Parse_6
label_parse_line_at_Parse_5:
			li $t1, 0
			sw $t1, -24($fp)
label_parse_line_at_Parse_6:
			lw $a0, -24($fp)
			bne $a0, $zero, label_parse_line_at_Parse_1
			j label_parse_line_at_Parse_2
label_parse_line_at_Parse_1:

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -48($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -48($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -44($fp)
			lw $t1, -44($fp)
			sw $t1, -52($fp)

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 16($a0)
			sw $a0, -60($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -60($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -56($fp)
			lw $t1, -56($fp)
			sw $t1, -64($fp)

 #init allocate

			li $v0, 9
			lw $a0, Edge_size
			syscall
			sw $v0, -76($fp)

 #end allocate


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -76($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Ctr_at_Edge
			sw $a0, -80($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			li $a0, v
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, None
			lw $a0, 8($a0)
			lw $a0, 32($a0)
			jalr $a0
			sw $a0, -84($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			li $a0, weight
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, succ
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -84($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -76($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -76($fp)
			lw $a0, 8($a0)
			lw $a0, 28($a0)
			jalr $a0
			sw $a0, -72($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -72($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, v
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, None
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -68($fp)

 #fin llamada dinamica

			j label_parse_line_at_Parse_0
label_parse_line_at_Parse_2:
			la $t1, _void
			sw $t1, -88($fp)

 #retornando el valor

			li $a0, v

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 104
			lw $fp, 0($sp)
			jr $ra
function_c2i_at_Parse:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -124
			la $t1, _empty
			sw $t1, -8($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -4($fp)
			lw $a0, -4($fp)
			bne $a0, $zero, label_c2i_at_Parse_0
			la $t1, _empty
			sw $t1, -20($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -20($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -16($fp)
			lw $a0, -16($fp)
			bne $a0, $zero, label_c2i_at_Parse_2
			la $t1, _empty
			sw $t1, -32($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -32($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -28($fp)
			lw $a0, -28($fp)
			bne $a0, $zero, label_c2i_at_Parse_4
			la $t1, _empty
			sw $t1, -44($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -44($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -40($fp)
			lw $a0, -40($fp)
			bne $a0, $zero, label_c2i_at_Parse_6
			la $t1, _empty
			sw $t1, -56($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -56($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -52($fp)
			lw $a0, -52($fp)
			bne $a0, $zero, label_c2i_at_Parse_8
			la $t1, _empty
			sw $t1, -68($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -68($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -64($fp)
			lw $a0, -64($fp)
			bne $a0, $zero, label_c2i_at_Parse_10
			la $t1, _empty
			sw $t1, -80($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -80($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -76($fp)
			lw $a0, -76($fp)
			bne $a0, $zero, label_c2i_at_Parse_12
			la $t1, _empty
			sw $t1, -92($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -92($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -88($fp)
			lw $a0, -88($fp)
			bne $a0, $zero, label_c2i_at_Parse_14
			la $t1, _empty
			sw $t1, -104($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -104($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -100($fp)
			lw $a0, -100($fp)
			bne $a0, $zero, label_c2i_at_Parse_16
			la $t1, _empty
			sw $t1, -116($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -116($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -112($fp)
			lw $a0, -112($fp)
			bne $a0, $zero, label_c2i_at_Parse_18

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 0($a0)
			jalr $a0
			sw $a0, -124($fp)
			li $t1, 0
			sw $t1, -120($fp)
			j label_c2i_at_Parse_19
label_c2i_at_Parse_18:
			li $t1, 9
			sw $t1, -120($fp)
label_c2i_at_Parse_19:
			lw $t1, -120($fp)
			sw $t1, -108($fp)
			j label_c2i_at_Parse_17
label_c2i_at_Parse_16:
			li $t1, 8
			sw $t1, -108($fp)
label_c2i_at_Parse_17:
			lw $t1, -108($fp)
			sw $t1, -96($fp)
			j label_c2i_at_Parse_15
label_c2i_at_Parse_14:
			li $t1, 7
			sw $t1, -96($fp)
label_c2i_at_Parse_15:
			lw $t1, -96($fp)
			sw $t1, -84($fp)
			j label_c2i_at_Parse_13
label_c2i_at_Parse_12:
			li $t1, 6
			sw $t1, -84($fp)
label_c2i_at_Parse_13:
			lw $t1, -84($fp)
			sw $t1, -72($fp)
			j label_c2i_at_Parse_11
label_c2i_at_Parse_10:
			li $t1, 5
			sw $t1, -72($fp)
label_c2i_at_Parse_11:
			lw $t1, -72($fp)
			sw $t1, -60($fp)
			j label_c2i_at_Parse_9
label_c2i_at_Parse_8:
			li $t1, 4
			sw $t1, -60($fp)
label_c2i_at_Parse_9:
			lw $t1, -60($fp)
			sw $t1, -48($fp)
			j label_c2i_at_Parse_7
label_c2i_at_Parse_6:
			li $t1, 3
			sw $t1, -48($fp)
label_c2i_at_Parse_7:
			lw $t1, -48($fp)
			sw $t1, -36($fp)
			j label_c2i_at_Parse_5
label_c2i_at_Parse_4:
			li $t1, 2
			sw $t1, -36($fp)
label_c2i_at_Parse_5:
			lw $t1, -36($fp)
			sw $t1, -24($fp)
			j label_c2i_at_Parse_3
label_c2i_at_Parse_2:
			li $t1, 1
			sw $t1, -24($fp)
label_c2i_at_Parse_3:
			lw $t1, -24($fp)
			sw $t1, -12($fp)
			j label_c2i_at_Parse_1
label_c2i_at_Parse_0:
			li $t1, 0
			sw $t1, -12($fp)
label_c2i_at_Parse_1:

 #retornando el valor

			lw $a0, -12($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 140
			lw $fp, 0($sp)
			jr $ra
function_a2i_at_Parse:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -88

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_length_at_String
			sw $a0, -8($fp)

 #fin llamada dinamica

			lw $t1, -8($fp)
			li $a0, 0
			sub $a0, $t1, $a0
			sw $a0, -12($fp)
			lw $a0, -12($fp)
			bne $a0, $zero, label_a2i_at_Parse_0
			li $t1, 1
			sw $t1, -4($fp)
			j label_a2i_at_Parse_1
label_a2i_at_Parse_0:
			li $t1, 0
			sw $t1, -4($fp)
label_a2i_at_Parse_1:
			lw $a0, -4($fp)
			bne $a0, $zero, label_a2i_at_Parse_2

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 1
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 0
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -24($fp)

 #fin llamada dinamica

			la $t1, _empty
			sw $t1, -28($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -24($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -28($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -20($fp)
			lw $a0, -20($fp)
			bne $a0, $zero, label_a2i_at_Parse_4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 1
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 0
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -40($fp)

 #fin llamada dinamica

			la $t1, _empty
			sw $t1, -44($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -40($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -44($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -36($fp)
			lw $a0, -36($fp)
			bne $a0, $zero, label_a2i_at_Parse_6

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 44($a0)
			jalr $a0
			sw $a0, -52($fp)
			lw $t1, -52($fp)
			sw $t1, -48($fp)
			j label_a2i_at_Parse_7
label_a2i_at_Parse_6:

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_length_at_String
			sw $a0, -68($fp)

 #fin llamada dinamica

			lw $t1, -68($fp)
			li $a0, 1
			blt $t1, $a0, label_a2i_at_Parse_8
			li $a0, 0
			j label_a2i_at_Parse_9
label_a2i_at_Parse_8:
			li $a0, 1
label_a2i_at_Parse_9:
			sw $a0, -64($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -64($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 1
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -60($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -60($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 40($a0)
			jalr $a0
			sw $a0, -56($fp)
			lw $t1, -56($fp)
			sw $t1, -48($fp)
label_a2i_at_Parse_7:
			lw $t1, -48($fp)
			sw $t1, -32($fp)
			j label_a2i_at_Parse_5
label_a2i_at_Parse_4:

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_length_at_String
			sw $a0, -88($fp)

 #fin llamada dinamica

			lw $t1, -88($fp)
			li $a0, 1
			blt $t1, $a0, label_a2i_at_Parse_10
			li $a0, 0
			j label_a2i_at_Parse_11
label_a2i_at_Parse_10:
			li $a0, 1
label_a2i_at_Parse_11:
			sw $a0, -84($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -84($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 1
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -80($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -80($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 44($a0)
			jalr $a0
			sw $a0, -76($fp)
			lw $t1, -76($fp)
			li $t2, -1
			mul $t1 $t1 $t2
			sw $t1, -72($fp)
			lw $t1, -72($fp)
			sw $t1, -32($fp)
label_a2i_at_Parse_5:
			lw $t1, -32($fp)
			sw $t1, -16($fp)
			j label_a2i_at_Parse_3
label_a2i_at_Parse_2:
			li $t1, 0
			sw $t1, -16($fp)
label_a2i_at_Parse_3:

 #retornando el valor

			lw $a0, -16($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 104
			lw $fp, 0($sp)
			jr $ra
function_a2i_aux_at_Parse:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -132
			li $t1, 0
			sw $t1, -4($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_length_at_String
			sw $a0, -8($fp)

 #fin llamada dinamica

			lw $t1, -8($fp)
			sw $t1, -12($fp)
			li $t1, 0
			sw $t1, -16($fp)
label_a2i_aux_at_Parse_0:
			li $a0, []
			bne $a0, $zero, label_a2i_aux_at_Parse_1
			j label_a2i_aux_at_Parse_2
label_a2i_aux_at_Parse_1:

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 1
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, i
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -20($fp)

 #fin llamada dinamica

			lw $t1, -20($fp)
			sw $t1, -24($fp)
			la $t1, _empty
			sw $t1, -32($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, None
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -32($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -28($fp)
			lw $a0, -28($fp)
			bne $a0, $zero, label_a2i_aux_at_Parse_3
			la $t1, _empty
			sw $t1, -44($fp)
			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, None
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -44($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			jal function_comparer_string
			sw $a0, -40($fp)
			lw $a0, -40($fp)
			bne $a0, $zero, label_a2i_aux_at_Parse_5
			li $t1, int
			li $a0, 10
			mul $a0 $t1 $a0
			sw $a0, -56($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			li $a0, 1
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			li $a0, i
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -64($fp)

 #fin llamada dinamica


 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -64($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros

			lw $a0, 4($fp)
			lw $a0, 8($a0)
			lw $a0, 36($a0)
			jalr $a0
			sw $a0, -60($fp)
			lw $t1, -56($fp)
			lw $a0, -60($fp)
			add $a0, $a0, $t1
			sw $a0, -52($fp)
			lw $t1, -52($fp)
			sw $t1, -4($fp)
			li $t1, i
			li $a0, 1
			add $a0, $a0, $t1
			sw $a0, -68($fp)
			lw $t1, -68($fp)
			sw $t1, -16($fp)
			li $t1, i
			li $a0, j
			sub $a0, $t1, $a0
			sw $a0, -76($fp)
			lw $a0, -76($fp)
			bne $a0, $zero, label_a2i_aux_at_Parse_7
			li $t1, 1
			sw $t1, -72($fp)
			j label_a2i_aux_at_Parse_8
label_a2i_aux_at_Parse_7:
			li $t1, 0
			sw $t1, -72($fp)
label_a2i_aux_at_Parse_8:
			lw $a0, -72($fp)
			bne $a0, $zero, label_a2i_aux_at_Parse_9
			la $t1, _empty
			sw $t1, -84($fp)
			lw $t1, -84($fp)
			sw $t1, -80($fp)
			j label_a2i_aux_at_Parse_10
label_a2i_aux_at_Parse_9:
			la $t1, _empty
			sw $t1, -88($fp)

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -88($fp)
			sw $t1, 16($a0)

 #end set attribute

			lw $t1, -88($fp)
			sw $t1, -80($fp)
label_a2i_aux_at_Parse_10:
			lw $t1, -80($fp)
			sw $t1, -48($fp)
			j label_a2i_aux_at_Parse_6
label_a2i_aux_at_Parse_5:
			li $t1, i
			li $a0, 1
			add $a0, $a0, $t1
			sw $a0, -96($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_length_at_String
			sw $a0, -108($fp)

 #fin llamada dinamica

			lw $t1, -108($fp)
			li $a0, i
			blt $t1, $a0, label_a2i_aux_at_Parse_11
			li $a0, 0
			j label_a2i_aux_at_Parse_12
label_a2i_aux_at_Parse_11:
			li $a0, 1
label_a2i_aux_at_Parse_12:
			sw $a0, -104($fp)
			lw $t1, -104($fp)
			li $a0, 1
			blt $t1, $a0, label_a2i_aux_at_Parse_13
			li $a0, 0
			j label_a2i_aux_at_Parse_14
label_a2i_aux_at_Parse_13:
			li $a0, 1
label_a2i_aux_at_Parse_14:
			sw $a0, -100($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -100($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -96($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -92($fp)

 #fin llamada dinamica


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -92($fp)
			sw $t1, 16($a0)

 #end set attribute

			li $t1, j
			sw $t1, -16($fp)
			li $t1, j
			sw $t1, -48($fp)
label_a2i_aux_at_Parse_6:
			lw $t1, -48($fp)
			sw $t1, -36($fp)
			j label_a2i_aux_at_Parse_4
label_a2i_aux_at_Parse_3:
			li $t1, i
			li $a0, 1
			add $a0, $a0, $t1
			sw $a0, -116($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_length_at_String
			sw $a0, -128($fp)

 #fin llamada dinamica

			lw $t1, -128($fp)
			li $a0, i
			blt $t1, $a0, label_a2i_aux_at_Parse_15
			li $a0, 0
			j label_a2i_aux_at_Parse_16
label_a2i_aux_at_Parse_15:
			li $a0, 1
label_a2i_aux_at_Parse_16:
			sw $a0, -124($fp)
			lw $t1, -124($fp)
			li $a0, 1
			blt $t1, $a0, label_a2i_aux_at_Parse_17
			li $a0, 0
			j label_a2i_aux_at_Parse_18
label_a2i_aux_at_Parse_17:
			li $a0, 1
label_a2i_aux_at_Parse_18:
			sw $a0, -120($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -120($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -116($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_substr_at_String
			sw $a0, -112($fp)

 #fin llamada dinamica


 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -112($fp)
			sw $t1, 16($a0)

 #end set attribute

			li $t1, j
			sw $t1, -16($fp)
			li $t1, j
			sw $t1, -36($fp)
label_a2i_aux_at_Parse_4:
			j label_a2i_aux_at_Parse_0
label_a2i_aux_at_Parse_2:
			la $t1, _void
			sw $t1, -132($fp)

 #retornando el valor

			li $a0, int

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 148
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_Parse:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, Parse_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, Parse_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__Parse
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Parse
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_Parse:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_IO
			sw $a0, -4($fp)

 #fin llamada dinamica

			la $t1, _void
			sw $t1, -8($fp)

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -8($fp)
			sw $t1, 12($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_main_at_Main:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -16

 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 20($a0)
			sw $a0, -8($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -8($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -8($fp)
			lw $a0, 8($a0)
			lw $a0, 20($a0)
			jalr $a0
			sw $a0, -4($fp)

 #fin llamada dinamica


 #init get attribute

			lw $a0, 4($fp)
			lw $a0, 20($a0)
			sw $a0, -16($fp)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, -16($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada dinamica

			lw $a0, -16($fp)
			lw $a0, 8($a0)
			lw $a0, 16($a0)
			jalr $a0
			sw $a0, -12($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, -12($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 28
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_Main:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, Main_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, Main_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__Main
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Main
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_Main:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -8

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Parse
			sw $a0, -4($fp)

 #fin llamada dinamica

			la $t1, _void
			sw $t1, -8($fp)

 #init set attribute

			lw $a0, 4($fp)
			lw $t1, -8($fp)
			sw $t1, 20($a0)

 #end set attribute


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 20
			lw $fp, 0($sp)
			jr $ra
function_and_at_BoolOp:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			bne $a0, $zero, label_and_at_BoolOp_0
			li $t1, 0
			sw $t1, -4($fp)
			j label_and_at_BoolOp_1
label_and_at_BoolOp_0:
			lw $t1, 12($fp)
			sw $t1, -4($fp)
label_and_at_BoolOp_1:

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 24
			lw $fp, 0($sp)
			jr $ra
function_or_at_BoolOp:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4
			lw $a0, 8($fp)
			bne $a0, $zero, label_or_at_BoolOp_0
			lw $t1, 12($fp)
			sw $t1, -4($fp)
			j label_or_at_BoolOp_1
label_or_at_BoolOp_0:
			li $t1, 1
			sw $t1, -4($fp)
label_or_at_BoolOp_1:

 #retornando el valor

			lw $a0, -4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 24
			lw $fp, 0($sp)
			jr $ra
function_Ctr_at_BoolOp:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #LOAD inicia

			la $t1, BoolOp_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

 #LOAD inicia

			lw $t1, BoolOp_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

 #LOAD inicia

			la $t1, __virtual_table__BoolOp
			lw $t2, 4($fp)
			sw $t1, 8($t2)

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_BoolOp
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra
function_Init_at_BoolOp:

 #muevo el fp al sp, pongo en sp ra y avanzo la pila

			move $fp, $sp
			sw $ra, 0($sp)
			addiu $sp, $sp, -4

 #muevo la pila x las variables locales

			addiu $sp, $sp, -4

 #guardando los parametros

			sw $fp, 0($sp)
			addiu $sp, $sp, -4
			lw $a0, 4($fp)
			sw $a0, 0($sp)
			addiu $sp, $sp, -4

 # fin guardando los parametros


 #comienzo llamada al constructor

			jal function_Init_at_Object
			sw $a0, -4($fp)

 #fin llamada dinamica


 #retornando el valor

			lw $a0, 4($fp)

 #return sp, fp, ra

			lw $ra, 0($fp)
			addiu $sp, $sp, 16
			lw $fp, 0($sp)
			jr $ra


function_Ctr_at_Object:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            la $t1, Object_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

			lw $t1, Object_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

			la $t1, __virtual_table__Object
			lw $t2, 4($fp)
			sw $t1, 8($t2)


            lw $a0, 4($fp)

            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

function_Init_at_Object:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $a0, 4($fp)

            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

function_Ctr_at_IO:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            la $t1, IO_name
			lw $t2, 4($fp)
			sw $t1, 0($t2)

			lw $t1, IO_size
			lw $t2, 4($fp)
			sw $t1, 4($t2)

			la $t1, __virtual_table__IO
			lw $t2, 4($fp)
			sw $t1, 8($t2)


            lw $a0, 4($fp)

            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

function_Init_at_IO:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $a0, 4($fp)

            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

function_type_name_at_Object:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4
            lw $a0, 4($fp)   
            lw  $a0 0($a0)      
            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra

function_abort_at_Object:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4
            la $a0, _error1
            li $v0, 4
            syscall
            lw $a0 4($fp)
            lw $a0 ($a0)
            li $v0, 4
            syscall
            la $a0, _salto_para_abort
            li $v0, 4
            syscall
            li $v0, 10
            syscall

function_copy_at_Object:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $a0, 4($fp)
            lw $a0, 0($a0)
            la $t0, Int_name

            bne $a0, $t0, not_int
            lw $a0, 4($fp)
            lw $a0, 8($a0)
            j end

        not_int:
            lw $a0, 4($fp)
            lw $a0, 0($a0)
            la $t0, Bool_name

            bne $a0, $t0, not_bool
            lw $a0, 4($fp)
            lw $a0, 8($a0)
            j end

        not_bool:
            lw $a0, 4($fp)
            lw $a0, 0($a0)
            la $t0, String_name

            bne $a0, $t0, not_string
            lw $a0, 4($fp)
            lw $a0, 8($a0)
            j end

        not_string:
            lw $a0, 4($fp)
            move $t2, $a0 
            lw $a0, 4($a0)
            move $t1, $a0

            li $v0, 9
            syscall

            move $a0, $v0

        copy:
            lw $t0, 0($t2)
            sw $t0, 0($a0)
            addiu $a0, $a0, 4
            addiu $t2, $t2, 4
            addiu $t1, $t1, -4
            bne $t1, $zero, copy

            move $a0, $v0

        end:
            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

function_length_at_String:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $s0, 4($fp)
            li $a0, -1

        length:
            lb $t0, ($s0)
            addiu $a0, $a0, 1
            addiu $s0, $s0, 1
            bne $t0, $zero, length

            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

function_concat_at_String:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $s1, 4($fp)
            sw $fp, 0($sp)
            addiu $sp, $sp, -4
            sw $s1, 0($sp)
            addiu $sp, $sp, -4
            jal function_length_at_String

            sw $a0, 0($sp)
            addiu $sp, $sp, -4

            lw $s1, 8($fp)
            sw $fp, 0($sp)
            addiu $sp, $sp, -4
            sw $s1, 0($sp)
            addiu $sp, $sp, -4
            jal function_length_at_String

            lw $t7, 4($sp)
            addiu $sp, $sp, 4

            move $t6, $a0
            add $a0, $t7, $t6
            addiu $a0, $a0, 1

            li $v0, 9
            syscall

            move $t0, $v0

            lw $s1, 4($fp)
        copy_self:
            lb $t5, ($s1)
            beq $t5, $zero, end_copy_self
            sb $t5, ($t0)
            addiu $s1, $s1, 1
            addiu $t0, $t0, 1
            j copy_self

        end_copy_self:
            lw $s1, 8($fp)

        copy_given:
            lb $t5, ($s1)
            sb $t5, ($t0)
            addiu $s1, $s1, 1
            addiu $t0, $t0, 1
            bne $t5, $zero, copy_given


            move $a0, $v0

            lw $ra, 0($fp)
            addiu $sp, $sp, 16
            lw $fp, 0($sp)
            jr $ra 


function_substr_at_String:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $a0, 12($fp)
            addiu $a0, $a0, 1
            li $v0, 9
            syscall

            move $t0, $v0

            lw $s1, 4($fp)
            lw $t1, 8($fp)
            add $s1, $s1, $t1

            lw $t1, 12($fp)

        substr:
            lb $t5, ($s1)
            sb $t5, ($t0)
            addiu $s1, $s1, 1
            addiu $t0, $t0, 1
            addiu $t1, $t1, -1
            bne $t1, $zero, substr

            sb $zero, ($t0)
            move $a0, $v0

            lw $ra, 0($fp)
            addiu $sp, $sp, 20
            lw $fp, 0($sp)
            jr $ra 


function_comparer_string:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $s1, 4($fp)
            sw $fp, 0($sp)
            addiu $sp, $sp, -4
            sw $s1, 0($sp)
            addiu $sp, $sp, -4
            jal function_length_at_String

            sw $a0, 0($sp)
            addiu $sp, $sp, -4

            lw $s1, 8($fp)
            sw $fp, 0($sp)
            addiu $sp, $sp, -4
            sw $s1, 0($sp)
            addiu $sp, $sp, -4
            jal function_length_at_String

            lw $t7, 4($sp)
            addiu $sp, $sp, 4

            bne $t7, $a0, not_equals_strings

            lw $t7, 4($fp)
            lw $a0, 8($fp)

        equal_chart:
            lb $t1, ($t7)
            lb $t2, ($a0)
            addiu $t7, $t7, 1
            addiu $a0, $a0, 1
            bne $t1, $t2, not_equals_strings
            beq $t1, $zero, equals_strings
            j equal_chart

        not_equals_strings:
            li $a0, 0
            j end_equal_string

        equals_strings:
            li $a0, 1

        end_equal_string:
            lw $ra, 0($fp)
            addiu $sp, $sp, 16
            lw $fp, 0($sp)
            jr $ra 



function_out_string_at_IO:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $a0, 8($fp)
            li $v0, 4
            syscall

            lw $a0, 4($fp)

            lw $ra, 0($fp)
            addiu $sp, $sp, 16
            lw $fp, 0($sp)
            jr $ra 

function_out_int_at_IO:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $a0, 8($fp)
            li $v0, 1
            syscall

            lw $a0, 4($fp)

            lw $ra, 0($fp)
            addiu $sp, $sp, 16
            lw $fp, 0($sp)
            jr $ra 

function_in_int_at_IO:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            lw $a0, 4($fp)
            li $v0, 5
            syscall

            move $a0, $v0

            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

function_in_string_at_IO:
            move $fp, $sp
            sw $ra, 0($sp)
            addiu $sp, $sp, -4

            la $a0, _buffer
            li $a1, 1024

            li $v0, 8
            syscall

            sw $fp, 0($sp)
            addiu $sp, $sp, -4
            sw $a0, 0($sp)
            addiu $sp, $sp, -4
            jal function_length_at_String

            addiu $a0, $a0, 1
            li $v0, 9
            syscall

            move $t0, $v0
            la $a0, _buffer

        IO_copy:
            lb $t1, ($a0)
            sb $t1, ($t0)
            addiu $a0, $a0, 1
            addiu $t0, $t0, 1
            bne $t1, $zero, IO_copy

            addiu $t0, $t0, -2
            li $t1 10
            lb $t2, ($t0)
            bne $t1 , $t2 not_slash
            sb $zero, ($t0)

            not_slash:
            move $a0, $v0

            lw $ra, 0($fp)
            addiu $sp, $sp, 12
            lw $fp, 0($sp)
            jr $ra 

            