.data
div_zero: .asciiz "Runtime Error: Division by zero"
dispatch_void: .asciiz "Runtime Error: A dispatch with void"
case_void: .asciiz "Runtime Error: A case with void"
case_no_match: .asciiz "Runtime Error: Execution of a case statement without a matching branch"
heap: .asciiz "Runtime Error: Heap overflow"
substr: .asciiz "Runtime Error: Index for substring out of range"
input_str: .space 2048
void: .word 0
Object_name: .asciiz "Object"
Object_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
Int_name: .asciiz "Int"
Int_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
String_name: .asciiz "String"
String_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word String.length
.word String.concat
.word String.substr
Bool_name: .asciiz "Bool"
Bool_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
Board_name: .asciiz "Board"
Board_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Board.size_of_board
.word Board.board_init
CellularAutomaton_name: .asciiz "CellularAutomaton"
CellularAutomaton_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Board.size_of_board
.word Board.board_init
.word CellularAutomaton.init
.word CellularAutomaton.print
.word CellularAutomaton.num_cells
.word CellularAutomaton.cell
.word CellularAutomaton.north
.word CellularAutomaton.south
.word CellularAutomaton.east
.word CellularAutomaton.west
.word CellularAutomaton.northwest
.word CellularAutomaton.northeast
.word CellularAutomaton.southeast
.word CellularAutomaton.southwest
.word CellularAutomaton.neighbors
.word CellularAutomaton.cell_at_next_evolution
.word CellularAutomaton.evolve
.word CellularAutomaton.option
.word CellularAutomaton.prompt
.word CellularAutomaton.prompt2
Main_name: .asciiz "Main"
Main_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Board.size_of_board
.word Board.board_init
.word CellularAutomaton.init
.word CellularAutomaton.print
.word CellularAutomaton.num_cells
.word CellularAutomaton.cell
.word CellularAutomaton.north
.word CellularAutomaton.south
.word CellularAutomaton.east
.word CellularAutomaton.west
.word CellularAutomaton.northwest
.word CellularAutomaton.northeast
.word CellularAutomaton.southeast
.word CellularAutomaton.southwest
.word CellularAutomaton.neighbors
.word CellularAutomaton.cell_at_next_evolution
.word CellularAutomaton.evolve
.word CellularAutomaton.option
.word CellularAutomaton.prompt
.word CellularAutomaton.prompt2
.word Main.main
msg_0: .asciiz "Abort called from class "
msg_1: .asciiz "
"
empty_str: .asciiz ""
msg_3: .asciiz " "
msg_4: .asciiz "X"
msg_5: .asciiz "-"
msg_6: .asciiz "
Please chose a number:
"
msg_7: .asciiz "	1: A cross
"
msg_8: .asciiz "	2: A slash from the upper left to lower right
"
msg_9: .asciiz "	3: A slash from the upper right to lower left
"
msg_10: .asciiz "	4: An X
"
msg_11: .asciiz "	5: A greater than sign 
"
msg_12: .asciiz "	6: A less than sign
"
msg_13: .asciiz "	7: Two greater than signs
"
msg_14: .asciiz "	8: Two less than signs
"
msg_15: .asciiz "	9: A 'V'
"
msg_16: .asciiz "	10: An inverse 'V'
"
msg_17: .asciiz "	11: Numbers 9 and 10 combined
"
msg_18: .asciiz "	12: A full grid
"
msg_19: .asciiz "	13: A 'T'
"
msg_20: .asciiz "	14: A plus '+'
"
msg_21: .asciiz "	15: A 'W'
"
msg_22: .asciiz "	16: An 'M'
"
msg_23: .asciiz "	17: An 'E'
"
msg_24: .asciiz "	18: A '3'
"
msg_25: .asciiz "	19: An 'O'
"
msg_26: .asciiz "	20: An '8'
"
msg_27: .asciiz "	21: An 'S'
"
msg_28: .asciiz "Your choice => "
msg_29: .asciiz "                         "
msg_30: .asciiz " XXXX   X    XX    X   XXXX "
msg_31: .asciiz " XX X  XX  X XX X  XX  X XX "
msg_32: .asciiz " XX X  XX  X XX "
msg_33: .asciiz "XXX    X   X  X    X   XXXX "
msg_34: .asciiz "XXXXX   X   XXXXX   X   XXXX"
msg_35: .asciiz "  X X   X X X X     X"
msg_36: .asciiz "X     X X X X   X X  "
msg_37: .asciiz "  X    X  XXXXX  X    X  "
msg_38: .asciiz "XXXXX  X    X    X    X  "
msg_39: .asciiz "XXXXXXXXXXXXXXXXXXXXXXXXX"
msg_40: .asciiz "X X X X X X X X"
msg_41: .asciiz "  X   X X X   X"
msg_42: .asciiz "X   X X X   X  "
msg_43: .asciiz " X  XX  X  X  X     "
msg_44: .asciiz "X  X  X  XX  X      "
msg_45: .asciiz "    X   X   X     X     X"
msg_46: .asciiz "X     X     X   X   X    "
msg_47: .asciiz "X   X X X   X   X X X   X"
msg_48: .asciiz "X     X     X     X     X"
msg_49: .asciiz "    X   X   X   X   X    "
msg_50: .asciiz " XX  XXXX XXXX  XX  "
msg_51: .asciiz "Would you like to continue with the next generation? 
"
msg_52: .asciiz "Please use lowercase y or n for your answer [y]: "
msg_53: .asciiz "n"
msg_54: .asciiz "

"
msg_55: .asciiz "Would you like to choose a background pattern? 
"
msg_56: .asciiz "Please use lowercase y or n for your answer [n]: "
msg_57: .asciiz "y"
msg_58: .asciiz "Welcome to the Game of Life.
"
msg_59: .asciiz "There are many initial states to choose from. 
"
.text
div_zero_error:
la $a0, div_zero
li $v0, 4
syscall
li $v0, 10
syscall
dispatch_void_error:
la $a0, dispatch_void
li $v0, 4
syscall
li $v0, 10
syscall
case_void_error:
la $a0, case_void
li $v0, 4
syscall
li $v0, 10
syscall
case_no_match_error:
la $a0, case_no_match
li $v0, 4
syscall
li $v0, 10
syscall
heap_error:
la $a0, heap
li $v0, 4
syscall
li $v0, 10
syscall
substr_error:
la $a0, substr
li $v0, 4
syscall
li $v0, 10
syscall
main:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Main:Class_name 9:Class_size
li $a0, 36
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Main_name
sw $t1, 4($t0)
li $t1, 9
sw $t1, 8($t0)
la $t1, Main_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Main_init
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main_init
sw $a1, 8($sp)
#CallNode Main.main
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main.main
sw $a1, 8($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Object_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Object.abort:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_0
la $t0, msg_0
sw $t0, 4($sp)
#PrintString msg_0
lw $a0, 4($sp)
li $v0, 4
syscall
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 8($sp)
#PrintString class_name_1
lw $a0, 8($sp)
li $v0, 4
syscall
#LoadStr msg_1
la $t0, msg_1
sw $t0, 12($sp)
#PrintString eol_2
lw $a0, 12($sp)
li $v0, 4
syscall
#Abort
li $v0, 10
syscall
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.type_name:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg class_name_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.copy:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#Copy self
lw $t0, 8($sp)
lw $a0, 8($t0)
mul $a0, $a0, 4
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t1, $v0
li $a0, 0
lw $t3, 8($t0)
copy_object:
lw $t2, 0($t0)
sw $t2, 0($t1)
addi $t0, $t0, 4
addi $t1, $t1, 4
addi $a0, $a0, 1
blt $a0, $t3, copy_object
sw $v0, 4($sp)
#Return object_copy_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
IO_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
IO.out_string:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = String.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintString v_0
lw $a0, 4($sp)
li $v0, 4
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.out_int:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = Int.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintInteger v_0
li $v0, 1
lw $a0, 4($sp)
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.in_string:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadString read_string_0
la $a0, input_str
li $a1, 2048
li $v0, 8
syscall
move $t0, $a0
read_char:
li $t1, 0
lb $t1, 0($t0)
beqz $t1, remove_characters_str_end
addi $t0, $t0, 1
j read_char
remove_characters_str_end:
addi $t0, $t0, -1
li $t1, 0
lb $t1, 0($t0)
bne $t1, 10, rcs_end
sb $0, 0($t0)
addi $t0, $t0, -1
lb $t1, 0($t0)
bne $t1, 13, rcs_end
sb $0, 0($t0)
j remove_characters_str_end
rcs_end:
sw $a0, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg read_string_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
IO.in_int:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadInteger read_int_0
li $v0, 5
syscall
sw $v0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg read_int_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Int_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Intvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Stringvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String.length:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Length of self
lw $t0, 16($sp)
lw $t0, 16($t0)
li $a0, 0
count:
lb $t1, 0($t0)
beqz $t1, end
addi $t0, $t0, 1
addi $a0, $a0, 1
j count
end:
sw $a0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg length_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
String.concat:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#CallNode String.length
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 8($sp)
#GetAttr str2_2 = String.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#CallNode String.length
move $t0, $sp
# Arg s
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 16($sp)
#GetAttr len1_value_4 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr len2_value_5 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#Concat str1_0 str2_2
lw $a0, 20($sp)
lw $t0, 24($sp)
add $a0, $a0, $t0
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t3, $v0
lw $t0, 4($sp)
lw $t1, 12($sp)
copy_str:
lb $t2, 0($t0)
sb $t2, 0($v0)
beqz $t2, concat_str
addi $t0, $t0, 1
addi $v0, $v0, 1
j copy_str
concat_str:
lb $t2, 0($t1)
sb $t2, 0($v0)
beqz $t2, end_concat_str
addi $t1, $t1, 1
addi $v0, $v0, 1
j concat_str
end_concat_str:
sb $0, ($v0)
sw $t3, 28($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg result_string_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#Return instance_7
lw $a1, 32($sp)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
String.substr:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr i_value_0 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr l_value_1 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Substr self:string i_value_0:index l_value_1:length
lw $a0, 8($sp)
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
lw $t0, 4($sp)
lw $t1, 8($sp)
lw $t4, 24($sp)
lw $t2, 16($t4)
bltz $t0, substr_error
li $a0, 0
skip_char:
beq $a0, $t0, end_skip
addi $a0, $a0, 1
addi $t2, $t2, 1
beq $t2, $zero, substr_error
j skip_char
end_skip:
li $a0, 0
move $t3, $v0
substr_copy:
beq $a0, $t1, end_substr_copy
li $t0, 0
lb $t0, 0($t2)
sb $t0, 0($v0)
addi $t2, $t2, 1
beq $t2, $zero, substr_error
addi $v0, $v0, 1
addi $a0, $a0, 1
j substr_copy
end_substr_copy:
sb $0, ($v0)
sw $t3, 12($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode String_init
move $t0, $sp
# Arg substr_result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 20($sp)
#Return instance_3
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Bool_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Boolvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_equals:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr str2_1 = String.value
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#StringEquals str1_0 = str2_1
lw $t1, 4($sp)
lw $t2, 8($sp)
compare_str:
li $t3, 0
lb $t3, 0($t1)
li $t4, 0
lb $t4, 0($t2)
seq $a0, $t3, $t4
beqz $a0, end_compare_str
beqz $t3, end_compare_str
beqz $t4, end_compare_str
addi $t1, $t1, 1
addi $t2, $t2, 1
j compare_str
end_compare_str:
sw $a0, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Board_init:
addi $sp, $sp, -40
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 0
li $t0, 0
sw $t0, 12($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 16($sp)
#SetAttr Boardrows = instance_1
lw $t0, 44($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#LoadInt 0
li $t0, 0
sw $t0, 24($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 28($sp)
#SetAttr Boardcolumns = instance_4
lw $t0, 44($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#LoadInt 0
li $t0, 0
sw $t0, 36($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 40($sp)
#SetAttr Boardboard_size = instance_7
lw $t0, 44($sp)
lw $t1, 32($sp)
sw $t1, 24($t0)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
Board.size_of_board:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall length
move $t0, $sp
# Arg initial
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
Board.board_init:
addi $sp, $sp, -480
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall size_of_board
move $t0, $sp
# Arg start
lw $t1, 488($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 484($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 484($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 4($sp)
#AssignNode size_1 = result_0
lw $t1, 4($sp)
sw $t1, 8($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#LoadInt 15
li $t0, 15
sw $t0, 36($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 40($sp)
#GetAttr left_5 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#GetAttr right_6 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 28($sp)
#BinaryOperator left_5 = right_6
lw $a0, 24($sp)
lw $t1, 28($sp)
seq $a0, $a0, $t1
sw $a0, 20($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 44($sp)
# IFGoto result_3 -> label_1
lw $t0, 16($sp)
lw $a0, 16($t0)
bnez $a0, label_1
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#LoadInt 16
li $t0, 16
sw $t0, 72($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 76($sp)
#GetAttr left_14 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 60($sp)
#GetAttr right_15 = Int.value
lw $t0, 68($sp)
lw $t1, 16($t0)
sw $t1, 64($sp)
#BinaryOperator left_14 = right_15
lw $a0, 60($sp)
lw $t1, 64($sp)
seq $a0, $a0, $t1
sw $a0, 56($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 52($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 80($sp)
# IFGoto result_12 -> label_2
lw $t0, 52($sp)
lw $a0, 16($t0)
bnez $a0, label_2
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 104($sp)
#LoadInt 20
li $t0, 20
sw $t0, 108($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_26
lw $t1, 108($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 112($sp)
#GetAttr left_23 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 96($sp)
#GetAttr right_24 = Int.value
lw $t0, 104($sp)
lw $t1, 16($t0)
sw $t1, 100($sp)
#BinaryOperator left_23 = right_24
lw $a0, 96($sp)
lw $t1, 100($sp)
seq $a0, $a0, $t1
sw $a0, 92($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 88($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 116($sp)
# IFGoto result_21 -> label_3
lw $t0, 88($sp)
lw $a0, 16($t0)
bnez $a0, label_3
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 140($sp)
#LoadInt 21
li $t0, 21
sw $t0, 144($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 148($sp)
#GetAttr left_32 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 132($sp)
#GetAttr right_33 = Int.value
lw $t0, 140($sp)
lw $t1, 16($t0)
sw $t1, 136($sp)
#BinaryOperator left_32 = right_33
lw $a0, 132($sp)
lw $t1, 136($sp)
seq $a0, $a0, $t1
sw $a0, 128($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 124($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_31
lw $t1, 128($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 152($sp)
# IFGoto result_30 -> label_4
lw $t0, 124($sp)
lw $a0, 16($t0)
bnez $a0, label_4
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 176($sp)
#LoadInt 25
li $t0, 25
sw $t0, 180($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_44
lw $t1, 180($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_43
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 184($sp)
#GetAttr left_41 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 168($sp)
#GetAttr right_42 = Int.value
lw $t0, 176($sp)
lw $t1, 16($t0)
sw $t1, 172($sp)
#BinaryOperator left_41 = right_42
lw $a0, 168($sp)
lw $t1, 172($sp)
seq $a0, $a0, $t1
sw $a0, 164($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 160($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 188($sp)
# IFGoto result_39 -> label_5
lw $t0, 160($sp)
lw $a0, 16($t0)
bnez $a0, label_5
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 212($sp)
#LoadInt 28
li $t0, 28
sw $t0, 216($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_53
lw $t1, 216($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_52
lw $t1, 212($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 220($sp)
#GetAttr left_50 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 204($sp)
#GetAttr right_51 = Int.value
lw $t0, 212($sp)
lw $t1, 16($t0)
sw $t1, 208($sp)
#BinaryOperator left_50 = right_51
lw $a0, 204($sp)
lw $t1, 208($sp)
seq $a0, $a0, $t1
sw $a0, 200($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 196($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_49
lw $t1, 200($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_48
lw $t1, 196($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 224($sp)
# IFGoto result_48 -> label_6
lw $t0, 196($sp)
lw $a0, 16($t0)
bnez $a0, label_6
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 228($sp)
#LoadInt 5
li $t0, 5
sw $t0, 232($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_57
lw $t1, 232($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_56
lw $t1, 228($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 236($sp)
#SetAttr Boardrows = instance_56
lw $t0, 484($sp)
lw $t1, 228($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 244($sp)
#LoadInt 5
li $t0, 5
sw $t0, 248($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_61
lw $t1, 248($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_60
lw $t1, 244($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 252($sp)
#SetAttr Boardcolumns = instance_60
lw $t0, 484($sp)
lw $t1, 244($sp)
sw $t1, 20($t0)
#SetAttr Boardboard_size = size_1
lw $t0, 484($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
#AssignNode result_47 = size_1
lw $t1, 8($sp)
sw $t1, 192($sp)
#Goto label_7
b label_7
#LabelNode label_6
label_6:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 264($sp)
#LoadInt 7
li $t0, 7
sw $t0, 268($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_66
lw $t1, 268($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_65
lw $t1, 264($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 272($sp)
#SetAttr Boardrows = instance_65
lw $t0, 484($sp)
lw $t1, 264($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 280($sp)
#LoadInt 4
li $t0, 4
sw $t0, 284($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_70
lw $t1, 284($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_69
lw $t1, 280($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 288($sp)
#SetAttr Boardcolumns = instance_69
lw $t0, 484($sp)
lw $t1, 280($sp)
sw $t1, 20($t0)
#SetAttr Boardboard_size = size_1
lw $t0, 484($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
#AssignNode result_47 = size_1
lw $t1, 8($sp)
sw $t1, 192($sp)
#LabelNode label_7
label_7:
#AssignNode result_38 = result_47
lw $t1, 192($sp)
sw $t1, 156($sp)
#Goto label_8
b label_8
#LabelNode label_5
label_5:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 300($sp)
#LoadInt 5
li $t0, 5
sw $t0, 304($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_75
lw $t1, 304($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_74
lw $t1, 300($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 308($sp)
#SetAttr Boardrows = instance_74
lw $t0, 484($sp)
lw $t1, 300($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 316($sp)
#LoadInt 5
li $t0, 5
sw $t0, 320($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_79
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_78
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 324($sp)
#SetAttr Boardcolumns = instance_78
lw $t0, 484($sp)
lw $t1, 316($sp)
sw $t1, 20($t0)
#SetAttr Boardboard_size = size_1
lw $t0, 484($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
#AssignNode result_38 = size_1
lw $t1, 8($sp)
sw $t1, 156($sp)
#LabelNode label_8
label_8:
#AssignNode result_29 = result_38
lw $t1, 156($sp)
sw $t1, 120($sp)
#Goto label_9
b label_9
#LabelNode label_4
label_4:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 336($sp)
#LoadInt 3
li $t0, 3
sw $t0, 340($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_84
lw $t1, 340($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_83
lw $t1, 336($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 344($sp)
#SetAttr Boardrows = instance_83
lw $t0, 484($sp)
lw $t1, 336($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 352($sp)
#LoadInt 7
li $t0, 7
sw $t0, 356($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_88
lw $t1, 356($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_87
lw $t1, 352($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 360($sp)
#SetAttr Boardcolumns = instance_87
lw $t0, 484($sp)
lw $t1, 352($sp)
sw $t1, 20($t0)
#SetAttr Boardboard_size = size_1
lw $t0, 484($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
#AssignNode result_29 = size_1
lw $t1, 8($sp)
sw $t1, 120($sp)
#LabelNode label_9
label_9:
#AssignNode result_20 = result_29
lw $t1, 120($sp)
sw $t1, 84($sp)
#Goto label_10
b label_10
#LabelNode label_3
label_3:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 372($sp)
#LoadInt 4
li $t0, 4
sw $t0, 376($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_93
lw $t1, 376($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_92
lw $t1, 372($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 380($sp)
#SetAttr Boardrows = instance_92
lw $t0, 484($sp)
lw $t1, 372($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 388($sp)
#LoadInt 5
li $t0, 5
sw $t0, 392($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_97
lw $t1, 392($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_96
lw $t1, 388($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 396($sp)
#SetAttr Boardcolumns = instance_96
lw $t0, 484($sp)
lw $t1, 388($sp)
sw $t1, 20($t0)
#SetAttr Boardboard_size = size_1
lw $t0, 484($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
#AssignNode result_20 = size_1
lw $t1, 8($sp)
sw $t1, 84($sp)
#LabelNode label_10
label_10:
#AssignNode result_11 = result_20
lw $t1, 84($sp)
sw $t1, 48($sp)
#Goto label_11
b label_11
#LabelNode label_2
label_2:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 408($sp)
#LoadInt 4
li $t0, 4
sw $t0, 412($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_102
lw $t1, 412($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_101
lw $t1, 408($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 416($sp)
#SetAttr Boardrows = instance_101
lw $t0, 484($sp)
lw $t1, 408($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 424($sp)
#LoadInt 4
li $t0, 4
sw $t0, 428($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_106
lw $t1, 428($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_105
lw $t1, 424($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 432($sp)
#SetAttr Boardcolumns = instance_105
lw $t0, 484($sp)
lw $t1, 424($sp)
sw $t1, 20($t0)
#SetAttr Boardboard_size = size_1
lw $t0, 484($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
#AssignNode result_11 = size_1
lw $t1, 8($sp)
sw $t1, 48($sp)
#LabelNode label_11
label_11:
#AssignNode result_2 = result_11
lw $t1, 48($sp)
sw $t1, 12($sp)
#Goto label_12
b label_12
#LabelNode label_1
label_1:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 444($sp)
#LoadInt 3
li $t0, 3
sw $t0, 448($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_111
lw $t1, 448($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_110
lw $t1, 444($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 452($sp)
#SetAttr Boardrows = instance_110
lw $t0, 484($sp)
lw $t1, 444($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 460($sp)
#LoadInt 5
li $t0, 5
sw $t0, 464($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_115
lw $t1, 464($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_114
lw $t1, 460($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 468($sp)
#SetAttr Boardcolumns = instance_114
lw $t0, 484($sp)
lw $t1, 460($sp)
sw $t1, 20($t0)
#SetAttr Boardboard_size = size_1
lw $t0, 484($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
#AssignNode result_2 = size_1
lw $t1, 8($sp)
sw $t1, 12($sp)
#LabelNode label_12
label_12:
#AssignNode result_119 = self
lw $t1, 484($sp)
sw $t1, 480($sp)
#Return result_119
lw $a1, 480($sp)
lw $ra, 0($sp)
addi $sp, $sp, 492
jr $ra
CellularAutomaton_init:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Board_init
move $t0, $sp
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Board_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 12($sp)
#CallNode String_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 16($sp)
#SetAttr CellularAutomatonpopulation_map = instance_1
lw $t0, 20($sp)
lw $t1, 8($sp)
sw $t1, 28($t0)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
CellularAutomaton.init:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr CellularAutomatonpopulation_map = map
lw $t0, 12($sp)
lw $t1, 16($sp)
sw $t1, 28($t0)
#VCall board_init
move $t0, $sp
# Arg map
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 8($sp)
#Return self
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
CellularAutomaton.print:
addi $sp, $sp, -148
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#AssignNode i_3 = instance_0
lw $t1, 4($sp)
sw $t1, 16($sp)
#GetAttr CellularAutomaton.board_size = CellularAutomaton.board_size
lw $t0, 152($sp)
lw $t1, 24($t0)
sw $t1, 20($sp)
#AssignNode num_5 = CellularAutomaton.board_size
lw $t1, 20($sp)
sw $t1, 24($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 32($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 36($sp)
#CallNode String_init
move $t0, $sp
# Arg l_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 40($sp)
#VCall out_string
move $t0, $sp
# Arg instance_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 152($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 28($sp)
#LabelNode label_13
label_13:
#GetAttr left_13 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 56($sp)
#GetAttr right_14 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 60($sp)
#BinaryOperator left_13 < right_14
lw $a0, 56($sp)
lw $t1, 60($sp)
slt $a0, $a0, $t1
sw $a0, 52($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 64($sp)
# IFGoto result_11 -> label_14
lw $t0, 48($sp)
lw $a0, 16($t0)
bnez $a0, label_14
#Goto label_15
b label_15
#LabelNode label_14
label_14:
#GetAttr CellularAutomaton.population_map = CellularAutomaton.population_map
lw $t0, 152($sp)
lw $t1, 28($t0)
sw $t1, 76($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 152($sp)
lw $t1, 20($t0)
sw $t1, 116($sp)
#VCall substr
move $t0, $sp
# Arg CellularAutomaton.columns
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg i_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg CellularAutomaton.population_map
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 76($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 72($sp)
#VCall out_string
move $t0, $sp
# Arg result_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 152($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 68($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 88($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 92($sp)
#CallNode String_init
move $t0, $sp
# Arg l_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 96($sp)
#VCall out_string
move $t0, $sp
# Arg instance_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 152($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 84($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 152($sp)
lw $t1, 20($t0)
sw $t1, 116($sp)
#GetAttr left_26 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 108($sp)
#GetAttr right_27 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 112($sp)
#BinaryOperator left_26 + right_27
lw $a0, 108($sp)
lw $t1, 112($sp)
add $a0, $a0, $t1
sw $a0, 104($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 120($sp)
#AssignNode i_3 = result_24
lw $t1, 100($sp)
sw $t1, 16($sp)
#Goto label_13
b label_13
#LabelNode label_15
label_15:
#LoadStr msg_1
la $t0, msg_1
sw $t0, 132($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 136($sp)
#CallNode String_init
move $t0, $sp
# Arg l_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 140($sp)
#VCall out_string
move $t0, $sp
# Arg instance_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 152($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 128($sp)
#AssignNode result_35 = self
lw $t1, 152($sp)
sw $t1, 144($sp)
#AssignNode result_36 = result_35
lw $t1, 144($sp)
sw $t1, 148($sp)
#Return result_36
lw $a1, 148($sp)
lw $ra, 0($sp)
addi $sp, $sp, 156
jr $ra
CellularAutomaton.num_cells:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.population_map = CellularAutomaton.population_map
lw $t0, 12($sp)
lw $t1, 28($t0)
sw $t1, 8($sp)
#VCall length
move $t0, $sp
# Arg CellularAutomaton.population_map
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
CellularAutomaton.cell:
addi $sp, $sp, -92
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.board_size = CellularAutomaton.board_size
lw $t0, 96($sp)
lw $t1, 24($t0)
sw $t1, 40($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#LoadInt 1
li $t0, 1
sw $t0, 48($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 52($sp)
#GetAttr left_7 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 32($sp)
#GetAttr right_8 = Int.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#BinaryOperator left_7 - right_8
lw $a0, 32($sp)
lw $t1, 36($sp)
sub $a0, $a0, $t1
sw $a0, 28($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 56($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 60($sp)
# IFGoto result_1 -> label_16
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_16
#GetAttr CellularAutomaton.population_map = CellularAutomaton.population_map
lw $t0, 96($sp)
lw $t1, 28($t0)
sw $t1, 68($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 72($sp)
#LoadInt 1
li $t0, 1
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 80($sp)
#VCall substr
move $t0, $sp
# Arg instance_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg position
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg CellularAutomaton.population_map
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 68($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 64($sp)
#AssignNode result_0 = result_15
lw $t1, 64($sp)
sw $t1, 4($sp)
#Goto label_17
b label_17
#LabelNode label_16
label_16:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 84($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 88($sp)
#CallNode String_init
move $t0, $sp
# Arg l_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 92($sp)
#AssignNode result_0 = instance_21
lw $t1, 88($sp)
sw $t1, 4($sp)
#LabelNode label_17
label_17:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 104
jr $ra
CellularAutomaton.north:
addi $sp, $sp, -100
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 104($sp)
lw $t1, 20($t0)
sw $t1, 84($sp)
#GetAttr left_7 = Int.value
lw $t0, 108($sp)
lw $t1, 16($t0)
sw $t1, 32($sp)
#GetAttr right_8 = Int.value
lw $t0, 84($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#BinaryOperator left_7 - right_8
lw $a0, 32($sp)
lw $t1, 36($sp)
sub $a0, $a0, $t1
sw $a0, 28($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 44($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#LoadInt 0
li $t0, 0
sw $t0, 52($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 56($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 48($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 60($sp)
# IFGoto result_1 -> label_18
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_18
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 104($sp)
lw $t1, 20($t0)
sw $t1, 84($sp)
#GetAttr left_18 = Int.value
lw $t0, 108($sp)
lw $t1, 16($t0)
sw $t1, 76($sp)
#GetAttr right_19 = Int.value
lw $t0, 84($sp)
lw $t1, 16($t0)
sw $t1, 80($sp)
#BinaryOperator left_18 - right_19
lw $a0, 76($sp)
lw $t1, 80($sp)
sub $a0, $a0, $t1
sw $a0, 72($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 88($sp)
#VCall cell
move $t0, $sp
# Arg result_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 104($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 64($sp)
#AssignNode result_0 = result_15
lw $t1, 64($sp)
sw $t1, 4($sp)
#Goto label_19
b label_19
#LabelNode label_18
label_18:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 92($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 96($sp)
#CallNode String_init
move $t0, $sp
# Arg l_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 100($sp)
#AssignNode result_0 = instance_23
lw $t1, 96($sp)
sw $t1, 4($sp)
#LabelNode label_19
label_19:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 112
jr $ra
CellularAutomaton.south:
addi $sp, $sp, -92
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.board_size = CellularAutomaton.board_size
lw $t0, 96($sp)
lw $t1, 24($t0)
sw $t1, 24($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 96($sp)
lw $t1, 20($t0)
sw $t1, 76($sp)
#GetAttr left_8 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#GetAttr right_9 = Int.value
lw $t0, 76($sp)
lw $t1, 16($t0)
sw $t1, 40($sp)
#BinaryOperator left_8 + right_9
lw $a0, 36($sp)
lw $t1, 40($sp)
add $a0, $a0, $t1
sw $a0, 32($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 48($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 52($sp)
# IFGoto result_1 -> label_20
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_20
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 96($sp)
lw $t1, 20($t0)
sw $t1, 76($sp)
#GetAttr left_16 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 68($sp)
#GetAttr right_17 = Int.value
lw $t0, 76($sp)
lw $t1, 16($t0)
sw $t1, 72($sp)
#BinaryOperator left_16 + right_17
lw $a0, 68($sp)
lw $t1, 72($sp)
add $a0, $a0, $t1
sw $a0, 64($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 80($sp)
#VCall cell
move $t0, $sp
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 96($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 56($sp)
#AssignNode result_0 = result_13
lw $t1, 56($sp)
sw $t1, 4($sp)
#Goto label_21
b label_21
#LabelNode label_20
label_20:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 84($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 88($sp)
#CallNode String_init
move $t0, $sp
# Arg l_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 92($sp)
#AssignNode result_0 = instance_21
lw $t1, 88($sp)
sw $t1, 4($sp)
#LabelNode label_21
label_21:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 104
jr $ra
CellularAutomaton.east:
addi $sp, $sp, -184
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 72($sp)
#LoadInt 1
li $t0, 1
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 80($sp)
#GetAttr left_15 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 64($sp)
#GetAttr right_16 = Int.value
lw $t0, 72($sp)
lw $t1, 16($t0)
sw $t1, 68($sp)
#BinaryOperator left_15 + right_16
lw $a0, 64($sp)
lw $t1, 68($sp)
add $a0, $a0, $t1
sw $a0, 60($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 56($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 84($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 188($sp)
lw $t1, 20($t0)
sw $t1, 96($sp)
#GetAttr left_11 = Int.value
lw $t0, 56($sp)
lw $t1, 16($t0)
sw $t1, 48($sp)
#GetAttr right_12 = Int.value
lw $t0, 96($sp)
lw $t1, 16($t0)
sw $t1, 52($sp)
#BinaryOperator left_11 / right_12
lw $a0, 48($sp)
lw $t1, 52($sp)
beq $t1, 0, div_zero_error
div $a0, $a0, $t1
sw $a0, 44($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 40($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 92($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 188($sp)
lw $t1, 20($t0)
sw $t1, 96($sp)
#GetAttr left_7 = Int.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 32($sp)
#GetAttr right_8 = Int.value
lw $t0, 96($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#BinaryOperator left_7 * right_8
lw $a0, 32($sp)
lw $t1, 36($sp)
mul $a0, $a0, $t1
sw $a0, 28($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 100($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 120($sp)
#LoadInt 1
li $t0, 1
sw $t0, 124($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 128($sp)
#GetAttr left_27 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 112($sp)
#GetAttr right_28 = Int.value
lw $t0, 120($sp)
lw $t1, 16($t0)
sw $t1, 116($sp)
#BinaryOperator left_27 + right_28
lw $a0, 112($sp)
lw $t1, 116($sp)
add $a0, $a0, $t1
sw $a0, 108($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 104($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_26
lw $t1, 108($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 132($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 104($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 = right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
seq $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 136($sp)
# IFGoto result_1 -> label_22
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_22
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 160($sp)
#LoadInt 1
li $t0, 1
sw $t0, 164($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 168($sp)
#GetAttr left_37 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 152($sp)
#GetAttr right_38 = Int.value
lw $t0, 160($sp)
lw $t1, 16($t0)
sw $t1, 156($sp)
#BinaryOperator left_37 + right_38
lw $a0, 152($sp)
lw $t1, 156($sp)
add $a0, $a0, $t1
sw $a0, 148($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 144($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 172($sp)
#VCall cell
move $t0, $sp
# Arg result_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 188($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 140($sp)
#AssignNode result_0 = result_34
lw $t1, 140($sp)
sw $t1, 4($sp)
#Goto label_23
b label_23
#LabelNode label_22
label_22:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 176($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 180($sp)
#CallNode String_init
move $t0, $sp
# Arg l_43
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_44
lw $t1, 180($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 184($sp)
#AssignNode result_0 = instance_44
lw $t1, 180($sp)
sw $t1, 4($sp)
#LabelNode label_23
label_23:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 196
jr $ra
CellularAutomaton.west:
addi $sp, $sp, -168
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#LoadInt 0
li $t0, 0
sw $t0, 28($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 32($sp)
#GetAttr left_3 = Int.value
lw $t0, 176($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 = right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
seq $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 36($sp)
# IFGoto result_1 -> label_24
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_24
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 172($sp)
lw $t1, 20($t0)
sw $t1, 100($sp)
#GetAttr left_20 = Int.value
lw $t0, 176($sp)
lw $t1, 16($t0)
sw $t1, 84($sp)
#GetAttr right_21 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 88($sp)
#BinaryOperator left_20 / right_21
lw $a0, 84($sp)
lw $t1, 88($sp)
beq $t1, 0, div_zero_error
div $a0, $a0, $t1
sw $a0, 80($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 96($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 172($sp)
lw $t1, 20($t0)
sw $t1, 100($sp)
#GetAttr left_16 = Int.value
lw $t0, 76($sp)
lw $t1, 16($t0)
sw $t1, 68($sp)
#GetAttr right_17 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 72($sp)
#BinaryOperator left_16 * right_17
lw $a0, 68($sp)
lw $t1, 72($sp)
mul $a0, $a0, $t1
sw $a0, 64($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 104($sp)
#GetAttr left_12 = Int.value
lw $t0, 60($sp)
lw $t1, 16($t0)
sw $t1, 52($sp)
#GetAttr right_13 = Int.value
lw $t0, 176($sp)
lw $t1, 16($t0)
sw $t1, 56($sp)
#BinaryOperator left_12 = right_13
lw $a0, 52($sp)
lw $t1, 56($sp)
seq $a0, $a0, $t1
sw $a0, 48($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 108($sp)
# IFGoto result_10 -> label_25
lw $t0, 44($sp)
lw $a0, 16($t0)
bnez $a0, label_25
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 132($sp)
#LoadInt 1
li $t0, 1
sw $t0, 136($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 140($sp)
#GetAttr left_30 = Int.value
lw $t0, 176($sp)
lw $t1, 16($t0)
sw $t1, 124($sp)
#GetAttr right_31 = Int.value
lw $t0, 132($sp)
lw $t1, 16($t0)
sw $t1, 128($sp)
#BinaryOperator left_30 - right_31
lw $a0, 124($sp)
lw $t1, 128($sp)
sub $a0, $a0, $t1
sw $a0, 120($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 116($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 144($sp)
#VCall cell
move $t0, $sp
# Arg result_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 172($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 112($sp)
#AssignNode result_9 = result_27
lw $t1, 112($sp)
sw $t1, 40($sp)
#Goto label_26
b label_26
#LabelNode label_25
label_25:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 148($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 152($sp)
#CallNode String_init
move $t0, $sp
# Arg l_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_37
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 156($sp)
#AssignNode result_9 = instance_37
lw $t1, 152($sp)
sw $t1, 40($sp)
#LabelNode label_26
label_26:
#AssignNode result_0 = result_9
lw $t1, 40($sp)
sw $t1, 4($sp)
#Goto label_27
b label_27
#LabelNode label_24
label_24:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 160($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 164($sp)
#CallNode String_init
move $t0, $sp
# Arg l_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 168($sp)
#AssignNode result_0 = instance_40
lw $t1, 164($sp)
sw $t1, 4($sp)
#LabelNode label_27
label_27:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 180
jr $ra
CellularAutomaton.northwest:
addi $sp, $sp, -192
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 196($sp)
lw $t1, 20($t0)
sw $t1, 124($sp)
#GetAttr left_7 = Int.value
lw $t0, 200($sp)
lw $t1, 16($t0)
sw $t1, 32($sp)
#GetAttr right_8 = Int.value
lw $t0, 124($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#BinaryOperator left_7 - right_8
lw $a0, 32($sp)
lw $t1, 36($sp)
sub $a0, $a0, $t1
sw $a0, 28($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 44($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#LoadInt 0
li $t0, 0
sw $t0, 52($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 56($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 48($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 60($sp)
# IFGoto result_1 -> label_28
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_28
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 196($sp)
lw $t1, 20($t0)
sw $t1, 124($sp)
#GetAttr left_26 = Int.value
lw $t0, 200($sp)
lw $t1, 16($t0)
sw $t1, 108($sp)
#GetAttr right_27 = Int.value
lw $t0, 124($sp)
lw $t1, 16($t0)
sw $t1, 112($sp)
#BinaryOperator left_26 / right_27
lw $a0, 108($sp)
lw $t1, 112($sp)
beq $t1, 0, div_zero_error
div $a0, $a0, $t1
sw $a0, 104($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 120($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 196($sp)
lw $t1, 20($t0)
sw $t1, 124($sp)
#GetAttr left_22 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 92($sp)
#GetAttr right_23 = Int.value
lw $t0, 124($sp)
lw $t1, 16($t0)
sw $t1, 96($sp)
#BinaryOperator left_22 * right_23
lw $a0, 92($sp)
lw $t1, 96($sp)
mul $a0, $a0, $t1
sw $a0, 88($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 84($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 128($sp)
#GetAttr left_18 = Int.value
lw $t0, 84($sp)
lw $t1, 16($t0)
sw $t1, 76($sp)
#GetAttr right_19 = Int.value
lw $t0, 200($sp)
lw $t1, 16($t0)
sw $t1, 80($sp)
#BinaryOperator left_18 = right_19
lw $a0, 76($sp)
lw $t1, 80($sp)
seq $a0, $a0, $t1
sw $a0, 72($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 132($sp)
# IFGoto result_16 -> label_29
lw $t0, 68($sp)
lw $a0, 16($t0)
bnez $a0, label_29
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 156($sp)
#LoadInt 1
li $t0, 1
sw $t0, 160($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_38
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 164($sp)
#GetAttr left_36 = Int.value
lw $t0, 200($sp)
lw $t1, 16($t0)
sw $t1, 148($sp)
#GetAttr right_37 = Int.value
lw $t0, 156($sp)
lw $t1, 16($t0)
sw $t1, 152($sp)
#BinaryOperator left_36 - right_37
lw $a0, 148($sp)
lw $t1, 152($sp)
sub $a0, $a0, $t1
sw $a0, 144($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 140($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 168($sp)
#VCall north
move $t0, $sp
# Arg result_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 196($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 196($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 52($t2)
jal $t3
sw $a1, 136($sp)
#AssignNode result_15 = result_33
lw $t1, 136($sp)
sw $t1, 64($sp)
#Goto label_30
b label_30
#LabelNode label_29
label_29:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 172($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 176($sp)
#CallNode String_init
move $t0, $sp
# Arg l_42
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_43
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 180($sp)
#AssignNode result_15 = instance_43
lw $t1, 176($sp)
sw $t1, 64($sp)
#LabelNode label_30
label_30:
#AssignNode result_0 = result_15
lw $t1, 64($sp)
sw $t1, 4($sp)
#Goto label_31
b label_31
#LabelNode label_28
label_28:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 184($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 188($sp)
#CallNode String_init
move $t0, $sp
# Arg l_45
lw $t1, 184($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_46
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 192($sp)
#AssignNode result_0 = instance_46
lw $t1, 188($sp)
sw $t1, 4($sp)
#LabelNode label_31
label_31:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 204
jr $ra
CellularAutomaton.northeast:
addi $sp, $sp, -256
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 260($sp)
lw $t1, 20($t0)
sw $t1, 156($sp)
#GetAttr left_7 = Int.value
lw $t0, 264($sp)
lw $t1, 16($t0)
sw $t1, 32($sp)
#GetAttr right_8 = Int.value
lw $t0, 156($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#BinaryOperator left_7 - right_8
lw $a0, 32($sp)
lw $t1, 36($sp)
sub $a0, $a0, $t1
sw $a0, 28($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 44($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#LoadInt 0
li $t0, 0
sw $t0, 52($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 56($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 48($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 60($sp)
# IFGoto result_1 -> label_32
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_32
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 132($sp)
#LoadInt 1
li $t0, 1
sw $t0, 136($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 140($sp)
#GetAttr left_30 = Int.value
lw $t0, 264($sp)
lw $t1, 16($t0)
sw $t1, 124($sp)
#GetAttr right_31 = Int.value
lw $t0, 132($sp)
lw $t1, 16($t0)
sw $t1, 128($sp)
#BinaryOperator left_30 + right_31
lw $a0, 124($sp)
lw $t1, 128($sp)
add $a0, $a0, $t1
sw $a0, 120($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 116($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 144($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 260($sp)
lw $t1, 20($t0)
sw $t1, 156($sp)
#GetAttr left_26 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 108($sp)
#GetAttr right_27 = Int.value
lw $t0, 156($sp)
lw $t1, 16($t0)
sw $t1, 112($sp)
#BinaryOperator left_26 / right_27
lw $a0, 108($sp)
lw $t1, 112($sp)
beq $t1, 0, div_zero_error
div $a0, $a0, $t1
sw $a0, 104($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 152($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 260($sp)
lw $t1, 20($t0)
sw $t1, 156($sp)
#GetAttr left_22 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 92($sp)
#GetAttr right_23 = Int.value
lw $t0, 156($sp)
lw $t1, 16($t0)
sw $t1, 96($sp)
#BinaryOperator left_22 * right_23
lw $a0, 92($sp)
lw $t1, 96($sp)
mul $a0, $a0, $t1
sw $a0, 88($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 84($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 160($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 180($sp)
#LoadInt 1
li $t0, 1
sw $t0, 184($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_45
lw $t1, 184($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_44
lw $t1, 180($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 188($sp)
#GetAttr left_42 = Int.value
lw $t0, 264($sp)
lw $t1, 16($t0)
sw $t1, 172($sp)
#GetAttr right_43 = Int.value
lw $t0, 180($sp)
lw $t1, 16($t0)
sw $t1, 176($sp)
#BinaryOperator left_42 + right_43
lw $a0, 172($sp)
lw $t1, 176($sp)
add $a0, $a0, $t1
sw $a0, 168($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 164($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_41
lw $t1, 168($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 192($sp)
#GetAttr left_18 = Int.value
lw $t0, 84($sp)
lw $t1, 16($t0)
sw $t1, 76($sp)
#GetAttr right_19 = Int.value
lw $t0, 164($sp)
lw $t1, 16($t0)
sw $t1, 80($sp)
#BinaryOperator left_18 = right_19
lw $a0, 76($sp)
lw $t1, 80($sp)
seq $a0, $a0, $t1
sw $a0, 72($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 196($sp)
# IFGoto result_16 -> label_33
lw $t0, 68($sp)
lw $a0, 16($t0)
bnez $a0, label_33
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 220($sp)
#LoadInt 1
li $t0, 1
sw $t0, 224($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_55
lw $t1, 224($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 228($sp)
#GetAttr left_52 = Int.value
lw $t0, 264($sp)
lw $t1, 16($t0)
sw $t1, 212($sp)
#GetAttr right_53 = Int.value
lw $t0, 220($sp)
lw $t1, 16($t0)
sw $t1, 216($sp)
#BinaryOperator left_52 + right_53
lw $a0, 212($sp)
lw $t1, 216($sp)
add $a0, $a0, $t1
sw $a0, 208($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 204($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_51
lw $t1, 208($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 232($sp)
#VCall north
move $t0, $sp
# Arg result_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 260($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 260($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 52($t2)
jal $t3
sw $a1, 200($sp)
#AssignNode result_15 = result_49
lw $t1, 200($sp)
sw $t1, 64($sp)
#Goto label_34
b label_34
#LabelNode label_33
label_33:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 236($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 240($sp)
#CallNode String_init
move $t0, $sp
# Arg l_58
lw $t1, 236($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_59
lw $t1, 240($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 244($sp)
#AssignNode result_15 = instance_59
lw $t1, 240($sp)
sw $t1, 64($sp)
#LabelNode label_34
label_34:
#AssignNode result_0 = result_15
lw $t1, 64($sp)
sw $t1, 4($sp)
#Goto label_35
b label_35
#LabelNode label_32
label_32:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 248($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 252($sp)
#CallNode String_init
move $t0, $sp
# Arg l_61
lw $t1, 248($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_62
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 256($sp)
#AssignNode result_0 = instance_62
lw $t1, 252($sp)
sw $t1, 4($sp)
#LabelNode label_35
label_35:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 268
jr $ra
CellularAutomaton.southeast:
addi $sp, $sp, -248
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.board_size = CellularAutomaton.board_size
lw $t0, 252($sp)
lw $t1, 24($t0)
sw $t1, 24($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 252($sp)
lw $t1, 20($t0)
sw $t1, 148($sp)
#GetAttr left_8 = Int.value
lw $t0, 256($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#GetAttr right_9 = Int.value
lw $t0, 148($sp)
lw $t1, 16($t0)
sw $t1, 40($sp)
#BinaryOperator left_8 + right_9
lw $a0, 36($sp)
lw $t1, 40($sp)
add $a0, $a0, $t1
sw $a0, 32($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 48($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 52($sp)
# IFGoto result_1 -> label_36
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_36
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 124($sp)
#LoadInt 1
li $t0, 1
sw $t0, 128($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_31
lw $t1, 128($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 132($sp)
#GetAttr left_28 = Int.value
lw $t0, 256($sp)
lw $t1, 16($t0)
sw $t1, 116($sp)
#GetAttr right_29 = Int.value
lw $t0, 124($sp)
lw $t1, 16($t0)
sw $t1, 120($sp)
#BinaryOperator left_28 + right_29
lw $a0, 116($sp)
lw $t1, 120($sp)
add $a0, $a0, $t1
sw $a0, 112($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 108($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_26
lw $t1, 108($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 136($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 252($sp)
lw $t1, 20($t0)
sw $t1, 148($sp)
#GetAttr left_24 = Int.value
lw $t0, 108($sp)
lw $t1, 16($t0)
sw $t1, 100($sp)
#GetAttr right_25 = Int.value
lw $t0, 148($sp)
lw $t1, 16($t0)
sw $t1, 104($sp)
#BinaryOperator left_24 / right_25
lw $a0, 100($sp)
lw $t1, 104($sp)
beq $t1, 0, div_zero_error
div $a0, $a0, $t1
sw $a0, 96($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 92($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 144($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 252($sp)
lw $t1, 20($t0)
sw $t1, 148($sp)
#GetAttr left_20 = Int.value
lw $t0, 92($sp)
lw $t1, 16($t0)
sw $t1, 84($sp)
#GetAttr right_21 = Int.value
lw $t0, 148($sp)
lw $t1, 16($t0)
sw $t1, 88($sp)
#BinaryOperator left_20 * right_21
lw $a0, 84($sp)
lw $t1, 88($sp)
mul $a0, $a0, $t1
sw $a0, 80($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 152($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 172($sp)
#LoadInt 1
li $t0, 1
sw $t0, 176($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_43
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_42
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 180($sp)
#GetAttr left_40 = Int.value
lw $t0, 256($sp)
lw $t1, 16($t0)
sw $t1, 164($sp)
#GetAttr right_41 = Int.value
lw $t0, 172($sp)
lw $t1, 16($t0)
sw $t1, 168($sp)
#BinaryOperator left_40 + right_41
lw $a0, 164($sp)
lw $t1, 168($sp)
add $a0, $a0, $t1
sw $a0, 160($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 156($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_38
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 184($sp)
#GetAttr left_16 = Int.value
lw $t0, 76($sp)
lw $t1, 16($t0)
sw $t1, 68($sp)
#GetAttr right_17 = Int.value
lw $t0, 156($sp)
lw $t1, 16($t0)
sw $t1, 72($sp)
#BinaryOperator left_16 = right_17
lw $a0, 68($sp)
lw $t1, 72($sp)
seq $a0, $a0, $t1
sw $a0, 64($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 188($sp)
# IFGoto result_14 -> label_37
lw $t0, 60($sp)
lw $a0, 16($t0)
bnez $a0, label_37
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 212($sp)
#LoadInt 1
li $t0, 1
sw $t0, 216($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_53
lw $t1, 216($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_52
lw $t1, 212($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 220($sp)
#GetAttr left_50 = Int.value
lw $t0, 256($sp)
lw $t1, 16($t0)
sw $t1, 204($sp)
#GetAttr right_51 = Int.value
lw $t0, 212($sp)
lw $t1, 16($t0)
sw $t1, 208($sp)
#BinaryOperator left_50 + right_51
lw $a0, 204($sp)
lw $t1, 208($sp)
add $a0, $a0, $t1
sw $a0, 200($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 196($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_49
lw $t1, 200($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_48
lw $t1, 196($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 224($sp)
#VCall south
move $t0, $sp
# Arg result_48
lw $t1, 196($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 252($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 56($t2)
jal $t3
sw $a1, 192($sp)
#AssignNode result_13 = result_47
lw $t1, 192($sp)
sw $t1, 56($sp)
#Goto label_38
b label_38
#LabelNode label_37
label_37:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 228($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 232($sp)
#CallNode String_init
move $t0, $sp
# Arg l_56
lw $t1, 228($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_57
lw $t1, 232($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 236($sp)
#AssignNode result_13 = instance_57
lw $t1, 232($sp)
sw $t1, 56($sp)
#LabelNode label_38
label_38:
#AssignNode result_0 = result_13
lw $t1, 56($sp)
sw $t1, 4($sp)
#Goto label_39
b label_39
#LabelNode label_36
label_36:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 240($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 244($sp)
#CallNode String_init
move $t0, $sp
# Arg l_59
lw $t1, 240($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_60
lw $t1, 244($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 248($sp)
#AssignNode result_0 = instance_60
lw $t1, 244($sp)
sw $t1, 4($sp)
#LabelNode label_39
label_39:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 260
jr $ra
CellularAutomaton.southwest:
addi $sp, $sp, -184
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr CellularAutomaton.board_size = CellularAutomaton.board_size
lw $t0, 188($sp)
lw $t1, 24($t0)
sw $t1, 24($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 188($sp)
lw $t1, 20($t0)
sw $t1, 116($sp)
#GetAttr left_8 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 36($sp)
#GetAttr right_9 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 40($sp)
#BinaryOperator left_8 + right_9
lw $a0, 36($sp)
lw $t1, 40($sp)
add $a0, $a0, $t1
sw $a0, 32($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 48($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 52($sp)
# IFGoto result_1 -> label_40
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_40
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 188($sp)
lw $t1, 20($t0)
sw $t1, 116($sp)
#GetAttr left_24 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 100($sp)
#GetAttr right_25 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 104($sp)
#BinaryOperator left_24 / right_25
lw $a0, 100($sp)
lw $t1, 104($sp)
beq $t1, 0, div_zero_error
div $a0, $a0, $t1
sw $a0, 96($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 92($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 112($sp)
#GetAttr CellularAutomaton.columns = CellularAutomaton.columns
lw $t0, 188($sp)
lw $t1, 20($t0)
sw $t1, 116($sp)
#GetAttr left_20 = Int.value
lw $t0, 92($sp)
lw $t1, 16($t0)
sw $t1, 84($sp)
#GetAttr right_21 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 88($sp)
#BinaryOperator left_20 * right_21
lw $a0, 84($sp)
lw $t1, 88($sp)
mul $a0, $a0, $t1
sw $a0, 80($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 120($sp)
#GetAttr left_16 = Int.value
lw $t0, 76($sp)
lw $t1, 16($t0)
sw $t1, 68($sp)
#GetAttr right_17 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 72($sp)
#BinaryOperator left_16 = right_17
lw $a0, 68($sp)
lw $t1, 72($sp)
seq $a0, $a0, $t1
sw $a0, 64($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 124($sp)
# IFGoto result_14 -> label_41
lw $t0, 60($sp)
lw $a0, 16($t0)
bnez $a0, label_41
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 148($sp)
#LoadInt 1
li $t0, 1
sw $t0, 152($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_37
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 156($sp)
#GetAttr left_34 = Int.value
lw $t0, 192($sp)
lw $t1, 16($t0)
sw $t1, 140($sp)
#GetAttr right_35 = Int.value
lw $t0, 148($sp)
lw $t1, 16($t0)
sw $t1, 144($sp)
#BinaryOperator left_34 - right_35
lw $a0, 140($sp)
lw $t1, 144($sp)
sub $a0, $a0, $t1
sw $a0, 136($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 132($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 160($sp)
#VCall south
move $t0, $sp
# Arg result_32
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 188($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 56($t2)
jal $t3
sw $a1, 128($sp)
#AssignNode result_13 = result_31
lw $t1, 128($sp)
sw $t1, 56($sp)
#Goto label_42
b label_42
#LabelNode label_41
label_41:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 164($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 168($sp)
#CallNode String_init
move $t0, $sp
# Arg l_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_41
lw $t1, 168($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 172($sp)
#AssignNode result_13 = instance_41
lw $t1, 168($sp)
sw $t1, 56($sp)
#LabelNode label_42
label_42:
#AssignNode result_0 = result_13
lw $t1, 56($sp)
sw $t1, 4($sp)
#Goto label_43
b label_43
#LabelNode label_40
label_40:
#LoadStr msg_3
la $t0, msg_3
sw $t0, 176($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 180($sp)
#CallNode String_init
move $t0, $sp
# Arg l_43
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_44
lw $t1, 180($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 184($sp)
#AssignNode result_0 = instance_44
lw $t1, 180($sp)
sw $t1, 4($sp)
#LabelNode label_43
label_43:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 196
jr $ra
CellularAutomaton.neighbors:
addi $sp, $sp, -652
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall north
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 52($t2)
jal $t3
sw $a1, 136($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 140($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 144($sp)
#CallNode String_init
move $t0, $sp
# Arg l_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 148($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 124($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 120($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 152($sp)
# IFGoto result_29 -> label_44
lw $t0, 120($sp)
lw $a0, 16($t0)
bnez $a0, label_44
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 156($sp)
#LoadInt 0
li $t0, 0
sw $t0, 160($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_38
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 164($sp)
#AssignNode result_28 = instance_38
lw $t1, 156($sp)
sw $t1, 116($sp)
#Goto label_45
b label_45
#LabelNode label_44
label_44:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 168($sp)
#LoadInt 1
li $t0, 1
sw $t0, 172($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_42
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_41
lw $t1, 168($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 176($sp)
#AssignNode result_28 = instance_41
lw $t1, 168($sp)
sw $t1, 116($sp)
#LabelNode label_45
label_45:
#VCall south
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 56($t2)
jal $t3
sw $a1, 200($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 204($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 208($sp)
#CallNode String_init
move $t0, $sp
# Arg l_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_51
lw $t1, 208($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 212($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_51
lw $t1, 208($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_49
lw $t1, 200($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 188($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 184($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_46
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_45
lw $t1, 184($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 216($sp)
# IFGoto result_45 -> label_46
lw $t0, 184($sp)
lw $a0, 16($t0)
bnez $a0, label_46
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 220($sp)
#LoadInt 0
li $t0, 0
sw $t0, 224($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_55
lw $t1, 224($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 228($sp)
#AssignNode result_44 = instance_54
lw $t1, 220($sp)
sw $t1, 180($sp)
#Goto label_47
b label_47
#LabelNode label_46
label_46:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 232($sp)
#LoadInt 1
li $t0, 1
sw $t0, 236($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_58
lw $t1, 236($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_57
lw $t1, 232($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 240($sp)
#AssignNode result_44 = instance_57
lw $t1, 232($sp)
sw $t1, 180($sp)
#LabelNode label_47
label_47:
#GetAttr left_26 = Int.value
lw $t0, 116($sp)
lw $t1, 16($t0)
sw $t1, 108($sp)
#GetAttr right_27 = Int.value
lw $t0, 180($sp)
lw $t1, 16($t0)
sw $t1, 112($sp)
#BinaryOperator left_26 + right_27
lw $a0, 108($sp)
lw $t1, 112($sp)
add $a0, $a0, $t1
sw $a0, 104($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 244($sp)
#VCall east
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 60($t2)
jal $t3
sw $a1, 268($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 272($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 276($sp)
#CallNode String_init
move $t0, $sp
# Arg l_67
lw $t1, 272($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_68
lw $t1, 276($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 280($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_68
lw $t1, 276($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_66
lw $t1, 268($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 256($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 252($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_63
lw $t1, 256($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_62
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 284($sp)
# IFGoto result_62 -> label_48
lw $t0, 252($sp)
lw $a0, 16($t0)
bnez $a0, label_48
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 288($sp)
#LoadInt 0
li $t0, 0
sw $t0, 292($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_72
lw $t1, 292($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_71
lw $t1, 288($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 296($sp)
#AssignNode result_61 = instance_71
lw $t1, 288($sp)
sw $t1, 248($sp)
#Goto label_49
b label_49
#LabelNode label_48
label_48:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 300($sp)
#LoadInt 1
li $t0, 1
sw $t0, 304($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_75
lw $t1, 304($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_74
lw $t1, 300($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 308($sp)
#AssignNode result_61 = instance_74
lw $t1, 300($sp)
sw $t1, 248($sp)
#LabelNode label_49
label_49:
#GetAttr left_22 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 92($sp)
#GetAttr right_23 = Int.value
lw $t0, 248($sp)
lw $t1, 16($t0)
sw $t1, 96($sp)
#BinaryOperator left_22 + right_23
lw $a0, 92($sp)
lw $t1, 96($sp)
add $a0, $a0, $t1
sw $a0, 88($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 84($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 312($sp)
#VCall west
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 64($t2)
jal $t3
sw $a1, 336($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 340($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 344($sp)
#CallNode String_init
move $t0, $sp
# Arg l_84
lw $t1, 340($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_85
lw $t1, 344($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 348($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_85
lw $t1, 344($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_83
lw $t1, 336($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 324($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 320($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_80
lw $t1, 324($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_79
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 352($sp)
# IFGoto result_79 -> label_50
lw $t0, 320($sp)
lw $a0, 16($t0)
bnez $a0, label_50
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 356($sp)
#LoadInt 0
li $t0, 0
sw $t0, 360($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_89
lw $t1, 360($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_88
lw $t1, 356($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 364($sp)
#AssignNode result_78 = instance_88
lw $t1, 356($sp)
sw $t1, 316($sp)
#Goto label_51
b label_51
#LabelNode label_50
label_50:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 368($sp)
#LoadInt 1
li $t0, 1
sw $t0, 372($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_92
lw $t1, 372($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_91
lw $t1, 368($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 376($sp)
#AssignNode result_78 = instance_91
lw $t1, 368($sp)
sw $t1, 316($sp)
#LabelNode label_51
label_51:
#GetAttr left_18 = Int.value
lw $t0, 84($sp)
lw $t1, 16($t0)
sw $t1, 76($sp)
#GetAttr right_19 = Int.value
lw $t0, 316($sp)
lw $t1, 16($t0)
sw $t1, 80($sp)
#BinaryOperator left_18 + right_19
lw $a0, 76($sp)
lw $t1, 80($sp)
add $a0, $a0, $t1
sw $a0, 72($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 380($sp)
#VCall northeast
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 72($t2)
jal $t3
sw $a1, 404($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 408($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 412($sp)
#CallNode String_init
move $t0, $sp
# Arg l_101
lw $t1, 408($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_102
lw $t1, 412($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 416($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_102
lw $t1, 412($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_100
lw $t1, 404($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 392($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 388($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_97
lw $t1, 392($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_96
lw $t1, 388($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 420($sp)
# IFGoto result_96 -> label_52
lw $t0, 388($sp)
lw $a0, 16($t0)
bnez $a0, label_52
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 424($sp)
#LoadInt 0
li $t0, 0
sw $t0, 428($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_106
lw $t1, 428($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_105
lw $t1, 424($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 432($sp)
#AssignNode result_95 = instance_105
lw $t1, 424($sp)
sw $t1, 384($sp)
#Goto label_53
b label_53
#LabelNode label_52
label_52:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 436($sp)
#LoadInt 1
li $t0, 1
sw $t0, 440($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_109
lw $t1, 440($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_108
lw $t1, 436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 444($sp)
#AssignNode result_95 = instance_108
lw $t1, 436($sp)
sw $t1, 384($sp)
#LabelNode label_53
label_53:
#GetAttr left_14 = Int.value
lw $t0, 68($sp)
lw $t1, 16($t0)
sw $t1, 60($sp)
#GetAttr right_15 = Int.value
lw $t0, 384($sp)
lw $t1, 16($t0)
sw $t1, 64($sp)
#BinaryOperator left_14 + right_15
lw $a0, 60($sp)
lw $t1, 64($sp)
add $a0, $a0, $t1
sw $a0, 56($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 52($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 448($sp)
#VCall northwest
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 68($t2)
jal $t3
sw $a1, 472($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 476($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 480($sp)
#CallNode String_init
move $t0, $sp
# Arg l_118
lw $t1, 476($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_119
lw $t1, 480($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 484($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_119
lw $t1, 480($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_117
lw $t1, 472($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 460($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 456($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_114
lw $t1, 460($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_113
lw $t1, 456($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 488($sp)
# IFGoto result_113 -> label_54
lw $t0, 456($sp)
lw $a0, 16($t0)
bnez $a0, label_54
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 492($sp)
#LoadInt 0
li $t0, 0
sw $t0, 496($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_123
lw $t1, 496($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_122
lw $t1, 492($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 500($sp)
#AssignNode result_112 = instance_122
lw $t1, 492($sp)
sw $t1, 452($sp)
#Goto label_55
b label_55
#LabelNode label_54
label_54:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 504($sp)
#LoadInt 1
li $t0, 1
sw $t0, 508($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_126
lw $t1, 508($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_125
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 512($sp)
#AssignNode result_112 = instance_125
lw $t1, 504($sp)
sw $t1, 452($sp)
#LabelNode label_55
label_55:
#GetAttr left_10 = Int.value
lw $t0, 52($sp)
lw $t1, 16($t0)
sw $t1, 44($sp)
#GetAttr right_11 = Int.value
lw $t0, 452($sp)
lw $t1, 16($t0)
sw $t1, 48($sp)
#BinaryOperator left_10 + right_11
lw $a0, 44($sp)
lw $t1, 48($sp)
add $a0, $a0, $t1
sw $a0, 40($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 36($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 516($sp)
#VCall southeast
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 76($t2)
jal $t3
sw $a1, 540($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 544($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 548($sp)
#CallNode String_init
move $t0, $sp
# Arg l_135
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_136
lw $t1, 548($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 552($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_136
lw $t1, 548($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_134
lw $t1, 540($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 528($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 524($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_131
lw $t1, 528($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_130
lw $t1, 524($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 556($sp)
# IFGoto result_130 -> label_56
lw $t0, 524($sp)
lw $a0, 16($t0)
bnez $a0, label_56
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 560($sp)
#LoadInt 0
li $t0, 0
sw $t0, 564($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_140
lw $t1, 564($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_139
lw $t1, 560($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 568($sp)
#AssignNode result_129 = instance_139
lw $t1, 560($sp)
sw $t1, 520($sp)
#Goto label_57
b label_57
#LabelNode label_56
label_56:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 572($sp)
#LoadInt 1
li $t0, 1
sw $t0, 576($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_143
lw $t1, 576($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_142
lw $t1, 572($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 580($sp)
#AssignNode result_129 = instance_142
lw $t1, 572($sp)
sw $t1, 520($sp)
#LabelNode label_57
label_57:
#GetAttr left_6 = Int.value
lw $t0, 36($sp)
lw $t1, 16($t0)
sw $t1, 28($sp)
#GetAttr right_7 = Int.value
lw $t0, 520($sp)
lw $t1, 16($t0)
sw $t1, 32($sp)
#BinaryOperator left_6 + right_7
lw $a0, 28($sp)
lw $t1, 32($sp)
add $a0, $a0, $t1
sw $a0, 24($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 584($sp)
#VCall southwest
move $t0, $sp
# Arg position
lw $t1, 660($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 656($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 656($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 80($t2)
jal $t3
sw $a1, 608($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 612($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 616($sp)
#CallNode String_init
move $t0, $sp
# Arg l_152
lw $t1, 612($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_153
lw $t1, 616($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 620($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_153
lw $t1, 616($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_151
lw $t1, 608($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 596($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 592($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_148
lw $t1, 596($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_147
lw $t1, 592($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 624($sp)
# IFGoto result_147 -> label_58
lw $t0, 592($sp)
lw $a0, 16($t0)
bnez $a0, label_58
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 628($sp)
#LoadInt 0
li $t0, 0
sw $t0, 632($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_157
lw $t1, 632($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_156
lw $t1, 628($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 636($sp)
#AssignNode result_146 = instance_156
lw $t1, 628($sp)
sw $t1, 588($sp)
#Goto label_59
b label_59
#LabelNode label_58
label_58:
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 640($sp)
#LoadInt 1
li $t0, 1
sw $t0, 644($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_160
lw $t1, 644($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_159
lw $t1, 640($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 648($sp)
#AssignNode result_146 = instance_159
lw $t1, 640($sp)
sw $t1, 588($sp)
#LabelNode label_59
label_59:
#GetAttr left_2 = Int.value
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#GetAttr right_3 = Int.value
lw $t0, 588($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#BinaryOperator left_2 + right_3
lw $a0, 12($sp)
lw $t1, 16($sp)
add $a0, $a0, $t1
sw $a0, 8($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 652($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 664
jr $ra
CellularAutomaton.cell_at_next_evolution:
addi $sp, $sp, -168
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall neighbors
move $t0, $sp
# Arg position
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 172($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 84($t2)
jal $t3
sw $a1, 24($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#LoadInt 3
li $t0, 3
sw $t0, 32($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 36($sp)
#GetAttr left_3 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 = right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
seq $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 40($sp)
# IFGoto result_1 -> label_60
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_60
#VCall neighbors
move $t0, $sp
# Arg position
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 172($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 84($t2)
jal $t3
sw $a1, 64($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#LoadInt 2
li $t0, 2
sw $t0, 72($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 76($sp)
#GetAttr left_13 = Int.value
lw $t0, 64($sp)
lw $t1, 16($t0)
sw $t1, 56($sp)
#GetAttr right_14 = Int.value
lw $t0, 68($sp)
lw $t1, 16($t0)
sw $t1, 60($sp)
#BinaryOperator left_13 = right_14
lw $a0, 56($sp)
lw $t1, 60($sp)
seq $a0, $a0, $t1
sw $a0, 52($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 80($sp)
# IFGoto result_11 -> label_61
lw $t0, 48($sp)
lw $a0, 16($t0)
bnez $a0, label_61
#LoadStr msg_5
la $t0, msg_5
sw $t0, 84($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 88($sp)
#CallNode String_init
move $t0, $sp
# Arg l_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 92($sp)
#AssignNode result_10 = instance_21
lw $t1, 88($sp)
sw $t1, 44($sp)
#Goto label_62
b label_62
#LabelNode label_61
label_61:
#VCall cell
move $t0, $sp
# Arg position
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 172($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 116($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 120($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 124($sp)
#CallNode String_init
move $t0, $sp
# Arg l_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 128($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 104($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 132($sp)
# IFGoto result_24 -> label_63
lw $t0, 100($sp)
lw $a0, 16($t0)
bnez $a0, label_63
#LoadStr msg_5
la $t0, msg_5
sw $t0, 136($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 140($sp)
#CallNode String_init
move $t0, $sp
# Arg l_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 144($sp)
#AssignNode result_23 = instance_34
lw $t1, 140($sp)
sw $t1, 96($sp)
#Goto label_64
b label_64
#LabelNode label_63
label_63:
#LoadStr msg_4
la $t0, msg_4
sw $t0, 148($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 152($sp)
#CallNode String_init
move $t0, $sp
# Arg l_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_37
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 156($sp)
#AssignNode result_23 = instance_37
lw $t1, 152($sp)
sw $t1, 96($sp)
#LabelNode label_64
label_64:
#AssignNode result_10 = result_23
lw $t1, 96($sp)
sw $t1, 44($sp)
#LabelNode label_62
label_62:
#AssignNode result_0 = result_10
lw $t1, 44($sp)
sw $t1, 4($sp)
#Goto label_65
b label_65
#LabelNode label_60
label_60:
#LoadStr msg_4
la $t0, msg_4
sw $t0, 160($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 164($sp)
#CallNode String_init
move $t0, $sp
# Arg l_39
lw $t1, 160($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 168($sp)
#AssignNode result_0 = instance_40
lw $t1, 164($sp)
sw $t1, 4($sp)
#LabelNode label_65
label_65:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 180
jr $ra
CellularAutomaton.evolve:
addi $sp, $sp, -128
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#AssignNode position_3 = instance_0
lw $t1, 4($sp)
sw $t1, 16($sp)
#VCall num_cells
move $t0, $sp
# Arg self
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 132($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 20($sp)
#AssignNode num_5 = result_4
lw $t1, 20($sp)
sw $t1, 24($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg value_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#AssignNode temp_9 = instance_6
lw $t1, 28($sp)
sw $t1, 40($sp)
#LabelNode label_66
label_66:
#GetAttr left_13 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 56($sp)
#GetAttr right_14 = Int.value
lw $t0, 24($sp)
lw $t1, 16($t0)
sw $t1, 60($sp)
#BinaryOperator left_13 < right_14
lw $a0, 56($sp)
lw $t1, 60($sp)
slt $a0, $a0, $t1
sw $a0, 52($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 64($sp)
# IFGoto result_11 -> label_67
lw $t0, 48($sp)
lw $a0, 16($t0)
bnez $a0, label_67
#Goto label_68
b label_68
#LabelNode label_67
label_67:
#VCall cell_at_next_evolution
move $t0, $sp
# Arg position_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 132($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 132($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 88($t2)
jal $t3
sw $a1, 72($sp)
#VCall concat
move $t0, $sp
# Arg result_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg temp_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 40($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 68($sp)
#AssignNode temp_9 = result_16
lw $t1, 68($sp)
sw $t1, 40($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 96($sp)
#LoadInt 1
li $t0, 1
sw $t0, 100($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 104($sp)
#GetAttr left_21 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 88($sp)
#GetAttr right_22 = Int.value
lw $t0, 96($sp)
lw $t1, 16($t0)
sw $t1, 92($sp)
#BinaryOperator left_21 + right_22
lw $a0, 88($sp)
lw $t1, 92($sp)
add $a0, $a0, $t1
sw $a0, 84($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 80($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 108($sp)
#AssignNode position_3 = result_19
lw $t1, 80($sp)
sw $t1, 16($sp)
#Goto label_66
b label_66
#LabelNode label_68
label_68:
#SetAttr CellularAutomatonpopulation_map = temp_9
lw $t0, 132($sp)
lw $t1, 40($sp)
sw $t1, 28($t0)
#AssignNode result_29 = self
lw $t1, 132($sp)
sw $t1, 120($sp)
#AssignNode result_30 = result_29
lw $t1, 120($sp)
sw $t1, 124($sp)
#AssignNode result_31 = result_30
lw $t1, 124($sp)
sw $t1, 128($sp)
#Return result_31
lw $a1, 128($sp)
lw $ra, 0($sp)
addi $sp, $sp, 136
jr $ra
CellularAutomaton.option:
addi $sp, $sp, -1432
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#AssignNode num_3 = instance_0
lw $t1, 4($sp)
sw $t1, 16($sp)
#LoadStr msg_6
la $t0, msg_6
sw $t0, 24($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode String_init
move $t0, $sp
# Arg l_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 32($sp)
#VCall out_string
move $t0, $sp
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 20($sp)
#LoadStr msg_7
la $t0, msg_7
sw $t0, 40($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode String_init
move $t0, $sp
# Arg l_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 48($sp)
#VCall out_string
move $t0, $sp
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 36($sp)
#LoadStr msg_8
la $t0, msg_8
sw $t0, 56($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode String_init
move $t0, $sp
# Arg l_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 64($sp)
#VCall out_string
move $t0, $sp
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 52($sp)
#LoadStr msg_9
la $t0, msg_9
sw $t0, 72($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#CallNode String_init
move $t0, $sp
# Arg l_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 80($sp)
#VCall out_string
move $t0, $sp
# Arg instance_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 68($sp)
#LoadStr msg_10
la $t0, msg_10
sw $t0, 88($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 92($sp)
#CallNode String_init
move $t0, $sp
# Arg l_21
lw $t1, 88($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 96($sp)
#VCall out_string
move $t0, $sp
# Arg instance_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 84($sp)
#LoadStr msg_11
la $t0, msg_11
sw $t0, 104($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 108($sp)
#CallNode String_init
move $t0, $sp
# Arg l_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_26
lw $t1, 108($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 112($sp)
#VCall out_string
move $t0, $sp
# Arg instance_26
lw $t1, 108($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 100($sp)
#LoadStr msg_12
la $t0, msg_12
sw $t0, 120($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 124($sp)
#CallNode String_init
move $t0, $sp
# Arg l_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 128($sp)
#VCall out_string
move $t0, $sp
# Arg instance_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 116($sp)
#LoadStr msg_13
la $t0, msg_13
sw $t0, 136($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 140($sp)
#CallNode String_init
move $t0, $sp
# Arg l_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 144($sp)
#VCall out_string
move $t0, $sp
# Arg instance_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 132($sp)
#LoadStr msg_14
la $t0, msg_14
sw $t0, 152($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 156($sp)
#CallNode String_init
move $t0, $sp
# Arg l_37
lw $t1, 152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_38
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 160($sp)
#VCall out_string
move $t0, $sp
# Arg instance_38
lw $t1, 156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 148($sp)
#LoadStr msg_15
la $t0, msg_15
sw $t0, 168($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 172($sp)
#CallNode String_init
move $t0, $sp
# Arg l_41
lw $t1, 168($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_42
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 176($sp)
#VCall out_string
move $t0, $sp
# Arg instance_42
lw $t1, 172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 164($sp)
#LoadStr msg_16
la $t0, msg_16
sw $t0, 184($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 188($sp)
#CallNode String_init
move $t0, $sp
# Arg l_45
lw $t1, 184($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_46
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 192($sp)
#VCall out_string
move $t0, $sp
# Arg instance_46
lw $t1, 188($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 180($sp)
#LoadStr msg_17
la $t0, msg_17
sw $t0, 200($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 204($sp)
#CallNode String_init
move $t0, $sp
# Arg l_49
lw $t1, 200($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 208($sp)
#VCall out_string
move $t0, $sp
# Arg instance_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 196($sp)
#LoadStr msg_18
la $t0, msg_18
sw $t0, 216($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 220($sp)
#CallNode String_init
move $t0, $sp
# Arg l_53
lw $t1, 216($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 224($sp)
#VCall out_string
move $t0, $sp
# Arg instance_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 212($sp)
#LoadStr msg_19
la $t0, msg_19
sw $t0, 232($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 236($sp)
#CallNode String_init
move $t0, $sp
# Arg l_57
lw $t1, 232($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_58
lw $t1, 236($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 240($sp)
#VCall out_string
move $t0, $sp
# Arg instance_58
lw $t1, 236($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 228($sp)
#LoadStr msg_20
la $t0, msg_20
sw $t0, 248($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 252($sp)
#CallNode String_init
move $t0, $sp
# Arg l_61
lw $t1, 248($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_62
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 256($sp)
#VCall out_string
move $t0, $sp
# Arg instance_62
lw $t1, 252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 244($sp)
#LoadStr msg_21
la $t0, msg_21
sw $t0, 264($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 268($sp)
#CallNode String_init
move $t0, $sp
# Arg l_65
lw $t1, 264($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_66
lw $t1, 268($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 272($sp)
#VCall out_string
move $t0, $sp
# Arg instance_66
lw $t1, 268($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 260($sp)
#LoadStr msg_22
la $t0, msg_22
sw $t0, 280($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 284($sp)
#CallNode String_init
move $t0, $sp
# Arg l_69
lw $t1, 280($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_70
lw $t1, 284($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 288($sp)
#VCall out_string
move $t0, $sp
# Arg instance_70
lw $t1, 284($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 276($sp)
#LoadStr msg_23
la $t0, msg_23
sw $t0, 296($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 300($sp)
#CallNode String_init
move $t0, $sp
# Arg l_73
lw $t1, 296($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_74
lw $t1, 300($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 304($sp)
#VCall out_string
move $t0, $sp
# Arg instance_74
lw $t1, 300($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 292($sp)
#LoadStr msg_24
la $t0, msg_24
sw $t0, 312($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 316($sp)
#CallNode String_init
move $t0, $sp
# Arg l_77
lw $t1, 312($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_78
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 320($sp)
#VCall out_string
move $t0, $sp
# Arg instance_78
lw $t1, 316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 308($sp)
#LoadStr msg_25
la $t0, msg_25
sw $t0, 328($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 332($sp)
#CallNode String_init
move $t0, $sp
# Arg l_81
lw $t1, 328($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_82
lw $t1, 332($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 336($sp)
#VCall out_string
move $t0, $sp
# Arg instance_82
lw $t1, 332($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 324($sp)
#LoadStr msg_26
la $t0, msg_26
sw $t0, 344($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 348($sp)
#CallNode String_init
move $t0, $sp
# Arg l_85
lw $t1, 344($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_86
lw $t1, 348($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 352($sp)
#VCall out_string
move $t0, $sp
# Arg instance_86
lw $t1, 348($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 340($sp)
#LoadStr msg_27
la $t0, msg_27
sw $t0, 360($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 364($sp)
#CallNode String_init
move $t0, $sp
# Arg l_89
lw $t1, 360($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_90
lw $t1, 364($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 368($sp)
#VCall out_string
move $t0, $sp
# Arg instance_90
lw $t1, 364($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 356($sp)
#LoadStr msg_28
la $t0, msg_28
sw $t0, 376($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 380($sp)
#CallNode String_init
move $t0, $sp
# Arg l_93
lw $t1, 376($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_94
lw $t1, 380($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 384($sp)
#VCall out_string
move $t0, $sp
# Arg instance_94
lw $t1, 380($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 372($sp)
#VCall in_int
move $t0, $sp
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 24($t2)
jal $t3
sw $a1, 388($sp)
#AssignNode num_3 = result_96
lw $t1, 388($sp)
sw $t1, 16($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 400($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 404($sp)
#CallNode String_init
move $t0, $sp
# Arg l_99
lw $t1, 400($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_100
lw $t1, 404($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 408($sp)
#VCall out_string
move $t0, $sp
# Arg instance_100
lw $t1, 404($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 1436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 1436($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 396($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 432($sp)
#LoadInt 1
li $t0, 1
sw $t0, 436($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_108
lw $t1, 436($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_107
lw $t1, 432($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 440($sp)
#GetAttr left_105 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 424($sp)
#GetAttr right_106 = Int.value
lw $t0, 432($sp)
lw $t1, 16($t0)
sw $t1, 428($sp)
#BinaryOperator left_105 = right_106
lw $a0, 424($sp)
lw $t1, 428($sp)
seq $a0, $a0, $t1
sw $a0, 420($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 416($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_104
lw $t1, 420($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_103
lw $t1, 416($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 444($sp)
# IFGoto result_103 -> label_69
lw $t0, 416($sp)
lw $a0, 16($t0)
bnez $a0, label_69
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 468($sp)
#LoadInt 2
li $t0, 2
sw $t0, 472($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_117
lw $t1, 472($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_116
lw $t1, 468($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 476($sp)
#GetAttr left_114 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 460($sp)
#GetAttr right_115 = Int.value
lw $t0, 468($sp)
lw $t1, 16($t0)
sw $t1, 464($sp)
#BinaryOperator left_114 = right_115
lw $a0, 460($sp)
lw $t1, 464($sp)
seq $a0, $a0, $t1
sw $a0, 456($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 452($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_113
lw $t1, 456($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_112
lw $t1, 452($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 480($sp)
# IFGoto result_112 -> label_70
lw $t0, 452($sp)
lw $a0, 16($t0)
bnez $a0, label_70
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 504($sp)
#LoadInt 3
li $t0, 3
sw $t0, 508($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_126
lw $t1, 508($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_125
lw $t1, 504($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 512($sp)
#GetAttr left_123 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 496($sp)
#GetAttr right_124 = Int.value
lw $t0, 504($sp)
lw $t1, 16($t0)
sw $t1, 500($sp)
#BinaryOperator left_123 = right_124
lw $a0, 496($sp)
lw $t1, 500($sp)
seq $a0, $a0, $t1
sw $a0, 492($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 488($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_122
lw $t1, 492($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_121
lw $t1, 488($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 516($sp)
# IFGoto result_121 -> label_71
lw $t0, 488($sp)
lw $a0, 16($t0)
bnez $a0, label_71
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 540($sp)
#LoadInt 4
li $t0, 4
sw $t0, 544($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_135
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_134
lw $t1, 540($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 548($sp)
#GetAttr left_132 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 532($sp)
#GetAttr right_133 = Int.value
lw $t0, 540($sp)
lw $t1, 16($t0)
sw $t1, 536($sp)
#BinaryOperator left_132 = right_133
lw $a0, 532($sp)
lw $t1, 536($sp)
seq $a0, $a0, $t1
sw $a0, 528($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 524($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_131
lw $t1, 528($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_130
lw $t1, 524($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 552($sp)
# IFGoto result_130 -> label_72
lw $t0, 524($sp)
lw $a0, 16($t0)
bnez $a0, label_72
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 576($sp)
#LoadInt 5
li $t0, 5
sw $t0, 580($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_144
lw $t1, 580($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_143
lw $t1, 576($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 584($sp)
#GetAttr left_141 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 568($sp)
#GetAttr right_142 = Int.value
lw $t0, 576($sp)
lw $t1, 16($t0)
sw $t1, 572($sp)
#BinaryOperator left_141 = right_142
lw $a0, 568($sp)
lw $t1, 572($sp)
seq $a0, $a0, $t1
sw $a0, 564($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 560($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_140
lw $t1, 564($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_139
lw $t1, 560($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 588($sp)
# IFGoto result_139 -> label_73
lw $t0, 560($sp)
lw $a0, 16($t0)
bnez $a0, label_73
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 612($sp)
#LoadInt 6
li $t0, 6
sw $t0, 616($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_153
lw $t1, 616($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_152
lw $t1, 612($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 620($sp)
#GetAttr left_150 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 604($sp)
#GetAttr right_151 = Int.value
lw $t0, 612($sp)
lw $t1, 16($t0)
sw $t1, 608($sp)
#BinaryOperator left_150 = right_151
lw $a0, 604($sp)
lw $t1, 608($sp)
seq $a0, $a0, $t1
sw $a0, 600($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 596($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_149
lw $t1, 600($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_148
lw $t1, 596($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 624($sp)
# IFGoto result_148 -> label_74
lw $t0, 596($sp)
lw $a0, 16($t0)
bnez $a0, label_74
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 648($sp)
#LoadInt 7
li $t0, 7
sw $t0, 652($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_162
lw $t1, 652($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_161
lw $t1, 648($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 656($sp)
#GetAttr left_159 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 640($sp)
#GetAttr right_160 = Int.value
lw $t0, 648($sp)
lw $t1, 16($t0)
sw $t1, 644($sp)
#BinaryOperator left_159 = right_160
lw $a0, 640($sp)
lw $t1, 644($sp)
seq $a0, $a0, $t1
sw $a0, 636($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 632($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_158
lw $t1, 636($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_157
lw $t1, 632($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 660($sp)
# IFGoto result_157 -> label_75
lw $t0, 632($sp)
lw $a0, 16($t0)
bnez $a0, label_75
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 684($sp)
#LoadInt 8
li $t0, 8
sw $t0, 688($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_171
lw $t1, 688($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_170
lw $t1, 684($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 692($sp)
#GetAttr left_168 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 676($sp)
#GetAttr right_169 = Int.value
lw $t0, 684($sp)
lw $t1, 16($t0)
sw $t1, 680($sp)
#BinaryOperator left_168 = right_169
lw $a0, 676($sp)
lw $t1, 680($sp)
seq $a0, $a0, $t1
sw $a0, 672($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 668($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_167
lw $t1, 672($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_166
lw $t1, 668($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 696($sp)
# IFGoto result_166 -> label_76
lw $t0, 668($sp)
lw $a0, 16($t0)
bnez $a0, label_76
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 720($sp)
#LoadInt 9
li $t0, 9
sw $t0, 724($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_180
lw $t1, 724($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_179
lw $t1, 720($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 728($sp)
#GetAttr left_177 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 712($sp)
#GetAttr right_178 = Int.value
lw $t0, 720($sp)
lw $t1, 16($t0)
sw $t1, 716($sp)
#BinaryOperator left_177 = right_178
lw $a0, 712($sp)
lw $t1, 716($sp)
seq $a0, $a0, $t1
sw $a0, 708($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 704($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_176
lw $t1, 708($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_175
lw $t1, 704($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 732($sp)
# IFGoto result_175 -> label_77
lw $t0, 704($sp)
lw $a0, 16($t0)
bnez $a0, label_77
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 756($sp)
#LoadInt 10
li $t0, 10
sw $t0, 760($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_189
lw $t1, 760($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_188
lw $t1, 756($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 764($sp)
#GetAttr left_186 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 748($sp)
#GetAttr right_187 = Int.value
lw $t0, 756($sp)
lw $t1, 16($t0)
sw $t1, 752($sp)
#BinaryOperator left_186 = right_187
lw $a0, 748($sp)
lw $t1, 752($sp)
seq $a0, $a0, $t1
sw $a0, 744($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 740($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_185
lw $t1, 744($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_184
lw $t1, 740($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 768($sp)
# IFGoto result_184 -> label_78
lw $t0, 740($sp)
lw $a0, 16($t0)
bnez $a0, label_78
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 792($sp)
#LoadInt 11
li $t0, 11
sw $t0, 796($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_198
lw $t1, 796($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_197
lw $t1, 792($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 800($sp)
#GetAttr left_195 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 784($sp)
#GetAttr right_196 = Int.value
lw $t0, 792($sp)
lw $t1, 16($t0)
sw $t1, 788($sp)
#BinaryOperator left_195 = right_196
lw $a0, 784($sp)
lw $t1, 788($sp)
seq $a0, $a0, $t1
sw $a0, 780($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 776($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_194
lw $t1, 780($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_193
lw $t1, 776($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 804($sp)
# IFGoto result_193 -> label_79
lw $t0, 776($sp)
lw $a0, 16($t0)
bnez $a0, label_79
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 828($sp)
#LoadInt 12
li $t0, 12
sw $t0, 832($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_207
lw $t1, 832($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_206
lw $t1, 828($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 836($sp)
#GetAttr left_204 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 820($sp)
#GetAttr right_205 = Int.value
lw $t0, 828($sp)
lw $t1, 16($t0)
sw $t1, 824($sp)
#BinaryOperator left_204 = right_205
lw $a0, 820($sp)
lw $t1, 824($sp)
seq $a0, $a0, $t1
sw $a0, 816($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 812($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_203
lw $t1, 816($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_202
lw $t1, 812($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 840($sp)
# IFGoto result_202 -> label_80
lw $t0, 812($sp)
lw $a0, 16($t0)
bnez $a0, label_80
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 864($sp)
#LoadInt 13
li $t0, 13
sw $t0, 868($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_216
lw $t1, 868($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_215
lw $t1, 864($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 872($sp)
#GetAttr left_213 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 856($sp)
#GetAttr right_214 = Int.value
lw $t0, 864($sp)
lw $t1, 16($t0)
sw $t1, 860($sp)
#BinaryOperator left_213 = right_214
lw $a0, 856($sp)
lw $t1, 860($sp)
seq $a0, $a0, $t1
sw $a0, 852($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 848($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_212
lw $t1, 852($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_211
lw $t1, 848($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 876($sp)
# IFGoto result_211 -> label_81
lw $t0, 848($sp)
lw $a0, 16($t0)
bnez $a0, label_81
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 900($sp)
#LoadInt 14
li $t0, 14
sw $t0, 904($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_225
lw $t1, 904($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_224
lw $t1, 900($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 908($sp)
#GetAttr left_222 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 892($sp)
#GetAttr right_223 = Int.value
lw $t0, 900($sp)
lw $t1, 16($t0)
sw $t1, 896($sp)
#BinaryOperator left_222 = right_223
lw $a0, 892($sp)
lw $t1, 896($sp)
seq $a0, $a0, $t1
sw $a0, 888($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 884($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_221
lw $t1, 888($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_220
lw $t1, 884($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 912($sp)
# IFGoto result_220 -> label_82
lw $t0, 884($sp)
lw $a0, 16($t0)
bnez $a0, label_82
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 936($sp)
#LoadInt 15
li $t0, 15
sw $t0, 940($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_234
lw $t1, 940($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_233
lw $t1, 936($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 944($sp)
#GetAttr left_231 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 928($sp)
#GetAttr right_232 = Int.value
lw $t0, 936($sp)
lw $t1, 16($t0)
sw $t1, 932($sp)
#BinaryOperator left_231 = right_232
lw $a0, 928($sp)
lw $t1, 932($sp)
seq $a0, $a0, $t1
sw $a0, 924($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 920($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_230
lw $t1, 924($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_229
lw $t1, 920($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 948($sp)
# IFGoto result_229 -> label_83
lw $t0, 920($sp)
lw $a0, 16($t0)
bnez $a0, label_83
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 972($sp)
#LoadInt 16
li $t0, 16
sw $t0, 976($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_243
lw $t1, 976($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_242
lw $t1, 972($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 980($sp)
#GetAttr left_240 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 964($sp)
#GetAttr right_241 = Int.value
lw $t0, 972($sp)
lw $t1, 16($t0)
sw $t1, 968($sp)
#BinaryOperator left_240 = right_241
lw $a0, 964($sp)
lw $t1, 968($sp)
seq $a0, $a0, $t1
sw $a0, 960($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 956($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_239
lw $t1, 960($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_238
lw $t1, 956($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 984($sp)
# IFGoto result_238 -> label_84
lw $t0, 956($sp)
lw $a0, 16($t0)
bnez $a0, label_84
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 1008($sp)
#LoadInt 17
li $t0, 17
sw $t0, 1012($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_252
lw $t1, 1012($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_251
lw $t1, 1008($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 1016($sp)
#GetAttr left_249 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 1000($sp)
#GetAttr right_250 = Int.value
lw $t0, 1008($sp)
lw $t1, 16($t0)
sw $t1, 1004($sp)
#BinaryOperator left_249 = right_250
lw $a0, 1000($sp)
lw $t1, 1004($sp)
seq $a0, $a0, $t1
sw $a0, 996($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 992($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_248
lw $t1, 996($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_247
lw $t1, 992($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 1020($sp)
# IFGoto result_247 -> label_85
lw $t0, 992($sp)
lw $a0, 16($t0)
bnez $a0, label_85
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 1044($sp)
#LoadInt 18
li $t0, 18
sw $t0, 1048($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_261
lw $t1, 1048($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_260
lw $t1, 1044($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 1052($sp)
#GetAttr left_258 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 1036($sp)
#GetAttr right_259 = Int.value
lw $t0, 1044($sp)
lw $t1, 16($t0)
sw $t1, 1040($sp)
#BinaryOperator left_258 = right_259
lw $a0, 1036($sp)
lw $t1, 1040($sp)
seq $a0, $a0, $t1
sw $a0, 1032($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 1028($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_257
lw $t1, 1032($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_256
lw $t1, 1028($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 1056($sp)
# IFGoto result_256 -> label_86
lw $t0, 1028($sp)
lw $a0, 16($t0)
bnez $a0, label_86
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 1080($sp)
#LoadInt 19
li $t0, 19
sw $t0, 1084($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_270
lw $t1, 1084($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_269
lw $t1, 1080($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 1088($sp)
#GetAttr left_267 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 1072($sp)
#GetAttr right_268 = Int.value
lw $t0, 1080($sp)
lw $t1, 16($t0)
sw $t1, 1076($sp)
#BinaryOperator left_267 = right_268
lw $a0, 1072($sp)
lw $t1, 1076($sp)
seq $a0, $a0, $t1
sw $a0, 1068($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 1064($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_266
lw $t1, 1068($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_265
lw $t1, 1064($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 1092($sp)
# IFGoto result_265 -> label_87
lw $t0, 1064($sp)
lw $a0, 16($t0)
bnez $a0, label_87
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 1116($sp)
#LoadInt 20
li $t0, 20
sw $t0, 1120($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_279
lw $t1, 1120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_278
lw $t1, 1116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 1124($sp)
#GetAttr left_276 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 1108($sp)
#GetAttr right_277 = Int.value
lw $t0, 1116($sp)
lw $t1, 16($t0)
sw $t1, 1112($sp)
#BinaryOperator left_276 = right_277
lw $a0, 1108($sp)
lw $t1, 1112($sp)
seq $a0, $a0, $t1
sw $a0, 1104($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 1100($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_275
lw $t1, 1104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_274
lw $t1, 1100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 1128($sp)
# IFGoto result_274 -> label_88
lw $t0, 1100($sp)
lw $a0, 16($t0)
bnez $a0, label_88
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 1152($sp)
#LoadInt 21
li $t0, 21
sw $t0, 1156($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_288
lw $t1, 1156($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_287
lw $t1, 1152($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 1160($sp)
#GetAttr left_285 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 1144($sp)
#GetAttr right_286 = Int.value
lw $t0, 1152($sp)
lw $t1, 16($t0)
sw $t1, 1148($sp)
#BinaryOperator left_285 = right_286
lw $a0, 1144($sp)
lw $t1, 1148($sp)
seq $a0, $a0, $t1
sw $a0, 1140($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 1136($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_284
lw $t1, 1140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_283
lw $t1, 1136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 1164($sp)
# IFGoto result_283 -> label_89
lw $t0, 1136($sp)
lw $a0, 16($t0)
bnez $a0, label_89
#LoadStr msg_29
la $t0, msg_29
sw $t0, 1168($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1172($sp)
#CallNode String_init
move $t0, $sp
# Arg l_291
lw $t1, 1168($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_292
lw $t1, 1172($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1176($sp)
#AssignNode result_282 = instance_292
lw $t1, 1172($sp)
sw $t1, 1132($sp)
#Goto label_90
b label_90
#LabelNode label_89
label_89:
#LoadStr msg_30
la $t0, msg_30
sw $t0, 1180($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1184($sp)
#CallNode String_init
move $t0, $sp
# Arg l_294
lw $t1, 1180($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_295
lw $t1, 1184($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1188($sp)
#AssignNode result_282 = instance_295
lw $t1, 1184($sp)
sw $t1, 1132($sp)
#LabelNode label_90
label_90:
#AssignNode result_273 = result_282
lw $t1, 1132($sp)
sw $t1, 1096($sp)
#Goto label_91
b label_91
#LabelNode label_88
label_88:
#LoadStr msg_31
la $t0, msg_31
sw $t0, 1192($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1196($sp)
#CallNode String_init
move $t0, $sp
# Arg l_297
lw $t1, 1192($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_298
lw $t1, 1196($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1200($sp)
#AssignNode result_273 = instance_298
lw $t1, 1196($sp)
sw $t1, 1096($sp)
#LabelNode label_91
label_91:
#AssignNode result_264 = result_273
lw $t1, 1096($sp)
sw $t1, 1060($sp)
#Goto label_92
b label_92
#LabelNode label_87
label_87:
#LoadStr msg_32
la $t0, msg_32
sw $t0, 1204($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1208($sp)
#CallNode String_init
move $t0, $sp
# Arg l_300
lw $t1, 1204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_301
lw $t1, 1208($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1212($sp)
#AssignNode result_264 = instance_301
lw $t1, 1208($sp)
sw $t1, 1060($sp)
#LabelNode label_92
label_92:
#AssignNode result_255 = result_264
lw $t1, 1060($sp)
sw $t1, 1024($sp)
#Goto label_93
b label_93
#LabelNode label_86
label_86:
#LoadStr msg_33
la $t0, msg_33
sw $t0, 1216($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1220($sp)
#CallNode String_init
move $t0, $sp
# Arg l_303
lw $t1, 1216($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_304
lw $t1, 1220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1224($sp)
#AssignNode result_255 = instance_304
lw $t1, 1220($sp)
sw $t1, 1024($sp)
#LabelNode label_93
label_93:
#AssignNode result_246 = result_255
lw $t1, 1024($sp)
sw $t1, 988($sp)
#Goto label_94
b label_94
#LabelNode label_85
label_85:
#LoadStr msg_34
la $t0, msg_34
sw $t0, 1228($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1232($sp)
#CallNode String_init
move $t0, $sp
# Arg l_306
lw $t1, 1228($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_307
lw $t1, 1232($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1236($sp)
#AssignNode result_246 = instance_307
lw $t1, 1232($sp)
sw $t1, 988($sp)
#LabelNode label_94
label_94:
#AssignNode result_237 = result_246
lw $t1, 988($sp)
sw $t1, 952($sp)
#Goto label_95
b label_95
#LabelNode label_84
label_84:
#LoadStr msg_35
la $t0, msg_35
sw $t0, 1240($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1244($sp)
#CallNode String_init
move $t0, $sp
# Arg l_309
lw $t1, 1240($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_310
lw $t1, 1244($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1248($sp)
#AssignNode result_237 = instance_310
lw $t1, 1244($sp)
sw $t1, 952($sp)
#LabelNode label_95
label_95:
#AssignNode result_228 = result_237
lw $t1, 952($sp)
sw $t1, 916($sp)
#Goto label_96
b label_96
#LabelNode label_83
label_83:
#LoadStr msg_36
la $t0, msg_36
sw $t0, 1252($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1256($sp)
#CallNode String_init
move $t0, $sp
# Arg l_312
lw $t1, 1252($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_313
lw $t1, 1256($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1260($sp)
#AssignNode result_228 = instance_313
lw $t1, 1256($sp)
sw $t1, 916($sp)
#LabelNode label_96
label_96:
#AssignNode result_219 = result_228
lw $t1, 916($sp)
sw $t1, 880($sp)
#Goto label_97
b label_97
#LabelNode label_82
label_82:
#LoadStr msg_37
la $t0, msg_37
sw $t0, 1264($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1268($sp)
#CallNode String_init
move $t0, $sp
# Arg l_315
lw $t1, 1264($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_316
lw $t1, 1268($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1272($sp)
#AssignNode result_219 = instance_316
lw $t1, 1268($sp)
sw $t1, 880($sp)
#LabelNode label_97
label_97:
#AssignNode result_210 = result_219
lw $t1, 880($sp)
sw $t1, 844($sp)
#Goto label_98
b label_98
#LabelNode label_81
label_81:
#LoadStr msg_38
la $t0, msg_38
sw $t0, 1276($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1280($sp)
#CallNode String_init
move $t0, $sp
# Arg l_318
lw $t1, 1276($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_319
lw $t1, 1280($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1284($sp)
#AssignNode result_210 = instance_319
lw $t1, 1280($sp)
sw $t1, 844($sp)
#LabelNode label_98
label_98:
#AssignNode result_201 = result_210
lw $t1, 844($sp)
sw $t1, 808($sp)
#Goto label_99
b label_99
#LabelNode label_80
label_80:
#LoadStr msg_39
la $t0, msg_39
sw $t0, 1288($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1292($sp)
#CallNode String_init
move $t0, $sp
# Arg l_321
lw $t1, 1288($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_322
lw $t1, 1292($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1296($sp)
#AssignNode result_201 = instance_322
lw $t1, 1292($sp)
sw $t1, 808($sp)
#LabelNode label_99
label_99:
#AssignNode result_192 = result_201
lw $t1, 808($sp)
sw $t1, 772($sp)
#Goto label_100
b label_100
#LabelNode label_79
label_79:
#LoadStr msg_40
la $t0, msg_40
sw $t0, 1300($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1304($sp)
#CallNode String_init
move $t0, $sp
# Arg l_324
lw $t1, 1300($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_325
lw $t1, 1304($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1308($sp)
#AssignNode result_192 = instance_325
lw $t1, 1304($sp)
sw $t1, 772($sp)
#LabelNode label_100
label_100:
#AssignNode result_183 = result_192
lw $t1, 772($sp)
sw $t1, 736($sp)
#Goto label_101
b label_101
#LabelNode label_78
label_78:
#LoadStr msg_41
la $t0, msg_41
sw $t0, 1312($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1316($sp)
#CallNode String_init
move $t0, $sp
# Arg l_327
lw $t1, 1312($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_328
lw $t1, 1316($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1320($sp)
#AssignNode result_183 = instance_328
lw $t1, 1316($sp)
sw $t1, 736($sp)
#LabelNode label_101
label_101:
#AssignNode result_174 = result_183
lw $t1, 736($sp)
sw $t1, 700($sp)
#Goto label_102
b label_102
#LabelNode label_77
label_77:
#LoadStr msg_42
la $t0, msg_42
sw $t0, 1324($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1328($sp)
#CallNode String_init
move $t0, $sp
# Arg l_330
lw $t1, 1324($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_331
lw $t1, 1328($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1332($sp)
#AssignNode result_174 = instance_331
lw $t1, 1328($sp)
sw $t1, 700($sp)
#LabelNode label_102
label_102:
#AssignNode result_165 = result_174
lw $t1, 700($sp)
sw $t1, 664($sp)
#Goto label_103
b label_103
#LabelNode label_76
label_76:
#LoadStr msg_43
la $t0, msg_43
sw $t0, 1336($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1340($sp)
#CallNode String_init
move $t0, $sp
# Arg l_333
lw $t1, 1336($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_334
lw $t1, 1340($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1344($sp)
#AssignNode result_165 = instance_334
lw $t1, 1340($sp)
sw $t1, 664($sp)
#LabelNode label_103
label_103:
#AssignNode result_156 = result_165
lw $t1, 664($sp)
sw $t1, 628($sp)
#Goto label_104
b label_104
#LabelNode label_75
label_75:
#LoadStr msg_44
la $t0, msg_44
sw $t0, 1348($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1352($sp)
#CallNode String_init
move $t0, $sp
# Arg l_336
lw $t1, 1348($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_337
lw $t1, 1352($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1356($sp)
#AssignNode result_156 = instance_337
lw $t1, 1352($sp)
sw $t1, 628($sp)
#LabelNode label_104
label_104:
#AssignNode result_147 = result_156
lw $t1, 628($sp)
sw $t1, 592($sp)
#Goto label_105
b label_105
#LabelNode label_74
label_74:
#LoadStr msg_45
la $t0, msg_45
sw $t0, 1360($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1364($sp)
#CallNode String_init
move $t0, $sp
# Arg l_339
lw $t1, 1360($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_340
lw $t1, 1364($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1368($sp)
#AssignNode result_147 = instance_340
lw $t1, 1364($sp)
sw $t1, 592($sp)
#LabelNode label_105
label_105:
#AssignNode result_138 = result_147
lw $t1, 592($sp)
sw $t1, 556($sp)
#Goto label_106
b label_106
#LabelNode label_73
label_73:
#LoadStr msg_46
la $t0, msg_46
sw $t0, 1372($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1376($sp)
#CallNode String_init
move $t0, $sp
# Arg l_342
lw $t1, 1372($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_343
lw $t1, 1376($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1380($sp)
#AssignNode result_138 = instance_343
lw $t1, 1376($sp)
sw $t1, 556($sp)
#LabelNode label_106
label_106:
#AssignNode result_129 = result_138
lw $t1, 556($sp)
sw $t1, 520($sp)
#Goto label_107
b label_107
#LabelNode label_72
label_72:
#LoadStr msg_47
la $t0, msg_47
sw $t0, 1384($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1388($sp)
#CallNode String_init
move $t0, $sp
# Arg l_345
lw $t1, 1384($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_346
lw $t1, 1388($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1392($sp)
#AssignNode result_129 = instance_346
lw $t1, 1388($sp)
sw $t1, 520($sp)
#LabelNode label_107
label_107:
#AssignNode result_120 = result_129
lw $t1, 520($sp)
sw $t1, 484($sp)
#Goto label_108
b label_108
#LabelNode label_71
label_71:
#LoadStr msg_48
la $t0, msg_48
sw $t0, 1396($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1400($sp)
#CallNode String_init
move $t0, $sp
# Arg l_348
lw $t1, 1396($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_349
lw $t1, 1400($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1404($sp)
#AssignNode result_120 = instance_349
lw $t1, 1400($sp)
sw $t1, 484($sp)
#LabelNode label_108
label_108:
#AssignNode result_111 = result_120
lw $t1, 484($sp)
sw $t1, 448($sp)
#Goto label_109
b label_109
#LabelNode label_70
label_70:
#LoadStr msg_49
la $t0, msg_49
sw $t0, 1408($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1412($sp)
#CallNode String_init
move $t0, $sp
# Arg l_351
lw $t1, 1408($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_352
lw $t1, 1412($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1416($sp)
#AssignNode result_111 = instance_352
lw $t1, 1412($sp)
sw $t1, 448($sp)
#LabelNode label_109
label_109:
#AssignNode result_102 = result_111
lw $t1, 448($sp)
sw $t1, 412($sp)
#Goto label_110
b label_110
#LabelNode label_69
label_69:
#LoadStr msg_50
la $t0, msg_50
sw $t0, 1420($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 1424($sp)
#CallNode String_init
move $t0, $sp
# Arg l_354
lw $t1, 1420($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_355
lw $t1, 1424($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 1428($sp)
#AssignNode result_102 = instance_355
lw $t1, 1424($sp)
sw $t1, 412($sp)
#LabelNode label_110
label_110:
#AssignNode result_357 = result_102
lw $t1, 412($sp)
sw $t1, 1432($sp)
#Return result_357
lw $a1, 1432($sp)
lw $ra, 0($sp)
addi $sp, $sp, 1440
jr $ra
CellularAutomaton.prompt:
addi $sp, $sp, -136
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#AssignNode ans_3 = instance_0
lw $t1, 4($sp)
sw $t1, 16($sp)
#LoadStr msg_51
la $t0, msg_51
sw $t0, 24($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode String_init
move $t0, $sp
# Arg l_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 32($sp)
#VCall out_string
move $t0, $sp
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 20($sp)
#LoadStr msg_52
la $t0, msg_52
sw $t0, 40($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode String_init
move $t0, $sp
# Arg l_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 48($sp)
#VCall out_string
move $t0, $sp
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 36($sp)
#VCall in_string
move $t0, $sp
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 52($sp)
#AssignNode ans_3 = result_12
lw $t1, 52($sp)
sw $t1, 16($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 64($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#CallNode String_init
move $t0, $sp
# Arg l_15
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 72($sp)
#VCall out_string
move $t0, $sp
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 60($sp)
#LoadStr msg_53
la $t0, msg_53
sw $t0, 96($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode String_init
move $t0, $sp
# Arg l_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 104($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg ans_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 84($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 80($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 108($sp)
# IFGoto result_19 -> label_111
lw $t0, 80($sp)
lw $a0, 16($t0)
bnez $a0, label_111
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 112($sp)
#LoadInt 1
li $t0, 1
sw $t0, 116($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 120($sp)
#AssignNode result_18 = instance_27
lw $t1, 112($sp)
sw $t1, 76($sp)
#Goto label_112
b label_112
#LabelNode label_111
label_111:
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 124($sp)
#LoadInt 0
li $t0, 0
sw $t0, 128($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_31
lw $t1, 128($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 132($sp)
#AssignNode result_18 = instance_30
lw $t1, 124($sp)
sw $t1, 76($sp)
#LabelNode label_112
label_112:
#AssignNode result_33 = result_18
lw $t1, 76($sp)
sw $t1, 136($sp)
#Return result_33
lw $a1, 136($sp)
lw $ra, 0($sp)
addi $sp, $sp, 144
jr $ra
CellularAutomaton.prompt2:
addi $sp, $sp, -136
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#AssignNode ans_3 = instance_0
lw $t1, 4($sp)
sw $t1, 16($sp)
#LoadStr msg_54
la $t0, msg_54
sw $t0, 24($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode String_init
move $t0, $sp
# Arg l_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 32($sp)
#VCall out_string
move $t0, $sp
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 20($sp)
#LoadStr msg_55
la $t0, msg_55
sw $t0, 40($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode String_init
move $t0, $sp
# Arg l_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 48($sp)
#VCall out_string
move $t0, $sp
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 36($sp)
#LoadStr msg_56
la $t0, msg_56
sw $t0, 56($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode String_init
move $t0, $sp
# Arg l_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 64($sp)
#VCall out_string
move $t0, $sp
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 52($sp)
#VCall in_string
move $t0, $sp
# Arg self
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 140($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 20($t2)
jal $t3
sw $a1, 68($sp)
#AssignNode ans_3 = result_16
lw $t1, 68($sp)
sw $t1, 16($sp)
#LoadStr msg_57
la $t0, msg_57
sw $t0, 96($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#CallNode String_init
move $t0, $sp
# Arg l_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 104($sp)
#CallNode String_equals
move $t0, $sp
# Arg instance_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg ans_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_equals
sw $a1, 84($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 80($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 108($sp)
# IFGoto result_19 -> label_113
lw $t0, 80($sp)
lw $a0, 16($t0)
bnez $a0, label_113
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 112($sp)
#LoadInt 0
li $t0, 0
sw $t0, 116($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_28
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_27
lw $t1, 112($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 120($sp)
#AssignNode result_18 = instance_27
lw $t1, 112($sp)
sw $t1, 76($sp)
#Goto label_114
b label_114
#LabelNode label_113
label_113:
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 124($sp)
#LoadInt 1
li $t0, 1
sw $t0, 128($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_31
lw $t1, 128($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 132($sp)
#AssignNode result_18 = instance_30
lw $t1, 124($sp)
sw $t1, 76($sp)
#LabelNode label_114
label_114:
#AssignNode result_33 = result_18
lw $t1, 76($sp)
sw $t1, 136($sp)
#Return result_33
lw $a1, 136($sp)
lw $ra, 0($sp)
addi $sp, $sp, 144
jr $ra
Main_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode CellularAutomaton_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal CellularAutomaton_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr Maincells = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 32($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Main.main:
addi $sp, $sp, -172
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#AssignNode continue_3 = instance_0
lw $t1, 4($sp)
sw $t1, 16($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 24($sp)
#CallNode String_init
move $t0, $sp
# Arg value_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 28($sp)
#AssignNode choice_7 = instance_4
lw $t1, 20($sp)
sw $t1, 32($sp)
#LoadStr msg_58
la $t0, msg_58
sw $t0, 40($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode String_init
move $t0, $sp
# Arg l_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 48($sp)
#VCall out_string
move $t0, $sp
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 176($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 36($sp)
#LoadStr msg_59
la $t0, msg_59
sw $t0, 56($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode String_init
move $t0, $sp
# Arg l_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 64($sp)
#VCall out_string
move $t0, $sp
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 176($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 52($sp)
#LabelNode label_115
label_115:
#VCall prompt2
move $t0, $sp
# Arg self
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 176($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 104($t2)
jal $t3
sw $a1, 72($sp)
# IFGoto result_17 -> label_116
lw $t0, 72($sp)
lw $a0, 16($t0)
bnez $a0, label_116
#Goto label_117
b label_117
#LabelNode label_116
label_116:
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#LoadInt 1
li $t0, 1
sw $t0, 80($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 84($sp)
#AssignNode continue_3 = instance_18
lw $t1, 76($sp)
sw $t1, 16($sp)
#VCall option
move $t0, $sp
# Arg self
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 176($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 96($t2)
jal $t3
sw $a1, 92($sp)
#AssignNode choice_7 = result_22
lw $t1, 92($sp)
sw $t1, 32($sp)
#Allocate 3:tag CellularAutomaton:Class_name 8:Class_size
li $a0, 32
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, CellularAutomaton_name
sw $t1, 4($t0)
li $t1, 8
sw $t1, 8($t0)
la $t1, CellularAutomaton_methods
sw $t1, 12($t0)
sw $t0, 104($sp)
#CallNode CellularAutomaton_init
move $t0, $sp
# Arg result_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal CellularAutomaton_init
sw $a1, 108($sp)
#VCall init
move $t0, $sp
# Arg choice_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 104($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 36($t2)
jal $t3
sw $a1, 100($sp)
#SetAttr Maincells = result_24
lw $t0, 176($sp)
lw $t1, 100($sp)
sw $t1, 32($t0)
#GetAttr Main.cells = Main.cells
lw $t0, 176($sp)
lw $t1, 32($t0)
sw $t1, 164($sp)
#VCall print
move $t0, $sp
# Arg Main.cells
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 164($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 116($sp)
#LabelNode label_118
label_118:
# IFGoto continue_3 -> label_119
lw $t0, 16($sp)
lw $a0, 16($t0)
bnez $a0, label_119
#Goto label_120
b label_120
#LabelNode label_119
label_119:
#VCall prompt
move $t0, $sp
# Arg self
lw $t1, 176($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 176($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 100($t2)
jal $t3
sw $a1, 132($sp)
# IFGoto result_32 -> label_121
lw $t0, 132($sp)
lw $a0, 16($t0)
bnez $a0, label_121
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 136($sp)
#LoadInt 0
li $t0, 0
sw $t0, 140($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_34
lw $t1, 140($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_33
lw $t1, 136($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 144($sp)
#AssignNode continue_3 = instance_33
lw $t1, 136($sp)
sw $t1, 16($sp)
#AssignNode result_31 = instance_33
lw $t1, 136($sp)
sw $t1, 128($sp)
#Goto label_122
b label_122
#LabelNode label_121
label_121:
#GetAttr Main.cells = Main.cells
lw $t0, 176($sp)
lw $t1, 32($t0)
sw $t1, 164($sp)
#VCall evolve
move $t0, $sp
# Arg Main.cells
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 164($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 92($t2)
jal $t3
sw $a1, 152($sp)
#GetAttr Main.cells = Main.cells
lw $t0, 176($sp)
lw $t1, 32($t0)
sw $t1, 164($sp)
#VCall print
move $t0, $sp
# Arg Main.cells
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 164($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 160($sp)
#AssignNode result_31 = result_39
lw $t1, 160($sp)
sw $t1, 128($sp)
#LabelNode label_122
label_122:
#Goto label_118
b label_118
#LabelNode label_120
label_120:
#Goto label_115
b label_115
#LabelNode label_117
label_117:
#AssignNode result_41 = self
lw $t1, 176($sp)
sw $t1, 168($sp)
#AssignNode result_42 = result_41
lw $t1, 168($sp)
sw $t1, 172($sp)
#Return result_42
lw $a1, 172($sp)
lw $ra, 0($sp)
addi $sp, $sp, 180
jr $ra