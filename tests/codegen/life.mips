.data
	
	################
	# DATA SECTION #
	################

	####################
	# Types declaration #
	####################

	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_Board: .word 60
	type_Board_inherits_from: .word type_IO
	type_Board_name_address: .word type_Board_name_size
	type_Board___init__: .word function___init___at_Board
	type_Board_abort: .word function_abort_at_Object
	type_Board_type_name: .word function_type_name_at_Object
	type_Board_copy: .word function_copy_at_Object
	type_Board_out_string: .word function_out_string_at_IO
	type_Board_out_int: .word function_out_int_at_IO
	type_Board_in_string: .word function_in_string_at_IO
	type_Board_in_int: .word function_in_int_at_IO
	type_Board_size_of_board: .word function_size_of_board_at_Board
	type_Board_board_init: .word function_board_init_at_Board
	
	type_CellularAutomaton: .word 136
	type_CellularAutomaton_inherits_from: .word type_Board
	type_CellularAutomaton_name_address: .word type_CellularAutomaton_name_size
	type_CellularAutomaton___init__: .word function___init___at_CellularAutomaton
	type_CellularAutomaton_abort: .word function_abort_at_Object
	type_CellularAutomaton_type_name: .word function_type_name_at_Object
	type_CellularAutomaton_copy: .word function_copy_at_Object
	type_CellularAutomaton_out_string: .word function_out_string_at_IO
	type_CellularAutomaton_out_int: .word function_out_int_at_IO
	type_CellularAutomaton_in_string: .word function_in_string_at_IO
	type_CellularAutomaton_in_int: .word function_in_int_at_IO
	type_CellularAutomaton_size_of_board: .word function_size_of_board_at_Board
	type_CellularAutomaton_board_init: .word function_board_init_at_Board
	type_CellularAutomaton_init: .word function_init_at_CellularAutomaton
	type_CellularAutomaton_print: .word function_print_at_CellularAutomaton
	type_CellularAutomaton_num_cells: .word function_num_cells_at_CellularAutomaton
	type_CellularAutomaton_cell: .word function_cell_at_CellularAutomaton
	type_CellularAutomaton_north: .word function_north_at_CellularAutomaton
	type_CellularAutomaton_south: .word function_south_at_CellularAutomaton
	type_CellularAutomaton_east: .word function_east_at_CellularAutomaton
	type_CellularAutomaton_west: .word function_west_at_CellularAutomaton
	type_CellularAutomaton_northwest: .word function_northwest_at_CellularAutomaton
	type_CellularAutomaton_northeast: .word function_northeast_at_CellularAutomaton
	type_CellularAutomaton_southeast: .word function_southeast_at_CellularAutomaton
	type_CellularAutomaton_southwest: .word function_southwest_at_CellularAutomaton
	type_CellularAutomaton_neighbors: .word function_neighbors_at_CellularAutomaton
	type_CellularAutomaton_cell_at_next_evolution: .word function_cell_at_next_evolution_at_CellularAutomaton
	type_CellularAutomaton_evolve: .word function_evolve_at_CellularAutomaton
	type_CellularAutomaton_option: .word function_option_at_CellularAutomaton
	type_CellularAutomaton_prompt: .word function_prompt_at_CellularAutomaton
	type_CellularAutomaton_prompt2: .word function_prompt2_at_CellularAutomaton
	
	type_Main: .word 144
	type_Main_inherits_from: .word type_CellularAutomaton
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_size_of_board: .word function_size_of_board_at_Board
	type_Main_board_init: .word function_board_init_at_Board
	type_Main_init: .word function_init_at_CellularAutomaton
	type_Main_print: .word function_print_at_CellularAutomaton
	type_Main_num_cells: .word function_num_cells_at_CellularAutomaton
	type_Main_cell: .word function_cell_at_CellularAutomaton
	type_Main_north: .word function_north_at_CellularAutomaton
	type_Main_south: .word function_south_at_CellularAutomaton
	type_Main_east: .word function_east_at_CellularAutomaton
	type_Main_west: .word function_west_at_CellularAutomaton
	type_Main_northwest: .word function_northwest_at_CellularAutomaton
	type_Main_northeast: .word function_northeast_at_CellularAutomaton
	type_Main_southeast: .word function_southeast_at_CellularAutomaton
	type_Main_southwest: .word function_southwest_at_CellularAutomaton
	type_Main_neighbors: .word function_neighbors_at_CellularAutomaton
	type_Main_cell_at_next_evolution: .word function_cell_at_next_evolution_at_CellularAutomaton
	type_Main_evolve: .word function_evolve_at_CellularAutomaton
	type_Main_option: .word function_option_at_CellularAutomaton
	type_Main_prompt: .word function_prompt_at_CellularAutomaton
	type_Main_prompt2: .word function_prompt2_at_CellularAutomaton
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Board_name_size: .word 5
	type_Board_name: .asciiz "Board"
	
	type_CellularAutomaton_name_size: .word 17
	type_CellularAutomaton_name: .asciiz "CellularAutomaton"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	
	################
	# TEXT SECTION #
	################

	#########################
	# Functions declaration #
	#########################

	function_add:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# ADD FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		add $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SUB FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sub $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# TIMES FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		mult $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# DIV FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		div $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# XOR FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		xor $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		slt $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS EQ FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sle $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -40
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 32($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# internal_2 <- EQUALADDRESS (a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 <- EQUALADDRESS (b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# IF internal_2 THEN GOTO a_is_type_object
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_object
		
		# internal_3 <- TYPEOF a
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 <- DIRECTION OF String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_7 <- EQUALADDRESS (internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 <- EQUALADDRESS (internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 <- EQUALADDRESS (internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_7 THEN GOTO a_is_type_int_or_bool
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_8 THEN GOTO a_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_9 THEN GOTO a_is_type_string
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_string
		
		# JUMP TO a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 <- EQUALINT (a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 <- EQUALSTRING (a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# EQUAL FUNCT
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		seq $t2, $t0, $t1
		
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		lw $v1, 36($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -28
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 24($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_1 <- EQUALADDRESS (source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 <- EQUALADDRESS (dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# IF internal_1 THEN GOTO source_is_type_object
		lw $t0, 20($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_object
		
		# internal_2 <- TYPEOF source
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_5 <- EQUALADDRESS (internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 <- EQUALADDRESS (internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_5 THEN GOTO source_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# IF internal_6 THEN GOTO source_is_type_int_or_bool
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# JUMP TO source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest <- source WHERE source IS AN INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t0)
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		sw $t2, 8($v0)
		sw $v0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest <- source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		lw $v1, 32($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -24
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		
		addi $t0, $zero, 65
		sb $t0, 8($v0)
		
		addi $t0, $zero, 98
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		
		addi $t0, $zero, 116
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 100
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		
		addi $t0, $zero, 108
		sb $t0, 27($v0)
		
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		sb $zero, 32($v0)
		
		sw $v0, 20($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 8($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD type_name OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		lw $t0, 12($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# EXIT!
		li $v0, 10
		syscall
		
		lw $v1, 24($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- NAME OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t1)
		la $t3, 4($t2)
		lw $t2, 0($t2)
		
		addi $t2, $t2, 9
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9
		
		la $t4, type_String
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		
		addi $t4, $v0, 0
		addi $t4, $t4, 8
		xor $t5, $t5, $t5
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3)
		sb $t6, 0($t4)
		addi $t4, $t4, 1
		addi $t3, $t3, 1
		addi $t5, $t5, 1
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- COPY OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 4($t0)
		
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		addi $t3, $t3, 8
		addi $t2, $2, -8
		xor $t4, $t4, $t4
		
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0)
		sb $t5, 0($t3)
		addi $t0, $t0, 1
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		lw $t0, 0($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: x
		li $v0, 4
		move $a0, $t0
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# PRINTING INT: x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0
		while_read_start:
		lb $t1, buffer_input($t0)
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9
		la $t2, type_String
		sw $t2, 0($v0)
		sw $a0, 4($v0)
		
		addi $t3, $v0, 8
		xor $t4, $t4, $t4
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4)
		sb $t5, 0($t3)
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_0 <- LENGTH (self)
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0)
		lw $t3, 4($t1)
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3
		addi $t4, $t4, 9
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9
		add $t5, $zero, $v0
		addi $t5, $t5, 8
		
		la $t8, type_String
		sw $t8, 0($v0)
		
		sw $a0, 4($v0)
		
		xor $t6, $t6, $t6
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str1_start
		while_copy_str1_end:
		
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self[i:i + l]
		lw $t0, 12($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t2, 8($sp)
		lw $t2, 8($t2)
		lw $t3, 4($sp)
		lw $t3, 8($t3)
		add $t4, $t2, $t3
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0)
		
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		add $t0, $t0, $t2
		move $t5, $v0
		add $t5, $t5, 8
		xor $t6, $t6, $t6
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Board:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 12($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8738246174989
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246174989
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246174989
		j object_set_attribute_8738246174989
		int_set_attribute_8738246174989:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246174989
		bool_set_attribute_8738246174989:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246174989
		object_set_attribute_8738246174989:
		sw $t1, 8($t0)
		end_set_attribute_8738246174989:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 12($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8738246175013
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246175013
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246175013
		j object_set_attribute_8738246175013
		int_set_attribute_8738246175013:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246175013
		bool_set_attribute_8738246175013:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246175013
		object_set_attribute_8738246175013:
		sw $t1, 12($t0)
		end_set_attribute_8738246175013:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 12($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8738246175037
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246175037
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246175037
		j object_set_attribute_8738246175037
		int_set_attribute_8738246175037:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246175037
		bool_set_attribute_8738246175037:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246175037
		object_set_attribute_8738246175037:
		sw $t1, 16($t0)
		end_set_attribute_8738246175037:
		
		lw $v1, 12($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	function_size_of_board_at_Board:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD length OF String
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [initial]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_2
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	function_board_init_at_Board:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -168
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# GET METHOD size_of_board OF Board
		lw $t0, 172($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 156($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 152($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 184($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [start]
		lw $t0, 180($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 164($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [size]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 176($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# ALLOCATING INT -> 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 15
		sw $t0, 8($v0)
		sw $v0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [size]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_6]
		lw $t0, 152($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		# internal_5 <- internal_7
		lw $t0, 136($sp)
		sw $t0, 144($sp)
		
		# IF internal_5 THEN GOTO then_8738246206549
		lw $t0, 144($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246206549
		
		# JUMP TO else_8738246206549
		j else_8738246206549
		
		then_8738246206549:
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 172($sp)
		lw $t1, 132($sp)
		beq $t1, $zero, object_set_attribute_8738246176919
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246176919
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246176919
		j object_set_attribute_8738246176919
		int_set_attribute_8738246176919:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246176919
		bool_set_attribute_8738246176919:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246176919
		object_set_attribute_8738246176919:
		sw $t1, 8($t0)
		end_set_attribute_8738246176919:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 172($sp)
		lw $t1, 128($sp)
		beq $t1, $zero, object_set_attribute_8738246176943
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246176943
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246176943
		j object_set_attribute_8738246176943
		int_set_attribute_8738246176943:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246176943
		bool_set_attribute_8738246176943:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246176943
		object_set_attribute_8738246176943:
		sw $t1, 12($t0)
		end_set_attribute_8738246176943:
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 172($sp)
		lw $t1, 164($sp)
		beq $t1, $zero, object_set_attribute_8738246176967
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246176967
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246176967
		j object_set_attribute_8738246176967
		int_set_attribute_8738246176967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246176967
		bool_set_attribute_8738246176967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246176967
		object_set_attribute_8738246176967:
		sw $t1, 16($t0)
		end_set_attribute_8738246176967:
		
		# internal_4 <- size
		lw $t0, 164($sp)
		sw $t0, 148($sp)
		
		# JUMP TO endif_8738246206549
		j endif_8738246206549
		
		else_8738246206549:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# ALLOCATING INT -> 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 16
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [size]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 128($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 124($sp)
		addi $sp, $sp, 12
		
		# internal_11 <- internal_13
		lw $t0, 112($sp)
		sw $t0, 120($sp)
		
		# IF internal_11 THEN GOTO then_8738246206639
		lw $t0, 120($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246206639
		
		# JUMP TO else_8738246206639
		j else_8738246206639
		
		then_8738246206639:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 108($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 172($sp)
		lw $t1, 108($sp)
		beq $t1, $zero, object_set_attribute_8738246177374
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246177374
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246177374
		j object_set_attribute_8738246177374
		int_set_attribute_8738246177374:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246177374
		bool_set_attribute_8738246177374:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246177374
		object_set_attribute_8738246177374:
		sw $t1, 8($t0)
		end_set_attribute_8738246177374:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 172($sp)
		lw $t1, 104($sp)
		beq $t1, $zero, object_set_attribute_8738246177398
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246177398
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246177398
		j object_set_attribute_8738246177398
		int_set_attribute_8738246177398:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246177398
		bool_set_attribute_8738246177398:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246177398
		object_set_attribute_8738246177398:
		sw $t1, 12($t0)
		end_set_attribute_8738246177398:
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 172($sp)
		lw $t1, 164($sp)
		beq $t1, $zero, object_set_attribute_8738246177422
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246177422
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246177422
		j object_set_attribute_8738246177422
		int_set_attribute_8738246177422:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246177422
		bool_set_attribute_8738246177422:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246177422
		object_set_attribute_8738246177422:
		sw $t1, 16($t0)
		end_set_attribute_8738246177422:
		
		# internal_10 <- size
		lw $t0, 164($sp)
		sw $t0, 124($sp)
		
		# JUMP TO endif_8738246206639
		j endif_8738246206639
		
		else_8738246206639:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# ALLOCATING INT -> 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 20
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [size]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_17 <- internal_19
		lw $t0, 88($sp)
		sw $t0, 96($sp)
		
		# IF internal_17 THEN GOTO then_8738246207501
		lw $t0, 96($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246207501
		
		# JUMP TO else_8738246207501
		j else_8738246207501
		
		then_8738246207501:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 172($sp)
		lw $t1, 84($sp)
		beq $t1, $zero, object_set_attribute_8738246176037
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246176037
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246176037
		j object_set_attribute_8738246176037
		int_set_attribute_8738246176037:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246176037
		bool_set_attribute_8738246176037:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246176037
		object_set_attribute_8738246176037:
		sw $t1, 8($t0)
		end_set_attribute_8738246176037:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 172($sp)
		lw $t1, 80($sp)
		beq $t1, $zero, object_set_attribute_8738246176061
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246176061
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246176061
		j object_set_attribute_8738246176061
		int_set_attribute_8738246176061:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246176061
		bool_set_attribute_8738246176061:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246176061
		object_set_attribute_8738246176061:
		sw $t1, 12($t0)
		end_set_attribute_8738246176061:
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 172($sp)
		lw $t1, 164($sp)
		beq $t1, $zero, object_set_attribute_8738246176085
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246176085
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246176085
		j object_set_attribute_8738246176085
		int_set_attribute_8738246176085:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246176085
		bool_set_attribute_8738246176085:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246176085
		object_set_attribute_8738246176085:
		sw $t1, 16($t0)
		end_set_attribute_8738246176085:
		
		# internal_16 <- size
		lw $t0, 164($sp)
		sw $t0, 100($sp)
		
		# JUMP TO endif_8738246207501
		j endif_8738246207501
		
		else_8738246207501:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# ALLOCATING INT -> 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 21
		sw $t0, 8($v0)
		sw $v0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [size]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_24]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# internal_23 <- internal_25
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# IF internal_23 THEN GOTO then_8738246207591
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246207591
		
		# JUMP TO else_8738246207591
		j else_8738246207591
		
		then_8738246207591:
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 172($sp)
		lw $t1, 60($sp)
		beq $t1, $zero, object_set_attribute_8738246176232
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246176232
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246176232
		j object_set_attribute_8738246176232
		int_set_attribute_8738246176232:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246176232
		bool_set_attribute_8738246176232:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246176232
		object_set_attribute_8738246176232:
		sw $t1, 8($t0)
		end_set_attribute_8738246176232:
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 172($sp)
		lw $t1, 56($sp)
		beq $t1, $zero, object_set_attribute_8738246177802
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246177802
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246177802
		j object_set_attribute_8738246177802
		int_set_attribute_8738246177802:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246177802
		bool_set_attribute_8738246177802:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246177802
		object_set_attribute_8738246177802:
		sw $t1, 12($t0)
		end_set_attribute_8738246177802:
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 172($sp)
		lw $t1, 164($sp)
		beq $t1, $zero, object_set_attribute_8738246177820
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246177820
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246177820
		j object_set_attribute_8738246177820
		int_set_attribute_8738246177820:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246177820
		bool_set_attribute_8738246177820:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246177820
		object_set_attribute_8738246177820:
		sw $t1, 16($t0)
		end_set_attribute_8738246177820:
		
		# internal_22 <- size
		lw $t0, 164($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246207591
		j endif_8738246207591
		
		else_8738246207591:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ALLOCATING INT -> 25
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 25
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [size]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_29 <- internal_31
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# IF internal_29 THEN GOTO then_8738246207681
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246207681
		
		# JUMP TO else_8738246207681
		j else_8738246207681
		
		then_8738246207681:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 172($sp)
		lw $t1, 36($sp)
		beq $t1, $zero, object_set_attribute_8738246177967
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246177967
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246177967
		j object_set_attribute_8738246177967
		int_set_attribute_8738246177967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246177967
		bool_set_attribute_8738246177967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246177967
		object_set_attribute_8738246177967:
		sw $t1, 8($t0)
		end_set_attribute_8738246177967:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 172($sp)
		lw $t1, 32($sp)
		beq $t1, $zero, object_set_attribute_8738246177991
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246177991
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246177991
		j object_set_attribute_8738246177991
		int_set_attribute_8738246177991:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246177991
		bool_set_attribute_8738246177991:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246177991
		object_set_attribute_8738246177991:
		sw $t1, 12($t0)
		end_set_attribute_8738246177991:
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 172($sp)
		lw $t1, 164($sp)
		beq $t1, $zero, object_set_attribute_8738246178015
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246178015
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246178015
		j object_set_attribute_8738246178015
		int_set_attribute_8738246178015:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246178015
		bool_set_attribute_8738246178015:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246178015
		object_set_attribute_8738246178015:
		sw $t1, 16($t0)
		end_set_attribute_8738246178015:
		
		# internal_28 <- size
		lw $t0, 164($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8738246207681
		j endif_8738246207681
		
		else_8738246207681:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# ALLOCATING INT -> 28
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 28
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [size]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_36]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# internal_35 <- internal_37
		lw $t0, 16($sp)
		sw $t0, 24($sp)
		
		# IF internal_35 THEN GOTO then_8738246208290
		lw $t0, 24($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246208290
		
		# JUMP TO else_8738246208290
		j else_8738246208290
		
		then_8738246208290:
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 12($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 172($sp)
		lw $t1, 12($sp)
		beq $t1, $zero, object_set_attribute_8738246179446
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246179446
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246179446
		j object_set_attribute_8738246179446
		int_set_attribute_8738246179446:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246179446
		bool_set_attribute_8738246179446:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246179446
		object_set_attribute_8738246179446:
		sw $t1, 8($t0)
		end_set_attribute_8738246179446:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 172($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8738246179470
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246179470
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246179470
		j object_set_attribute_8738246179470
		int_set_attribute_8738246179470:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246179470
		bool_set_attribute_8738246179470:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246179470
		object_set_attribute_8738246179470:
		sw $t1, 12($t0)
		end_set_attribute_8738246179470:
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 172($sp)
		lw $t1, 164($sp)
		beq $t1, $zero, object_set_attribute_8738246179494
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246179494
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246179494
		j object_set_attribute_8738246179494
		int_set_attribute_8738246179494:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246179494
		bool_set_attribute_8738246179494:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246179494
		object_set_attribute_8738246179494:
		sw $t1, 16($t0)
		end_set_attribute_8738246179494:
		
		# internal_34 <- size
		lw $t0, 164($sp)
		sw $t0, 28($sp)
		
		# JUMP TO endif_8738246208290
		j endif_8738246208290
		
		else_8738246208290:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 172($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8738246179530
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246179530
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246179530
		j object_set_attribute_8738246179530
		int_set_attribute_8738246179530:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246179530
		bool_set_attribute_8738246179530:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246179530
		object_set_attribute_8738246179530:
		sw $t1, 8($t0)
		end_set_attribute_8738246179530:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 172($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8738246179554
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246179554
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246179554
		j object_set_attribute_8738246179554
		int_set_attribute_8738246179554:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246179554
		bool_set_attribute_8738246179554:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246179554
		object_set_attribute_8738246179554:
		sw $t1, 12($t0)
		end_set_attribute_8738246179554:
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 172($sp)
		lw $t1, 164($sp)
		beq $t1, $zero, object_set_attribute_8738246179575
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246179575
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246179575
		j object_set_attribute_8738246179575
		int_set_attribute_8738246179575:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246179575
		bool_set_attribute_8738246179575:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246179575
		object_set_attribute_8738246179575:
		sw $t1, 16($t0)
		end_set_attribute_8738246179575:
		
		# internal_34 <- size
		lw $t0, 164($sp)
		sw $t0, 28($sp)
		
		# JUMP TO endif_8738246208290
		j endif_8738246208290
		
		endif_8738246208290:
		
		# internal_28 <- internal_34
		lw $t0, 28($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8738246207681
		j endif_8738246207681
		
		endif_8738246207681:
		
		# internal_22 <- internal_28
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246207591
		j endif_8738246207591
		
		endif_8738246207591:
		
		# internal_16 <- internal_22
		lw $t0, 76($sp)
		sw $t0, 100($sp)
		
		# JUMP TO endif_8738246207501
		j endif_8738246207501
		
		endif_8738246207501:
		
		# internal_10 <- internal_16
		lw $t0, 100($sp)
		sw $t0, 124($sp)
		
		# JUMP TO endif_8738246206639
		j endif_8738246206639
		
		endif_8738246206639:
		
		# internal_4 <- internal_10
		lw $t0, 124($sp)
		sw $t0, 148($sp)
		
		# JUMP TO endif_8738246206549
		j endif_8738246206549
		
		endif_8738246206549:
		
		lw $v1, 172($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 168
		
		jr $ra
		
	function___init___at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 12($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		beq $t1, $zero, object_set_attribute_8738246180151
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246180151
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246180151
		j object_set_attribute_8738246180151
		int_set_attribute_8738246180151:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246180151
		bool_set_attribute_8738246180151:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246180151
		object_set_attribute_8738246180151:
		sw $t1, 8($t0)
		end_set_attribute_8738246180151:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8738246180175
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246180175
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246180175
		j object_set_attribute_8738246180175
		int_set_attribute_8738246180175:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246180175
		bool_set_attribute_8738246180175:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246180175
		object_set_attribute_8738246180175:
		sw $t1, 12($t0)
		end_set_attribute_8738246180175:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 16($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8738246180199
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246180199
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246180199
		j object_set_attribute_8738246180199
		int_set_attribute_8738246180199:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246180199
		bool_set_attribute_8738246180199:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246180199
		object_set_attribute_8738246180199:
		sw $t1, 16($t0)
		end_set_attribute_8738246180199:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 0($sp)
		
		# SET ATTRIBUTE population_map OF self
		lw $t0, 16($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8738246180223
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246180223
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246180223
		j object_set_attribute_8738246180223
		int_set_attribute_8738246180223:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246180223
		bool_set_attribute_8738246180223:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246180223
		object_set_attribute_8738246180223:
		sw $t1, 20($t0)
		end_set_attribute_8738246180223:
		
		lw $v1, 16($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_init_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -12
		
		# SET ATTRIBUTE population_map OF self
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		beq $t1, $zero, object_set_attribute_8738246180271
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246180271
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246180271
		j object_set_attribute_8738246180271
		int_set_attribute_8738246180271:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246180271
		bool_set_attribute_8738246180271:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246180271
		object_set_attribute_8738246180271:
		sw $t1, 20($t0)
		end_set_attribute_8738246180271:
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD board_init OF CellularAutomaton
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 28($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [map]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_2
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 16($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 12
		
		jr $ra
		
	function_print_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -112
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE board_size OF self
		lw $t0, 112($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246181202
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246181202
		j object_get_attribute_8738246181202
		int_get_attribute_8738246181202:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 96($sp)
		j end_get_attribute_8738246181202
		bool_get_attribute_8738246181202:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 96($sp)
		j end_get_attribute_8738246181202
		object_get_attribute_8738246181202:
		sw $t1, 96($sp)
		end_get_attribute_8738246181202:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 92($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_7
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING NUll INTO -> internal_8
		sw $zero, 76($sp)
		
		while_start_8738246207633:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# IF internal_9 THEN GOTO while_body_8738246207633
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8738246207633
		
		# JUMP TO while_end_8738246207633
		j while_end_8738246207633
		
		while_body_8738246207633:
		
		# GET ATTRIBUTE population_map OF self
		lw $t0, 112($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246181717
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246181717
		j object_get_attribute_8738246181717
		int_get_attribute_8738246181717:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8738246181717
		bool_get_attribute_8738246181717:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8738246181717
		object_get_attribute_8738246181717:
		sw $t1, 68($sp)
		end_get_attribute_8738246181717:
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 112($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246181732
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246181732
		j object_get_attribute_8738246181732
		int_get_attribute_8738246181732:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp)
		j end_get_attribute_8738246181732
		bool_get_attribute_8738246181732:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp)
		j end_get_attribute_8738246181732
		object_get_attribute_8738246181732:
		sw $t1, 64($sp)
		end_get_attribute_8738246181732:
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# GET METHOD substr OF String
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 84($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_14
		lw $t0, 68($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 16
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_17
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 36($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_21
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 112($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246181904
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246181904
		j object_get_attribute_8738246181904
		int_get_attribute_8738246181904:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($sp)
		j end_get_attribute_8738246181904
		bool_get_attribute_8738246181904:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($sp)
		j end_get_attribute_8738246181904
		object_get_attribute_8738246181904:
		sw $t1, 20($sp)
		end_get_attribute_8738246181904:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [i]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_23]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# JUMP TO while_start_8738246207633
		j while_start_8738246207633
		
		while_end_8738246207633:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 12($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 124($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_24]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_27
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		lw $v1, 112($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 112
		
		jr $ra
		
	function_num_cells_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# GET ATTRIBUTE population_map OF self
		lw $t0, 16($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246181232
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246181232
		j object_get_attribute_8738246181232
		int_get_attribute_8738246181232:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8738246181232
		bool_get_attribute_8738246181232:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp)
		j end_get_attribute_8738246181232
		object_get_attribute_8738246181232:
		sw $t1, 12($sp)
		end_get_attribute_8738246181232:
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD length OF String
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		lw $v1, 8($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 16
		
		jr $ra
		
	function_cell_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -48
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET ATTRIBUTE board_size OF self
		lw $t0, 52($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246182102
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246182102
		j object_get_attribute_8738246182102
		int_get_attribute_8738246182102:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp)
		j end_get_attribute_8738246182102
		bool_get_attribute_8738246182102:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp)
		j end_get_attribute_8738246182102
		object_get_attribute_8738246182102:
		sw $t1, 36($sp)
		end_get_attribute_8738246182102:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_5
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# IF internal_1 THEN GOTO then_8738246208497
		lw $t0, 40($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246208497
		
		# JUMP TO else_8738246208497
		j else_8738246208497
		
		then_8738246208497:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_0 <- internal_6
		lw $t0, 20($sp)
		sw $t0, 44($sp)
		
		# JUMP TO endif_8738246208497
		j endif_8738246208497
		
		else_8738246208497:
		
		# GET ATTRIBUTE population_map OF self
		lw $t0, 52($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246149985
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246149985
		j object_get_attribute_8738246149985
		int_get_attribute_8738246149985:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246149985
		bool_get_attribute_8738246149985:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246149985
		object_get_attribute_8738246149985:
		sw $t1, 16($sp)
		end_get_attribute_8738246149985:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 12($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD substr OF String
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -16
		sw $ra, 12($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 32($sp)
		sw $t0, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 16($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 16
		
		# internal_0 <- internal_9
		lw $t0, 8($sp)
		sw $t0, 44($sp)
		
		# JUMP TO endif_8738246208497
		j endif_8738246208497
		
		endif_8738246208497:
		
		lw $v1, 44($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 48
		
		jr $ra
		
	function_north_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -48
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 52($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246150410
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246150410
		j object_get_attribute_8738246150410
		int_get_attribute_8738246150410:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp)
		j end_get_attribute_8738246150410
		bool_get_attribute_8738246150410:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp)
		j end_get_attribute_8738246150410
		object_get_attribute_8738246150410:
		sw $t1, 36($sp)
		end_get_attribute_8738246150410:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 44($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_5
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# IF internal_1 THEN GOTO then_8738246209118
		lw $t0, 40($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246209118
		
		# JUMP TO else_8738246209118
		j else_8738246209118
		
		then_8738246209118:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_0 <- internal_6
		lw $t0, 20($sp)
		sw $t0, 44($sp)
		
		# JUMP TO endif_8738246209118
		j endif_8738246209118
		
		else_8738246209118:
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 52($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246150563
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246150563
		j object_get_attribute_8738246150563
		int_get_attribute_8738246150563:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246150563
		bool_get_attribute_8738246150563:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246150563
		object_get_attribute_8738246150563:
		sw $t1, 16($sp)
		end_get_attribute_8738246150563:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD cell OF CellularAutomaton
		lw $t0, 52($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_0 <- internal_9
		lw $t0, 8($sp)
		sw $t0, 44($sp)
		
		# JUMP TO endif_8738246209118
		j endif_8738246209118
		
		endif_8738246209118:
		
		lw $v1, 44($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 48
		
		jr $ra
		
	function_south_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -48
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET ATTRIBUTE board_size OF self
		lw $t0, 52($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246150967
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246150967
		j object_get_attribute_8738246150967
		int_get_attribute_8738246150967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp)
		j end_get_attribute_8738246150967
		bool_get_attribute_8738246150967:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp)
		j end_get_attribute_8738246150967
		object_get_attribute_8738246150967:
		sw $t1, 36($sp)
		end_get_attribute_8738246150967:
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 52($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246150994
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246150994
		j object_get_attribute_8738246150994
		int_get_attribute_8738246150994:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246150994
		bool_get_attribute_8738246150994:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246150994
		object_get_attribute_8738246150994:
		sw $t1, 32($sp)
		end_get_attribute_8738246150994:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_5
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# IF internal_1 THEN GOTO then_8738246209184
		lw $t0, 40($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246209184
		
		# JUMP TO else_8738246209184
		j else_8738246209184
		
		then_8738246209184:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_0 <- internal_6
		lw $t0, 20($sp)
		sw $t0, 44($sp)
		
		# JUMP TO endif_8738246209184
		j endif_8738246209184
		
		else_8738246209184:
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 52($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246151135
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246151135
		j object_get_attribute_8738246151135
		int_get_attribute_8738246151135:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246151135
		bool_get_attribute_8738246151135:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246151135
		object_get_attribute_8738246151135:
		sw $t1, 16($sp)
		end_get_attribute_8738246151135:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 60($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD cell OF CellularAutomaton
		lw $t0, 52($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_0 <- internal_9
		lw $t0, 8($sp)
		sw $t0, 44($sp)
		
		# JUMP TO endif_8738246209184
		j endif_8738246209184
		
		endif_8738246209184:
		
		lw $v1, 44($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 48
		
		jr $ra
		
	function_east_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -68
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 72($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246151867
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246151867
		j object_get_attribute_8738246151867
		int_get_attribute_8738246151867:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8738246151867
		bool_get_attribute_8738246151867:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8738246151867
		object_get_attribute_8738246151867:
		sw $t1, 48($sp)
		end_get_attribute_8738246151867:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 72($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246151894
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246151894
		j object_get_attribute_8738246151894
		int_get_attribute_8738246151894:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246151894
		bool_get_attribute_8738246151894:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246151894
		object_get_attribute_8738246151894:
		sw $t1, 40($sp)
		end_get_attribute_8738246151894:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_6]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_10
		lw $t0, 24($sp)
		sw $t0, 60($sp)
		
		# IF internal_1 THEN GOTO then_8738246209253
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246209253
		
		# JUMP TO else_8738246209253
		j else_8738246209253
		
		then_8738246209253:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_0 <- internal_11
		lw $t0, 20($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246209253
		j endif_8738246209253
		
		else_8738246209253:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD cell OF CellularAutomaton
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_16
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_0 <- internal_14
		lw $t0, 8($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246209253
		j endif_8738246209253
		
		endif_8738246209253:
		
		lw $v1, 64($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 68
		
		jr $ra
		
	function_west_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -72
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_3
		lw $t0, 56($sp)
		sw $t0, 64($sp)
		
		# IF internal_1 THEN GOTO then_8738246209859
		lw $t0, 64($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246209859
		
		# JUMP TO else_8738246209859
		j else_8738246209859
		
		then_8738246209859:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 52($sp)
		
		# internal_0 <- internal_4
		lw $t0, 52($sp)
		sw $t0, 68($sp)
		
		# JUMP TO endif_8738246209859
		j endif_8738246209859
		
		else_8738246209859:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 76($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246152918
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246152918
		j object_get_attribute_8738246152918
		int_get_attribute_8738246152918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246152918
		bool_get_attribute_8738246152918:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246152918
		object_get_attribute_8738246152918:
		sw $t1, 40($sp)
		end_get_attribute_8738246152918:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_7]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 76($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246152945
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246152945
		j object_get_attribute_8738246152945
		int_get_attribute_8738246152945:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246152945
		bool_get_attribute_8738246152945:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246152945
		object_get_attribute_8738246152945:
		sw $t1, 32($sp)
		end_get_attribute_8738246152945:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_8]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_6 <- internal_11
		lw $t0, 24($sp)
		sw $t0, 44($sp)
		
		# IF internal_6 THEN GOTO then_8738246209958
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246209958
		
		# JUMP TO else_8738246209958
		j else_8738246209958
		
		then_8738246209958:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_5 <- internal_12
		lw $t0, 20($sp)
		sw $t0, 48($sp)
		
		# JUMP TO endif_8738246209958
		j endif_8738246209958
		
		else_8738246209958:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 84($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD cell OF CellularAutomaton
		lw $t0, 76($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 88($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_17
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_5 <- internal_15
		lw $t0, 8($sp)
		sw $t0, 48($sp)
		
		# JUMP TO endif_8738246209958
		j endif_8738246209958
		
		endif_8738246209958:
		
		# internal_0 <- internal_5
		lw $t0, 48($sp)
		sw $t0, 68($sp)
		
		# JUMP TO endif_8738246209859
		j endif_8738246209859
		
		endif_8738246209859:
		
		lw $v1, 68($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 72
		
		jr $ra
		
	function_northwest_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -80
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 84($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246153518
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246153518
		j object_get_attribute_8738246153518
		int_get_attribute_8738246153518:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8738246153518
		bool_get_attribute_8738246153518:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8738246153518
		object_get_attribute_8738246153518:
		sw $t1, 68($sp)
		end_get_attribute_8738246153518:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_5
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# IF internal_1 THEN GOTO then_8738246209970
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246209970
		
		# JUMP TO else_8738246209970
		j else_8738246209970
		
		then_8738246209970:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 52($sp)
		
		# internal_0 <- internal_6
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246209970
		j endif_8738246209970
		
		else_8738246209970:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 84($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246153722
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246153722
		j object_get_attribute_8738246153722
		int_get_attribute_8738246153722:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246153722
		bool_get_attribute_8738246153722:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246153722
		object_get_attribute_8738246153722:
		sw $t1, 40($sp)
		end_get_attribute_8738246153722:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 84($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246154009
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246154009
		j object_get_attribute_8738246154009
		int_get_attribute_8738246154009:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246154009
		bool_get_attribute_8738246154009:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246154009
		object_get_attribute_8738246154009:
		sw $t1, 32($sp)
		end_get_attribute_8738246154009:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- internal_13
		lw $t0, 24($sp)
		sw $t0, 44($sp)
		
		# IF internal_8 THEN GOTO then_8738246210606
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246210606
		
		# JUMP TO else_8738246210606
		j else_8738246210606
		
		then_8738246210606:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_7 <- internal_14
		lw $t0, 20($sp)
		sw $t0, 48($sp)
		
		# JUMP TO endif_8738246210606
		j endif_8738246210606
		
		else_8738246210606:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD north OF CellularAutomaton
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_19
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_7 <- internal_17
		lw $t0, 8($sp)
		sw $t0, 48($sp)
		
		# JUMP TO endif_8738246210606
		j endif_8738246210606
		
		endif_8738246210606:
		
		# internal_0 <- internal_7
		lw $t0, 48($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246209970
		j endif_8738246209970
		
		endif_8738246209970:
		
		lw $v1, 76($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 80
		
		jr $ra
		
	function_northeast_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -96
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 100($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246154578
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246154578
		j object_get_attribute_8738246154578
		int_get_attribute_8738246154578:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp)
		j end_get_attribute_8738246154578
		bool_get_attribute_8738246154578:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp)
		j end_get_attribute_8738246154578
		object_get_attribute_8738246154578:
		sw $t1, 84($sp)
		end_get_attribute_8738246154578:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_5
		lw $t0, 72($sp)
		sw $t0, 88($sp)
		
		# IF internal_1 THEN GOTO then_8738246210618
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246210618
		
		# JUMP TO else_8738246210618
		j else_8738246210618
		
		then_8738246210618:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 68($sp)
		
		# internal_0 <- internal_6
		lw $t0, 68($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8738246210618
		j endif_8738246210618
		
		else_8738246210618:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 100($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246155084
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246155084
		j object_get_attribute_8738246155084
		int_get_attribute_8738246155084:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8738246155084
		bool_get_attribute_8738246155084:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8738246155084
		object_get_attribute_8738246155084:
		sw $t1, 48($sp)
		end_get_attribute_8738246155084:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 100($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246155111
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246155111
		j object_get_attribute_8738246155111
		int_get_attribute_8738246155111:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246155111
		bool_get_attribute_8738246155111:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246155111
		object_get_attribute_8738246155111:
		sw $t1, 40($sp)
		end_get_attribute_8738246155111:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- internal_17
		lw $t0, 24($sp)
		sw $t0, 60($sp)
		
		# IF internal_8 THEN GOTO then_8738246210762
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246210762
		
		# JUMP TO else_8738246210762
		j else_8738246210762
		
		then_8738246210762:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_7 <- internal_18
		lw $t0, 20($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246210762
		j endif_8738246210762
		
		else_8738246210762:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD north OF CellularAutomaton
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_7 <- internal_21
		lw $t0, 8($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246210762
		j endif_8738246210762
		
		endif_8738246210762:
		
		# internal_0 <- internal_7
		lw $t0, 64($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8738246210618
		j endif_8738246210618
		
		endif_8738246210618:
		
		lw $v1, 92($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 96
		
		jr $ra
		
	function_southeast_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -96
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# GET ATTRIBUTE board_size OF self
		lw $t0, 100($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246155963
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246155963
		j object_get_attribute_8738246155963
		int_get_attribute_8738246155963:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp)
		j end_get_attribute_8738246155963
		bool_get_attribute_8738246155963:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp)
		j end_get_attribute_8738246155963
		object_get_attribute_8738246155963:
		sw $t1, 84($sp)
		end_get_attribute_8738246155963:
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 100($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246155990
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246155990
		j object_get_attribute_8738246155990
		int_get_attribute_8738246155990:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 80($sp)
		j end_get_attribute_8738246155990
		bool_get_attribute_8738246155990:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 80($sp)
		j end_get_attribute_8738246155990
		object_get_attribute_8738246155990:
		sw $t1, 80($sp)
		end_get_attribute_8738246155990:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_5
		lw $t0, 72($sp)
		sw $t0, 88($sp)
		
		# IF internal_1 THEN GOTO then_8738246210777
		lw $t0, 88($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246210777
		
		# JUMP TO else_8738246210777
		j else_8738246210777
		
		then_8738246210777:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 68($sp)
		
		# internal_0 <- internal_6
		lw $t0, 68($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8738246210777
		j endif_8738246210777
		
		else_8738246210777:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 100($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246156484
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246156484
		j object_get_attribute_8738246156484
		int_get_attribute_8738246156484:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8738246156484
		bool_get_attribute_8738246156484:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp)
		j end_get_attribute_8738246156484
		object_get_attribute_8738246156484:
		sw $t1, 48($sp)
		end_get_attribute_8738246156484:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 64($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 100($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246156511
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246156511
		j object_get_attribute_8738246156511
		int_get_attribute_8738246156511:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246156511
		bool_get_attribute_8738246156511:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246156511
		object_get_attribute_8738246156511:
		sw $t1, 40($sp)
		end_get_attribute_8738246156511:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 56($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- internal_17
		lw $t0, 24($sp)
		sw $t0, 60($sp)
		
		# IF internal_8 THEN GOTO then_8738246211178
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211178
		
		# JUMP TO else_8738246211178
		j else_8738246211178
		
		then_8738246211178:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_7 <- internal_18
		lw $t0, 20($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246211178
		j endif_8738246211178
		
		else_8738246211178:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 15
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD south OF CellularAutomaton
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 112($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_7 <- internal_21
		lw $t0, 8($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246211178
		j endif_8738246211178
		
		endif_8738246211178:
		
		# internal_0 <- internal_7
		lw $t0, 64($sp)
		sw $t0, 92($sp)
		
		# JUMP TO endif_8738246210777
		j endif_8738246210777
		
		endif_8738246210777:
		
		lw $v1, 92($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 96
		
		jr $ra
		
	function_southwest_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -80
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET ATTRIBUTE board_size OF self
		lw $t0, 84($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246157111
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246157111
		j object_get_attribute_8738246157111
		int_get_attribute_8738246157111:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8738246157111
		bool_get_attribute_8738246157111:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp)
		j end_get_attribute_8738246157111
		object_get_attribute_8738246157111:
		sw $t1, 68($sp)
		end_get_attribute_8738246157111:
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 84($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246157138
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246157138
		j object_get_attribute_8738246157138
		int_get_attribute_8738246157138:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp)
		j end_get_attribute_8738246157138
		bool_get_attribute_8738246157138:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp)
		j end_get_attribute_8738246157138
		object_get_attribute_8738246157138:
		sw $t1, 64($sp)
		end_get_attribute_8738246157138:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_4]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_5
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# IF internal_1 THEN GOTO then_8738246211193
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211193
		
		# JUMP TO else_8738246211193
		j else_8738246211193
		
		then_8738246211193:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 52($sp)
		
		# internal_0 <- internal_6
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246211193
		j endif_8738246211193
		
		else_8738246211193:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 84($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246157590
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246157590
		j object_get_attribute_8738246157590
		int_get_attribute_8738246157590:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246157590
		bool_get_attribute_8738246157590:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp)
		j end_get_attribute_8738246157590
		object_get_attribute_8738246157590:
		sw $t1, 40($sp)
		end_get_attribute_8738246157590:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 52($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp)
		addi $sp, $sp, 12
		
		# GET ATTRIBUTE columns OF self
		lw $t0, 84($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246157617
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246157617
		j object_get_attribute_8738246157617
		int_get_attribute_8738246157617:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246157617
		bool_get_attribute_8738246157617:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246157617
		object_get_attribute_8738246157617:
		sw $t1, 32($sp)
		end_get_attribute_8738246157617:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 48($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 12
		
		# internal_8 <- internal_13
		lw $t0, 24($sp)
		sw $t0, 44($sp)
		
		# IF internal_8 THEN GOTO then_8738246211310
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211310
		
		# JUMP TO else_8738246211310
		j else_8738246211310
		
		then_8738246211310:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 20($sp)
		
		# internal_7 <- internal_14
		lw $t0, 20($sp)
		sw $t0, 48($sp)
		
		# JUMP TO endif_8738246211310
		j endif_8738246211310
		
		else_8738246211310:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 15
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD south OF CellularAutomaton
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_19
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_7 <- internal_17
		lw $t0, 8($sp)
		sw $t0, 48($sp)
		
		# JUMP TO endif_8738246211310
		j endif_8738246211310
		
		endif_8738246211310:
		
		# internal_0 <- internal_7
		lw $t0, 48($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246211193
		j endif_8738246211193
		
		endif_8738246211193:
		
		lw $v1, 76($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 80
		
		jr $ra
		
	function_neighbors_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -316
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 308($sp)
		
		# ALLOCATING INT -> 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 300($sp)
		
		# GET METHOD north OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 300($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 296($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 308($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 316($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 292($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 316($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 304($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_6
		lw $t0, 288($sp)
		sw $t0, 308($sp)
		
		# IF internal_1 THEN GOTO then_8738246211597
		lw $t0, 308($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211597
		
		# JUMP TO else_8738246211597
		j else_8738246211597
		
		then_8738246211597:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 284($sp)
		
		# internal_0 <- internal_7
		lw $t0, 284($sp)
		sw $t0, 312($sp)
		
		# JUMP TO endif_8738246211597
		j endif_8738246211597
		
		else_8738246211597:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 280($sp)
		
		# internal_0 <- internal_8
		lw $t0, 280($sp)
		sw $t0, 312($sp)
		
		# JUMP TO endif_8738246211597
		j endif_8738246211597
		
		endif_8738246211597:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 272($sp)
		
		# ALLOCATING INT -> 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 15
		sw $t0, 8($v0)
		sw $v0, 264($sp)
		
		# GET METHOD south OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 264($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 260($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_13
		lw $t0, 272($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 280($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 256($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 280($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 268($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 264($sp)
		addi $sp, $sp, 12
		
		# internal_10 <- internal_15
		lw $t0, 252($sp)
		sw $t0, 272($sp)
		
		# IF internal_10 THEN GOTO then_8738246211645
		lw $t0, 272($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211645
		
		# JUMP TO else_8738246211645
		j else_8738246211645
		
		then_8738246211645:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 248($sp)
		
		# internal_9 <- internal_16
		lw $t0, 248($sp)
		sw $t0, 276($sp)
		
		# JUMP TO endif_8738246211645
		j endif_8738246211645
		
		else_8738246211645:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 244($sp)
		
		# internal_9 <- internal_17
		lw $t0, 244($sp)
		sw $t0, 276($sp)
		
		# JUMP TO endif_8738246211645
		j endif_8738246211645
		
		endif_8738246211645:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 324($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 288($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 252($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# ALLOCATING INT -> 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 16
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# GET METHOD east OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 224($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 220($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_23
		lw $t0, 232($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 216($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_21]
		lw $t0, 240($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_24]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 224($sp)
		addi $sp, $sp, 12
		
		# internal_20 <- internal_25
		lw $t0, 212($sp)
		sw $t0, 232($sp)
		
		# IF internal_20 THEN GOTO then_8738246211690
		lw $t0, 232($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211690
		
		# JUMP TO else_8738246211690
		j else_8738246211690
		
		then_8738246211690:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# internal_19 <- internal_26
		lw $t0, 208($sp)
		sw $t0, 236($sp)
		
		# JUMP TO endif_8738246211690
		j endif_8738246211690
		
		else_8738246211690:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 204($sp)
		
		# internal_19 <- internal_27
		lw $t0, 204($sp)
		sw $t0, 236($sp)
		
		# JUMP TO endif_8738246211690
		j endif_8738246211690
		
		endif_8738246211690:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 252($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 248($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# ALLOCATING INT -> 17
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 17
		sw $t0, 8($v0)
		sw $v0, 184($sp)
		
		# GET METHOD west OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 184($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 180($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_33
		lw $t0, 192($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 176($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_34]
		lw $t0, 188($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 184($sp)
		addi $sp, $sp, 12
		
		# internal_30 <- internal_35
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# IF internal_30 THEN GOTO then_8738246211735
		lw $t0, 192($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211735
		
		# JUMP TO else_8738246211735
		j else_8738246211735
		
		then_8738246211735:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 168($sp)
		
		# internal_29 <- internal_36
		lw $t0, 168($sp)
		sw $t0, 196($sp)
		
		# JUMP TO endif_8738246211735
		j endif_8738246211735
		
		else_8738246211735:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# internal_29 <- internal_37
		lw $t0, 164($sp)
		sw $t0, 196($sp)
		
		# JUMP TO endif_8738246211735
		j endif_8738246211735
		
		endif_8738246211735:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 212($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 208($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# ALLOCATING INT -> 19
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 19
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# GET METHOD northeast OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_43
		lw $t0, 152($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 136($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_41]
		lw $t0, 160($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_44]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# internal_40 <- internal_45
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# IF internal_40 THEN GOTO then_8738246211780
		lw $t0, 152($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211780
		
		# JUMP TO else_8738246211780
		j else_8738246211780
		
		then_8738246211780:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# internal_39 <- internal_46
		lw $t0, 128($sp)
		sw $t0, 156($sp)
		
		# JUMP TO endif_8738246211780
		j endif_8738246211780
		
		else_8738246211780:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# internal_39 <- internal_47
		lw $t0, 124($sp)
		sw $t0, 156($sp)
		
		# JUMP TO endif_8738246211780
		j endif_8738246211780
		
		endif_8738246211780:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_38]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_39]
		lw $t0, 168($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 132($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# ALLOCATING INT -> 18
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 18
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# GET METHOD northwest OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 100($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_53
		lw $t0, 112($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 96($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 120($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_54]
		lw $t0, 108($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 104($sp)
		addi $sp, $sp, 12
		
		# internal_50 <- internal_55
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# IF internal_50 THEN GOTO then_8738246211825
		lw $t0, 112($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246211825
		
		# JUMP TO else_8738246211825
		j else_8738246211825
		
		then_8738246211825:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 88($sp)
		
		# internal_49 <- internal_56
		lw $t0, 88($sp)
		sw $t0, 116($sp)
		
		# JUMP TO endif_8738246211825
		j endif_8738246211825
		
		else_8738246211825:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# internal_49 <- internal_57
		lw $t0, 84($sp)
		sw $t0, 116($sp)
		
		# JUMP TO endif_8738246211825
		j endif_8738246211825
		
		endif_8738246211825:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_48]
		lw $t0, 132($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 128($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# ALLOCATING INT -> 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 20
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD southeast OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_63
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 56($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_61]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_64]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# internal_60 <- internal_65
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# IF internal_60 THEN GOTO then_8738246212386
		lw $t0, 72($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246212386
		
		# JUMP TO else_8738246212386
		j else_8738246212386
		
		then_8738246212386:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# internal_59 <- internal_66
		lw $t0, 48($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246212386
		j endif_8738246212386
		
		else_8738246212386:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# internal_59 <- internal_67
		lw $t0, 44($sp)
		sw $t0, 76($sp)
		
		# JUMP TO endif_8738246212386
		j endif_8738246212386
		
		endif_8738246212386:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 92($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_59]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATING INT -> 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 21
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD southwest OF CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 332($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 328($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_73
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_71]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_74]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# internal_70 <- internal_75
		lw $t0, 12($sp)
		sw $t0, 32($sp)
		
		# IF internal_70 THEN GOTO then_8738246212431
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246212431
		
		# JUMP TO else_8738246212431
		j else_8738246212431
		
		then_8738246212431:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# internal_69 <- internal_76
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8738246212431
		j endif_8738246212431
		
		else_8738246212431:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# internal_69 <- internal_77
		lw $t0, 4($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8738246212431
		j endif_8738246212431
		
		endif_8738246212431:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_68]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 316
		
		jr $ra
		
	function_cell_at_next_evolution_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -100
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# ALLOCATING INT -> 22
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 22
		sw $t0, 8($v0)
		sw $v0, 84($sp)
		
		# GET METHOD neighbors OF CellularAutomaton
		lw $t0, 104($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 88($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 84($sp)
		addi $sp, $sp, 12
		
		# internal_1 <- internal_6
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# IF internal_1 THEN GOTO then_8738246212485
		lw $t0, 92($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246212485
		
		# JUMP TO else_8738246212485
		j else_8738246212485
		
		then_8738246212485:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 68($sp)
		
		# internal_0 <- internal_7
		lw $t0, 68($sp)
		sw $t0, 96($sp)
		
		# JUMP TO endif_8738246212485
		j endif_8738246212485
		
		else_8738246212485:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# ALLOCATING INT -> 22
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 22
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# GET METHOD neighbors OF CellularAutomaton
		lw $t0, 104($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_12
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 56($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# internal_9 <- internal_14
		lw $t0, 40($sp)
		sw $t0, 60($sp)
		
		# IF internal_9 THEN GOTO then_8738246212509
		lw $t0, 60($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246212509
		
		# JUMP TO else_8738246212509
		j else_8738246212509
		
		then_8738246212509:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD cell OF CellularAutomaton
		lw $t0, 104($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 116($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_19
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 16($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_21
		lw $t0, 12($sp)
		sw $t0, 32($sp)
		
		# IF internal_16 THEN GOTO then_8738246212581
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246212581
		
		# JUMP TO else_8738246212581
		j else_8738246212581
		
		then_8738246212581:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 8($sp)
		
		# internal_15 <- internal_22
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8738246212581
		j endif_8738246212581
		
		else_8738246212581:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 45
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 4($sp)
		
		# internal_15 <- internal_23
		lw $t0, 4($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8738246212581
		j endif_8738246212581
		
		endif_8738246212581:
		
		# internal_8 <- internal_15
		lw $t0, 36($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246212509
		j endif_8738246212509
		
		else_8738246212509:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 45
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 0($sp)
		
		# internal_8 <- internal_24
		lw $t0, 0($sp)
		sw $t0, 64($sp)
		
		# JUMP TO endif_8738246212509
		j endif_8738246212509
		
		endif_8738246212509:
		
		# internal_0 <- internal_8
		lw $t0, 64($sp)
		sw $t0, 96($sp)
		
		# JUMP TO endif_8738246212485
		j endif_8738246212485
		
		endif_8738246212485:
		
		lw $v1, 96($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 100
		
		jr $ra
		
	function_evolve_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -68
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 72($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD num_cells OF CellularAutomaton
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 68($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 40($sp)
		
		# ALLOCATING NUll INTO -> internal_7
		sw $zero, 36($sp)
		
		while_start_8738246212868:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [num]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# IF internal_8 THEN GOTO while_body_8738246212868
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8738246212868
		
		# JUMP TO while_end_8738246212868
		j while_end_8738246212868
		
		while_body_8738246212868:
		
		# ALLOCATING INT -> 23
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 23
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD cell_at_next_evolution OF CellularAutomaton
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 80($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [position]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 12($sp)
		
		# GET METHOD concat OF String
		lw $t0, 40($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 12($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 8($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [temp]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_14
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 28($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [temp]
		lw $t0, 52($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 16($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [position]
		lw $t0, 76($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_16]
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 12
		
		# JUMP TO while_start_8738246212868
		j while_start_8738246212868
		
		while_end_8738246212868:
		
		# SET ATTRIBUTE population_map OF self
		lw $t0, 68($sp)
		lw $t1, 40($sp)
		beq $t1, $zero, object_set_attribute_8738246164658
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246164658
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246164658
		j object_set_attribute_8738246164658
		int_set_attribute_8738246164658:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246164658
		bool_set_attribute_8738246164658:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246164658
		object_set_attribute_8738246164658:
		sw $t1, 20($t0)
		end_set_attribute_8738246164658:
		
		lw $v1, 68($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 68
		
		jr $ra
		
	function_option_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -824
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 820($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		addi $t0, $zero, 80
		sb $t0, 9($v0)
		
		addi $t0, $zero, 108
		sb $t0, 10($v0)
		
		addi $t0, $zero, 101
		sb $t0, 11($v0)
		
		addi $t0, $zero, 97
		sb $t0, 12($v0)
		
		addi $t0, $zero, 115
		sb $t0, 13($v0)
		
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 99
		sb $t0, 16($v0)
		
		addi $t0, $zero, 104
		sb $t0, 17($v0)
		
		addi $t0, $zero, 111
		sb $t0, 18($v0)
		
		addi $t0, $zero, 115
		sb $t0, 19($v0)
		
		addi $t0, $zero, 101
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 97
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 110
		sb $t0, 24($v0)
		
		addi $t0, $zero, 117
		sb $t0, 25($v0)
		
		addi $t0, $zero, 109
		sb $t0, 26($v0)
		
		addi $t0, $zero, 98
		sb $t0, 27($v0)
		
		addi $t0, $zero, 101
		sb $t0, 28($v0)
		
		addi $t0, $zero, 114
		sb $t0, 29($v0)
		
		addi $t0, $zero, 58
		sb $t0, 30($v0)
		
		addi $t0, $zero, 10
		sb $t0, 31($v0)
		
		sb $zero, 32($v0)
		
		sw $v0, 816($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 808($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 808($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 804($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 828($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 816($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 824($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 65
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 111
		sb $t0, 16($v0)
		
		addi $t0, $zero, 115
		sb $t0, 17($v0)
		
		addi $t0, $zero, 115
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 800($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 792($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 792($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 788($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 812($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_8
		lw $t0, 800($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 808($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 56
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 56
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 50
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 65
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 115
		sb $t0, 14($v0)
		
		addi $t0, $zero, 108
		sb $t0, 15($v0)
		
		addi $t0, $zero, 97
		sb $t0, 16($v0)
		
		addi $t0, $zero, 115
		sb $t0, 17($v0)
		
		addi $t0, $zero, 104
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 102
		sb $t0, 20($v0)
		
		addi $t0, $zero, 114
		sb $t0, 21($v0)
		
		addi $t0, $zero, 111
		sb $t0, 22($v0)
		
		addi $t0, $zero, 109
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 116
		sb $t0, 25($v0)
		
		addi $t0, $zero, 104
		sb $t0, 26($v0)
		
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 117
		sb $t0, 29($v0)
		
		addi $t0, $zero, 112
		sb $t0, 30($v0)
		
		addi $t0, $zero, 112
		sb $t0, 31($v0)
		
		addi $t0, $zero, 101
		sb $t0, 32($v0)
		
		addi $t0, $zero, 114
		sb $t0, 33($v0)
		
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		
		addi $t0, $zero, 108
		sb $t0, 35($v0)
		
		addi $t0, $zero, 101
		sb $t0, 36($v0)
		
		addi $t0, $zero, 102
		sb $t0, 37($v0)
		
		addi $t0, $zero, 116
		sb $t0, 38($v0)
		
		addi $t0, $zero, 32
		sb $t0, 39($v0)
		
		addi $t0, $zero, 116
		sb $t0, 40($v0)
		
		addi $t0, $zero, 111
		sb $t0, 41($v0)
		
		addi $t0, $zero, 32
		sb $t0, 42($v0)
		
		addi $t0, $zero, 108
		sb $t0, 43($v0)
		
		addi $t0, $zero, 111
		sb $t0, 44($v0)
		
		addi $t0, $zero, 119
		sb $t0, 45($v0)
		
		addi $t0, $zero, 101
		sb $t0, 46($v0)
		
		addi $t0, $zero, 114
		sb $t0, 47($v0)
		
		addi $t0, $zero, 32
		sb $t0, 48($v0)
		
		addi $t0, $zero, 114
		sb $t0, 49($v0)
		
		addi $t0, $zero, 105
		sb $t0, 50($v0)
		
		addi $t0, $zero, 103
		sb $t0, 51($v0)
		
		addi $t0, $zero, 104
		sb $t0, 52($v0)
		
		addi $t0, $zero, 116
		sb $t0, 53($v0)
		
		addi $t0, $zero, 10
		sb $t0, 54($v0)
		
		sb $zero, 55($v0)
		
		sw $v0, 784($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 776($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 776($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 772($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 796($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_12
		lw $t0, 784($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 792($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 56
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 56
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 51
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 65
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 115
		sb $t0, 14($v0)
		
		addi $t0, $zero, 108
		sb $t0, 15($v0)
		
		addi $t0, $zero, 97
		sb $t0, 16($v0)
		
		addi $t0, $zero, 115
		sb $t0, 17($v0)
		
		addi $t0, $zero, 104
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 102
		sb $t0, 20($v0)
		
		addi $t0, $zero, 114
		sb $t0, 21($v0)
		
		addi $t0, $zero, 111
		sb $t0, 22($v0)
		
		addi $t0, $zero, 109
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 116
		sb $t0, 25($v0)
		
		addi $t0, $zero, 104
		sb $t0, 26($v0)
		
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 117
		sb $t0, 29($v0)
		
		addi $t0, $zero, 112
		sb $t0, 30($v0)
		
		addi $t0, $zero, 112
		sb $t0, 31($v0)
		
		addi $t0, $zero, 101
		sb $t0, 32($v0)
		
		addi $t0, $zero, 114
		sb $t0, 33($v0)
		
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		
		addi $t0, $zero, 114
		sb $t0, 35($v0)
		
		addi $t0, $zero, 105
		sb $t0, 36($v0)
		
		addi $t0, $zero, 103
		sb $t0, 37($v0)
		
		addi $t0, $zero, 104
		sb $t0, 38($v0)
		
		addi $t0, $zero, 116
		sb $t0, 39($v0)
		
		addi $t0, $zero, 32
		sb $t0, 40($v0)
		
		addi $t0, $zero, 116
		sb $t0, 41($v0)
		
		addi $t0, $zero, 111
		sb $t0, 42($v0)
		
		addi $t0, $zero, 32
		sb $t0, 43($v0)
		
		addi $t0, $zero, 108
		sb $t0, 44($v0)
		
		addi $t0, $zero, 111
		sb $t0, 45($v0)
		
		addi $t0, $zero, 119
		sb $t0, 46($v0)
		
		addi $t0, $zero, 101
		sb $t0, 47($v0)
		
		addi $t0, $zero, 114
		sb $t0, 48($v0)
		
		addi $t0, $zero, 32
		sb $t0, 49($v0)
		
		addi $t0, $zero, 108
		sb $t0, 50($v0)
		
		addi $t0, $zero, 101
		sb $t0, 51($v0)
		
		addi $t0, $zero, 102
		sb $t0, 52($v0)
		
		addi $t0, $zero, 116
		sb $t0, 53($v0)
		
		addi $t0, $zero, 10
		sb $t0, 54($v0)
		
		sb $zero, 55($v0)
		
		sw $v0, 768($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 760($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 760($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 756($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 780($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_16
		lw $t0, 768($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 776($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 18
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 18
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 52
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 65
		sb $t0, 12($v0)
		
		addi $t0, $zero, 110
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 10
		sb $t0, 16($v0)
		
		sb $zero, 17($v0)
		
		sw $v0, 752($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 744($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 744($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 740($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 764($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_20
		lw $t0, 752($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 760($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 53
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 65
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 103
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 101
		sb $t0, 16($v0)
		
		addi $t0, $zero, 97
		sb $t0, 17($v0)
		
		addi $t0, $zero, 116
		sb $t0, 18($v0)
		
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		
		addi $t0, $zero, 114
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 116
		sb $t0, 22($v0)
		
		addi $t0, $zero, 104
		sb $t0, 23($v0)
		
		addi $t0, $zero, 97
		sb $t0, 24($v0)
		
		addi $t0, $zero, 110
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 115
		sb $t0, 27($v0)
		
		addi $t0, $zero, 105
		sb $t0, 28($v0)
		
		addi $t0, $zero, 103
		sb $t0, 29($v0)
		
		addi $t0, $zero, 110
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 10
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 736($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 728($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 728($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 724($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_21]
		lw $t0, 748($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_24
		lw $t0, 736($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 744($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 30
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 30
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 54
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 65
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 108
		sb $t0, 14($v0)
		
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		
		addi $t0, $zero, 115
		sb $t0, 16($v0)
		
		addi $t0, $zero, 115
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 116
		sb $t0, 19($v0)
		
		addi $t0, $zero, 104
		sb $t0, 20($v0)
		
		addi $t0, $zero, 97
		sb $t0, 21($v0)
		
		addi $t0, $zero, 110
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 115
		sb $t0, 24($v0)
		
		addi $t0, $zero, 105
		sb $t0, 25($v0)
		
		addi $t0, $zero, 103
		sb $t0, 26($v0)
		
		addi $t0, $zero, 110
		sb $t0, 27($v0)
		
		addi $t0, $zero, 10
		sb $t0, 28($v0)
		
		sb $zero, 29($v0)
		
		sw $v0, 720($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 712($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 712($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 708($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 732($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_28
		lw $t0, 720($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 728($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 36
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 36
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 55
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 84
		sb $t0, 12($v0)
		
		addi $t0, $zero, 119
		sb $t0, 13($v0)
		
		addi $t0, $zero, 111
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 103
		sb $t0, 16($v0)
		
		addi $t0, $zero, 114
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 97
		sb $t0, 19($v0)
		
		addi $t0, $zero, 116
		sb $t0, 20($v0)
		
		addi $t0, $zero, 101
		sb $t0, 21($v0)
		
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 116
		sb $t0, 24($v0)
		
		addi $t0, $zero, 104
		sb $t0, 25($v0)
		
		addi $t0, $zero, 97
		sb $t0, 26($v0)
		
		addi $t0, $zero, 110
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		
		addi $t0, $zero, 105
		sb $t0, 30($v0)
		
		addi $t0, $zero, 103
		sb $t0, 31($v0)
		
		addi $t0, $zero, 110
		sb $t0, 32($v0)
		
		addi $t0, $zero, 115
		sb $t0, 33($v0)
		
		addi $t0, $zero, 10
		sb $t0, 34($v0)
		
		sb $zero, 35($v0)
		
		sw $v0, 704($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 696($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 696($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 692($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 716($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_32
		lw $t0, 704($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 712($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 56
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 84
		sb $t0, 12($v0)
		
		addi $t0, $zero, 119
		sb $t0, 13($v0)
		
		addi $t0, $zero, 111
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 115
		sb $t0, 18($v0)
		
		addi $t0, $zero, 115
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 116
		sb $t0, 21($v0)
		
		addi $t0, $zero, 104
		sb $t0, 22($v0)
		
		addi $t0, $zero, 97
		sb $t0, 23($v0)
		
		addi $t0, $zero, 110
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 115
		sb $t0, 26($v0)
		
		addi $t0, $zero, 105
		sb $t0, 27($v0)
		
		addi $t0, $zero, 103
		sb $t0, 28($v0)
		
		addi $t0, $zero, 110
		sb $t0, 29($v0)
		
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		
		addi $t0, $zero, 10
		sb $t0, 31($v0)
		
		sb $zero, 32($v0)
		
		sw $v0, 688($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 680($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 680($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 676($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_33]
		lw $t0, 700($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_36
		lw $t0, 688($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 696($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 19
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 19
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 57
		sb $t0, 9($v0)
		
		addi $t0, $zero, 58
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 65
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 39
		sb $t0, 14($v0)
		
		addi $t0, $zero, 86
		sb $t0, 15($v0)
		
		addi $t0, $zero, 39
		sb $t0, 16($v0)
		
		addi $t0, $zero, 10
		sb $t0, 17($v0)
		
		sb $zero, 18($v0)
		
		sw $v0, 672($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 664($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 664($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 660($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_37]
		lw $t0, 684($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_40
		lw $t0, 672($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 680($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 48
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 105
		sb $t0, 16($v0)
		
		addi $t0, $zero, 110
		sb $t0, 17($v0)
		
		addi $t0, $zero, 118
		sb $t0, 18($v0)
		
		addi $t0, $zero, 101
		sb $t0, 19($v0)
		
		addi $t0, $zero, 114
		sb $t0, 20($v0)
		
		addi $t0, $zero, 115
		sb $t0, 21($v0)
		
		addi $t0, $zero, 101
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 39
		sb $t0, 24($v0)
		
		addi $t0, $zero, 86
		sb $t0, 25($v0)
		
		addi $t0, $zero, 39
		sb $t0, 26($v0)
		
		addi $t0, $zero, 10
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 656($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 648($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 648($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 644($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_41]
		lw $t0, 668($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_44
		lw $t0, 656($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 664($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 40
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 40
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 49
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 78
		sb $t0, 13($v0)
		
		addi $t0, $zero, 117
		sb $t0, 14($v0)
		
		addi $t0, $zero, 109
		sb $t0, 15($v0)
		
		addi $t0, $zero, 98
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 114
		sb $t0, 18($v0)
		
		addi $t0, $zero, 115
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 57
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 97
		sb $t0, 23($v0)
		
		addi $t0, $zero, 110
		sb $t0, 24($v0)
		
		addi $t0, $zero, 100
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 49
		sb $t0, 27($v0)
		
		addi $t0, $zero, 48
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 99
		sb $t0, 30($v0)
		
		addi $t0, $zero, 111
		sb $t0, 31($v0)
		
		addi $t0, $zero, 109
		sb $t0, 32($v0)
		
		addi $t0, $zero, 98
		sb $t0, 33($v0)
		
		addi $t0, $zero, 105
		sb $t0, 34($v0)
		
		addi $t0, $zero, 110
		sb $t0, 35($v0)
		
		addi $t0, $zero, 101
		sb $t0, 36($v0)
		
		addi $t0, $zero, 100
		sb $t0, 37($v0)
		
		addi $t0, $zero, 10
		sb $t0, 38($v0)
		
		sb $zero, 39($v0)
		
		sw $v0, 640($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 632($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 632($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 628($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_45]
		lw $t0, 652($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_48
		lw $t0, 640($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 648($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 26
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 26
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 50
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 102
		sb $t0, 15($v0)
		
		addi $t0, $zero, 117
		sb $t0, 16($v0)
		
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		
		addi $t0, $zero, 108
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 103
		sb $t0, 20($v0)
		
		addi $t0, $zero, 114
		sb $t0, 21($v0)
		
		addi $t0, $zero, 105
		sb $t0, 22($v0)
		
		addi $t0, $zero, 100
		sb $t0, 23($v0)
		
		addi $t0, $zero, 10
		sb $t0, 24($v0)
		
		sb $zero, 25($v0)
		
		sw $v0, 624($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 616($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 616($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 612($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_49]
		lw $t0, 636($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_52
		lw $t0, 624($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 632($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 51
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 39
		sb $t0, 15($v0)
		
		addi $t0, $zero, 84
		sb $t0, 16($v0)
		
		addi $t0, $zero, 39
		sb $t0, 17($v0)
		
		addi $t0, $zero, 10
		sb $t0, 18($v0)
		
		sb $zero, 19($v0)
		
		sw $v0, 608($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 600($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 600($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 596($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_53]
		lw $t0, 620($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_56
		lw $t0, 608($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 616($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 25
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 25
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 52
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 112
		sb $t0, 15($v0)
		
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		
		addi $t0, $zero, 117
		sb $t0, 17($v0)
		
		addi $t0, $zero, 115
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 39
		sb $t0, 20($v0)
		
		addi $t0, $zero, 43
		sb $t0, 21($v0)
		
		addi $t0, $zero, 39
		sb $t0, 22($v0)
		
		addi $t0, $zero, 10
		sb $t0, 23($v0)
		
		sb $zero, 24($v0)
		
		sw $v0, 592($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 584($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 584($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 580($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_57]
		lw $t0, 604($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_60
		lw $t0, 592($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 600($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 53
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 39
		sb $t0, 15($v0)
		
		addi $t0, $zero, 87
		sb $t0, 16($v0)
		
		addi $t0, $zero, 39
		sb $t0, 17($v0)
		
		addi $t0, $zero, 10
		sb $t0, 18($v0)
		
		sb $zero, 19($v0)
		
		sw $v0, 576($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 568($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 568($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 564($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_61]
		lw $t0, 588($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_64
		lw $t0, 576($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 584($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 54
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 39
		sb $t0, 16($v0)
		
		addi $t0, $zero, 77
		sb $t0, 17($v0)
		
		addi $t0, $zero, 39
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 560($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 552($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 552($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 548($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_65]
		lw $t0, 572($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_68
		lw $t0, 560($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 568($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 55
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 39
		sb $t0, 16($v0)
		
		addi $t0, $zero, 69
		sb $t0, 17($v0)
		
		addi $t0, $zero, 39
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 544($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 536($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 536($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 532($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_69]
		lw $t0, 556($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_72
		lw $t0, 544($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 552($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 56
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 39
		sb $t0, 15($v0)
		
		addi $t0, $zero, 51
		sb $t0, 16($v0)
		
		addi $t0, $zero, 39
		sb $t0, 17($v0)
		
		addi $t0, $zero, 10
		sb $t0, 18($v0)
		
		sb $zero, 19($v0)
		
		sw $v0, 528($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 520($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 520($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 516($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_73]
		lw $t0, 540($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_76
		lw $t0, 528($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 536($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 49
		sb $t0, 9($v0)
		
		addi $t0, $zero, 57
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 39
		sb $t0, 16($v0)
		
		addi $t0, $zero, 79
		sb $t0, 17($v0)
		
		addi $t0, $zero, 39
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 512($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 504($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 504($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 500($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_77]
		lw $t0, 524($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_80
		lw $t0, 512($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 520($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 50
		sb $t0, 9($v0)
		
		addi $t0, $zero, 48
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 39
		sb $t0, 16($v0)
		
		addi $t0, $zero, 56
		sb $t0, 17($v0)
		
		addi $t0, $zero, 39
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 496($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 488($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 488($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 484($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_81]
		lw $t0, 508($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_84
		lw $t0, 496($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 504($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 21
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 21
		sw $t0, 4($v0)
		
		addi $t0, $zero, 9
		sb $t0, 8($v0)
		
		addi $t0, $zero, 50
		sb $t0, 9($v0)
		
		addi $t0, $zero, 49
		sb $t0, 10($v0)
		
		addi $t0, $zero, 58
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 65
		sb $t0, 13($v0)
		
		addi $t0, $zero, 110
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 39
		sb $t0, 16($v0)
		
		addi $t0, $zero, 83
		sb $t0, 17($v0)
		
		addi $t0, $zero, 39
		sb $t0, 18($v0)
		
		addi $t0, $zero, 10
		sb $t0, 19($v0)
		
		sb $zero, 20($v0)
		
		sw $v0, 480($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 472($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 472($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 468($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_85]
		lw $t0, 492($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_88
		lw $t0, 480($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 488($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 24
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 24
		sw $t0, 4($v0)
		
		addi $t0, $zero, 89
		sb $t0, 8($v0)
		
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		
		addi $t0, $zero, 117
		sb $t0, 10($v0)
		
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 99
		sb $t0, 13($v0)
		
		addi $t0, $zero, 104
		sb $t0, 14($v0)
		
		addi $t0, $zero, 111
		sb $t0, 15($v0)
		
		addi $t0, $zero, 105
		sb $t0, 16($v0)
		
		addi $t0, $zero, 99
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 61
		sb $t0, 20($v0)
		
		addi $t0, $zero, 62
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		sb $zero, 23($v0)
		
		sw $v0, 464($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 456($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 456($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 452($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_89]
		lw $t0, 476($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_92
		lw $t0, 464($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 472($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 444($sp)
		
		# GET METHOD in_int OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 444($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 440($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 832($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_95
		lw $t0, 448($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 456($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_93]
		lw $t0, 460($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 832($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 436($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 428($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 428($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 424($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 836($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_96]
		lw $t0, 448($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_99
		lw $t0, 436($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 444($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 416($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 412($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_102]
		lw $t0, 424($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 420($sp)
		addi $sp, $sp, 12
		
		# internal_101 <- internal_103
		lw $t0, 408($sp)
		sw $t0, 416($sp)
		
		# IF internal_101 THEN GOTO then_8738246214843
		lw $t0, 416($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246214843
		
		# JUMP TO else_8738246214843
		j else_8738246214843
		
		then_8738246214843:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 88
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 88
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 88
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 404($sp)
		
		# internal_100 <- internal_104
		lw $t0, 404($sp)
		sw $t0, 420($sp)
		
		# JUMP TO endif_8738246214843
		j endif_8738246214843
		
		else_8738246214843:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 396($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 392($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_107]
		lw $t0, 404($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 400($sp)
		addi $sp, $sp, 12
		
		# internal_106 <- internal_108
		lw $t0, 388($sp)
		sw $t0, 396($sp)
		
		# IF internal_106 THEN GOTO then_8738246214897
		lw $t0, 396($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246214897
		
		# JUMP TO else_8738246214897
		j else_8738246214897
		
		then_8738246214897:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 88
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 384($sp)
		
		# internal_105 <- internal_109
		lw $t0, 384($sp)
		sw $t0, 400($sp)
		
		# JUMP TO endif_8738246214897
		j endif_8738246214897
		
		else_8738246214897:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 376($sp)
		
		# ALLOCATING INT -> 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 3
		sw $t0, 8($v0)
		sw $v0, 372($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_112]
		lw $t0, 384($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 380($sp)
		addi $sp, $sp, 12
		
		# internal_111 <- internal_113
		lw $t0, 368($sp)
		sw $t0, 376($sp)
		
		# IF internal_111 THEN GOTO then_8738246182443
		lw $t0, 376($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246182443
		
		# JUMP TO else_8738246182443
		j else_8738246182443
		
		then_8738246182443:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 88
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 88
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 364($sp)
		
		# internal_110 <- internal_114
		lw $t0, 364($sp)
		sw $t0, 380($sp)
		
		# JUMP TO endif_8738246182443
		j endif_8738246182443
		
		else_8738246182443:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 356($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 352($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_117]
		lw $t0, 364($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 360($sp)
		addi $sp, $sp, 12
		
		# internal_116 <- internal_118
		lw $t0, 348($sp)
		sw $t0, 356($sp)
		
		# IF internal_116 THEN GOTO then_8738246182497
		lw $t0, 356($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246182497
		
		# JUMP TO else_8738246182497
		j else_8738246182497
		
		then_8738246182497:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 88
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 88
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 88
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 344($sp)
		
		# internal_115 <- internal_119
		lw $t0, 344($sp)
		sw $t0, 360($sp)
		
		# JUMP TO endif_8738246182497
		j endif_8738246182497
		
		else_8738246182497:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 336($sp)
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 332($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_122]
		lw $t0, 344($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 340($sp)
		addi $sp, $sp, 12
		
		# internal_121 <- internal_123
		lw $t0, 328($sp)
		sw $t0, 336($sp)
		
		# IF internal_121 THEN GOTO then_8738246182551
		lw $t0, 336($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246182551
		
		# JUMP TO else_8738246182551
		j else_8738246182551
		
		then_8738246182551:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 88
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 324($sp)
		
		# internal_120 <- internal_124
		lw $t0, 324($sp)
		sw $t0, 340($sp)
		
		# JUMP TO endif_8738246182551
		j endif_8738246182551
		
		else_8738246182551:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 316($sp)
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 312($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_127]
		lw $t0, 324($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 320($sp)
		addi $sp, $sp, 12
		
		# internal_126 <- internal_128
		lw $t0, 308($sp)
		sw $t0, 316($sp)
		
		# IF internal_126 THEN GOTO then_8738246182605
		lw $t0, 316($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246182605
		
		# JUMP TO else_8738246182605
		j else_8738246182605
		
		then_8738246182605:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 88
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 88
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 304($sp)
		
		# internal_125 <- internal_129
		lw $t0, 304($sp)
		sw $t0, 320($sp)
		
		# JUMP TO endif_8738246182605
		j endif_8738246182605
		
		else_8738246182605:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 296($sp)
		
		# ALLOCATING INT -> 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 7
		sw $t0, 8($v0)
		sw $v0, 292($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_132]
		lw $t0, 304($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 300($sp)
		addi $sp, $sp, 12
		
		# internal_131 <- internal_133
		lw $t0, 288($sp)
		sw $t0, 296($sp)
		
		# IF internal_131 THEN GOTO then_8738246182919
		lw $t0, 296($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246182919
		
		# JUMP TO else_8738246182919
		j else_8738246182919
		
		then_8738246182919:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 88
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 88
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 284($sp)
		
		# internal_130 <- internal_134
		lw $t0, 284($sp)
		sw $t0, 300($sp)
		
		# JUMP TO endif_8738246182919
		j endif_8738246182919
		
		else_8738246182919:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 276($sp)
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 272($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_137]
		lw $t0, 284($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 280($sp)
		addi $sp, $sp, 12
		
		# internal_136 <- internal_138
		lw $t0, 268($sp)
		sw $t0, 276($sp)
		
		# IF internal_136 THEN GOTO then_8738246182973
		lw $t0, 276($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246182973
		
		# JUMP TO else_8738246182973
		j else_8738246182973
		
		then_8738246182973:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 29
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 29
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 88
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 88
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		sb $zero, 28($v0)
		
		sw $v0, 264($sp)
		
		# internal_135 <- internal_139
		lw $t0, 264($sp)
		sw $t0, 280($sp)
		
		# JUMP TO endif_8738246182973
		j endif_8738246182973
		
		else_8738246182973:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 256($sp)
		
		# ALLOCATING INT -> 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 9
		sw $t0, 8($v0)
		sw $v0, 252($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_142]
		lw $t0, 264($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 260($sp)
		addi $sp, $sp, 12
		
		# internal_141 <- internal_143
		lw $t0, 248($sp)
		sw $t0, 256($sp)
		
		# IF internal_141 THEN GOTO then_8738246183027
		lw $t0, 256($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183027
		
		# JUMP TO else_8738246183027
		j else_8738246183027
		
		then_8738246183027:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 24
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 24
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		sb $zero, 23($v0)
		
		sw $v0, 244($sp)
		
		# internal_140 <- internal_144
		lw $t0, 244($sp)
		sw $t0, 260($sp)
		
		# JUMP TO endif_8738246183027
		j endif_8738246183027
		
		else_8738246183027:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 236($sp)
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_147]
		lw $t0, 244($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 240($sp)
		addi $sp, $sp, 12
		
		# internal_146 <- internal_148
		lw $t0, 228($sp)
		sw $t0, 236($sp)
		
		# IF internal_146 THEN GOTO then_8738246183081
		lw $t0, 236($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183081
		
		# JUMP TO else_8738246183081
		j else_8738246183081
		
		then_8738246183081:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 24
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 24
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		sb $zero, 23($v0)
		
		sw $v0, 224($sp)
		
		# internal_145 <- internal_149
		lw $t0, 224($sp)
		sw $t0, 240($sp)
		
		# JUMP TO endif_8738246183081
		j endif_8738246183081
		
		else_8738246183081:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 212($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_152]
		lw $t0, 224($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 220($sp)
		addi $sp, $sp, 12
		
		# internal_151 <- internal_153
		lw $t0, 208($sp)
		sw $t0, 216($sp)
		
		# IF internal_151 THEN GOTO then_8738246183135
		lw $t0, 216($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183135
		
		# JUMP TO else_8738246183135
		j else_8738246183135
		
		then_8738246183135:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 24
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 24
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		sb $zero, 23($v0)
		
		sw $v0, 204($sp)
		
		# internal_150 <- internal_154
		lw $t0, 204($sp)
		sw $t0, 220($sp)
		
		# JUMP TO endif_8738246183135
		j endif_8738246183135
		
		else_8738246183135:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# ALLOCATING INT -> 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 12
		sw $t0, 8($v0)
		sw $v0, 192($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_157]
		lw $t0, 204($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 200($sp)
		addi $sp, $sp, 12
		
		# internal_156 <- internal_158
		lw $t0, 188($sp)
		sw $t0, 196($sp)
		
		# IF internal_156 THEN GOTO then_8738246183449
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183449
		
		# JUMP TO else_8738246183449
		j else_8738246183449
		
		then_8738246183449:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 88
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 88
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 88
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 88
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 88
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 88
		sb $t0, 25($v0)
		
		addi $t0, $zero, 88
		sb $t0, 26($v0)
		
		addi $t0, $zero, 88
		sb $t0, 27($v0)
		
		addi $t0, $zero, 88
		sb $t0, 28($v0)
		
		addi $t0, $zero, 88
		sb $t0, 29($v0)
		
		addi $t0, $zero, 88
		sb $t0, 30($v0)
		
		addi $t0, $zero, 88
		sb $t0, 31($v0)
		
		addi $t0, $zero, 88
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 184($sp)
		
		# internal_155 <- internal_159
		lw $t0, 184($sp)
		sw $t0, 200($sp)
		
		# JUMP TO endif_8738246183449
		j endif_8738246183449
		
		else_8738246183449:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 176($sp)
		
		# ALLOCATING INT -> 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 13
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_162]
		lw $t0, 184($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 180($sp)
		addi $sp, $sp, 12
		
		# internal_161 <- internal_163
		lw $t0, 168($sp)
		sw $t0, 176($sp)
		
		# IF internal_161 THEN GOTO then_8738246183503
		lw $t0, 176($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183503
		
		# JUMP TO else_8738246183503
		j else_8738246183503
		
		then_8738246183503:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 88
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 88
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 88
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 164($sp)
		
		# internal_160 <- internal_164
		lw $t0, 164($sp)
		sw $t0, 180($sp)
		
		# JUMP TO endif_8738246183503
		j endif_8738246183503
		
		else_8738246183503:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 156($sp)
		
		# ALLOCATING INT -> 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 14
		sw $t0, 8($v0)
		sw $v0, 152($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_167]
		lw $t0, 164($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# internal_166 <- internal_168
		lw $t0, 148($sp)
		sw $t0, 156($sp)
		
		# IF internal_166 THEN GOTO then_8738246183557
		lw $t0, 156($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183557
		
		# JUMP TO else_8738246183557
		j else_8738246183557
		
		then_8738246183557:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 88
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 88
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 88
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 144($sp)
		
		# internal_165 <- internal_169
		lw $t0, 144($sp)
		sw $t0, 160($sp)
		
		# JUMP TO endif_8738246183557
		j endif_8738246183557
		
		else_8738246183557:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 136($sp)
		
		# ALLOCATING INT -> 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 15
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_172]
		lw $t0, 144($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 140($sp)
		addi $sp, $sp, 12
		
		# internal_171 <- internal_173
		lw $t0, 128($sp)
		sw $t0, 136($sp)
		
		# IF internal_171 THEN GOTO then_8738246183611
		lw $t0, 136($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183611
		
		# JUMP TO else_8738246183611
		j else_8738246183611
		
		then_8738246183611:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 30
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 30
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 88
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 88
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		sb $zero, 29($v0)
		
		sw $v0, 124($sp)
		
		# internal_170 <- internal_174
		lw $t0, 124($sp)
		sw $t0, 140($sp)
		
		# JUMP TO endif_8738246183611
		j endif_8738246183611
		
		else_8738246183611:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 116($sp)
		
		# ALLOCATING INT -> 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 16
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_177]
		lw $t0, 124($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# internal_176 <- internal_178
		lw $t0, 108($sp)
		sw $t0, 116($sp)
		
		# IF internal_176 THEN GOTO then_8738246183665
		lw $t0, 116($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183665
		
		# JUMP TO else_8738246183665
		j else_8738246183665
		
		then_8738246183665:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 30
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 30
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 88
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 88
		sb $t0, 28($v0)
		
		sb $zero, 29($v0)
		
		sw $v0, 104($sp)
		
		# internal_175 <- internal_179
		lw $t0, 104($sp)
		sw $t0, 120($sp)
		
		# JUMP TO endif_8738246183665
		j endif_8738246183665
		
		else_8738246183665:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# ALLOCATING INT -> 17
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 17
		sw $t0, 8($v0)
		sw $v0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_182]
		lw $t0, 104($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 100($sp)
		addi $sp, $sp, 12
		
		# internal_181 <- internal_183
		lw $t0, 88($sp)
		sw $t0, 96($sp)
		
		# IF internal_181 THEN GOTO then_8738246183979
		lw $t0, 96($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246183979
		
		# JUMP TO else_8738246183979
		j else_8738246183979
		
		then_8738246183979:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 37
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 37
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 88
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 88
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 88
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 88
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 88
		sb $t0, 32($v0)
		
		addi $t0, $zero, 88
		sb $t0, 33($v0)
		
		addi $t0, $zero, 88
		sb $t0, 34($v0)
		
		addi $t0, $zero, 88
		sb $t0, 35($v0)
		
		sb $zero, 36($v0)
		
		sw $v0, 84($sp)
		
		# internal_180 <- internal_184
		lw $t0, 84($sp)
		sw $t0, 100($sp)
		
		# JUMP TO endif_8738246183979
		j endif_8738246183979
		
		else_8738246183979:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 76($sp)
		
		# ALLOCATING INT -> 18
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 18
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_187]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 12
		
		# internal_186 <- internal_188
		lw $t0, 68($sp)
		sw $t0, 76($sp)
		
		# IF internal_186 THEN GOTO then_8738246184033
		lw $t0, 76($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246184033
		
		# JUMP TO else_8738246184033
		j else_8738246184033
		
		then_8738246184033:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 37
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 37
		sw $t0, 4($v0)
		
		addi $t0, $zero, 88
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 88
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 88
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 88
		sb $t0, 31($v0)
		
		addi $t0, $zero, 88
		sb $t0, 32($v0)
		
		addi $t0, $zero, 88
		sb $t0, 33($v0)
		
		addi $t0, $zero, 88
		sb $t0, 34($v0)
		
		addi $t0, $zero, 32
		sb $t0, 35($v0)
		
		sb $zero, 36($v0)
		
		sw $v0, 64($sp)
		
		# internal_185 <- internal_189
		lw $t0, 64($sp)
		sw $t0, 80($sp)
		
		# JUMP TO endif_8738246184033
		j endif_8738246184033
		
		else_8738246184033:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# ALLOCATING INT -> 19
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 19
		sw $t0, 8($v0)
		sw $v0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_192]
		lw $t0, 64($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 60($sp)
		addi $sp, $sp, 12
		
		# internal_191 <- internal_193
		lw $t0, 48($sp)
		sw $t0, 56($sp)
		
		# IF internal_191 THEN GOTO then_8738246184087
		lw $t0, 56($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246184087
		
		# JUMP TO else_8738246184087
		j else_8738246184087
		
		then_8738246184087:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 25
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 25
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 88
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		sb $zero, 24($v0)
		
		sw $v0, 44($sp)
		
		# internal_190 <- internal_194
		lw $t0, 44($sp)
		sw $t0, 60($sp)
		
		# JUMP TO endif_8738246184087
		j endif_8738246184087
		
		else_8738246184087:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING INT -> 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 20
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_197]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 12
		
		# internal_196 <- internal_198
		lw $t0, 28($sp)
		sw $t0, 36($sp)
		
		# IF internal_196 THEN GOTO then_8738246184141
		lw $t0, 36($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246184141
		
		# JUMP TO else_8738246184141
		j else_8738246184141
		
		then_8738246184141:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 37
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 37
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 88
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 88
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 88
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 88
		sb $t0, 27($v0)
		
		addi $t0, $zero, 88
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 88
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		addi $t0, $zero, 88
		sb $t0, 33($v0)
		
		addi $t0, $zero, 88
		sb $t0, 34($v0)
		
		addi $t0, $zero, 32
		sb $t0, 35($v0)
		
		sb $zero, 36($v0)
		
		sw $v0, 24($sp)
		
		# internal_195 <- internal_199
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# JUMP TO endif_8738246184141
		j endif_8738246184141
		
		else_8738246184141:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# ALLOCATING INT -> 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 21
		sw $t0, 8($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [num]
		lw $t0, 832($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_202]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_201 <- internal_203
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		
		# IF internal_201 THEN GOTO then_8738246184461
		lw $t0, 16($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246184461
		
		# JUMP TO else_8738246184461
		j else_8738246184461
		
		then_8738246184461:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 37
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 37
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 88
		sb $t0, 9($v0)
		
		addi $t0, $zero, 88
		sb $t0, 10($v0)
		
		addi $t0, $zero, 88
		sb $t0, 11($v0)
		
		addi $t0, $zero, 88
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 88
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 88
		sb $t0, 21($v0)
		
		addi $t0, $zero, 88
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 88
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 88
		sb $t0, 31($v0)
		
		addi $t0, $zero, 88
		sb $t0, 32($v0)
		
		addi $t0, $zero, 88
		sb $t0, 33($v0)
		
		addi $t0, $zero, 88
		sb $t0, 34($v0)
		
		addi $t0, $zero, 32
		sb $t0, 35($v0)
		
		sb $zero, 36($v0)
		
		sw $v0, 4($sp)
		
		# internal_200 <- internal_204
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		
		# JUMP TO endif_8738246184461
		j endif_8738246184461
		
		else_8738246184461:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 34
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 34
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 32
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 32
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 32
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 32
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 32
		sb $t0, 23($v0)
		
		addi $t0, $zero, 32
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 32
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 32
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		sb $zero, 33($v0)
		
		sw $v0, 0($sp)
		
		# internal_200 <- internal_205
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		
		# JUMP TO endif_8738246184461
		j endif_8738246184461
		
		endif_8738246184461:
		
		# internal_195 <- internal_200
		lw $t0, 20($sp)
		sw $t0, 40($sp)
		
		# JUMP TO endif_8738246184141
		j endif_8738246184141
		
		endif_8738246184141:
		
		# internal_190 <- internal_195
		lw $t0, 40($sp)
		sw $t0, 60($sp)
		
		# JUMP TO endif_8738246184087
		j endif_8738246184087
		
		endif_8738246184087:
		
		# internal_185 <- internal_190
		lw $t0, 60($sp)
		sw $t0, 80($sp)
		
		# JUMP TO endif_8738246184033
		j endif_8738246184033
		
		endif_8738246184033:
		
		# internal_180 <- internal_185
		lw $t0, 80($sp)
		sw $t0, 100($sp)
		
		# JUMP TO endif_8738246183979
		j endif_8738246183979
		
		endif_8738246183979:
		
		# internal_175 <- internal_180
		lw $t0, 100($sp)
		sw $t0, 120($sp)
		
		# JUMP TO endif_8738246183665
		j endif_8738246183665
		
		endif_8738246183665:
		
		# internal_170 <- internal_175
		lw $t0, 120($sp)
		sw $t0, 140($sp)
		
		# JUMP TO endif_8738246183611
		j endif_8738246183611
		
		endif_8738246183611:
		
		# internal_165 <- internal_170
		lw $t0, 140($sp)
		sw $t0, 160($sp)
		
		# JUMP TO endif_8738246183557
		j endif_8738246183557
		
		endif_8738246183557:
		
		# internal_160 <- internal_165
		lw $t0, 160($sp)
		sw $t0, 180($sp)
		
		# JUMP TO endif_8738246183503
		j endif_8738246183503
		
		endif_8738246183503:
		
		# internal_155 <- internal_160
		lw $t0, 180($sp)
		sw $t0, 200($sp)
		
		# JUMP TO endif_8738246183449
		j endif_8738246183449
		
		endif_8738246183449:
		
		# internal_150 <- internal_155
		lw $t0, 200($sp)
		sw $t0, 220($sp)
		
		# JUMP TO endif_8738246183135
		j endif_8738246183135
		
		endif_8738246183135:
		
		# internal_145 <- internal_150
		lw $t0, 220($sp)
		sw $t0, 240($sp)
		
		# JUMP TO endif_8738246183081
		j endif_8738246183081
		
		endif_8738246183081:
		
		# internal_140 <- internal_145
		lw $t0, 240($sp)
		sw $t0, 260($sp)
		
		# JUMP TO endif_8738246183027
		j endif_8738246183027
		
		endif_8738246183027:
		
		# internal_135 <- internal_140
		lw $t0, 260($sp)
		sw $t0, 280($sp)
		
		# JUMP TO endif_8738246182973
		j endif_8738246182973
		
		endif_8738246182973:
		
		# internal_130 <- internal_135
		lw $t0, 280($sp)
		sw $t0, 300($sp)
		
		# JUMP TO endif_8738246182919
		j endif_8738246182919
		
		endif_8738246182919:
		
		# internal_125 <- internal_130
		lw $t0, 300($sp)
		sw $t0, 320($sp)
		
		# JUMP TO endif_8738246182605
		j endif_8738246182605
		
		endif_8738246182605:
		
		# internal_120 <- internal_125
		lw $t0, 320($sp)
		sw $t0, 340($sp)
		
		# JUMP TO endif_8738246182551
		j endif_8738246182551
		
		endif_8738246182551:
		
		# internal_115 <- internal_120
		lw $t0, 340($sp)
		sw $t0, 360($sp)
		
		# JUMP TO endif_8738246182497
		j endif_8738246182497
		
		endif_8738246182497:
		
		# internal_110 <- internal_115
		lw $t0, 360($sp)
		sw $t0, 380($sp)
		
		# JUMP TO endif_8738246182443
		j endif_8738246182443
		
		endif_8738246182443:
		
		# internal_105 <- internal_110
		lw $t0, 380($sp)
		sw $t0, 400($sp)
		
		# JUMP TO endif_8738246214897
		j endif_8738246214897
		
		endif_8738246214897:
		
		# internal_100 <- internal_105
		lw $t0, 400($sp)
		sw $t0, 420($sp)
		
		# JUMP TO endif_8738246214843
		j endif_8738246214843
		
		endif_8738246214843:
		
		lw $v1, 420($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 824
		
		jr $ra
		
	function_prompt_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -88
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 84($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 63
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 63
		sw $t0, 4($v0)
		
		addi $t0, $zero, 87
		sb $t0, 8($v0)
		
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		
		addi $t0, $zero, 117
		sb $t0, 10($v0)
		
		addi $t0, $zero, 108
		sb $t0, 11($v0)
		
		addi $t0, $zero, 100
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 121
		sb $t0, 14($v0)
		
		addi $t0, $zero, 111
		sb $t0, 15($v0)
		
		addi $t0, $zero, 117
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 108
		sb $t0, 18($v0)
		
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		
		addi $t0, $zero, 107
		sb $t0, 20($v0)
		
		addi $t0, $zero, 101
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 116
		sb $t0, 23($v0)
		
		addi $t0, $zero, 111
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		
		addi $t0, $zero, 111
		sb $t0, 27($v0)
		
		addi $t0, $zero, 110
		sb $t0, 28($v0)
		
		addi $t0, $zero, 116
		sb $t0, 29($v0)
		
		addi $t0, $zero, 105
		sb $t0, 30($v0)
		
		addi $t0, $zero, 110
		sb $t0, 31($v0)
		
		addi $t0, $zero, 117
		sb $t0, 32($v0)
		
		addi $t0, $zero, 101
		sb $t0, 33($v0)
		
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		
		addi $t0, $zero, 119
		sb $t0, 35($v0)
		
		addi $t0, $zero, 105
		sb $t0, 36($v0)
		
		addi $t0, $zero, 116
		sb $t0, 37($v0)
		
		addi $t0, $zero, 104
		sb $t0, 38($v0)
		
		addi $t0, $zero, 32
		sb $t0, 39($v0)
		
		addi $t0, $zero, 116
		sb $t0, 40($v0)
		
		addi $t0, $zero, 104
		sb $t0, 41($v0)
		
		addi $t0, $zero, 101
		sb $t0, 42($v0)
		
		addi $t0, $zero, 32
		sb $t0, 43($v0)
		
		addi $t0, $zero, 110
		sb $t0, 44($v0)
		
		addi $t0, $zero, 101
		sb $t0, 45($v0)
		
		addi $t0, $zero, 120
		sb $t0, 46($v0)
		
		addi $t0, $zero, 116
		sb $t0, 47($v0)
		
		addi $t0, $zero, 32
		sb $t0, 48($v0)
		
		addi $t0, $zero, 103
		sb $t0, 49($v0)
		
		addi $t0, $zero, 101
		sb $t0, 50($v0)
		
		addi $t0, $zero, 110
		sb $t0, 51($v0)
		
		addi $t0, $zero, 101
		sb $t0, 52($v0)
		
		addi $t0, $zero, 114
		sb $t0, 53($v0)
		
		addi $t0, $zero, 97
		sb $t0, 54($v0)
		
		addi $t0, $zero, 116
		sb $t0, 55($v0)
		
		addi $t0, $zero, 105
		sb $t0, 56($v0)
		
		addi $t0, $zero, 111
		sb $t0, 57($v0)
		
		addi $t0, $zero, 110
		sb $t0, 58($v0)
		
		addi $t0, $zero, 63
		sb $t0, 59($v0)
		
		addi $t0, $zero, 32
		sb $t0, 60($v0)
		
		addi $t0, $zero, 10
		sb $t0, 61($v0)
		
		sb $zero, 62($v0)
		
		sw $v0, 80($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 80($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 58
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 58
		sw $t0, 4($v0)
		
		addi $t0, $zero, 80
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 101
		sb $t0, 10($v0)
		
		addi $t0, $zero, 97
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 117
		sb $t0, 15($v0)
		
		addi $t0, $zero, 115
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 108
		sb $t0, 19($v0)
		
		addi $t0, $zero, 111
		sb $t0, 20($v0)
		
		addi $t0, $zero, 119
		sb $t0, 21($v0)
		
		addi $t0, $zero, 101
		sb $t0, 22($v0)
		
		addi $t0, $zero, 114
		sb $t0, 23($v0)
		
		addi $t0, $zero, 99
		sb $t0, 24($v0)
		
		addi $t0, $zero, 97
		sb $t0, 25($v0)
		
		addi $t0, $zero, 115
		sb $t0, 26($v0)
		
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 121
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 111
		sb $t0, 31($v0)
		
		addi $t0, $zero, 114
		sb $t0, 32($v0)
		
		addi $t0, $zero, 32
		sb $t0, 33($v0)
		
		addi $t0, $zero, 110
		sb $t0, 34($v0)
		
		addi $t0, $zero, 32
		sb $t0, 35($v0)
		
		addi $t0, $zero, 102
		sb $t0, 36($v0)
		
		addi $t0, $zero, 111
		sb $t0, 37($v0)
		
		addi $t0, $zero, 114
		sb $t0, 38($v0)
		
		addi $t0, $zero, 32
		sb $t0, 39($v0)
		
		addi $t0, $zero, 121
		sb $t0, 40($v0)
		
		addi $t0, $zero, 111
		sb $t0, 41($v0)
		
		addi $t0, $zero, 117
		sb $t0, 42($v0)
		
		addi $t0, $zero, 114
		sb $t0, 43($v0)
		
		addi $t0, $zero, 32
		sb $t0, 44($v0)
		
		addi $t0, $zero, 97
		sb $t0, 45($v0)
		
		addi $t0, $zero, 110
		sb $t0, 46($v0)
		
		addi $t0, $zero, 115
		sb $t0, 47($v0)
		
		addi $t0, $zero, 119
		sb $t0, 48($v0)
		
		addi $t0, $zero, 101
		sb $t0, 49($v0)
		
		addi $t0, $zero, 114
		sb $t0, 50($v0)
		
		addi $t0, $zero, 32
		sb $t0, 51($v0)
		
		addi $t0, $zero, 91
		sb $t0, 52($v0)
		
		addi $t0, $zero, 121
		sb $t0, 53($v0)
		
		addi $t0, $zero, 93
		sb $t0, 54($v0)
		
		addi $t0, $zero, 58
		sb $t0, 55($v0)
		
		addi $t0, $zero, 32
		sb $t0, 56($v0)
		
		sb $zero, 57($v0)
		
		sw $v0, 64($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_8
		lw $t0, 64($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 44($sp)
		
		# GET METHOD in_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_11
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [ans]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 36($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_12]
		lw $t0, 48($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_15
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 110
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [ans]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_17 <- internal_19
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		
		# IF internal_17 THEN GOTO then_8738246213810
		lw $t0, 16($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246213810
		
		# JUMP TO else_8738246213810
		j else_8738246213810
		
		then_8738246213810:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# internal_16 <- internal_20
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		
		# JUMP TO endif_8738246213810
		j endif_8738246213810
		
		else_8738246213810:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_16 <- internal_21
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		
		# JUMP TO endif_8738246213810
		j endif_8738246213810
		
		endif_8738246213810:
		
		lw $v1, 20($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 88
		
		jr $ra
		
	function_prompt2_at_CellularAutomaton:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -88
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 84($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 11
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 11
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		addi $t0, $zero, 10
		sb $t0, 9($v0)
		
		sb $zero, 10($v0)
		
		sw $v0, 80($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 72($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 92($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_4
		lw $t0, 80($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 88($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 57
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 57
		sw $t0, 4($v0)
		
		addi $t0, $zero, 87
		sb $t0, 8($v0)
		
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		
		addi $t0, $zero, 117
		sb $t0, 10($v0)
		
		addi $t0, $zero, 108
		sb $t0, 11($v0)
		
		addi $t0, $zero, 100
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 121
		sb $t0, 14($v0)
		
		addi $t0, $zero, 111
		sb $t0, 15($v0)
		
		addi $t0, $zero, 117
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 108
		sb $t0, 18($v0)
		
		addi $t0, $zero, 105
		sb $t0, 19($v0)
		
		addi $t0, $zero, 107
		sb $t0, 20($v0)
		
		addi $t0, $zero, 101
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 116
		sb $t0, 23($v0)
		
		addi $t0, $zero, 111
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		
		addi $t0, $zero, 104
		sb $t0, 27($v0)
		
		addi $t0, $zero, 111
		sb $t0, 28($v0)
		
		addi $t0, $zero, 111
		sb $t0, 29($v0)
		
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		
		addi $t0, $zero, 101
		sb $t0, 31($v0)
		
		addi $t0, $zero, 32
		sb $t0, 32($v0)
		
		addi $t0, $zero, 97
		sb $t0, 33($v0)
		
		addi $t0, $zero, 32
		sb $t0, 34($v0)
		
		addi $t0, $zero, 98
		sb $t0, 35($v0)
		
		addi $t0, $zero, 97
		sb $t0, 36($v0)
		
		addi $t0, $zero, 99
		sb $t0, 37($v0)
		
		addi $t0, $zero, 107
		sb $t0, 38($v0)
		
		addi $t0, $zero, 103
		sb $t0, 39($v0)
		
		addi $t0, $zero, 114
		sb $t0, 40($v0)
		
		addi $t0, $zero, 111
		sb $t0, 41($v0)
		
		addi $t0, $zero, 117
		sb $t0, 42($v0)
		
		addi $t0, $zero, 110
		sb $t0, 43($v0)
		
		addi $t0, $zero, 100
		sb $t0, 44($v0)
		
		addi $t0, $zero, 32
		sb $t0, 45($v0)
		
		addi $t0, $zero, 112
		sb $t0, 46($v0)
		
		addi $t0, $zero, 97
		sb $t0, 47($v0)
		
		addi $t0, $zero, 116
		sb $t0, 48($v0)
		
		addi $t0, $zero, 116
		sb $t0, 49($v0)
		
		addi $t0, $zero, 101
		sb $t0, 50($v0)
		
		addi $t0, $zero, 114
		sb $t0, 51($v0)
		
		addi $t0, $zero, 110
		sb $t0, 52($v0)
		
		addi $t0, $zero, 63
		sb $t0, 53($v0)
		
		addi $t0, $zero, 32
		sb $t0, 54($v0)
		
		addi $t0, $zero, 10
		sb $t0, 55($v0)
		
		sb $zero, 56($v0)
		
		sw $v0, 64($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 56($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_5]
		lw $t0, 76($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_8
		lw $t0, 64($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 72($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 58
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 58
		sw $t0, 4($v0)
		
		addi $t0, $zero, 80
		sb $t0, 8($v0)
		
		addi $t0, $zero, 108
		sb $t0, 9($v0)
		
		addi $t0, $zero, 101
		sb $t0, 10($v0)
		
		addi $t0, $zero, 97
		sb $t0, 11($v0)
		
		addi $t0, $zero, 115
		sb $t0, 12($v0)
		
		addi $t0, $zero, 101
		sb $t0, 13($v0)
		
		addi $t0, $zero, 32
		sb $t0, 14($v0)
		
		addi $t0, $zero, 117
		sb $t0, 15($v0)
		
		addi $t0, $zero, 115
		sb $t0, 16($v0)
		
		addi $t0, $zero, 101
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 108
		sb $t0, 19($v0)
		
		addi $t0, $zero, 111
		sb $t0, 20($v0)
		
		addi $t0, $zero, 119
		sb $t0, 21($v0)
		
		addi $t0, $zero, 101
		sb $t0, 22($v0)
		
		addi $t0, $zero, 114
		sb $t0, 23($v0)
		
		addi $t0, $zero, 99
		sb $t0, 24($v0)
		
		addi $t0, $zero, 97
		sb $t0, 25($v0)
		
		addi $t0, $zero, 115
		sb $t0, 26($v0)
		
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		
		addi $t0, $zero, 32
		sb $t0, 28($v0)
		
		addi $t0, $zero, 121
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 111
		sb $t0, 31($v0)
		
		addi $t0, $zero, 114
		sb $t0, 32($v0)
		
		addi $t0, $zero, 32
		sb $t0, 33($v0)
		
		addi $t0, $zero, 110
		sb $t0, 34($v0)
		
		addi $t0, $zero, 32
		sb $t0, 35($v0)
		
		addi $t0, $zero, 102
		sb $t0, 36($v0)
		
		addi $t0, $zero, 111
		sb $t0, 37($v0)
		
		addi $t0, $zero, 114
		sb $t0, 38($v0)
		
		addi $t0, $zero, 32
		sb $t0, 39($v0)
		
		addi $t0, $zero, 121
		sb $t0, 40($v0)
		
		addi $t0, $zero, 111
		sb $t0, 41($v0)
		
		addi $t0, $zero, 117
		sb $t0, 42($v0)
		
		addi $t0, $zero, 114
		sb $t0, 43($v0)
		
		addi $t0, $zero, 32
		sb $t0, 44($v0)
		
		addi $t0, $zero, 97
		sb $t0, 45($v0)
		
		addi $t0, $zero, 110
		sb $t0, 46($v0)
		
		addi $t0, $zero, 115
		sb $t0, 47($v0)
		
		addi $t0, $zero, 119
		sb $t0, 48($v0)
		
		addi $t0, $zero, 101
		sb $t0, 49($v0)
		
		addi $t0, $zero, 114
		sb $t0, 50($v0)
		
		addi $t0, $zero, 32
		sb $t0, 51($v0)
		
		addi $t0, $zero, 91
		sb $t0, 52($v0)
		
		addi $t0, $zero, 110
		sb $t0, 53($v0)
		
		addi $t0, $zero, 93
		sb $t0, 54($v0)
		
		addi $t0, $zero, 58
		sb $t0, 55($v0)
		
		addi $t0, $zero, 32
		sb $t0, 56($v0)
		
		sb $zero, 57($v0)
		
		sw $v0, 48($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD out_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_9]
		lw $t0, 60($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_12
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 56($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 6
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# GET METHOD in_string OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_15
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 40($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [ans]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_13]
		lw $t0, 44($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 121
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [ans]
		lw $t0, 96($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 12
		
		# internal_17 <- internal_19
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		
		# IF internal_17 THEN GOTO then_8738246214810
		lw $t0, 16($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246214810
		
		# JUMP TO else_8738246214810
		j else_8738246214810
		
		then_8738246214810:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# internal_16 <- internal_20
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		
		# JUMP TO endif_8738246214810
		j endif_8738246214810
		
		else_8738246214810:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_16 <- internal_21
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		
		# JUMP TO endif_8738246214810
		j endif_8738246214810
		
		endif_8738246214810:
		
		lw $v1, 20($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 88
		
		jr $ra
		
	function___init___at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -20
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 16($sp)
		
		# SET ATTRIBUTE rows OF self
		lw $t0, 20($sp)
		lw $t1, 16($sp)
		beq $t1, $zero, object_set_attribute_8738246144549
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246144549
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246144549
		j object_set_attribute_8738246144549
		int_set_attribute_8738246144549:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246144549
		bool_set_attribute_8738246144549:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8738246144549
		object_set_attribute_8738246144549:
		sw $t1, 8($t0)
		end_set_attribute_8738246144549:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 12($sp)
		
		# SET ATTRIBUTE columns OF self
		lw $t0, 20($sp)
		lw $t1, 12($sp)
		beq $t1, $zero, object_set_attribute_8738246144573
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246144573
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246144573
		j object_set_attribute_8738246144573
		int_set_attribute_8738246144573:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246144573
		bool_set_attribute_8738246144573:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8738246144573
		object_set_attribute_8738246144573:
		sw $t1, 12($t0)
		end_set_attribute_8738246144573:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# SET ATTRIBUTE board_size OF self
		lw $t0, 20($sp)
		lw $t1, 8($sp)
		beq $t1, $zero, object_set_attribute_8738246144597
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246144597
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246144597
		j object_set_attribute_8738246144597
		int_set_attribute_8738246144597:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246144597
		bool_set_attribute_8738246144597:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8738246144597
		object_set_attribute_8738246144597:
		sw $t1, 16($t0)
		end_set_attribute_8738246144597:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 4($sp)
		
		# SET ATTRIBUTE population_map OF self
		lw $t0, 20($sp)
		lw $t1, 4($sp)
		beq $t1, $zero, object_set_attribute_8738246144621
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246144621
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246144621
		j object_set_attribute_8738246144621
		int_set_attribute_8738246144621:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246144621
		bool_set_attribute_8738246144621:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8738246144621
		object_set_attribute_8738246144621:
		sw $t1, 20($t0)
		end_set_attribute_8738246144621:
		
		# ALLOCATING NUll INTO -> internal_4
		sw $zero, 0($sp)
		
		# SET ATTRIBUTE cells OF self
		lw $t0, 20($sp)
		lw $t1, 0($sp)
		beq $t1, $zero, object_set_attribute_8738246144645
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246144645
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246144645
		j object_set_attribute_8738246144645
		int_set_attribute_8738246144645:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8738246144645
		bool_set_attribute_8738246144645:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8738246144645
		object_set_attribute_8738246144645:
		sw $t1, 24($t0)
		end_set_attribute_8738246144645:
		
		lw $v1, 20($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 20
		
		jr $ra
		
	function_main_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -164
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 160($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 9
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 9
		sw $t0, 4($v0)
		
		sb $zero, 8($v0)
		
		sw $v0, 156($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 38
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 38
		sw $t0, 4($v0)
		
		addi $t0, $zero, 87
		sb $t0, 8($v0)
		
		addi $t0, $zero, 101
		sb $t0, 9($v0)
		
		addi $t0, $zero, 108
		sb $t0, 10($v0)
		
		addi $t0, $zero, 99
		sb $t0, 11($v0)
		
		addi $t0, $zero, 111
		sb $t0, 12($v0)
		
		addi $t0, $zero, 109
		sb $t0, 13($v0)
		
		addi $t0, $zero, 101
		sb $t0, 14($v0)
		
		addi $t0, $zero, 32
		sb $t0, 15($v0)
		
		addi $t0, $zero, 116
		sb $t0, 16($v0)
		
		addi $t0, $zero, 111
		sb $t0, 17($v0)
		
		addi $t0, $zero, 32
		sb $t0, 18($v0)
		
		addi $t0, $zero, 116
		sb $t0, 19($v0)
		
		addi $t0, $zero, 104
		sb $t0, 20($v0)
		
		addi $t0, $zero, 101
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 71
		sb $t0, 23($v0)
		
		addi $t0, $zero, 97
		sb $t0, 24($v0)
		
		addi $t0, $zero, 109
		sb $t0, 25($v0)
		
		addi $t0, $zero, 101
		sb $t0, 26($v0)
		
		addi $t0, $zero, 32
		sb $t0, 27($v0)
		
		addi $t0, $zero, 111
		sb $t0, 28($v0)
		
		addi $t0, $zero, 102
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 76
		sb $t0, 31($v0)
		
		addi $t0, $zero, 105
		sb $t0, 32($v0)
		
		addi $t0, $zero, 102
		sb $t0, 33($v0)
		
		addi $t0, $zero, 101
		sb $t0, 34($v0)
		
		addi $t0, $zero, 46
		sb $t0, 35($v0)
		
		addi $t0, $zero, 10
		sb $t0, 36($v0)
		
		sb $zero, 37($v0)
		
		sw $v0, 152($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 144($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 164($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 152($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 160($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 56
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 56
		sw $t0, 4($v0)
		
		addi $t0, $zero, 84
		sb $t0, 8($v0)
		
		addi $t0, $zero, 104
		sb $t0, 9($v0)
		
		addi $t0, $zero, 101
		sb $t0, 10($v0)
		
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		
		addi $t0, $zero, 101
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 97
		sb $t0, 14($v0)
		
		addi $t0, $zero, 114
		sb $t0, 15($v0)
		
		addi $t0, $zero, 101
		sb $t0, 16($v0)
		
		addi $t0, $zero, 32
		sb $t0, 17($v0)
		
		addi $t0, $zero, 109
		sb $t0, 18($v0)
		
		addi $t0, $zero, 97
		sb $t0, 19($v0)
		
		addi $t0, $zero, 110
		sb $t0, 20($v0)
		
		addi $t0, $zero, 121
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 105
		sb $t0, 23($v0)
		
		addi $t0, $zero, 110
		sb $t0, 24($v0)
		
		addi $t0, $zero, 105
		sb $t0, 25($v0)
		
		addi $t0, $zero, 116
		sb $t0, 26($v0)
		
		addi $t0, $zero, 105
		sb $t0, 27($v0)
		
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		
		addi $t0, $zero, 108
		sb $t0, 29($v0)
		
		addi $t0, $zero, 32
		sb $t0, 30($v0)
		
		addi $t0, $zero, 115
		sb $t0, 31($v0)
		
		addi $t0, $zero, 116
		sb $t0, 32($v0)
		
		addi $t0, $zero, 97
		sb $t0, 33($v0)
		
		addi $t0, $zero, 116
		sb $t0, 34($v0)
		
		addi $t0, $zero, 101
		sb $t0, 35($v0)
		
		addi $t0, $zero, 115
		sb $t0, 36($v0)
		
		addi $t0, $zero, 32
		sb $t0, 37($v0)
		
		addi $t0, $zero, 116
		sb $t0, 38($v0)
		
		addi $t0, $zero, 111
		sb $t0, 39($v0)
		
		addi $t0, $zero, 32
		sb $t0, 40($v0)
		
		addi $t0, $zero, 99
		sb $t0, 41($v0)
		
		addi $t0, $zero, 104
		sb $t0, 42($v0)
		
		addi $t0, $zero, 111
		sb $t0, 43($v0)
		
		addi $t0, $zero, 111
		sb $t0, 44($v0)
		
		addi $t0, $zero, 115
		sb $t0, 45($v0)
		
		addi $t0, $zero, 101
		sb $t0, 46($v0)
		
		addi $t0, $zero, 32
		sb $t0, 47($v0)
		
		addi $t0, $zero, 102
		sb $t0, 48($v0)
		
		addi $t0, $zero, 114
		sb $t0, 49($v0)
		
		addi $t0, $zero, 111
		sb $t0, 50($v0)
		
		addi $t0, $zero, 109
		sb $t0, 51($v0)
		
		addi $t0, $zero, 46
		sb $t0, 52($v0)
		
		addi $t0, $zero, 32
		sb $t0, 53($v0)
		
		addi $t0, $zero, 10
		sb $t0, 54($v0)
		
		sb $zero, 55($v0)
		
		sw $v0, 136($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 128($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 128($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 124($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 176($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_6]
		lw $t0, 148($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_9
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 144($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING NUll INTO -> internal_10
		sw $zero, 120($sp)
		
		while_start_8738246213063:
		
		# ALLOCATING INT -> 27
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 27
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# GET METHOD prompt2 OF Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_13
		lw $t0, 116($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 124($sp)
		addi $sp, $sp, 8
		
		# IF internal_11 THEN GOTO while_body_8738246213063
		lw $t0, 116($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8738246213063
		
		# JUMP TO while_end_8738246213063
		j while_end_8738246213063
		
		while_body_8738246213063:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 104($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [continue]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_14]
		lw $t0, 116($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 25
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 25
		sw $t0, 8($v0)
		sw $v0, 96($sp)
		
		# GET METHOD option OF Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 96($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 92($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_17
		lw $t0, 100($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 108($sp)
		addi $sp, $sp, 8
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [choice]
		lw $t0, 168($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_15]
		lw $t0, 112($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 168($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING -> CellularAutomaton
		li $v0, 9
		lw $a0, type_CellularAutomaton
		syscall
		la $t0, type_CellularAutomaton
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 88($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_CellularAutomaton
		jal function___init___at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 10
		sw $t0, 8($v0)
		sw $v0, 80($sp)
		
		# GET METHOD init OF CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 80($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 76($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 100($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [choice]
		lw $t0, 168($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_21
		lw $t0, 88($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE cells OF self
		lw $t0, 164($sp)
		lw $t1, 84($sp)
		beq $t1, $zero, object_set_attribute_8738246195240
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8738246195240
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8738246195240
		j object_set_attribute_8738246195240
		int_set_attribute_8738246195240:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8738246195240
		bool_set_attribute_8738246195240:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8738246195240
		object_set_attribute_8738246195240:
		sw $t1, 24($t0)
		end_set_attribute_8738246195240:
		
		# GET ATTRIBUTE cells OF self
		lw $t0, 164($sp)
		lw $t1, 24($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246208287
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246208287
		j object_get_attribute_8738246208287
		int_get_attribute_8738246208287:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8738246208287
		bool_get_attribute_8738246208287:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8738246208287
		object_get_attribute_8738246208287:
		sw $t1, 72($sp)
		end_get_attribute_8738246208287:
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD print OF CellularAutomaton
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_22]
		lw $t0, 80($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_25
		lw $t0, 68($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 76($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING NUll INTO -> internal_26
		sw $zero, 56($sp)
		
		while_start_8738246214804:
		
		# IF continue THEN GOTO while_body_8738246214804
		lw $t0, 160($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8738246214804
		
		# JUMP TO while_end_8738246214804
		j while_end_8738246214804
		
		while_body_8738246214804:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# ALLOCATING INT -> 26
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 26
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# GET METHOD prompt OF Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 172($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_31
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 52($sp)
		addi $sp, $sp, 8
		
		# internal_28 <- internal_29
		lw $t0, 44($sp)
		sw $t0, 48($sp)
		
		# IF internal_28 THEN GOTO then_8738246214876
		lw $t0, 48($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8738246214876
		
		# JUMP TO else_8738246214876
		j else_8738246214876
		
		then_8738246214876:
		
		# GET ATTRIBUTE cells OF self
		lw $t0, 164($sp)
		lw $t1, 24($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246206597
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246206597
		j object_get_attribute_8738246206597
		int_get_attribute_8738246206597:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246206597
		bool_get_attribute_8738246206597:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp)
		j end_get_attribute_8738246206597
		object_get_attribute_8738246206597:
		sw $t1, 32($sp)
		end_get_attribute_8738246206597:
		
		# ALLOCATING INT -> 24
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 24
		sw $t0, 8($v0)
		sw $v0, 24($sp)
		
		# GET METHOD evolve OF CellularAutomaton
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 40($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_35
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 36($sp)
		addi $sp, $sp, 8
		
		# GET ATTRIBUTE cells OF self
		lw $t0, 164($sp)
		lw $t1, 24($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8738246184539
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8738246184539
		j object_get_attribute_8738246184539
		int_get_attribute_8738246184539:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246184539
		bool_get_attribute_8738246184539:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp)
		j end_get_attribute_8738246184539
		object_get_attribute_8738246184539:
		sw $t1, 16($sp)
		end_get_attribute_8738246184539:
		
		# ALLOCATING INT -> 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 11
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD print OF CellularAutomaton
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_36]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_39
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# internal_27 <- internal_37
		lw $t0, 12($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8738246214876
		j endif_8738246214876
		
		else_8738246214876:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [continue]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_40]
		lw $t0, 12($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp)
		addi $sp, $sp, 12
		
		# internal_27 <- continue
		lw $t0, 160($sp)
		sw $t0, 52($sp)
		
		# JUMP TO endif_8738246214876
		j endif_8738246214876
		
		endif_8738246214876:
		
		# JUMP TO while_start_8738246214804
		j while_start_8738246214804
		
		while_end_8738246214804:
		
		# JUMP TO while_start_8738246213063
		j while_start_8738246213063
		
		while_end_8738246213063:
		
		lw $v1, 164($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 164
		
		jr $ra
		
	main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 28
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 28
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# EXIT!
		li $v0, 10
		syscall
		
		