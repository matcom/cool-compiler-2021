	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_Board: .asciiz "Board"
data_7_type_name_CellularAutomaton: .asciiz "CellularAutomaton"
data_8_type_name_Main: .asciiz "Main"
data_9_default_str: .asciiz ""
data_10_string: .asciiz "\n"
data_11_string: .asciiz " "
data_12_string: .asciiz "X"
data_13_string: .asciiz "-"
data_14_string: .asciiz "\nPlease chose a number:\n"
data_15_string: .asciiz "	1: A cross\n"
data_16_string: .asciiz "	2: A slash from the upper left to lower right\n"
data_17_string: .asciiz "	3: A slash from the upper right to lower left\n"
data_18_string: .asciiz "	4: An X\n"
data_19_string: .asciiz "	5: A greater than sign \n"
data_20_string: .asciiz "	6: A less than sign\n"
data_21_string: .asciiz "	7: Two greater than signs\n"
data_22_string: .asciiz "	8: Two less than signs\n"
data_23_string: .asciiz "	9: A 'V'\n"
data_24_string: .asciiz "	10: An inverse 'V'\n"
data_25_string: .asciiz "	11: Numbers 9 and 10 combined\n"
data_26_string: .asciiz "	12: A full grid\n"
data_27_string: .asciiz "	13: A 'T'\n"
data_28_string: .asciiz "	14: A plus '+'\n"
data_29_string: .asciiz "	15: A 'W'\n"
data_30_string: .asciiz "	16: An 'M'\n"
data_31_string: .asciiz "	17: An 'E'\n"
data_32_string: .asciiz "	18: A '3'\n"
data_33_string: .asciiz "	19: An 'O'\n"
data_34_string: .asciiz "	20: An '8'\n"
data_35_string: .asciiz "	21: An 'S'\n"
data_36_string: .asciiz "Your choice => "
data_37_string: .asciiz " XX  XXXX XXXX  XX  "
data_38_string: .asciiz "    X   X   X   X   X    "
data_39_string: .asciiz "X     X     X     X     X"
data_40_string: .asciiz "X   X X X   X   X X X   X"
data_41_string: .asciiz "X     X     X   X   X    "
data_42_string: .asciiz "    X   X   X     X     X"
data_43_string: .asciiz "X  X  X  XX  X      "
data_44_string: .asciiz " X  XX  X  X  X     "
data_45_string: .asciiz "X   X X X   X  "
data_46_string: .asciiz "  X   X X X   X"
data_47_string: .asciiz "X X X X X X X X"
data_48_string: .asciiz "XXXXXXXXXXXXXXXXXXXXXXXXX"
data_49_string: .asciiz "XXXXX  X    X    X    X  "
data_50_string: .asciiz "  X    X  XXXXX  X    X  "
data_51_string: .asciiz "X     X X X X   X X  "
data_52_string: .asciiz "  X X   X X X X     X"
data_53_string: .asciiz "XXXXX   X   XXXXX   X   XXXX"
data_54_string: .asciiz "XXX    X   X  X    X   XXXX "
data_55_string: .asciiz " XX X  XX  X XX "
data_56_string: .asciiz " XX X  XX  X XX X  XX  X XX "
data_57_string: .asciiz " XXXX   X    XX    X   XXXX "
data_58_string: .asciiz "                         "
data_59_string: .asciiz "Would you like to continue with the next generation? \n"
data_60_string: .asciiz "Please use lowercase y or n for your answer [y]: "
data_61_string: .asciiz "n"
data_62_string: .asciiz "\n\n"
data_63_string: .asciiz "Would you like to choose a background pattern? \n"
data_64_string: .asciiz "Please use lowercase y or n for your answer [n]: "
data_65_string: .asciiz "y"
data_66_string: .asciiz "Welcome to the Game of Life.\n"
data_67_string: .asciiz "There are many initial states to choose from. \n"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Object_copy
Bool: .word Object_abort,Bool_type_name,Object_copy
String: .word Object_abort,String_type_name,Object_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,Object_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
Board: .word Object_abort,Board_type_name,Object_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Board_size_of_board,Board_board_init
CellularAutomaton: .word Object_abort,CellularAutomaton_type_name,Object_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Board_size_of_board,Board_board_init,CellularAutomaton_init,CellularAutomaton_print,CellularAutomaton_num_cells,CellularAutomaton_cell,CellularAutomaton_north,CellularAutomaton_south,CellularAutomaton_east,CellularAutomaton_west,CellularAutomaton_northwest,CellularAutomaton_northeast,CellularAutomaton_southeast,CellularAutomaton_southwest,CellularAutomaton_neighbors,CellularAutomaton_cell_at_next_evolution,CellularAutomaton_evolve,CellularAutomaton_option,CellularAutomaton_prompt,CellularAutomaton_prompt2
Main: .word Object_abort,Main_type_name,Object_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Board_size_of_board,Board_board_init,CellularAutomaton_init,CellularAutomaton_print,CellularAutomaton_num_cells,CellularAutomaton_cell,CellularAutomaton_north,CellularAutomaton_south,CellularAutomaton_east,CellularAutomaton_west,CellularAutomaton_northwest,CellularAutomaton_northeast,CellularAutomaton_southeast,CellularAutomaton_southwest,CellularAutomaton_neighbors,CellularAutomaton_cell_at_next_evolution,CellularAutomaton_evolve,CellularAutomaton_option,CellularAutomaton_prompt,CellularAutomaton_prompt2,Main_main

	.text
Void___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t4, 0 	#Save value 0 in register
	sw $t4, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_0_abort_msg 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t3, 4($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_1_type_name_Object 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t4, Object 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_2_type_name_Int 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t4, Int 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_3_type_name_Bool 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, Bool 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_4_type_name_String 	#LOAD
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, String 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_5_type_name_IO 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t6, 0($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t4, IO 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_6_type_name_Board 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Board
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t2, Board 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t7) 	#Save value in attribute of index 0
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 4($t6) 	#Load attribute in index 1
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t2) 	#Save value in attribute of index 1
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 8($t8) 	#Load attribute in index 2
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 8($t0) 	#Save value in attribute of index 2
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t7, data_7_type_name_CellularAutomaton 	#LOAD
	sw $t7, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type CellularAutomaton
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t8, CellularAutomaton 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 0($t0) 	#Save value in attribute of index 0
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 4($t1) 	#Load attribute in index 1
	sw $t9, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 4($t0) 	#Save value in attribute of index 1
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 8($t1) 	#Load attribute in index 2
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 8($t1) 	#Save value in attribute of index 2
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 12($t7) 	#Load attribute in index 3
	sw $t8, 4($fp) 	#Save obtained attribute in destination
	lw $t8, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t8, 12($t9) 	#Save value in attribute of index 3
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_8_type_name_Main 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 24 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 24 	#Save 24 bytes
	syscall 	#
	la $t9, Main 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t9) 	#Save value in attribute of index 0
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 4($t1) 	#Load attribute in index 1
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t8) 	#Save value in attribute of index 1
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 8($t4) 	#Load attribute in index 2
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 8($t3) 	#Save value in attribute of index 2
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 12($t3) 	#Load attribute in index 3
	sw $t9, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 12($t2) 	#Save value in attribute of index 3
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 16($t4) 	#Load attribute in index 4
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 16($t4) 	#Save value in attribute of index 4
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -24 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t7, -4($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t5, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t7, -4($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t0, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 5 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 8 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $a0, 0($fp) 	#Calculate Lenght
	li $t6, 0 	#
loop1:
	lb $t2, 0($a0) 	#
	beqz $t2, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t6,  $t6, 1 	#
	j loop1 	#
exit1:
	sw $t6, -4($fp) 	#Save Calculated Length
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $a0, -4($fp) 	#Calculate Lenght
	li $t9, 0 	#
loop2:
	lb $t2, 0($a0) 	#
	beqz $t2, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t9,  $t9, 1 	#
	j loop2 	#
exit2:
	sw $t9, 4($fp) 	#Save Calculated Length
	la $a0, -8($fp) 	#Calculate Lenght
	li $t1, 0 	#
loop3:
	lb $t4, 0($a0) 	#
	beqz $t4, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t1,  $t1, 1 	#
	j loop3 	#
exit3:
	sw $t1, 8($fp) 	#Save Calculated Length
	sw $t3, 4($fp) 	#Value is string
	sw $t1, 8($fp) 	#Value is string
	add $t6,  $t3, $t1 	#Plus
	sw $t6, 12($fp) 	#Save result of plus
	lw $t2, 12($fp) 	#Concat two Strings
	li $v0, 9 	#
	move $a0, $t2 	#
	syscall 	#
	la $t1, 0($a0) 	#
	la $a1, -4($fp) 	#
	la $a2, -8($fp) 	#
loop4:
	lb $t2, 0($a1) 	#
	lb $t2, 0($a0) 	#
	beqz $a1, exit4 	#
	addi $a0,  $a0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t2, 0($a2) 	#
	lb $t2, 0($a0) 	#
	beqz $a2, exit5 	#
	addi $a0,  $a0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t1, 0($fp) 	#Save concated Strings
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -12($fp) 	#Obtain substring
	lw $t8, -8($fp) 	#
	li $v0, 9 	#
	move $a0, $t6 	#
	syscall 	#
	la $t0, 0($a0) 	#
	la $a1, -4($fp) 	#
	add $a1,  $a1, $t2 	#
loop6:
	lb $t6, 0($a1) 	#
	lb $t6, 0($a0) 	#
	beqz $t2, exit6 	#
	addi $a0,  $a0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t2,  $t2, 1 	#
	j loop6 	#
exit6:
	sw $t0, 0($fp) 	#Save substring
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, Object 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Int 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, -4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 0($t8) 	#Save value in attribute of index 0
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Bool 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, -4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t2) 	#Save value in attribute of index 0
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t8, String 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, -4($fp) 	#Obtain value from source dir
	lw $t1, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t1) 	#Save value in attribute of index 0
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 16 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Board
	li $a0, 16 	#Save 16 bytes
	syscall 	#
	la $t9, Board 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_rows___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t2) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_columns___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 8($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 4($t6) 	#Save value in attribute of index 1
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_board_size___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 12($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 8($t6) 	#Save value in attribute of index 2
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -16 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board_rows___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t8, 0 	#Load Int
	sw $t8, 4($fp) 	#Save loaded value in destination
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board_columns___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t6, 0 	#Load Int
	sw $t6, 4($fp) 	#Save loaded value in destination
	lw $t7, 4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board_board_size___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t8, 0 	#Load Int
	sw $t8, 4($fp) 	#Save loaded value in destination
	lw $t2, 4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board_size_of_board:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -8($fp) 	#Typeof
	lw $t4, -4($t2) 	#
	sw $t4, 4($fp) 	#Save type value in destination
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 4($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t1) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Board_board_init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 316 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Typeof
	lw $t3, -4($t9) 	#
	sw $t3, 8($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, -8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 8($fp) 	#get type dir for Dynamic Call
	lw $t0, 28($t1) 	#Get method of index 7
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 4($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 16($fp) 	#Save obtained attribute in destination
	li $t6, 15 	#Load Int
	sw $t6, 20($fp) 	#Save loaded value in destination
	lw $t2, 20($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 24($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 28($fp) 	#Save obtained attribute in destination
	sw $t6, 16($fp) 	#Value is string
	sw $t5, 28($fp) 	#Value is string
	sub $t7,  $t6, $t5 	#Minus
	sw $t7, 32($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 36($fp) 	#Save loaded value in destination
	sw $t2, 36($fp) 	#Value is string
	sw $t3, 32($fp) 	#Value is string
	sub $t7,  $t2, $t3 	#Minus
	sw $t7, 32($fp) 	#Save result of minus
	lw $t4, 32($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t6, 40($fp) 	#Mov comparisson value to register
	bgt $t5,  $t6, label_then_0 	#Compare values in registers and jump to label_then_0 if the second is greater than 0
	j label_else_0 	#Jump to label_else_0
label_then_0:
	li $t1, 3 	#Load Int
	sw $t1, 44($fp) 	#Save loaded value in destination
	lw $t0, 44($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 48($fp) 	#Obtain value from source dir
	lw $t7, -4($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t7) 	#Save value in attribute of index 0
	li $t8, 5 	#Load Int
	sw $t8, 52($fp) 	#Save loaded value in destination
	lw $t5, 52($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 56($fp) 	#Obtain value from source dir
	lw $t7, -4($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t7) 	#Save value in attribute of index 1
	lw $t8, 0($fp) 	#Obtain value from source dir
	lw $t1, -4($fp) 	#Dir of instance of attribute to set
	sw $t8, 8($t1) 	#Save value in attribute of index 2
	lw $t7, 0($fp) 	#Obtain value to assign
	sw $t7, 12($fp) 	#Assign value
	j label_continue_0 	#Jump to label_continue_0
label_else_0:
	lw $t1, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 64($fp) 	#Save obtained attribute in destination
	li $t8, 16 	#Load Int
	sw $t8, 68($fp) 	#Save loaded value in destination
	lw $t5, 68($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 72($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t8) 	#Load attribute in index 0
	sw $t9, 76($fp) 	#Save obtained attribute in destination
	sw $t3, 64($fp) 	#Value is string
	sw $t9, 76($fp) 	#Value is string
	sub $t4,  $t3, $t9 	#Minus
	sw $t4, 80($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 84($fp) 	#Save loaded value in destination
	sw $t6, 84($fp) 	#Value is string
	sw $t7, 80($fp) 	#Value is string
	sub $t4,  $t6, $t7 	#Minus
	sw $t4, 80($fp) 	#Save result of minus
	lw $t3, 80($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t0, 88($fp) 	#Mov comparisson value to register
	bgt $t2,  $t0, label_then_1 	#Compare values in registers and jump to label_then_1 if the second is greater than 0
	j label_else_1 	#Jump to label_else_1
label_then_1:
	li $t2, 4 	#Load Int
	sw $t2, 92($fp) 	#Save loaded value in destination
	lw $t7, 92($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 96($fp) 	#Obtain value from source dir
	lw $t5, -4($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t5) 	#Save value in attribute of index 0
	li $t0, 4 	#Load Int
	sw $t0, 100($fp) 	#Save loaded value in destination
	lw $t6, 100($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 104($fp) 	#Obtain value from source dir
	lw $t6, -4($fp) 	#Dir of instance of attribute to set
	sw $t2, 4($t6) 	#Save value in attribute of index 1
	lw $t4, 0($fp) 	#Obtain value from source dir
	lw $t0, -4($fp) 	#Dir of instance of attribute to set
	sw $t4, 8($t0) 	#Save value in attribute of index 2
	lw $t1, 0($fp) 	#Obtain value to assign
	sw $t1, 60($fp) 	#Assign value
	j label_continue_1 	#Jump to label_continue_1
label_else_1:
	lw $t3, 0($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 112($fp) 	#Save obtained attribute in destination
	li $t3, 20 	#Load Int
	sw $t3, 116($fp) 	#Save loaded value in destination
	lw $t6, 116($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 120($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 124($fp) 	#Save obtained attribute in destination
	sw $t2, 112($fp) 	#Value is string
	sw $t9, 124($fp) 	#Value is string
	sub $t1,  $t2, $t9 	#Minus
	sw $t1, 128($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 132($fp) 	#Save loaded value in destination
	sw $t0, 132($fp) 	#Value is string
	sw $t2, 128($fp) 	#Value is string
	sub $t9,  $t0, $t2 	#Minus
	sw $t9, 128($fp) 	#Save result of minus
	lw $t6, 128($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t1, 136($fp) 	#Mov comparisson value to register
	bgt $t7,  $t1, label_then_2 	#Compare values in registers and jump to label_then_2 if the second is greater than 0
	j label_else_2 	#Jump to label_else_2
label_then_2:
	li $t3, 4 	#Load Int
	sw $t3, 140($fp) 	#Save loaded value in destination
	lw $t3, 140($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 144($fp) 	#Obtain value from source dir
	lw $t4, -4($fp) 	#Dir of instance of attribute to set
	sw $t8, 0($t4) 	#Save value in attribute of index 0
	li $t1, 5 	#Load Int
	sw $t1, 148($fp) 	#Save loaded value in destination
	lw $t9, 148($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 152($fp) 	#Obtain value from source dir
	lw $t0, -4($fp) 	#Dir of instance of attribute to set
	sw $t6, 4($t0) 	#Save value in attribute of index 1
	lw $t4, 0($fp) 	#Obtain value from source dir
	lw $t2, -4($fp) 	#Dir of instance of attribute to set
	sw $t4, 8($t2) 	#Save value in attribute of index 2
	lw $t7, 0($fp) 	#Obtain value to assign
	sw $t7, 108($fp) 	#Assign value
	j label_continue_2 	#Jump to label_continue_2
label_else_2:
	lw $t3, 0($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 160($fp) 	#Save obtained attribute in destination
	li $t4, 21 	#Load Int
	sw $t4, 164($fp) 	#Save loaded value in destination
	lw $t2, 164($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 168($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 168($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 172($fp) 	#Save obtained attribute in destination
	sw $t0, 160($fp) 	#Value is string
	sw $t6, 172($fp) 	#Value is string
	sub $t1,  $t0, $t6 	#Minus
	sw $t1, 176($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 180($fp) 	#Save loaded value in destination
	sw $t9, 180($fp) 	#Value is string
	sw $t0, 176($fp) 	#Value is string
	sub $t8,  $t9, $t0 	#Minus
	sw $t8, 176($fp) 	#Save result of minus
	lw $t4, 176($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t5, 184($fp) 	#Mov comparisson value to register
	bgt $t9,  $t5, label_then_3 	#Compare values in registers and jump to label_then_3 if the second is greater than 0
	j label_else_3 	#Jump to label_else_3
label_then_3:
	li $t7, 3 	#Load Int
	sw $t7, 188($fp) 	#Save loaded value in destination
	lw $t6, 188($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 192($fp) 	#Obtain value from source dir
	lw $t3, -4($fp) 	#Dir of instance of attribute to set
	sw $t2, 0($t3) 	#Save value in attribute of index 0
	li $t4, 7 	#Load Int
	sw $t4, 196($fp) 	#Save loaded value in destination
	lw $t4, 196($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 200($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 200($fp) 	#Obtain value from source dir
	lw $t3, -4($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t3) 	#Save value in attribute of index 1
	lw $t7, 0($fp) 	#Obtain value from source dir
	lw $t0, -4($fp) 	#Dir of instance of attribute to set
	sw $t7, 8($t0) 	#Save value in attribute of index 2
	lw $t9, 0($fp) 	#Obtain value to assign
	sw $t9, 156($fp) 	#Assign value
	j label_continue_3 	#Jump to label_continue_3
label_else_3:
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 208($fp) 	#Save obtained attribute in destination
	li $t6, 25 	#Load Int
	sw $t6, 212($fp) 	#Save loaded value in destination
	lw $t6, 212($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 216($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 220($fp) 	#Save obtained attribute in destination
	sw $t8, 208($fp) 	#Value is string
	sw $t9, 220($fp) 	#Value is string
	sub $t2,  $t8, $t9 	#Minus
	sw $t2, 224($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 228($fp) 	#Save loaded value in destination
	sw $t3, 228($fp) 	#Value is string
	sw $t9, 224($fp) 	#Value is string
	sub $t7,  $t3, $t9 	#Minus
	sw $t7, 224($fp) 	#Save result of minus
	lw $t9, 224($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t5, 232($fp) 	#Mov comparisson value to register
	bgt $t6,  $t5, label_then_4 	#Compare values in registers and jump to label_then_4 if the second is greater than 0
	j label_else_4 	#Jump to label_else_4
label_then_4:
	li $t9, 5 	#Load Int
	sw $t9, 236($fp) 	#Save loaded value in destination
	lw $t0, 236($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 240($fp) 	#Obtain value from source dir
	lw $t4, -4($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t4) 	#Save value in attribute of index 0
	li $t8, 5 	#Load Int
	sw $t8, 244($fp) 	#Save loaded value in destination
	lw $t1, 244($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 248($fp) 	#Obtain value from source dir
	lw $t8, -4($fp) 	#Dir of instance of attribute to set
	sw $t7, 4($t8) 	#Save value in attribute of index 1
	lw $t6, 0($fp) 	#Obtain value from source dir
	lw $t2, -4($fp) 	#Dir of instance of attribute to set
	sw $t6, 8($t2) 	#Save value in attribute of index 2
	lw $t2, 0($fp) 	#Obtain value to assign
	sw $t2, 204($fp) 	#Assign value
	j label_continue_4 	#Jump to label_continue_4
label_else_4:
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 256($fp) 	#Save obtained attribute in destination
	li $t6, 28 	#Load Int
	sw $t6, 260($fp) 	#Save loaded value in destination
	lw $t7, 260($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 264($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 264($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 268($fp) 	#Save obtained attribute in destination
	sw $t6, 256($fp) 	#Value is string
	sw $t4, 268($fp) 	#Value is string
	sub $t5,  $t6, $t4 	#Minus
	sw $t5, 272($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 276($fp) 	#Save loaded value in destination
	sw $t3, 276($fp) 	#Value is string
	sw $t2, 272($fp) 	#Value is string
	sub $t6,  $t3, $t2 	#Minus
	sw $t6, 272($fp) 	#Save result of minus
	lw $t4, 272($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t7, 280($fp) 	#Mov comparisson value to register
	bgt $t1,  $t7, label_then_5 	#Compare values in registers and jump to label_then_5 if the second is greater than 0
	j label_else_5 	#Jump to label_else_5
label_then_5:
	li $t4, 7 	#Load Int
	sw $t4, 284($fp) 	#Save loaded value in destination
	lw $t6, 284($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 288($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 288($fp) 	#Obtain value from source dir
	lw $t8, -4($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t8) 	#Save value in attribute of index 0
	li $t9, 4 	#Load Int
	sw $t9, 292($fp) 	#Save loaded value in destination
	lw $t3, 292($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 296($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 296($fp) 	#Obtain value from source dir
	lw $t6, -4($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t6) 	#Save value in attribute of index 1
	lw $t0, 0($fp) 	#Obtain value from source dir
	lw $t6, -4($fp) 	#Dir of instance of attribute to set
	sw $t0, 8($t6) 	#Save value in attribute of index 2
	lw $t8, 0($fp) 	#Obtain value to assign
	sw $t8, 252($fp) 	#Assign value
	j label_continue_5 	#Jump to label_continue_5
label_else_5:
	li $t8, 5 	#Load Int
	sw $t8, 300($fp) 	#Save loaded value in destination
	lw $t5, 300($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 304($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 304($fp) 	#Obtain value from source dir
	lw $t1, -4($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t1) 	#Save value in attribute of index 0
	li $t6, 5 	#Load Int
	sw $t6, 308($fp) 	#Save loaded value in destination
	lw $t9, 308($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 312($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 312($fp) 	#Obtain value from source dir
	lw $t1, -4($fp) 	#Dir of instance of attribute to set
	sw $t5, 4($t1) 	#Save value in attribute of index 1
	lw $t3, 0($fp) 	#Obtain value from source dir
	lw $t2, -4($fp) 	#Dir of instance of attribute to set
	sw $t3, 8($t2) 	#Save value in attribute of index 2
	lw $t7, 0($fp) 	#Obtain value to assign
	sw $t7, 252($fp) 	#Assign value
label_continue_5:
	lw $t1, 252($fp) 	#Obtain value to assign
	sw $t1, 204($fp) 	#Assign value
label_continue_4:
	lw $t7, 204($fp) 	#Obtain value to assign
	sw $t7, 156($fp) 	#Assign value
label_continue_3:
	lw $t5, 156($fp) 	#Obtain value to assign
	sw $t5, 108($fp) 	#Assign value
label_continue_2:
	lw $t3, 108($fp) 	#Obtain value to assign
	sw $t3, 60($fp) 	#Assign value
label_continue_1:
	lw $t4, 60($fp) 	#Obtain value to assign
	sw $t4, 12($fp) 	#Assign value
label_continue_0:
	lw $t6, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -316 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type CellularAutomaton
	li $a0, 20 	#Save 20 bytes
	syscall 	#
	la $t7, CellularAutomaton 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_rows___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain value from source dir
	lw $t0, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t0) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_columns___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 4($t8) 	#Save value in attribute of index 1
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_board_size___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 12($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t7, 8($t3) 	#Save value in attribute of index 2
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal CellularAutomaton_population_map___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 16($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 12($t9) 	#Save value in attribute of index 3
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_population_map___init:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_9_default_str 	#LOAD
	sw $t9, 4($fp) 	#Save loaded value in destination
	lw $t9, 4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -8($fp) 	#Obtain value from source dir
	lw $t6, -4($fp) 	#Dir of instance of attribute to set
	sw $t0, 12($t6) 	#Save value in attribute of index 3
	lw $t6, -4($fp) 	#Typeof
	lw $t7, -4($t6) 	#
	sw $t7, 4($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 32($t7) 	#Get method of index 8
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_print:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 124 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t6, 0 	#Load Int
	sw $t6, 4($fp) 	#Save loaded value in destination
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 8($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 8($t7) 	#Load attribute in index 2
	sw $t3, 16($fp) 	#Save obtained attribute in destination
	lw $t8, 16($fp) 	#Obtain value to assign
	sw $t8, 12($fp) 	#Assign value
	la $t0, data_10_string 	#LOAD
	sw $t0, 24($fp) 	#Save loaded value in destination
	lw $t3, 24($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 32($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 28($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 32($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t2) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
label_while_label_0:
	lw $t1, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 36($fp) 	#Save obtained attribute in destination
	lw $t7, 12($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 40($fp) 	#Save obtained attribute in destination
	sw $t7, 40($fp) 	#Value is string
	sw $t0, 36($fp) 	#Value is string
	sub $t5,  $t7, $t0 	#Minus
	sw $t5, 44($fp) 	#Save result of minus
	lw $t5, 44($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t5, 48($fp) 	#Mov comparisson value to register
	bgt $t7,  $t5, label_loop_label_0 	#Compare values in registers and jump to label_loop_label_0 if the second is greater than 0
	j label_pool_label_0 	#Jump to label_pool_label_0
label_loop_label_0:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 12($t5) 	#Load attribute in index 3
	sw $t3, 60($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 4($t7) 	#Load attribute in index 1
	sw $t9, 64($fp) 	#Save obtained attribute in destination
	lw $t6, 60($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 68($fp) 	#Save type value in destination
	lw $t4, 60($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 64($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 68($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t7) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 56($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, -4($fp) 	#Typeof
	lw $t8, -4($t4) 	#
	sw $t8, 72($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 56($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 72($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t0) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_10_string 	#LOAD
	sw $t6, 80($fp) 	#Save loaded value in destination
	lw $t8, 80($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t6, -4($t3) 	#
	sw $t6, 88($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 84($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 88($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t7) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t7) 	#Load attribute in index 0
	sw $t0, 92($fp) 	#Save obtained attribute in destination
	lw $t8, 64($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t8) 	#Load attribute in index 0
	sw $t0, 96($fp) 	#Save obtained attribute in destination
	sw $t0, 92($fp) 	#Value is string
	sw $t2, 96($fp) 	#Value is string
	add $t6,  $t0, $t2 	#Plus
	sw $t6, 100($fp) 	#Save result of plus
	lw $t0, 100($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	j label_while_label_0 	#Jump to label_while_label_0
label_pool_label_0:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 104($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	la $t4, data_10_string 	#LOAD
	sw $t4, 112($fp) 	#Save loaded value in destination
	lw $t3, 112($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t4, -4($t6) 	#
	sw $t4, 120($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 116($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 120($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t2) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -124 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_num_cells:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 12($t8) 	#Load attribute in index 3
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Typeof
	lw $t3, -4($t2) 	#
	sw $t3, 8($fp) 	#Save type value in destination
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 8($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t9) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_cell:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 72 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 8($t0) 	#Load attribute in index 2
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 8($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 12($fp) 	#Save loaded value in destination
	lw $t8, 12($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 16($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t3) 	#Load attribute in index 0
	sw $t5, 20($fp) 	#Save obtained attribute in destination
	sw $t0, 8($fp) 	#Value is string
	sw $t6, 20($fp) 	#Value is string
	sub $t5,  $t0, $t6 	#Minus
	sw $t5, 24($fp) 	#Save result of minus
	lw $t3, 24($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 28($fp) 	#Save obtained attribute in destination
	lw $t9, -8($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 32($fp) 	#Save obtained attribute in destination
	sw $t8, 32($fp) 	#Value is string
	sw $t3, 28($fp) 	#Value is string
	sub $t2,  $t8, $t3 	#Minus
	sw $t2, 36($fp) 	#Save result of minus
	lw $t9, 36($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t0, 40($fp) 	#Mov comparisson value to register
	bgt $t9,  $t0, label_then_6 	#Compare values in registers and jump to label_then_6 if the second is greater than 0
	j label_else_6 	#Jump to label_else_6
label_then_6:
	la $t2, data_11_string 	#LOAD
	sw $t2, 44($fp) 	#Save loaded value in destination
	lw $t7, 44($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 48($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_6 	#Jump to label_continue_6
label_else_6:
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 12($t2) 	#Load attribute in index 3
	sw $t4, 56($fp) 	#Save obtained attribute in destination
	li $t1, 1 	#Load Int
	sw $t1, 60($fp) 	#Save loaded value in destination
	lw $t6, 60($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 56($fp) 	#Typeof
	lw $t6, -4($t2) 	#
	sw $t6, 68($fp) 	#Save type value in destination
	lw $t6, 56($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, -8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 64($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 68($fp) 	#get type dir for Dynamic Call
	lw $t0, 20($t9) 	#Get method of index 5
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t8, 52($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
label_continue_6:
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -72 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_north:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 72 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -8($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 4($t6) 	#Load attribute in index 1
	sw $t1, 8($fp) 	#Save obtained attribute in destination
	lw $t7, 8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t7) 	#Load attribute in index 0
	sw $t1, 12($fp) 	#Save obtained attribute in destination
	sw $t4, 4($fp) 	#Value is string
	sw $t9, 12($fp) 	#Value is string
	sub $t8,  $t4, $t9 	#Minus
	sw $t8, 16($fp) 	#Save result of minus
	lw $t2, 16($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 20($fp) 	#Save obtained attribute in destination
	li $t4, 0 	#Load Int
	sw $t4, 24($fp) 	#Save loaded value in destination
	lw $t4, 24($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 28($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 32($fp) 	#Save obtained attribute in destination
	sw $t8, 32($fp) 	#Value is string
	sw $t0, 20($fp) 	#Value is string
	sub $t4,  $t8, $t0 	#Minus
	sw $t4, 36($fp) 	#Save result of minus
	lw $t6, 36($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t7, 40($fp) 	#Mov comparisson value to register
	bgt $t0,  $t7, label_then_7 	#Compare values in registers and jump to label_then_7 if the second is greater than 0
	j label_else_7 	#Jump to label_else_7
label_then_7:
	la $t8, data_11_string 	#LOAD
	sw $t8, 44($fp) 	#Save loaded value in destination
	lw $t3, 44($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 48($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	j label_continue_7 	#Jump to label_continue_7
label_else_7:
	lw $t1, -8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 56($fp) 	#Save obtained attribute in destination
	lw $t5, 8($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 60($fp) 	#Save obtained attribute in destination
	sw $t0, 56($fp) 	#Value is string
	sw $t5, 60($fp) 	#Value is string
	sub $t9,  $t0, $t5 	#Minus
	sw $t9, 64($fp) 	#Save result of minus
	lw $t7, -4($fp) 	#Typeof
	lw $t5, -4($t7) 	#
	sw $t5, 68($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 64($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 68($fp) 	#get type dir for Dynamic Call
	lw $t4, 48($t5) 	#Get method of index 12
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 52($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
label_continue_7:
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -72 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_south:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 68 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 8($t8) 	#Load attribute in index 2
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 8($fp) 	#Save obtained attribute in destination
	lw $t8, -8($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t8) 	#Load attribute in index 0
	sw $t5, 12($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 4($t3) 	#Load attribute in index 1
	sw $t1, 16($fp) 	#Save obtained attribute in destination
	lw $t7, 16($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t7) 	#Load attribute in index 0
	sw $t2, 20($fp) 	#Save obtained attribute in destination
	sw $t5, 12($fp) 	#Value is string
	sw $t8, 20($fp) 	#Value is string
	add $t2,  $t5, $t8 	#Plus
	sw $t2, 24($fp) 	#Save result of plus
	lw $t5, 24($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 28($fp) 	#Save obtained attribute in destination
	sw $t8, 28($fp) 	#Value is string
	sw $t0, 8($fp) 	#Value is string
	sub $t3,  $t8, $t0 	#Minus
	sw $t3, 32($fp) 	#Save result of minus
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t5, 36($fp) 	#Mov comparisson value to register
	bgt $t4,  $t5, label_then_8 	#Compare values in registers and jump to label_then_8 if the second is greater than 0
	j label_else_8 	#Jump to label_else_8
label_then_8:
	la $t5, data_11_string 	#LOAD
	sw $t5, 40($fp) 	#Save loaded value in destination
	lw $t9, 40($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 44($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	j label_continue_8 	#Jump to label_continue_8
label_else_8:
	lw $t5, -8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 52($fp) 	#Save obtained attribute in destination
	lw $t9, 16($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 56($fp) 	#Save obtained attribute in destination
	sw $t8, 52($fp) 	#Value is string
	sw $t1, 56($fp) 	#Value is string
	add $t9,  $t8, $t1 	#Plus
	sw $t9, 60($fp) 	#Save result of plus
	lw $t9, -4($fp) 	#Typeof
	lw $t1, -4($t9) 	#
	sw $t1, 64($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 60($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 64($fp) 	#get type dir for Dynamic Call
	lw $t8, 48($t2) 	#Get method of index 12
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 48($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
label_continue_8:
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -68 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_east:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 128 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	li $t6, 1 	#Load Int
	sw $t6, 8($fp) 	#Save loaded value in destination
	lw $t7, 8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 12($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 16($fp) 	#Save obtained attribute in destination
	sw $t3, 4($fp) 	#Value is string
	sw $t9, 16($fp) 	#Value is string
	add $t4,  $t3, $t9 	#Plus
	sw $t4, 20($fp) 	#Save result of plus
	lw $t3, 20($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 24($fp) 	#Save obtained attribute in destination
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 4($t4) 	#Load attribute in index 1
	sw $t3, 28($fp) 	#Save obtained attribute in destination
	lw $t9, 28($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 32($fp) 	#Save obtained attribute in destination
	sw $t9, 24($fp) 	#Value is string
	sw $t7, 32($fp) 	#Value is string
	div $t9, $t7 	#Div
	mflo $t9 	#
	sw $t9, 36($fp) 	#Save result of Div
	lw $t8, 36($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t8) 	#Load attribute in index 0
	sw $t9, 40($fp) 	#Save obtained attribute in destination
	lw $t8, 28($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t8) 	#Load attribute in index 0
	sw $t1, 44($fp) 	#Save obtained attribute in destination
	sw $t8, 40($fp) 	#Value is string
	sw $t7, 44($fp) 	#Value is string
	mult $t8, $t7 	#Mult
	mfhi $t8 	#
	sw $t8, 48($fp) 	#Save result of Mult
	lw $t7, 48($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t7) 	#Load attribute in index 0
	sw $t0, 52($fp) 	#Save obtained attribute in destination
	lw $t8, -8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 56($fp) 	#Save obtained attribute in destination
	li $t7, 1 	#Load Int
	sw $t7, 60($fp) 	#Save loaded value in destination
	lw $t6, 60($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 64($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 68($fp) 	#Save obtained attribute in destination
	sw $t1, 56($fp) 	#Value is string
	sw $t9, 68($fp) 	#Value is string
	add $t2,  $t1, $t9 	#Plus
	sw $t2, 72($fp) 	#Save result of plus
	lw $t0, 72($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 76($fp) 	#Save obtained attribute in destination
	sw $t5, 52($fp) 	#Value is string
	sw $t1, 76($fp) 	#Value is string
	sub $t9,  $t5, $t1 	#Minus
	sw $t9, 80($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 84($fp) 	#Save loaded value in destination
	sw $t5, 84($fp) 	#Value is string
	sw $t3, 80($fp) 	#Value is string
	sub $t2,  $t5, $t3 	#Minus
	sw $t2, 80($fp) 	#Save result of minus
	lw $t9, 80($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t8, 88($fp) 	#Mov comparisson value to register
	bgt $t3,  $t8, label_then_9 	#Compare values in registers and jump to label_then_9 if the second is greater than 0
	j label_else_9 	#Jump to label_else_9
label_then_9:
	la $t8, data_11_string 	#LOAD
	sw $t8, 92($fp) 	#Save loaded value in destination
	lw $t4, 92($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 96($fp) 	#Obtain value to assign
	sw $t4, 0($fp) 	#Assign value
	j label_continue_9 	#Jump to label_continue_9
label_else_9:
	lw $t2, -8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 104($fp) 	#Save obtained attribute in destination
	li $t1, 1 	#Load Int
	sw $t1, 108($fp) 	#Save loaded value in destination
	lw $t3, 108($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 112($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 116($fp) 	#Save obtained attribute in destination
	sw $t9, 104($fp) 	#Value is string
	sw $t0, 116($fp) 	#Value is string
	add $t2,  $t9, $t0 	#Plus
	sw $t2, 120($fp) 	#Save result of plus
	lw $t8, -4($fp) 	#Typeof
	lw $t7, -4($t8) 	#
	sw $t7, 124($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 120($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 124($fp) 	#get type dir for Dynamic Call
	lw $t0, 48($t6) 	#Get method of index 12
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 100($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 100($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
label_continue_9:
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -128 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_west:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 128 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -8($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	li $t8, 0 	#Load Int
	sw $t8, 8($fp) 	#Save loaded value in destination
	lw $t2, 8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 12($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 16($fp) 	#Save obtained attribute in destination
	sw $t8, 4($fp) 	#Value is string
	sw $t3, 16($fp) 	#Value is string
	sub $t4,  $t8, $t3 	#Minus
	sw $t4, 20($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 24($fp) 	#Save loaded value in destination
	sw $t0, 24($fp) 	#Value is string
	sw $t9, 20($fp) 	#Value is string
	sub $t6,  $t0, $t9 	#Minus
	sw $t6, 20($fp) 	#Save result of minus
	lw $t6, 20($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t3, 28($fp) 	#Mov comparisson value to register
	bgt $t4,  $t3, label_then_10 	#Compare values in registers and jump to label_then_10 if the second is greater than 0
	j label_else_10 	#Jump to label_else_10
label_then_10:
	la $t1, data_11_string 	#LOAD
	sw $t1, 32($fp) 	#Save loaded value in destination
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 36($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	j label_continue_10 	#Jump to label_continue_10
label_else_10:
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 44($fp) 	#Save obtained attribute in destination
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 4($t4) 	#Load attribute in index 1
	sw $t0, 48($fp) 	#Save obtained attribute in destination
	lw $t6, 48($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 52($fp) 	#Save obtained attribute in destination
	sw $t7, 44($fp) 	#Value is string
	sw $t4, 52($fp) 	#Value is string
	div $t7, $t4 	#Div
	mflo $t7 	#
	sw $t7, 56($fp) 	#Save result of Div
	lw $t6, 56($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 60($fp) 	#Save obtained attribute in destination
	lw $t8, 48($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t8) 	#Load attribute in index 0
	sw $t2, 64($fp) 	#Save obtained attribute in destination
	sw $t4, 60($fp) 	#Value is string
	sw $t0, 64($fp) 	#Value is string
	mult $t4, $t0 	#Mult
	mfhi $t4 	#
	sw $t4, 68($fp) 	#Save result of Mult
	lw $t2, 68($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 72($fp) 	#Save obtained attribute in destination
	lw $t7, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 76($fp) 	#Save obtained attribute in destination
	sw $t7, 72($fp) 	#Value is string
	sw $t3, 76($fp) 	#Value is string
	sub $t1,  $t7, $t3 	#Minus
	sw $t1, 80($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 84($fp) 	#Save loaded value in destination
	sw $t0, 84($fp) 	#Value is string
	sw $t4, 80($fp) 	#Value is string
	sub $t5,  $t0, $t4 	#Minus
	sw $t5, 80($fp) 	#Save result of minus
	lw $t4, 80($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t0, 88($fp) 	#Mov comparisson value to register
	bgt $t9,  $t0, label_then_11 	#Compare values in registers and jump to label_then_11 if the second is greater than 0
	j label_else_11 	#Jump to label_else_11
label_then_11:
	la $t3, data_11_string 	#LOAD
	sw $t3, 92($fp) 	#Save loaded value in destination
	lw $t7, 92($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 96($fp) 	#Obtain value to assign
	sw $t9, 40($fp) 	#Assign value
	j label_continue_11 	#Jump to label_continue_11
label_else_11:
	lw $t2, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 104($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 108($fp) 	#Save loaded value in destination
	lw $t0, 108($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 112($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t2) 	#Load attribute in index 0
	sw $t9, 116($fp) 	#Save obtained attribute in destination
	sw $t9, 104($fp) 	#Value is string
	sw $t8, 116($fp) 	#Value is string
	sub $t5,  $t9, $t8 	#Minus
	sw $t5, 120($fp) 	#Save result of minus
	lw $t1, -4($fp) 	#Typeof
	lw $t3, -4($t1) 	#
	sw $t3, 124($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 120($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 124($fp) 	#get type dir for Dynamic Call
	lw $t5, 48($t0) 	#Get method of index 12
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 100($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 100($fp) 	#Obtain value to assign
	sw $t5, 40($fp) 	#Assign value
label_continue_11:
	lw $t3, 40($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
label_continue_10:
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -128 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_northwest:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 136 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 4($fp) 	#Save obtained attribute in destination
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 4($t0) 	#Load attribute in index 1
	sw $t6, 8($fp) 	#Save obtained attribute in destination
	lw $t4, 8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 12($fp) 	#Save obtained attribute in destination
	sw $t4, 4($fp) 	#Value is string
	sw $t5, 12($fp) 	#Value is string
	sub $t8,  $t4, $t5 	#Minus
	sw $t8, 16($fp) 	#Save result of minus
	lw $t7, 16($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 20($fp) 	#Save obtained attribute in destination
	li $t6, 0 	#Load Int
	sw $t6, 24($fp) 	#Save loaded value in destination
	lw $t3, 24($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 28($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 32($fp) 	#Save obtained attribute in destination
	sw $t3, 32($fp) 	#Value is string
	sw $t6, 20($fp) 	#Value is string
	sub $t5,  $t3, $t6 	#Minus
	sw $t5, 36($fp) 	#Save result of minus
	lw $t3, 36($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t4, 40($fp) 	#Mov comparisson value to register
	bgt $t7,  $t4, label_then_12 	#Compare values in registers and jump to label_then_12 if the second is greater than 0
	j label_else_12 	#Jump to label_else_12
label_then_12:
	la $t4, data_11_string 	#LOAD
	sw $t4, 44($fp) 	#Save loaded value in destination
	lw $t7, 44($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 48($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	j label_continue_12 	#Jump to label_continue_12
label_else_12:
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t6) 	#Load attribute in index 0
	sw $t8, 56($fp) 	#Save obtained attribute in destination
	lw $t6, 8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 60($fp) 	#Save obtained attribute in destination
	sw $t1, 56($fp) 	#Value is string
	sw $t5, 60($fp) 	#Value is string
	div $t1, $t5 	#Div
	mflo $t1 	#
	sw $t1, 64($fp) 	#Save result of Div
	lw $t1, 64($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 68($fp) 	#Save obtained attribute in destination
	lw $t5, 8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t5) 	#Load attribute in index 0
	sw $t9, 72($fp) 	#Save obtained attribute in destination
	sw $t2, 68($fp) 	#Value is string
	sw $t6, 72($fp) 	#Value is string
	mult $t2, $t6 	#Mult
	mfhi $t2 	#
	sw $t2, 76($fp) 	#Save result of Mult
	lw $t8, 76($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 80($fp) 	#Save obtained attribute in destination
	lw $t9, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 84($fp) 	#Save obtained attribute in destination
	sw $t5, 80($fp) 	#Value is string
	sw $t7, 84($fp) 	#Value is string
	sub $t0,  $t5, $t7 	#Minus
	sw $t0, 88($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 92($fp) 	#Save loaded value in destination
	sw $t9, 92($fp) 	#Value is string
	sw $t8, 88($fp) 	#Value is string
	sub $t2,  $t9, $t8 	#Minus
	sw $t2, 88($fp) 	#Save result of minus
	lw $t2, 88($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t6, 96($fp) 	#Mov comparisson value to register
	bgt $t0,  $t6, label_then_13 	#Compare values in registers and jump to label_then_13 if the second is greater than 0
	j label_else_13 	#Jump to label_else_13
label_then_13:
	la $t7, data_11_string 	#LOAD
	sw $t7, 100($fp) 	#Save loaded value in destination
	lw $t3, 100($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 104($fp) 	#Obtain value to assign
	sw $t8, 52($fp) 	#Assign value
	j label_continue_13 	#Jump to label_continue_13
label_else_13:
	lw $t8, -8($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 112($fp) 	#Save obtained attribute in destination
	li $t8, 1 	#Load Int
	sw $t8, 116($fp) 	#Save loaded value in destination
	lw $t6, 116($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 120($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 124($fp) 	#Save obtained attribute in destination
	sw $t3, 112($fp) 	#Value is string
	sw $t6, 124($fp) 	#Value is string
	sub $t8,  $t3, $t6 	#Minus
	sw $t8, 128($fp) 	#Save result of minus
	lw $t7, -4($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 132($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 128($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 132($fp) 	#get type dir for Dynamic Call
	lw $t0, 52($t3) 	#Get method of index 13
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 108($fp) 	#Obtain value to assign
	sw $t4, 52($fp) 	#Assign value
label_continue_13:
	lw $t3, 52($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
label_continue_12:
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -136 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_northeast:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 176 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 4($t2) 	#Load attribute in index 1
	sw $t4, 8($fp) 	#Save obtained attribute in destination
	lw $t5, 8($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 12($fp) 	#Save obtained attribute in destination
	sw $t0, 4($fp) 	#Value is string
	sw $t4, 12($fp) 	#Value is string
	sub $t6,  $t0, $t4 	#Minus
	sw $t6, 16($fp) 	#Save result of minus
	lw $t5, 16($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 20($fp) 	#Save obtained attribute in destination
	li $t9, 0 	#Load Int
	sw $t9, 24($fp) 	#Save loaded value in destination
	lw $t5, 24($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 28($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 32($fp) 	#Save obtained attribute in destination
	sw $t5, 32($fp) 	#Value is string
	sw $t7, 20($fp) 	#Value is string
	sub $t4,  $t5, $t7 	#Minus
	sw $t4, 36($fp) 	#Save result of minus
	lw $t0, 36($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t4, 40($fp) 	#Mov comparisson value to register
	bgt $t1,  $t4, label_then_14 	#Compare values in registers and jump to label_then_14 if the second is greater than 0
	j label_else_14 	#Jump to label_else_14
label_then_14:
	la $t5, data_11_string 	#LOAD
	sw $t5, 44($fp) 	#Save loaded value in destination
	lw $t7, 44($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 48($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	j label_continue_14 	#Jump to label_continue_14
label_else_14:
	lw $t0, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t0) 	#Load attribute in index 0
	sw $t6, 56($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 60($fp) 	#Save loaded value in destination
	lw $t3, 60($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 64($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 68($fp) 	#Save obtained attribute in destination
	sw $t2, 56($fp) 	#Value is string
	sw $t4, 68($fp) 	#Value is string
	add $t1,  $t2, $t4 	#Plus
	sw $t1, 72($fp) 	#Save result of plus
	lw $t4, 72($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 76($fp) 	#Save obtained attribute in destination
	lw $t6, 8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 80($fp) 	#Save obtained attribute in destination
	sw $t3, 76($fp) 	#Value is string
	sw $t5, 80($fp) 	#Value is string
	div $t3, $t5 	#Div
	mflo $t3 	#
	sw $t3, 84($fp) 	#Save result of Div
	lw $t3, 84($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 88($fp) 	#Save obtained attribute in destination
	lw $t5, 8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 92($fp) 	#Save obtained attribute in destination
	sw $t1, 88($fp) 	#Value is string
	sw $t4, 92($fp) 	#Value is string
	mult $t1, $t4 	#Mult
	mfhi $t1 	#
	sw $t1, 96($fp) 	#Save result of Mult
	lw $t2, 96($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 100($fp) 	#Save obtained attribute in destination
	lw $t7, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 104($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 108($fp) 	#Save loaded value in destination
	lw $t2, 108($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 112($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 116($fp) 	#Save obtained attribute in destination
	sw $t8, 104($fp) 	#Value is string
	sw $t2, 116($fp) 	#Value is string
	add $t7,  $t8, $t2 	#Plus
	sw $t7, 120($fp) 	#Save result of plus
	lw $t7, 120($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 124($fp) 	#Save obtained attribute in destination
	sw $t3, 100($fp) 	#Value is string
	sw $t2, 124($fp) 	#Value is string
	sub $t8,  $t3, $t2 	#Minus
	sw $t8, 128($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 132($fp) 	#Save loaded value in destination
	sw $t9, 132($fp) 	#Value is string
	sw $t0, 128($fp) 	#Value is string
	sub $t8,  $t9, $t0 	#Minus
	sw $t8, 128($fp) 	#Save result of minus
	lw $t8, 128($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t8, 136($fp) 	#Mov comparisson value to register
	bgt $t6,  $t8, label_then_15 	#Compare values in registers and jump to label_then_15 if the second is greater than 0
	j label_else_15 	#Jump to label_else_15
label_then_15:
	la $t0, data_11_string 	#LOAD
	sw $t0, 140($fp) 	#Save loaded value in destination
	lw $t1, 140($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 144($fp) 	#Obtain value to assign
	sw $t6, 52($fp) 	#Assign value
	j label_continue_15 	#Jump to label_continue_15
label_else_15:
	lw $t1, -8($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t1) 	#Load attribute in index 0
	sw $t2, 152($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 156($fp) 	#Save loaded value in destination
	lw $t0, 156($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 160($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 164($fp) 	#Save obtained attribute in destination
	sw $t1, 152($fp) 	#Value is string
	sw $t0, 164($fp) 	#Value is string
	add $t3,  $t1, $t0 	#Plus
	sw $t3, 168($fp) 	#Save result of plus
	lw $t4, -4($fp) 	#Typeof
	lw $t9, -4($t4) 	#
	sw $t9, 172($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 168($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 172($fp) 	#get type dir for Dynamic Call
	lw $t2, 52($t1) 	#Get method of index 13
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 148($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 148($fp) 	#Obtain value to assign
	sw $t5, 52($fp) 	#Assign value
label_continue_15:
	lw $t3, 52($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
label_continue_14:
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -176 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_southeast:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 172 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 8($t6) 	#Load attribute in index 2
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t1, 4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 8($fp) 	#Save obtained attribute in destination
	lw $t2, -8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t2) 	#Load attribute in index 0
	sw $t9, 12($fp) 	#Save obtained attribute in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 4($t9) 	#Load attribute in index 1
	sw $t0, 16($fp) 	#Save obtained attribute in destination
	lw $t3, 16($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 20($fp) 	#Save obtained attribute in destination
	sw $t8, 12($fp) 	#Value is string
	sw $t9, 20($fp) 	#Value is string
	add $t1,  $t8, $t9 	#Plus
	sw $t1, 24($fp) 	#Save result of plus
	lw $t7, 24($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t7) 	#Load attribute in index 0
	sw $t8, 28($fp) 	#Save obtained attribute in destination
	sw $t4, 28($fp) 	#Value is string
	sw $t1, 8($fp) 	#Value is string
	sub $t9,  $t4, $t1 	#Minus
	sw $t9, 32($fp) 	#Save result of minus
	lw $t4, 32($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t7, 36($fp) 	#Mov comparisson value to register
	bgt $t3,  $t7, label_then_16 	#Compare values in registers and jump to label_then_16 if the second is greater than 0
	j label_else_16 	#Jump to label_else_16
label_then_16:
	la $t4, data_11_string 	#LOAD
	sw $t4, 40($fp) 	#Save loaded value in destination
	lw $t9, 40($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 44($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_16 	#Jump to label_continue_16
label_else_16:
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 52($fp) 	#Save obtained attribute in destination
	li $t8, 1 	#Load Int
	sw $t8, 56($fp) 	#Save loaded value in destination
	lw $t1, 56($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 60($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 64($fp) 	#Save obtained attribute in destination
	sw $t5, 52($fp) 	#Value is string
	sw $t9, 64($fp) 	#Value is string
	add $t7,  $t5, $t9 	#Plus
	sw $t7, 68($fp) 	#Save result of plus
	lw $t7, 68($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t7) 	#Load attribute in index 0
	sw $t3, 72($fp) 	#Save obtained attribute in destination
	lw $t6, 16($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t6) 	#Load attribute in index 0
	sw $t3, 76($fp) 	#Save obtained attribute in destination
	sw $t0, 72($fp) 	#Value is string
	sw $t9, 76($fp) 	#Value is string
	div $t0, $t9 	#Div
	mflo $t0 	#
	sw $t0, 80($fp) 	#Save result of Div
	lw $t2, 80($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 84($fp) 	#Save obtained attribute in destination
	lw $t6, 16($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 88($fp) 	#Save obtained attribute in destination
	sw $t2, 84($fp) 	#Value is string
	sw $t0, 88($fp) 	#Value is string
	mult $t2, $t0 	#Mult
	mfhi $t2 	#
	sw $t2, 92($fp) 	#Save result of Mult
	lw $t1, 92($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 96($fp) 	#Save obtained attribute in destination
	lw $t1, -8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 100($fp) 	#Save obtained attribute in destination
	li $t6, 1 	#Load Int
	sw $t6, 104($fp) 	#Save loaded value in destination
	lw $t6, 104($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 108($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t7) 	#Load attribute in index 0
	sw $t2, 112($fp) 	#Save obtained attribute in destination
	sw $t0, 100($fp) 	#Value is string
	sw $t1, 112($fp) 	#Value is string
	add $t2,  $t0, $t1 	#Plus
	sw $t2, 116($fp) 	#Save result of plus
	lw $t1, 116($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 120($fp) 	#Save obtained attribute in destination
	sw $t3, 96($fp) 	#Value is string
	sw $t4, 120($fp) 	#Value is string
	sub $t2,  $t3, $t4 	#Minus
	sw $t2, 124($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 128($fp) 	#Save loaded value in destination
	sw $t1, 128($fp) 	#Value is string
	sw $t8, 124($fp) 	#Value is string
	sub $t2,  $t1, $t8 	#Minus
	sw $t2, 124($fp) 	#Save result of minus
	lw $t5, 124($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t2, 132($fp) 	#Mov comparisson value to register
	bgt $t6,  $t2, label_then_17 	#Compare values in registers and jump to label_then_17 if the second is greater than 0
	j label_else_17 	#Jump to label_else_17
label_then_17:
	la $t4, data_11_string 	#LOAD
	sw $t4, 136($fp) 	#Save loaded value in destination
	lw $t7, 136($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 140($fp) 	#Obtain value to assign
	sw $t9, 48($fp) 	#Assign value
	j label_continue_17 	#Jump to label_continue_17
label_else_17:
	lw $t8, -8($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t8) 	#Load attribute in index 0
	sw $t2, 148($fp) 	#Save obtained attribute in destination
	li $t5, 1 	#Load Int
	sw $t5, 152($fp) 	#Save loaded value in destination
	lw $t3, 152($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 156($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 160($fp) 	#Save obtained attribute in destination
	sw $t3, 148($fp) 	#Value is string
	sw $t5, 160($fp) 	#Value is string
	add $t7,  $t3, $t5 	#Plus
	sw $t7, 164($fp) 	#Save result of plus
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 168($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 164($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 168($fp) 	#get type dir for Dynamic Call
	lw $t0, 56($t9) 	#Get method of index 14
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 144($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 144($fp) 	#Obtain value to assign
	sw $t3, 48($fp) 	#Assign value
label_continue_17:
	lw $t5, 48($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
label_continue_16:
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -172 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_southwest:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 132 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 8($t5) 	#Load attribute in index 2
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	lw $t7, 4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t7) 	#Load attribute in index 0
	sw $t2, 8($fp) 	#Save obtained attribute in destination
	lw $t5, -8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 12($fp) 	#Save obtained attribute in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 4($t1) 	#Load attribute in index 1
	sw $t4, 16($fp) 	#Save obtained attribute in destination
	lw $t9, 16($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 20($fp) 	#Save obtained attribute in destination
	sw $t4, 12($fp) 	#Value is string
	sw $t8, 20($fp) 	#Value is string
	add $t7,  $t4, $t8 	#Plus
	sw $t7, 24($fp) 	#Save result of plus
	lw $t6, 24($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 28($fp) 	#Save obtained attribute in destination
	sw $t6, 28($fp) 	#Value is string
	sw $t3, 8($fp) 	#Value is string
	sub $t7,  $t6, $t3 	#Minus
	sw $t7, 32($fp) 	#Save result of minus
	lw $t5, 32($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t9, 36($fp) 	#Mov comparisson value to register
	bgt $t7,  $t9, label_then_18 	#Compare values in registers and jump to label_then_18 if the second is greater than 0
	j label_else_18 	#Jump to label_else_18
label_then_18:
	la $t7, data_11_string 	#LOAD
	sw $t7, 40($fp) 	#Save loaded value in destination
	lw $t3, 40($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 44($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	j label_continue_18 	#Jump to label_continue_18
label_else_18:
	lw $t4, -8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 52($fp) 	#Save obtained attribute in destination
	lw $t0, 16($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t0) 	#Load attribute in index 0
	sw $t7, 56($fp) 	#Save obtained attribute in destination
	sw $t4, 52($fp) 	#Value is string
	sw $t2, 56($fp) 	#Value is string
	div $t4, $t2 	#Div
	mflo $t4 	#
	sw $t4, 60($fp) 	#Save result of Div
	lw $t2, 60($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t2) 	#Load attribute in index 0
	sw $t7, 64($fp) 	#Save obtained attribute in destination
	lw $t3, 16($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t3) 	#Load attribute in index 0
	sw $t5, 68($fp) 	#Save obtained attribute in destination
	sw $t7, 64($fp) 	#Value is string
	sw $t1, 68($fp) 	#Value is string
	mult $t7, $t1 	#Mult
	mfhi $t7 	#
	sw $t7, 72($fp) 	#Save result of Mult
	lw $t1, 72($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 76($fp) 	#Save obtained attribute in destination
	lw $t1, -8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 80($fp) 	#Save obtained attribute in destination
	sw $t3, 76($fp) 	#Value is string
	sw $t1, 80($fp) 	#Value is string
	sub $t6,  $t3, $t1 	#Minus
	sw $t6, 84($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 88($fp) 	#Save loaded value in destination
	sw $t5, 88($fp) 	#Value is string
	sw $t4, 84($fp) 	#Value is string
	sub $t1,  $t5, $t4 	#Minus
	sw $t1, 84($fp) 	#Save result of minus
	lw $t7, 84($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t5, 92($fp) 	#Mov comparisson value to register
	bgt $t0,  $t5, label_then_19 	#Compare values in registers and jump to label_then_19 if the second is greater than 0
	j label_else_19 	#Jump to label_else_19
label_then_19:
	la $t1, data_11_string 	#LOAD
	sw $t1, 96($fp) 	#Save loaded value in destination
	lw $t8, 96($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 100($fp) 	#Obtain value to assign
	sw $t8, 48($fp) 	#Assign value
	j label_continue_19 	#Jump to label_continue_19
label_else_19:
	lw $t0, -8($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 108($fp) 	#Save obtained attribute in destination
	li $t2, 1 	#Load Int
	sw $t2, 112($fp) 	#Save loaded value in destination
	lw $t5, 112($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 116($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 120($fp) 	#Save obtained attribute in destination
	sw $t2, 108($fp) 	#Value is string
	sw $t1, 120($fp) 	#Value is string
	sub $t0,  $t2, $t1 	#Minus
	sw $t0, 124($fp) 	#Save result of minus
	lw $t7, -4($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 128($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 124($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 128($fp) 	#get type dir for Dynamic Call
	lw $t0, 56($t6) 	#Get method of index 14
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 104($fp) 	#Obtain value to assign
	sw $t2, 48($fp) 	#Assign value
label_continue_19:
	lw $t8, 48($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
label_continue_18:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -132 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_neighbors:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 532 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -4($fp) 	#Typeof
	lw $t3, -4($t1) 	#
	sw $t3, 8($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, -8($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 8($fp) 	#get type dir for Dynamic Call
	lw $t9, 52($t4) 	#Get method of index 13
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 12($fp) 	#Save obtained attribute in destination
	la $t4, data_12_string 	#LOAD
	sw $t4, 16($fp) 	#Save loaded value in destination
	lw $t6, 16($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 20($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t2) 	#Load attribute in index 0
	sw $t9, 24($fp) 	#Save obtained attribute in destination
	sw $t8, 12($fp) 	#Value is string
	sw $t7, 24($fp) 	#Value is string
	sub $t2,  $t8, $t7 	#Minus
	sw $t2, 28($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 32($fp) 	#Save loaded value in destination
	sw $t5, 32($fp) 	#Value is string
	sw $t9, 28($fp) 	#Value is string
	sub $t2,  $t5, $t9 	#Minus
	sw $t2, 28($fp) 	#Save result of minus
	lw $t6, 28($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t9, 36($fp) 	#Mov comparisson value to register
	bgt $t5,  $t9, label_then_20 	#Compare values in registers and jump to label_then_20 if the second is greater than 0
	j label_else_20 	#Jump to label_else_20
label_then_20:
	li $t9, 1 	#Load Int
	sw $t9, 40($fp) 	#Save loaded value in destination
	lw $t3, 40($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 44($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_20 	#Jump to label_continue_20
label_else_20:
	li $t4, 0 	#Load Int
	sw $t4, 48($fp) 	#Save loaded value in destination
	lw $t1, 48($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 52($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
label_continue_20:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 56($fp) 	#Save obtained attribute in destination
	lw $t9, -4($fp) 	#Typeof
	lw $t5, -4($t9) 	#
	sw $t5, 68($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, -8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 68($fp) 	#get type dir for Dynamic Call
	lw $t3, 56($t4) 	#Get method of index 14
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 64($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 64($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 72($fp) 	#Save obtained attribute in destination
	la $t2, data_12_string 	#LOAD
	sw $t2, 76($fp) 	#Save loaded value in destination
	lw $t2, 76($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 80($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 84($fp) 	#Save obtained attribute in destination
	sw $t3, 72($fp) 	#Value is string
	sw $t9, 84($fp) 	#Value is string
	sub $t4,  $t3, $t9 	#Minus
	sw $t4, 88($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 92($fp) 	#Save loaded value in destination
	sw $t2, 92($fp) 	#Value is string
	sw $t0, 88($fp) 	#Value is string
	sub $t5,  $t2, $t0 	#Minus
	sw $t5, 88($fp) 	#Save result of minus
	lw $t0, 88($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t2, 96($fp) 	#Mov comparisson value to register
	bgt $t5,  $t2, label_then_21 	#Compare values in registers and jump to label_then_21 if the second is greater than 0
	j label_else_21 	#Jump to label_else_21
label_then_21:
	li $t8, 1 	#Load Int
	sw $t8, 100($fp) 	#Save loaded value in destination
	lw $t3, 100($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 104($fp) 	#Obtain value to assign
	sw $t0, 60($fp) 	#Assign value
	j label_continue_21 	#Jump to label_continue_21
label_else_21:
	li $t1, 0 	#Load Int
	sw $t1, 108($fp) 	#Save loaded value in destination
	lw $t8, 108($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 112($fp) 	#Obtain value to assign
	sw $t0, 60($fp) 	#Assign value
label_continue_21:
	lw $t3, 60($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t3) 	#Load attribute in index 0
	sw $t2, 116($fp) 	#Save obtained attribute in destination
	sw $t7, 56($fp) 	#Value is string
	sw $t3, 116($fp) 	#Value is string
	add $t1,  $t7, $t3 	#Plus
	sw $t1, 120($fp) 	#Save result of plus
	lw $t1, 120($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 124($fp) 	#Save obtained attribute in destination
	lw $t2, -4($fp) 	#Typeof
	lw $t4, -4($t2) 	#
	sw $t4, 136($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 136($fp) 	#get type dir for Dynamic Call
	lw $t3, 60($t9) 	#Get method of index 15
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 132($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 132($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 140($fp) 	#Save obtained attribute in destination
	la $t1, data_12_string 	#LOAD
	sw $t1, 144($fp) 	#Save loaded value in destination
	lw $t9, 144($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 148($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 152($fp) 	#Save obtained attribute in destination
	sw $t6, 140($fp) 	#Value is string
	sw $t5, 152($fp) 	#Value is string
	sub $t9,  $t6, $t5 	#Minus
	sw $t9, 156($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 160($fp) 	#Save loaded value in destination
	sw $t0, 160($fp) 	#Value is string
	sw $t6, 156($fp) 	#Value is string
	sub $t2,  $t0, $t6 	#Minus
	sw $t2, 156($fp) 	#Save result of minus
	lw $t7, 156($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 164($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t2, 164($fp) 	#Mov comparisson value to register
	bgt $t8,  $t2, label_then_22 	#Compare values in registers and jump to label_then_22 if the second is greater than 0
	j label_else_22 	#Jump to label_else_22
label_then_22:
	li $t7, 1 	#Load Int
	sw $t7, 168($fp) 	#Save loaded value in destination
	lw $t3, 168($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 172($fp) 	#Obtain value to assign
	sw $t1, 128($fp) 	#Assign value
	j label_continue_22 	#Jump to label_continue_22
label_else_22:
	li $t0, 0 	#Load Int
	sw $t0, 176($fp) 	#Save loaded value in destination
	lw $t4, 176($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 180($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 180($fp) 	#Obtain value to assign
	sw $t2, 128($fp) 	#Assign value
label_continue_22:
	lw $t4, 128($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t4) 	#Load attribute in index 0
	sw $t0, 184($fp) 	#Save obtained attribute in destination
	sw $t0, 124($fp) 	#Value is string
	sw $t7, 184($fp) 	#Value is string
	add $t2,  $t0, $t7 	#Plus
	sw $t2, 188($fp) 	#Save result of plus
	lw $t9, 188($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 192($fp) 	#Save obtained attribute in destination
	lw $t5, -4($fp) 	#Typeof
	lw $t1, -4($t5) 	#
	sw $t1, 204($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, -8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 204($fp) 	#get type dir for Dynamic Call
	lw $t7, 64($t5) 	#Get method of index 16
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 200($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 200($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 208($fp) 	#Save obtained attribute in destination
	la $t6, data_12_string 	#LOAD
	sw $t6, 212($fp) 	#Save loaded value in destination
	lw $t7, 212($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 216($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 220($fp) 	#Save obtained attribute in destination
	sw $t2, 208($fp) 	#Value is string
	sw $t8, 220($fp) 	#Value is string
	sub $t0,  $t2, $t8 	#Minus
	sw $t0, 224($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 228($fp) 	#Save loaded value in destination
	sw $t5, 228($fp) 	#Value is string
	sw $t4, 224($fp) 	#Value is string
	sub $t6,  $t5, $t4 	#Minus
	sw $t6, 224($fp) 	#Save result of minus
	lw $t1, 224($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t7, 232($fp) 	#Mov comparisson value to register
	bgt $t1,  $t7, label_then_23 	#Compare values in registers and jump to label_then_23 if the second is greater than 0
	j label_else_23 	#Jump to label_else_23
label_then_23:
	li $t2, 1 	#Load Int
	sw $t2, 236($fp) 	#Save loaded value in destination
	lw $t0, 236($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 240($fp) 	#Obtain value to assign
	sw $t2, 196($fp) 	#Assign value
	j label_continue_23 	#Jump to label_continue_23
label_else_23:
	li $t1, 0 	#Load Int
	sw $t1, 244($fp) 	#Save loaded value in destination
	lw $t1, 244($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 248($fp) 	#Obtain value to assign
	sw $t7, 196($fp) 	#Assign value
label_continue_23:
	lw $t0, 196($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t0) 	#Load attribute in index 0
	sw $t9, 252($fp) 	#Save obtained attribute in destination
	sw $t0, 192($fp) 	#Value is string
	sw $t5, 252($fp) 	#Value is string
	add $t9,  $t0, $t5 	#Plus
	sw $t9, 256($fp) 	#Save result of plus
	lw $t9, 256($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 260($fp) 	#Save obtained attribute in destination
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 272($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 272($fp) 	#get type dir for Dynamic Call
	lw $t3, 72($t4) 	#Get method of index 18
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 268($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, 268($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 276($fp) 	#Save obtained attribute in destination
	la $t0, data_12_string 	#LOAD
	sw $t0, 280($fp) 	#Save loaded value in destination
	lw $t0, 280($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 284($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 284($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t4) 	#Load attribute in index 0
	sw $t0, 288($fp) 	#Save obtained attribute in destination
	sw $t4, 276($fp) 	#Value is string
	sw $t1, 288($fp) 	#Value is string
	sub $t6,  $t4, $t1 	#Minus
	sw $t6, 292($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 296($fp) 	#Save loaded value in destination
	sw $t0, 296($fp) 	#Value is string
	sw $t2, 292($fp) 	#Value is string
	sub $t6,  $t0, $t2 	#Minus
	sw $t6, 292($fp) 	#Save result of minus
	lw $t3, 292($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t4, 300($fp) 	#Mov comparisson value to register
	bgt $t7,  $t4, label_then_24 	#Compare values in registers and jump to label_then_24 if the second is greater than 0
	j label_else_24 	#Jump to label_else_24
label_then_24:
	li $t7, 1 	#Load Int
	sw $t7, 304($fp) 	#Save loaded value in destination
	lw $t3, 304($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 308($fp) 	#Obtain value to assign
	sw $t3, 264($fp) 	#Assign value
	j label_continue_24 	#Jump to label_continue_24
label_else_24:
	li $t8, 0 	#Load Int
	sw $t8, 312($fp) 	#Save loaded value in destination
	lw $t8, 312($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 316($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 316($fp) 	#Obtain value to assign
	sw $t9, 264($fp) 	#Assign value
label_continue_24:
	lw $t8, 264($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 320($fp) 	#Save obtained attribute in destination
	sw $t3, 260($fp) 	#Value is string
	sw $t6, 320($fp) 	#Value is string
	add $t1,  $t3, $t6 	#Plus
	sw $t1, 324($fp) 	#Save result of plus
	lw $t1, 324($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 328($fp) 	#Save obtained attribute in destination
	lw $t4, -4($fp) 	#Typeof
	lw $t2, -4($t4) 	#
	sw $t2, 340($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, -8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 340($fp) 	#get type dir for Dynamic Call
	lw $t0, 68($t3) 	#Get method of index 17
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 336($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 336($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 344($fp) 	#Save obtained attribute in destination
	la $t2, data_12_string 	#LOAD
	sw $t2, 348($fp) 	#Save loaded value in destination
	lw $t9, 348($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 352($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 352($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 356($fp) 	#Save obtained attribute in destination
	sw $t7, 344($fp) 	#Value is string
	sw $t9, 356($fp) 	#Value is string
	sub $t6,  $t7, $t9 	#Minus
	sw $t6, 360($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 364($fp) 	#Save loaded value in destination
	sw $t5, 364($fp) 	#Value is string
	sw $t7, 360($fp) 	#Value is string
	sub $t8,  $t5, $t7 	#Minus
	sw $t8, 360($fp) 	#Save result of minus
	lw $t2, 360($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 368($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t6, 368($fp) 	#Mov comparisson value to register
	bgt $t4,  $t6, label_then_25 	#Compare values in registers and jump to label_then_25 if the second is greater than 0
	j label_else_25 	#Jump to label_else_25
label_then_25:
	li $t4, 1 	#Load Int
	sw $t4, 372($fp) 	#Save loaded value in destination
	lw $t2, 372($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 376($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 376($fp) 	#Obtain value to assign
	sw $t7, 332($fp) 	#Assign value
	j label_continue_25 	#Jump to label_continue_25
label_else_25:
	li $t4, 0 	#Load Int
	sw $t4, 380($fp) 	#Save loaded value in destination
	lw $t7, 380($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 384($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 384($fp) 	#Obtain value to assign
	sw $t0, 332($fp) 	#Assign value
label_continue_25:
	lw $t3, 332($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 388($fp) 	#Save obtained attribute in destination
	sw $t2, 328($fp) 	#Value is string
	sw $t4, 388($fp) 	#Value is string
	add $t1,  $t2, $t4 	#Plus
	sw $t1, 392($fp) 	#Save result of plus
	lw $t6, 392($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t6) 	#Load attribute in index 0
	sw $t7, 396($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Typeof
	lw $t5, -4($t3) 	#
	sw $t5, 408($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 408($fp) 	#get type dir for Dynamic Call
	lw $t7, 76($t1) 	#Get method of index 19
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 404($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 404($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 412($fp) 	#Save obtained attribute in destination
	la $t2, data_12_string 	#LOAD
	sw $t2, 416($fp) 	#Save loaded value in destination
	lw $t3, 416($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 420($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 420($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 424($fp) 	#Save obtained attribute in destination
	sw $t7, 412($fp) 	#Value is string
	sw $t9, 424($fp) 	#Value is string
	sub $t4,  $t7, $t9 	#Minus
	sw $t4, 428($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 432($fp) 	#Save loaded value in destination
	sw $t6, 432($fp) 	#Value is string
	sw $t8, 428($fp) 	#Value is string
	sub $t1,  $t6, $t8 	#Minus
	sw $t1, 428($fp) 	#Save result of minus
	lw $t2, 428($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 436($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t1, 436($fp) 	#Mov comparisson value to register
	bgt $t2,  $t1, label_then_26 	#Compare values in registers and jump to label_then_26 if the second is greater than 0
	j label_else_26 	#Jump to label_else_26
label_then_26:
	li $t3, 1 	#Load Int
	sw $t3, 440($fp) 	#Save loaded value in destination
	lw $t8, 440($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 444($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 444($fp) 	#Obtain value to assign
	sw $t9, 400($fp) 	#Assign value
	j label_continue_26 	#Jump to label_continue_26
label_else_26:
	li $t3, 0 	#Load Int
	sw $t3, 448($fp) 	#Save loaded value in destination
	lw $t6, 448($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 452($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 452($fp) 	#Obtain value to assign
	sw $t0, 400($fp) 	#Assign value
label_continue_26:
	lw $t1, 400($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 456($fp) 	#Save obtained attribute in destination
	sw $t4, 396($fp) 	#Value is string
	sw $t7, 456($fp) 	#Value is string
	add $t3,  $t4, $t7 	#Plus
	sw $t3, 460($fp) 	#Save result of plus
	lw $t6, 460($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t6) 	#Load attribute in index 0
	sw $t4, 464($fp) 	#Save obtained attribute in destination
	lw $t5, -4($fp) 	#Typeof
	lw $t3, -4($t5) 	#
	sw $t3, 476($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 476($fp) 	#get type dir for Dynamic Call
	lw $t3, 80($t8) 	#Get method of index 20
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 472($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 472($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t8) 	#Load attribute in index 0
	sw $t5, 480($fp) 	#Save obtained attribute in destination
	la $t4, data_12_string 	#LOAD
	sw $t4, 484($fp) 	#Save loaded value in destination
	lw $t9, 484($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 488($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 488($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t5) 	#Load attribute in index 0
	sw $t6, 492($fp) 	#Save obtained attribute in destination
	sw $t2, 480($fp) 	#Value is string
	sw $t0, 492($fp) 	#Value is string
	sub $t7,  $t2, $t0 	#Minus
	sw $t7, 496($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 500($fp) 	#Save loaded value in destination
	sw $t5, 500($fp) 	#Value is string
	sw $t4, 496($fp) 	#Value is string
	sub $t1,  $t5, $t4 	#Minus
	sw $t1, 496($fp) 	#Save result of minus
	lw $t4, 496($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 504($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t8, 0 	#Move 0 to register for comparisson
	lw $t0, 504($fp) 	#Mov comparisson value to register
	bgt $t8,  $t0, label_then_27 	#Compare values in registers and jump to label_then_27 if the second is greater than 0
	j label_else_27 	#Jump to label_else_27
label_then_27:
	li $t4, 1 	#Load Int
	sw $t4, 508($fp) 	#Save loaded value in destination
	lw $t0, 508($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 512($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 512($fp) 	#Obtain value to assign
	sw $t1, 468($fp) 	#Assign value
	j label_continue_27 	#Jump to label_continue_27
label_else_27:
	li $t5, 0 	#Load Int
	sw $t5, 516($fp) 	#Save loaded value in destination
	lw $t7, 516($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 520($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 520($fp) 	#Obtain value to assign
	sw $t6, 468($fp) 	#Assign value
label_continue_27:
	lw $t5, 468($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 524($fp) 	#Save obtained attribute in destination
	sw $t3, 464($fp) 	#Value is string
	sw $t7, 524($fp) 	#Value is string
	add $t2,  $t3, $t7 	#Plus
	sw $t2, 528($fp) 	#Save result of plus
	lw $t6, 528($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -532 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_cell_at_next_evolution:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 152 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -4($fp) 	#Typeof
	lw $t9, -4($t0) 	#
	sw $t9, 8($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 8($fp) 	#get type dir for Dynamic Call
	lw $t7, 84($t4) 	#Get method of index 21
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 12($fp) 	#Save obtained attribute in destination
	li $t7, 3 	#Load Int
	sw $t7, 16($fp) 	#Save loaded value in destination
	lw $t3, 16($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 20($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 24($fp) 	#Save obtained attribute in destination
	sw $t2, 12($fp) 	#Value is string
	sw $t0, 24($fp) 	#Value is string
	sub $t5,  $t2, $t0 	#Minus
	sw $t5, 28($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 32($fp) 	#Save loaded value in destination
	sw $t6, 32($fp) 	#Value is string
	sw $t4, 28($fp) 	#Value is string
	sub $t2,  $t6, $t4 	#Minus
	sw $t2, 28($fp) 	#Save result of minus
	lw $t8, 28($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t5, 36($fp) 	#Mov comparisson value to register
	bgt $t6,  $t5, label_then_28 	#Compare values in registers and jump to label_then_28 if the second is greater than 0
	j label_else_28 	#Jump to label_else_28
label_then_28:
	la $t2, data_12_string 	#LOAD
	sw $t2, 40($fp) 	#Save loaded value in destination
	lw $t7, 40($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 44($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	j label_continue_28 	#Jump to label_continue_28
label_else_28:
	lw $t5, -4($fp) 	#Typeof
	lw $t3, -4($t5) 	#
	sw $t3, 56($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, -8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 56($fp) 	#get type dir for Dynamic Call
	lw $t7, 84($t1) 	#Get method of index 21
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t8, 52($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 60($fp) 	#Save obtained attribute in destination
	li $t5, 2 	#Load Int
	sw $t5, 64($fp) 	#Save loaded value in destination
	lw $t5, 64($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 68($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 72($fp) 	#Save obtained attribute in destination
	sw $t8, 60($fp) 	#Value is string
	sw $t1, 72($fp) 	#Value is string
	sub $t9,  $t8, $t1 	#Minus
	sw $t9, 76($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 80($fp) 	#Save loaded value in destination
	sw $t3, 80($fp) 	#Value is string
	sw $t6, 76($fp) 	#Value is string
	sub $t8,  $t3, $t6 	#Minus
	sw $t8, 76($fp) 	#Save result of minus
	lw $t6, 76($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t4, 84($fp) 	#Mov comparisson value to register
	bgt $t9,  $t4, label_then_29 	#Compare values in registers and jump to label_then_29 if the second is greater than 0
	j label_else_29 	#Jump to label_else_29
label_then_29:
	lw $t7, -4($fp) 	#Typeof
	lw $t1, -4($t7) 	#
	sw $t1, 96($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, -8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 96($fp) 	#get type dir for Dynamic Call
	lw $t4, 48($t3) 	#Get method of index 12
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 92($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 92($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 100($fp) 	#Save obtained attribute in destination
	la $t1, data_12_string 	#LOAD
	sw $t1, 104($fp) 	#Save loaded value in destination
	lw $t9, 104($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 108($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t4) 	#Load attribute in index 0
	sw $t0, 112($fp) 	#Save obtained attribute in destination
	sw $t5, 100($fp) 	#Value is string
	sw $t8, 112($fp) 	#Value is string
	sub $t4,  $t5, $t8 	#Minus
	sw $t4, 116($fp) 	#Save result of minus
	li $t7, 1 	#Load Int
	sw $t7, 120($fp) 	#Save loaded value in destination
	sw $t3, 120($fp) 	#Value is string
	sw $t8, 116($fp) 	#Value is string
	sub $t7,  $t3, $t8 	#Minus
	sw $t7, 116($fp) 	#Save result of minus
	lw $t9, 116($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t3, 124($fp) 	#Mov comparisson value to register
	bgt $t0,  $t3, label_then_30 	#Compare values in registers and jump to label_then_30 if the second is greater than 0
	j label_else_30 	#Jump to label_else_30
label_then_30:
	la $t3, data_12_string 	#LOAD
	sw $t3, 128($fp) 	#Save loaded value in destination
	lw $t2, 128($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 132($fp) 	#Obtain value to assign
	sw $t3, 88($fp) 	#Assign value
	j label_continue_30 	#Jump to label_continue_30
label_else_30:
	la $t3, data_13_string 	#LOAD
	sw $t3, 136($fp) 	#Save loaded value in destination
	lw $t4, 136($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 140($fp) 	#Obtain value to assign
	sw $t4, 88($fp) 	#Assign value
label_continue_30:
	lw $t1, 88($fp) 	#Obtain value to assign
	sw $t1, 48($fp) 	#Assign value
	j label_continue_29 	#Jump to label_continue_29
label_else_29:
	la $t8, data_13_string 	#LOAD
	sw $t8, 144($fp) 	#Save loaded value in destination
	lw $t6, 144($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 148($fp) 	#Obtain value to assign
	sw $t9, 48($fp) 	#Assign value
label_continue_29:
	lw $t8, 48($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
label_continue_28:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -152 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_evolve:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 88 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t3, 0 	#Load Int
	sw $t3, 4($fp) 	#Save loaded value in destination
	lw $t5, 4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 8($fp) 	#Obtain value to assign
	sw $t6, 0($fp) 	#Assign value
	lw $t7, -4($fp) 	#Typeof
	lw $t8, -4($t7) 	#
	sw $t8, 20($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 20($fp) 	#get type dir for Dynamic Call
	lw $t8, 44($t4) 	#Get method of index 11
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, 16($fp) 	#Obtain value to assign
	sw $t8, 12($fp) 	#Assign value
	la $t9, data_9_default_str 	#LOAD
	sw $t9, 28($fp) 	#Save loaded value in destination
	lw $t5, 28($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
label_while_label_1:
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 32($fp) 	#Save obtained attribute in destination
	lw $t3, 12($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 36($fp) 	#Save obtained attribute in destination
	sw $t7, 36($fp) 	#Value is string
	sw $t3, 32($fp) 	#Value is string
	sub $t1,  $t7, $t3 	#Minus
	sw $t1, 40($fp) 	#Save result of minus
	lw $t8, 40($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t9, 0 	#Move 0 to register for comparisson
	lw $t6, 44($fp) 	#Mov comparisson value to register
	bgt $t9,  $t6, label_loop_label_1 	#Compare values in registers and jump to label_loop_label_1 if the second is greater than 0
	j label_pool_label_1 	#Jump to label_pool_label_1
label_loop_label_1:
	lw $t5, -4($fp) 	#Typeof
	lw $t4, -4($t5) 	#
	sw $t4, 56($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 56($fp) 	#get type dir for Dynamic Call
	lw $t7, 88($t2) 	#Get method of index 22
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 24($fp) 	#Typeof
	lw $t2, -4($t1) 	#
	sw $t2, 60($fp) 	#Save type value in destination
	lw $t7, 24($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 52($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 60($fp) 	#get type dir for Dynamic Call
	lw $t7, 16($t9) 	#Get method of index 4
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 48($fp) 	#Obtain value to assign
	sw $t0, 24($fp) 	#Assign value
	lw $t5, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 64($fp) 	#Save obtained attribute in destination
	li $t6, 1 	#Load Int
	sw $t6, 68($fp) 	#Save loaded value in destination
	lw $t4, 68($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 72($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t9) 	#Load attribute in index 0
	sw $t6, 76($fp) 	#Save obtained attribute in destination
	sw $t9, 64($fp) 	#Value is string
	sw $t8, 76($fp) 	#Value is string
	add $t2,  $t9, $t8 	#Plus
	sw $t2, 80($fp) 	#Save result of plus
	lw $t0, 80($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	j label_while_label_1 	#Jump to label_while_label_1
label_pool_label_1:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 84($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 24($fp) 	#Obtain value from source dir
	lw $t0, -4($fp) 	#Dir of instance of attribute to set
	sw $t1, 12($t0) 	#Save value in attribute of index 3
	lw $t7, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -88 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_option:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 1248 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t8, 0 	#Load Int
	sw $t8, 4($fp) 	#Save loaded value in destination
	lw $t6, 4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_14_string 	#LOAD
	sw $t9, 12($fp) 	#Save loaded value in destination
	lw $t1, 12($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t0, -4($t9) 	#
	sw $t0, 20($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 16($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 20($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t2) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_15_string 	#LOAD
	sw $t1, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t0, -4($t7) 	#
	sw $t0, 36($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 36($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t2) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_16_string 	#LOAD
	sw $t8, 44($fp) 	#Save loaded value in destination
	lw $t9, 44($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t1, -4($t8) 	#
	sw $t1, 52($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 48($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 52($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t8) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_17_string 	#LOAD
	sw $t6, 60($fp) 	#Save loaded value in destination
	lw $t9, 60($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t6, -4($t8) 	#
	sw $t6, 68($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 64($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 68($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t5) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 56($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_18_string 	#LOAD
	sw $t6, 76($fp) 	#Save loaded value in destination
	lw $t4, 76($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t9, -4($t8) 	#
	sw $t9, 84($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 80($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 84($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t8) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 72($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_19_string 	#LOAD
	sw $t6, 92($fp) 	#Save loaded value in destination
	lw $t5, 92($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 96($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t7, -4($t0) 	#
	sw $t7, 100($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 96($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 100($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t6) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 88($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t3, data_20_string 	#LOAD
	sw $t3, 108($fp) 	#Save loaded value in destination
	lw $t3, 108($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t7, -4($t6) 	#
	sw $t7, 116($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 112($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 116($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t0) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t3, data_21_string 	#LOAD
	sw $t3, 124($fp) 	#Save loaded value in destination
	lw $t1, 124($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t4, -4($t3) 	#
	sw $t4, 132($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 128($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 132($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t2) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 120($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t4, data_22_string 	#LOAD
	sw $t4, 140($fp) 	#Save loaded value in destination
	lw $t5, 140($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 148($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 144($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 148($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t0) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 136($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_23_string 	#LOAD
	sw $t5, 156($fp) 	#Save loaded value in destination
	lw $t9, 156($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t2, -4($t0) 	#
	sw $t2, 164($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 160($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 164($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t0) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 152($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t4, data_24_string 	#LOAD
	sw $t4, 172($fp) 	#Save loaded value in destination
	lw $t7, 172($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 180($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 176($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 180($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t1) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 168($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_25_string 	#LOAD
	sw $t1, 188($fp) 	#Save loaded value in destination
	lw $t1, 188($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 192($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 196($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 192($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 196($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t9) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 184($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t9, data_26_string 	#LOAD
	sw $t9, 204($fp) 	#Save loaded value in destination
	lw $t2, 204($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t6, -4($t1) 	#
	sw $t6, 212($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 208($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 212($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t7) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 200($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_27_string 	#LOAD
	sw $t5, 220($fp) 	#Save loaded value in destination
	lw $t6, 220($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 224($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t4, -4($t8) 	#
	sw $t4, 228($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 224($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 228($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t3) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 216($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_28_string 	#LOAD
	sw $t2, 236($fp) 	#Save loaded value in destination
	lw $t8, 236($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 240($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t0, -4($t3) 	#
	sw $t0, 244($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 240($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 244($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t6) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 232($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_29_string 	#LOAD
	sw $t1, 252($fp) 	#Save loaded value in destination
	lw $t9, 252($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 256($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t5, -4($t0) 	#
	sw $t5, 260($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 256($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 260($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t8) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 248($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_30_string 	#LOAD
	sw $t8, 268($fp) 	#Save loaded value in destination
	lw $t8, 268($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 272($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t0, -4($t8) 	#
	sw $t0, 276($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 272($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 276($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t0) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 264($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t4, data_31_string 	#LOAD
	sw $t4, 284($fp) 	#Save loaded value in destination
	lw $t6, 284($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 288($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 292($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 288($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 292($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t5) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 280($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_32_string 	#LOAD
	sw $t8, 300($fp) 	#Save loaded value in destination
	lw $t4, 300($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 304($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t1, -4($t3) 	#
	sw $t1, 308($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 304($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 308($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t3) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 296($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t1, data_33_string 	#LOAD
	sw $t1, 316($fp) 	#Save loaded value in destination
	lw $t5, 316($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 320($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 324($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 320($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 324($fp) 	#get type dir for Dynamic Call
	lw $t6, 12($t9) 	#Get method of index 3
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 312($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t7, data_34_string 	#LOAD
	sw $t7, 332($fp) 	#Save loaded value in destination
	lw $t9, 332($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 336($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t7, -4($t4) 	#
	sw $t7, 340($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 336($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 340($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t1) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 328($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t7, data_35_string 	#LOAD
	sw $t7, 348($fp) 	#Save loaded value in destination
	lw $t7, 348($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 352($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t1, -4($t5) 	#
	sw $t1, 356($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 352($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 356($fp) 	#get type dir for Dynamic Call
	lw $t1, 12($t7) 	#Get method of index 3
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 344($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_36_string 	#LOAD
	sw $t5, 364($fp) 	#Save loaded value in destination
	lw $t7, 364($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 368($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, -4($fp) 	#Typeof
	lw $t1, -4($t5) 	#
	sw $t1, 372($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 368($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 372($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t1) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 360($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, -4($fp) 	#Typeof
	lw $t3, -4($t9) 	#
	sw $t3, 380($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 380($fp) 	#get type dir for Dynamic Call
	lw $t5, 24($t8) 	#Get method of index 6
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 376($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t2, 376($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	la $t6, data_10_string 	#LOAD
	sw $t6, 388($fp) 	#Save loaded value in destination
	lw $t8, 388($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 392($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t3, -4($t0) 	#
	sw $t3, 396($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 392($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 396($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t9) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 384($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t4) 	#Load attribute in index 0
	sw $t0, 404($fp) 	#Save obtained attribute in destination
	li $t9, 1 	#Load Int
	sw $t9, 408($fp) 	#Save loaded value in destination
	lw $t8, 408($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 412($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 412($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 416($fp) 	#Save obtained attribute in destination
	sw $t4, 404($fp) 	#Value is string
	sw $t3, 416($fp) 	#Value is string
	sub $t0,  $t4, $t3 	#Minus
	sw $t0, 420($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 424($fp) 	#Save loaded value in destination
	sw $t0, 424($fp) 	#Value is string
	sw $t4, 420($fp) 	#Value is string
	sub $t5,  $t0, $t4 	#Minus
	sw $t5, 420($fp) 	#Save result of minus
	lw $t0, 420($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 428($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t9, 428($fp) 	#Mov comparisson value to register
	bgt $t5,  $t9, label_then_31 	#Compare values in registers and jump to label_then_31 if the second is greater than 0
	j label_else_31 	#Jump to label_else_31
label_then_31:
	la $t7, data_37_string 	#LOAD
	sw $t7, 432($fp) 	#Save loaded value in destination
	lw $t8, 432($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 436($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 436($fp) 	#Obtain value to assign
	sw $t5, 400($fp) 	#Assign value
	j label_continue_31 	#Jump to label_continue_31
label_else_31:
	lw $t3, 0($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t3) 	#Load attribute in index 0
	sw $t2, 444($fp) 	#Save obtained attribute in destination
	li $t5, 2 	#Load Int
	sw $t5, 448($fp) 	#Save loaded value in destination
	lw $t9, 448($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 452($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 452($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 456($fp) 	#Save obtained attribute in destination
	sw $t6, 444($fp) 	#Value is string
	sw $t2, 456($fp) 	#Value is string
	sub $t9,  $t6, $t2 	#Minus
	sw $t9, 460($fp) 	#Save result of minus
	li $t4, 1 	#Load Int
	sw $t4, 464($fp) 	#Save loaded value in destination
	sw $t1, 464($fp) 	#Value is string
	sw $t3, 460($fp) 	#Value is string
	sub $t4,  $t1, $t3 	#Minus
	sw $t4, 460($fp) 	#Save result of minus
	lw $t8, 460($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 468($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t7, 468($fp) 	#Mov comparisson value to register
	bgt $t3,  $t7, label_then_32 	#Compare values in registers and jump to label_then_32 if the second is greater than 0
	j label_else_32 	#Jump to label_else_32
label_then_32:
	la $t7, data_38_string 	#LOAD
	sw $t7, 472($fp) 	#Save loaded value in destination
	lw $t1, 472($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 476($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 476($fp) 	#Obtain value to assign
	sw $t0, 440($fp) 	#Assign value
	j label_continue_32 	#Jump to label_continue_32
label_else_32:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t4) 	#Load attribute in index 0
	sw $t8, 484($fp) 	#Save obtained attribute in destination
	li $t3, 3 	#Load Int
	sw $t3, 488($fp) 	#Save loaded value in destination
	lw $t8, 488($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 492($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 492($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t0) 	#Load attribute in index 0
	sw $t6, 496($fp) 	#Save obtained attribute in destination
	sw $t3, 484($fp) 	#Value is string
	sw $t0, 496($fp) 	#Value is string
	sub $t8,  $t3, $t0 	#Minus
	sw $t8, 500($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 504($fp) 	#Save loaded value in destination
	sw $t5, 504($fp) 	#Value is string
	sw $t2, 500($fp) 	#Value is string
	sub $t7,  $t5, $t2 	#Minus
	sw $t7, 500($fp) 	#Save result of minus
	lw $t2, 500($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 508($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t3, 508($fp) 	#Mov comparisson value to register
	bgt $t5,  $t3, label_then_33 	#Compare values in registers and jump to label_then_33 if the second is greater than 0
	j label_else_33 	#Jump to label_else_33
label_then_33:
	la $t3, data_39_string 	#LOAD
	sw $t3, 512($fp) 	#Save loaded value in destination
	lw $t0, 512($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 516($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 516($fp) 	#Obtain value to assign
	sw $t1, 480($fp) 	#Assign value
	j label_continue_33 	#Jump to label_continue_33
label_else_33:
	lw $t9, 0($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 524($fp) 	#Save obtained attribute in destination
	li $t7, 4 	#Load Int
	sw $t7, 528($fp) 	#Save loaded value in destination
	lw $t5, 528($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 532($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 532($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t3) 	#Load attribute in index 0
	sw $t2, 536($fp) 	#Save obtained attribute in destination
	sw $t2, 524($fp) 	#Value is string
	sw $t7, 536($fp) 	#Value is string
	sub $t5,  $t2, $t7 	#Minus
	sw $t5, 540($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 544($fp) 	#Save loaded value in destination
	sw $t8, 544($fp) 	#Value is string
	sw $t3, 540($fp) 	#Value is string
	sub $t9,  $t8, $t3 	#Minus
	sw $t9, 540($fp) 	#Save result of minus
	lw $t9, 540($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 548($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t5, 548($fp) 	#Mov comparisson value to register
	bgt $t0,  $t5, label_then_34 	#Compare values in registers and jump to label_then_34 if the second is greater than 0
	j label_else_34 	#Jump to label_else_34
label_then_34:
	la $t1, data_40_string 	#LOAD
	sw $t1, 552($fp) 	#Save loaded value in destination
	lw $t1, 552($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 556($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 556($fp) 	#Obtain value to assign
	sw $t2, 520($fp) 	#Assign value
	j label_continue_34 	#Jump to label_continue_34
label_else_34:
	lw $t1, 0($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t1) 	#Load attribute in index 0
	sw $t4, 564($fp) 	#Save obtained attribute in destination
	li $t2, 5 	#Load Int
	sw $t2, 568($fp) 	#Save loaded value in destination
	lw $t6, 568($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 572($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 572($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t2) 	#Load attribute in index 0
	sw $t4, 576($fp) 	#Save obtained attribute in destination
	sw $t4, 564($fp) 	#Value is string
	sw $t9, 576($fp) 	#Value is string
	sub $t6,  $t4, $t9 	#Minus
	sw $t6, 580($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 584($fp) 	#Save loaded value in destination
	sw $t3, 584($fp) 	#Value is string
	sw $t6, 580($fp) 	#Value is string
	sub $t7,  $t3, $t6 	#Minus
	sw $t7, 580($fp) 	#Save result of minus
	lw $t3, 580($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 588($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t8, 588($fp) 	#Mov comparisson value to register
	bgt $t1,  $t8, label_then_35 	#Compare values in registers and jump to label_then_35 if the second is greater than 0
	j label_else_35 	#Jump to label_else_35
label_then_35:
	la $t9, data_41_string 	#LOAD
	sw $t9, 592($fp) 	#Save loaded value in destination
	lw $t7, 592($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 596($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 596($fp) 	#Obtain value to assign
	sw $t7, 560($fp) 	#Assign value
	j label_continue_35 	#Jump to label_continue_35
label_else_35:
	lw $t0, 0($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t0) 	#Load attribute in index 0
	sw $t1, 604($fp) 	#Save obtained attribute in destination
	li $t6, 6 	#Load Int
	sw $t6, 608($fp) 	#Save loaded value in destination
	lw $t2, 608($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 612($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 612($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 616($fp) 	#Save obtained attribute in destination
	sw $t0, 604($fp) 	#Value is string
	sw $t9, 616($fp) 	#Value is string
	sub $t6,  $t0, $t9 	#Minus
	sw $t6, 620($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 624($fp) 	#Save loaded value in destination
	sw $t2, 624($fp) 	#Value is string
	sw $t5, 620($fp) 	#Value is string
	sub $t9,  $t2, $t5 	#Minus
	sw $t9, 620($fp) 	#Save result of minus
	lw $t6, 620($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 628($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t7, 628($fp) 	#Mov comparisson value to register
	bgt $t1,  $t7, label_then_36 	#Compare values in registers and jump to label_then_36 if the second is greater than 0
	j label_else_36 	#Jump to label_else_36
label_then_36:
	la $t7, data_42_string 	#LOAD
	sw $t7, 632($fp) 	#Save loaded value in destination
	lw $t2, 632($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 636($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 636($fp) 	#Obtain value to assign
	sw $t5, 600($fp) 	#Assign value
	j label_continue_36 	#Jump to label_continue_36
label_else_36:
	lw $t3, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 644($fp) 	#Save obtained attribute in destination
	li $t6, 7 	#Load Int
	sw $t6, 648($fp) 	#Save loaded value in destination
	lw $t7, 648($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 652($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 652($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 656($fp) 	#Save obtained attribute in destination
	sw $t4, 644($fp) 	#Value is string
	sw $t6, 656($fp) 	#Value is string
	sub $t7,  $t4, $t6 	#Minus
	sw $t7, 660($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 664($fp) 	#Save loaded value in destination
	sw $t9, 664($fp) 	#Value is string
	sw $t6, 660($fp) 	#Value is string
	sub $t8,  $t9, $t6 	#Minus
	sw $t8, 660($fp) 	#Save result of minus
	lw $t1, 660($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 668($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t0, 668($fp) 	#Mov comparisson value to register
	bgt $t4,  $t0, label_then_37 	#Compare values in registers and jump to label_then_37 if the second is greater than 0
	j label_else_37 	#Jump to label_else_37
label_then_37:
	la $t4, data_43_string 	#LOAD
	sw $t4, 672($fp) 	#Save loaded value in destination
	lw $t9, 672($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 676($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 676($fp) 	#Obtain value to assign
	sw $t9, 640($fp) 	#Assign value
	j label_continue_37 	#Jump to label_continue_37
label_else_37:
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 684($fp) 	#Save obtained attribute in destination
	li $t2, 8 	#Load Int
	sw $t2, 688($fp) 	#Save loaded value in destination
	lw $t0, 688($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 692($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 692($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 696($fp) 	#Save obtained attribute in destination
	sw $t8, 684($fp) 	#Value is string
	sw $t5, 696($fp) 	#Value is string
	sub $t6,  $t8, $t5 	#Minus
	sw $t6, 700($fp) 	#Save result of minus
	li $t8, 1 	#Load Int
	sw $t8, 704($fp) 	#Save loaded value in destination
	sw $t5, 704($fp) 	#Value is string
	sw $t1, 700($fp) 	#Value is string
	sub $t2,  $t5, $t1 	#Minus
	sw $t2, 700($fp) 	#Save result of minus
	lw $t2, 700($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 708($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t1, 708($fp) 	#Mov comparisson value to register
	bgt $t4,  $t1, label_then_38 	#Compare values in registers and jump to label_then_38 if the second is greater than 0
	j label_else_38 	#Jump to label_else_38
label_then_38:
	la $t0, data_44_string 	#LOAD
	sw $t0, 712($fp) 	#Save loaded value in destination
	lw $t3, 712($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 716($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 716($fp) 	#Obtain value to assign
	sw $t8, 680($fp) 	#Assign value
	j label_continue_38 	#Jump to label_continue_38
label_else_38:
	lw $t6, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t6) 	#Load attribute in index 0
	sw $t0, 724($fp) 	#Save obtained attribute in destination
	li $t0, 9 	#Load Int
	sw $t0, 728($fp) 	#Save loaded value in destination
	lw $t4, 728($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 732($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 732($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 736($fp) 	#Save obtained attribute in destination
	sw $t4, 724($fp) 	#Value is string
	sw $t1, 736($fp) 	#Value is string
	sub $t9,  $t4, $t1 	#Minus
	sw $t9, 740($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 744($fp) 	#Save loaded value in destination
	sw $t8, 744($fp) 	#Value is string
	sw $t0, 740($fp) 	#Value is string
	sub $t7,  $t8, $t0 	#Minus
	sw $t7, 740($fp) 	#Save result of minus
	lw $t8, 740($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 748($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t9, 748($fp) 	#Mov comparisson value to register
	bgt $t3,  $t9, label_then_39 	#Compare values in registers and jump to label_then_39 if the second is greater than 0
	j label_else_39 	#Jump to label_else_39
label_then_39:
	la $t0, data_45_string 	#LOAD
	sw $t0, 752($fp) 	#Save loaded value in destination
	lw $t7, 752($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 756($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 756($fp) 	#Obtain value to assign
	sw $t6, 720($fp) 	#Assign value
	j label_continue_39 	#Jump to label_continue_39
label_else_39:
	lw $t2, 0($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 764($fp) 	#Save obtained attribute in destination
	li $t7, 10 	#Load Int
	sw $t7, 768($fp) 	#Save loaded value in destination
	lw $t7, 768($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 772($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 772($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 776($fp) 	#Save obtained attribute in destination
	sw $t7, 764($fp) 	#Value is string
	sw $t8, 776($fp) 	#Value is string
	sub $t6,  $t7, $t8 	#Minus
	sw $t6, 780($fp) 	#Save result of minus
	li $t7, 1 	#Load Int
	sw $t7, 784($fp) 	#Save loaded value in destination
	sw $t3, 784($fp) 	#Value is string
	sw $t9, 780($fp) 	#Value is string
	sub $t6,  $t3, $t9 	#Minus
	sw $t6, 780($fp) 	#Save result of minus
	lw $t5, 780($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 788($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t8, 788($fp) 	#Mov comparisson value to register
	bgt $t3,  $t8, label_then_40 	#Compare values in registers and jump to label_then_40 if the second is greater than 0
	j label_else_40 	#Jump to label_else_40
label_then_40:
	la $t1, data_46_string 	#LOAD
	sw $t1, 792($fp) 	#Save loaded value in destination
	lw $t9, 792($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 796($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 796($fp) 	#Obtain value to assign
	sw $t1, 760($fp) 	#Assign value
	j label_continue_40 	#Jump to label_continue_40
label_else_40:
	lw $t5, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 804($fp) 	#Save obtained attribute in destination
	li $t3, 11 	#Load Int
	sw $t3, 808($fp) 	#Save loaded value in destination
	lw $t2, 808($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 812($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 812($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t7) 	#Load attribute in index 0
	sw $t1, 816($fp) 	#Save obtained attribute in destination
	sw $t5, 804($fp) 	#Value is string
	sw $t4, 816($fp) 	#Value is string
	sub $t9,  $t5, $t4 	#Minus
	sw $t9, 820($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 824($fp) 	#Save loaded value in destination
	sw $t2, 824($fp) 	#Value is string
	sw $t9, 820($fp) 	#Value is string
	sub $t0,  $t2, $t9 	#Minus
	sw $t0, 820($fp) 	#Save result of minus
	lw $t1, 820($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 828($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t2, 0 	#Move 0 to register for comparisson
	lw $t7, 828($fp) 	#Mov comparisson value to register
	bgt $t2,  $t7, label_then_41 	#Compare values in registers and jump to label_then_41 if the second is greater than 0
	j label_else_41 	#Jump to label_else_41
label_then_41:
	la $t3, data_47_string 	#LOAD
	sw $t3, 832($fp) 	#Save loaded value in destination
	lw $t2, 832($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 836($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 836($fp) 	#Obtain value to assign
	sw $t7, 800($fp) 	#Assign value
	j label_continue_41 	#Jump to label_continue_41
label_else_41:
	lw $t5, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t5) 	#Load attribute in index 0
	sw $t8, 844($fp) 	#Save obtained attribute in destination
	li $t9, 12 	#Load Int
	sw $t9, 848($fp) 	#Save loaded value in destination
	lw $t1, 848($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 852($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 852($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 856($fp) 	#Save obtained attribute in destination
	sw $t1, 844($fp) 	#Value is string
	sw $t3, 856($fp) 	#Value is string
	sub $t8,  $t1, $t3 	#Minus
	sw $t8, 860($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 864($fp) 	#Save loaded value in destination
	sw $t1, 864($fp) 	#Value is string
	sw $t0, 860($fp) 	#Value is string
	sub $t7,  $t1, $t0 	#Minus
	sw $t7, 860($fp) 	#Save result of minus
	lw $t4, 860($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 868($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t7, 868($fp) 	#Mov comparisson value to register
	bgt $t5,  $t7, label_then_42 	#Compare values in registers and jump to label_then_42 if the second is greater than 0
	j label_else_42 	#Jump to label_else_42
label_then_42:
	la $t0, data_48_string 	#LOAD
	sw $t0, 872($fp) 	#Save loaded value in destination
	lw $t6, 872($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 876($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 876($fp) 	#Obtain value to assign
	sw $t4, 840($fp) 	#Assign value
	j label_continue_42 	#Jump to label_continue_42
label_else_42:
	lw $t8, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 884($fp) 	#Save obtained attribute in destination
	li $t0, 13 	#Load Int
	sw $t0, 888($fp) 	#Save loaded value in destination
	lw $t9, 888($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 892($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 892($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t5) 	#Load attribute in index 0
	sw $t4, 896($fp) 	#Save obtained attribute in destination
	sw $t3, 884($fp) 	#Value is string
	sw $t8, 896($fp) 	#Value is string
	sub $t6,  $t3, $t8 	#Minus
	sw $t6, 900($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 904($fp) 	#Save loaded value in destination
	sw $t0, 904($fp) 	#Value is string
	sw $t1, 900($fp) 	#Value is string
	sub $t7,  $t0, $t1 	#Minus
	sw $t7, 900($fp) 	#Save result of minus
	lw $t1, 900($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 908($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t0, 908($fp) 	#Mov comparisson value to register
	bgt $t4,  $t0, label_then_43 	#Compare values in registers and jump to label_then_43 if the second is greater than 0
	j label_else_43 	#Jump to label_else_43
label_then_43:
	la $t4, data_49_string 	#LOAD
	sw $t4, 912($fp) 	#Save loaded value in destination
	lw $t9, 912($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 916($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 916($fp) 	#Obtain value to assign
	sw $t2, 880($fp) 	#Assign value
	j label_continue_43 	#Jump to label_continue_43
label_else_43:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 924($fp) 	#Save obtained attribute in destination
	li $t3, 14 	#Load Int
	sw $t3, 928($fp) 	#Save loaded value in destination
	lw $t8, 928($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 932($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 932($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t4) 	#Load attribute in index 0
	sw $t0, 936($fp) 	#Save obtained attribute in destination
	sw $t5, 924($fp) 	#Value is string
	sw $t8, 936($fp) 	#Value is string
	sub $t2,  $t5, $t8 	#Minus
	sw $t2, 940($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 944($fp) 	#Save loaded value in destination
	sw $t1, 944($fp) 	#Value is string
	sw $t6, 940($fp) 	#Value is string
	sub $t4,  $t1, $t6 	#Minus
	sw $t4, 940($fp) 	#Save result of minus
	lw $t0, 940($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 948($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t2, 948($fp) 	#Mov comparisson value to register
	bgt $t7,  $t2, label_then_44 	#Compare values in registers and jump to label_then_44 if the second is greater than 0
	j label_else_44 	#Jump to label_else_44
label_then_44:
	la $t2, data_50_string 	#LOAD
	sw $t2, 952($fp) 	#Save loaded value in destination
	lw $t3, 952($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 956($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 956($fp) 	#Obtain value to assign
	sw $t9, 920($fp) 	#Assign value
	j label_continue_44 	#Jump to label_continue_44
label_else_44:
	lw $t0, 0($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t0) 	#Load attribute in index 0
	sw $t4, 964($fp) 	#Save obtained attribute in destination
	li $t7, 15 	#Load Int
	sw $t7, 968($fp) 	#Save loaded value in destination
	lw $t9, 968($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 972($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 972($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 976($fp) 	#Save obtained attribute in destination
	sw $t1, 964($fp) 	#Value is string
	sw $t0, 976($fp) 	#Value is string
	sub $t4,  $t1, $t0 	#Minus
	sw $t4, 980($fp) 	#Save result of minus
	li $t7, 1 	#Load Int
	sw $t7, 984($fp) 	#Save loaded value in destination
	sw $t1, 984($fp) 	#Value is string
	sw $t3, 980($fp) 	#Value is string
	sub $t2,  $t1, $t3 	#Minus
	sw $t2, 980($fp) 	#Save result of minus
	lw $t6, 980($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 988($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t8, 988($fp) 	#Mov comparisson value to register
	bgt $t4,  $t8, label_then_45 	#Compare values in registers and jump to label_then_45 if the second is greater than 0
	j label_else_45 	#Jump to label_else_45
label_then_45:
	la $t6, data_51_string 	#LOAD
	sw $t6, 992($fp) 	#Save loaded value in destination
	lw $t6, 992($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 996($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 996($fp) 	#Obtain value to assign
	sw $t2, 960($fp) 	#Assign value
	j label_continue_45 	#Jump to label_continue_45
label_else_45:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t4) 	#Load attribute in index 0
	sw $t8, 1004($fp) 	#Save obtained attribute in destination
	li $t2, 16 	#Load Int
	sw $t2, 1008($fp) 	#Save loaded value in destination
	lw $t8, 1008($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 1012($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 1012($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t6) 	#Load attribute in index 0
	sw $t7, 1016($fp) 	#Save obtained attribute in destination
	sw $t1, 1004($fp) 	#Value is string
	sw $t0, 1016($fp) 	#Value is string
	sub $t7,  $t1, $t0 	#Minus
	sw $t7, 1020($fp) 	#Save result of minus
	li $t9, 1 	#Load Int
	sw $t9, 1024($fp) 	#Save loaded value in destination
	sw $t2, 1024($fp) 	#Value is string
	sw $t6, 1020($fp) 	#Value is string
	sub $t4,  $t2, $t6 	#Minus
	sw $t4, 1020($fp) 	#Save result of minus
	lw $t8, 1020($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1028($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t9, 1028($fp) 	#Mov comparisson value to register
	bgt $t6,  $t9, label_then_46 	#Compare values in registers and jump to label_then_46 if the second is greater than 0
	j label_else_46 	#Jump to label_else_46
label_then_46:
	la $t5, data_52_string 	#LOAD
	sw $t5, 1032($fp) 	#Save loaded value in destination
	lw $t7, 1032($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1036($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 1036($fp) 	#Obtain value to assign
	sw $t9, 1000($fp) 	#Assign value
	j label_continue_46 	#Jump to label_continue_46
label_else_46:
	lw $t9, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 1044($fp) 	#Save obtained attribute in destination
	li $t6, 17 	#Load Int
	sw $t6, 1048($fp) 	#Save loaded value in destination
	lw $t1, 1048($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 1052($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 1052($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 1056($fp) 	#Save obtained attribute in destination
	sw $t7, 1044($fp) 	#Value is string
	sw $t0, 1056($fp) 	#Value is string
	sub $t3,  $t7, $t0 	#Minus
	sw $t3, 1060($fp) 	#Save result of minus
	li $t1, 1 	#Load Int
	sw $t1, 1064($fp) 	#Save loaded value in destination
	sw $t2, 1064($fp) 	#Value is string
	sw $t0, 1060($fp) 	#Value is string
	sub $t8,  $t2, $t0 	#Minus
	sw $t8, 1060($fp) 	#Save result of minus
	lw $t9, 1060($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 1068($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t5, 1068($fp) 	#Mov comparisson value to register
	bgt $t3,  $t5, label_then_47 	#Compare values in registers and jump to label_then_47 if the second is greater than 0
	j label_else_47 	#Jump to label_else_47
label_then_47:
	la $t3, data_53_string 	#LOAD
	sw $t3, 1072($fp) 	#Save loaded value in destination
	lw $t9, 1072($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1076($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 1076($fp) 	#Obtain value to assign
	sw $t1, 1040($fp) 	#Assign value
	j label_continue_47 	#Jump to label_continue_47
label_else_47:
	lw $t0, 0($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 1084($fp) 	#Save obtained attribute in destination
	li $t2, 18 	#Load Int
	sw $t2, 1088($fp) 	#Save loaded value in destination
	lw $t4, 1088($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1092($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 1092($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 1096($fp) 	#Save obtained attribute in destination
	sw $t5, 1084($fp) 	#Value is string
	sw $t0, 1096($fp) 	#Value is string
	sub $t6,  $t5, $t0 	#Minus
	sw $t6, 1100($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 1104($fp) 	#Save loaded value in destination
	sw $t6, 1104($fp) 	#Value is string
	sw $t2, 1100($fp) 	#Value is string
	sub $t5,  $t6, $t2 	#Minus
	sw $t5, 1100($fp) 	#Save result of minus
	lw $t6, 1100($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 1108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t5, 1108($fp) 	#Mov comparisson value to register
	bgt $t0,  $t5, label_then_48 	#Compare values in registers and jump to label_then_48 if the second is greater than 0
	j label_else_48 	#Jump to label_else_48
label_then_48:
	la $t2, data_54_string 	#LOAD
	sw $t2, 1112($fp) 	#Save loaded value in destination
	lw $t8, 1112($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 1116($fp) 	#Obtain value to assign
	sw $t4, 1080($fp) 	#Assign value
	j label_continue_48 	#Jump to label_continue_48
label_else_48:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 1124($fp) 	#Save obtained attribute in destination
	li $t2, 19 	#Load Int
	sw $t2, 1128($fp) 	#Save loaded value in destination
	lw $t2, 1128($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 1132($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 1136($fp) 	#Save obtained attribute in destination
	sw $t2, 1124($fp) 	#Value is string
	sw $t6, 1136($fp) 	#Value is string
	sub $t3,  $t2, $t6 	#Minus
	sw $t3, 1140($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 1144($fp) 	#Save loaded value in destination
	sw $t1, 1144($fp) 	#Value is string
	sw $t0, 1140($fp) 	#Value is string
	sub $t3,  $t1, $t0 	#Minus
	sw $t3, 1140($fp) 	#Save result of minus
	lw $t1, 1140($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 1148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t6, 0 	#Move 0 to register for comparisson
	lw $t2, 1148($fp) 	#Mov comparisson value to register
	bgt $t6,  $t2, label_then_49 	#Compare values in registers and jump to label_then_49 if the second is greater than 0
	j label_else_49 	#Jump to label_else_49
label_then_49:
	la $t7, data_55_string 	#LOAD
	sw $t7, 1152($fp) 	#Save loaded value in destination
	lw $t4, 1152($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 1156($fp) 	#Obtain value to assign
	sw $t0, 1120($fp) 	#Assign value
	j label_continue_49 	#Jump to label_continue_49
label_else_49:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t4) 	#Load attribute in index 0
	sw $t0, 1164($fp) 	#Save obtained attribute in destination
	li $t5, 20 	#Load Int
	sw $t5, 1168($fp) 	#Save loaded value in destination
	lw $t8, 1168($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 1172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 1172($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 1176($fp) 	#Save obtained attribute in destination
	sw $t3, 1164($fp) 	#Value is string
	sw $t0, 1176($fp) 	#Value is string
	sub $t6,  $t3, $t0 	#Minus
	sw $t6, 1180($fp) 	#Save result of minus
	li $t0, 1 	#Load Int
	sw $t0, 1184($fp) 	#Save loaded value in destination
	sw $t0, 1184($fp) 	#Value is string
	sw $t5, 1180($fp) 	#Value is string
	sub $t8,  $t0, $t5 	#Minus
	sw $t8, 1180($fp) 	#Save result of minus
	lw $t9, 1180($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t6, 1188($fp) 	#Mov comparisson value to register
	bgt $t5,  $t6, label_then_50 	#Compare values in registers and jump to label_then_50 if the second is greater than 0
	j label_else_50 	#Jump to label_else_50
label_then_50:
	la $t8, data_56_string 	#LOAD
	sw $t8, 1192($fp) 	#Save loaded value in destination
	lw $t7, 1192($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1196($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 1196($fp) 	#Obtain value to assign
	sw $t8, 1160($fp) 	#Assign value
	j label_continue_50 	#Jump to label_continue_50
label_else_50:
	lw $t5, 0($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 1204($fp) 	#Save obtained attribute in destination
	li $t1, 21 	#Load Int
	sw $t1, 1208($fp) 	#Save loaded value in destination
	lw $t0, 1208($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 1212($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 1216($fp) 	#Save obtained attribute in destination
	sw $t1, 1204($fp) 	#Value is string
	sw $t8, 1216($fp) 	#Value is string
	sub $t6,  $t1, $t8 	#Minus
	sw $t6, 1220($fp) 	#Save result of minus
	li $t6, 1 	#Load Int
	sw $t6, 1224($fp) 	#Save loaded value in destination
	sw $t8, 1224($fp) 	#Value is string
	sw $t2, 1220($fp) 	#Value is string
	sub $t9,  $t8, $t2 	#Minus
	sw $t9, 1220($fp) 	#Save result of minus
	lw $t9, 1220($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 1228($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t0, 1228($fp) 	#Mov comparisson value to register
	bgt $t3,  $t0, label_then_51 	#Compare values in registers and jump to label_then_51 if the second is greater than 0
	j label_else_51 	#Jump to label_else_51
label_then_51:
	la $t6, data_57_string 	#LOAD
	sw $t6, 1232($fp) 	#Save loaded value in destination
	lw $t8, 1232($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 1236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 1236($fp) 	#Obtain value to assign
	sw $t8, 1200($fp) 	#Assign value
	j label_continue_51 	#Jump to label_continue_51
label_else_51:
	la $t9, data_58_string 	#LOAD
	sw $t9, 1240($fp) 	#Save loaded value in destination
	lw $t4, 1240($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 1244($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 1244($fp) 	#Obtain value to assign
	sw $t3, 1200($fp) 	#Assign value
label_continue_51:
	lw $t1, 1200($fp) 	#Obtain value to assign
	sw $t1, 1160($fp) 	#Assign value
label_continue_50:
	lw $t6, 1160($fp) 	#Obtain value to assign
	sw $t6, 1120($fp) 	#Assign value
label_continue_49:
	lw $t7, 1120($fp) 	#Obtain value to assign
	sw $t7, 1080($fp) 	#Assign value
label_continue_48:
	lw $t2, 1080($fp) 	#Obtain value to assign
	sw $t2, 1040($fp) 	#Assign value
label_continue_47:
	lw $t6, 1040($fp) 	#Obtain value to assign
	sw $t6, 1000($fp) 	#Assign value
label_continue_46:
	lw $t9, 1000($fp) 	#Obtain value to assign
	sw $t9, 960($fp) 	#Assign value
label_continue_45:
	lw $t6, 960($fp) 	#Obtain value to assign
	sw $t6, 920($fp) 	#Assign value
label_continue_44:
	lw $t1, 920($fp) 	#Obtain value to assign
	sw $t1, 880($fp) 	#Assign value
label_continue_43:
	lw $t1, 880($fp) 	#Obtain value to assign
	sw $t1, 840($fp) 	#Assign value
label_continue_42:
	lw $t9, 840($fp) 	#Obtain value to assign
	sw $t9, 800($fp) 	#Assign value
label_continue_41:
	lw $t3, 800($fp) 	#Obtain value to assign
	sw $t3, 760($fp) 	#Assign value
label_continue_40:
	lw $t8, 760($fp) 	#Obtain value to assign
	sw $t8, 720($fp) 	#Assign value
label_continue_39:
	lw $t4, 720($fp) 	#Obtain value to assign
	sw $t4, 680($fp) 	#Assign value
label_continue_38:
	lw $t3, 680($fp) 	#Obtain value to assign
	sw $t3, 640($fp) 	#Assign value
label_continue_37:
	lw $t3, 640($fp) 	#Obtain value to assign
	sw $t3, 600($fp) 	#Assign value
label_continue_36:
	lw $t2, 600($fp) 	#Obtain value to assign
	sw $t2, 560($fp) 	#Assign value
label_continue_35:
	lw $t0, 560($fp) 	#Obtain value to assign
	sw $t0, 520($fp) 	#Assign value
label_continue_34:
	lw $t6, 520($fp) 	#Obtain value to assign
	sw $t6, 480($fp) 	#Assign value
label_continue_33:
	lw $t1, 480($fp) 	#Obtain value to assign
	sw $t1, 440($fp) 	#Assign value
label_continue_32:
	lw $t4, 440($fp) 	#Obtain value to assign
	sw $t4, 400($fp) 	#Assign value
label_continue_31:
	lw $t8, 400($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -1248 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_prompt:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 112 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_9_default_str 	#LOAD
	sw $t3, 4($fp) 	#Save loaded value in destination
	lw $t4, 4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_59_string 	#LOAD
	sw $t0, 12($fp) 	#Save loaded value in destination
	lw $t9, 12($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t6, -4($t9) 	#
	sw $t6, 20($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 16($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 20($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t7) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_60_string 	#LOAD
	sw $t5, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t1, -4($t6) 	#
	sw $t1, 36($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 36($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t8) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, -4($fp) 	#Typeof
	lw $t4, -4($t1) 	#
	sw $t4, 44($fp) 	#Save type value in destination
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 44($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t1) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 40($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	la $t1, data_10_string 	#LOAD
	sw $t1, 52($fp) 	#Save loaded value in destination
	lw $t1, 52($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t5, -4($t3) 	#
	sw $t5, 60($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 56($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 60($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t5) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 0($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t7) 	#Load attribute in index 0
	sw $t4, 68($fp) 	#Save obtained attribute in destination
	la $t6, data_61_string 	#LOAD
	sw $t6, 72($fp) 	#Save loaded value in destination
	lw $t6, 72($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 76($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 80($fp) 	#Save obtained attribute in destination
	sw $t1, 68($fp) 	#Value is string
	sw $t3, 80($fp) 	#Value is string
	sub $t2,  $t1, $t3 	#Minus
	sw $t2, 84($fp) 	#Save result of minus
	li $t5, 1 	#Load Int
	sw $t5, 88($fp) 	#Save loaded value in destination
	sw $t3, 88($fp) 	#Value is string
	sw $t6, 84($fp) 	#Value is string
	sub $t9,  $t3, $t6 	#Minus
	sw $t9, 84($fp) 	#Save result of minus
	lw $t4, 84($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t7, 92($fp) 	#Mov comparisson value to register
	bgt $t5,  $t7, label_then_52 	#Compare values in registers and jump to label_then_52 if the second is greater than 0
	j label_else_52 	#Jump to label_else_52
label_then_52:
	li $t4, 0 	#Load Int
	sw $t4, 96($fp) 	#Save loaded value in destination
	lw $t6, 96($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 100($fp) 	#Obtain value to assign
	sw $t3, 64($fp) 	#Assign value
	j label_continue_52 	#Jump to label_continue_52
label_else_52:
	li $t1, 1 	#Load Int
	sw $t1, 104($fp) 	#Save loaded value in destination
	lw $t0, 104($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 108($fp) 	#Obtain value to assign
	sw $t8, 64($fp) 	#Assign value
label_continue_52:
	lw $t4, 64($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -112 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
CellularAutomaton_prompt2:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 112 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_9_default_str 	#LOAD
	sw $t4, 4($fp) 	#Save loaded value in destination
	lw $t6, 4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_62_string 	#LOAD
	sw $t2, 12($fp) 	#Save loaded value in destination
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t2, -4($t1) 	#
	sw $t2, 20($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 16($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 20($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t0) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_63_string 	#LOAD
	sw $t8, 28($fp) 	#Save loaded value in destination
	lw $t7, 28($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, -4($fp) 	#Typeof
	lw $t0, -4($t4) 	#
	sw $t0, 36($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 32($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 36($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t1) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t7, data_64_string 	#LOAD
	sw $t7, 44($fp) 	#Save loaded value in destination
	lw $t3, 44($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t9, -4($t2) 	#
	sw $t9, 52($fp) 	#Save type value in destination
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 48($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 52($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t7) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, -4($fp) 	#Typeof
	lw $t4, -4($t0) 	#
	sw $t4, 60($fp) 	#Save type value in destination
	lw $t5, -4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 60($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t8) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 56($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 56($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
	lw $t5, 0($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 68($fp) 	#Save obtained attribute in destination
	la $t1, data_65_string 	#LOAD
	sw $t1, 72($fp) 	#Save loaded value in destination
	lw $t2, 72($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 76($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t8) 	#Load attribute in index 0
	sw $t1, 80($fp) 	#Save obtained attribute in destination
	sw $t4, 68($fp) 	#Value is string
	sw $t3, 80($fp) 	#Value is string
	sub $t9,  $t4, $t3 	#Minus
	sw $t9, 84($fp) 	#Save result of minus
	li $t2, 1 	#Load Int
	sw $t2, 88($fp) 	#Save loaded value in destination
	sw $t2, 88($fp) 	#Value is string
	sw $t0, 84($fp) 	#Value is string
	sub $t7,  $t2, $t0 	#Minus
	sw $t7, 84($fp) 	#Save result of minus
	lw $t8, 84($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t4, 0 	#Move 0 to register for comparisson
	lw $t5, 92($fp) 	#Mov comparisson value to register
	bgt $t4,  $t5, label_then_53 	#Compare values in registers and jump to label_then_53 if the second is greater than 0
	j label_else_53 	#Jump to label_else_53
label_then_53:
	li $t9, 1 	#Load Int
	sw $t9, 96($fp) 	#Save loaded value in destination
	lw $t1, 96($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 100($fp) 	#Obtain value to assign
	sw $t7, 64($fp) 	#Assign value
	j label_continue_53 	#Jump to label_continue_53
label_else_53:
	li $t6, 0 	#Load Int
	sw $t6, 104($fp) 	#Save loaded value in destination
	lw $t7, 104($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 108($fp) 	#Obtain value to assign
	sw $t7, 64($fp) 	#Assign value
label_continue_53:
	lw $t9, 64($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -112 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 24 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 24 	#Save 24 bytes
	syscall 	#
	la $t1, Main 	#Save type address in register
	sw $t1, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_rows___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t7) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_columns___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 8($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t8) 	#Save value in attribute of index 1
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Board_board_size___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 12($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 8($t9) 	#Save value in attribute of index 2
	lw $t7, 0($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal CellularAutomaton_population_map___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 16($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 12($t4) 	#Save value in attribute of index 3
	lw $t9, 0($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_cells___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 20($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t2, 16($t5) 	#Save value in attribute of index 4
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -24 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_cells___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 140 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t9, 0 	#Load Int
	sw $t9, 4($fp) 	#Save loaded value in destination
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_9_default_str 	#LOAD
	sw $t0, 12($fp) 	#Save loaded value in destination
	lw $t4, 12($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_66_string 	#LOAD
	sw $t7, 20($fp) 	#Save loaded value in destination
	lw $t4, 20($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t9, -4($t0) 	#
	sw $t9, 28($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 24($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 28($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t7) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t6, data_67_string 	#LOAD
	sw $t6, 36($fp) 	#Save loaded value in destination
	lw $t7, 36($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 44($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 40($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 44($fp) 	#get type dir for Dynamic Call
	lw $t5, 12($t0) 	#Get method of index 3
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
label_while_label_2:
	lw $t9, -4($fp) 	#Typeof
	lw $t6, -4($t9) 	#
	sw $t6, 52($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 52($fp) 	#get type dir for Dynamic Call
	lw $t4, 104($t6) 	#Get method of index 26
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	li $t5, 0 	#Move 0 to register for comparisson
	lw $t7, 48($fp) 	#Mov comparisson value to register
	bgt $t5,  $t7, label_loop_label_2 	#Compare values in registers and jump to label_loop_label_2 if the second is greater than 0
	j label_pool_label_2 	#Jump to label_pool_label_2
label_loop_label_2:
	li $t4, 1 	#Load Int
	sw $t4, 56($fp) 	#Save loaded value in destination
	lw $t6, 56($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 60($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
	lw $t3, -4($fp) 	#Typeof
	lw $t1, -4($t3) 	#
	sw $t1, 68($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 68($fp) 	#get type dir for Dynamic Call
	lw $t2, 96($t3) 	#Get method of index 24
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 64($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 64($fp) 	#Obtain value to assign
	sw $t0, 8($fp) 	#Assign value
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 76($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t3, 76($fp) 	#Typeof
	lw $t9, -4($t3) 	#
	sw $t9, 80($fp) 	#Save type value in destination
	lw $t0, 76($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 80($fp) 	#get type dir for Dynamic Call
	lw $t4, 36($t9) 	#Get method of index 9
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 72($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 72($fp) 	#Obtain value from source dir
	lw $t3, -4($fp) 	#Dir of instance of attribute to set
	sw $t0, 16($t3) 	#Save value in attribute of index 4
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 16($t7) 	#Load attribute in index 4
	sw $t9, 88($fp) 	#Save obtained attribute in destination
	lw $t4, 88($fp) 	#Typeof
	lw $t8, -4($t4) 	#
	sw $t8, 92($fp) 	#Save type value in destination
	lw $t2, 88($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 92($fp) 	#get type dir for Dynamic Call
	lw $t0, 40($t5) 	#Get method of index 10
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 84($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
label_while_label_3:
	li $t7, 0 	#Move 0 to register for comparisson
	lw $t3, 0($fp) 	#Mov comparisson value to register
	bgt $t7,  $t3, label_loop_label_3 	#Compare values in registers and jump to label_loop_label_3 if the second is greater than 0
	j label_pool_label_3 	#Jump to label_pool_label_3
label_loop_label_3:
	lw $t9, -4($fp) 	#Typeof
	lw $t8, -4($t9) 	#
	sw $t8, 104($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 104($fp) 	#get type dir for Dynamic Call
	lw $t1, 100($t6) 	#Get method of index 25
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 100($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	li $t1, 0 	#Move 0 to register for comparisson
	lw $t2, 100($fp) 	#Mov comparisson value to register
	bgt $t1,  $t2, label_then_54 	#Compare values in registers and jump to label_then_54 if the second is greater than 0
	j label_else_54 	#Jump to label_else_54
label_then_54:
	lw $t1, 88($fp) 	#Typeof
	lw $t3, -4($t1) 	#
	sw $t3, 112($fp) 	#Save type value in destination
	lw $t8, 88($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 112($fp) 	#get type dir for Dynamic Call
	lw $t6, 92($t0) 	#Get method of index 23
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 88($fp) 	#Typeof
	lw $t6, -4($t7) 	#
	sw $t6, 120($fp) 	#Save type value in destination
	lw $t4, 88($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 120($fp) 	#get type dir for Dynamic Call
	lw $t4, 40($t0) 	#Get method of index 10
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 116($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 116($fp) 	#Obtain value to assign
	sw $t0, 96($fp) 	#Assign value
	j label_continue_54 	#Jump to label_continue_54
label_else_54:
	li $t0, 0 	#Load Int
	sw $t0, 124($fp) 	#Save loaded value in destination
	lw $t2, 124($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 128($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
	lw $t3, 0($fp) 	#Obtain value to assign
	sw $t3, 96($fp) 	#Assign value
label_continue_54:
	j label_while_label_3 	#Jump to label_while_label_3
label_pool_label_3:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 132($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	j label_while_label_2 	#Jump to label_while_label_2
label_pool_label_2:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 136($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -140 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
