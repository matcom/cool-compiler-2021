.data
	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_Board: .word 60
	type_Board_inherits_from: .word type_IO
	type_Board_name_address: .word type_Board_name_size
	type_Board___init__: .word function___init___at_Board
	type_Board_abort: .word function_abort_at_Object
	type_Board_type_name: .word function_type_name_at_Object
	type_Board_copy: .word function_copy_at_Object
	type_Board_out_string: .word function_out_string_at_IO
	type_Board_out_int: .word function_out_int_at_IO
	type_Board_in_string: .word function_in_string_at_IO
	type_Board_in_int: .word function_in_int_at_IO
	type_Board_size_of_board: .word function_size_of_board_at_Board
	type_Board_board_init: .word function_board_init_at_Board
	
	type_CellularAutomaton: .word 136
	type_CellularAutomaton_inherits_from: .word type_Board
	type_CellularAutomaton_name_address: .word type_CellularAutomaton_name_size
	type_CellularAutomaton___init__: .word function___init___at_CellularAutomaton
	type_CellularAutomaton_abort: .word function_abort_at_Object
	type_CellularAutomaton_type_name: .word function_type_name_at_Object
	type_CellularAutomaton_copy: .word function_copy_at_Object
	type_CellularAutomaton_out_string: .word function_out_string_at_IO
	type_CellularAutomaton_out_int: .word function_out_int_at_IO
	type_CellularAutomaton_in_string: .word function_in_string_at_IO
	type_CellularAutomaton_in_int: .word function_in_int_at_IO
	type_CellularAutomaton_size_of_board: .word function_size_of_board_at_Board
	type_CellularAutomaton_board_init: .word function_board_init_at_Board
	type_CellularAutomaton_init: .word function_init_at_CellularAutomaton
	type_CellularAutomaton_print: .word function_print_at_CellularAutomaton
	type_CellularAutomaton_num_cells: .word function_num_cells_at_CellularAutomaton
	type_CellularAutomaton_cell: .word function_cell_at_CellularAutomaton
	type_CellularAutomaton_north: .word function_north_at_CellularAutomaton
	type_CellularAutomaton_south: .word function_south_at_CellularAutomaton
	type_CellularAutomaton_east: .word function_east_at_CellularAutomaton
	type_CellularAutomaton_west: .word function_west_at_CellularAutomaton
	type_CellularAutomaton_northwest: .word function_northwest_at_CellularAutomaton
	type_CellularAutomaton_northeast: .word function_northeast_at_CellularAutomaton
	type_CellularAutomaton_southeast: .word function_southeast_at_CellularAutomaton
	type_CellularAutomaton_southwest: .word function_southwest_at_CellularAutomaton
	type_CellularAutomaton_neighbors: .word function_neighbors_at_CellularAutomaton
	type_CellularAutomaton_cell_at_next_evolution: .word function_cell_at_next_evolution_at_CellularAutomaton
	type_CellularAutomaton_evolve: .word function_evolve_at_CellularAutomaton
	type_CellularAutomaton_option: .word function_option_at_CellularAutomaton
	type_CellularAutomaton_prompt: .word function_prompt_at_CellularAutomaton
	type_CellularAutomaton_prompt2: .word function_prompt2_at_CellularAutomaton
	
	type_Main: .word 144
	type_Main_inherits_from: .word type_CellularAutomaton
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_size_of_board: .word function_size_of_board_at_Board
	type_Main_board_init: .word function_board_init_at_Board
	type_Main_init: .word function_init_at_CellularAutomaton
	type_Main_print: .word function_print_at_CellularAutomaton
	type_Main_num_cells: .word function_num_cells_at_CellularAutomaton
	type_Main_cell: .word function_cell_at_CellularAutomaton
	type_Main_north: .word function_north_at_CellularAutomaton
	type_Main_south: .word function_south_at_CellularAutomaton
	type_Main_east: .word function_east_at_CellularAutomaton
	type_Main_west: .word function_west_at_CellularAutomaton
	type_Main_northwest: .word function_northwest_at_CellularAutomaton
	type_Main_northeast: .word function_northeast_at_CellularAutomaton
	type_Main_southeast: .word function_southeast_at_CellularAutomaton
	type_Main_southwest: .word function_southwest_at_CellularAutomaton
	type_Main_neighbors: .word function_neighbors_at_CellularAutomaton
	type_Main_cell_at_next_evolution: .word function_cell_at_next_evolution_at_CellularAutomaton
	type_Main_evolve: .word function_evolve_at_CellularAutomaton
	type_Main_option: .word function_option_at_CellularAutomaton
	type_Main_prompt: .word function_prompt_at_CellularAutomaton
	type_Main_prompt2: .word function_prompt2_at_CellularAutomaton
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Board_name_size: .word 5
	type_Board_name: .asciiz "Board"
	
	type_CellularAutomaton_name_size: .word 17
	type_CellularAutomaton_name: .asciiz "CellularAutomaton"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	function_add:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Addition operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		add $t2, $t0, $t1 # $t2 = $t0 + $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Subtraction operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sub $t2, $t0, $t1 # $t2 = $t0 - $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Multiplication operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		mult $t0, $t1 # $t2 = $t0 * $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Division operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		div $t0, $t1 # $t2 = $t0 / $t1
		mflo $t2
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Xor operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		xor $t2, $t0, $t1 # $t0 = $t0 ^ $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Int object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		slt $t2, $t0, $t1 # $t2 = $t0 < $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# Function parameters
		#   $ra = 12($sp)
		#   a = 8($sp)
		#   b = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# Less than operation
		lw $t0, 8($sp) # Save in $t0 the left operand address
		lw $t0, 8($t0) # Save in $t0 the left operand value
		lw $t1, 4($sp) # Save in $t1 the right operand address
		lw $t1, 8($t1) # Save in $t1 the rigth operand value
		sle $t2, $t0, $t1 # $t2 = $t0 <= $t1
		
		lw $t0, 0($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# Function parameters
		#   $ra = 48($sp)
		#   a = 44($sp)
		#   b = 40($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -40
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_0 = address of allocated object Int
		
		# Allocating NUll to internal_1
		sw $zero, 32($sp) # internal_1 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_2 = address of allocated object Int
		
		# internal_2 = EqualAddress(a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 = EqualAddress(b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# If internal_2 then goto a_is_type_object
		lw $t0, 28($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_object
		
		# internal_3 = typeof a that is the first word of the object
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 = direction of Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 = direction of Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 = direction of String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_7 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_8 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_9 = address of allocated object Int
		
		# internal_7 = EqualAddress(internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 = EqualAddress(internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 = EqualAddress(internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_7 then goto a_is_type_int_or_bool
		lw $t0, 8($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_8 then goto a_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_int_or_bool
		
		# If internal_9 then goto a_is_type_string
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, a_is_type_string
		
		# Jumping to a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 = EqualInt(a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 = EqualStr(a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		# By default we assume the strings are equals
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		# The strings are no equals
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# Jumping to end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# Equal operation
		lw $t0, 44($sp) # Save in $t0 the left operand address
		lw $t1, 40($sp) # Save in $t1 the right operand address
		seq $t2, $t0, $t1 # $t2 = $t0 == $t1
		
		lw $t0, 36($sp) # $t0 = internal_0
		sw $t2, 8($t0) # Setting value in the third word of the Bool object
		
		# Jumping to end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 36($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# Function parameters
		#   $ra = 36($sp)
		#   dest = 32($sp)
		#   source = 28($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -28
		
		# Allocating NUll to internal_0
		sw $zero, 24($sp) # internal_0 = 0
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_1 = address of allocated object Int
		
		# internal_1 = EqualAddress(source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 = EqualAddress(dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# If internal_1 then goto source_is_type_object
		lw $t0, 20($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_object
		
		# internal_2 = typeof source that is the first word of the object
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 = direction of Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 = direction of Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_5 = address of allocated object Int
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_6 = address of allocated object Int
		
		# internal_5 = EqualAddress(internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 = EqualAddress(internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# If internal_5 then goto source_is_type_int_or_bool
		lw $t0, 4($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# If internal_6 then goto source_is_type_int_or_bool
		lw $t0, 0($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, source_is_type_int_or_bool
		
		# Jumping to source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest = source where source is an integer
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp) # Pointer to source
		lw $t1, 0($t0) # $t1 = type of source
		lw $t2, 8($t0) # $t2 = value of source
		sw $t1, 0($v0) # Save type of dest
		sw $a0, 4($v0) # Save size of dest
		sw $t2, 8($v0) # Save value of dest
		sw $v0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest = source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# Jumping to source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		# Loading return value in $v1
		lw $v1, 32($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# Function parameters
		#   $ra = 28($sp)
		#   self = 24($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -24
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 33
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 65
		sb $t0, 8($v0) # internal_0[0] = 'A'
		
		addi $t0, $zero, 98
		sb $t0, 9($v0) # internal_0[1] = 'b'
		
		addi $t0, $zero, 111
		sb $t0, 10($v0) # internal_0[2] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_0[3] = 'r'
		
		addi $t0, $zero, 116
		sb $t0, 12($v0) # internal_0[4] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_0[5] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 14($v0) # internal_0[6] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 15($v0) # internal_0[7] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_0[8] = 'l'
		
		addi $t0, $zero, 108
		sb $t0, 17($v0) # internal_0[9] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_0[10] = 'e'
		
		addi $t0, $zero, 100
		sb $t0, 19($v0) # internal_0[11] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_0[12] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 21($v0) # internal_0[13] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 22($v0) # internal_0[14] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 23($v0) # internal_0[15] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 24($v0) # internal_0[16] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_0[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_0[18] = 'c'
		
		addi $t0, $zero, 108
		sb $t0, 27($v0) # internal_0[19] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_0[20] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 29($v0) # internal_0[21] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_0[22] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_0[23] = ' '
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_0 = "Abort called from class "
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_3[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 8($sp) # internal_3 = "\n"
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method type_name of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp) # internal_1 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 32($sp)
		sw $t0, 4($sp) # Storing internal_0
		
		# Argument internal_1
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_4 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 24($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_2 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		lw $t0, 12($sp) # $t0 = internal_2
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Exit program
		li $v0, 10
		syscall
		
		# Loading return value in $v1
		lw $v1, 24($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = name of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 8($t1) # $t2 = direction of the type name
		la $t3, 4($t2) # $t3 = address of the name
		lw $t2, 0($t2) # $t2 = length of the name
		
		addi $t2, $t2, 9 # Setting space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9 # Restoring space for the type, the size and the null byte
		
		la $t4, type_String
		sw $t4, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t4, $v0, 0 # $t4 = direction of the new string
		addi $t4, $t4, 8 # Pointer to the first character of the string
		xor $t5, $t5, $t5 # Initializing counter
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3) # Loading the character
		sb $t6, 0($t4)
		addi $t4, $t4, 1 # Incrementing the pointer to the new string
		addi $t3, $t3, 1 # Incrementing the pointer to the string in self
		addi $t5, $t5, 1 # Incrementing counter
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4) # Setting the null byte
		
		sw $v0, 0($sp) # Storing the new string in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = copy of self
		lw $t0, 4($sp) # $t0 = self
		lw $t1, 0($t0) # $t1 = type of self
		lw $t2, 4($t0) # $t2 = length of self in bytes
		
		# Allocating space for the new object
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0 # $t3 = direction of the new object
		sw $t1, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		# Initializing the variable of the loop
		addi $t0, $t0, 8 # Pointer to the first character of the object
		addi $t3, $t3, 8 # Pointer to the first character of the object
		addi $t2, $2, -8 # Decrementing in 8 the length of the object
		xor $t4, $t4, $t4 # Initializing counter
		
		# Loop copying the object
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t0, $t0, 1 # Incrementing the pointer to the object
		addi $t3, $t3, 1 # Incrementing the pointer to the new object
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		lw $t0, 0($sp) # $t0 = x
		addi $t0, $t0, 8 # Pointer to the first character of the string
		
		# Printing the String x
		li $v0, 4
		move $a0, $t0
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		#   x = 0($sp)
		
		# Printing the Int x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		# Loading return value in $v1
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0 # Initializing counter
		while_read_start:
		lb $t1, buffer_input($t0) # Loading the byte
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1 # Incrementing counter
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9 # Adding space for the type, the size and the null byte
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9 # Adding space for the type, the size and the null byte
		la $t2, type_String
		sw $t2, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t3, $v0, 8 # Pointer to the first character of the string
		xor $t4, $t4, $t4 # Initializing counter
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4) # Loading the byte
		sb $t5, 0($t3) # Storing the byte
		addi $t3, $t3, 1 # Imcremeenting pointer
		addi $t4, $t4, 1 # Incrementing counter
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3) # Storing the null byte
		
		sw $v0, 0($sp) # Storing the new object in internal_0
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# Function parameters
		#   $ra = 8($sp)
		#   self = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_0 = address of allocated object Int
		
		# internal_0 = length of self
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9 # Subtracting 9 for the type, length, and null-terminator
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# Function parameters
		#   $ra = 12($sp)
		#   self = 8($sp)
		#   s = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0) # $t2 = length of str1
		lw $t3, 4($t1) # $t3 = length of str2
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3 # $t4 = length of str1 + str2
		addi $t4, $t4, 9 # Adding the space for the type (4bytes), the length(4bytes) and the null-terminator(1byte)
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9 # Restoring $t4 = length of str1 + str2
		add $t5, $zero, $v0 # $t5 = address of the new string object
		addi $t5, $t5, 8 # $t5 = address of the first byte of the new string
		
		la $t8, type_String
		sw $t8, 0($v0) # Setting type in the first word of th object
		
		sw $a0, 4($v0) # Setting length of the string in the second word of the object
		
		# Copying str1 to the new string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str1_start
		while_copy_str1_end:
		
		# Copying str2 to the new string
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1 # $t0 = $t0 + 1 Incrementing the address of str1
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self + s
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		#   i = 8($sp)
		#   l = 4($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -4
		
		# internal_0 = self[i:i + l]
		lw $t0, 12($sp) # $t0 = address of the string
		lw $t1, 4($t0) # $t1 = length of the string
		addi $t1, $t1, -9 # $t1 = length of the string + 9
		lw $t2, 8($sp) # $t2 = start of the substring
		lw $t2, 8($t2)
		lw $t3, 4($sp) # $t3 = length of the substring
		lw $t3, 8($t3)
		add $t4, $t2, $t3 # $t4 = start of the substring + length of the substring
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0) # Setting type in the first word of the object
		
		sw $a0, 4($v0) # Setting length in the second word of the object
		
		addi $t0, $t0, 8 # pointing to the first byte of the string
		add $t0, $t0, $t2 # pointing to the first byte of the substring
		move $t5, $v0 # $t5 = address of the new string
		add $t5, $t5, 8 # pointing to the first byte of the string
		xor $t6, $t6, $t6 # $t6 = 0 Initializing counter
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1 # $t0 = $t0 + 1 Incrementing the address of the string
		add $t5, $t5, 1 # $t5 = $t5 + 1 Incrementing the address of the new string
		addi $t6, $t6, 1 # $t6 = $t6 + 1 Incrementing counter
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5) # Setting the null-terminator
		
		sw $v0, 0($sp) # internal_0 = self[i:i + l]
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		# Function parameters
		#   $ra = 4($sp)
		#   self = 0($sp)
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Board:
		# Function parameters
		#   $ra = 16($sp)
		#   self = 12($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -12
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_0 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 12($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8741300509450
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300509450
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300509450
		j object_set_attribute_8741300509450
		int_set_attribute_8741300509450:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_0
		j end_set_attribute_8741300509450
		bool_set_attribute_8741300509450:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_0
		j end_set_attribute_8741300509450
		object_set_attribute_8741300509450:
		sw $t1, 8($t0) # self.rows = internal_0
		end_set_attribute_8741300509450:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_1 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 12($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_1
		beq $t1, $zero, object_set_attribute_8741300509471
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300509471
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300509471
		j object_set_attribute_8741300509471
		int_set_attribute_8741300509471:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_1
		j end_set_attribute_8741300509471
		bool_set_attribute_8741300509471:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_1
		j end_set_attribute_8741300509471
		object_set_attribute_8741300509471:
		sw $t1, 12($t0) # self.columns = internal_1
		end_set_attribute_8741300509471:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_2 = address of allocated object Int
		
		# Set attribute board_size of self
		lw $t0, 12($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_2
		beq $t1, $zero, object_set_attribute_8741300509495
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300509495
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300509495
		j object_set_attribute_8741300509495
		int_set_attribute_8741300509495:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = internal_2
		j end_set_attribute_8741300509495
		bool_set_attribute_8741300509495:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = internal_2
		j end_set_attribute_8741300509495
		object_set_attribute_8741300509495:
		sw $t1, 16($t0) # self.board_size = internal_2
		end_set_attribute_8741300509495:
		
		# Loading return value in $v1
		lw $v1, 12($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 12
		
		jr $ra
		
	function_size_of_board_at_Board:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		#   initial = 12($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -12
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_1 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument initial
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing initial
		
		# Calling function internal_2
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_0 = result of internal_2
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 12
		
		jr $ra
		
	function_board_init_at_Board:
		# Function parameters
		#   $ra = 176($sp)
		#   self = 172($sp)
		#   start = 168($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -168
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_2 = address of allocated object Int
		
		# Get method size_of_board of Board
		lw $t0, 172($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 156($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 152($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 184($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument start
		lw $t0, 180($sp)
		sw $t0, 0($sp) # Storing start
		
		# Calling function internal_3
		lw $t0, 164($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_1
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 176($sp) # size = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_5 = address of allocated object Int
		
		# Allocating Int 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 15
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 140($sp) # internal_6 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_6
		lw $t0, 152($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 148($sp) # internal_7 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_5 = internal_7
		lw $t0, 136($sp)
		sw $t0, 144($sp)
		
		# If internal_5 then goto then_8741300541007
		lw $t0, 144($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300541007
		
		# Jumping to else_8741300541007
		j else_8741300541007
		
		then_8741300541007:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_8 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 132($sp) # $t1 = internal_8
		beq $t1, $zero, object_set_attribute_8741300509841
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300509841
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300509841
		j object_set_attribute_8741300509841
		int_set_attribute_8741300509841:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_8
		j end_set_attribute_8741300509841
		bool_set_attribute_8741300509841:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_8
		j end_set_attribute_8741300509841
		object_set_attribute_8741300509841:
		sw $t1, 8($t0) # self.rows = internal_8
		end_set_attribute_8741300509841:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_9 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 128($sp) # $t1 = internal_9
		beq $t1, $zero, object_set_attribute_8741300509865
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300509865
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300509865
		j object_set_attribute_8741300509865
		int_set_attribute_8741300509865:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_9
		j end_set_attribute_8741300509865
		bool_set_attribute_8741300509865:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_9
		j end_set_attribute_8741300509865
		object_set_attribute_8741300509865:
		sw $t1, 12($t0) # self.columns = internal_9
		end_set_attribute_8741300509865:
		
		# Set attribute board_size of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 164($sp) # $t1 = size
		beq $t1, $zero, object_set_attribute_8741300509889
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300509889
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300509889
		j object_set_attribute_8741300509889
		int_set_attribute_8741300509889:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300509889
		bool_set_attribute_8741300509889:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300509889
		object_set_attribute_8741300509889:
		sw $t1, 16($t0) # self.board_size = size
		end_set_attribute_8741300509889:
		
		# internal_4 = size
		lw $t0, 164($sp)
		sw $t0, 148($sp)
		
		# Jumping to endif_8741300541007
		j endif_8741300541007
		
		else_8741300541007:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 120($sp) # internal_11 = address of allocated object Int
		
		# Allocating Int 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 16
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_12 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_12
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 124($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_11 = internal_13
		lw $t0, 112($sp)
		sw $t0, 120($sp)
		
		# If internal_11 then goto then_8741300541097
		lw $t0, 120($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300541097
		
		# Jumping to else_8741300541097
		j else_8741300541097
		
		then_8741300541097:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 108($sp) # internal_14 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 108($sp) # $t1 = internal_14
		beq $t1, $zero, object_set_attribute_8741300511320
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511320
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511320
		j object_set_attribute_8741300511320
		int_set_attribute_8741300511320:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_14
		j end_set_attribute_8741300511320
		bool_set_attribute_8741300511320:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_14
		j end_set_attribute_8741300511320
		object_set_attribute_8741300511320:
		sw $t1, 8($t0) # self.rows = internal_14
		end_set_attribute_8741300511320:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_15 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 104($sp) # $t1 = internal_15
		beq $t1, $zero, object_set_attribute_8741300511344
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511344
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511344
		j object_set_attribute_8741300511344
		int_set_attribute_8741300511344:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_15
		j end_set_attribute_8741300511344
		bool_set_attribute_8741300511344:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_15
		j end_set_attribute_8741300511344
		object_set_attribute_8741300511344:
		sw $t1, 12($t0) # self.columns = internal_15
		end_set_attribute_8741300511344:
		
		# Set attribute board_size of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 164($sp) # $t1 = size
		beq $t1, $zero, object_set_attribute_8741300511368
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511368
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511368
		j object_set_attribute_8741300511368
		int_set_attribute_8741300511368:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300511368
		bool_set_attribute_8741300511368:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300511368
		object_set_attribute_8741300511368:
		sw $t1, 16($t0) # self.board_size = size
		end_set_attribute_8741300511368:
		
		# internal_10 = size
		lw $t0, 164($sp)
		sw $t0, 124($sp)
		
		# Jumping to endif_8741300541097
		j endif_8741300541097
		
		else_8741300541097:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_17 = address of allocated object Int
		
		# Allocating Int 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 20
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_18 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_18
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_17 = internal_19
		lw $t0, 88($sp)
		sw $t0, 96($sp)
		
		# If internal_17 then goto then_8741300541447
		lw $t0, 96($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300541447
		
		# Jumping to else_8741300541447
		j else_8741300541447
		
		then_8741300541447:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_20 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 84($sp) # $t1 = internal_20
		beq $t1, $zero, object_set_attribute_8741300511519
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511519
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511519
		j object_set_attribute_8741300511519
		int_set_attribute_8741300511519:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_20
		j end_set_attribute_8741300511519
		bool_set_attribute_8741300511519:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_20
		j end_set_attribute_8741300511519
		object_set_attribute_8741300511519:
		sw $t1, 8($t0) # self.rows = internal_20
		end_set_attribute_8741300511519:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_21 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 80($sp) # $t1 = internal_21
		beq $t1, $zero, object_set_attribute_8741300511543
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511543
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511543
		j object_set_attribute_8741300511543
		int_set_attribute_8741300511543:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_21
		j end_set_attribute_8741300511543
		bool_set_attribute_8741300511543:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_21
		j end_set_attribute_8741300511543
		object_set_attribute_8741300511543:
		sw $t1, 12($t0) # self.columns = internal_21
		end_set_attribute_8741300511543:
		
		# Set attribute board_size of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 164($sp) # $t1 = size
		beq $t1, $zero, object_set_attribute_8741300511567
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511567
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511567
		j object_set_attribute_8741300511567
		int_set_attribute_8741300511567:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300511567
		bool_set_attribute_8741300511567:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300511567
		object_set_attribute_8741300511567:
		sw $t1, 16($t0) # self.board_size = size
		end_set_attribute_8741300511567:
		
		# internal_16 = size
		lw $t0, 164($sp)
		sw $t0, 100($sp)
		
		# Jumping to endif_8741300541447
		j endif_8741300541447
		
		else_8741300541447:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_23 = address of allocated object Int
		
		# Allocating Int 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 21
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 68($sp) # internal_24 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_24
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_24
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_25 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_23 = internal_25
		lw $t0, 64($sp)
		sw $t0, 72($sp)
		
		# If internal_23 then goto then_8741300541537
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300541537
		
		# Jumping to else_8741300541537
		j else_8741300541537
		
		then_8741300541537:
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_26 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 60($sp) # $t1 = internal_26
		beq $t1, $zero, object_set_attribute_8741300511714
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511714
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511714
		j object_set_attribute_8741300511714
		int_set_attribute_8741300511714:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_26
		j end_set_attribute_8741300511714
		bool_set_attribute_8741300511714:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_26
		j end_set_attribute_8741300511714
		object_set_attribute_8741300511714:
		sw $t1, 8($t0) # self.rows = internal_26
		end_set_attribute_8741300511714:
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_27 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 56($sp) # $t1 = internal_27
		beq $t1, $zero, object_set_attribute_8741300511735
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300511735
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300511735
		j object_set_attribute_8741300511735
		int_set_attribute_8741300511735:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_27
		j end_set_attribute_8741300511735
		bool_set_attribute_8741300511735:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_27
		j end_set_attribute_8741300511735
		object_set_attribute_8741300511735:
		sw $t1, 12($t0) # self.columns = internal_27
		end_set_attribute_8741300511735:
		
		# Set attribute board_size of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 164($sp) # $t1 = size
		beq $t1, $zero, object_set_attribute_8741300512022
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512022
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512022
		j object_set_attribute_8741300512022
		int_set_attribute_8741300512022:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300512022
		bool_set_attribute_8741300512022:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300512022
		object_set_attribute_8741300512022:
		sw $t1, 16($t0) # self.board_size = size
		end_set_attribute_8741300512022:
		
		# internal_22 = size
		lw $t0, 164($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300541537
		j endif_8741300541537
		
		else_8741300541537:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_29 = address of allocated object Int
		
		# Allocating Int 25
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 25
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_30 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_30
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_30
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_31 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_29 = internal_31
		lw $t0, 40($sp)
		sw $t0, 48($sp)
		
		# If internal_29 then goto then_8741300541627
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300541627
		
		# Jumping to else_8741300541627
		j else_8741300541627
		
		then_8741300541627:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_32 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 36($sp) # $t1 = internal_32
		beq $t1, $zero, object_set_attribute_8741300512169
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512169
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512169
		j object_set_attribute_8741300512169
		int_set_attribute_8741300512169:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_32
		j end_set_attribute_8741300512169
		bool_set_attribute_8741300512169:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_32
		j end_set_attribute_8741300512169
		object_set_attribute_8741300512169:
		sw $t1, 8($t0) # self.rows = internal_32
		end_set_attribute_8741300512169:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_33 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 32($sp) # $t1 = internal_33
		beq $t1, $zero, object_set_attribute_8741300512193
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512193
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512193
		j object_set_attribute_8741300512193
		int_set_attribute_8741300512193:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_33
		j end_set_attribute_8741300512193
		bool_set_attribute_8741300512193:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_33
		j end_set_attribute_8741300512193
		object_set_attribute_8741300512193:
		sw $t1, 12($t0) # self.columns = internal_33
		end_set_attribute_8741300512193:
		
		# Set attribute board_size of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 164($sp) # $t1 = size
		beq $t1, $zero, object_set_attribute_8741300512217
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512217
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512217
		j object_set_attribute_8741300512217
		int_set_attribute_8741300512217:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300512217
		bool_set_attribute_8741300512217:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300512217
		object_set_attribute_8741300512217:
		sw $t1, 16($t0) # self.board_size = size
		end_set_attribute_8741300512217:
		
		# internal_28 = size
		lw $t0, 164($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8741300541627
		j endif_8741300541627
		
		else_8741300541627:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_35 = address of allocated object Int
		
		# Allocating Int 28
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 28
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 20($sp) # internal_36 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument size
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing size
		
		# Argument internal_36
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_36
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_37 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_35 = internal_37
		lw $t0, 16($sp)
		sw $t0, 24($sp)
		
		# If internal_35 then goto then_8741300542236
		lw $t0, 24($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300542236
		
		# Jumping to else_8741300542236
		j else_8741300542236
		
		then_8741300542236:
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_38 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_38
		beq $t1, $zero, object_set_attribute_8741300512880
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512880
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512880
		j object_set_attribute_8741300512880
		int_set_attribute_8741300512880:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_38
		j end_set_attribute_8741300512880
		bool_set_attribute_8741300512880:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_38
		j end_set_attribute_8741300512880
		object_set_attribute_8741300512880:
		sw $t1, 8($t0) # self.rows = internal_38
		end_set_attribute_8741300512880:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_39 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_39
		beq $t1, $zero, object_set_attribute_8741300512904
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512904
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512904
		j object_set_attribute_8741300512904
		int_set_attribute_8741300512904:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_39
		j end_set_attribute_8741300512904
		bool_set_attribute_8741300512904:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_39
		j end_set_attribute_8741300512904
		object_set_attribute_8741300512904:
		sw $t1, 12($t0) # self.columns = internal_39
		end_set_attribute_8741300512904:
		
		# Set attribute board_size of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 164($sp) # $t1 = size
		beq $t1, $zero, object_set_attribute_8741300512928
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512928
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512928
		j object_set_attribute_8741300512928
		int_set_attribute_8741300512928:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300512928
		bool_set_attribute_8741300512928:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300512928
		object_set_attribute_8741300512928:
		sw $t1, 16($t0) # self.board_size = size
		end_set_attribute_8741300512928:
		
		# internal_34 = size
		lw $t0, 164($sp)
		sw $t0, 28($sp)
		
		# Jumping to endif_8741300542236
		j endif_8741300542236
		
		else_8741300542236:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_40 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_40
		beq $t1, $zero, object_set_attribute_8741300512964
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512964
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512964
		j object_set_attribute_8741300512964
		int_set_attribute_8741300512964:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_40
		j end_set_attribute_8741300512964
		bool_set_attribute_8741300512964:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_40
		j end_set_attribute_8741300512964
		object_set_attribute_8741300512964:
		sw $t1, 8($t0) # self.rows = internal_40
		end_set_attribute_8741300512964:
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_41 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_41
		beq $t1, $zero, object_set_attribute_8741300512988
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300512988
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300512988
		j object_set_attribute_8741300512988
		int_set_attribute_8741300512988:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_41
		j end_set_attribute_8741300512988
		bool_set_attribute_8741300512988:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_41
		j end_set_attribute_8741300512988
		object_set_attribute_8741300512988:
		sw $t1, 12($t0) # self.columns = internal_41
		end_set_attribute_8741300512988:
		
		# Set attribute board_size of self
		lw $t0, 172($sp) # $t0 = self
		lw $t1, 164($sp) # $t1 = size
		beq $t1, $zero, object_set_attribute_8741300513012
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300513012
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300513012
		j object_set_attribute_8741300513012
		int_set_attribute_8741300513012:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300513012
		bool_set_attribute_8741300513012:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = size
		j end_set_attribute_8741300513012
		object_set_attribute_8741300513012:
		sw $t1, 16($t0) # self.board_size = size
		end_set_attribute_8741300513012:
		
		# internal_34 = size
		lw $t0, 164($sp)
		sw $t0, 28($sp)
		
		# Jumping to endif_8741300542236
		j endif_8741300542236
		
		endif_8741300542236:
		
		# internal_28 = internal_34
		lw $t0, 28($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8741300541627
		j endif_8741300541627
		
		endif_8741300541627:
		
		# internal_22 = internal_28
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300541537
		j endif_8741300541537
		
		endif_8741300541537:
		
		# internal_16 = internal_22
		lw $t0, 76($sp)
		sw $t0, 100($sp)
		
		# Jumping to endif_8741300541447
		j endif_8741300541447
		
		endif_8741300541447:
		
		# internal_10 = internal_16
		lw $t0, 100($sp)
		sw $t0, 124($sp)
		
		# Jumping to endif_8741300541097
		j endif_8741300541097
		
		endif_8741300541097:
		
		# internal_4 = internal_10
		lw $t0, 124($sp)
		sw $t0, 148($sp)
		
		# Jumping to endif_8741300541007
		j endif_8741300541007
		
		endif_8741300541007:
		
		# Loading return value in $v1
		lw $v1, 172($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 168
		
		jr $ra
		
	function___init___at_CellularAutomaton:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_0 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8741300513329
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300513329
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300513329
		j object_set_attribute_8741300513329
		int_set_attribute_8741300513329:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_0
		j end_set_attribute_8741300513329
		bool_set_attribute_8741300513329:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_0
		j end_set_attribute_8741300513329
		object_set_attribute_8741300513329:
		sw $t1, 8($t0) # self.rows = internal_0
		end_set_attribute_8741300513329:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_1 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_1
		beq $t1, $zero, object_set_attribute_8741300513353
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300513353
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300513353
		j object_set_attribute_8741300513353
		int_set_attribute_8741300513353:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_1
		j end_set_attribute_8741300513353
		bool_set_attribute_8741300513353:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_1
		j end_set_attribute_8741300513353
		object_set_attribute_8741300513353:
		sw $t1, 12($t0) # self.columns = internal_1
		end_set_attribute_8741300513353:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Set attribute board_size of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_2
		beq $t1, $zero, object_set_attribute_8741300513377
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300513377
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300513377
		j object_set_attribute_8741300513377
		int_set_attribute_8741300513377:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = internal_2
		j end_set_attribute_8741300513377
		bool_set_attribute_8741300513377:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = internal_2
		j end_set_attribute_8741300513377
		object_set_attribute_8741300513377:
		sw $t1, 16($t0) # self.board_size = internal_2
		end_set_attribute_8741300513377:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_3 = ""
		
		# Set attribute population_map of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_3
		beq $t1, $zero, object_set_attribute_8741300513401
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300513401
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300513401
		j object_set_attribute_8741300513401
		int_set_attribute_8741300513401:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = internal_3
		j end_set_attribute_8741300513401
		bool_set_attribute_8741300513401:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = internal_3
		j end_set_attribute_8741300513401
		object_set_attribute_8741300513401:
		sw $t1, 20($t0) # self.population_map = internal_3
		end_set_attribute_8741300513401:
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_init_at_CellularAutomaton:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		#   map = 12($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -12
		
		# Set attribute population_map of self
		lw $t0, 16($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = map
		beq $t1, $zero, object_set_attribute_8741300513449
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300513449
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300513449
		j object_set_attribute_8741300513449
		int_set_attribute_8741300513449:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = map
		j end_set_attribute_8741300513449
		bool_set_attribute_8741300513449:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = map
		j end_set_attribute_8741300513449
		object_set_attribute_8741300513449:
		sw $t1, 20($t0) # self.population_map = map
		end_set_attribute_8741300513449:
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_1 = address of allocated object Int
		
		# Get method board_init of CellularAutomaton
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 28($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument map
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing map
		
		# Calling function internal_2
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_0 = result of internal_2
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 16($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 12
		
		jr $ra
		
	function_print_at_CellularAutomaton:
		# Function parameters
		#   $ra = 116($sp)
		#   self = 112($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -112
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_1
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 120($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute board_size of self
		lw $t0, 112($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300481868
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300481868
		j object_get_attribute_8741300481868
		int_get_attribute_8741300481868:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 96($sp) # internal_3 = self.board_size
		j end_get_attribute_8741300481868
		bool_get_attribute_8741300481868:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 96($sp) # internal_3 = self.board_size
		j end_get_attribute_8741300481868
		object_get_attribute_8741300481868:
		sw $t1, 96($sp) # internal_3 = self.board_size
		end_get_attribute_8741300481868:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_3
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 112($sp) # num = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_4[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 92($sp) # internal_4 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_6 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_4
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function internal_7
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_5 = result of internal_7
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating NUll to internal_8
		sw $zero, 76($sp) # internal_8 = 0
		
		while_start_8741300541459:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument num
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_9 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_9 then goto while_body_8741300541459
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8741300541459
		
		# Jumping to while_end_8741300541459
		j while_end_8741300541459
		
		while_body_8741300541459:
		
		# Get attribute population_map of self
		lw $t0, 112($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'population_map' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300482383
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300482383
		j object_get_attribute_8741300482383
		int_get_attribute_8741300482383:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_10 = self.population_map
		j end_get_attribute_8741300482383
		bool_get_attribute_8741300482383:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_10 = self.population_map
		j end_get_attribute_8741300482383
		object_get_attribute_8741300482383:
		sw $t1, 68($sp) # internal_10 = self.population_map
		end_get_attribute_8741300482383:
		
		# Get attribute columns of self
		lw $t0, 112($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300482398
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300482398
		j object_get_attribute_8741300482398
		int_get_attribute_8741300482398:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp) # internal_11 = self.columns
		j end_get_attribute_8741300482398
		bool_get_attribute_8741300482398:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp) # internal_11 = self.columns
		j end_get_attribute_8741300482398
		object_get_attribute_8741300482398:
		sw $t1, 64($sp) # internal_11 = self.columns
		end_get_attribute_8741300482398:
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_13 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 84($sp)
		sw $t0, 8($sp) # Storing internal_10
		
		# Argument i
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_11
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function internal_14
		lw $t0, 68($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 76($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_16 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_12
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function internal_17
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_15 = result of internal_17
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_18[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 36($sp) # internal_18 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_20 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_18
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function internal_21
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_19 = result of internal_21
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 112($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300482826
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300482826
		j object_get_attribute_8741300482826
		int_get_attribute_8741300482826:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($sp) # internal_22 = self.columns
		j end_get_attribute_8741300482826
		bool_get_attribute_8741300482826:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($sp) # internal_22 = self.columns
		j end_get_attribute_8741300482826
		object_get_attribute_8741300482826:
		sw $t1, 20($sp) # internal_22 = self.columns
		end_get_attribute_8741300482826:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_22
		lw $t0, 32($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_23 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument i
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing i
		
		# Argument internal_23
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_23
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 120($sp) # i = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to while_start_8741300541459
		j while_start_8741300541459
		
		while_end_8741300541459:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_24[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_24 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_26 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 112($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 124($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_24
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_24
		
		# Calling function internal_27
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_25 = result of internal_27
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 112($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 112
		
		jr $ra
		
	function_num_cells_at_CellularAutomaton:
		# Function parameters
		#   $ra = 20($sp)
		#   self = 16($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Get attribute population_map of self
		lw $t0, 16($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'population_map' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300481898
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300481898
		j object_get_attribute_8741300481898
		int_get_attribute_8741300481898:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_0 = self.population_map
		j end_get_attribute_8741300481898
		bool_get_attribute_8741300481898:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($sp) # internal_0 = self.population_map
		j end_get_attribute_8741300481898
		object_get_attribute_8741300481898:
		sw $t1, 12($sp) # internal_0 = self.population_map
		end_get_attribute_8741300481898:
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Get method length of String
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 8($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 16
		
		jr $ra
		
	function_cell_at_CellularAutomaton:
		# Function parameters
		#   $ra = 56($sp)
		#   self = 52($sp)
		#   position = 48($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -48
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 52($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300483024
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300483024
		j object_get_attribute_8741300483024
		int_get_attribute_8741300483024:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300483024
		bool_get_attribute_8741300483024:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300483024
		object_get_attribute_8741300483024:
		sw $t1, 36($sp) # internal_2 = self.board_size
		end_get_attribute_8741300483024:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_3 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_3
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_4 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_4
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_4
		
		# Argument position
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_5
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# If internal_1 then goto then_8741300542443
		lw $t0, 40($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300542443
		
		# Jumping to else_8741300542443
		j else_8741300542443
		
		then_8741300542443:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_6 = " "
		
		# internal_0 = internal_6
		lw $t0, 20($sp)
		sw $t0, 44($sp)
		
		# Jumping to endif_8741300542443
		j endif_8741300542443
		
		else_8741300542443:
		
		# Get attribute population_map of self
		lw $t0, 52($sp) # Get the address of self
		lw $t1, 20($t0) # Get the attribute 'population_map' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300483419
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300483419
		j object_get_attribute_8741300483419
		int_get_attribute_8741300483419:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_7 = self.population_map
		j end_get_attribute_8741300483419
		bool_get_attribute_8741300483419:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_7 = self.population_map
		j end_get_attribute_8741300483419
		object_get_attribute_8741300483419:
		sw $t1, 16($sp) # internal_7 = self.population_map
		end_get_attribute_8741300483419:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_8 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_10 = address of allocated object Int
		
		# Get method substr of String
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -16 # Reserving space for arguments
		sw $ra, 12($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 32($sp)
		sw $t0, 8($sp) # Storing internal_7
		
		# Argument position
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_8
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function internal_11
		lw $t0, 16($sp)
		jalr $t0
		lw $ra, 12($sp)
		sw $v1, 24($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 16 # Freeing space for arguments
		
		# internal_0 = internal_9
		lw $t0, 8($sp)
		sw $t0, 44($sp)
		
		# Jumping to endif_8741300542443
		j endif_8741300542443
		
		endif_8741300542443:
		
		# Loading return value in $v1
		lw $v1, 44($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 48
		
		jr $ra
		
	function_north_at_CellularAutomaton:
		# Function parameters
		#   $ra = 56($sp)
		#   self = 52($sp)
		#   position = 48($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -48
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_1 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 52($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300483844
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300483844
		j object_get_attribute_8741300483844
		int_get_attribute_8741300483844:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_2 = self.columns
		j end_get_attribute_8741300483844
		bool_get_attribute_8741300483844:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_2 = self.columns
		j end_get_attribute_8741300483844
		object_get_attribute_8741300483844:
		sw $t1, 36($sp) # internal_2 = self.columns
		end_get_attribute_8741300483844:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_3 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_4 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 44($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_5
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# If internal_1 then goto then_8741300543064
		lw $t0, 40($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300543064
		
		# Jumping to else_8741300543064
		j else_8741300543064
		
		then_8741300543064:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_6 = " "
		
		# internal_0 = internal_6
		lw $t0, 20($sp)
		sw $t0, 44($sp)
		
		# Jumping to endif_8741300543064
		j endif_8741300543064
		
		else_8741300543064:
		
		# Get attribute columns of self
		lw $t0, 52($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300483997
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300483997
		j object_get_attribute_8741300483997
		int_get_attribute_8741300483997:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_7 = self.columns
		j end_get_attribute_8741300483997
		bool_get_attribute_8741300483997:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_7 = self.columns
		j end_get_attribute_8741300483997
		object_get_attribute_8741300483997:
		sw $t1, 16($sp) # internal_7 = self.columns
		end_get_attribute_8741300483997:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_7
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_8 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_10 = address of allocated object Int
		
		# Get method cell of CellularAutomaton
		lw $t0, 52($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_8
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function internal_11
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_9
		lw $t0, 8($sp)
		sw $t0, 44($sp)
		
		# Jumping to endif_8741300543064
		j endif_8741300543064
		
		endif_8741300543064:
		
		# Loading return value in $v1
		lw $v1, 44($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 48
		
		jr $ra
		
	function_south_at_CellularAutomaton:
		# Function parameters
		#   $ra = 56($sp)
		#   self = 52($sp)
		#   position = 48($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -48
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 52($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300484401
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300484401
		j object_get_attribute_8741300484401
		int_get_attribute_8741300484401:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300484401
		bool_get_attribute_8741300484401:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 36($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300484401
		object_get_attribute_8741300484401:
		sw $t1, 36($sp) # internal_2 = self.board_size
		end_get_attribute_8741300484401:
		
		# Get attribute columns of self
		lw $t0, 52($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300484428
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300484428
		j object_get_attribute_8741300484428
		int_get_attribute_8741300484428:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_3 = self.columns
		j end_get_attribute_8741300484428
		bool_get_attribute_8741300484428:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_3 = self.columns
		j end_get_attribute_8741300484428
		object_get_attribute_8741300484428:
		sw $t1, 32($sp) # internal_3 = self.columns
		end_get_attribute_8741300484428:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_3
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_4
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_5
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# If internal_1 then goto then_8741300543130
		lw $t0, 40($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300543130
		
		# Jumping to else_8741300543130
		j else_8741300543130
		
		then_8741300543130:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_6 = " "
		
		# internal_0 = internal_6
		lw $t0, 20($sp)
		sw $t0, 44($sp)
		
		# Jumping to endif_8741300543130
		j endif_8741300543130
		
		else_8741300543130:
		
		# Get attribute columns of self
		lw $t0, 52($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300484569
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300484569
		j object_get_attribute_8741300484569
		int_get_attribute_8741300484569:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_7 = self.columns
		j end_get_attribute_8741300484569
		bool_get_attribute_8741300484569:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_7 = self.columns
		j end_get_attribute_8741300484569
		object_get_attribute_8741300484569:
		sw $t1, 16($sp) # internal_7 = self.columns
		end_get_attribute_8741300484569:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 60($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_7
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_8 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_10 = address of allocated object Int
		
		# Get method cell of CellularAutomaton
		lw $t0, 52($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_8
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function internal_11
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_9
		lw $t0, 8($sp)
		sw $t0, 44($sp)
		
		# Jumping to endif_8741300543130
		j endif_8741300543130
		
		endif_8741300543130:
		
		# Loading return value in $v1
		lw $v1, 44($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 48
		
		jr $ra
		
	function_east_at_CellularAutomaton:
		# Function parameters
		#   $ra = 76($sp)
		#   self = 72($sp)
		#   position = 68($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -68
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_3 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 72($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300485045
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300485045
		j object_get_attribute_8741300485045
		int_get_attribute_8741300485045:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_4 = self.columns
		j end_get_attribute_8741300485045
		bool_get_attribute_8741300485045:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_4 = self.columns
		j end_get_attribute_8741300485045
		object_get_attribute_8741300485045:
		sw $t1, 48($sp) # internal_4 = self.columns
		end_get_attribute_8741300485045:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_5 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 72($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300485072
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300485072
		j object_get_attribute_8741300485072
		int_get_attribute_8741300485072:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_6 = self.columns
		j end_get_attribute_8741300485072
		bool_get_attribute_8741300485072:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_6 = self.columns
		j end_get_attribute_8741300485072
		object_get_attribute_8741300485072:
		sw $t1, 40($sp) # internal_6 = self.columns
		end_get_attribute_8741300485072:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_5
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_5
		
		# Argument internal_6
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_7 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_8 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_8
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_8
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_9 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_7
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_7
		
		# Argument internal_9
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_10 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_10
		lw $t0, 24($sp)
		sw $t0, 60($sp)
		
		# If internal_1 then goto then_8741300543199
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300543199
		
		# Jumping to else_8741300543199
		j else_8741300543199
		
		then_8741300543199:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_11[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_11 = " "
		
		# internal_0 = internal_11
		lw $t0, 20($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300543199
		j endif_8741300543199
		
		else_8741300543199:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_12 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_12
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_13 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_15 = address of allocated object Int
		
		# Get method cell of CellularAutomaton
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function internal_16
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_14 = result of internal_16
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_0 = internal_14
		lw $t0, 8($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300543199
		j endif_8741300543199
		
		endif_8741300543199:
		
		# Loading return value in $v1
		lw $v1, 64($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 68
		
		jr $ra
		
	function_west_at_CellularAutomaton:
		# Function parameters
		#   $ra = 80($sp)
		#   self = 76($sp)
		#   position = 72($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -72
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_2 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_3 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_3
		lw $t0, 56($sp)
		sw $t0, 64($sp)
		
		# If internal_1 then goto then_8741300543549
		lw $t0, 64($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300543549
		
		# Jumping to else_8741300543549
		j else_8741300543549
		
		then_8741300543549:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_4[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # internal_4 = " "
		
		# internal_0 = internal_4
		lw $t0, 52($sp)
		sw $t0, 68($sp)
		
		# Jumping to endif_8741300543549
		j endif_8741300543549
		
		else_8741300543549:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_6 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300486352
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300486352
		j object_get_attribute_8741300486352
		int_get_attribute_8741300486352:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_7 = self.columns
		j end_get_attribute_8741300486352
		bool_get_attribute_8741300486352:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_7 = self.columns
		j end_get_attribute_8741300486352
		object_get_attribute_8741300486352:
		sw $t1, 40($sp) # internal_7 = self.columns
		end_get_attribute_8741300486352:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_7
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_7
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_8 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 76($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300486379
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300486379
		j object_get_attribute_8741300486379
		int_get_attribute_8741300486379:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_9 = self.columns
		j end_get_attribute_8741300486379
		bool_get_attribute_8741300486379:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_9 = self.columns
		j end_get_attribute_8741300486379
		object_get_attribute_8741300486379:
		sw $t1, 32($sp) # internal_9 = self.columns
		end_get_attribute_8741300486379:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_8
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_8
		
		# Argument internal_9
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_10 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_11 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_6 = internal_11
		lw $t0, 24($sp)
		sw $t0, 44($sp)
		
		# If internal_6 then goto then_8741300543648
		lw $t0, 44($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300543648
		
		# Jumping to else_8741300543648
		j else_8741300543648
		
		then_8741300543648:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_12[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_12 = " "
		
		# internal_5 = internal_12
		lw $t0, 20($sp)
		sw $t0, 48($sp)
		
		# Jumping to endif_8741300543648
		j endif_8741300543648
		
		else_8741300543648:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_13 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 84($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_13
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_14 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_16 = address of allocated object Int
		
		# Get method cell of CellularAutomaton
		lw $t0, 76($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 88($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_14
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function internal_17
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_15 = result of internal_17
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_5 = internal_15
		lw $t0, 8($sp)
		sw $t0, 48($sp)
		
		# Jumping to endif_8741300543648
		j endif_8741300543648
		
		endif_8741300543648:
		
		# internal_0 = internal_5
		lw $t0, 48($sp)
		sw $t0, 68($sp)
		
		# Jumping to endif_8741300543549
		j endif_8741300543549
		
		endif_8741300543549:
		
		# Loading return value in $v1
		lw $v1, 68($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 72
		
		jr $ra
		
	function_northwest_at_CellularAutomaton:
		# Function parameters
		#   $ra = 88($sp)
		#   self = 84($sp)
		#   position = 80($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -80
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_1 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 84($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300487208
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300487208
		j object_get_attribute_8741300487208
		int_get_attribute_8741300487208:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_2 = self.columns
		j end_get_attribute_8741300487208
		bool_get_attribute_8741300487208:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_2 = self.columns
		j end_get_attribute_8741300487208
		object_get_attribute_8741300487208:
		sw $t1, 68($sp) # internal_2 = self.columns
		end_get_attribute_8741300487208:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 76($sp) # internal_3 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_4 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_5
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# If internal_1 then goto then_8741300543660
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300543660
		
		# Jumping to else_8741300543660
		j else_8741300543660
		
		then_8741300543660:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # internal_6 = " "
		
		# internal_0 = internal_6
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300543660
		j endif_8741300543660
		
		else_8741300543660:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_8 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 84($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300487412
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300487412
		j object_get_attribute_8741300487412
		int_get_attribute_8741300487412:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_9 = self.columns
		j end_get_attribute_8741300487412
		bool_get_attribute_8741300487412:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_9 = self.columns
		j end_get_attribute_8741300487412
		object_get_attribute_8741300487412:
		sw $t1, 40($sp) # internal_9 = self.columns
		end_get_attribute_8741300487412:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_10 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 84($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300487699
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300487699
		j object_get_attribute_8741300487699
		int_get_attribute_8741300487699:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_11 = self.columns
		j end_get_attribute_8741300487699
		bool_get_attribute_8741300487699:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_11 = self.columns
		j end_get_attribute_8741300487699
		object_get_attribute_8741300487699:
		sw $t1, 32($sp) # internal_11 = self.columns
		end_get_attribute_8741300487699:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_12 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_8 = internal_13
		lw $t0, 24($sp)
		sw $t0, 44($sp)
		
		# If internal_8 then goto then_8741300544296
		lw $t0, 44($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300544296
		
		# Jumping to else_8741300544296
		j else_8741300544296
		
		then_8741300544296:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_14[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_14 = " "
		
		# internal_7 = internal_14
		lw $t0, 20($sp)
		sw $t0, 48($sp)
		
		# Jumping to endif_8741300544296
		j endif_8741300544296
		
		else_8741300544296:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_16 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 14
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_18 = address of allocated object Int
		
		# Get method north of CellularAutomaton
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_16
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function internal_19
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_17 = result of internal_19
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = internal_17
		lw $t0, 8($sp)
		sw $t0, 48($sp)
		
		# Jumping to endif_8741300544296
		j endif_8741300544296
		
		endif_8741300544296:
		
		# internal_0 = internal_7
		lw $t0, 48($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300543660
		j endif_8741300543660
		
		endif_8741300543660:
		
		# Loading return value in $v1
		lw $v1, 76($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 80
		
		jr $ra
		
	function_northeast_at_CellularAutomaton:
		# Function parameters
		#   $ra = 104($sp)
		#   self = 100($sp)
		#   position = 96($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -96
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_1 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 100($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300488268
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300488268
		j object_get_attribute_8741300488268
		int_get_attribute_8741300488268:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp) # internal_2 = self.columns
		j end_get_attribute_8741300488268
		bool_get_attribute_8741300488268:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp) # internal_2 = self.columns
		j end_get_attribute_8741300488268
		object_get_attribute_8741300488268:
		sw $t1, 84($sp) # internal_2 = self.columns
		end_get_attribute_8741300488268:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_2
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_3 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_4 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_3
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing internal_3
		
		# Argument internal_4
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_5
		lw $t0, 72($sp)
		sw $t0, 88($sp)
		
		# If internal_1 then goto then_8741300544308
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300544308
		
		# Jumping to else_8741300544308
		j else_8741300544308
		
		then_8741300544308:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 68($sp) # internal_6 = " "
		
		# internal_0 = internal_6
		lw $t0, 68($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8741300544308
		j endif_8741300544308
		
		else_8741300544308:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_8 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_9 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 100($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300488518
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300488518
		j object_get_attribute_8741300488518
		int_get_attribute_8741300488518:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_11 = self.columns
		j end_get_attribute_8741300488518
		bool_get_attribute_8741300488518:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_11 = self.columns
		j end_get_attribute_8741300488518
		object_get_attribute_8741300488518:
		sw $t1, 48($sp) # internal_11 = self.columns
		end_get_attribute_8741300488518:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_12 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 100($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300488545
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300488545
		j object_get_attribute_8741300488545
		int_get_attribute_8741300488545:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_13 = self.columns
		j end_get_attribute_8741300488545
		bool_get_attribute_8741300488545:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_13 = self.columns
		j end_get_attribute_8741300488545
		object_get_attribute_8741300488545:
		sw $t1, 40($sp) # internal_13 = self.columns
		end_get_attribute_8741300488545:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_13
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_14 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_16 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_14
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_14
		
		# Argument internal_16
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_17 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_8 = internal_17
		lw $t0, 24($sp)
		sw $t0, 60($sp)
		
		# If internal_8 then goto then_8741300544452
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300544452
		
		# Jumping to else_8741300544452
		j else_8741300544452
		
		then_8741300544452:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_18[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_18 = " "
		
		# internal_7 = internal_18
		lw $t0, 20($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300544452
		j endif_8741300544452
		
		else_8741300544452:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_19 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_19
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_20 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 14
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_22 = address of allocated object Int
		
		# Get method north of CellularAutomaton
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_20
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_21 = result of internal_23
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = internal_21
		lw $t0, 8($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300544452
		j endif_8741300544452
		
		endif_8741300544452:
		
		# internal_0 = internal_7
		lw $t0, 64($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8741300544308
		j endif_8741300544308
		
		endif_8741300544308:
		
		# Loading return value in $v1
		lw $v1, 92($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 96
		
		jr $ra
		
	function_southeast_at_CellularAutomaton:
		# Function parameters
		#   $ra = 104($sp)
		#   self = 100($sp)
		#   position = 96($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -96
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 100($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300489141
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300489141
		j object_get_attribute_8741300489141
		int_get_attribute_8741300489141:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300489141
		bool_get_attribute_8741300489141:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 84($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300489141
		object_get_attribute_8741300489141:
		sw $t1, 84($sp) # internal_2 = self.board_size
		end_get_attribute_8741300489141:
		
		# Get attribute columns of self
		lw $t0, 100($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300489168
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300489168
		j object_get_attribute_8741300489168
		int_get_attribute_8741300489168:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 80($sp) # internal_3 = self.columns
		j end_get_attribute_8741300489168
		bool_get_attribute_8741300489168:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 80($sp) # internal_3 = self.columns
		j end_get_attribute_8741300489168
		object_get_attribute_8741300489168:
		sw $t1, 80($sp) # internal_3 = self.columns
		end_get_attribute_8741300489168:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_3
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_4
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_5
		lw $t0, 72($sp)
		sw $t0, 88($sp)
		
		# If internal_1 then goto then_8741300544467
		lw $t0, 88($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300544467
		
		# Jumping to else_8741300544467
		j else_8741300544467
		
		then_8741300544467:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 68($sp) # internal_6 = " "
		
		# internal_0 = internal_6
		lw $t0, 68($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8741300544467
		j endif_8741300544467
		
		else_8741300544467:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_8 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_9 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_10 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 100($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300490174
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300490174
		j object_get_attribute_8741300490174
		int_get_attribute_8741300490174:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_11 = self.columns
		j end_get_attribute_8741300490174
		bool_get_attribute_8741300490174:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 48($sp) # internal_11 = self.columns
		j end_get_attribute_8741300490174
		object_get_attribute_8741300490174:
		sw $t1, 48($sp) # internal_11 = self.columns
		end_get_attribute_8741300490174:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 64($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_12 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 100($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300490201
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300490201
		j object_get_attribute_8741300490201
		int_get_attribute_8741300490201:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_13 = self.columns
		j end_get_attribute_8741300490201
		bool_get_attribute_8741300490201:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_13 = self.columns
		j end_get_attribute_8741300490201
		object_get_attribute_8741300490201:
		sw $t1, 40($sp) # internal_13 = self.columns
		end_get_attribute_8741300490201:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 56($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument internal_13
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_14 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_16 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_14
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_14
		
		# Argument internal_16
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_17 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_8 = internal_17
		lw $t0, 24($sp)
		sw $t0, 60($sp)
		
		# If internal_8 then goto then_8741300544868
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300544868
		
		# Jumping to else_8741300544868
		j else_8741300544868
		
		then_8741300544868:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_18[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_18 = " "
		
		# internal_7 = internal_18
		lw $t0, 20($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300544868
		j endif_8741300544868
		
		else_8741300544868:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_19 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 108($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_19
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_20 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 15
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_22 = address of allocated object Int
		
		# Get method south of CellularAutomaton
		lw $t0, 100($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 112($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_20
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function internal_23
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_21 = result of internal_23
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = internal_21
		lw $t0, 8($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300544868
		j endif_8741300544868
		
		endif_8741300544868:
		
		# internal_0 = internal_7
		lw $t0, 64($sp)
		sw $t0, 92($sp)
		
		# Jumping to endif_8741300544467
		j endif_8741300544467
		
		endif_8741300544467:
		
		# Loading return value in $v1
		lw $v1, 92($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 96
		
		jr $ra
		
	function_southwest_at_CellularAutomaton:
		# Function parameters
		#   $ra = 88($sp)
		#   self = 84($sp)
		#   position = 80($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -80
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_1 = address of allocated object Int
		
		# Get attribute board_size of self
		lw $t0, 84($sp) # Get the address of self
		lw $t1, 16($t0) # Get the attribute 'board_size' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300491057
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300491057
		j object_get_attribute_8741300491057
		int_get_attribute_8741300491057:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300491057
		bool_get_attribute_8741300491057:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 68($sp) # internal_2 = self.board_size
		j end_get_attribute_8741300491057
		object_get_attribute_8741300491057:
		sw $t1, 68($sp) # internal_2 = self.board_size
		end_get_attribute_8741300491057:
		
		# Get attribute columns of self
		lw $t0, 84($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300491084
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300491084
		j object_get_attribute_8741300491084
		int_get_attribute_8741300491084:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp) # internal_3 = self.columns
		j end_get_attribute_8741300491084
		bool_get_attribute_8741300491084:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 64($sp) # internal_3 = self.columns
		j end_get_attribute_8741300491084
		object_get_attribute_8741300491084:
		sw $t1, 64($sp) # internal_3 = self.columns
		end_get_attribute_8741300491084:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_3
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_4 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_4
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_4
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_5 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_5
		lw $t0, 56($sp)
		sw $t0, 72($sp)
		
		# If internal_1 then goto then_8741300544883
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300544883
		
		# Jumping to else_8741300544883
		j else_8741300544883
		
		then_8741300544883:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_6[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 52($sp) # internal_6 = " "
		
		# internal_0 = internal_6
		lw $t0, 52($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300544883
		j endif_8741300544883
		
		else_8741300544883:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_8 = address of allocated object Int
		
		# Get attribute columns of self
		lw $t0, 84($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300491536
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300491536
		j object_get_attribute_8741300491536
		int_get_attribute_8741300491536:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_9 = self.columns
		j end_get_attribute_8741300491536
		bool_get_attribute_8741300491536:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 40($sp) # internal_9 = self.columns
		j end_get_attribute_8741300491536
		object_get_attribute_8741300491536:
		sw $t1, 40($sp) # internal_9 = self.columns
		end_get_attribute_8741300491536:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_9
		lw $t0, 52($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 48($sp) # internal_10 = result of function_div
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Get attribute columns of self
		lw $t0, 84($sp) # Get the address of self
		lw $t1, 12($t0) # Get the attribute 'columns' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300491563
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300491563
		j object_get_attribute_8741300491563
		int_get_attribute_8741300491563:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_11 = self.columns
		j end_get_attribute_8741300491563
		bool_get_attribute_8741300491563:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_11 = self.columns
		j end_get_attribute_8741300491563
		object_get_attribute_8741300491563:
		sw $t1, 32($sp) # internal_11 = self.columns
		end_get_attribute_8741300491563:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 48($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_11
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_11
		
		# Calling function function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_12 = result of function_mult
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_12
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_12
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 36($sp) # internal_13 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_8 = internal_13
		lw $t0, 24($sp)
		sw $t0, 44($sp)
		
		# If internal_8 then goto then_8741300545000
		lw $t0, 44($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545000
		
		# Jumping to else_8741300545000
		j else_8741300545000
		
		then_8741300545000:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_14[0] = ' '
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 20($sp) # internal_14 = " "
		
		# internal_7 = internal_14
		lw $t0, 20($sp)
		sw $t0, 48($sp)
		
		# Jumping to endif_8741300545000
		j endif_8741300545000
		
		else_8741300545000:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_16 = result of function_sub
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 15
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_18 = address of allocated object Int
		
		# Get method south of CellularAutomaton
		lw $t0, 84($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_16
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function internal_19
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_17 = result of internal_19
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_7 = internal_17
		lw $t0, 8($sp)
		sw $t0, 48($sp)
		
		# Jumping to endif_8741300545000
		j endif_8741300545000
		
		endif_8741300545000:
		
		# internal_0 = internal_7
		lw $t0, 48($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300544883
		j endif_8741300544883
		
		endif_8741300544883:
		
		# Loading return value in $v1
		lw $v1, 76($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 80
		
		jr $ra
		
	function_neighbors_at_CellularAutomaton:
		# Function parameters
		#   $ra = 324($sp)
		#   self = 320($sp)
		#   position = 316($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -316
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 308($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 14
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 300($sp) # internal_3 = address of allocated object Int
		
		# Get method north of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 300($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 296($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_4
		lw $t0, 308($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 316($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_5[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 292($sp) # internal_5 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 316($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_5
		lw $t0, 304($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 300($sp) # internal_6 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_6
		lw $t0, 288($sp)
		sw $t0, 308($sp)
		
		# If internal_1 then goto then_8741300545287
		lw $t0, 308($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545287
		
		# Jumping to else_8741300545287
		j else_8741300545287
		
		then_8741300545287:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 284($sp) # internal_7 = address of allocated object Int
		
		# internal_0 = internal_7
		lw $t0, 284($sp)
		sw $t0, 312($sp)
		
		# Jumping to endif_8741300545287
		j endif_8741300545287
		
		else_8741300545287:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 280($sp) # internal_8 = address of allocated object Int
		
		# internal_0 = internal_8
		lw $t0, 280($sp)
		sw $t0, 312($sp)
		
		# Jumping to endif_8741300545287
		j endif_8741300545287
		
		endif_8741300545287:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_10 = address of allocated object Int
		
		# Allocating Int 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 15
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 264($sp) # internal_12 = address of allocated object Int
		
		# Get method south of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 264($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 260($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_13
		lw $t0, 272($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 280($sp) # internal_11 = result of internal_13
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_14[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 256($sp) # internal_14 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_11
		lw $t0, 280($sp)
		sw $t0, 4($sp) # Storing internal_11
		
		# Argument internal_14
		lw $t0, 268($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 264($sp) # internal_15 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_10 = internal_15
		lw $t0, 252($sp)
		sw $t0, 272($sp)
		
		# If internal_10 then goto then_8741300545335
		lw $t0, 272($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545335
		
		# Jumping to else_8741300545335
		j else_8741300545335
		
		then_8741300545335:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 248($sp) # internal_16 = address of allocated object Int
		
		# internal_9 = internal_16
		lw $t0, 248($sp)
		sw $t0, 276($sp)
		
		# Jumping to endif_8741300545335
		j endif_8741300545335
		
		else_8741300545335:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 244($sp) # internal_17 = address of allocated object Int
		
		# internal_9 = internal_17
		lw $t0, 244($sp)
		sw $t0, 276($sp)
		
		# Jumping to endif_8741300545335
		j endif_8741300545335
		
		endif_8741300545335:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 324($sp)
		sw $t0, 4($sp) # Storing internal_0
		
		# Argument internal_9
		lw $t0, 288($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 252($sp) # internal_18 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_20 = address of allocated object Int
		
		# Allocating Int 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 16
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 224($sp) # internal_22 = address of allocated object Int
		
		# Get method east of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 224($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 220($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_23
		lw $t0, 232($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_21 = result of internal_23
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_24[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 216($sp) # internal_24 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_21
		lw $t0, 240($sp)
		sw $t0, 4($sp) # Storing internal_21
		
		# Argument internal_24
		lw $t0, 228($sp)
		sw $t0, 0($sp) # Storing internal_24
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 224($sp) # internal_25 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_20 = internal_25
		lw $t0, 212($sp)
		sw $t0, 232($sp)
		
		# If internal_20 then goto then_8741300545380
		lw $t0, 232($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545380
		
		# Jumping to else_8741300545380
		j else_8741300545380
		
		then_8741300545380:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 208($sp) # internal_26 = address of allocated object Int
		
		# internal_19 = internal_26
		lw $t0, 208($sp)
		sw $t0, 236($sp)
		
		# Jumping to endif_8741300545380
		j endif_8741300545380
		
		else_8741300545380:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 204($sp) # internal_27 = address of allocated object Int
		
		# internal_19 = internal_27
		lw $t0, 204($sp)
		sw $t0, 236($sp)
		
		# Jumping to endif_8741300545380
		j endif_8741300545380
		
		endif_8741300545380:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 252($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument internal_19
		lw $t0, 248($sp)
		sw $t0, 0($sp) # Storing internal_19
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 212($sp) # internal_28 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_30 = address of allocated object Int
		
		# Allocating Int 17
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 17
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 184($sp) # internal_32 = address of allocated object Int
		
		# Get method west of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 184($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 180($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_33
		lw $t0, 192($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_31 = result of internal_33
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_34[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 176($sp) # internal_34 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_31
		lw $t0, 200($sp)
		sw $t0, 4($sp) # Storing internal_31
		
		# Argument internal_34
		lw $t0, 188($sp)
		sw $t0, 0($sp) # Storing internal_34
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 184($sp) # internal_35 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_30 = internal_35
		lw $t0, 172($sp)
		sw $t0, 192($sp)
		
		# If internal_30 then goto then_8741300545425
		lw $t0, 192($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545425
		
		# Jumping to else_8741300545425
		j else_8741300545425
		
		then_8741300545425:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 168($sp) # internal_36 = address of allocated object Int
		
		# internal_29 = internal_36
		lw $t0, 168($sp)
		sw $t0, 196($sp)
		
		# Jumping to endif_8741300545425
		j endif_8741300545425
		
		else_8741300545425:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 164($sp) # internal_37 = address of allocated object Int
		
		# internal_29 = internal_37
		lw $t0, 164($sp)
		sw $t0, 196($sp)
		
		# Jumping to endif_8741300545425
		j endif_8741300545425
		
		endif_8741300545425:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_28
		lw $t0, 212($sp)
		sw $t0, 4($sp) # Storing internal_28
		
		# Argument internal_29
		lw $t0, 208($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 172($sp) # internal_38 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_40 = address of allocated object Int
		
		# Allocating Int 19
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 19
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_42 = address of allocated object Int
		
		# Get method northeast of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_43
		lw $t0, 152($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_41 = result of internal_43
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_44[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 136($sp) # internal_44 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_41
		lw $t0, 160($sp)
		sw $t0, 4($sp) # Storing internal_41
		
		# Argument internal_44
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_44
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_45 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_40 = internal_45
		lw $t0, 132($sp)
		sw $t0, 152($sp)
		
		# If internal_40 then goto then_8741300545470
		lw $t0, 152($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545470
		
		# Jumping to else_8741300545470
		j else_8741300545470
		
		then_8741300545470:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_46 = address of allocated object Int
		
		# internal_39 = internal_46
		lw $t0, 128($sp)
		sw $t0, 156($sp)
		
		# Jumping to endif_8741300545470
		j endif_8741300545470
		
		else_8741300545470:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 124($sp) # internal_47 = address of allocated object Int
		
		# internal_39 = internal_47
		lw $t0, 124($sp)
		sw $t0, 156($sp)
		
		# Jumping to endif_8741300545470
		j endif_8741300545470
		
		endif_8741300545470:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_38
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing internal_38
		
		# Argument internal_39
		lw $t0, 168($sp)
		sw $t0, 0($sp) # Storing internal_39
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 132($sp) # internal_48 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_50 = address of allocated object Int
		
		# Allocating Int 18
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 18
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_52 = address of allocated object Int
		
		# Get method northwest of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 104($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 100($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_53
		lw $t0, 112($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_51 = result of internal_53
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_54[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 96($sp) # internal_54 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_51
		lw $t0, 120($sp)
		sw $t0, 4($sp) # Storing internal_51
		
		# Argument internal_54
		lw $t0, 108($sp)
		sw $t0, 0($sp) # Storing internal_54
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 104($sp) # internal_55 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_50 = internal_55
		lw $t0, 92($sp)
		sw $t0, 112($sp)
		
		# If internal_50 then goto then_8741300545515
		lw $t0, 112($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545515
		
		# Jumping to else_8741300545515
		j else_8741300545515
		
		then_8741300545515:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 88($sp) # internal_56 = address of allocated object Int
		
		# internal_49 = internal_56
		lw $t0, 88($sp)
		sw $t0, 116($sp)
		
		# Jumping to endif_8741300545515
		j endif_8741300545515
		
		else_8741300545515:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_57 = address of allocated object Int
		
		# internal_49 = internal_57
		lw $t0, 84($sp)
		sw $t0, 116($sp)
		
		# Jumping to endif_8741300545515
		j endif_8741300545515
		
		endif_8741300545515:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_48
		lw $t0, 132($sp)
		sw $t0, 4($sp) # Storing internal_48
		
		# Argument internal_49
		lw $t0, 128($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 92($sp) # internal_58 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_60 = address of allocated object Int
		
		# Allocating Int 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 20
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_62 = address of allocated object Int
		
		# Get method southeast of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_63
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_61 = result of internal_63
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_64[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 56($sp) # internal_64 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_61
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing internal_61
		
		# Argument internal_64
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing internal_64
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 64($sp) # internal_65 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_60 = internal_65
		lw $t0, 52($sp)
		sw $t0, 72($sp)
		
		# If internal_60 then goto then_8741300545820
		lw $t0, 72($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545820
		
		# Jumping to else_8741300545820
		j else_8741300545820
		
		then_8741300545820:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_66 = address of allocated object Int
		
		# internal_59 = internal_66
		lw $t0, 48($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300545820
		j endif_8741300545820
		
		else_8741300545820:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_67 = address of allocated object Int
		
		# internal_59 = internal_67
		lw $t0, 44($sp)
		sw $t0, 76($sp)
		
		# Jumping to endif_8741300545820
		j endif_8741300545820
		
		endif_8741300545820:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_58
		lw $t0, 92($sp)
		sw $t0, 4($sp) # Storing internal_58
		
		# Argument internal_59
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_59
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_68 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_70 = address of allocated object Int
		
		# Allocating Int 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 21
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_72 = address of allocated object Int
		
		# Get method southwest of CellularAutomaton
		lw $t0, 320($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 332($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 328($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_73
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_71 = result of internal_73
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_74[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 16($sp) # internal_74 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_71
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_71
		
		# Argument internal_74
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_74
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_75 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_70 = internal_75
		lw $t0, 12($sp)
		sw $t0, 32($sp)
		
		# If internal_70 then goto then_8741300545865
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545865
		
		# Jumping to else_8741300545865
		j else_8741300545865
		
		then_8741300545865:
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_76 = address of allocated object Int
		
		# internal_69 = internal_76
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8741300545865
		j endif_8741300545865
		
		else_8741300545865:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_77 = address of allocated object Int
		
		# internal_69 = internal_77
		lw $t0, 4($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8741300545865
		j endif_8741300545865
		
		endif_8741300545865:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_68
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing internal_68
		
		# Argument internal_69
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_78 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Loading return value in $v1
		lw $v1, 0($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 316
		
		jr $ra
		
	function_cell_at_next_evolution_at_CellularAutomaton:
		# Function parameters
		#   $ra = 108($sp)
		#   self = 104($sp)
		#   position = 100($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -100
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_1 = address of allocated object Int
		
		# Allocating Int 22
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 22
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 84($sp) # internal_3 = address of allocated object Int
		
		# Get method neighbors of CellularAutomaton
		lw $t0, 104($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 84($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 80($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_4
		lw $t0, 92($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_5 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_2
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing internal_2
		
		# Argument internal_5
		lw $t0, 88($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 84($sp) # internal_6 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_1 = internal_6
		lw $t0, 72($sp)
		sw $t0, 92($sp)
		
		# If internal_1 then goto then_8741300545919
		lw $t0, 92($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545919
		
		# Jumping to else_8741300545919
		j else_8741300545919
		
		then_8741300545919:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_7[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 68($sp) # internal_7 = "X"
		
		# internal_0 = internal_7
		lw $t0, 68($sp)
		sw $t0, 96($sp)
		
		# Jumping to endif_8741300545919
		j endif_8741300545919
		
		else_8741300545919:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_9 = address of allocated object Int
		
		# Allocating Int 22
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 22
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_11 = address of allocated object Int
		
		# Get method neighbors of CellularAutomaton
		lw $t0, 104($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 52($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 48($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_12
		lw $t0, 60($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 68($sp) # internal_10 = result of internal_12
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_13 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_10
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing internal_10
		
		# Argument internal_13
		lw $t0, 56($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 52($sp) # internal_14 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_9 = internal_14
		lw $t0, 40($sp)
		sw $t0, 60($sp)
		
		# If internal_9 then goto then_8741300545943
		lw $t0, 60($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300545943
		
		# Jumping to else_8741300545943
		j else_8741300545943
		
		then_8741300545943:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_16 = address of allocated object Int
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_18 = address of allocated object Int
		
		# Get method cell of CellularAutomaton
		lw $t0, 104($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 116($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_19
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_17 = result of internal_19
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_20[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 16($sp) # internal_20 = "X"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_17
		lw $t0, 40($sp)
		sw $t0, 4($sp) # Storing internal_17
		
		# Argument internal_20
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_20
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 24($sp) # internal_21 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_16 = internal_21
		lw $t0, 12($sp)
		sw $t0, 32($sp)
		
		# If internal_16 then goto then_8741300546015
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300546015
		
		# Jumping to else_8741300546015
		j else_8741300546015
		
		then_8741300546015:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_22[0] = 'X'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 8($sp) # internal_22 = "X"
		
		# internal_15 = internal_22
		lw $t0, 8($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8741300546015
		j endif_8741300546015
		
		else_8741300546015:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_23[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 4($sp) # internal_23 = "-"
		
		# internal_15 = internal_23
		lw $t0, 4($sp)
		sw $t0, 36($sp)
		
		# Jumping to endif_8741300546015
		j endif_8741300546015
		
		endif_8741300546015:
		
		# internal_8 = internal_15
		lw $t0, 36($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300545943
		j endif_8741300545943
		
		else_8741300545943:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 45
		sb $t0, 8($v0) # internal_24[0] = '-'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_24 = "-"
		
		# internal_8 = internal_24
		lw $t0, 0($sp)
		sw $t0, 64($sp)
		
		# Jumping to endif_8741300545943
		j endif_8741300545943
		
		endif_8741300545943:
		
		# internal_0 = internal_8
		lw $t0, 64($sp)
		sw $t0, 96($sp)
		
		# Jumping to endif_8741300545919
		j endif_8741300545919
		
		endif_8741300545919:
		
		# Loading return value in $v1
		lw $v1, 96($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 100
		
		jr $ra
		
	function_evolve_at_CellularAutomaton:
		# Function parameters
		#   $ra = 72($sp)
		#   self = 68($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -68
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 60($sp) # internal_1 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_1
		lw $t0, 72($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 76($sp) # position = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 12
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_4 = address of allocated object Int
		
		# Get method num_cells of CellularAutomaton
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_5
		lw $t0, 52($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 60($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 68($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_3
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_3
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 68($sp) # num = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 40($sp) # temp = ""
		
		# Allocating NUll to internal_7
		sw $zero, 36($sp) # internal_7 = 0
		
		while_start_8741300514085:
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument num
		lw $t0, 68($sp)
		sw $t0, 0($sp) # Storing num
		
		# Calling function function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_8 = result of function_less_than
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# If internal_8 then goto while_body_8741300514085
		lw $t0, 32($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8741300514085
		
		# Jumping to while_end_8741300514085
		j while_end_8741300514085
		
		while_body_8741300514085:
		
		# Allocating Int 23
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 23
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_10 = address of allocated object Int
		
		# Get method cell_at_next_evolution of CellularAutomaton
		lw $t0, 68($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 80($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing position
		
		# Calling function internal_11
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_13 = address of allocated object Int
		
		# Get method concat of String
		lw $t0, 40($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 12($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 8($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument temp
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing temp
		
		# Argument internal_9
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function internal_14
		lw $t0, 20($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 28($sp) # internal_12 = result of internal_14
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument temp
		lw $t0, 52($sp)
		sw $t0, 4($sp) # Storing temp
		
		# Argument internal_12
		lw $t0, 28($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 52($sp) # temp = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_15 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_15
		lw $t0, 16($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 12($sp) # internal_16 = result of function_add
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument position
		lw $t0, 76($sp)
		sw $t0, 4($sp) # Storing position
		
		# Argument internal_16
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_16
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 76($sp) # position = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Jumping to while_start_8741300514085
		j while_start_8741300514085
		
		while_end_8741300514085:
		
		# Set attribute population_map of self
		lw $t0, 68($sp) # $t0 = self
		lw $t1, 40($sp) # $t1 = temp
		beq $t1, $zero, object_set_attribute_8741300466348
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300466348
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300466348
		j object_set_attribute_8741300466348
		int_set_attribute_8741300466348:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = temp
		j end_set_attribute_8741300466348
		bool_set_attribute_8741300466348:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = temp
		j end_set_attribute_8741300466348
		object_set_attribute_8741300466348:
		sw $t1, 20($t0) # self.population_map = temp
		end_set_attribute_8741300466348:
		
		# Loading return value in $v1
		lw $v1, 68($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 68
		
		jr $ra
		
	function_option_at_CellularAutomaton:
		# Function parameters
		#   $ra = 828($sp)
		#   self = 824($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -824
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 820($sp) # num = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 33
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_1[0] = '\n'
		
		addi $t0, $zero, 80
		sb $t0, 9($v0) # internal_1[1] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 10($v0) # internal_1[2] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 11($v0) # internal_1[3] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 12($v0) # internal_1[4] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 13($v0) # internal_1[5] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_1[6] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_1[7] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 16($v0) # internal_1[8] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 17($v0) # internal_1[9] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 18($v0) # internal_1[10] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_1[11] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 20($v0) # internal_1[12] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_1[13] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 22($v0) # internal_1[14] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_1[15] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_1[16] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 25($v0) # internal_1[17] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 26($v0) # internal_1[18] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 27($v0) # internal_1[19] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 28($v0) # internal_1[20] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 29($v0) # internal_1[21] = 'r'
		
		addi $t0, $zero, 58
		sb $t0, 30($v0) # internal_1[22] = ':'
		
		addi $t0, $zero, 10
		sb $t0, 31($v0) # internal_1[23] = '\n'
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 816($sp) # internal_1 = "\nPlease chose a number:\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 808($sp) # internal_3 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 808($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 804($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_1
		lw $t0, 828($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function internal_4
		lw $t0, 816($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 824($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_5[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_5[1] = '1'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_5[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_5[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_5[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_5[5] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 14($v0) # internal_5[6] = 'c'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_5[7] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 16($v0) # internal_5[8] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_5[9] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 18($v0) # internal_5[10] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_5[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 800($sp) # internal_5 = "\t1: A cross\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 792($sp) # internal_7 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 792($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 788($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_5
		lw $t0, 812($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function internal_8
		lw $t0, 800($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 808($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 56 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 56
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_9[0] = '\t'
		
		addi $t0, $zero, 50
		sb $t0, 9($v0) # internal_9[1] = '2'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_9[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_9[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_9[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_9[5] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 14($v0) # internal_9[6] = 's'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_9[7] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 16($v0) # internal_9[8] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_9[9] = 's'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_9[10] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_9[11] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 20($v0) # internal_9[12] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 21($v0) # internal_9[13] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 22($v0) # internal_9[14] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 23($v0) # internal_9[15] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_9[16] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 25($v0) # internal_9[17] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 26($v0) # internal_9[18] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_9[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_9[20] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 29($v0) # internal_9[21] = 'u'
		
		addi $t0, $zero, 112
		sb $t0, 30($v0) # internal_9[22] = 'p'
		
		addi $t0, $zero, 112
		sb $t0, 31($v0) # internal_9[23] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_9[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_9[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_9[26] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 35($v0) # internal_9[27] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 36($v0) # internal_9[28] = 'e'
		
		addi $t0, $zero, 102
		sb $t0, 37($v0) # internal_9[29] = 'f'
		
		addi $t0, $zero, 116
		sb $t0, 38($v0) # internal_9[30] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_9[31] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 40($v0) # internal_9[32] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_9[33] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 42($v0) # internal_9[34] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 43($v0) # internal_9[35] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 44($v0) # internal_9[36] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 45($v0) # internal_9[37] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 46($v0) # internal_9[38] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 47($v0) # internal_9[39] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 48($v0) # internal_9[40] = ' '
		
		addi $t0, $zero, 114
		sb $t0, 49($v0) # internal_9[41] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 50($v0) # internal_9[42] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 51($v0) # internal_9[43] = 'g'
		
		addi $t0, $zero, 104
		sb $t0, 52($v0) # internal_9[44] = 'h'
		
		addi $t0, $zero, 116
		sb $t0, 53($v0) # internal_9[45] = 't'
		
		addi $t0, $zero, 10
		sb $t0, 54($v0) # internal_9[46] = '\n'
		
		sb $zero, 55($v0) # Null-terminator at the end of the string
		
		sw $v0, 784($sp) # internal_9 = "\t2: A slash from the upper left to lower right\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 776($sp) # internal_11 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 776($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 772($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_9
		lw $t0, 796($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function internal_12
		lw $t0, 784($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 792($sp) # internal_10 = result of internal_12
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 56 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 56
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_13[0] = '\t'
		
		addi $t0, $zero, 51
		sb $t0, 9($v0) # internal_13[1] = '3'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_13[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_13[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_13[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_13[5] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 14($v0) # internal_13[6] = 's'
		
		addi $t0, $zero, 108
		sb $t0, 15($v0) # internal_13[7] = 'l'
		
		addi $t0, $zero, 97
		sb $t0, 16($v0) # internal_13[8] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_13[9] = 's'
		
		addi $t0, $zero, 104
		sb $t0, 18($v0) # internal_13[10] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_13[11] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 20($v0) # internal_13[12] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 21($v0) # internal_13[13] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 22($v0) # internal_13[14] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 23($v0) # internal_13[15] = 'm'
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_13[16] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 25($v0) # internal_13[17] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 26($v0) # internal_13[18] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_13[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_13[20] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 29($v0) # internal_13[21] = 'u'
		
		addi $t0, $zero, 112
		sb $t0, 30($v0) # internal_13[22] = 'p'
		
		addi $t0, $zero, 112
		sb $t0, 31($v0) # internal_13[23] = 'p'
		
		addi $t0, $zero, 101
		sb $t0, 32($v0) # internal_13[24] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 33($v0) # internal_13[25] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_13[26] = ' '
		
		addi $t0, $zero, 114
		sb $t0, 35($v0) # internal_13[27] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 36($v0) # internal_13[28] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 37($v0) # internal_13[29] = 'g'
		
		addi $t0, $zero, 104
		sb $t0, 38($v0) # internal_13[30] = 'h'
		
		addi $t0, $zero, 116
		sb $t0, 39($v0) # internal_13[31] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 40($v0) # internal_13[32] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 41($v0) # internal_13[33] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 42($v0) # internal_13[34] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 43($v0) # internal_13[35] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 44($v0) # internal_13[36] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 45($v0) # internal_13[37] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 46($v0) # internal_13[38] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 47($v0) # internal_13[39] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 48($v0) # internal_13[40] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 49($v0) # internal_13[41] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 50($v0) # internal_13[42] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 51($v0) # internal_13[43] = 'e'
		
		addi $t0, $zero, 102
		sb $t0, 52($v0) # internal_13[44] = 'f'
		
		addi $t0, $zero, 116
		sb $t0, 53($v0) # internal_13[45] = 't'
		
		addi $t0, $zero, 10
		sb $t0, 54($v0) # internal_13[46] = '\n'
		
		sb $zero, 55($v0) # Null-terminator at the end of the string
		
		sw $v0, 768($sp) # internal_13 = "\t3: A slash from the upper right to lower left\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 760($sp) # internal_15 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 760($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 756($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_13
		lw $t0, 780($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function internal_16
		lw $t0, 768($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 776($sp) # internal_14 = result of internal_16
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 18 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 18
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_17[0] = '\t'
		
		addi $t0, $zero, 52
		sb $t0, 9($v0) # internal_17[1] = '4'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_17[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_17[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_17[4] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 13($v0) # internal_17[5] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_17[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_17[7] = 'X'
		
		addi $t0, $zero, 10
		sb $t0, 16($v0) # internal_17[8] = '\n'
		
		sb $zero, 17($v0) # Null-terminator at the end of the string
		
		sw $v0, 752($sp) # internal_17 = "\t4: An X\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 744($sp) # internal_19 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 744($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 740($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_17
		lw $t0, 764($sp)
		sw $t0, 0($sp) # Storing internal_17
		
		# Calling function internal_20
		lw $t0, 752($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 760($sp) # internal_18 = result of internal_20
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_21[0] = '\t'
		
		addi $t0, $zero, 53
		sb $t0, 9($v0) # internal_21[1] = '5'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_21[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_21[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_21[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_21[5] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 14($v0) # internal_21[6] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_21[7] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 16($v0) # internal_21[8] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 17($v0) # internal_21[9] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 18($v0) # internal_21[10] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_21[11] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 20($v0) # internal_21[12] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_21[13] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 22($v0) # internal_21[14] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 23($v0) # internal_21[15] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 24($v0) # internal_21[16] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 25($v0) # internal_21[17] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_21[18] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 27($v0) # internal_21[19] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 28($v0) # internal_21[20] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 29($v0) # internal_21[21] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 30($v0) # internal_21[22] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_21[23] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 32($v0) # internal_21[24] = '\n'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 736($sp) # internal_21 = "\t5: A greater than sign \n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 728($sp) # internal_23 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 728($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 724($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_21
		lw $t0, 748($sp)
		sw $t0, 0($sp) # Storing internal_21
		
		# Calling function internal_24
		lw $t0, 736($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 744($sp) # internal_22 = result of internal_24
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 30
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_25[0] = '\t'
		
		addi $t0, $zero, 54
		sb $t0, 9($v0) # internal_25[1] = '6'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_25[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_25[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_25[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_25[5] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 14($v0) # internal_25[6] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 15($v0) # internal_25[7] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 16($v0) # internal_25[8] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 17($v0) # internal_25[9] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_25[10] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 19($v0) # internal_25[11] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 20($v0) # internal_25[12] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 21($v0) # internal_25[13] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 22($v0) # internal_25[14] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_25[15] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 24($v0) # internal_25[16] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 25($v0) # internal_25[17] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 26($v0) # internal_25[18] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 27($v0) # internal_25[19] = 'n'
		
		addi $t0, $zero, 10
		sb $t0, 28($v0) # internal_25[20] = '\n'
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 720($sp) # internal_25 = "\t6: A less than sign\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 712($sp) # internal_27 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 712($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 708($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_25
		lw $t0, 732($sp)
		sw $t0, 0($sp) # Storing internal_25
		
		# Calling function internal_28
		lw $t0, 720($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 728($sp) # internal_26 = result of internal_28
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 36 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 36
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_29[0] = '\t'
		
		addi $t0, $zero, 55
		sb $t0, 9($v0) # internal_29[1] = '7'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_29[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_29[3] = ' '
		
		addi $t0, $zero, 84
		sb $t0, 12($v0) # internal_29[4] = 'T'
		
		addi $t0, $zero, 119
		sb $t0, 13($v0) # internal_29[5] = 'w'
		
		addi $t0, $zero, 111
		sb $t0, 14($v0) # internal_29[6] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_29[7] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 16($v0) # internal_29[8] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 17($v0) # internal_29[9] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_29[10] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 19($v0) # internal_29[11] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 20($v0) # internal_29[12] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_29[13] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 22($v0) # internal_29[14] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_29[15] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 24($v0) # internal_29[16] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 25($v0) # internal_29[17] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 26($v0) # internal_29[18] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 27($v0) # internal_29[19] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_29[20] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 29($v0) # internal_29[21] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 30($v0) # internal_29[22] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 31($v0) # internal_29[23] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 32($v0) # internal_29[24] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 33($v0) # internal_29[25] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 34($v0) # internal_29[26] = '\n'
		
		sb $zero, 35($v0) # Null-terminator at the end of the string
		
		sw $v0, 704($sp) # internal_29 = "\t7: Two greater than signs\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 696($sp) # internal_31 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 696($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 692($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_29
		lw $t0, 716($sp)
		sw $t0, 0($sp) # Storing internal_29
		
		# Calling function internal_32
		lw $t0, 704($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 712($sp) # internal_30 = result of internal_32
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 33 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 33
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_33[0] = '\t'
		
		addi $t0, $zero, 56
		sb $t0, 9($v0) # internal_33[1] = '8'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_33[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_33[3] = ' '
		
		addi $t0, $zero, 84
		sb $t0, 12($v0) # internal_33[4] = 'T'
		
		addi $t0, $zero, 119
		sb $t0, 13($v0) # internal_33[5] = 'w'
		
		addi $t0, $zero, 111
		sb $t0, 14($v0) # internal_33[6] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_33[7] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_33[8] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_33[9] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 18($v0) # internal_33[10] = 's'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_33[11] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_33[12] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 21($v0) # internal_33[13] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 22($v0) # internal_33[14] = 'h'
		
		addi $t0, $zero, 97
		sb $t0, 23($v0) # internal_33[15] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_33[16] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_33[17] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 26($v0) # internal_33[18] = 's'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_33[19] = 'i'
		
		addi $t0, $zero, 103
		sb $t0, 28($v0) # internal_33[20] = 'g'
		
		addi $t0, $zero, 110
		sb $t0, 29($v0) # internal_33[21] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_33[22] = 's'
		
		addi $t0, $zero, 10
		sb $t0, 31($v0) # internal_33[23] = '\n'
		
		sb $zero, 32($v0) # Null-terminator at the end of the string
		
		sw $v0, 688($sp) # internal_33 = "\t8: Two less than signs\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 680($sp) # internal_35 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 680($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 676($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_33
		lw $t0, 700($sp)
		sw $t0, 0($sp) # Storing internal_33
		
		# Calling function internal_36
		lw $t0, 688($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 696($sp) # internal_34 = result of internal_36
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 19 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 19
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_37[0] = '\t'
		
		addi $t0, $zero, 57
		sb $t0, 9($v0) # internal_37[1] = '9'
		
		addi $t0, $zero, 58
		sb $t0, 10($v0) # internal_37[2] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_37[3] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 12($v0) # internal_37[4] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_37[5] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 14($v0) # internal_37[6] = '''
		
		addi $t0, $zero, 86
		sb $t0, 15($v0) # internal_37[7] = 'V'
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_37[8] = '''
		
		addi $t0, $zero, 10
		sb $t0, 17($v0) # internal_37[9] = '\n'
		
		sb $zero, 18($v0) # Null-terminator at the end of the string
		
		sw $v0, 672($sp) # internal_37 = "\t9: A 'V'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 664($sp) # internal_39 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 664($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 660($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_37
		lw $t0, 684($sp)
		sw $t0, 0($sp) # Storing internal_37
		
		# Calling function internal_40
		lw $t0, 672($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 680($sp) # internal_38 = result of internal_40
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_41[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_41[1] = '1'
		
		addi $t0, $zero, 48
		sb $t0, 10($v0) # internal_41[2] = '0'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_41[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_41[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_41[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_41[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_41[7] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_41[8] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 17($v0) # internal_41[9] = 'n'
		
		addi $t0, $zero, 118
		sb $t0, 18($v0) # internal_41[10] = 'v'
		
		addi $t0, $zero, 101
		sb $t0, 19($v0) # internal_41[11] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 20($v0) # internal_41[12] = 'r'
		
		addi $t0, $zero, 115
		sb $t0, 21($v0) # internal_41[13] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_41[14] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_41[15] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 24($v0) # internal_41[16] = '''
		
		addi $t0, $zero, 86
		sb $t0, 25($v0) # internal_41[17] = 'V'
		
		addi $t0, $zero, 39
		sb $t0, 26($v0) # internal_41[18] = '''
		
		addi $t0, $zero, 10
		sb $t0, 27($v0) # internal_41[19] = '\n'
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 656($sp) # internal_41 = "\t10: An inverse 'V'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 648($sp) # internal_43 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 648($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 644($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_41
		lw $t0, 668($sp)
		sw $t0, 0($sp) # Storing internal_41
		
		# Calling function internal_44
		lw $t0, 656($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 664($sp) # internal_42 = result of internal_44
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 40 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 40
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_45[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_45[1] = '1'
		
		addi $t0, $zero, 49
		sb $t0, 10($v0) # internal_45[2] = '1'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_45[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_45[4] = ' '
		
		addi $t0, $zero, 78
		sb $t0, 13($v0) # internal_45[5] = 'N'
		
		addi $t0, $zero, 117
		sb $t0, 14($v0) # internal_45[6] = 'u'
		
		addi $t0, $zero, 109
		sb $t0, 15($v0) # internal_45[7] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 16($v0) # internal_45[8] = 'b'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_45[9] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 18($v0) # internal_45[10] = 'r'
		
		addi $t0, $zero, 115
		sb $t0, 19($v0) # internal_45[11] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_45[12] = ' '
		
		addi $t0, $zero, 57
		sb $t0, 21($v0) # internal_45[13] = '9'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_45[14] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 23($v0) # internal_45[15] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_45[16] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 25($v0) # internal_45[17] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_45[18] = ' '
		
		addi $t0, $zero, 49
		sb $t0, 27($v0) # internal_45[19] = '1'
		
		addi $t0, $zero, 48
		sb $t0, 28($v0) # internal_45[20] = '0'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_45[21] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 30($v0) # internal_45[22] = 'c'
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_45[23] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 32($v0) # internal_45[24] = 'm'
		
		addi $t0, $zero, 98
		sb $t0, 33($v0) # internal_45[25] = 'b'
		
		addi $t0, $zero, 105
		sb $t0, 34($v0) # internal_45[26] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 35($v0) # internal_45[27] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 36($v0) # internal_45[28] = 'e'
		
		addi $t0, $zero, 100
		sb $t0, 37($v0) # internal_45[29] = 'd'
		
		addi $t0, $zero, 10
		sb $t0, 38($v0) # internal_45[30] = '\n'
		
		sb $zero, 39($v0) # Null-terminator at the end of the string
		
		sw $v0, 640($sp) # internal_45 = "\t11: Numbers 9 and 10 combined\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 632($sp) # internal_47 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 632($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 628($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_45
		lw $t0, 652($sp)
		sw $t0, 0($sp) # Storing internal_45
		
		# Calling function internal_48
		lw $t0, 640($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 648($sp) # internal_46 = result of internal_48
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 26 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 26
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_49[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_49[1] = '1'
		
		addi $t0, $zero, 50
		sb $t0, 10($v0) # internal_49[2] = '2'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_49[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_49[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_49[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_49[6] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 15($v0) # internal_49[7] = 'f'
		
		addi $t0, $zero, 117
		sb $t0, 16($v0) # internal_49[8] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 17($v0) # internal_49[9] = 'l'
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_49[10] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_49[11] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 20($v0) # internal_49[12] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 21($v0) # internal_49[13] = 'r'
		
		addi $t0, $zero, 105
		sb $t0, 22($v0) # internal_49[14] = 'i'
		
		addi $t0, $zero, 100
		sb $t0, 23($v0) # internal_49[15] = 'd'
		
		addi $t0, $zero, 10
		sb $t0, 24($v0) # internal_49[16] = '\n'
		
		sb $zero, 25($v0) # Null-terminator at the end of the string
		
		sw $v0, 624($sp) # internal_49 = "\t12: A full grid\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 616($sp) # internal_51 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 616($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 612($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_49
		lw $t0, 636($sp)
		sw $t0, 0($sp) # Storing internal_49
		
		# Calling function internal_52
		lw $t0, 624($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 632($sp) # internal_50 = result of internal_52
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_53[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_53[1] = '1'
		
		addi $t0, $zero, 51
		sb $t0, 10($v0) # internal_53[2] = '3'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_53[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_53[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_53[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_53[6] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 15($v0) # internal_53[7] = '''
		
		addi $t0, $zero, 84
		sb $t0, 16($v0) # internal_53[8] = 'T'
		
		addi $t0, $zero, 39
		sb $t0, 17($v0) # internal_53[9] = '''
		
		addi $t0, $zero, 10
		sb $t0, 18($v0) # internal_53[10] = '\n'
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 608($sp) # internal_53 = "\t13: A 'T'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 600($sp) # internal_55 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 600($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 596($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_53
		lw $t0, 620($sp)
		sw $t0, 0($sp) # Storing internal_53
		
		# Calling function internal_56
		lw $t0, 608($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 616($sp) # internal_54 = result of internal_56
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_57[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_57[1] = '1'
		
		addi $t0, $zero, 52
		sb $t0, 10($v0) # internal_57[2] = '4'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_57[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_57[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_57[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_57[6] = ' '
		
		addi $t0, $zero, 112
		sb $t0, 15($v0) # internal_57[7] = 'p'
		
		addi $t0, $zero, 108
		sb $t0, 16($v0) # internal_57[8] = 'l'
		
		addi $t0, $zero, 117
		sb $t0, 17($v0) # internal_57[9] = 'u'
		
		addi $t0, $zero, 115
		sb $t0, 18($v0) # internal_57[10] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_57[11] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 20($v0) # internal_57[12] = '''
		
		addi $t0, $zero, 43
		sb $t0, 21($v0) # internal_57[13] = '+'
		
		addi $t0, $zero, 39
		sb $t0, 22($v0) # internal_57[14] = '''
		
		addi $t0, $zero, 10
		sb $t0, 23($v0) # internal_57[15] = '\n'
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 592($sp) # internal_57 = "\t14: A plus '+'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 584($sp) # internal_59 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 584($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 580($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_57
		lw $t0, 604($sp)
		sw $t0, 0($sp) # Storing internal_57
		
		# Calling function internal_60
		lw $t0, 592($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 600($sp) # internal_58 = result of internal_60
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_61[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_61[1] = '1'
		
		addi $t0, $zero, 53
		sb $t0, 10($v0) # internal_61[2] = '5'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_61[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_61[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_61[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_61[6] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 15($v0) # internal_61[7] = '''
		
		addi $t0, $zero, 87
		sb $t0, 16($v0) # internal_61[8] = 'W'
		
		addi $t0, $zero, 39
		sb $t0, 17($v0) # internal_61[9] = '''
		
		addi $t0, $zero, 10
		sb $t0, 18($v0) # internal_61[10] = '\n'
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 576($sp) # internal_61 = "\t15: A 'W'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 568($sp) # internal_63 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 568($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 564($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_61
		lw $t0, 588($sp)
		sw $t0, 0($sp) # Storing internal_61
		
		# Calling function internal_64
		lw $t0, 576($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 584($sp) # internal_62 = result of internal_64
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_65[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_65[1] = '1'
		
		addi $t0, $zero, 54
		sb $t0, 10($v0) # internal_65[2] = '6'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_65[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_65[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_65[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_65[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_65[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_65[8] = '''
		
		addi $t0, $zero, 77
		sb $t0, 17($v0) # internal_65[9] = 'M'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_65[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_65[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 560($sp) # internal_65 = "\t16: An 'M'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 552($sp) # internal_67 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 552($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 548($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_65
		lw $t0, 572($sp)
		sw $t0, 0($sp) # Storing internal_65
		
		# Calling function internal_68
		lw $t0, 560($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 568($sp) # internal_66 = result of internal_68
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_69[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_69[1] = '1'
		
		addi $t0, $zero, 55
		sb $t0, 10($v0) # internal_69[2] = '7'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_69[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_69[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_69[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_69[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_69[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_69[8] = '''
		
		addi $t0, $zero, 69
		sb $t0, 17($v0) # internal_69[9] = 'E'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_69[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_69[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 544($sp) # internal_69 = "\t17: An 'E'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 536($sp) # internal_71 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 536($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 532($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_69
		lw $t0, 556($sp)
		sw $t0, 0($sp) # Storing internal_69
		
		# Calling function internal_72
		lw $t0, 544($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 552($sp) # internal_70 = result of internal_72
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 20 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 20
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_73[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_73[1] = '1'
		
		addi $t0, $zero, 56
		sb $t0, 10($v0) # internal_73[2] = '8'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_73[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_73[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_73[5] = 'A'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_73[6] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 15($v0) # internal_73[7] = '''
		
		addi $t0, $zero, 51
		sb $t0, 16($v0) # internal_73[8] = '3'
		
		addi $t0, $zero, 39
		sb $t0, 17($v0) # internal_73[9] = '''
		
		addi $t0, $zero, 10
		sb $t0, 18($v0) # internal_73[10] = '\n'
		
		sb $zero, 19($v0) # Null-terminator at the end of the string
		
		sw $v0, 528($sp) # internal_73 = "\t18: A '3'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 520($sp) # internal_75 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 520($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 516($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_73
		lw $t0, 540($sp)
		sw $t0, 0($sp) # Storing internal_73
		
		# Calling function internal_76
		lw $t0, 528($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 536($sp) # internal_74 = result of internal_76
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_77[0] = '\t'
		
		addi $t0, $zero, 49
		sb $t0, 9($v0) # internal_77[1] = '1'
		
		addi $t0, $zero, 57
		sb $t0, 10($v0) # internal_77[2] = '9'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_77[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_77[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_77[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_77[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_77[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_77[8] = '''
		
		addi $t0, $zero, 79
		sb $t0, 17($v0) # internal_77[9] = 'O'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_77[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_77[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 512($sp) # internal_77 = "\t19: An 'O'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 504($sp) # internal_79 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 504($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 500($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_77
		lw $t0, 524($sp)
		sw $t0, 0($sp) # Storing internal_77
		
		# Calling function internal_80
		lw $t0, 512($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 520($sp) # internal_78 = result of internal_80
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_81[0] = '\t'
		
		addi $t0, $zero, 50
		sb $t0, 9($v0) # internal_81[1] = '2'
		
		addi $t0, $zero, 48
		sb $t0, 10($v0) # internal_81[2] = '0'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_81[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_81[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_81[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_81[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_81[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_81[8] = '''
		
		addi $t0, $zero, 56
		sb $t0, 17($v0) # internal_81[9] = '8'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_81[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_81[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 496($sp) # internal_81 = "\t20: An '8'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 488($sp) # internal_83 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 488($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 484($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_81
		lw $t0, 508($sp)
		sw $t0, 0($sp) # Storing internal_81
		
		# Calling function internal_84
		lw $t0, 496($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 504($sp) # internal_82 = result of internal_84
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 21 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 21
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 9
		sb $t0, 8($v0) # internal_85[0] = '\t'
		
		addi $t0, $zero, 50
		sb $t0, 9($v0) # internal_85[1] = '2'
		
		addi $t0, $zero, 49
		sb $t0, 10($v0) # internal_85[2] = '1'
		
		addi $t0, $zero, 58
		sb $t0, 11($v0) # internal_85[3] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_85[4] = ' '
		
		addi $t0, $zero, 65
		sb $t0, 13($v0) # internal_85[5] = 'A'
		
		addi $t0, $zero, 110
		sb $t0, 14($v0) # internal_85[6] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_85[7] = ' '
		
		addi $t0, $zero, 39
		sb $t0, 16($v0) # internal_85[8] = '''
		
		addi $t0, $zero, 83
		sb $t0, 17($v0) # internal_85[9] = 'S'
		
		addi $t0, $zero, 39
		sb $t0, 18($v0) # internal_85[10] = '''
		
		addi $t0, $zero, 10
		sb $t0, 19($v0) # internal_85[11] = '\n'
		
		sb $zero, 20($v0) # Null-terminator at the end of the string
		
		sw $v0, 480($sp) # internal_85 = "\t21: An 'S'\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 472($sp) # internal_87 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 472($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 468($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_85
		lw $t0, 492($sp)
		sw $t0, 0($sp) # Storing internal_85
		
		# Calling function internal_88
		lw $t0, 480($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 488($sp) # internal_86 = result of internal_88
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 24
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 89
		sb $t0, 8($v0) # internal_89[0] = 'Y'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_89[1] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 10($v0) # internal_89[2] = 'u'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_89[3] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_89[4] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 13($v0) # internal_89[5] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 14($v0) # internal_89[6] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 15($v0) # internal_89[7] = 'o'
		
		addi $t0, $zero, 105
		sb $t0, 16($v0) # internal_89[8] = 'i'
		
		addi $t0, $zero, 99
		sb $t0, 17($v0) # internal_89[9] = 'c'
		
		addi $t0, $zero, 101
		sb $t0, 18($v0) # internal_89[10] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_89[11] = ' '
		
		addi $t0, $zero, 61
		sb $t0, 20($v0) # internal_89[12] = '='
		
		addi $t0, $zero, 62
		sb $t0, 21($v0) # internal_89[13] = '>'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_89[14] = ' '
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 464($sp) # internal_89 = "Your choice => "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 456($sp) # internal_91 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 456($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 452($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_89
		lw $t0, 476($sp)
		sw $t0, 0($sp) # Storing internal_89
		
		# Calling function internal_92
		lw $t0, 464($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 472($sp) # internal_90 = result of internal_92
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 444($sp) # internal_94 = address of allocated object Int
		
		# Get method in_int of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 444($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 440($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 832($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_95
		lw $t0, 448($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 456($sp) # internal_93 = result of internal_95
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_93
		lw $t0, 460($sp)
		sw $t0, 0($sp) # Storing internal_93
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 832($sp) # num = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_96[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 436($sp) # internal_96 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 428($sp) # internal_98 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 824($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 428($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 424($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 836($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_96
		lw $t0, 448($sp)
		sw $t0, 0($sp) # Storing internal_96
		
		# Calling function internal_99
		lw $t0, 436($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 444($sp) # internal_97 = result of internal_99
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 416($sp) # internal_101 = address of allocated object Int
		
		# Allocating Int 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 412($sp) # internal_102 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_102
		lw $t0, 424($sp)
		sw $t0, 0($sp) # Storing internal_102
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 420($sp) # internal_103 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_101 = internal_103
		lw $t0, 408($sp)
		sw $t0, 416($sp)
		
		# If internal_101 then goto then_8741300515765
		lw $t0, 416($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300515765
		
		# Jumping to else_8741300515765
		j else_8741300515765
		
		then_8741300515765:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_104[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_104[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_104[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_104[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_104[4] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 13($v0) # internal_104[5] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_104[6] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_104[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_104[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_104[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_104[10] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_104[11] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_104[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_104[13] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_104[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_104[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_104[16] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_104[17] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_104[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_104[19] = ' '
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 404($sp) # internal_104 = " XX  XXXX XXXX  XX  "
		
		# internal_100 = internal_104
		lw $t0, 404($sp)
		sw $t0, 420($sp)
		
		# Jumping to endif_8741300515765
		j endif_8741300515765
		
		else_8741300515765:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 396($sp) # internal_106 = address of allocated object Int
		
		# Allocating Int 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 2
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 392($sp) # internal_107 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_107
		lw $t0, 404($sp)
		sw $t0, 0($sp) # Storing internal_107
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 400($sp) # internal_108 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_106 = internal_108
		lw $t0, 388($sp)
		sw $t0, 396($sp)
		
		# If internal_106 then goto then_8741300515819
		lw $t0, 396($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300515819
		
		# Jumping to else_8741300515819
		j else_8741300515819
		
		then_8741300515819:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_109[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_109[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_109[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_109[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_109[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_109[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_109[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_109[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_109[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_109[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_109[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_109[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_109[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_109[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_109[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_109[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_109[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_109[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_109[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_109[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_109[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_109[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_109[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_109[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_109[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 384($sp) # internal_109 = "    X   X   X   X   X    "
		
		# internal_105 = internal_109
		lw $t0, 384($sp)
		sw $t0, 400($sp)
		
		# Jumping to endif_8741300515819
		j endif_8741300515819
		
		else_8741300515819:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 376($sp) # internal_111 = address of allocated object Int
		
		# Allocating Int 3
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 3
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 372($sp) # internal_112 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_112
		lw $t0, 384($sp)
		sw $t0, 0($sp) # Storing internal_112
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 380($sp) # internal_113 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_111 = internal_113
		lw $t0, 368($sp)
		sw $t0, 376($sp)
		
		# If internal_111 then goto then_8741300516133
		lw $t0, 376($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300516133
		
		# Jumping to else_8741300516133
		j else_8741300516133
		
		then_8741300516133:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_114[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_114[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_114[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_114[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_114[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_114[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_114[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_114[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_114[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_114[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_114[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_114[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_114[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_114[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_114[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_114[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_114[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_114[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_114[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_114[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_114[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_114[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_114[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_114[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_114[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 364($sp) # internal_114 = "X     X     X     X     X"
		
		# internal_110 = internal_114
		lw $t0, 364($sp)
		sw $t0, 380($sp)
		
		# Jumping to endif_8741300516133
		j endif_8741300516133
		
		else_8741300516133:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 356($sp) # internal_116 = address of allocated object Int
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 352($sp) # internal_117 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_117
		lw $t0, 364($sp)
		sw $t0, 0($sp) # Storing internal_117
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 360($sp) # internal_118 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_116 = internal_118
		lw $t0, 348($sp)
		sw $t0, 356($sp)
		
		# If internal_116 then goto then_8741300516187
		lw $t0, 356($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300516187
		
		# Jumping to else_8741300516187
		j else_8741300516187
		
		then_8741300516187:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_119[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_119[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_119[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_119[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_119[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_119[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_119[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_119[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_119[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_119[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_119[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_119[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_119[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_119[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_119[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_119[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_119[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_119[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_119[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_119[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_119[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_119[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_119[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_119[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_119[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 344($sp) # internal_119 = "X   X X X   X   X X X   X"
		
		# internal_115 = internal_119
		lw $t0, 344($sp)
		sw $t0, 360($sp)
		
		# Jumping to endif_8741300516187
		j endif_8741300516187
		
		else_8741300516187:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 336($sp) # internal_121 = address of allocated object Int
		
		# Allocating Int 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 5
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 332($sp) # internal_122 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_122
		lw $t0, 344($sp)
		sw $t0, 0($sp) # Storing internal_122
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 340($sp) # internal_123 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_121 = internal_123
		lw $t0, 328($sp)
		sw $t0, 336($sp)
		
		# If internal_121 then goto then_8741300516241
		lw $t0, 336($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300516241
		
		# Jumping to else_8741300516241
		j else_8741300516241
		
		then_8741300516241:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_124[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_124[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_124[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_124[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_124[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_124[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_124[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_124[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_124[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_124[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_124[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_124[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_124[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_124[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_124[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_124[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_124[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_124[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_124[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_124[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_124[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_124[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_124[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_124[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_124[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 324($sp) # internal_124 = "X     X     X   X   X    "
		
		# internal_120 = internal_124
		lw $t0, 324($sp)
		sw $t0, 340($sp)
		
		# Jumping to endif_8741300516241
		j endif_8741300516241
		
		else_8741300516241:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 316($sp) # internal_126 = address of allocated object Int
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 312($sp) # internal_127 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_127
		lw $t0, 324($sp)
		sw $t0, 0($sp) # Storing internal_127
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 320($sp) # internal_128 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_126 = internal_128
		lw $t0, 308($sp)
		sw $t0, 316($sp)
		
		# If internal_126 then goto then_8741300516295
		lw $t0, 316($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300516295
		
		# Jumping to else_8741300516295
		j else_8741300516295
		
		then_8741300516295:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_129[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_129[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_129[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_129[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_129[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_129[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_129[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_129[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_129[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_129[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_129[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_129[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_129[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_129[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_129[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_129[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_129[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_129[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_129[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_129[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_129[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_129[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_129[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_129[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_129[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 304($sp) # internal_129 = "    X   X   X     X     X"
		
		# internal_125 = internal_129
		lw $t0, 304($sp)
		sw $t0, 320($sp)
		
		# Jumping to endif_8741300516295
		j endif_8741300516295
		
		else_8741300516295:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 296($sp) # internal_131 = address of allocated object Int
		
		# Allocating Int 7
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 7
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 292($sp) # internal_132 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_132
		lw $t0, 304($sp)
		sw $t0, 0($sp) # Storing internal_132
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 300($sp) # internal_133 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_131 = internal_133
		lw $t0, 288($sp)
		sw $t0, 296($sp)
		
		# If internal_131 then goto then_8741300516349
		lw $t0, 296($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300516349
		
		# Jumping to else_8741300516349
		j else_8741300516349
		
		then_8741300516349:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_134[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_134[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_134[2] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_134[3] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_134[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_134[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_134[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_134[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_134[8] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 17($v0) # internal_134[9] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_134[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_134[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_134[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_134[13] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_134[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_134[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_134[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_134[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_134[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_134[19] = ' '
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 284($sp) # internal_134 = "X  X  X  XX  X      "
		
		# internal_130 = internal_134
		lw $t0, 284($sp)
		sw $t0, 300($sp)
		
		# Jumping to endif_8741300516349
		j endif_8741300516349
		
		else_8741300516349:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 276($sp) # internal_136 = address of allocated object Int
		
		# Allocating Int 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 8
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 272($sp) # internal_137 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_137
		lw $t0, 284($sp)
		sw $t0, 0($sp) # Storing internal_137
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 280($sp) # internal_138 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_136 = internal_138
		lw $t0, 268($sp)
		sw $t0, 276($sp)
		
		# If internal_136 then goto then_8741300516919
		lw $t0, 276($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300516919
		
		# Jumping to else_8741300516919
		j else_8741300516919
		
		then_8741300516919:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 29 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 29
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_139[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_139[1] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_139[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_139[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_139[4] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 13($v0) # internal_139[5] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_139[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_139[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_139[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_139[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_139[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_139[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_139[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_139[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_139[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_139[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_139[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_139[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_139[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_139[19] = ' '
		
		sb $zero, 28($v0) # Null-terminator at the end of the string
		
		sw $v0, 264($sp) # internal_139 = " X  XX  X  X  X     "
		
		# internal_135 = internal_139
		lw $t0, 264($sp)
		sw $t0, 280($sp)
		
		# Jumping to endif_8741300516919
		j endif_8741300516919
		
		else_8741300516919:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 256($sp) # internal_141 = address of allocated object Int
		
		# Allocating Int 9
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 9
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 252($sp) # internal_142 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_142
		lw $t0, 264($sp)
		sw $t0, 0($sp) # Storing internal_142
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 260($sp) # internal_143 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_141 = internal_143
		lw $t0, 248($sp)
		sw $t0, 256($sp)
		
		# If internal_141 then goto then_8741300516973
		lw $t0, 256($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300516973
		
		# Jumping to else_8741300516973
		j else_8741300516973
		
		then_8741300516973:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 24
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_144[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_144[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_144[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_144[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_144[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_144[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_144[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_144[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_144[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_144[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_144[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_144[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_144[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_144[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_144[14] = ' '
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 244($sp) # internal_144 = "X   X X X   X  "
		
		# internal_140 = internal_144
		lw $t0, 244($sp)
		sw $t0, 260($sp)
		
		# Jumping to endif_8741300516973
		j endif_8741300516973
		
		else_8741300516973:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 236($sp) # internal_146 = address of allocated object Int
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 232($sp) # internal_147 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_147
		lw $t0, 244($sp)
		sw $t0, 0($sp) # Storing internal_147
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 240($sp) # internal_148 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_146 = internal_148
		lw $t0, 228($sp)
		sw $t0, 236($sp)
		
		# If internal_146 then goto then_8741300517027
		lw $t0, 236($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517027
		
		# Jumping to else_8741300517027
		j else_8741300517027
		
		then_8741300517027:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 24
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_149[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_149[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_149[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_149[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_149[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_149[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_149[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_149[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_149[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_149[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_149[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_149[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_149[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_149[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_149[14] = 'X'
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 224($sp) # internal_149 = "  X   X X X   X"
		
		# internal_145 = internal_149
		lw $t0, 224($sp)
		sw $t0, 240($sp)
		
		# Jumping to endif_8741300517027
		j endif_8741300517027
		
		else_8741300517027:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 216($sp) # internal_151 = address of allocated object Int
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 212($sp) # internal_152 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_152
		lw $t0, 224($sp)
		sw $t0, 0($sp) # Storing internal_152
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 220($sp) # internal_153 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_151 = internal_153
		lw $t0, 208($sp)
		sw $t0, 216($sp)
		
		# If internal_151 then goto then_8741300517081
		lw $t0, 216($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517081
		
		# Jumping to else_8741300517081
		j else_8741300517081
		
		then_8741300517081:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 24 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 24
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_154[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_154[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_154[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_154[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_154[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_154[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_154[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_154[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_154[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_154[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_154[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_154[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_154[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_154[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_154[14] = 'X'
		
		sb $zero, 23($v0) # Null-terminator at the end of the string
		
		sw $v0, 204($sp) # internal_154 = "X X X X X X X X"
		
		# internal_150 = internal_154
		lw $t0, 204($sp)
		sw $t0, 220($sp)
		
		# Jumping to endif_8741300517081
		j endif_8741300517081
		
		else_8741300517081:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 196($sp) # internal_156 = address of allocated object Int
		
		# Allocating Int 12
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 12
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 192($sp) # internal_157 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_157
		lw $t0, 204($sp)
		sw $t0, 0($sp) # Storing internal_157
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 200($sp) # internal_158 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_156 = internal_158
		lw $t0, 188($sp)
		sw $t0, 196($sp)
		
		# If internal_156 then goto then_8741300517395
		lw $t0, 196($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517395
		
		# Jumping to else_8741300517395
		j else_8741300517395
		
		then_8741300517395:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_159[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_159[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_159[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_159[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_159[4] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 13($v0) # internal_159[5] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_159[6] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_159[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_159[8] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 17($v0) # internal_159[9] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_159[10] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_159[11] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_159[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_159[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_159[14] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 23($v0) # internal_159[15] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_159[16] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_159[17] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_159[18] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_159[19] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_159[20] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 29($v0) # internal_159[21] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 30($v0) # internal_159[22] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_159[23] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_159[24] = 'X'
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 184($sp) # internal_159 = "XXXXXXXXXXXXXXXXXXXXXXXXX"
		
		# internal_155 = internal_159
		lw $t0, 184($sp)
		sw $t0, 200($sp)
		
		# Jumping to endif_8741300517395
		j endif_8741300517395
		
		else_8741300517395:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 176($sp) # internal_161 = address of allocated object Int
		
		# Allocating Int 13
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 13
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 172($sp) # internal_162 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_162
		lw $t0, 184($sp)
		sw $t0, 0($sp) # Storing internal_162
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 180($sp) # internal_163 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_161 = internal_163
		lw $t0, 168($sp)
		sw $t0, 176($sp)
		
		# If internal_161 then goto then_8741300517449
		lw $t0, 176($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517449
		
		# Jumping to else_8741300517449
		j else_8741300517449
		
		then_8741300517449:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_164[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_164[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_164[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_164[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_164[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_164[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_164[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_164[7] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_164[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_164[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_164[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_164[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_164[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_164[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_164[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_164[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_164[16] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_164[17] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_164[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_164[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_164[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_164[21] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 30($v0) # internal_164[22] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_164[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_164[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 164($sp) # internal_164 = "XXXXX  X    X    X    X  "
		
		# internal_160 = internal_164
		lw $t0, 164($sp)
		sw $t0, 180($sp)
		
		# Jumping to endif_8741300517449
		j endif_8741300517449
		
		else_8741300517449:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 156($sp) # internal_166 = address of allocated object Int
		
		# Allocating Int 14
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 14
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 152($sp) # internal_167 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_167
		lw $t0, 164($sp)
		sw $t0, 0($sp) # Storing internal_167
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_168 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_166 = internal_168
		lw $t0, 148($sp)
		sw $t0, 156($sp)
		
		# If internal_166 then goto then_8741300517503
		lw $t0, 156($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517503
		
		# Jumping to else_8741300517503
		j else_8741300517503
		
		then_8741300517503:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_169[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_169[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_169[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_169[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_169[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_169[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_169[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_169[7] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_169[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_169[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_169[10] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_169[11] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_169[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_169[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_169[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_169[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_169[16] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 25($v0) # internal_169[17] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_169[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_169[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_169[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_169[21] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 30($v0) # internal_169[22] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_169[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_169[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 144($sp) # internal_169 = "  X    X  XXXXX  X    X  "
		
		# internal_165 = internal_169
		lw $t0, 144($sp)
		sw $t0, 160($sp)
		
		# Jumping to endif_8741300517503
		j endif_8741300517503
		
		else_8741300517503:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 136($sp) # internal_171 = address of allocated object Int
		
		# Allocating Int 15
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 15
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 132($sp) # internal_172 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_172
		lw $t0, 144($sp)
		sw $t0, 0($sp) # Storing internal_172
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 140($sp) # internal_173 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_171 = internal_173
		lw $t0, 128($sp)
		sw $t0, 136($sp)
		
		# If internal_171 then goto then_8741300517557
		lw $t0, 136($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517557
		
		# Jumping to else_8741300517557
		j else_8741300517557
		
		then_8741300517557:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 30
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_174[0] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_174[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_174[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_174[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_174[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_174[5] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 14($v0) # internal_174[6] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_174[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_174[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_174[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_174[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_174[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_174[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_174[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_174[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_174[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_174[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_174[17] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 26($v0) # internal_174[18] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_174[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_174[20] = ' '
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 124($sp) # internal_174 = "X     X X X X   X X  "
		
		# internal_170 = internal_174
		lw $t0, 124($sp)
		sw $t0, 140($sp)
		
		# Jumping to endif_8741300517557
		j endif_8741300517557
		
		else_8741300517557:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 116($sp) # internal_176 = address of allocated object Int
		
		# Allocating Int 16
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 16
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_177 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_177
		lw $t0, 124($sp)
		sw $t0, 0($sp) # Storing internal_177
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 120($sp) # internal_178 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_176 = internal_178
		lw $t0, 108($sp)
		sw $t0, 116($sp)
		
		# If internal_176 then goto then_8741300517611
		lw $t0, 116($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517611
		
		# Jumping to else_8741300517611
		j else_8741300517611
		
		then_8741300517611:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 30 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 30
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_179[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_179[1] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_179[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_179[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_179[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_179[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_179[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_179[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_179[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_179[9] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 18($v0) # internal_179[10] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_179[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_179[12] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_179[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_179[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_179[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_179[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_179[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_179[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_179[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_179[20] = 'X'
		
		sb $zero, 29($v0) # Null-terminator at the end of the string
		
		sw $v0, 104($sp) # internal_179 = "  X X   X X X X     X"
		
		# internal_175 = internal_179
		lw $t0, 104($sp)
		sw $t0, 120($sp)
		
		# Jumping to endif_8741300517611
		j endif_8741300517611
		
		else_8741300517611:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_181 = address of allocated object Int
		
		# Allocating Int 17
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 17
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 92($sp) # internal_182 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_182
		lw $t0, 104($sp)
		sw $t0, 0($sp) # Storing internal_182
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 100($sp) # internal_183 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_181 = internal_183
		lw $t0, 88($sp)
		sw $t0, 96($sp)
		
		# If internal_181 then goto then_8741300517925
		lw $t0, 96($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517925
		
		# Jumping to else_8741300517925
		j else_8741300517925
		
		then_8741300517925:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 37
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_184[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_184[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_184[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_184[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_184[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_184[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_184[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_184[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_184[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_184[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_184[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_184[11] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 20($v0) # internal_184[12] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_184[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_184[14] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 23($v0) # internal_184[15] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_184[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_184[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_184[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_184[19] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_184[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_184[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_184[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_184[23] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_184[24] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_184[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_184[26] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 35($v0) # internal_184[27] = 'X'
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # internal_184 = "XXXXX   X   XXXXX   X   XXXX"
		
		# internal_180 = internal_184
		lw $t0, 84($sp)
		sw $t0, 100($sp)
		
		# Jumping to endif_8741300517925
		j endif_8741300517925
		
		else_8741300517925:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 76($sp) # internal_186 = address of allocated object Int
		
		# Allocating Int 18
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 18
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_187 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_187
		lw $t0, 84($sp)
		sw $t0, 0($sp) # Storing internal_187
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 80($sp) # internal_188 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_186 = internal_188
		lw $t0, 68($sp)
		sw $t0, 76($sp)
		
		# If internal_186 then goto then_8741300517979
		lw $t0, 76($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300517979
		
		# Jumping to else_8741300517979
		j else_8741300517979
		
		then_8741300517979:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 37
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 88
		sb $t0, 8($v0) # internal_189[0] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_189[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_189[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_189[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_189[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_189[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_189[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_189[7] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_189[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_189[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_189[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_189[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_189[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_189[13] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_189[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_189[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_189[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_189[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_189[18] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_189[19] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_189[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_189[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_189[22] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_189[23] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_189[24] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_189[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_189[26] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_189[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_189 = "XXX    X   X  X    X   XXXX "
		
		# internal_185 = internal_189
		lw $t0, 64($sp)
		sw $t0, 80($sp)
		
		# Jumping to endif_8741300517979
		j endif_8741300517979
		
		else_8741300517979:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_191 = address of allocated object Int
		
		# Allocating Int 19
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 19
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 52($sp) # internal_192 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_192
		lw $t0, 64($sp)
		sw $t0, 0($sp) # Storing internal_192
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 60($sp) # internal_193 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_191 = internal_193
		lw $t0, 48($sp)
		sw $t0, 56($sp)
		
		# If internal_191 then goto then_8741300518033
		lw $t0, 56($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300518033
		
		# Jumping to else_8741300518033
		j else_8741300518033
		
		then_8741300518033:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 25 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 25
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_194[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_194[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_194[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_194[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_194[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_194[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_194[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_194[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_194[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_194[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_194[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_194[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_194[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_194[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_194[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_194[15] = ' '
		
		sb $zero, 24($v0) # Null-terminator at the end of the string
		
		sw $v0, 44($sp) # internal_194 = " XX X  XX  X XX "
		
		# internal_190 = internal_194
		lw $t0, 44($sp)
		sw $t0, 60($sp)
		
		# Jumping to endif_8741300518033
		j endif_8741300518033
		
		else_8741300518033:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 36($sp) # internal_196 = address of allocated object Int
		
		# Allocating Int 20
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 20
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 32($sp) # internal_197 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_197
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_197
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 40($sp) # internal_198 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_196 = internal_198
		lw $t0, 28($sp)
		sw $t0, 36($sp)
		
		# If internal_196 then goto then_8741300518087
		lw $t0, 36($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300518087
		
		# Jumping to else_8741300518087
		j else_8741300518087
		
		then_8741300518087:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 37
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_199[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_199[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_199[2] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_199[3] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_199[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_199[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_199[6] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 15($v0) # internal_199[7] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_199[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_199[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_199[10] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 19($v0) # internal_199[11] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_199[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_199[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_199[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_199[15] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 24($v0) # internal_199[16] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_199[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_199[18] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_199[19] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 28($v0) # internal_199[20] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_199[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_199[22] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_199[23] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_199[24] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_199[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_199[26] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_199[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 24($sp) # internal_199 = " XX X  XX  X XX X  XX  X XX "
		
		# internal_195 = internal_199
		lw $t0, 24($sp)
		sw $t0, 40($sp)
		
		# Jumping to endif_8741300518087
		j endif_8741300518087
		
		else_8741300518087:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_201 = address of allocated object Int
		
		# Allocating Int 21
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 21
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_202 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument num
		lw $t0, 832($sp)
		sw $t0, 4($sp) # Storing num
		
		# Argument internal_202
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_202
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_203 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_201 = internal_203
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		
		# If internal_201 then goto then_8741300518141
		lw $t0, 16($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300518141
		
		# Jumping to else_8741300518141
		j else_8741300518141
		
		then_8741300518141:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 37 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 37
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_204[0] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 9($v0) # internal_204[1] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 10($v0) # internal_204[2] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 11($v0) # internal_204[3] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 12($v0) # internal_204[4] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_204[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_204[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_204[7] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 16($v0) # internal_204[8] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_204[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_204[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_204[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_204[12] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 21($v0) # internal_204[13] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 22($v0) # internal_204[14] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_204[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_204[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_204[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_204[18] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 27($v0) # internal_204[19] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_204[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_204[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_204[22] = ' '
		
		addi $t0, $zero, 88
		sb $t0, 31($v0) # internal_204[23] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 32($v0) # internal_204[24] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 33($v0) # internal_204[25] = 'X'
		
		addi $t0, $zero, 88
		sb $t0, 34($v0) # internal_204[26] = 'X'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_204[27] = ' '
		
		sb $zero, 36($v0) # Null-terminator at the end of the string
		
		sw $v0, 4($sp) # internal_204 = " XXXX   X    XX    X   XXXX "
		
		# internal_200 = internal_204
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		
		# Jumping to endif_8741300518141
		j endif_8741300518141
		
		else_8741300518141:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 34 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 34
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 32
		sb $t0, 8($v0) # internal_205[0] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 9($v0) # internal_205[1] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 10($v0) # internal_205[2] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 11($v0) # internal_205[3] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 12($v0) # internal_205[4] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_205[5] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_205[6] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_205[7] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 16($v0) # internal_205[8] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_205[9] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_205[10] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 19($v0) # internal_205[11] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 20($v0) # internal_205[12] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 21($v0) # internal_205[13] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_205[14] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 23($v0) # internal_205[15] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 24($v0) # internal_205[16] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_205[17] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 26($v0) # internal_205[18] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_205[19] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_205[20] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 29($v0) # internal_205[21] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_205[22] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 31($v0) # internal_205[23] = ' '
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_205[24] = ' '
		
		sb $zero, 33($v0) # Null-terminator at the end of the string
		
		sw $v0, 0($sp) # internal_205 = "                         "
		
		# internal_200 = internal_205
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		
		# Jumping to endif_8741300518141
		j endif_8741300518141
		
		endif_8741300518141:
		
		# internal_195 = internal_200
		lw $t0, 20($sp)
		sw $t0, 40($sp)
		
		# Jumping to endif_8741300518087
		j endif_8741300518087
		
		endif_8741300518087:
		
		# internal_190 = internal_195
		lw $t0, 40($sp)
		sw $t0, 60($sp)
		
		# Jumping to endif_8741300518033
		j endif_8741300518033
		
		endif_8741300518033:
		
		# internal_185 = internal_190
		lw $t0, 60($sp)
		sw $t0, 80($sp)
		
		# Jumping to endif_8741300517979
		j endif_8741300517979
		
		endif_8741300517979:
		
		# internal_180 = internal_185
		lw $t0, 80($sp)
		sw $t0, 100($sp)
		
		# Jumping to endif_8741300517925
		j endif_8741300517925
		
		endif_8741300517925:
		
		# internal_175 = internal_180
		lw $t0, 100($sp)
		sw $t0, 120($sp)
		
		# Jumping to endif_8741300517611
		j endif_8741300517611
		
		endif_8741300517611:
		
		# internal_170 = internal_175
		lw $t0, 120($sp)
		sw $t0, 140($sp)
		
		# Jumping to endif_8741300517557
		j endif_8741300517557
		
		endif_8741300517557:
		
		# internal_165 = internal_170
		lw $t0, 140($sp)
		sw $t0, 160($sp)
		
		# Jumping to endif_8741300517503
		j endif_8741300517503
		
		endif_8741300517503:
		
		# internal_160 = internal_165
		lw $t0, 160($sp)
		sw $t0, 180($sp)
		
		# Jumping to endif_8741300517449
		j endif_8741300517449
		
		endif_8741300517449:
		
		# internal_155 = internal_160
		lw $t0, 180($sp)
		sw $t0, 200($sp)
		
		# Jumping to endif_8741300517395
		j endif_8741300517395
		
		endif_8741300517395:
		
		# internal_150 = internal_155
		lw $t0, 200($sp)
		sw $t0, 220($sp)
		
		# Jumping to endif_8741300517081
		j endif_8741300517081
		
		endif_8741300517081:
		
		# internal_145 = internal_150
		lw $t0, 220($sp)
		sw $t0, 240($sp)
		
		# Jumping to endif_8741300517027
		j endif_8741300517027
		
		endif_8741300517027:
		
		# internal_140 = internal_145
		lw $t0, 240($sp)
		sw $t0, 260($sp)
		
		# Jumping to endif_8741300516973
		j endif_8741300516973
		
		endif_8741300516973:
		
		# internal_135 = internal_140
		lw $t0, 260($sp)
		sw $t0, 280($sp)
		
		# Jumping to endif_8741300516919
		j endif_8741300516919
		
		endif_8741300516919:
		
		# internal_130 = internal_135
		lw $t0, 280($sp)
		sw $t0, 300($sp)
		
		# Jumping to endif_8741300516349
		j endif_8741300516349
		
		endif_8741300516349:
		
		# internal_125 = internal_130
		lw $t0, 300($sp)
		sw $t0, 320($sp)
		
		# Jumping to endif_8741300516295
		j endif_8741300516295
		
		endif_8741300516295:
		
		# internal_120 = internal_125
		lw $t0, 320($sp)
		sw $t0, 340($sp)
		
		# Jumping to endif_8741300516241
		j endif_8741300516241
		
		endif_8741300516241:
		
		# internal_115 = internal_120
		lw $t0, 340($sp)
		sw $t0, 360($sp)
		
		# Jumping to endif_8741300516187
		j endif_8741300516187
		
		endif_8741300516187:
		
		# internal_110 = internal_115
		lw $t0, 360($sp)
		sw $t0, 380($sp)
		
		# Jumping to endif_8741300516133
		j endif_8741300516133
		
		endif_8741300516133:
		
		# internal_105 = internal_110
		lw $t0, 380($sp)
		sw $t0, 400($sp)
		
		# Jumping to endif_8741300515819
		j endif_8741300515819
		
		endif_8741300515819:
		
		# internal_100 = internal_105
		lw $t0, 400($sp)
		sw $t0, 420($sp)
		
		# Jumping to endif_8741300515765
		j endif_8741300515765
		
		endif_8741300515765:
		
		# Loading return value in $v1
		lw $v1, 420($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 824
		
		jr $ra
		
	function_prompt_at_CellularAutomaton:
		# Function parameters
		#   $ra = 92($sp)
		#   self = 88($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -88
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # ans = ""
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 63 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 63
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 87
		sb $t0, 8($v0) # internal_1[0] = 'W'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_1[1] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 10($v0) # internal_1[2] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 11($v0) # internal_1[3] = 'l'
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_1[4] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_1[5] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 14($v0) # internal_1[6] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 15($v0) # internal_1[7] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 16($v0) # internal_1[8] = 'u'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_1[9] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_1[10] = 'l'
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_1[11] = 'i'
		
		addi $t0, $zero, 107
		sb $t0, 20($v0) # internal_1[12] = 'k'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_1[13] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_1[14] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 23($v0) # internal_1[15] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 24($v0) # internal_1[16] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_1[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_1[18] = 'c'
		
		addi $t0, $zero, 111
		sb $t0, 27($v0) # internal_1[19] = 'o'
		
		addi $t0, $zero, 110
		sb $t0, 28($v0) # internal_1[20] = 'n'
		
		addi $t0, $zero, 116
		sb $t0, 29($v0) # internal_1[21] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 30($v0) # internal_1[22] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 31($v0) # internal_1[23] = 'n'
		
		addi $t0, $zero, 117
		sb $t0, 32($v0) # internal_1[24] = 'u'
		
		addi $t0, $zero, 101
		sb $t0, 33($v0) # internal_1[25] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_1[26] = ' '
		
		addi $t0, $zero, 119
		sb $t0, 35($v0) # internal_1[27] = 'w'
		
		addi $t0, $zero, 105
		sb $t0, 36($v0) # internal_1[28] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 37($v0) # internal_1[29] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 38($v0) # internal_1[30] = 'h'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_1[31] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 40($v0) # internal_1[32] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 41($v0) # internal_1[33] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 42($v0) # internal_1[34] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 43($v0) # internal_1[35] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 44($v0) # internal_1[36] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 45($v0) # internal_1[37] = 'e'
		
		addi $t0, $zero, 120
		sb $t0, 46($v0) # internal_1[38] = 'x'
		
		addi $t0, $zero, 116
		sb $t0, 47($v0) # internal_1[39] = 't'
		
		addi $t0, $zero, 32
		sb $t0, 48($v0) # internal_1[40] = ' '
		
		addi $t0, $zero, 103
		sb $t0, 49($v0) # internal_1[41] = 'g'
		
		addi $t0, $zero, 101
		sb $t0, 50($v0) # internal_1[42] = 'e'
		
		addi $t0, $zero, 110
		sb $t0, 51($v0) # internal_1[43] = 'n'
		
		addi $t0, $zero, 101
		sb $t0, 52($v0) # internal_1[44] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 53($v0) # internal_1[45] = 'r'
		
		addi $t0, $zero, 97
		sb $t0, 54($v0) # internal_1[46] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 55($v0) # internal_1[47] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 56($v0) # internal_1[48] = 'i'
		
		addi $t0, $zero, 111
		sb $t0, 57($v0) # internal_1[49] = 'o'
		
		addi $t0, $zero, 110
		sb $t0, 58($v0) # internal_1[50] = 'n'
		
		addi $t0, $zero, 63
		sb $t0, 59($v0) # internal_1[51] = '?'
		
		addi $t0, $zero, 32
		sb $t0, 60($v0) # internal_1[52] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 61($v0) # internal_1[53] = '\n'
		
		sb $zero, 62($v0) # Null-terminator at the end of the string
		
		sw $v0, 80($sp) # internal_1 = "Would you like to continue with the next generation? \n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_3 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_1
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function internal_4
		lw $t0, 80($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 58 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 58
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 80
		sb $t0, 8($v0) # internal_5[0] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_5[1] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_5[2] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_5[3] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_5[4] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_5[5] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_5[6] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 15($v0) # internal_5[7] = 'u'
		
		addi $t0, $zero, 115
		sb $t0, 16($v0) # internal_5[8] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_5[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_5[10] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 19($v0) # internal_5[11] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 20($v0) # internal_5[12] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 21($v0) # internal_5[13] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_5[14] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_5[15] = 'r'
		
		addi $t0, $zero, 99
		sb $t0, 24($v0) # internal_5[16] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 25($v0) # internal_5[17] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 26($v0) # internal_5[18] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_5[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_5[20] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 29($v0) # internal_5[21] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_5[22] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_5[23] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 32($v0) # internal_5[24] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_5[25] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 34($v0) # internal_5[26] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_5[27] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 36($v0) # internal_5[28] = 'f'
		
		addi $t0, $zero, 111
		sb $t0, 37($v0) # internal_5[29] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 38($v0) # internal_5[30] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_5[31] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 40($v0) # internal_5[32] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_5[33] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 42($v0) # internal_5[34] = 'u'
		
		addi $t0, $zero, 114
		sb $t0, 43($v0) # internal_5[35] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 44($v0) # internal_5[36] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 45($v0) # internal_5[37] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 46($v0) # internal_5[38] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 47($v0) # internal_5[39] = 's'
		
		addi $t0, $zero, 119
		sb $t0, 48($v0) # internal_5[40] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 49($v0) # internal_5[41] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 50($v0) # internal_5[42] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 51($v0) # internal_5[43] = ' '
		
		addi $t0, $zero, 91
		sb $t0, 52($v0) # internal_5[44] = '['
		
		addi $t0, $zero, 121
		sb $t0, 53($v0) # internal_5[45] = 'y'
		
		addi $t0, $zero, 93
		sb $t0, 54($v0) # internal_5[46] = ']'
		
		addi $t0, $zero, 58
		sb $t0, 55($v0) # internal_5[47] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 56($v0) # internal_5[48] = ' '
		
		sb $zero, 57($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_5 = "Please use lowercase y or n for your answer [y]: "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_7 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_5
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function internal_8
		lw $t0, 64($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 44($sp) # internal_10 = address of allocated object Int
		
		# Get method in_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 44($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 40($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_11
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 56($sp) # internal_9 = result of internal_11
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument ans
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing ans
		
		# Argument internal_9
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp) # ans = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_12[0] = '\n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 36($sp) # internal_12 = "\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_14 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_12
		lw $t0, 48($sp)
		sw $t0, 0($sp) # Storing internal_12
		
		# Calling function internal_15
		lw $t0, 36($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 44($sp) # internal_13 = result of internal_15
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_17 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 110
		sb $t0, 8($v0) # internal_18[0] = 'n'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_18 = "n"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument ans
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing ans
		
		# Argument internal_18
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_17 = internal_19
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		
		# If internal_17 then goto then_8741300514732
		lw $t0, 16($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300514732
		
		# Jumping to else_8741300514732
		j else_8741300514732
		
		then_8741300514732:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_20 = address of allocated object Int
		
		# internal_16 = internal_20
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		
		# Jumping to endif_8741300514732
		j endif_8741300514732
		
		else_8741300514732:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_21 = address of allocated object Int
		
		# internal_16 = internal_21
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		
		# Jumping to endif_8741300514732
		j endif_8741300514732
		
		endif_8741300514732:
		
		# Loading return value in $v1
		lw $v1, 20($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 88
		
		jr $ra
		
	function_prompt2_at_CellularAutomaton:
		# Function parameters
		#   $ra = 92($sp)
		#   self = 88($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -88
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 84($sp) # ans = ""
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 11 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 11
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 10
		sb $t0, 8($v0) # internal_1[0] = '\n'
		
		addi $t0, $zero, 10
		sb $t0, 9($v0) # internal_1[1] = '\n'
		
		sb $zero, 10($v0) # Null-terminator at the end of the string
		
		sw $v0, 80($sp) # internal_1 = "\n\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 72($sp) # internal_3 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 72($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 68($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_1
		lw $t0, 92($sp)
		sw $t0, 0($sp) # Storing internal_1
		
		# Calling function internal_4
		lw $t0, 80($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 88($sp) # internal_2 = result of internal_4
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 57 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 57
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 87
		sb $t0, 8($v0) # internal_5[0] = 'W'
		
		addi $t0, $zero, 111
		sb $t0, 9($v0) # internal_5[1] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 10($v0) # internal_5[2] = 'u'
		
		addi $t0, $zero, 108
		sb $t0, 11($v0) # internal_5[3] = 'l'
		
		addi $t0, $zero, 100
		sb $t0, 12($v0) # internal_5[4] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_5[5] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 14($v0) # internal_5[6] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 15($v0) # internal_5[7] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 16($v0) # internal_5[8] = 'u'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_5[9] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 18($v0) # internal_5[10] = 'l'
		
		addi $t0, $zero, 105
		sb $t0, 19($v0) # internal_5[11] = 'i'
		
		addi $t0, $zero, 107
		sb $t0, 20($v0) # internal_5[12] = 'k'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_5[13] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_5[14] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 23($v0) # internal_5[15] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 24($v0) # internal_5[16] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 25($v0) # internal_5[17] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 26($v0) # internal_5[18] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 27($v0) # internal_5[19] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 28($v0) # internal_5[20] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 29($v0) # internal_5[21] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 30($v0) # internal_5[22] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 31($v0) # internal_5[23] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 32($v0) # internal_5[24] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 33($v0) # internal_5[25] = 'a'
		
		addi $t0, $zero, 32
		sb $t0, 34($v0) # internal_5[26] = ' '
		
		addi $t0, $zero, 98
		sb $t0, 35($v0) # internal_5[27] = 'b'
		
		addi $t0, $zero, 97
		sb $t0, 36($v0) # internal_5[28] = 'a'
		
		addi $t0, $zero, 99
		sb $t0, 37($v0) # internal_5[29] = 'c'
		
		addi $t0, $zero, 107
		sb $t0, 38($v0) # internal_5[30] = 'k'
		
		addi $t0, $zero, 103
		sb $t0, 39($v0) # internal_5[31] = 'g'
		
		addi $t0, $zero, 114
		sb $t0, 40($v0) # internal_5[32] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_5[33] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 42($v0) # internal_5[34] = 'u'
		
		addi $t0, $zero, 110
		sb $t0, 43($v0) # internal_5[35] = 'n'
		
		addi $t0, $zero, 100
		sb $t0, 44($v0) # internal_5[36] = 'd'
		
		addi $t0, $zero, 32
		sb $t0, 45($v0) # internal_5[37] = ' '
		
		addi $t0, $zero, 112
		sb $t0, 46($v0) # internal_5[38] = 'p'
		
		addi $t0, $zero, 97
		sb $t0, 47($v0) # internal_5[39] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 48($v0) # internal_5[40] = 't'
		
		addi $t0, $zero, 116
		sb $t0, 49($v0) # internal_5[41] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 50($v0) # internal_5[42] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 51($v0) # internal_5[43] = 'r'
		
		addi $t0, $zero, 110
		sb $t0, 52($v0) # internal_5[44] = 'n'
		
		addi $t0, $zero, 63
		sb $t0, 53($v0) # internal_5[45] = '?'
		
		addi $t0, $zero, 32
		sb $t0, 54($v0) # internal_5[46] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 55($v0) # internal_5[47] = '\n'
		
		sb $zero, 56($v0) # Null-terminator at the end of the string
		
		sw $v0, 64($sp) # internal_5 = "Would you like to choose a background pattern? \n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 56($sp) # internal_7 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 56($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 52($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_5
		lw $t0, 76($sp)
		sw $t0, 0($sp) # Storing internal_5
		
		# Calling function internal_8
		lw $t0, 64($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 72($sp) # internal_6 = result of internal_8
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 58 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 58
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 80
		sb $t0, 8($v0) # internal_9[0] = 'P'
		
		addi $t0, $zero, 108
		sb $t0, 9($v0) # internal_9[1] = 'l'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_9[2] = 'e'
		
		addi $t0, $zero, 97
		sb $t0, 11($v0) # internal_9[3] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 12($v0) # internal_9[4] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 13($v0) # internal_9[5] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 14($v0) # internal_9[6] = ' '
		
		addi $t0, $zero, 117
		sb $t0, 15($v0) # internal_9[7] = 'u'
		
		addi $t0, $zero, 115
		sb $t0, 16($v0) # internal_9[8] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 17($v0) # internal_9[9] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_9[10] = ' '
		
		addi $t0, $zero, 108
		sb $t0, 19($v0) # internal_9[11] = 'l'
		
		addi $t0, $zero, 111
		sb $t0, 20($v0) # internal_9[12] = 'o'
		
		addi $t0, $zero, 119
		sb $t0, 21($v0) # internal_9[13] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 22($v0) # internal_9[14] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 23($v0) # internal_9[15] = 'r'
		
		addi $t0, $zero, 99
		sb $t0, 24($v0) # internal_9[16] = 'c'
		
		addi $t0, $zero, 97
		sb $t0, 25($v0) # internal_9[17] = 'a'
		
		addi $t0, $zero, 115
		sb $t0, 26($v0) # internal_9[18] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 27($v0) # internal_9[19] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 28($v0) # internal_9[20] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 29($v0) # internal_9[21] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_9[22] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 31($v0) # internal_9[23] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 32($v0) # internal_9[24] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 33($v0) # internal_9[25] = ' '
		
		addi $t0, $zero, 110
		sb $t0, 34($v0) # internal_9[26] = 'n'
		
		addi $t0, $zero, 32
		sb $t0, 35($v0) # internal_9[27] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 36($v0) # internal_9[28] = 'f'
		
		addi $t0, $zero, 111
		sb $t0, 37($v0) # internal_9[29] = 'o'
		
		addi $t0, $zero, 114
		sb $t0, 38($v0) # internal_9[30] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 39($v0) # internal_9[31] = ' '
		
		addi $t0, $zero, 121
		sb $t0, 40($v0) # internal_9[32] = 'y'
		
		addi $t0, $zero, 111
		sb $t0, 41($v0) # internal_9[33] = 'o'
		
		addi $t0, $zero, 117
		sb $t0, 42($v0) # internal_9[34] = 'u'
		
		addi $t0, $zero, 114
		sb $t0, 43($v0) # internal_9[35] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 44($v0) # internal_9[36] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 45($v0) # internal_9[37] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 46($v0) # internal_9[38] = 'n'
		
		addi $t0, $zero, 115
		sb $t0, 47($v0) # internal_9[39] = 's'
		
		addi $t0, $zero, 119
		sb $t0, 48($v0) # internal_9[40] = 'w'
		
		addi $t0, $zero, 101
		sb $t0, 49($v0) # internal_9[41] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 50($v0) # internal_9[42] = 'r'
		
		addi $t0, $zero, 32
		sb $t0, 51($v0) # internal_9[43] = ' '
		
		addi $t0, $zero, 91
		sb $t0, 52($v0) # internal_9[44] = '['
		
		addi $t0, $zero, 110
		sb $t0, 53($v0) # internal_9[45] = 'n'
		
		addi $t0, $zero, 93
		sb $t0, 54($v0) # internal_9[46] = ']'
		
		addi $t0, $zero, 58
		sb $t0, 55($v0) # internal_9[47] = ':'
		
		addi $t0, $zero, 32
		sb $t0, 56($v0) # internal_9[48] = ' '
		
		sb $zero, 57($v0) # Null-terminator at the end of the string
		
		sw $v0, 48($sp) # internal_9 = "Please use lowercase y or n for your answer [n]: "
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_11 = address of allocated object Int
		
		# Get method out_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_9
		lw $t0, 60($sp)
		sw $t0, 0($sp) # Storing internal_9
		
		# Calling function internal_12
		lw $t0, 48($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 56($sp) # internal_10 = result of internal_12
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 6
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 6
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 28($sp) # internal_14 = address of allocated object Int
		
		# Get method in_string of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 28($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_15
		lw $t0, 32($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 40($sp) # internal_13 = result of internal_15
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument ans
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing ans
		
		# Argument internal_13
		lw $t0, 44($sp)
		sw $t0, 0($sp) # Storing internal_13
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 96($sp) # ans = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_17 = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 10 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 10
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 121
		sb $t0, 8($v0) # internal_18[0] = 'y'
		
		sb $zero, 9($v0) # Null-terminator at the end of the string
		
		sw $v0, 12($sp) # internal_18 = "y"
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument ans
		lw $t0, 96($sp)
		sw $t0, 4($sp) # Storing ans
		
		# Argument internal_18
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 20($sp) # internal_19 = result of function_equal
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_17 = internal_19
		lw $t0, 8($sp)
		sw $t0, 16($sp)
		
		# If internal_17 then goto then_8741300515732
		lw $t0, 16($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300515732
		
		# Jumping to else_8741300515732
		j else_8741300515732
		
		then_8741300515732:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_20 = address of allocated object Int
		
		# internal_16 = internal_20
		lw $t0, 4($sp)
		sw $t0, 20($sp)
		
		# Jumping to endif_8741300515732
		j endif_8741300515732
		
		else_8741300515732:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_21 = address of allocated object Int
		
		# internal_16 = internal_21
		lw $t0, 0($sp)
		sw $t0, 20($sp)
		
		# Jumping to endif_8741300515732
		j endif_8741300515732
		
		endif_8741300515732:
		
		# Loading return value in $v1
		lw $v1, 20($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 88
		
		jr $ra
		
	function___init___at_Main:
		# Function parameters
		#   $ra = 24($sp)
		#   self = 20($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -20
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 16($sp) # internal_0 = address of allocated object Int
		
		# Set attribute rows of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 16($sp) # $t1 = internal_0
		beq $t1, $zero, object_set_attribute_8741300480543
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300480543
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300480543
		j object_set_attribute_8741300480543
		int_set_attribute_8741300480543:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_0
		j end_set_attribute_8741300480543
		bool_set_attribute_8741300480543:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0) # self.rows = internal_0
		j end_set_attribute_8741300480543
		object_set_attribute_8741300480543:
		sw $t1, 8($t0) # self.rows = internal_0
		end_set_attribute_8741300480543:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 12($sp) # internal_1 = address of allocated object Int
		
		# Set attribute columns of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 12($sp) # $t1 = internal_1
		beq $t1, $zero, object_set_attribute_8741300480567
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300480567
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300480567
		j object_set_attribute_8741300480567
		int_set_attribute_8741300480567:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_1
		j end_set_attribute_8741300480567
		bool_set_attribute_8741300480567:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0) # self.columns = internal_1
		j end_set_attribute_8741300480567
		object_set_attribute_8741300480567:
		sw $t1, 12($t0) # self.columns = internal_1
		end_set_attribute_8741300480567:
		
		# Allocating Int 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_2 = address of allocated object Int
		
		# Set attribute board_size of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 8($sp) # $t1 = internal_2
		beq $t1, $zero, object_set_attribute_8741300480591
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300480591
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300480591
		j object_set_attribute_8741300480591
		int_set_attribute_8741300480591:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = internal_2
		j end_set_attribute_8741300480591
		bool_set_attribute_8741300480591:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0) # self.board_size = internal_2
		j end_set_attribute_8741300480591
		object_set_attribute_8741300480591:
		sw $t1, 16($t0) # self.board_size = internal_2
		end_set_attribute_8741300480591:
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 4($sp) # internal_3 = ""
		
		# Set attribute population_map of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 4($sp) # $t1 = internal_3
		beq $t1, $zero, object_set_attribute_8741300480615
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300480615
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300480615
		j object_set_attribute_8741300480615
		int_set_attribute_8741300480615:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = internal_3
		j end_set_attribute_8741300480615
		bool_set_attribute_8741300480615:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0) # self.population_map = internal_3
		j end_set_attribute_8741300480615
		object_set_attribute_8741300480615:
		sw $t1, 20($t0) # self.population_map = internal_3
		end_set_attribute_8741300480615:
		
		# Allocating NUll to internal_4
		sw $zero, 0($sp) # internal_4 = 0
		
		# Set attribute cells of self
		lw $t0, 20($sp) # $t0 = self
		lw $t1, 0($sp) # $t1 = internal_4
		beq $t1, $zero, object_set_attribute_8741300480639
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300480639
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300480639
		j object_set_attribute_8741300480639
		int_set_attribute_8741300480639:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.cells = internal_4
		j end_set_attribute_8741300480639
		bool_set_attribute_8741300480639:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.cells = internal_4
		j end_set_attribute_8741300480639
		object_set_attribute_8741300480639:
		sw $t1, 24($t0) # self.cells = internal_4
		end_set_attribute_8741300480639:
		
		# Loading return value in $v1
		lw $v1, 20($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 20
		
		jr $ra
		
	function_main_at_Main:
		# Function parameters
		#   $ra = 168($sp)
		#   self = 164($sp)
		
		# Reserving space for local variables
		addi $sp, $sp, -164
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 160($sp) # continue = address of allocated object Int
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 9 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 9
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		sb $zero, 8($v0) # Null-terminator at the end of the string
		
		sw $v0, 156($sp) # choice = ""
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 38 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 38
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 87
		sb $t0, 8($v0) # internal_2[0] = 'W'
		
		addi $t0, $zero, 101
		sb $t0, 9($v0) # internal_2[1] = 'e'
		
		addi $t0, $zero, 108
		sb $t0, 10($v0) # internal_2[2] = 'l'
		
		addi $t0, $zero, 99
		sb $t0, 11($v0) # internal_2[3] = 'c'
		
		addi $t0, $zero, 111
		sb $t0, 12($v0) # internal_2[4] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 13($v0) # internal_2[5] = 'm'
		
		addi $t0, $zero, 101
		sb $t0, 14($v0) # internal_2[6] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 15($v0) # internal_2[7] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 16($v0) # internal_2[8] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 17($v0) # internal_2[9] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 18($v0) # internal_2[10] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 19($v0) # internal_2[11] = 't'
		
		addi $t0, $zero, 104
		sb $t0, 20($v0) # internal_2[12] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 21($v0) # internal_2[13] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_2[14] = ' '
		
		addi $t0, $zero, 71
		sb $t0, 23($v0) # internal_2[15] = 'G'
		
		addi $t0, $zero, 97
		sb $t0, 24($v0) # internal_2[16] = 'a'
		
		addi $t0, $zero, 109
		sb $t0, 25($v0) # internal_2[17] = 'm'
		
		addi $t0, $zero, 101
		sb $t0, 26($v0) # internal_2[18] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 27($v0) # internal_2[19] = ' '
		
		addi $t0, $zero, 111
		sb $t0, 28($v0) # internal_2[20] = 'o'
		
		addi $t0, $zero, 102
		sb $t0, 29($v0) # internal_2[21] = 'f'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_2[22] = ' '
		
		addi $t0, $zero, 76
		sb $t0, 31($v0) # internal_2[23] = 'L'
		
		addi $t0, $zero, 105
		sb $t0, 32($v0) # internal_2[24] = 'i'
		
		addi $t0, $zero, 102
		sb $t0, 33($v0) # internal_2[25] = 'f'
		
		addi $t0, $zero, 101
		sb $t0, 34($v0) # internal_2[26] = 'e'
		
		addi $t0, $zero, 46
		sb $t0, 35($v0) # internal_2[27] = '.'
		
		addi $t0, $zero, 10
		sb $t0, 36($v0) # internal_2[28] = '\n'
		
		sb $zero, 37($v0) # Null-terminator at the end of the string
		
		sw $v0, 152($sp) # internal_2 = "Welcome to the Game of Life.\n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 144($sp) # internal_4 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 144($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 140($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_2
		lw $t0, 164($sp)
		sw $t0, 0($sp) # Storing internal_2
		
		# Calling function internal_5
		lw $t0, 152($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 160($sp) # internal_3 = result of internal_5
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating String
		li $v0, 9
		addi $a0, $zero, 56 # $a0 = length of string + 9 for 4 bytes for the type, 4 bytes for the length of the string and 1 byte for null-terminator
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0) # Setting type in the first word of the object
		
		addi $t0, $zero, 56
		sw $t0, 4($v0) # Setting length of the string in the second word of the object
		
		addi $t0, $zero, 84
		sb $t0, 8($v0) # internal_6[0] = 'T'
		
		addi $t0, $zero, 104
		sb $t0, 9($v0) # internal_6[1] = 'h'
		
		addi $t0, $zero, 101
		sb $t0, 10($v0) # internal_6[2] = 'e'
		
		addi $t0, $zero, 114
		sb $t0, 11($v0) # internal_6[3] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 12($v0) # internal_6[4] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 13($v0) # internal_6[5] = ' '
		
		addi $t0, $zero, 97
		sb $t0, 14($v0) # internal_6[6] = 'a'
		
		addi $t0, $zero, 114
		sb $t0, 15($v0) # internal_6[7] = 'r'
		
		addi $t0, $zero, 101
		sb $t0, 16($v0) # internal_6[8] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 17($v0) # internal_6[9] = ' '
		
		addi $t0, $zero, 109
		sb $t0, 18($v0) # internal_6[10] = 'm'
		
		addi $t0, $zero, 97
		sb $t0, 19($v0) # internal_6[11] = 'a'
		
		addi $t0, $zero, 110
		sb $t0, 20($v0) # internal_6[12] = 'n'
		
		addi $t0, $zero, 121
		sb $t0, 21($v0) # internal_6[13] = 'y'
		
		addi $t0, $zero, 32
		sb $t0, 22($v0) # internal_6[14] = ' '
		
		addi $t0, $zero, 105
		sb $t0, 23($v0) # internal_6[15] = 'i'
		
		addi $t0, $zero, 110
		sb $t0, 24($v0) # internal_6[16] = 'n'
		
		addi $t0, $zero, 105
		sb $t0, 25($v0) # internal_6[17] = 'i'
		
		addi $t0, $zero, 116
		sb $t0, 26($v0) # internal_6[18] = 't'
		
		addi $t0, $zero, 105
		sb $t0, 27($v0) # internal_6[19] = 'i'
		
		addi $t0, $zero, 97
		sb $t0, 28($v0) # internal_6[20] = 'a'
		
		addi $t0, $zero, 108
		sb $t0, 29($v0) # internal_6[21] = 'l'
		
		addi $t0, $zero, 32
		sb $t0, 30($v0) # internal_6[22] = ' '
		
		addi $t0, $zero, 115
		sb $t0, 31($v0) # internal_6[23] = 's'
		
		addi $t0, $zero, 116
		sb $t0, 32($v0) # internal_6[24] = 't'
		
		addi $t0, $zero, 97
		sb $t0, 33($v0) # internal_6[25] = 'a'
		
		addi $t0, $zero, 116
		sb $t0, 34($v0) # internal_6[26] = 't'
		
		addi $t0, $zero, 101
		sb $t0, 35($v0) # internal_6[27] = 'e'
		
		addi $t0, $zero, 115
		sb $t0, 36($v0) # internal_6[28] = 's'
		
		addi $t0, $zero, 32
		sb $t0, 37($v0) # internal_6[29] = ' '
		
		addi $t0, $zero, 116
		sb $t0, 38($v0) # internal_6[30] = 't'
		
		addi $t0, $zero, 111
		sb $t0, 39($v0) # internal_6[31] = 'o'
		
		addi $t0, $zero, 32
		sb $t0, 40($v0) # internal_6[32] = ' '
		
		addi $t0, $zero, 99
		sb $t0, 41($v0) # internal_6[33] = 'c'
		
		addi $t0, $zero, 104
		sb $t0, 42($v0) # internal_6[34] = 'h'
		
		addi $t0, $zero, 111
		sb $t0, 43($v0) # internal_6[35] = 'o'
		
		addi $t0, $zero, 111
		sb $t0, 44($v0) # internal_6[36] = 'o'
		
		addi $t0, $zero, 115
		sb $t0, 45($v0) # internal_6[37] = 's'
		
		addi $t0, $zero, 101
		sb $t0, 46($v0) # internal_6[38] = 'e'
		
		addi $t0, $zero, 32
		sb $t0, 47($v0) # internal_6[39] = ' '
		
		addi $t0, $zero, 102
		sb $t0, 48($v0) # internal_6[40] = 'f'
		
		addi $t0, $zero, 114
		sb $t0, 49($v0) # internal_6[41] = 'r'
		
		addi $t0, $zero, 111
		sb $t0, 50($v0) # internal_6[42] = 'o'
		
		addi $t0, $zero, 109
		sb $t0, 51($v0) # internal_6[43] = 'm'
		
		addi $t0, $zero, 46
		sb $t0, 52($v0) # internal_6[44] = '.'
		
		addi $t0, $zero, 32
		sb $t0, 53($v0) # internal_6[45] = ' '
		
		addi $t0, $zero, 10
		sb $t0, 54($v0) # internal_6[46] = '\n'
		
		sb $zero, 55($v0) # Null-terminator at the end of the string
		
		sw $v0, 136($sp) # internal_6 = "There are many initial states to choose from. \n"
		
		# Allocating Int 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 4
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 128($sp) # internal_8 = address of allocated object Int
		
		# Get method out_string of Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 128($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 124($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument self
		lw $t0, 176($sp)
		sw $t0, 4($sp) # Storing self
		
		# Argument internal_6
		lw $t0, 148($sp)
		sw $t0, 0($sp) # Storing internal_6
		
		# Calling function internal_9
		lw $t0, 136($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 144($sp) # internal_7 = result of internal_9
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating NUll to internal_10
		sw $zero, 120($sp) # internal_10 = 0
		
		while_start_8741300514241:
		
		# Allocating Int 27
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 27
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 112($sp) # internal_12 = address of allocated object Int
		
		# Get method prompt2 of Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 112($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 108($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_13
		lw $t0, 116($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 124($sp) # internal_11 = result of internal_13
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# If internal_11 then goto while_body_8741300514241
		lw $t0, 116($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8741300514241
		
		# Jumping to while_end_8741300514241
		j while_end_8741300514241
		
		while_body_8741300514241:
		
		# Allocating Bool 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 1
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 104($sp) # internal_14 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument continue
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing continue
		
		# Argument internal_14
		lw $t0, 116($sp)
		sw $t0, 0($sp) # Storing internal_14
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp) # continue = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating Int 25
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 25
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 96($sp) # internal_16 = address of allocated object Int
		
		# Get method option of Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 96($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 92($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_17
		lw $t0, 100($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 108($sp) # internal_15 = result of internal_17
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument choice
		lw $t0, 168($sp)
		sw $t0, 4($sp) # Storing choice
		
		# Argument internal_15
		lw $t0, 112($sp)
		sw $t0, 0($sp) # Storing internal_15
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 168($sp) # choice = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Allocating CellularAutomaton
		li $v0, 9
		lw $a0, type_CellularAutomaton
		syscall
		la $t0, type_CellularAutomaton # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 88($sp) # internal_18 = address of allocated object CellularAutomaton
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 96($sp)
		sw $t0, 0($sp) # Storing internal_18
		
		# Calling function function___init___at_CellularAutomaton
		jal function___init___at_CellularAutomaton
		lw $ra, 4($sp)
		sw $v1, 96($sp) # internal_18 = result of function___init___at_CellularAutomaton
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 10
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 10
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 80($sp) # internal_20 = address of allocated object Int
		
		# Get method init of CellularAutomaton
		lw $t0, 88($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 80($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 76($sp)
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument internal_18
		lw $t0, 100($sp)
		sw $t0, 4($sp) # Storing internal_18
		
		# Argument choice
		lw $t0, 168($sp)
		sw $t0, 0($sp) # Storing choice
		
		# Calling function internal_21
		lw $t0, 88($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 96($sp) # internal_19 = result of internal_21
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# Set attribute cells of self
		lw $t0, 164($sp) # $t0 = self
		lw $t1, 84($sp) # $t1 = internal_19
		beq $t1, $zero, object_set_attribute_8741300529168
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8741300529168
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8741300529168
		j object_set_attribute_8741300529168
		int_set_attribute_8741300529168:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.cells = internal_19
		j end_set_attribute_8741300529168
		bool_set_attribute_8741300529168:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0) # self.cells = internal_19
		j end_set_attribute_8741300529168
		object_set_attribute_8741300529168:
		sw $t1, 24($t0) # self.cells = internal_19
		end_set_attribute_8741300529168:
		
		# Get attribute cells of self
		lw $t0, 164($sp) # Get the address of self
		lw $t1, 24($t0) # Get the attribute 'cells' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300545823
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300545823
		j object_get_attribute_8741300545823
		int_get_attribute_8741300545823:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp) # internal_22 = self.cells
		j end_get_attribute_8741300545823
		bool_get_attribute_8741300545823:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp) # internal_22 = self.cells
		j end_get_attribute_8741300545823
		object_get_attribute_8741300545823:
		sw $t1, 72($sp) # internal_22 = self.cells
		end_get_attribute_8741300545823:
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 64($sp) # internal_24 = address of allocated object Int
		
		# Get method print of CellularAutomaton
		lw $t0, 72($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_22
		lw $t0, 80($sp)
		sw $t0, 0($sp) # Storing internal_22
		
		# Calling function internal_25
		lw $t0, 68($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 76($sp) # internal_23 = result of internal_25
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating NUll to internal_26
		sw $zero, 56($sp) # internal_26 = 0
		
		while_start_8741300515726:
		
		# If continue then goto while_body_8741300515726
		lw $t0, 160($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, while_body_8741300515726
		
		# Jumping to while_end_8741300515726
		j while_end_8741300515726
		
		while_body_8741300515726:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 48($sp) # internal_28 = address of allocated object Int
		
		# Allocating Int 26
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 26
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 40($sp) # internal_30 = address of allocated object Int
		
		# Get method prompt of Main
		lw $t0, 164($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 36($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument self
		lw $t0, 172($sp)
		sw $t0, 0($sp) # Storing self
		
		# Calling function internal_31
		lw $t0, 44($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 52($sp) # internal_29 = result of internal_31
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# internal_28 = internal_29
		lw $t0, 44($sp)
		sw $t0, 48($sp)
		
		# If internal_28 then goto then_8741300515795
		lw $t0, 48($sp) # Loading the address of the condition
		lw $t0, 8($t0) # Loading the value of the condition
		addi $t1, $zero, 1 # Setting the value to 1 for comparison
		beq $t0, $t1, then_8741300515795
		
		# Jumping to else_8741300515795
		j else_8741300515795
		
		then_8741300515795:
		
		# Get attribute cells of self
		lw $t0, 164($sp) # Get the address of self
		lw $t1, 24($t0) # Get the attribute 'cells' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300541585
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300541585
		j object_get_attribute_8741300541585
		int_get_attribute_8741300541585:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_32 = self.cells
		j end_get_attribute_8741300541585
		bool_get_attribute_8741300541585:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 32($sp) # internal_32 = self.cells
		j end_get_attribute_8741300541585
		object_get_attribute_8741300541585:
		sw $t1, 32($sp) # internal_32 = self.cells
		end_get_attribute_8741300541585:
		
		# Allocating Int 24
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 24
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 24($sp) # internal_34 = address of allocated object Int
		
		# Get method evolve of CellularAutomaton
		lw $t0, 32($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 24($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 20($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_32
		lw $t0, 40($sp)
		sw $t0, 0($sp) # Storing internal_32
		
		# Calling function internal_35
		lw $t0, 28($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 36($sp) # internal_33 = result of internal_35
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Get attribute cells of self
		lw $t0, 164($sp) # Get the address of self
		lw $t1, 24($t0) # Get the attribute 'cells' from the self
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8741300518596
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8741300518596
		j object_get_attribute_8741300518596
		int_get_attribute_8741300518596:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_36 = self.cells
		j end_get_attribute_8741300518596
		bool_get_attribute_8741300518596:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($sp) # internal_36 = self.cells
		j end_get_attribute_8741300518596
		object_get_attribute_8741300518596:
		sw $t1, 16($sp) # internal_36 = self.cells
		end_get_attribute_8741300518596:
		
		# Allocating Int 11
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 11
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 8($sp) # internal_38 = address of allocated object Int
		
		# Get method print of CellularAutomaton
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_36
		lw $t0, 24($sp)
		sw $t0, 0($sp) # Storing internal_36
		
		# Calling function internal_39
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_37 = result of internal_39
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# internal_27 = internal_37
		lw $t0, 12($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8741300515795
		j endif_8741300515795
		
		else_8741300515795:
		
		# Allocating Bool 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 0
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 0($sp) # internal_40 = address of allocated object Int
		
		# Passing function arguments
		addi $sp, $sp, -12 # Reserving space for arguments
		sw $ra, 8($sp) # Storing return address
		
		# Argument continue
		lw $t0, 172($sp)
		sw $t0, 4($sp) # Storing continue
		
		# Argument internal_40
		lw $t0, 12($sp)
		sw $t0, 0($sp) # Storing internal_40
		
		# Calling function function_assign
		jal function_assign
		lw $ra, 8($sp)
		sw $v1, 172($sp) # continue = result of function_assign
		addi $sp, $sp, 12 # Freeing space for arguments
		
		# internal_27 = continue
		lw $t0, 160($sp)
		sw $t0, 52($sp)
		
		# Jumping to endif_8741300515795
		j endif_8741300515795
		
		endif_8741300515795:
		
		# Jumping to while_start_8741300515726
		j while_start_8741300515726
		
		while_end_8741300515726:
		
		# Jumping to while_start_8741300514241
		j while_start_8741300514241
		
		while_end_8741300514241:
		
		# Loading return value in $v1
		lw $v1, 164($sp)
		
		# Freeing space for local variables
		addi $sp, $sp, 164
		
		jr $ra
		
	main:
		# Reserving space for local variables
		addi $sp, $sp, -16
		
		# Allocating Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of th object
		sw $a0, 4($v0) # Setting size in the second word of th object
		sw $v0, 12($sp) # internal_0 = address of allocated object Main
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp) # internal_0 = result of function___init___at_Main
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Allocating Int 28
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int # $t0 = address of the type
		sw $t0, 0($v0) # Setting type in the first word of the object
		sw $a0, 4($v0) # Setting size in the second word of the object
		addi $t0, $zero, 28
		sw $t0, 8($v0) # Setting value in the third word of the object
		sw $v0, 4($sp) # internal_2 = address of allocated object Int
		
		# Get method main of Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# Passing function arguments
		addi $sp, $sp, -8 # Reserving space for arguments
		sw $ra, 4($sp) # Storing return address
		
		# Argument internal_0
		lw $t0, 20($sp)
		sw $t0, 0($sp) # Storing internal_0
		
		# Calling function internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp) # internal_1 = result of internal_3
		addi $sp, $sp, 8 # Freeing space for arguments
		
		# Exit program
		li $v0, 10
		syscall
		
		