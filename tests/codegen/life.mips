.data
_______error______: .asciiz "Abort called from class "
_______null_______: .asciiz "null"
_______endline_______: .asciiz "\n"
_______void_str_______: .asciiz ""
Bool_parents: .word 1, 2, 0, 
Bool_Name: .asciiz "Bool"
Bool: .word Bool_Name, 2, Bool_parents, Object_abort, Object_copy, Object_type_name, 
Int_parents: .word 1, 3, 0, 
Int_Name: .asciiz "Int"
Int: .word Int_Name, 2, Int_parents, Object_abort, Object_copy, Object_type_name, 
String_parents: .word 1, 4, 0, 
String_Name: .asciiz "String"
String: .word String_Name, 2, String_parents, Object_abort, Object_copy, Object_type_name, String_concat, String_length, String_substr, 
SELF_TYPE_parents: .word 1, 5, 0, 
SELF_TYPE_Name: .asciiz "SELF_TYPE"
SELF_TYPE: .word SELF_TYPE_Name, 1, SELF_TYPE_parents, Object_abort, Object_copy, Object_type_name, 
Object_parents: .word 1, 0, 
Object_Name: .asciiz "Object"
Object: .word Object_Name, 1, Object_parents, Object_abort, Object_copy, Object_type_name, 
IO_parents: .word 1, 6, 0, 
IO_Name: .asciiz "IO"
IO: .word IO_Name, 1, IO_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, 
Board_parents: .word 1, 6, 7, 0, 
Board_Name: .asciiz "Board"
Board: .word Board_Name, 4, Board_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, Board_size_of_board, Board_board_init, 
CellularAutomaton_parents: .word 1, 6, 7, 8, 0, 
CellularAutomaton_Name: .asciiz "CellularAutomaton"
CellularAutomaton: .word CellularAutomaton_Name, 5, CellularAutomaton_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, Board_size_of_board, Board_board_init, CellularAutomaton_init, CellularAutomaton_print, CellularAutomaton_num_cells, CellularAutomaton_cell, CellularAutomaton_north, CellularAutomaton_south, CellularAutomaton_east, CellularAutomaton_west, CellularAutomaton_northwest, CellularAutomaton_northeast, CellularAutomaton_southeast, CellularAutomaton_southwest, CellularAutomaton_neighbors, CellularAutomaton_cell_at_next_evolution, CellularAutomaton_evolve, CellularAutomaton_option, CellularAutomaton_prompt, CellularAutomaton_prompt2, 
Main_parents: .word 1, 6, 7, 8, 9, 0, 
Main_Name: .asciiz "Main"
Main: .word Main_Name, 6, Main_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, Board_size_of_board, Board_board_init, CellularAutomaton_init, CellularAutomaton_print, CellularAutomaton_num_cells, CellularAutomaton_cell, CellularAutomaton_north, CellularAutomaton_south, CellularAutomaton_east, CellularAutomaton_west, CellularAutomaton_northwest, CellularAutomaton_northeast, CellularAutomaton_southeast, CellularAutomaton_southwest, CellularAutomaton_neighbors, CellularAutomaton_cell_at_next_evolution, CellularAutomaton_evolve, CellularAutomaton_option, CellularAutomaton_prompt, CellularAutomaton_prompt2, Main_main, 
string_0: .asciiz "\n"
string_1: .asciiz "\n"
string_2: .asciiz "\n"
string_3: .asciiz " "
string_4: .asciiz " "
string_5: .asciiz " "
string_6: .asciiz " "
string_7: .asciiz " "
string_8: .asciiz " "
string_9: .asciiz " "
string_10: .asciiz " "
string_11: .asciiz " "
string_12: .asciiz " "
string_13: .asciiz " "
string_14: .asciiz " "
string_15: .asciiz " "
string_16: .asciiz " "
string_17: .asciiz "X"
string_18: .asciiz "X"
string_19: .asciiz "X"
string_20: .asciiz "X"
string_21: .asciiz "X"
string_22: .asciiz "X"
string_23: .asciiz "X"
string_24: .asciiz "X"
string_25: .asciiz "-"
string_26: .asciiz "X"
string_27: .asciiz "-"
string_28: .asciiz "X"
string_29: .asciiz "X"
string_30: .asciiz "\nPlease chose a number:\n"
string_31: .asciiz "	1: A cross\n"
string_32: .asciiz "	2: A slash from the upper left to lower right\n"
string_33: .asciiz "	3: A slash from the upper right to lower left\n"
string_34: .asciiz "	4: An X\n"
string_35: .asciiz "	5: A greater than sign \n"
string_36: .asciiz "	6: A less than sign\n"
string_37: .asciiz "	7: Two greater than signs\n"
string_38: .asciiz "	8: Two less than signs\n"
string_39: .asciiz "	9: A 'V'\n"
string_40: .asciiz "	10: An inverse 'V'\n"
string_41: .asciiz "	11: Numbers 9 and 10 combined\n"
string_42: .asciiz "	12: A full grid\n"
string_43: .asciiz "	13: A 'T'\n"
string_44: .asciiz "	14: A plus '+'\n"
string_45: .asciiz "	15: A 'W'\n"
string_46: .asciiz "	16: An 'M'\n"
string_47: .asciiz "	17: An 'E'\n"
string_48: .asciiz "	18: A '3'\n"
string_49: .asciiz "	19: An 'O'\n"
string_50: .asciiz "	20: An '8'\n"
string_51: .asciiz "	21: An 'S'\n"
string_52: .asciiz "Your choice => "
string_53: .asciiz "\n"
string_54: .asciiz "                         "
string_55: .asciiz " XXXX   X    XX    X   XXXX "
string_56: .asciiz " XX X  XX  X XX X  XX  X XX "
string_57: .asciiz " XX X  XX  X XX "
string_58: .asciiz "XXX    X   X  X    X   XXXX "
string_59: .asciiz "XXXXX   X   XXXXX   X   XXXX"
string_60: .asciiz "  X X   X X X X     X"
string_61: .asciiz "X     X X X X   X X  "
string_62: .asciiz "  X    X  XXXXX  X    X  "
string_63: .asciiz "XXXXX  X    X    X    X  "
string_64: .asciiz "XXXXXXXXXXXXXXXXXXXXXXXXX"
string_65: .asciiz "X X X X X X X X"
string_66: .asciiz "  X   X X X   X"
string_67: .asciiz "X   X X X   X  "
string_68: .asciiz " X  XX  X  X  X     "
string_69: .asciiz "X  X  X  XX  X      "
string_70: .asciiz "    X   X   X     X     X"
string_71: .asciiz "X     X     X   X   X    "
string_72: .asciiz "X   X X X   X   X X X   X"
string_73: .asciiz "X     X     X     X     X"
string_74: .asciiz "    X   X   X   X   X    "
string_75: .asciiz " XX  XXXX XXXX  XX  "
string_76: .asciiz "Would you like to continue with the next generation? \n"
string_77: .asciiz "Please use lowercase y or n for your answer [y]: "
string_78: .asciiz "\n"
string_79: .asciiz "n"
string_80: .asciiz "\n\n"
string_81: .asciiz "Would you like to choose a background pattern? \n"
string_82: .asciiz "Please use lowercase y or n for your answer [n]: "
string_83: .asciiz "y"
string_84: .asciiz "Welcome to the Game of Life.\n"
string_85: .asciiz "There are many initial states to choose from. \n"

.text
.globl main
main:     #
addi $sp, $sp, -4     #Push local var self stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion main
#Allocate a una class Main
#atributo type_name en puntero + 0
#atributo rows en puntero + 4
#atributo columns en puntero + 8
#atributo board_size en puntero + 12
#atributo population_map en puntero + 16
#atributo cells en puntero + 20
li $a0, 24      #
li $v0, 9      #
syscall
sw $v0, 4($sp)      #Guardando en la variable local self puntero de la instancia de la clase Main
#Assignacion de la insformacion de tipo a Main
la $t0, Main      #
move $s4, $t0      #
lw $t0, 4($sp)      #Instancia de la clase 
move $t1, $s4      #Guarda el valor que se le asignara a la propieded type_name
sw $t1, 0($t0)      #Setea la propiedad type_name con el valor de _
lw $t0, 4($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
jal new_ctr_Main                               #
lw $t0, 4($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
jal Main_main                               #
li $v0, 10      #
syscall

new_ctr_Main:     #
#Parametro self en stackpoiner + 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_Main
lw $t0, 4($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
jal new_ctr_CellularAutomaton                               #
la $t0, _______null_______      #
move $s4, $t0      #
lw $t0, 4($sp)      #Instancia de la clase Main
move $t1, $s4      #Guarda el valor que se le asignara a la propieded cells
sw $t1, 20($t0)      #Setea la propiedad cells con el valor de _
lw $v0, 4($sp)      #Return self
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 8     #
jr $ra                               #

Main_main:     #
#Parametro self en stackpoiner + 44
addi $sp, $sp, -4     #Push local var continue stackpointer 40
addi $sp, $sp, -4     #Push local var choice stackpointer 36
addi $sp, $sp, -4     #Push local var param_0_to_out_string@0 stackpointer 32
addi $sp, $sp, -4     #Push local var param_0_to_out_string@1 stackpointer 28
addi $sp, $sp, -4     #Push local var new_CellularAutomaton@0 stackpointer 24
addi $sp, $sp, -4     #Push local var instance_dynamic_to_init@0 stackpointer 20
addi $sp, $sp, -4     #Push local var param_0_to_init@0 stackpointer 16
addi $sp, $sp, -4     #Push local var instance_dynamic_to_print@0 stackpointer 12
addi $sp, $sp, -4     #Push local var instance_dynamic_to_evolve@0 stackpointer 8
addi $sp, $sp, -4     #Push local var instance_dynamic_to_print@1 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion Main_main
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
li $s4, 0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __bool__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 40($sp)      #
la $t0, _______void_str_______      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 36($sp)      #
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_84      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 32($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 36($sp)      #Lee el valor de la var param_0_to_out_string@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@0
lw $t0, 52($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de Main
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 1 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_85      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 28($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 32($sp)      #Lee el valor de la var param_0_to_out_string@1
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@1
lw $t0, 52($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de Main
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 2 de una sequencia Block
#Inicio de un While
j while_cond_2                               #
while_back_2:
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable continue
li $s4, 1      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __bool__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 40($sp)      #
lw $t0, 40($sp)      #
move $s4, $t0      #
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable choice
#StaticDispatch option
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 48($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de Main
lw $t3, 108($t1)      #Buscando el metodo dinamico para la funcion option
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
move $t0, $s4      #
sw $t0, 36($sp)      #
lw $t0, 36($sp)      #
move $s4, $t0      #
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable cells
#Evalua la Expresion para el DinamicDispatch init
#Creando instancia de tipo CellularAutomaton
#Allocate a una class CellularAutomaton
#atributo type_name en puntero + 0
#atributo rows en puntero + 4
#atributo columns en puntero + 8
#atributo board_size en puntero + 12
#atributo population_map en puntero + 16
li $a0, 20      #
li $v0, 9      #
syscall
sw $v0, 24($sp)      #Guardando en la variable local new_CellularAutomaton@0 puntero de la instancia de la clase CellularAutomaton
#Assignacion de la insformacion de tipo a la instancia
la $t0, CellularAutomaton      #
move $s4, $t0      #
lw $t0, 24($sp)      #Instancia de la clase 
move $t1, $s4      #Guarda el valor que se le asignara a la propieded type_name
sw $t1, 0($t0)      #Setea la propiedad type_name con el valor de _
lw $t0, 24($sp)      #Lee el valor de la var new_CellularAutomaton@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con new_CellularAutomaton@0
jal new_ctr_CellularAutomaton                               #
sw $v0, 20($sp)      #Asigna el resultado de la funcion
#Fin de la exprecion previa al DinamicDispatch init
#Evalua el parametro 0 para el CastingDispatch init
#Get Local Var choice
lw $t0, 36($sp)      #
sw $t0, 16($sp)      #
#Fin del paramentro 0 al CastingDispatch init
lw $t0, 20($sp)      #Lee el valor de la var instance_dynamic_to_init@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_init@0
lw $t0, 20($sp)      #Lee el valor de la var param_0_to_init@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_init@0
lw $t0, 28($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 48($t1)      #Buscando el metodo dinamico para la funcion init
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
lw $t0, 44($sp)      #Instancia de la clase Main
move $t1, $s4      #Guarda el valor que se le asignara a la propieded cells
sw $t1, 20($t0)      #Setea la propiedad cells con el valor de _
lw $t0, 44($sp)      #Instancia de la clase Main
lw $t1, 20($t0)      #Lee la propiedad cells
move $s4, $t1      #Guarda el valor de la propiedad cells en la variable local _
#Inicio del paso 3 de una sequencia Block
#Evalua la Expresion para el DinamicDispatch print
#Get Self Property cells
lw $t0, 44($sp)      #Instancia de la clase Main
lw $t1, 20($t0)      #Lee la propiedad cells
sw $t1, 12($sp)      #Guarda el valor de la propiedad cells en la variable local instance_dynamic_to_print@0
#Fin de la exprecion previa al DinamicDispatch print
lw $t0, 12($sp)      #Lee el valor de la var instance_dynamic_to_print@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_print@0
lw $t0, 16($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 52($t1)      #Buscando el metodo dinamico para la funcion print
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 4 de una sequencia Block
#Inicio de un While
j while_cond_3                               #
while_back_3:
#Evalua la condicion de un If
#StaticDispatch prompt
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 48($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de Main
lw $t3, 112($t1)      #Buscando el metodo dinamico para la funcion prompt
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_Main_main_0     #
#Else case
#Asignando un nuevo valor a la variable continue
li $s4, 0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __bool__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 40($sp)      #
lw $t0, 40($sp)      #
move $s4, $t0      #
j fin_Main_main_0                               #
then_Main_main_0:
#Then case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Evalua la Expresion para el DinamicDispatch evolve
#Get Self Property cells
lw $t0, 44($sp)      #Instancia de la clase Main
lw $t1, 20($t0)      #Lee la propiedad cells
sw $t1, 8($sp)      #Guarda el valor de la propiedad cells en la variable local instance_dynamic_to_evolve@0
#Fin de la exprecion previa al DinamicDispatch evolve
lw $t0, 8($sp)      #Lee el valor de la var instance_dynamic_to_evolve@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_evolve@0
lw $t0, 12($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 104($t1)      #Buscando el metodo dinamico para la funcion evolve
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 1 de una sequencia Block
#Evalua la Expresion para el DinamicDispatch print
#Get Self Property cells
lw $t0, 44($sp)      #Instancia de la clase Main
lw $t1, 20($t0)      #Lee la propiedad cells
sw $t1, 4($sp)      #Guarda el valor de la propiedad cells en la variable local instance_dynamic_to_print@1
#Fin de la exprecion previa al DinamicDispatch print
lw $t0, 4($sp)      #Lee el valor de la var instance_dynamic_to_print@1
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_print@1
lw $t0, 8($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 52($t1)      #Buscando el metodo dinamico para la funcion print
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
fin_Main_main_0:
#Fin de un If
#Fin del cuerpo e inicio de la condicion de un While
while_cond_3:
#Get Local Var continue
lw $t0, 40($sp)      #
move $s4, $t0      #
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, while_back_3     #
#Fin de la condicion de un While
lw $t0, 44($sp)      #
move $s4, $t0      #
#Fin del cuerpo e inicio de la condicion de un While
while_cond_2:
#StaticDispatch prompt2
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 48($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de Main
lw $t3, 116($t1)      #Buscando el metodo dinamico para la funcion prompt2
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, while_back_2     #
#Fin de la condicion de un While
lw $t0, 44($sp)      #
move $s4, $t0      #
#Inicio del paso 3 de una sequencia Block
#Get Local Var self
lw $t0, 44($sp)      #
move $s4, $t0      #
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 48     #
jr $ra                               #

new_ctr_CellularAutomaton:     #
#Parametro self en stackpoiner + 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_CellularAutomaton
lw $t0, 4($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
jal new_ctr_Board                               #
la $t0, _______void_str_______      #
move $s4, $t0      #
lw $s6, 4($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
lw $t0, 4($sp)      #Instancia de la clase CellularAutomaton
move $t1, $s4      #Guarda el valor que se le asignara a la propieded population_map
sw $t1, 16($t0)      #Setea la propiedad population_map con el valor de _
lw $v0, 4($sp)      #Return self
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 8     #
jr $ra                               #

IO_out_string:     #
#Parametro self en stackpoiner + 4
#Parametro string en stackpoiner + 0
addi $sp, $sp, -4     #Push local var $ra stackpointer -4
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion IO_out_string
lw $s6, 8($sp)      #Guarda self
lw $a0, 4($sp)      #Guarda el parametro 0 -> string
jal __str__print__                               #
lw $ra, 0($sp)      #
addi $sp, $sp, 12     #
jr $ra                               #

CellularAutomaton_option:     #
#Parametro self en stackpoiner + 272
addi $sp, $sp, -4     #Push local var num stackpointer 268
addi $sp, $sp, -4     #Push local var param_0_to_out_string@0 stackpointer 264
addi $sp, $sp, -4     #Push local var param_0_to_out_string@1 stackpointer 260
addi $sp, $sp, -4     #Push local var param_0_to_out_string@2 stackpointer 256
addi $sp, $sp, -4     #Push local var param_0_to_out_string@3 stackpointer 252
addi $sp, $sp, -4     #Push local var param_0_to_out_string@4 stackpointer 248
addi $sp, $sp, -4     #Push local var param_0_to_out_string@5 stackpointer 244
addi $sp, $sp, -4     #Push local var param_0_to_out_string@6 stackpointer 240
addi $sp, $sp, -4     #Push local var param_0_to_out_string@7 stackpointer 236
addi $sp, $sp, -4     #Push local var param_0_to_out_string@8 stackpointer 232
addi $sp, $sp, -4     #Push local var param_0_to_out_string@9 stackpointer 228
addi $sp, $sp, -4     #Push local var param_0_to_out_string@10 stackpointer 224
addi $sp, $sp, -4     #Push local var param_0_to_out_string@11 stackpointer 220
addi $sp, $sp, -4     #Push local var param_0_to_out_string@12 stackpointer 216
addi $sp, $sp, -4     #Push local var param_0_to_out_string@13 stackpointer 212
addi $sp, $sp, -4     #Push local var param_0_to_out_string@14 stackpointer 208
addi $sp, $sp, -4     #Push local var param_0_to_out_string@15 stackpointer 204
addi $sp, $sp, -4     #Push local var param_0_to_out_string@16 stackpointer 200
addi $sp, $sp, -4     #Push local var param_0_to_out_string@17 stackpointer 196
addi $sp, $sp, -4     #Push local var param_0_to_out_string@18 stackpointer 192
addi $sp, $sp, -4     #Push local var param_0_to_out_string@19 stackpointer 188
addi $sp, $sp, -4     #Push local var param_0_to_out_string@20 stackpointer 184
addi $sp, $sp, -4     #Push local var param_0_to_out_string@21 stackpointer 180
addi $sp, $sp, -4     #Push local var param_0_to_out_string@22 stackpointer 176
addi $sp, $sp, -4     #Push local var param_0_to_out_string@23 stackpointer 172
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 168
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 164
addi $sp, $sp, -4     #Push local var int_eq@_a@1 stackpointer 160
addi $sp, $sp, -4     #Push local var int_eq@_b@1 stackpointer 156
addi $sp, $sp, -4     #Push local var int_eq@_a@2 stackpointer 152
addi $sp, $sp, -4     #Push local var int_eq@_b@2 stackpointer 148
addi $sp, $sp, -4     #Push local var int_eq@_a@3 stackpointer 144
addi $sp, $sp, -4     #Push local var int_eq@_b@3 stackpointer 140
addi $sp, $sp, -4     #Push local var int_eq@_a@4 stackpointer 136
addi $sp, $sp, -4     #Push local var int_eq@_b@4 stackpointer 132
addi $sp, $sp, -4     #Push local var int_eq@_a@5 stackpointer 128
addi $sp, $sp, -4     #Push local var int_eq@_b@5 stackpointer 124
addi $sp, $sp, -4     #Push local var int_eq@_a@6 stackpointer 120
addi $sp, $sp, -4     #Push local var int_eq@_b@6 stackpointer 116
addi $sp, $sp, -4     #Push local var int_eq@_a@7 stackpointer 112
addi $sp, $sp, -4     #Push local var int_eq@_b@7 stackpointer 108
addi $sp, $sp, -4     #Push local var int_eq@_a@8 stackpointer 104
addi $sp, $sp, -4     #Push local var int_eq@_b@8 stackpointer 100
addi $sp, $sp, -4     #Push local var int_eq@_a@9 stackpointer 96
addi $sp, $sp, -4     #Push local var int_eq@_b@9 stackpointer 92
addi $sp, $sp, -4     #Push local var int_eq@_a@10 stackpointer 88
addi $sp, $sp, -4     #Push local var int_eq@_b@10 stackpointer 84
addi $sp, $sp, -4     #Push local var int_eq@_a@11 stackpointer 80
addi $sp, $sp, -4     #Push local var int_eq@_b@11 stackpointer 76
addi $sp, $sp, -4     #Push local var int_eq@_a@12 stackpointer 72
addi $sp, $sp, -4     #Push local var int_eq@_b@12 stackpointer 68
addi $sp, $sp, -4     #Push local var int_eq@_a@13 stackpointer 64
addi $sp, $sp, -4     #Push local var int_eq@_b@13 stackpointer 60
addi $sp, $sp, -4     #Push local var int_eq@_a@14 stackpointer 56
addi $sp, $sp, -4     #Push local var int_eq@_b@14 stackpointer 52
addi $sp, $sp, -4     #Push local var int_eq@_a@15 stackpointer 48
addi $sp, $sp, -4     #Push local var int_eq@_b@15 stackpointer 44
addi $sp, $sp, -4     #Push local var int_eq@_a@16 stackpointer 40
addi $sp, $sp, -4     #Push local var int_eq@_b@16 stackpointer 36
addi $sp, $sp, -4     #Push local var int_eq@_a@17 stackpointer 32
addi $sp, $sp, -4     #Push local var int_eq@_b@17 stackpointer 28
addi $sp, $sp, -4     #Push local var int_eq@_a@18 stackpointer 24
addi $sp, $sp, -4     #Push local var int_eq@_b@18 stackpointer 20
addi $sp, $sp, -4     #Push local var int_eq@_a@19 stackpointer 16
addi $sp, $sp, -4     #Push local var int_eq@_b@19 stackpointer 12
addi $sp, $sp, -4     #Push local var int_eq@_a@20 stackpointer 8
addi $sp, $sp, -4     #Push local var int_eq@_b@20 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_option
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
li $s4, 0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 268($sp)      #
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_30      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 264($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 268($sp)      #Lee el valor de la var param_0_to_out_string@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@0
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 1 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_31      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 260($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 264($sp)      #Lee el valor de la var param_0_to_out_string@1
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@1
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 2 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_32      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 256($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 260($sp)      #Lee el valor de la var param_0_to_out_string@2
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@2
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 3 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_33      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 252($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 256($sp)      #Lee el valor de la var param_0_to_out_string@3
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@3
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 4 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_34      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 248($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 252($sp)      #Lee el valor de la var param_0_to_out_string@4
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@4
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 5 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_35      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 244($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 248($sp)      #Lee el valor de la var param_0_to_out_string@5
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@5
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 6 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_36      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 240($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 244($sp)      #Lee el valor de la var param_0_to_out_string@6
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@6
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 7 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_37      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 236($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 240($sp)      #Lee el valor de la var param_0_to_out_string@7
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@7
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 8 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_38      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 232($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 236($sp)      #Lee el valor de la var param_0_to_out_string@8
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@8
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 9 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_39      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 228($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 232($sp)      #Lee el valor de la var param_0_to_out_string@9
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@9
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 10 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_40      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 224($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 228($sp)      #Lee el valor de la var param_0_to_out_string@10
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@10
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 11 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_41      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 220($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 224($sp)      #Lee el valor de la var param_0_to_out_string@11
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@11
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 12 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_42      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 216($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 220($sp)      #Lee el valor de la var param_0_to_out_string@12
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@12
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 13 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_43      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 212($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 216($sp)      #Lee el valor de la var param_0_to_out_string@13
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@13
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 14 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_44      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 208($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 212($sp)      #Lee el valor de la var param_0_to_out_string@14
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@14
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 15 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_45      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 204($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 208($sp)      #Lee el valor de la var param_0_to_out_string@15
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@15
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 16 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_46      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 200($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 204($sp)      #Lee el valor de la var param_0_to_out_string@16
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@16
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 17 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_47      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 196($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 200($sp)      #Lee el valor de la var param_0_to_out_string@17
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@17
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 18 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_48      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 192($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 196($sp)      #Lee el valor de la var param_0_to_out_string@18
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@18
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 19 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_49      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 188($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 192($sp)      #Lee el valor de la var param_0_to_out_string@19
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@19
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 20 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_50      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 184($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 188($sp)      #Lee el valor de la var param_0_to_out_string@20
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@20
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 21 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_51      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 180($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 184($sp)      #Lee el valor de la var param_0_to_out_string@21
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@21
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 22 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_52      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 176($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 180($sp)      #Lee el valor de la var param_0_to_out_string@22
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@22
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 23 de una sequencia Block
#Asignando un nuevo valor a la variable num
#StaticDispatch in_int
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 276($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 24($t1)      #Buscando el metodo dinamico para la funcion in_int
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
move $t0, $s4      #
sw $t0, 268($sp)      #
lw $t0, 268($sp)      #
move $s4, $t0      #
#Inicio del paso 24 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_53      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 172($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 272($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 176($sp)      #Lee el valor de la var param_0_to_out_string@23
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@23
lw $t0, 280($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 25 de una sequencia Block
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 168($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 1      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 164($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 168($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 164($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 160($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 2      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 156($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 160($sp)      #Guarda el parametro 0 -> int_eq@_a@1
lw $a1, 156($sp)      #Guarda el parametro 1 -> int_eq@_b@1
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_1     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 152($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 3      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 148($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 152($sp)      #Guarda el parametro 0 -> int_eq@_a@2
lw $a1, 148($sp)      #Guarda el parametro 1 -> int_eq@_b@2
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_2     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 144($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 4      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 140($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 144($sp)      #Guarda el parametro 0 -> int_eq@_a@3
lw $a1, 140($sp)      #Guarda el parametro 1 -> int_eq@_b@3
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_3     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 136($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 5      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 132($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 136($sp)      #Guarda el parametro 0 -> int_eq@_a@4
lw $a1, 132($sp)      #Guarda el parametro 1 -> int_eq@_b@4
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_4     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 128($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 6      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 124($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 128($sp)      #Guarda el parametro 0 -> int_eq@_a@5
lw $a1, 124($sp)      #Guarda el parametro 1 -> int_eq@_b@5
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_5     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 120($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 7      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 116($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 120($sp)      #Guarda el parametro 0 -> int_eq@_a@6
lw $a1, 116($sp)      #Guarda el parametro 1 -> int_eq@_b@6
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_6     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 112($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 8      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 108($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 112($sp)      #Guarda el parametro 0 -> int_eq@_a@7
lw $a1, 108($sp)      #Guarda el parametro 1 -> int_eq@_b@7
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_7     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 104($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 9      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 100($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 104($sp)      #Guarda el parametro 0 -> int_eq@_a@8
lw $a1, 100($sp)      #Guarda el parametro 1 -> int_eq@_b@8
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_8     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 96($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 10      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 92($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 96($sp)      #Guarda el parametro 0 -> int_eq@_a@9
lw $a1, 92($sp)      #Guarda el parametro 1 -> int_eq@_b@9
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_9     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 88($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 11      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 84($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 88($sp)      #Guarda el parametro 0 -> int_eq@_a@10
lw $a1, 84($sp)      #Guarda el parametro 1 -> int_eq@_b@10
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_10     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 80($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 12      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 76($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 80($sp)      #Guarda el parametro 0 -> int_eq@_a@11
lw $a1, 76($sp)      #Guarda el parametro 1 -> int_eq@_b@11
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_11     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 72($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 13      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 68($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 72($sp)      #Guarda el parametro 0 -> int_eq@_a@12
lw $a1, 68($sp)      #Guarda el parametro 1 -> int_eq@_b@12
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_12     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 64($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 14      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 60($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 64($sp)      #Guarda el parametro 0 -> int_eq@_a@13
lw $a1, 60($sp)      #Guarda el parametro 1 -> int_eq@_b@13
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_13     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 56($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 15      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 52($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 56($sp)      #Guarda el parametro 0 -> int_eq@_a@14
lw $a1, 52($sp)      #Guarda el parametro 1 -> int_eq@_b@14
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_14     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 48($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 16      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 44($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 48($sp)      #Guarda el parametro 0 -> int_eq@_a@15
lw $a1, 44($sp)      #Guarda el parametro 1 -> int_eq@_b@15
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_15     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 40($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 17      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 36($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 40($sp)      #Guarda el parametro 0 -> int_eq@_a@16
lw $a1, 36($sp)      #Guarda el parametro 1 -> int_eq@_b@16
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_16     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 32($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 18      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 28($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 32($sp)      #Guarda el parametro 0 -> int_eq@_a@17
lw $a1, 28($sp)      #Guarda el parametro 1 -> int_eq@_b@17
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_17     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 24($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 19      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 20($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 24($sp)      #Guarda el parametro 0 -> int_eq@_a@18
lw $a1, 20($sp)      #Guarda el parametro 1 -> int_eq@_b@18
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_18     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 16($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 20      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 12($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 16($sp)      #Guarda el parametro 0 -> int_eq@_a@19
lw $a1, 12($sp)      #Guarda el parametro 1 -> int_eq@_b@19
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_19     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var num
lw $t0, 268($sp)      #
sw $t0, 8($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 21      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 4($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 272($sp)      #Guarda self
lw $a0, 8($sp)      #Guarda el parametro 0 -> int_eq@_a@20
lw $a1, 4($sp)      #Guarda el parametro 1 -> int_eq@_b@20
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 272($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_option_20     #
#Else case
la $t0, string_54      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_option_20                               #
then_CellularAutomaton_option_20:
#Then case
la $t0, string_55      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_20:
#Fin de un If
j fin_CellularAutomaton_option_19                               #
then_CellularAutomaton_option_19:
#Then case
la $t0, string_56      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_19:
#Fin de un If
j fin_CellularAutomaton_option_18                               #
then_CellularAutomaton_option_18:
#Then case
la $t0, string_57      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_18:
#Fin de un If
j fin_CellularAutomaton_option_17                               #
then_CellularAutomaton_option_17:
#Then case
la $t0, string_58      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_17:
#Fin de un If
j fin_CellularAutomaton_option_16                               #
then_CellularAutomaton_option_16:
#Then case
la $t0, string_59      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_16:
#Fin de un If
j fin_CellularAutomaton_option_15                               #
then_CellularAutomaton_option_15:
#Then case
la $t0, string_60      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_15:
#Fin de un If
j fin_CellularAutomaton_option_14                               #
then_CellularAutomaton_option_14:
#Then case
la $t0, string_61      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_14:
#Fin de un If
j fin_CellularAutomaton_option_13                               #
then_CellularAutomaton_option_13:
#Then case
la $t0, string_62      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_13:
#Fin de un If
j fin_CellularAutomaton_option_12                               #
then_CellularAutomaton_option_12:
#Then case
la $t0, string_63      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_12:
#Fin de un If
j fin_CellularAutomaton_option_11                               #
then_CellularAutomaton_option_11:
#Then case
la $t0, string_64      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_11:
#Fin de un If
j fin_CellularAutomaton_option_10                               #
then_CellularAutomaton_option_10:
#Then case
la $t0, string_65      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_10:
#Fin de un If
j fin_CellularAutomaton_option_9                               #
then_CellularAutomaton_option_9:
#Then case
la $t0, string_66      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_9:
#Fin de un If
j fin_CellularAutomaton_option_8                               #
then_CellularAutomaton_option_8:
#Then case
la $t0, string_67      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_8:
#Fin de un If
j fin_CellularAutomaton_option_7                               #
then_CellularAutomaton_option_7:
#Then case
la $t0, string_68      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_7:
#Fin de un If
j fin_CellularAutomaton_option_6                               #
then_CellularAutomaton_option_6:
#Then case
la $t0, string_69      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_6:
#Fin de un If
j fin_CellularAutomaton_option_5                               #
then_CellularAutomaton_option_5:
#Then case
la $t0, string_70      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_5:
#Fin de un If
j fin_CellularAutomaton_option_4                               #
then_CellularAutomaton_option_4:
#Then case
la $t0, string_71      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_4:
#Fin de un If
j fin_CellularAutomaton_option_3                               #
then_CellularAutomaton_option_3:
#Then case
la $t0, string_72      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_3:
#Fin de un If
j fin_CellularAutomaton_option_2                               #
then_CellularAutomaton_option_2:
#Then case
la $t0, string_73      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_2:
#Fin de un If
j fin_CellularAutomaton_option_1                               #
then_CellularAutomaton_option_1:
#Then case
la $t0, string_74      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_1:
#Fin de un If
j fin_CellularAutomaton_option_0                               #
then_CellularAutomaton_option_0:
#Then case
la $t0, string_75      #
move $s4, $t0      #
lw $s6, 272($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_option_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 276     #
jr $ra                               #

Board_board_init:     #
#Parametro self en stackpoiner + 64
#Parametro start@0 en stackpoiner + 60
addi $sp, $sp, -4     #Push local var size stackpointer 56
addi $sp, $sp, -4     #Push local var param_0_to_size_of_board@0 stackpointer 52
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 48
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 44
addi $sp, $sp, -4     #Push local var int_eq@_a@1 stackpointer 40
addi $sp, $sp, -4     #Push local var int_eq@_b@1 stackpointer 36
addi $sp, $sp, -4     #Push local var int_eq@_a@2 stackpointer 32
addi $sp, $sp, -4     #Push local var int_eq@_b@2 stackpointer 28
addi $sp, $sp, -4     #Push local var int_eq@_a@3 stackpointer 24
addi $sp, $sp, -4     #Push local var int_eq@_b@3 stackpointer 20
addi $sp, $sp, -4     #Push local var int_eq@_a@4 stackpointer 16
addi $sp, $sp, -4     #Push local var int_eq@_b@4 stackpointer 12
addi $sp, $sp, -4     #Push local var int_eq@_a@5 stackpointer 8
addi $sp, $sp, -4     #Push local var int_eq@_b@5 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion Board_board_init
#Eval Expression to Let size
#StaticDispatch size_of_board
#Evalua el parametro 0 para el CastingDispatch size_of_board
#Get Local Var start
lw $t0, 60($sp)      #
sw $t0, 52($sp)      #
#Fin del paramentro 0 al CastingDispatch size_of_board
lw $t0, 64($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 56($sp)      #Lee el valor de la var param_0_to_size_of_board@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_size_of_board@0
lw $t0, 72($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de Board
lw $t3, 40($t1)      #Buscando el metodo dinamico para la funcion size_of_board
jal $t3                               #
sw $v0, 56($sp)      #Asigna el resultado de la funcion
#Fin de la asignacion Let size
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var size
lw $t0, 56($sp)      #
sw $t0, 48($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 15      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 44($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 64($sp)      #Guarda self
lw $a0, 48($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 44($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 64($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_Board_board_init_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var size
lw $t0, 56($sp)      #
sw $t0, 40($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 16      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 36($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 64($sp)      #Guarda self
lw $a0, 40($sp)      #Guarda el parametro 0 -> int_eq@_a@1
lw $a1, 36($sp)      #Guarda el parametro 1 -> int_eq@_b@1
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 64($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_Board_board_init_1     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var size
lw $t0, 56($sp)      #
sw $t0, 32($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 20      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 28($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 64($sp)      #Guarda self
lw $a0, 32($sp)      #Guarda el parametro 0 -> int_eq@_a@2
lw $a1, 28($sp)      #Guarda el parametro 1 -> int_eq@_b@2
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 64($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_Board_board_init_2     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var size
lw $t0, 56($sp)      #
sw $t0, 24($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 21      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 20($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 64($sp)      #Guarda self
lw $a0, 24($sp)      #Guarda el parametro 0 -> int_eq@_a@3
lw $a1, 20($sp)      #Guarda el parametro 1 -> int_eq@_b@3
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 64($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_Board_board_init_3     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var size
lw $t0, 56($sp)      #
sw $t0, 16($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 25      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 12($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 64($sp)      #Guarda self
lw $a0, 16($sp)      #Guarda el parametro 0 -> int_eq@_a@4
lw $a1, 12($sp)      #Guarda el parametro 1 -> int_eq@_b@4
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 64($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_Board_board_init_4     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var size
lw $t0, 56($sp)      #
sw $t0, 8($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 28      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 4($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 64($sp)      #Guarda self
lw $a0, 8($sp)      #Guarda el parametro 0 -> int_eq@_a@5
lw $a1, 4($sp)      #Guarda el parametro 1 -> int_eq@_b@5
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 64($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_Board_board_init_5     #
#Else case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable rows
li $s4, 5      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 4($t0)      #Lee la propiedad rows
move $s4, $t1      #Guarda el valor de la propiedad rows en la variable local _
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable columns
li $s4, 5      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
move $s4, $t1      #Guarda el valor de la propiedad columns en la variable local _
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable board_size
#Get Local Var size
lw $t0, 56($sp)      #
move $s4, $t0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
move $s4, $t1      #Guarda el valor de la propiedad board_size en la variable local _
j fin_Board_board_init_5                               #
then_Board_board_init_5:
#Then case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable rows
li $s4, 7      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 4($t0)      #Lee la propiedad rows
move $s4, $t1      #Guarda el valor de la propiedad rows en la variable local _
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable columns
li $s4, 4      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
move $s4, $t1      #Guarda el valor de la propiedad columns en la variable local _
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable board_size
#Get Local Var size
lw $t0, 56($sp)      #
move $s4, $t0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
move $s4, $t1      #Guarda el valor de la propiedad board_size en la variable local _
fin_Board_board_init_5:
#Fin de un If
j fin_Board_board_init_4                               #
then_Board_board_init_4:
#Then case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable rows
li $s4, 5      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 4($t0)      #Lee la propiedad rows
move $s4, $t1      #Guarda el valor de la propiedad rows en la variable local _
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable columns
li $s4, 5      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
move $s4, $t1      #Guarda el valor de la propiedad columns en la variable local _
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable board_size
#Get Local Var size
lw $t0, 56($sp)      #
move $s4, $t0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
move $s4, $t1      #Guarda el valor de la propiedad board_size en la variable local _
fin_Board_board_init_4:
#Fin de un If
j fin_Board_board_init_3                               #
then_Board_board_init_3:
#Then case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable rows
li $s4, 3      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 4($t0)      #Lee la propiedad rows
move $s4, $t1      #Guarda el valor de la propiedad rows en la variable local _
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable columns
li $s4, 7      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
move $s4, $t1      #Guarda el valor de la propiedad columns en la variable local _
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable board_size
#Get Local Var size
lw $t0, 56($sp)      #
move $s4, $t0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
move $s4, $t1      #Guarda el valor de la propiedad board_size en la variable local _
fin_Board_board_init_3:
#Fin de un If
j fin_Board_board_init_2                               #
then_Board_board_init_2:
#Then case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable rows
li $s4, 4      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 4($t0)      #Lee la propiedad rows
move $s4, $t1      #Guarda el valor de la propiedad rows en la variable local _
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable columns
li $s4, 5      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
move $s4, $t1      #Guarda el valor de la propiedad columns en la variable local _
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable board_size
#Get Local Var size
lw $t0, 56($sp)      #
move $s4, $t0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
move $s4, $t1      #Guarda el valor de la propiedad board_size en la variable local _
fin_Board_board_init_2:
#Fin de un If
j fin_Board_board_init_1                               #
then_Board_board_init_1:
#Then case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable rows
li $s4, 4      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 4($t0)      #Lee la propiedad rows
move $s4, $t1      #Guarda el valor de la propiedad rows en la variable local _
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable columns
li $s4, 4      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
move $s4, $t1      #Guarda el valor de la propiedad columns en la variable local _
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable board_size
#Get Local Var size
lw $t0, 56($sp)      #
move $s4, $t0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
move $s4, $t1      #Guarda el valor de la propiedad board_size en la variable local _
fin_Board_board_init_1:
#Fin de un If
j fin_Board_board_init_0                               #
then_Board_board_init_0:
#Then case
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable rows
li $s4, 3      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 4($t0)      #Lee la propiedad rows
move $s4, $t1      #Guarda el valor de la propiedad rows en la variable local _
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable columns
li $s4, 5      #
lw $s6, 64($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
move $s4, $t1      #Guarda el valor de la propiedad columns en la variable local _
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable board_size
#Get Local Var size
lw $t0, 56($sp)      #
move $s4, $t0      #
lw $t0, 64($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $t0, 64($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
move $s4, $t1      #Guarda el valor de la propiedad board_size en la variable local _
fin_Board_board_init_0:
#Fin de un If
#Inicio del paso 1 de una sequencia Block
#Get Local Var self
lw $t0, 64($sp)      #
move $s4, $t0      #
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 68     #
jr $ra                               #

CellularAutomaton_init:     #
#Parametro self en stackpoiner + 12
#Parametro map@0 en stackpoiner + 8
addi $sp, $sp, -4     #Push local var param_0_to_board_init@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_init
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable population_map
#Get Local Var map
lw $t0, 8($sp)      #
move $s4, $t0      #
lw $t0, 12($sp)      #Instancia de la clase CellularAutomaton
move $t1, $s4      #Guarda el valor que se le asignara a la propieded population_map
sw $t1, 16($t0)      #Setea la propiedad population_map con el valor de _
lw $t0, 12($sp)      #Instancia de la clase CellularAutomaton
lw $t1, 16($t0)      #Lee la propiedad population_map
move $s4, $t1      #Guarda el valor de la propiedad population_map en la variable local _
#Inicio del paso 1 de una sequencia Block
#StaticDispatch board_init
#Evalua el parametro 0 para el CastingDispatch board_init
#Get Local Var map
lw $t0, 8($sp)      #
sw $t0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch board_init
lw $t0, 12($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_board_init@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_board_init@0
lw $t0, 20($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 44($t1)      #Buscando el metodo dinamico para la funcion board_init
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 2 de una sequencia Block
#Get Local Var self
lw $t0, 12($sp)      #
move $s4, $t0      #
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 16     #
jr $ra                               #

CellularAutomaton_print:     #
#Parametro self en stackpoiner + 56
addi $sp, $sp, -4     #Push local var i stackpointer 52
addi $sp, $sp, -4     #Push local var num stackpointer 48
addi $sp, $sp, -4     #Push local var param_0_to_out_string@0 stackpointer 44
addi $sp, $sp, -4     #Push local var instance_dynamic_to_substr@0 stackpointer 40
addi $sp, $sp, -4     #Push local var param_0_to_substr@0 stackpointer 36
addi $sp, $sp, -4     #Push local var param_1_to_substr@0 stackpointer 32
addi $sp, $sp, -4     #Push local var param_0_to_out_string@1 stackpointer 28
addi $sp, $sp, -4     #Push local var param_0_to_out_string@2 stackpointer 24
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 20
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 16
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 12
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_out_string@3 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_print
#Eval Expression to Let i
li $s4, 0      #
lw $s6, 56($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 52($sp)      #
#Fin de la asignacion Let i
#Eval Expression to Let num
#Get Self Property board_size
lw $t0, 56($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
sw $t1, 48($sp)      #Guarda el valor de la propiedad board_size en la variable local num
#Fin de la asignacion Let num
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_0      #
move $s4, $t0      #
lw $s6, 56($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 44($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 56($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 48($sp)      #Lee el valor de la var param_0_to_out_string@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@0
lw $t0, 64($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 1 de una sequencia Block
#Inicio de un While
j while_cond_0                               #
while_back_0:
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
#Evalua la Expresion para el DinamicDispatch substr
#Get Self Property population_map
lw $t0, 56($sp)      #Instancia de la clase CellularAutomaton
lw $t1, 16($t0)      #Lee la propiedad population_map
sw $t1, 40($sp)      #Guarda el valor de la propiedad population_map en la variable local instance_dynamic_to_substr@0
#Fin de la exprecion previa al DinamicDispatch substr
#Evalua el parametro 0 para el CastingDispatch substr
#Get Local Var i
lw $t0, 52($sp)      #
sw $t0, 36($sp)      #
#Fin del paramentro 0 al CastingDispatch substr
#Evalua el parametro 1 para el CastingDispatch substr
#Get Self Property columns
lw $t0, 56($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 32($sp)      #Guarda el valor de la propiedad columns en la variable local param_1_to_substr@0
#Fin del paramentro 1 al CastingDispatch substr
lw $t0, 40($sp)      #Lee el valor de la var instance_dynamic_to_substr@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_substr@0
lw $t0, 40($sp)      #Lee el valor de la var param_0_to_substr@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_substr@0
lw $t0, 40($sp)      #Lee el valor de la var param_1_to_substr@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_1_to_substr@0
lw $t0, 52($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de String
lw $t3, 32($t1)      #Buscando el metodo dinamico para la funcion substr
jal $t3                               #
sw $v0, 28($sp)      #Asigna el resultado de la funcion
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 56($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 32($sp)      #Lee el valor de la var param_0_to_out_string@1
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@1
lw $t0, 64($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 1 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_1      #
move $s4, $t0      #
lw $s6, 56($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 24($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 56($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 28($sp)      #Lee el valor de la var param_0_to_out_string@2
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@2
lw $t0, 64($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable i
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var i
lw $t0, 52($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Get Self Property columns
lw $t0, 56($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 16($sp)      #Guarda el valor de la propiedad columns en la variable local sum@_b@0
#Resolucion del operado derecha de una operacion sum
lw $s6, 56($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 16($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 52($sp)      #
lw $t0, 52($sp)      #
move $s4, $t0      #
#Fin del cuerpo e inicio de la condicion de un While
while_cond_0:
#Evaluando el operado izquierdo de una operacion less
#Get Local Var i
lw $t0, 52($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
#Get Local Var num
lw $t0, 48($sp)      #
sw $t0, 8($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 56($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 8($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 56($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, while_back_0     #
#Fin de la condicion de un While
lw $t0, 56($sp)      #
move $s4, $t0      #
#Inicio del paso 2 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_2      #
move $s4, $t0      #
lw $s6, 56($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 56($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_out_string@3
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@3
lw $t0, 64($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 3 de una sequencia Block
#Get Local Var self
lw $t0, 56($sp)      #
move $s4, $t0      #
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 60     #
jr $ra                               #

CellularAutomaton_prompt:     #
#Parametro self en stackpoiner + 28
addi $sp, $sp, -4     #Push local var ans stackpointer 24
addi $sp, $sp, -4     #Push local var param_0_to_out_string@0 stackpointer 20
addi $sp, $sp, -4     #Push local var param_0_to_out_string@1 stackpointer 16
addi $sp, $sp, -4     #Push local var param_0_to_out_string@2 stackpointer 12
addi $sp, $sp, -4     #Push local var str_eq@_a@0 stackpointer 8
addi $sp, $sp, -4     #Push local var str_eq@_b@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_prompt
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
la $t0, _______void_str_______      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 24($sp)      #
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_76      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 20($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 24($sp)      #Lee el valor de la var param_0_to_out_string@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@0
lw $t0, 36($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 1 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_77      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 16($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 20($sp)      #Lee el valor de la var param_0_to_out_string@1
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@1
lw $t0, 36($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 2 de una sequencia Block
#Asignando un nuevo valor a la variable ans
#StaticDispatch in_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 32($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 28($t1)      #Buscando el metodo dinamico para la funcion in_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
move $t0, $s4      #
sw $t0, 24($sp)      #
lw $t0, 24($sp)      #
move $s4, $t0      #
#Inicio del paso 3 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_78      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 12($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 16($sp)      #Lee el valor de la var param_0_to_out_string@2
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@2
lw $t0, 36($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 4 de una sequencia Block
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#Get Local Var ans
lw $t0, 24($sp)      #
sw $t0, 8($sp)      #
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_79      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 4($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 28($sp)      #Guarda self
lw $a0, 8($sp)      #Guarda el parametro 0 -> str_eq@_a@0
lw $a1, 4($sp)      #Guarda el parametro 1 -> str_eq@_b@0
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 28($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_prompt_0     #
#Else case
li $s4, 1      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __bool__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_prompt_0                               #
then_CellularAutomaton_prompt_0:
#Then case
li $s4, 0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __bool__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_prompt_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 32     #
jr $ra                               #

CellularAutomaton_prompt2:     #
#Parametro self en stackpoiner + 28
addi $sp, $sp, -4     #Push local var ans stackpointer 24
addi $sp, $sp, -4     #Push local var param_0_to_out_string@0 stackpointer 20
addi $sp, $sp, -4     #Push local var param_0_to_out_string@1 stackpointer 16
addi $sp, $sp, -4     #Push local var param_0_to_out_string@2 stackpointer 12
addi $sp, $sp, -4     #Push local var str_eq@_a@0 stackpointer 8
addi $sp, $sp, -4     #Push local var str_eq@_b@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_prompt2
la $t0, _______void_str_______      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 24($sp)      #
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_80      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 20($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 24($sp)      #Lee el valor de la var param_0_to_out_string@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@0
lw $t0, 36($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 1 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_81      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 16($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 20($sp)      #Lee el valor de la var param_0_to_out_string@1
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@1
lw $t0, 36($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 2 de una sequencia Block
#StaticDispatch out_string
#Evalua el parametro 0 para el CastingDispatch out_string
la $t0, string_82      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 12($sp)      #
#Fin del paramentro 0 al CastingDispatch out_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 16($sp)      #Lee el valor de la var param_0_to_out_string@2
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_out_string@2
lw $t0, 36($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 36($t1)      #Buscando el metodo dinamico para la funcion out_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
#Inicio del paso 3 de una sequencia Block
#Asignando un nuevo valor a la variable ans
#StaticDispatch in_string
lw $t0, 28($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 32($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 28($t1)      #Buscando el metodo dinamico para la funcion in_string
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
move $t0, $s4      #
sw $t0, 24($sp)      #
lw $t0, 24($sp)      #
move $s4, $t0      #
#Inicio del paso 4 de una sequencia Block
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#Get Local Var ans
lw $t0, 24($sp)      #
sw $t0, 8($sp)      #
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_83      #
move $s4, $t0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 4($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 28($sp)      #Guarda self
lw $a0, 8($sp)      #Guarda el parametro 0 -> str_eq@_a@0
lw $a1, 4($sp)      #Guarda el parametro 1 -> str_eq@_b@0
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 28($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_prompt2_0     #
#Else case
li $s4, 0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __bool__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_prompt2_0                               #
then_CellularAutomaton_prompt2_0:
#Then case
li $s4, 1      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $s6, 28($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __bool__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_prompt2_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 32     #
jr $ra                               #

CellularAutomaton_evolve:     #
#Parametro self en stackpoiner + 44
addi $sp, $sp, -4     #Push local var position stackpointer 40
addi $sp, $sp, -4     #Push local var num stackpointer 36
addi $sp, $sp, -4     #Push local var temp stackpointer 32
addi $sp, $sp, -4     #Push local var instance_dynamic_to_concat@0 stackpointer 28
addi $sp, $sp, -4     #Push local var param_0_to_cell_at_next_evolution@0 stackpointer 24
addi $sp, $sp, -4     #Push local var param_0_to_concat@0 stackpointer 20
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 16
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 12
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 8
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_evolve
#Eval Expression to Let position
li $s4, 0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 40($sp)      #
#Fin de la asignacion Let position
#Eval Expression to Let num
#StaticDispatch num_cells
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 48($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 56($t1)      #Buscando el metodo dinamico para la funcion num_cells
jal $t3                               #
sw $v0, 36($sp)      #Asigna el resultado de la funcion
#Fin de la asignacion Let num
la $t0, _______void_str_______      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 32($sp)      #
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Inicio de un While
j while_cond_1                               #
while_back_1:
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Asignando un nuevo valor a la variable temp
#Evalua la Expresion para el DinamicDispatch concat
#Get Local Var temp
lw $t0, 32($sp)      #
sw $t0, 28($sp)      #
#Fin de la exprecion previa al DinamicDispatch concat
#Evalua el parametro 0 para el CastingDispatch concat
#StaticDispatch cell_at_next_evolution
#Evalua el parametro 0 para el CastingDispatch cell_at_next_evolution
#Get Local Var position
lw $t0, 40($sp)      #
sw $t0, 24($sp)      #
#Fin del paramentro 0 al CastingDispatch cell_at_next_evolution
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 28($sp)      #Lee el valor de la var param_0_to_cell_at_next_evolution@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_cell_at_next_evolution@0
lw $t0, 52($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 100($t1)      #Buscando el metodo dinamico para la funcion cell_at_next_evolution
jal $t3                               #
sw $v0, 20($sp)      #Asigna el resultado de la funcion
#Fin del paramentro 0 al CastingDispatch concat
lw $t0, 28($sp)      #Lee el valor de la var instance_dynamic_to_concat@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_concat@0
lw $t0, 24($sp)      #Lee el valor de la var param_0_to_concat@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_concat@0
lw $t0, 36($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de String
lw $t3, 24($t1)      #Buscando el metodo dinamico para la funcion concat
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
move $t0, $s4      #
sw $t0, 32($sp)      #
lw $t0, 32($sp)      #
move $s4, $t0      #
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable position
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 40($sp)      #
sw $t0, 16($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 12($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 44($sp)      #Guarda self
lw $a0, 16($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 12($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
move $s4, $v0      #
move $t0, $s4      #
sw $t0, 40($sp)      #
lw $t0, 40($sp)      #
move $s4, $t0      #
#Fin del cuerpo e inicio de la condicion de un While
while_cond_1:
#Evaluando el operado izquierdo de una operacion less
#Get Local Var position
lw $t0, 40($sp)      #
sw $t0, 8($sp)      #
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
#Get Local Var num
lw $t0, 36($sp)      #
sw $t0, 4($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 44($sp)      #Guarda self
lw $a0, 8($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 4($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 44($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, while_back_1     #
#Fin de la condicion de un While
lw $t0, 44($sp)      #
move $s4, $t0      #
#Inicio del paso 1 de una sequencia Block
#Asignando un nuevo valor a la variable population_map
#Get Local Var temp
lw $t0, 32($sp)      #
move $s4, $t0      #
lw $t0, 44($sp)      #Instancia de la clase CellularAutomaton
move $t1, $s4      #Guarda el valor que se le asignara a la propieded population_map
sw $t1, 16($t0)      #Setea la propiedad population_map con el valor de _
lw $t0, 44($sp)      #Instancia de la clase CellularAutomaton
lw $t1, 16($t0)      #Lee la propiedad population_map
move $s4, $t1      #Guarda el valor de la propiedad population_map en la variable local _
#Inicio del paso 2 de una sequencia Block
#Get Local Var self
lw $t0, 44($sp)      #
move $s4, $t0      #
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 48     #
jr $ra                               #

new_ctr_Board:     #
#Parametro self en stackpoiner + 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_Board
lw $t0, 4($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
jal new_ctr_IO                               #
li $s4, 0      #
lw $s6, 4($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 4($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded rows
sw $t1, 4($t0)      #Setea la propiedad rows con el valor de _
li $s4, 0      #
lw $s6, 4($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 4($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded columns
sw $t1, 8($t0)      #Setea la propiedad columns con el valor de _
li $s4, 0      #
lw $s6, 4($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
lw $t0, 4($sp)      #Instancia de la clase Board
move $t1, $s4      #Guarda el valor que se le asignara a la propieded board_size
sw $t1, 12($t0)      #Setea la propiedad board_size con el valor de _
lw $v0, 4($sp)      #Return self
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 8     #
jr $ra                               #

IO_in_int:     #
#Parametro self en stackpoiner + 0
addi $sp, $sp, -4     #Push local var $ra stackpointer -4
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion IO_in_int
lw $s6, 4($sp)      #Guarda self
jal __int__input__                               #
lw $ra, 0($sp)      #
addi $sp, $sp, 8     #
jr $ra                               #

Board_size_of_board:     #
#Parametro self en stackpoiner + 12
#Parametro initial@0 en stackpoiner + 8
addi $sp, $sp, -4     #Push local var instance_dynamic_to_length@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion Board_size_of_board
#Evalua la Expresion para el DinamicDispatch length
#Get Local Var initial
#Fin de la exprecion previa al DinamicDispatch length
lw $t0, 8($sp)      #Lee el valor de la var initial@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con initial@0
lw $t0, 12($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de String
lw $t3, 28($t1)      #Buscando el metodo dinamico para la funcion length
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 16     #
jr $ra                               #

String_substr:     #
#Parametro self en stackpoiner + 8
#Parametro index en stackpoiner + 4
#Parametro count en stackpoiner + 0
addi $sp, $sp, -4     #Push local var $ra stackpointer -4
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion String_substr
lw $s6, 12($sp)      #Guarda self
lw $a0, 8($sp)      #Guarda el parametro 0 -> index
lw $a1, 4($sp)      #Guarda el parametro 1 -> count
jal __str__substr__                               #
lw $ra, 0($sp)      #
addi $sp, $sp, 16     #
jr $ra                               #

IO_in_string:     #
#Parametro self en stackpoiner + 0
addi $sp, $sp, -4     #Push local var $ra stackpointer -4
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion IO_in_string
lw $s6, 4($sp)      #Guarda self
jal __str__input__                               #
lw $ra, 0($sp)      #
addi $sp, $sp, 8     #
jr $ra                               #

CellularAutomaton_num_cells:     #
#Parametro self en stackpoiner + 8
addi $sp, $sp, -4     #Push local var instance_dynamic_to_length@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_num_cells
#Evalua la Expresion para el DinamicDispatch length
#Get Self Property population_map
lw $t0, 8($sp)      #Instancia de la clase CellularAutomaton
lw $t1, 16($t0)      #Lee la propiedad population_map
sw $t1, 4($sp)      #Guarda el valor de la propiedad population_map en la variable local instance_dynamic_to_length@0
#Fin de la exprecion previa al DinamicDispatch length
lw $t0, 4($sp)      #Lee el valor de la var instance_dynamic_to_length@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_length@0
lw $t0, 8($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de String
lw $t3, 28($t1)      #Buscando el metodo dinamico para la funcion length
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 12     #
jr $ra                               #

CellularAutomaton_cell_at_next_evolution:     #
#Parametro self en stackpoiner + 44
#Parametro position@0 en stackpoiner + 40
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 36
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 32
addi $sp, $sp, -4     #Push local var param_0_to_neighbors@0 stackpointer 28
addi $sp, $sp, -4     #Push local var int_eq@_a@1 stackpointer 24
addi $sp, $sp, -4     #Push local var int_eq@_b@1 stackpointer 20
addi $sp, $sp, -4     #Push local var param_0_to_neighbors@1 stackpointer 16
addi $sp, $sp, -4     #Push local var str_eq@_a@0 stackpointer 12
addi $sp, $sp, -4     #Push local var str_eq@_b@0 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_cell@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_cell_at_next_evolution
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#StaticDispatch neighbors
#Evalua el parametro 0 para el CastingDispatch neighbors
#Get Local Var position
lw $t0, 40($sp)      #
sw $t0, 28($sp)      #
#Fin del paramentro 0 al CastingDispatch neighbors
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 32($sp)      #Lee el valor de la var param_0_to_neighbors@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_neighbors@0
lw $t0, 52($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 96($t1)      #Buscando el metodo dinamico para la funcion neighbors
jal $t3                               #
sw $v0, 36($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 3      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 32($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 44($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 32($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 44($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_cell_at_next_evolution_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#StaticDispatch neighbors
#Evalua el parametro 0 para el CastingDispatch neighbors
#Get Local Var position
lw $t0, 40($sp)      #
sw $t0, 16($sp)      #
#Fin del paramentro 0 al CastingDispatch neighbors
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 20($sp)      #Lee el valor de la var param_0_to_neighbors@1
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_neighbors@1
lw $t0, 52($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 96($t1)      #Buscando el metodo dinamico para la funcion neighbors
jal $t3                               #
sw $v0, 24($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 2      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 20($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 44($sp)      #Guarda self
lw $a0, 24($sp)      #Guarda el parametro 0 -> int_eq@_a@1
lw $a1, 20($sp)      #Guarda el parametro 1 -> int_eq@_b@1
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 44($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_cell_at_next_evolution_1     #
#Else case
la $t0, string_25      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_cell_at_next_evolution_1                               #
then_CellularAutomaton_cell_at_next_evolution_1:
#Then case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch cell
#Evalua el parametro 0 para el CastingDispatch cell
#Get Local Var position
lw $t0, 40($sp)      #
sw $t0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch cell
lw $t0, 44($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_cell@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_cell@0
lw $t0, 52($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 60($t1)      #Buscando el metodo dinamico para la funcion cell
jal $t3                               #
sw $v0, 12($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_26      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 44($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> str_eq@_a@0
lw $a1, 8($sp)      #Guarda el parametro 1 -> str_eq@_b@0
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 44($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_cell_at_next_evolution_2     #
#Else case
la $t0, string_27      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_cell_at_next_evolution_2                               #
then_CellularAutomaton_cell_at_next_evolution_2:
#Then case
la $t0, string_28      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_cell_at_next_evolution_2:
#Fin de un If
fin_CellularAutomaton_cell_at_next_evolution_1:
#Fin de un If
j fin_CellularAutomaton_cell_at_next_evolution_0                               #
then_CellularAutomaton_cell_at_next_evolution_0:
#Then case
la $t0, string_29      #
move $s4, $t0      #
lw $s6, 44($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_cell_at_next_evolution_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 48     #
jr $ra                               #

String_concat:     #
#Parametro self en stackpoiner + 4
#Parametro string en stackpoiner + 0
addi $sp, $sp, -4     #Push local var $ra stackpointer -4
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion String_concat
lw $s6, 8($sp)      #Guarda self
lw $a0, 4($sp)      #Guarda el parametro 0 -> string
jal __str__concat__                               #
lw $ra, 0($sp)      #
addi $sp, $sp, 12     #
jr $ra                               #

new_ctr_IO:     #
#Parametro self en stackpoiner + 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_IO
lw $t0, 4($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
jal new_ctr_Object                               #
lw $v0, 4($sp)      #Return self
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 8     #
jr $ra                               #

String_length:     #
#Parametro self en stackpoiner + 0
addi $sp, $sp, -4     #Push local var $ra stackpointer -4
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion String_length
lw $s6, 4($sp)      #Guarda self
jal __str__length__                               #
lw $ra, 0($sp)      #
addi $sp, $sp, 8     #
jr $ra                               #

CellularAutomaton_neighbors:     #
#Parametro self en stackpoiner + 160
#Parametro position@0 en stackpoiner + 156
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 152
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 148
addi $sp, $sp, -4     #Push local var sum@_a@1 stackpointer 144
addi $sp, $sp, -4     #Push local var sum@_b@1 stackpointer 140
addi $sp, $sp, -4     #Push local var sum@_a@2 stackpointer 136
addi $sp, $sp, -4     #Push local var sum@_b@2 stackpointer 132
addi $sp, $sp, -4     #Push local var sum@_a@3 stackpointer 128
addi $sp, $sp, -4     #Push local var sum@_b@3 stackpointer 124
addi $sp, $sp, -4     #Push local var sum@_a@4 stackpointer 120
addi $sp, $sp, -4     #Push local var sum@_b@4 stackpointer 116
addi $sp, $sp, -4     #Push local var sum@_a@5 stackpointer 112
addi $sp, $sp, -4     #Push local var sum@_b@5 stackpointer 108
addi $sp, $sp, -4     #Push local var sum@_a@6 stackpointer 104
addi $sp, $sp, -4     #Push local var sum@_b@6 stackpointer 100
addi $sp, $sp, -4     #Push local var str_eq@_a@0 stackpointer 96
addi $sp, $sp, -4     #Push local var str_eq@_b@0 stackpointer 92
addi $sp, $sp, -4     #Push local var param_0_to_north@0 stackpointer 88
addi $sp, $sp, -4     #Push local var str_eq@_a@1 stackpointer 84
addi $sp, $sp, -4     #Push local var str_eq@_b@1 stackpointer 80
addi $sp, $sp, -4     #Push local var param_0_to_south@0 stackpointer 76
addi $sp, $sp, -4     #Push local var str_eq@_a@2 stackpointer 72
addi $sp, $sp, -4     #Push local var str_eq@_b@2 stackpointer 68
addi $sp, $sp, -4     #Push local var param_0_to_east@0 stackpointer 64
addi $sp, $sp, -4     #Push local var str_eq@_a@3 stackpointer 60
addi $sp, $sp, -4     #Push local var str_eq@_b@3 stackpointer 56
addi $sp, $sp, -4     #Push local var param_0_to_west@0 stackpointer 52
addi $sp, $sp, -4     #Push local var str_eq@_a@4 stackpointer 48
addi $sp, $sp, -4     #Push local var str_eq@_b@4 stackpointer 44
addi $sp, $sp, -4     #Push local var param_0_to_northeast@0 stackpointer 40
addi $sp, $sp, -4     #Push local var str_eq@_a@5 stackpointer 36
addi $sp, $sp, -4     #Push local var str_eq@_b@5 stackpointer 32
addi $sp, $sp, -4     #Push local var param_0_to_northwest@0 stackpointer 28
addi $sp, $sp, -4     #Push local var str_eq@_a@6 stackpointer 24
addi $sp, $sp, -4     #Push local var str_eq@_b@6 stackpointer 20
addi $sp, $sp, -4     #Push local var param_0_to_southeast@0 stackpointer 16
addi $sp, $sp, -4     #Push local var str_eq@_a@7 stackpointer 12
addi $sp, $sp, -4     #Push local var str_eq@_b@7 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_southwest@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_neighbors
#Inicio de una secuencia Block
#Inicio del paso 0 de una sequencia Block
#Evaluando el operado izquierdo de una operacion sum
#Evaluando el operado izquierdo de una operacion sum
#Evaluando el operado izquierdo de una operacion sum
#Evaluando el operado izquierdo de una operacion sum
#Evaluando el operado izquierdo de una operacion sum
#Evaluando el operado izquierdo de una operacion sum
#Evaluando el operado izquierdo de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch north
#Evalua el parametro 0 para el CastingDispatch north
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 88($sp)      #
#Fin del paramentro 0 al CastingDispatch north
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 92($sp)      #Lee el valor de la var param_0_to_north@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_north@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 64($t1)      #Buscando el metodo dinamico para la funcion north
jal $t3                               #
sw $v0, 96($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_17      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 92($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 96($sp)      #Guarda el parametro 0 -> str_eq@_a@0
lw $a1, 92($sp)      #Guarda el parametro 1 -> str_eq@_b@0
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_0     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_0                               #
then_CellularAutomaton_neighbors_0:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_0:
#Fin de un If
move $t0, $s4      #
sw $t0, 104($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch south
#Evalua el parametro 0 para el CastingDispatch south
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 76($sp)      #
#Fin del paramentro 0 al CastingDispatch south
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 80($sp)      #Lee el valor de la var param_0_to_south@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_south@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 68($t1)      #Buscando el metodo dinamico para la funcion south
jal $t3                               #
sw $v0, 84($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_18      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 80($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 84($sp)      #Guarda el parametro 0 -> str_eq@_a@1
lw $a1, 80($sp)      #Guarda el parametro 1 -> str_eq@_b@1
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_1     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_1                               #
then_CellularAutomaton_neighbors_1:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_1:
#Fin de un If
move $t0, $s4      #
sw $t0, 100($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 160($sp)      #Guarda self
lw $a0, 104($sp)      #Guarda el parametro 0 -> sum@_a@6
lw $a1, 100($sp)      #Guarda el parametro 1 -> sum@_b@6
jal __int__sum__                               #
sw $v0, 112($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch east
#Evalua el parametro 0 para el CastingDispatch east
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 64($sp)      #
#Fin del paramentro 0 al CastingDispatch east
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 68($sp)      #Lee el valor de la var param_0_to_east@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_east@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 72($t1)      #Buscando el metodo dinamico para la funcion east
jal $t3                               #
sw $v0, 72($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_19      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 68($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 72($sp)      #Guarda el parametro 0 -> str_eq@_a@2
lw $a1, 68($sp)      #Guarda el parametro 1 -> str_eq@_b@2
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_2     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_2                               #
then_CellularAutomaton_neighbors_2:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_2:
#Fin de un If
move $t0, $s4      #
sw $t0, 108($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 160($sp)      #Guarda self
lw $a0, 112($sp)      #Guarda el parametro 0 -> sum@_a@5
lw $a1, 108($sp)      #Guarda el parametro 1 -> sum@_b@5
jal __int__sum__                               #
sw $v0, 120($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch west
#Evalua el parametro 0 para el CastingDispatch west
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 52($sp)      #
#Fin del paramentro 0 al CastingDispatch west
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 56($sp)      #Lee el valor de la var param_0_to_west@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_west@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 76($t1)      #Buscando el metodo dinamico para la funcion west
jal $t3                               #
sw $v0, 60($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_20      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 56($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 60($sp)      #Guarda el parametro 0 -> str_eq@_a@3
lw $a1, 56($sp)      #Guarda el parametro 1 -> str_eq@_b@3
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_3     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_3                               #
then_CellularAutomaton_neighbors_3:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_3:
#Fin de un If
move $t0, $s4      #
sw $t0, 116($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 160($sp)      #Guarda self
lw $a0, 120($sp)      #Guarda el parametro 0 -> sum@_a@4
lw $a1, 116($sp)      #Guarda el parametro 1 -> sum@_b@4
jal __int__sum__                               #
sw $v0, 128($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch northeast
#Evalua el parametro 0 para el CastingDispatch northeast
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 40($sp)      #
#Fin del paramentro 0 al CastingDispatch northeast
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 44($sp)      #Lee el valor de la var param_0_to_northeast@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_northeast@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 84($t1)      #Buscando el metodo dinamico para la funcion northeast
jal $t3                               #
sw $v0, 48($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_21      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 44($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 48($sp)      #Guarda el parametro 0 -> str_eq@_a@4
lw $a1, 44($sp)      #Guarda el parametro 1 -> str_eq@_b@4
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_4     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_4                               #
then_CellularAutomaton_neighbors_4:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_4:
#Fin de un If
move $t0, $s4      #
sw $t0, 124($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 160($sp)      #Guarda self
lw $a0, 128($sp)      #Guarda el parametro 0 -> sum@_a@3
lw $a1, 124($sp)      #Guarda el parametro 1 -> sum@_b@3
jal __int__sum__                               #
sw $v0, 136($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch northwest
#Evalua el parametro 0 para el CastingDispatch northwest
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 28($sp)      #
#Fin del paramentro 0 al CastingDispatch northwest
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 32($sp)      #Lee el valor de la var param_0_to_northwest@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_northwest@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 80($t1)      #Buscando el metodo dinamico para la funcion northwest
jal $t3                               #
sw $v0, 36($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_22      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 32($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> str_eq@_a@5
lw $a1, 32($sp)      #Guarda el parametro 1 -> str_eq@_b@5
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_5     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_5                               #
then_CellularAutomaton_neighbors_5:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_5:
#Fin de un If
move $t0, $s4      #
sw $t0, 132($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 160($sp)      #Guarda self
lw $a0, 136($sp)      #Guarda el parametro 0 -> sum@_a@2
lw $a1, 132($sp)      #Guarda el parametro 1 -> sum@_b@2
jal __int__sum__                               #
sw $v0, 144($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch southeast
#Evalua el parametro 0 para el CastingDispatch southeast
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 16($sp)      #
#Fin del paramentro 0 al CastingDispatch southeast
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 20($sp)      #Lee el valor de la var param_0_to_southeast@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_southeast@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 88($t1)      #Buscando el metodo dinamico para la funcion southeast
jal $t3                               #
sw $v0, 24($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_23      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 20($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 24($sp)      #Guarda el parametro 0 -> str_eq@_a@6
lw $a1, 20($sp)      #Guarda el parametro 1 -> str_eq@_b@6
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_6     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_6                               #
then_CellularAutomaton_neighbors_6:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_6:
#Fin de un If
move $t0, $s4      #
sw $t0, 140($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 160($sp)      #Guarda self
lw $a0, 144($sp)      #Guarda el parametro 0 -> sum@_a@1
lw $a1, 140($sp)      #Guarda el parametro 1 -> sum@_b@1
jal __int__sum__                               #
sw $v0, 152($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion str_eq
#StaticDispatch southwest
#Evalua el parametro 0 para el CastingDispatch southwest
#Get Local Var position
lw $t0, 156($sp)      #
sw $t0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch southwest
lw $t0, 160($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_southwest@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_southwest@0
lw $t0, 168($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 92($t1)      #Buscando el metodo dinamico para la funcion southwest
jal $t3                               #
sw $v0, 12($sp)      #Asigna el resultado de la funcion
#Resolucion del operado izquierdo de una operacion str_eq
#Evaluando el operado derecho de una operacion str_eq
la $t0, string_24      #
move $s4, $t0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion str_eq
lw $s6, 160($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> str_eq@_a@7
lw $a1, 8($sp)      #Guarda el parametro 1 -> str_eq@_b@7
jal __str__cmp__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 160($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_neighbors_7     #
#Else case
li $s4, 0      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
j fin_CellularAutomaton_neighbors_7                               #
then_CellularAutomaton_neighbors_7:
#Then case
li $s4, 1      #
lw $s6, 160($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_neighbors_7:
#Fin de un If
move $t0, $s4      #
sw $t0, 148($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 160($sp)      #Guarda self
lw $a0, 152($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 148($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
move $s4, $v0      #
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 164     #
jr $ra                               #

CellularAutomaton_cell:     #
#Parametro self en stackpoiner + 36
#Parametro position@0 en stackpoiner + 32
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var rest@_a@0 stackpointer 20
addi $sp, $sp, -4     #Push local var rest@_b@0 stackpointer 16
addi $sp, $sp, -4     #Push local var instance_dynamic_to_substr@0 stackpointer 12
addi $sp, $sp, -4     #Push local var param_0_to_substr@0 stackpointer 8
addi $sp, $sp, -4     #Push local var param_1_to_substr@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_cell
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion less
#Evaluando el operado izquierdo de una operacion rest
#Get Self Property board_size
lw $t0, 36($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
sw $t1, 20($sp)      #Guarda el valor de la propiedad board_size en la variable local rest@_a@0
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
li $s4, 1      #
lw $s6, 36($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 16($sp)      #
#Resolucion del operado derecha de una operacion rest
lw $s6, 36($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> rest@_a@0
lw $a1, 16($sp)      #Guarda el parametro 1 -> rest@_b@0
jal __int__sub__                               #
sw $v0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
#Get Local Var position
lw $t0, 32($sp)      #
sw $t0, 24($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 36($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 36($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_cell_0     #
#Else case
#Evalua la Expresion para el DinamicDispatch substr
#Get Self Property population_map
lw $t0, 36($sp)      #Instancia de la clase CellularAutomaton
lw $t1, 16($t0)      #Lee la propiedad population_map
sw $t1, 12($sp)      #Guarda el valor de la propiedad population_map en la variable local instance_dynamic_to_substr@0
#Fin de la exprecion previa al DinamicDispatch substr
#Evalua el parametro 0 para el CastingDispatch substr
#Get Local Var position
lw $t0, 32($sp)      #
sw $t0, 8($sp)      #
#Fin del paramentro 0 al CastingDispatch substr
#Evalua el parametro 1 para el CastingDispatch substr
li $s4, 1      #
lw $s6, 36($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 1 al CastingDispatch substr
lw $t0, 12($sp)      #Lee el valor de la var instance_dynamic_to_substr@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con instance_dynamic_to_substr@0
lw $t0, 12($sp)      #Lee el valor de la var param_0_to_substr@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_substr@0
lw $t0, 12($sp)      #Lee el valor de la var param_1_to_substr@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_1_to_substr@0
lw $t0, 24($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de String
lw $t3, 32($t1)      #Buscando el metodo dinamico para la funcion substr
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_cell_0                               #
then_CellularAutomaton_cell_0:
#Then case
la $t0, string_3      #
move $s4, $t0      #
lw $s6, 36($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_cell_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 40     #
jr $ra                               #

new_ctr_Object:     #
#Parametro self en stackpoiner + 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_Object
lw $v0, 4($sp)      #Return self
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 8     #
jr $ra                               #

CellularAutomaton_north:     #
#Parametro self en stackpoiner + 36
#Parametro position@0 en stackpoiner + 32
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var rest@_a@0 stackpointer 20
addi $sp, $sp, -4     #Push local var rest@_b@0 stackpointer 16
addi $sp, $sp, -4     #Push local var rest@_a@1 stackpointer 12
addi $sp, $sp, -4     #Push local var rest@_b@1 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_cell@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_north
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion less
#Evaluando el operado izquierdo de una operacion rest
#Get Local Var position
lw $t0, 32($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
#Get Self Property columns
lw $t0, 36($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 16($sp)      #Guarda el valor de la propiedad columns en la variable local rest@_b@0
#Resolucion del operado derecha de una operacion rest
lw $s6, 36($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> rest@_a@0
lw $a1, 16($sp)      #Guarda el parametro 1 -> rest@_b@0
jal __int__sub__                               #
sw $v0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
li $s4, 0      #
lw $s6, 36($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 24($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 36($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 36($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_north_0     #
#Else case
#StaticDispatch cell
#Evalua el parametro 0 para el CastingDispatch cell
#Evaluando el operado izquierdo de una operacion rest
#Get Local Var position
lw $t0, 32($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
#Get Self Property columns
lw $t0, 36($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 8($sp)      #Guarda el valor de la propiedad columns en la variable local rest@_b@1
#Resolucion del operado derecha de una operacion rest
lw $s6, 36($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> rest@_a@1
lw $a1, 8($sp)      #Guarda el parametro 1 -> rest@_b@1
jal __int__sub__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch cell
lw $t0, 36($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_cell@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_cell@0
lw $t0, 44($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 60($t1)      #Buscando el metodo dinamico para la funcion cell
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_north_0                               #
then_CellularAutomaton_north_0:
#Then case
la $t0, string_4      #
move $s4, $t0      #
lw $s6, 36($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_north_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 40     #
jr $ra                               #

CellularAutomaton_northwest:     #
#Parametro self en stackpoiner + 60
#Parametro position@0 en stackpoiner + 56
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 52
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 48
addi $sp, $sp, -4     #Push local var rest@_a@0 stackpointer 44
addi $sp, $sp, -4     #Push local var rest@_b@0 stackpointer 40
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 36
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 32
addi $sp, $sp, -4     #Push local var factor@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var factor@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var div@_a@0 stackpointer 20
addi $sp, $sp, -4     #Push local var div@_b@0 stackpointer 16
addi $sp, $sp, -4     #Push local var rest@_a@1 stackpointer 12
addi $sp, $sp, -4     #Push local var rest@_b@1 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_north@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_northwest
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion less
#Evaluando el operado izquierdo de una operacion rest
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 44($sp)      #
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 40($sp)      #Guarda el valor de la propiedad columns en la variable local rest@_b@0
#Resolucion del operado derecha de una operacion rest
lw $s6, 60($sp)      #Guarda self
lw $a0, 44($sp)      #Guarda el parametro 0 -> rest@_a@0
lw $a1, 40($sp)      #Guarda el parametro 1 -> rest@_b@0
jal __int__sub__                               #
sw $v0, 52($sp)      #
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
li $s4, 0      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 48($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 60($sp)      #Guarda self
lw $a0, 52($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 48($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 60($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_northwest_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Evaluando el operado izquierdo de una operacion factor
#Evaluando el operado izquierdo de una operacion div
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion div
#Evaluando el operado derecho de una operacion div
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 16($sp)      #Guarda el valor de la propiedad columns en la variable local div@_b@0
#Resolucion del operado derecha de una operacion div
lw $s6, 60($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> div@_a@0
lw $a1, 16($sp)      #Guarda el parametro 1 -> div@_b@0
jal __int__div__                               #
sw $v0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion factor
#Evaluando el operado derecho de una operacion factor
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 24($sp)      #Guarda el valor de la propiedad columns en la variable local factor@_b@0
#Resolucion del operado derecha de una operacion factor
lw $s6, 60($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> factor@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> factor@_b@0
jal __int__mul__                               #
sw $v0, 36($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 32($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 60($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 32($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 60($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_northwest_1     #
#Else case
#StaticDispatch north
#Evalua el parametro 0 para el CastingDispatch north
#Evaluando el operado izquierdo de una operacion rest
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
li $s4, 1      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion rest
lw $s6, 60($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> rest@_a@1
lw $a1, 8($sp)      #Guarda el parametro 1 -> rest@_b@1
jal __int__sub__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch north
lw $t0, 60($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_north@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_north@0
lw $t0, 68($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 64($t1)      #Buscando el metodo dinamico para la funcion north
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_northwest_1                               #
then_CellularAutomaton_northwest_1:
#Then case
la $t0, string_9      #
move $s4, $t0      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_northwest_1:
#Fin de un If
j fin_CellularAutomaton_northwest_0                               #
then_CellularAutomaton_northwest_0:
#Then case
la $t0, string_10      #
move $s4, $t0      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_northwest_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 64     #
jr $ra                               #

CellularAutomaton_northeast:     #
#Parametro self en stackpoiner + 76
#Parametro position@0 en stackpoiner + 72
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 68
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 64
addi $sp, $sp, -4     #Push local var rest@_a@0 stackpointer 60
addi $sp, $sp, -4     #Push local var rest@_b@0 stackpointer 56
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 52
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 48
addi $sp, $sp, -4     #Push local var factor@_a@0 stackpointer 44
addi $sp, $sp, -4     #Push local var factor@_b@0 stackpointer 40
addi $sp, $sp, -4     #Push local var div@_a@0 stackpointer 36
addi $sp, $sp, -4     #Push local var div@_b@0 stackpointer 32
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var sum@_a@1 stackpointer 20
addi $sp, $sp, -4     #Push local var sum@_b@1 stackpointer 16
addi $sp, $sp, -4     #Push local var sum@_a@2 stackpointer 12
addi $sp, $sp, -4     #Push local var sum@_b@2 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_north@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_northeast
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion less
#Evaluando el operado izquierdo de una operacion rest
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 60($sp)      #
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
#Get Self Property columns
lw $t0, 76($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 56($sp)      #Guarda el valor de la propiedad columns en la variable local rest@_b@0
#Resolucion del operado derecha de una operacion rest
lw $s6, 76($sp)      #Guarda self
lw $a0, 60($sp)      #Guarda el parametro 0 -> rest@_a@0
lw $a1, 56($sp)      #Guarda el parametro 1 -> rest@_b@0
jal __int__sub__                               #
sw $v0, 68($sp)      #
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
li $s4, 0      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 64($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 76($sp)      #Guarda self
lw $a0, 68($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 64($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 76($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_northeast_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Evaluando el operado izquierdo de una operacion factor
#Evaluando el operado izquierdo de una operacion div
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 24($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 76($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
sw $v0, 36($sp)      #
#Resolucion del operado izquierdo de una operacion div
#Evaluando el operado derecho de una operacion div
#Get Self Property columns
lw $t0, 76($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 32($sp)      #Guarda el valor de la propiedad columns en la variable local div@_b@0
#Resolucion del operado derecha de una operacion div
lw $s6, 76($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> div@_a@0
lw $a1, 32($sp)      #Guarda el parametro 1 -> div@_b@0
jal __int__div__                               #
sw $v0, 44($sp)      #
#Resolucion del operado izquierdo de una operacion factor
#Evaluando el operado derecho de una operacion factor
#Get Self Property columns
lw $t0, 76($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 40($sp)      #Guarda el valor de la propiedad columns en la variable local factor@_b@0
#Resolucion del operado derecha de una operacion factor
lw $s6, 76($sp)      #Guarda self
lw $a0, 44($sp)      #Guarda el parametro 0 -> factor@_a@0
lw $a1, 40($sp)      #Guarda el parametro 1 -> factor@_b@0
jal __int__mul__                               #
sw $v0, 52($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 16($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 76($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> sum@_a@1
lw $a1, 16($sp)      #Guarda el parametro 1 -> sum@_b@1
jal __int__sum__                               #
sw $v0, 48($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 76($sp)      #Guarda self
lw $a0, 52($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 48($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 76($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_northeast_1     #
#Else case
#StaticDispatch north
#Evalua el parametro 0 para el CastingDispatch north
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 76($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> sum@_a@2
lw $a1, 8($sp)      #Guarda el parametro 1 -> sum@_b@2
jal __int__sum__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch north
lw $t0, 76($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_north@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_north@0
lw $t0, 84($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 64($t1)      #Buscando el metodo dinamico para la funcion north
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_northeast_1                               #
then_CellularAutomaton_northeast_1:
#Then case
la $t0, string_11      #
move $s4, $t0      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_northeast_1:
#Fin de un If
j fin_CellularAutomaton_northeast_0                               #
then_CellularAutomaton_northeast_0:
#Then case
la $t0, string_12      #
move $s4, $t0      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_northeast_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 80     #
jr $ra                               #

CellularAutomaton_south:     #
#Parametro self en stackpoiner + 36
#Parametro position@0 en stackpoiner + 32
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 20
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 16
addi $sp, $sp, -4     #Push local var sum@_a@1 stackpointer 12
addi $sp, $sp, -4     #Push local var sum@_b@1 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_cell@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_south
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion less
#Get Self Property board_size
lw $t0, 36($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
sw $t1, 28($sp)      #Guarda el valor de la propiedad board_size en la variable local less@_a@0
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 32($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Get Self Property columns
lw $t0, 36($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 16($sp)      #Guarda el valor de la propiedad columns en la variable local sum@_b@0
#Resolucion del operado derecha de una operacion sum
lw $s6, 36($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 16($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
sw $v0, 24($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 36($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 36($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_south_0     #
#Else case
#StaticDispatch cell
#Evalua el parametro 0 para el CastingDispatch cell
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 32($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Get Self Property columns
lw $t0, 36($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 8($sp)      #Guarda el valor de la propiedad columns en la variable local sum@_b@1
#Resolucion del operado derecha de una operacion sum
lw $s6, 36($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> sum@_a@1
lw $a1, 8($sp)      #Guarda el parametro 1 -> sum@_b@1
jal __int__sum__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch cell
lw $t0, 36($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_cell@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_cell@0
lw $t0, 44($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 60($t1)      #Buscando el metodo dinamico para la funcion cell
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_south_0                               #
then_CellularAutomaton_south_0:
#Then case
la $t0, string_5      #
move $s4, $t0      #
lw $s6, 36($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_south_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 40     #
jr $ra                               #

CellularAutomaton_southeast:     #
#Parametro self en stackpoiner + 76
#Parametro position@0 en stackpoiner + 72
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 68
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 64
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 60
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 56
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 52
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 48
addi $sp, $sp, -4     #Push local var factor@_a@0 stackpointer 44
addi $sp, $sp, -4     #Push local var factor@_b@0 stackpointer 40
addi $sp, $sp, -4     #Push local var div@_a@0 stackpointer 36
addi $sp, $sp, -4     #Push local var div@_b@0 stackpointer 32
addi $sp, $sp, -4     #Push local var sum@_a@1 stackpointer 28
addi $sp, $sp, -4     #Push local var sum@_b@1 stackpointer 24
addi $sp, $sp, -4     #Push local var sum@_a@2 stackpointer 20
addi $sp, $sp, -4     #Push local var sum@_b@2 stackpointer 16
addi $sp, $sp, -4     #Push local var sum@_a@3 stackpointer 12
addi $sp, $sp, -4     #Push local var sum@_b@3 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_south@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_southeast
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion less
#Get Self Property board_size
lw $t0, 76($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
sw $t1, 68($sp)      #Guarda el valor de la propiedad board_size en la variable local less@_a@0
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 60($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Get Self Property columns
lw $t0, 76($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 56($sp)      #Guarda el valor de la propiedad columns en la variable local sum@_b@0
#Resolucion del operado derecha de una operacion sum
lw $s6, 76($sp)      #Guarda self
lw $a0, 60($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 56($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
sw $v0, 64($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 76($sp)      #Guarda self
lw $a0, 68($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 64($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 76($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_southeast_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Evaluando el operado izquierdo de una operacion factor
#Evaluando el operado izquierdo de una operacion div
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 24($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 76($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> sum@_a@1
lw $a1, 24($sp)      #Guarda el parametro 1 -> sum@_b@1
jal __int__sum__                               #
sw $v0, 36($sp)      #
#Resolucion del operado izquierdo de una operacion div
#Evaluando el operado derecho de una operacion div
#Get Self Property columns
lw $t0, 76($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 32($sp)      #Guarda el valor de la propiedad columns en la variable local div@_b@0
#Resolucion del operado derecha de una operacion div
lw $s6, 76($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> div@_a@0
lw $a1, 32($sp)      #Guarda el parametro 1 -> div@_b@0
jal __int__div__                               #
sw $v0, 44($sp)      #
#Resolucion del operado izquierdo de una operacion factor
#Evaluando el operado derecho de una operacion factor
#Get Self Property columns
lw $t0, 76($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 40($sp)      #Guarda el valor de la propiedad columns en la variable local factor@_b@0
#Resolucion del operado derecha de una operacion factor
lw $s6, 76($sp)      #Guarda self
lw $a0, 44($sp)      #Guarda el parametro 0 -> factor@_a@0
lw $a1, 40($sp)      #Guarda el parametro 1 -> factor@_b@0
jal __int__mul__                               #
sw $v0, 52($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 16($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 76($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> sum@_a@2
lw $a1, 16($sp)      #Guarda el parametro 1 -> sum@_b@2
jal __int__sum__                               #
sw $v0, 48($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 76($sp)      #Guarda self
lw $a0, 52($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 48($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 76($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_southeast_1     #
#Else case
#StaticDispatch south
#Evalua el parametro 0 para el CastingDispatch south
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 72($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 76($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> sum@_a@3
lw $a1, 8($sp)      #Guarda el parametro 1 -> sum@_b@3
jal __int__sum__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch south
lw $t0, 76($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_south@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_south@0
lw $t0, 84($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 68($t1)      #Buscando el metodo dinamico para la funcion south
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_southeast_1                               #
then_CellularAutomaton_southeast_1:
#Then case
la $t0, string_13      #
move $s4, $t0      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_southeast_1:
#Fin de un If
j fin_CellularAutomaton_southeast_0                               #
then_CellularAutomaton_southeast_0:
#Then case
la $t0, string_14      #
move $s4, $t0      #
lw $s6, 76($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_southeast_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 80     #
jr $ra                               #

CellularAutomaton_southwest:     #
#Parametro self en stackpoiner + 60
#Parametro position@0 en stackpoiner + 56
addi $sp, $sp, -4     #Push local var less@_a@0 stackpointer 52
addi $sp, $sp, -4     #Push local var less@_b@0 stackpointer 48
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 44
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 40
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 36
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 32
addi $sp, $sp, -4     #Push local var factor@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var factor@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var div@_a@0 stackpointer 20
addi $sp, $sp, -4     #Push local var div@_b@0 stackpointer 16
addi $sp, $sp, -4     #Push local var rest@_a@0 stackpointer 12
addi $sp, $sp, -4     #Push local var rest@_b@0 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_south@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_southwest
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion less
#Get Self Property board_size
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 12($t0)      #Lee la propiedad board_size
sw $t1, 52($sp)      #Guarda el valor de la propiedad board_size en la variable local less@_a@0
#Resolucion del operado izquierdo de una operacion less
#Evaluando el operado derecho de una operacion less
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 44($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 40($sp)      #Guarda el valor de la propiedad columns en la variable local sum@_b@0
#Resolucion del operado derecha de una operacion sum
lw $s6, 60($sp)      #Guarda self
lw $a0, 44($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 40($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
sw $v0, 48($sp)      #
#Resolucion del operado derecha de una operacion less
lw $s6, 60($sp)      #Guarda self
lw $a0, 52($sp)      #Guarda el parametro 0 -> less@_a@0
lw $a1, 48($sp)      #Guarda el parametro 1 -> less@_b@0
jal __int__le__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 60($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_southwest_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Evaluando el operado izquierdo de una operacion factor
#Evaluando el operado izquierdo de una operacion div
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion div
#Evaluando el operado derecho de una operacion div
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 16($sp)      #Guarda el valor de la propiedad columns en la variable local div@_b@0
#Resolucion del operado derecha de una operacion div
lw $s6, 60($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> div@_a@0
lw $a1, 16($sp)      #Guarda el parametro 1 -> div@_b@0
jal __int__div__                               #
sw $v0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion factor
#Evaluando el operado derecho de una operacion factor
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 24($sp)      #Guarda el valor de la propiedad columns en la variable local factor@_b@0
#Resolucion del operado derecha de una operacion factor
lw $s6, 60($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> factor@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> factor@_b@0
jal __int__mul__                               #
sw $v0, 36($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 32($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 60($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 32($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 60($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_southwest_1     #
#Else case
#StaticDispatch south
#Evalua el parametro 0 para el CastingDispatch south
#Evaluando el operado izquierdo de una operacion rest
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
li $s4, 1      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion rest
lw $s6, 60($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> rest@_a@0
lw $a1, 8($sp)      #Guarda el parametro 1 -> rest@_b@0
jal __int__sub__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch south
lw $t0, 60($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_south@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_south@0
lw $t0, 68($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 68($t1)      #Buscando el metodo dinamico para la funcion south
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_southwest_1                               #
then_CellularAutomaton_southwest_1:
#Then case
la $t0, string_15      #
move $s4, $t0      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_southwest_1:
#Fin de un If
j fin_CellularAutomaton_southwest_0                               #
then_CellularAutomaton_southwest_0:
#Then case
la $t0, string_16      #
move $s4, $t0      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_southwest_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 64     #
jr $ra                               #

CellularAutomaton_east:     #
#Parametro self en stackpoiner + 60
#Parametro position@0 en stackpoiner + 56
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 52
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 48
addi $sp, $sp, -4     #Push local var factor@_a@0 stackpointer 44
addi $sp, $sp, -4     #Push local var factor@_b@0 stackpointer 40
addi $sp, $sp, -4     #Push local var div@_a@0 stackpointer 36
addi $sp, $sp, -4     #Push local var div@_b@0 stackpointer 32
addi $sp, $sp, -4     #Push local var sum@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var sum@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var sum@_a@1 stackpointer 20
addi $sp, $sp, -4     #Push local var sum@_b@1 stackpointer 16
addi $sp, $sp, -4     #Push local var sum@_a@2 stackpointer 12
addi $sp, $sp, -4     #Push local var sum@_b@2 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_cell@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_east
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Evaluando el operado izquierdo de una operacion factor
#Evaluando el operado izquierdo de una operacion div
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 24($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 60($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> sum@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> sum@_b@0
jal __int__sum__                               #
sw $v0, 36($sp)      #
#Resolucion del operado izquierdo de una operacion div
#Evaluando el operado derecho de una operacion div
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 32($sp)      #Guarda el valor de la propiedad columns en la variable local div@_b@0
#Resolucion del operado derecha de una operacion div
lw $s6, 60($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> div@_a@0
lw $a1, 32($sp)      #Guarda el parametro 1 -> div@_b@0
jal __int__div__                               #
sw $v0, 44($sp)      #
#Resolucion del operado izquierdo de una operacion factor
#Evaluando el operado derecho de una operacion factor
#Get Self Property columns
lw $t0, 60($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 40($sp)      #Guarda el valor de la propiedad columns en la variable local factor@_b@0
#Resolucion del operado derecha de una operacion factor
lw $s6, 60($sp)      #Guarda self
lw $a0, 44($sp)      #Guarda el parametro 0 -> factor@_a@0
lw $a1, 40($sp)      #Guarda el parametro 1 -> factor@_b@0
jal __int__mul__                               #
sw $v0, 52($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 16($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 60($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> sum@_a@1
lw $a1, 16($sp)      #Guarda el parametro 1 -> sum@_b@1
jal __int__sum__                               #
sw $v0, 48($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 60($sp)      #Guarda self
lw $a0, 52($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 48($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 60($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_east_0     #
#Else case
#StaticDispatch cell
#Evalua el parametro 0 para el CastingDispatch cell
#Evaluando el operado izquierdo de una operacion sum
#Get Local Var position
lw $t0, 56($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion sum
#Evaluando el operado derecho de una operacion sum
li $s4, 1      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion sum
lw $s6, 60($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> sum@_a@2
lw $a1, 8($sp)      #Guarda el parametro 1 -> sum@_b@2
jal __int__sum__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch cell
lw $t0, 60($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_cell@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_cell@0
lw $t0, 68($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 60($t1)      #Buscando el metodo dinamico para la funcion cell
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_east_0                               #
then_CellularAutomaton_east_0:
#Then case
la $t0, string_6      #
move $s4, $t0      #
lw $s6, 60($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_east_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 64     #
jr $ra                               #

CellularAutomaton_west:     #
#Parametro self en stackpoiner + 52
#Parametro position@0 en stackpoiner + 48
addi $sp, $sp, -4     #Push local var int_eq@_a@0 stackpointer 44
addi $sp, $sp, -4     #Push local var int_eq@_b@0 stackpointer 40
addi $sp, $sp, -4     #Push local var int_eq@_a@1 stackpointer 36
addi $sp, $sp, -4     #Push local var int_eq@_b@1 stackpointer 32
addi $sp, $sp, -4     #Push local var factor@_a@0 stackpointer 28
addi $sp, $sp, -4     #Push local var factor@_b@0 stackpointer 24
addi $sp, $sp, -4     #Push local var div@_a@0 stackpointer 20
addi $sp, $sp, -4     #Push local var div@_b@0 stackpointer 16
addi $sp, $sp, -4     #Push local var rest@_a@0 stackpointer 12
addi $sp, $sp, -4     #Push local var rest@_b@0 stackpointer 8
addi $sp, $sp, -4     #Push local var param_0_to_cell@0 stackpointer 4
addi $sp, $sp, -4     #Push local var $ra stackpointer 0
sw $ra, 0($sp)      #Agrega $ra a la pila para salvar el punto de retorno de la funcion CellularAutomaton_west
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Get Local Var position
lw $t0, 48($sp)      #
sw $t0, 44($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
li $s4, 0      #
lw $s6, 52($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 40($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 52($sp)      #Guarda self
lw $a0, 44($sp)      #Guarda el parametro 0 -> int_eq@_a@0
lw $a1, 40($sp)      #Guarda el parametro 1 -> int_eq@_b@0
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 52($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_west_0     #
#Else case
#Evalua la condicion de un If
#Evaluando el operado izquierdo de una operacion int_eq
#Evaluando el operado izquierdo de una operacion factor
#Evaluando el operado izquierdo de una operacion div
#Get Local Var position
lw $t0, 48($sp)      #
sw $t0, 20($sp)      #
#Resolucion del operado izquierdo de una operacion div
#Evaluando el operado derecho de una operacion div
#Get Self Property columns
lw $t0, 52($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 16($sp)      #Guarda el valor de la propiedad columns en la variable local div@_b@0
#Resolucion del operado derecha de una operacion div
lw $s6, 52($sp)      #Guarda self
lw $a0, 20($sp)      #Guarda el parametro 0 -> div@_a@0
lw $a1, 16($sp)      #Guarda el parametro 1 -> div@_b@0
jal __int__div__                               #
sw $v0, 28($sp)      #
#Resolucion del operado izquierdo de una operacion factor
#Evaluando el operado derecho de una operacion factor
#Get Self Property columns
lw $t0, 52($sp)      #Instancia de la clase Board
lw $t1, 8($t0)      #Lee la propiedad columns
sw $t1, 24($sp)      #Guarda el valor de la propiedad columns en la variable local factor@_b@0
#Resolucion del operado derecha de una operacion factor
lw $s6, 52($sp)      #Guarda self
lw $a0, 28($sp)      #Guarda el parametro 0 -> factor@_a@0
lw $a1, 24($sp)      #Guarda el parametro 1 -> factor@_b@0
jal __int__mul__                               #
sw $v0, 36($sp)      #
#Resolucion del operado izquierdo de una operacion int_eq
#Evaluando el operado derecho de una operacion int_eq
#Get Local Var position
lw $t0, 48($sp)      #
sw $t0, 32($sp)      #
#Resolucion del operado derecha de una operacion int_eq
lw $s6, 52($sp)      #Guarda self
lw $a0, 36($sp)      #Guarda el parametro 0 -> int_eq@_a@1
lw $a1, 32($sp)      #Guarda el parametro 1 -> int_eq@_b@1
jal __int__eq__                               #
move $s4, $v0      #
move $a0, $v0      #
lw $s6, 52($sp)      #Guarda self
jal __bool__new__                               #
move $s4, $v0      #
#Fin de la evaluacion de la condicion de un IF
#Check Condition And Try Jump
move $t0, $s4      #Guarda el parametro 0 -> _
lw $t1, 4($t0)      #Lee la propiedad **value** del bool
li $t0, 1      #Carga un 1 para comparar
beq $t0, $t1, then_CellularAutomaton_west_1     #
#Else case
#StaticDispatch cell
#Evalua el parametro 0 para el CastingDispatch cell
#Evaluando el operado izquierdo de una operacion rest
#Get Local Var position
lw $t0, 48($sp)      #
sw $t0, 12($sp)      #
#Resolucion del operado izquierdo de una operacion rest
#Evaluando el operado derecho de una operacion rest
li $s4, 1      #
lw $s6, 52($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __int__new__                               #
sw $v0, 8($sp)      #
#Resolucion del operado derecha de una operacion rest
lw $s6, 52($sp)      #Guarda self
lw $a0, 12($sp)      #Guarda el parametro 0 -> rest@_a@0
lw $a1, 8($sp)      #Guarda el parametro 1 -> rest@_b@0
jal __int__sub__                               #
sw $v0, 4($sp)      #
#Fin del paramentro 0 al CastingDispatch cell
lw $t0, 52($sp)      #Lee el valor de la var self
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con self
lw $t0, 8($sp)      #Lee el valor de la var param_0_to_cell@0
addi $sp, $sp, -4     #
sw $t0, 0($sp)      #Push a la pila con param_0_to_cell@0
lw $t0, 60($sp)      #
lw $t1, 0($t0)      #Leyendo el tipo dinamico de la instancia que hereda de CellularAutomaton
lw $t3, 60($t1)      #Buscando el metodo dinamico para la funcion cell
jal $t3                               #
move $s4, $v0      #Asigna el resultado de la funcion
j fin_CellularAutomaton_west_1                               #
then_CellularAutomaton_west_1:
#Then case
la $t0, string_7      #
move $s4, $t0      #
lw $s6, 52($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_west_1:
#Fin de un If
j fin_CellularAutomaton_west_0                               #
then_CellularAutomaton_west_0:
#Then case
la $t0, string_8      #
move $s4, $t0      #
lw $s6, 52($sp)      #Guarda self
move $a0, $s4      #Guarda el parametro 0 -> _
jal __str__new__                               #
move $s4, $v0      #
fin_CellularAutomaton_west_0:
#Fin de un If
move $v0, $s4      #Return _
lw $ra, 0($sp)      #Lee $ra de la pila para retornar a la funcion anterior
addi $sp, $sp, 56     #
jr $ra                               #

new_ctr_Bool:     #Esta funcion no se invoca en la ejecucion del programa

new_ctr_Int:     #Esta funcion no se invoca en la ejecucion del programa

new_ctr_String:     #Esta funcion no se invoca en la ejecucion del programa

new_ctr_SELF_TYPE:     #Esta funcion no se invoca en la ejecucion del programa

IO_out_int:     #Esta funcion no se invoca en la ejecucion del programa

Object_copy:     #Esta funcion no se invoca en la ejecucion del programa

Object_type_name:     #Esta funcion no se invoca en la ejecucion del programa

Object_abort:     #Esta funcion no se invoca en la ejecucion del programa

###########################################################################region
#########################################################################################################
___fin___:
li		$v0, 10		# system call #4 - print string
syscall				# execute

#########################################################################################################

__int__new__:
# En $s6 self
# En $a0 el valor del entero	
# Return $v0 la instancia del nuevo int

move $t2, $a0  #Salva el valor del entero  

#Allocate a una class Int
#atributo type_name en puntero + 0
#atributo value en puntero + 4
li $a0, 8
li $v0, 9
syscall  #en $v0 la instancia del nuevo Int

la $t0, Int     #Carga la direccion de memoria de la definicion de tipo Int
sw $t0, ($v0)   #Guarda en la pocision cero de la instancia la direccion de la definicion del tipo
sw $t2, 4($v0)  #Guarda en la pocicion 4 de la instancia el valor del la propiedad **value** 

# No modifica la pila 
jr $ra # Esta funcion no tiene saltos internos y en $v0 esta la instancia del nuevo Int

##########################################################################################################
__int__print__:
# En $s6 **self**
# En $a0 la direccion del **Int** a pintar 	
# Return $v0 **self**

lw $t0, 4($a0)  #Lee la propiedad **value**

li $v0, 1
move $a0, $t0  #Pinta el valor la propiedad **value** del int
syscall

move $v0, $s6  #Guarda en $v0 **self** para retornar 
# No modifica la pila 
jr $ra # Esta funcion no tiene saltos internos y en $v0 esta self

##########################################################################################################
__int__input__:
# En $s6 **self**
# Return $v0 la instancia del nuevo **Int**

li $v0, 5   #Lee un entero por la consola 
syscall     #Guarda el entero en $v0

move $s5, $ra    #Salva $ra en $s5 para saltar a crear un Int con el valor leido
move $a0, $v0
jal __int__new__ #En $v0 la instancia del nuevo entero 

move $ra, $s5   #Reasigna $ra para salir de **input** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__sum__:
# En $s6 **self**
# En $a0 la direccion del **Int** a sumando A 	
# En $a1 la direccion del **Int** a sumando B 	
# Return $v0 new **Int** con **value** A+B

lw $t0, 4($a0)      #Lee la propiedad **value** del sumando A
lw $t1, 4($a1)      #Lee la propiedad **value** del sumando B
add $a0, $t0, $t1  #$a0 =  A + B

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A+B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **sum** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__sub__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# En $a1 la direccion del **Int** a operador B 	
# Return $v0 new **Int** con **value** A-B

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
lw $t1, 4($a1)      #Lee la propiedad **value** del operador B
sub	$a0, $t0, $t1   #$a0 =  A - B

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A-B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **rest** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__mul__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# En $a1 la direccion del **Int** a operador B 	
# Return $v0 new **Int** con **value** A*B

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
lw $t1, 4($a1)      #Lee la propiedad **value** del operador B
mul	$a0, $t0, $t1   #$a0 =  A * B

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A*B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **mul** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__div__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# En $a1 la direccion del **Int** a operador B 	
# Return $v0 new **Int** con **value** A/B

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
lw $t1, 4($a1)      #Lee la propiedad **value** del operador B
div	$a0, $t0, $t1   #$a0 =  A/B

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A/B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **div** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__le__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# En $a1 la direccion del **Int** a operador B 	
# Return $v0 new **Int** con **value** A-B

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
lw $t1, 4($a1)      #Lee la propiedad **value** del operador B
slt	$a0, $t0, $t1   #$a0 =  A < B

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A<B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **less** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__leq__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# En $a1 la direccion del **Int** a operador B 	
# Return $v0 new **Int** con **value** A-B

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
lw $t1, 4($a1)      #Lee la propiedad **value** del operador B
sle	$a0, $t0, $t1   #$a0 =  A <= B

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A<=B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **less_or_equal** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__eq__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# En $a1 la direccion del **Int** a operador B 	
# Return $v0 new **Int** con **value** A-B

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
lw $t1, 4($a1)      #Lee la propiedad **value** del operador B
seq	$a0, $t0, $t1   #$a0 =  A == B

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A==B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **equal** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__complement__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# Return $v0 new **Int** con **value** ~A

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
li $t1, 4294967295  # guarda 2^31 + 1
xor $a0, $t1, $t0   
add $a0, $a0, 1     

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con ~A en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **complement** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__neg__:
# En $s6 **self**
# En $a0 la direccion del **Int** a operador A 	
# Return $v0 new **Int** con **value** !A

lw $t0, 4($a0)      #Lee la propiedad **value** del operador A
addi $a0, $t0, -1   #$a0 =  A - 1 => if A == 0 then $a0 = -1 else $a0 = 0
mul  $a0, $a0, -1   #$a0 = -$a0   => if $a0 == 0 then $a0 = 0 else 1

move $s5, $ra       #Guardando $ra para saltar a crear en **Int**
jal __int__new__    #Con A+B en $a0 instancia el **Int** con el valor y devuelve en $v0

move $ra, $s5   #Reasigna $ra para salir de **rest** volver a la funcion anterior 
# No modifica la pila 
jr $ra          #Esta funcion tiene saltos internos y en $v0 esta la instancia del nuevo **Int**

##########################################################################################################
__int__clone__:
# En $s6 self



#region
##########################################################################################
__bool__new__:
# En $s6 self
# En $a0 instancia de Int para convertir 	
# Return $v0 la instancia del nuevo Bool

lw $t0, 4($a0) # Guardando el valor la propiedad de **value**

li $t1, 1
beq $t0, $t1, __bool__ok_value__  #Comparando el valor con 1
li $t1, 0
beq $t0, $t1, __bool__ok_value__  #Comparando el valor con 0

# Si el valor no es ni cero ni uno cierra el programa 
li		$v0, 4		# system call #4 - print string
la		$a0, Bool_Name
syscall				# execute
li		$v0, 1		# system call #4 - print string
move	$a0, $t0
syscall				# execute
li		$v0, 10		# system call #4 - print string
syscall				# execute

__bool__ok_value__:
la $t0, Bool     #Carga la direccion de memoria de la definicion de tipo Bool
sw $t0, ($a0)    #Guarda en la pocision cero de la instancia la direccion de la definicion del tipo

move $v0, $a0
# No modifica la pila 
jr $ra # Esta funcion no tiene saltos internos y en $v0 esta la instancia del nuevo Bool

##########################################################################################################
__bool__if_go_to__:
# En $s6 self
# En $a0 instancia de Bool a evaluar 
# En $a1 direccion a la que saltar  
# Return $v0 la instancia del nuevo Bool

lw $t0, 4($a0)  #Guarda el valor de la propiedad **value** del Bool
li $t1, 1       #Guarda 1 en $t0 para comparar con la propiedad **value**

beq	$t0, $t1, __go_to__	# if $t0 == $t1 then __go_to__
jr $ra          #esta funcion solo termina si el bool es false 
__go_to__:
j $a1   # La condicion se cumple salta hacia el segundo parametro

##########################################################################################################
__bool__check__type__:
# En $s6 **self**
# En $a0 direccion de memoria de la lista de ancestro de un typo 
# En $a1 identificador numerico de un tipo

li $v0, 1       # Por default devuelve 1
__check__type__loop__:
    lw $t0, ($a0)       #Lee el id de un typo 
    beq $t0, $zero, __check__type__false__
    beq $t0, $a1, __check__type__end__
    addi $a0, $a0, 4
    j __check__type__loop__

__check__type__false__: 
    li $v0, 0
__check__type__end__:
    jr $ra

#region
#############################################################################################
__str__new__:
# En $s6 self
# En $a0 el direccion de memoria que apunta a un string	
# Return $v0 la instancia del nuevo string

move $t2, $a0  #Salva la direccion de memoria  

#Allocate a una class String
#atributo type_name en puntero + 0
#atributo value en puntero + 4
li $a0, 8
li $v0, 9
syscall  #en $v0 la instancia del nuevo String

la $t0, String     #Carga la direccion de memoria de la definicion de tipo Int
sw $t0, ($v0)   #Guarda en la pocision cero de la instancia la direccion de la definicion del tipo
sw $t2, 4($v0)  #Guarda en la pocicion 4 de la instancia el valor del la propiedad **value** 

# No modifica la pila 
jr $ra # Esta funcion no tiene saltos internos y en $v0 esta la instancia del nuevo Int

##########################################################################################################
__str__print__:
# En $s6 **self**
# En $a0 la direccion del **String** a pintar 	
# Return $v0 **self**

lw $t0, 4($a0)  #Lee la propiedad **value**

li $v0, 4
move $a0, $t0  #Pinta el valor la propiedad **value** del String
syscall

move $v0, $s6  #Guarda en $v0 **self** para retornar 
# No modifica la pila 
jr $ra # Esta funcion no tiene saltos internos y en $v0 esta self

##########################################################################################################
__str__input__:
# En $s6 **self**
# Return $v0 la instancia del nuevo **String**

addi $sp, $sp, -4
sw $ra ($sp)   #Salva $ra en 12($sp)
addi $sp, $sp, -4
sw $s6, ($sp)    #Salva self en 8($sp)

li $a0, 1000    # reserva memoria para el string
li $v0, 9       
syscall         # En $v0 direccion de memoria del nuevo string

move $a0, $v0   # Asigan la direccion del nuevo string para llamar a la funcion de leer
li $v0, 8       # Leer un string de la consola 
li $a1 , 1000   
syscall         # En $a0 el string leido en la consola 
jal __str__new__ #En $v0 la instancia del nuevo entero 
move $a0, $v0

addi $sp, $sp, -4
sw $v0, ($sp)    #Salva el nuevo string en 4($sp)

move $s6, $v0   #cambia sefl por el nuevo string 
jal __str__length__

lw $t0, 4($v0)      #Lee la propiedad **value** del **Int** que devuelve length 

beq $t0,$zero, jline
addi $t0, $t0, -1   #Resta uno al length para eliminar el '\n'

jline:
sw $t0, 4($v0)      #Actualiza la propieded **value** del **Int** length

addi $sp, $sp, -4
sw $v0, ($sp)       #Salva el length en ($sp)

li $a0, 0
jal __int__new__    #Crea un nuevo entero con **value** 0

lw $s6, 4($sp)      #Self = al string leido en la consola 
move $a0, $v0       #index = 0 
lw $a1, ($sp)       #count = length - 1 

jal __str__substr__ #En $v0 el substring sin '\n'

lw $s6, 8($sp)   #Reasigna Self para salir de **input** volver a la funcion anterior 
lw $ra, 12($sp)  #Reasigna $ra para salir de **input** volver a la funcion anterior
addi $sp, $sp, 16 #Limpia la pila 
jr $ra          #Devuelve en $v0 el subsstring leido por la consola 

##########################################################################################################
__str__length__:
# En $s6 **self**
# Return $v0 la instancia del nuevo **Int**

li $t0 , 0       # len result
lw $t2 , 4($s6)  # Leer la propiedad value a self

loop_len:
lb  $t3, ($t2)  # Guarda la primara letra
beq $t3, $zero, end_len  
add $t0, $t0, 1 # Suma al contador 
add $t2, $t2, 1  # Mueve el punteron del string en 1 
j loop_len

end_len:
move $a0, $t0
move $s5, $ra
jal __int__new__
move $ra, $s5
jr $ra

###########################################################################################################
__str__substr__:
# En $s6 **self**
# En $a0 **Int** el indece en el que inicia el sub
# En $a1 **Int** cantidad de caracteres que tiene el sub

lw $t0, 4($s6)  # Lee la propiedad value de **sefl**
lw $t1, 4($a0)  # Lee la propiedad value del **Int** indice 
lw $t2, 4($a1)  # Lee la propiedad value del **Int** length 

li $t3, 0        # Contador para iterar el string en busqueda de indice  
li $t4, 1        # Contador para iterar el string hasta llegar al length

addi $t5, $t2, 1
move $a0, $t5      # reserva memoria para el string
li $v0,9
syscall           # En $v0 la direccion de memoria del nuevo string
move $t5, $v0    

beq $t2, $zero, end_sub_string

find_index:
    beq	 $t3, $t1, find_length	# si el contador es el indice comiensa a crear el sub
    add	 $t0, $t0, 1		    # mueve el puntero del string de self
    add	 $t3, $t3, 1	        # mueve el contador 
    j find_index

find_length:
    lb	 $t6, ($t0)			# Lee la primera letra del string self  
    sb	 $t6, ($t5)         # guarda la primera letra del string self en el nuevo string
    beq	 $t2, $t4, end_sub_string	# si el contador del tamaño es igual a j end
    add	 $t5, $t5, 1		# Mueve el puntero del nuevo string 
    add	 $t0, $t0, 1		# Mueve el puntero del string self
    add	 $t4, $t4, 1	    # Contador de tamaño += 1 
    j find_length
    
end_sub_string:
    add	 $t5, $t5, 1		# Mueve el puntero del nuevo string 
    sb	 $zero, ($t5)         # guarda la primera letra del string self en el nuevo string

    addi $sp, $sp, -4
    sw $ra, ($sp)   # Guarda en la pila $ra

    move $a0, $v0       # Pasa como parametros la direccion de memoria del string
    jal __str__new__    # En $v0 la instancia del nuevos string

    lw $ra, ($sp)       # Reasigna $ra para volver al la funcion anterior 
    addi $sp, $sp, 4    #  Limpia la pila 
    jr $ra              # Return instancia del substring en $v0

############################################################################################################
__str__concat__:
# En $s6 **self**
# En #a0 instancia de otro string

addi $sp, $sp, -4
sw $s6, ($sp)       #Salva **self**
addi $sp, $sp, -4
sw $a0, ($sp)       #Salva el string que se paso como parametro 
addi $sp, $sp, -4
sw $ra, ($sp)       #Salva $ra para saber a donde retornar 

jal __str__length__
addi $sp, $sp, -4
lw $t0, 4($v0)      #Lee el valor de la propiedad **value**
sw $t0, ($sp)       #Salva el valor del primer length 

lw $t0, 8($sp)
move $s6, $t0       #Cambia self por el otro string
jal __str__length__
lw $t0, ($sp)       #Lee el lenght del string self
lw $t1, 4($v0)      #Lee el valor de la pripiedad value del resultado de la funcion length 
add $t0, $t0, $t1   # Suma los length de ambos string

add $t0, $t0, 1 
move $a0, $t0
li $v0, 9
syscall             # Reserva espacion para un string de tamaño length1 + length2
#En $v0 el nuevo string 

move $t3, $v0
lw $t2, 8($sp)      #Lee el string que se paso por parametro  
lw $t1, 4($t2)      #Lee la propiedad **value** del string
lw $t2, 12($sp)     #Lee self
lw $t0, 4($t2)      #Lee la propiedad **value** de self 

loop_str1:
    lb   $t2, ($t0)       # primera letra del puntero al string self
    beq  $t2, $zero, loop_str2 
    add  $t0, $t0, 1      # mueve el puntero del string self
    sb   $t2, ($t3)       # guarda la letra en el nuevo string 
    add  $t3, $t3, 1      # mueve el puntero del nuevo string
    j loop_str1

loop_str2:
    lb   $t2, ($t1)       # primera letra del puntero al string str1
    beq  $t2, $zero, end_concat
    add  $t1, $t1, 1    # mueve el puntero del string str1
    sb   $t2, ($t3)     # guarda la letra en el nuevo string 
    add  $t3,  $t3, 1   # mueve el puntero del nuevo string
    j loop_str1

end_concat:
    move $a0, $v0
    jal __str__new__
    lw $ra, 4($sp)
    lw $s6, 12($sp)
    addi $sp, $sp, 16 #Limpia la pila
    jr $ra            # Return en $v0 la nueva instancia de self

############################################################################################################
__str__cmp__:
# En $s6 **self**
# En $a0 instancia de str1
# En $a1 instancia de str2

addi $sp, $sp -4
sw $ra, ($sp)

lw $t0, 4($a0)     #Lee la propiedad **value** de str1
lw $t1, 4($a1)     #Lee la propiedad **value** de str2
li $a0, 1       # True por default

str_cmp_loop:
    lb $t2, ($t0)   #Lee una letra de str1
    lb $t3, ($t1)   #Lee una letra de str2
    addi $t0, $t0, 1
    addi $t1, $t1, 1
    beq $t2, $zero, cmp_end_to_zero     #Se llego al fin del str1
    beq $t3, $zero, cmp_end_to_zero     #Se llego al fin del str2
    beq $t2, $t3,   str_cmp_loop        #Continua comparando si son iguales 
    j str_cmp_false

cmp_end_to_zero:
    beq $t2, $t3,  end_str_cmp         #Chequea que ambos hallan llegado al final 
    j str_cmp_false

str_cmp_false:
    li $a0, 0       #Cambia el defaul True por False 
end_str_cmp:
    jal __int__new__    #Crea un Int que luego se debe cambiar por bool
    lw $ra, ($sp)       #Lee $ra para retornar 
    addi $sp, $sp, 4    #Limpia la pila 
    jr $ra              #En $v0 un Int que hay que cambiar por Bool

