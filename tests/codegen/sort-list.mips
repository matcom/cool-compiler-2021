.data
div_zero: .asciiz "Runtime Error: Division by zero"
dispatch_void: .asciiz "Runtime Error: A dispatch with void"
case_void: .asciiz "Runtime Error: A case with void"
case_no_match: .asciiz "Runtime Error: Execution of a case statement without a matching branch"
heap: .asciiz "Runtime Error: Heap overflow"
substr: .asciiz "Runtime Error: Index for substring out of range"
input_str: .space 2048
void: .word 0
Object_name: .asciiz "Object"
Object_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
Int_name: .asciiz "Int"
Int_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
String_name: .asciiz "String"
String_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word String.length
.word String.concat
.word String.substr
Bool_name: .asciiz "Bool"
Bool_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
List_name: .asciiz "List"
List_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word List.isNil
.word List.cons
.word List.car
.word List.cdr
.word List.rev
.word List.sort
.word List.insert
.word List.rcons
.word List.print_list
Cons_name: .asciiz "Cons"
Cons_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Cons.isNil
.word List.cons
.word Cons.car
.word Cons.cdr
.word Cons.rev
.word Cons.sort
.word Cons.insert
.word Cons.rcons
.word Cons.print_list
.word Cons.init
Nil_name: .asciiz "Nil"
Nil_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Nil.isNil
.word List.cons
.word List.car
.word List.cdr
.word Nil.rev
.word Nil.sort
.word Nil.insert
.word Nil.rcons
.word Nil.print_list
Main_name: .asciiz "Main"
Main_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Main.iota
.word Main.main
msg_0: .asciiz "Abort called from class "
msg_1: .asciiz "
"
empty_str: .asciiz ""
msg_3: .asciiz "How many numbers to sort? "
.text
div_zero_error:
la $a0, div_zero
li $v0, 4
syscall
li $v0, 10
syscall
dispatch_void_error:
la $a0, dispatch_void
li $v0, 4
syscall
li $v0, 10
syscall
case_void_error:
la $a0, case_void
li $v0, 4
syscall
li $v0, 10
syscall
case_no_match_error:
la $a0, case_no_match
li $v0, 4
syscall
li $v0, 10
syscall
heap_error:
la $a0, heap
li $v0, 4
syscall
li $v0, 10
syscall
substr_error:
la $a0, substr
li $v0, 4
syscall
li $v0, 10
syscall
main:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Main:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Main_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Main_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Main_init
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main_init
sw $a1, 8($sp)
#CallNode Main.main
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main.main
sw $a1, 8($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Object_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Object.abort:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_0
la $t0, msg_0
sw $t0, 4($sp)
#PrintString msg_0
lw $a0, 4($sp)
li $v0, 4
syscall
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 8($sp)
#PrintString class_name_1
lw $a0, 8($sp)
li $v0, 4
syscall
#LoadStr msg_1
la $t0, msg_1
sw $t0, 12($sp)
#PrintString eol_2
lw $a0, 12($sp)
li $v0, 4
syscall
#Abort
li $v0, 10
syscall
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.type_name:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg class_name_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.copy:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#Copy self
lw $t0, 8($sp)
lw $a0, 8($t0)
mul $a0, $a0, 4
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t1, $v0
li $a0, 0
lw $t3, 8($t0)
copy_object:
lw $t2, 0($t0)
sw $t2, 0($t1)
addi $t0, $t0, 4
addi $t1, $t1, 4
addi $a0, $a0, 1
blt $a0, $t3, copy_object
sw $v0, 4($sp)
#Return object_copy_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
IO_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
IO.out_string:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = String.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintString v_0
lw $a0, 4($sp)
li $v0, 4
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.out_int:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = Int.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintInteger v_0
li $v0, 1
lw $a0, 4($sp)
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.in_string:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadString read_string_0
la $a0, input_str
li $a1, 2048
li $v0, 8
syscall
move $t0, $a0
read_char:
li $t1, 0
lb $t1, 0($t0)
beqz $t1, remove_characters_str_end
addi $t0, $t0, 1
j read_char
remove_characters_str_end:
addi $t0, $t0, -1
li $t1, 0
lb $t1, 0($t0)
bne $t1, 10, rcs_end
sb $0, 0($t0)
addi $t0, $t0, -1
lb $t1, 0($t0)
bne $t1, 13, rcs_end
sb $0, 0($t0)
j remove_characters_str_end
rcs_end:
sw $a0, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg read_string_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
IO.in_int:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadInteger read_int_0
li $v0, 5
syscall
sw $v0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg read_int_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Int_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Intvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Stringvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String.length:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Length of self
lw $t0, 16($sp)
lw $t0, 16($t0)
li $a0, 0
count:
lb $t1, 0($t0)
beqz $t1, end
addi $t0, $t0, 1
addi $a0, $a0, 1
j count
end:
sw $a0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg length_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
String.concat:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#CallNode String.length
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 8($sp)
#GetAttr str2_2 = String.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#CallNode String.length
move $t0, $sp
# Arg s
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 16($sp)
#GetAttr len1_value_4 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr len2_value_5 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#Concat str1_0 str2_2
lw $a0, 20($sp)
lw $t0, 24($sp)
add $a0, $a0, $t0
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t3, $v0
lw $t0, 4($sp)
lw $t1, 12($sp)
copy_str:
lb $t2, 0($t0)
sb $t2, 0($v0)
beqz $t2, concat_str
addi $t0, $t0, 1
addi $v0, $v0, 1
j copy_str
concat_str:
lb $t2, 0($t1)
sb $t2, 0($v0)
beqz $t2, end_concat_str
addi $t1, $t1, 1
addi $v0, $v0, 1
j concat_str
end_concat_str:
sb $0, ($v0)
sw $t3, 28($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg result_string_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#Return instance_7
lw $a1, 32($sp)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
String.substr:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr i_value_0 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr l_value_1 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Substr self:string i_value_0:index l_value_1:length
lw $a0, 8($sp)
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
lw $t0, 4($sp)
lw $t1, 8($sp)
lw $t4, 24($sp)
lw $t2, 16($t4)
bltz $t0, substr_error
li $a0, 0
skip_char:
beq $a0, $t0, end_skip
addi $a0, $a0, 1
addi $t2, $t2, 1
beq $t2, $zero, substr_error
j skip_char
end_skip:
li $a0, 0
move $t3, $v0
substr_copy:
beq $a0, $t1, end_substr_copy
li $t0, 0
lb $t0, 0($t2)
sb $t0, 0($v0)
addi $t2, $t2, 1
beq $t2, $zero, substr_error
addi $v0, $v0, 1
addi $a0, $a0, 1
j substr_copy
end_substr_copy:
sb $0, ($v0)
sw $t3, 12($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode String_init
move $t0, $sp
# Arg substr_result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 20($sp)
#Return instance_3
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Bool_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Boolvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_equals:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr str2_1 = String.value
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#StringEquals str1_0 = str2_1
lw $t1, 4($sp)
lw $t2, 8($sp)
compare_str:
li $t3, 0
lb $t3, 0($t1)
li $t4, 0
lb $t4, 0($t2)
seq $a0, $t3, $t4
beqz $a0, end_compare_str
beqz $t3, end_compare_str
beqz $t4, end_compare_str
addi $t1, $t1, 1
addi $t2, $t2, 1
j compare_str
end_compare_str:
sw $a0, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
List_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
List.isNil:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 1
li $t0, 1
sw $t0, 12($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 16($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
List.cons:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Cons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Cons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Cons_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Cons_init
move $t0, $sp
# Arg result_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Cons_init
sw $a1, 8($sp)
#AssignNode new_cell_2 = result_0
lw $t1, 4($sp)
sw $t1, 12($sp)
#VCall init
move $t0, $sp
# Arg self
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg hd
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg new_cell_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 64($t2)
jal $t3
sw $a1, 16($sp)
#AssignNode result_4 = result_3
lw $t1, 16($sp)
sw $t1, 20($sp)
#Return result_4
lw $a1, 20($sp)
lw $ra, 0($sp)
addi $sp, $sp, 32
jr $ra
List.car:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return result_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
List.cdr:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Allocate 2:tag List:Class_name 4:Class_size
li $a0, 16
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, List_name
sw $t1, 4($t0)
li $t1, 4
sw $t1, 8($t0)
la $t1, List_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode List_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal List_init
sw $a1, 12($sp)
#Return result_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
List.rev:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall cdr
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
List.sort:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall cdr
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
List.insert:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall cdr
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
List.rcons:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall cdr
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 40($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
List.print_list:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Cons_init:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode List_init
move $t0, $sp
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal List_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 0
li $t0, 0
sw $t0, 12($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 16($sp)
#SetAttr Consxcar = instance_1
lw $t0, 20($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#SetAttr Consxcdr = void
lw $t0, 20($sp)
la $t1, void
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Cons.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Cons.init:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Consxcar = hd
lw $t0, 12($sp)
lw $t1, 16($sp)
sw $t1, 16($t0)
#SetAttr Consxcdr = tl
lw $t0, 12($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#Return self
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Cons.car:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#Return Cons.xcar
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Cons.cdr:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 8($sp)
lw $t1, 20($t0)
sw $t1, 4($sp)
#Return Cons.xcdr
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Cons.rev:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 20($sp)
lw $t1, 20($t0)
sw $t1, 12($sp)
#VCall rev
move $t0, $sp
# Arg Cons.xcdr
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 8($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#VCall rcons
move $t0, $sp
# Arg Cons.xcar
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 56($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Cons.sort:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 20($sp)
lw $t1, 20($t0)
sw $t1, 12($sp)
#VCall sort
move $t0, $sp
# Arg Cons.xcdr
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 8($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#VCall insert
move $t0, $sp
# Arg Cons.xcar
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 52($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Cons.insert:
addi $sp, $sp, -64
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 68($sp)
lw $t1, 16($t0)
sw $t1, 52($sp)
#GetAttr left_3 = Int.value
lw $t0, 72($sp)
lw $t1, 16($t0)
sw $t1, 16($sp)
#GetAttr right_4 = Int.value
lw $t0, 52($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#BinaryOperator left_3 < right_4
lw $a0, 16($sp)
lw $t1, 20($sp)
slt $a0, $a0, $t1
sw $a0, 12($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 28($sp)
# IFGoto result_1 -> label_1
lw $t0, 8($sp)
lw $a0, 16($t0)
bnez $a0, label_1
#Allocate 3:tag Cons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Cons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Cons_methods
sw $t1, 12($t0)
sw $t0, 36($sp)
#CallNode Cons_init
move $t0, $sp
# Arg result_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Cons_init
sw $a1, 40($sp)
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 68($sp)
lw $t1, 20($t0)
sw $t1, 48($sp)
#VCall insert
move $t0, $sp
# Arg i
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg Cons.xcdr
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 48($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 52($t2)
jal $t3
sw $a1, 44($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 68($sp)
lw $t1, 16($t0)
sw $t1, 52($sp)
#VCall init
move $t0, $sp
# Arg result_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg Cons.xcar
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 36($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 64($t2)
jal $t3
sw $a1, 32($sp)
#AssignNode result_0 = result_7
lw $t1, 32($sp)
sw $t1, 4($sp)
#Goto label_2
b label_2
#LabelNode label_1
label_1:
#Allocate 3:tag Cons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Cons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Cons_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode Cons_init
move $t0, $sp
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Cons_init
sw $a1, 64($sp)
#VCall init
move $t0, $sp
# Arg self
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg i
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 60($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 64($t2)
jal $t3
sw $a1, 56($sp)
#AssignNode result_0 = result_13
lw $t1, 56($sp)
sw $t1, 4($sp)
#LabelNode label_2
label_2:
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 76
jr $ra
Cons.rcons:
addi $sp, $sp, -24
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Cons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Cons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Cons_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Cons_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Cons_init
sw $a1, 12($sp)
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 28($sp)
lw $t1, 20($t0)
sw $t1, 20($sp)
#VCall rcons
move $t0, $sp
# Arg i
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg Cons.xcdr
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 56($t2)
jal $t3
sw $a1, 16($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#VCall init
move $t0, $sp
# Arg result_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg Cons.xcar
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 64($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Cons.print_list:
addi $sp, $sp, -32
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 36($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#VCall out_int
move $t0, $sp
# Arg Cons.xcar
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 36($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 4($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 16($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#CallNode String_init
move $t0, $sp
# Arg l_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 24($sp)
#VCall out_string
move $t0, $sp
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 36($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 12($sp)
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 36($sp)
lw $t1, 20($t0)
sw $t1, 32($sp)
#VCall print_list
move $t0, $sp
# Arg Cons.xcdr
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 32($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 60($t2)
jal $t3
sw $a1, 28($sp)
#Return result_6
lw $a1, 28($sp)
lw $ra, 0($sp)
addi $sp, $sp, 40
jr $ra
Nil_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode List_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal List_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Nil.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 1
li $t0, 1
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Nil.rev:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return self
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Nil.sort:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return self
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Nil.insert:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall rcons
move $t0, $sp
# Arg i
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 56($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
Nil.rcons:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Cons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Cons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Cons_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Cons_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Cons_init
sw $a1, 12($sp)
#VCall init
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg i
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 64($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Nil.print_list:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 1
li $t0, 1
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Main_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr Mainl = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 16($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Main.iota:
addi $sp, $sp, -116
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Nil:Class_name 4:Class_size
li $a0, 16
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Nil_name
sw $t1, 4($t0)
li $t1, 4
sw $t1, 8($t0)
la $t1, Nil_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Nil_init
move $t0, $sp
# Arg result_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Nil_init
sw $a1, 8($sp)
#SetAttr Mainl = result_0
lw $t0, 120($sp)
lw $t1, 4($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#LoadInt 0
li $t0, 0
sw $t0, 20($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 24($sp)
#AssignNode j_6 = instance_3
lw $t1, 16($sp)
sw $t1, 28($sp)
#LabelNode label_3
label_3:
#GetAttr left_10 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 44($sp)
#GetAttr right_11 = Int.value
lw $t0, 124($sp)
lw $t1, 16($t0)
sw $t1, 48($sp)
#BinaryOperator left_10 < right_11
lw $a0, 44($sp)
lw $t1, 48($sp)
slt $a0, $a0, $t1
sw $a0, 40($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 36($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 52($sp)
# IFGoto result_8 -> label_4
lw $t0, 36($sp)
lw $a0, 16($t0)
bnez $a0, label_4
#Goto label_5
b label_5
#LabelNode label_4
label_4:
#Allocate 3:tag Cons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Cons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Cons_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode Cons_init
move $t0, $sp
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Cons_init
sw $a1, 64($sp)
#GetAttr Main.l = Main.l
lw $t0, 120($sp)
lw $t1, 16($t0)
sw $t1, 116($sp)
#VCall init
move $t0, $sp
# Arg Main.l
lw $t1, 116($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg j_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 60($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 64($t2)
jal $t3
sw $a1, 56($sp)
#SetAttr Mainl = result_13
lw $t0, 120($sp)
lw $t1, 56($sp)
sw $t1, 16($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 92($sp)
#LoadInt 1
li $t0, 1
sw $t0, 96($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_23
lw $t1, 96($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 100($sp)
#GetAttr left_20 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 84($sp)
#GetAttr right_21 = Int.value
lw $t0, 92($sp)
lw $t1, 16($t0)
sw $t1, 88($sp)
#BinaryOperator left_20 + right_21
lw $a0, 84($sp)
lw $t1, 88($sp)
add $a0, $a0, $t1
sw $a0, 80($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 104($sp)
#AssignNode j_6 = result_18
lw $t1, 76($sp)
sw $t1, 28($sp)
#Goto label_3
b label_3
#LabelNode label_5
label_5:
#AssignNode result_27 = result_7
lw $t1, 32($sp)
sw $t1, 112($sp)
#GetAttr Main.l = Main.l
lw $t0, 120($sp)
lw $t1, 16($t0)
sw $t1, 116($sp)
#Return Main.l
lw $a1, 116($sp)
lw $ra, 0($sp)
addi $sp, $sp, 128
jr $ra
Main.main:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_3
la $t0, msg_3
sw $t0, 8($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 12($sp)
#CallNode String_init
move $t0, $sp
# Arg l_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 16($sp)
#VCall out_string
move $t0, $sp
# Arg instance_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 40($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 4($sp)
#VCall in_int
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 40($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 24($t2)
jal $t3
sw $a1, 36($sp)
#VCall iota
move $t0, $sp
# Arg result_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 40($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 32($sp)
#VCall rev
move $t0, $sp
# Arg result_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 32($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 28($sp)
#VCall sort
move $t0, $sp
# Arg result_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 28($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 24($sp)
#VCall print_list
move $t0, $sp
# Arg result_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 24($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 60($t2)
jal $t3
sw $a1, 20($sp)
#Return result_4
lw $a1, 20($sp)
lw $ra, 0($sp)
addi $sp, $sp, 44
jr $ra