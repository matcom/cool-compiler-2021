	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_List: .asciiz "List"
data_7_type_name_Cons: .asciiz "Cons"
data_8_type_name_Nil: .asciiz "Nil"
data_9_type_name_Main: .asciiz "Main"
data_10_sep_cat: .asciiz " ++ "
data_11_eol: .asciiz "\n"
data_12_under: .asciiz "_"
data_13_meth: .asciiz "abort"
data_14_meth: .asciiz "init"
data_15_meth: .asciiz "cdr"
data_16_meth: .asciiz "rev"
data_17_meth: .asciiz "rcons"
data_18_meth: .asciiz "sort"
data_19_meth: .asciiz "insert"
data_20_meth: .asciiz "out_int"
data_21_meth: .asciiz "out_string"
data_22_meth: .asciiz "print_list"
data_23_string: .asciiz "How many numbers to sort? "
data_24_meth: .asciiz "in_int"
data_25_meth: .asciiz "iota"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Int_copy
Bool: .word Object_abort,Bool_type_name,Bool_copy
String: .word Object_abort,String_type_name,String_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,IO_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
List: .word Object_abort,List_type_name,List_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,List_isNil,List_cons,List_car,List_cdr,List_rev,List_sort,List_insert,List_rcons,List_print_list
Cons: .word Object_abort,Cons_type_name,Cons_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Cons_isNil,List_cons,Cons_car,Cons_cdr,Cons_rev,Cons_sort,Cons_insert,Cons_rcons,Cons_print_list,Cons_init
Nil: .word Object_abort,Nil_type_name,Nil_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Nil_isNil,List_cons,List_car,List_cdr,Nil_rev,Nil_sort,Nil_insert,Nil_rcons,Nil_print_list
Main: .word Object_abort,Main_type_name,Main_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Main_iota,Main_main

	.text
Void___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t8, 0 	#Save value 0 in register
	sw $t8, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Main___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t9, data_0_abort_msg 	#LOAD
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t9, 4($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_1_type_name_Object 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, Object 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t6, data_2_type_name_Int 	#LOAD
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Int 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t1, data_3_type_name_Bool 	#LOAD
	sw $t1, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, Bool 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_4_type_name_String 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t5, String 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_5_type_name_IO 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t8, IO 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_type_name:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t6, data_6_type_name_List 	#LOAD
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_copy:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type List
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t6, List 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_7_type_name_Cons 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_copy:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Cons
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t0, Cons 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t1) 	#Load attribute in index 0
	sw $t7, 4($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 0($t4) 	#Save value in attribute of index 0
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 4($t8) 	#Load attribute in index 1
	sw $t5, 4($fp) 	#Save obtained attribute in destination
	lw $t0, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 4($t4) 	#Save value in attribute of index 1
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_type_name:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_8_type_name_Nil 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Nil
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t3, Nil 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_9_type_name_Main 	#LOAD
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t7, Main 	#Save type address in register
	sw $t7, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t1) 	#Load attribute in index 0
	sw $t8, 4($fp) 	#Save obtained attribute in destination
	lw $t4, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t9) 	#Save value in attribute of index 0
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t4, -4($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t7, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t5, -8($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 5 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 8 	#READ
	syscall 	#
	sw $a0, 0($fp) 	#Save readed value
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t8) 	#Load attribute in index 0
	sw $t2, 0($fp) 	#Save obtained attribute in destination
	la $a0, 4($fp) 	#Calculate Lenght
	li $t1, 0 	#
loop1:
	lb $t2, 0($a0) 	#
	beqz $t2, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t1,  $t1, 1 	#
	j loop1 	#
exit1:
	sw $t1, 0($fp) 	#Save Calculated Length
	lw $t1, 4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_10_sep_cat 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t9, -8($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 4($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, -4($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t2, -8($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t2) 	#Load attribute in index 0
	sw $t5, 8($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 12($fp) 	#Save obtained attribute in destination
	la $a0, 8($fp) 	#Calculate Lenght
	li $t3, 0 	#
loop2:
	lb $t7, 0($a0) 	#
	beqz $t7, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t3,  $t3, 1 	#
	j loop2 	#
exit2:
	sw $t3, 20($fp) 	#Save Calculated Length
	la $a0, 24($fp) 	#Calculate Lenght
	li $t5, 0 	#
loop3:
	lb $t9, 0($a0) 	#
	beqz $t9, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t5,  $t5, 1 	#
	j loop3 	#
exit3:
	sw $t5, 24($fp) 	#Save Calculated Length
	lw $t1, 24($fp) 	#
	lw $t2, 20($fp) 	#
	add $t7,  $t1, $t2 	#Plus
	sw $t7, 28($fp) 	#Save result of plus
	lw $t5, 28($fp) 	#Concat two Strings
	addi $t5,  $t5, 1 	#
	li $v0, 9 	#
	move $a0, $t5 	#
	syscall 	#
	la $t0, 0($v0) 	#
	la $a1, -8($fp) 	#
	la $a2, -4($fp) 	#
loop4:
	lb $t5, 0($a1) 	#
	beqz $t5, exit4 	#
	sb $t5, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t5, 0($a2) 	#
	sb $t5, 0($v0) 	#
	beqz $t5, exit5 	#
	addi $v0,  $v0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t0, 16($fp) 	#Save concated Strings
	lw $t3, 16($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 32($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -12($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 0($fp) 	#Save obtained attribute in destination
	lw $t8, -4($fp) 	#Obtain substring
	lw $t1, -8($fp) 	#
	li $v0, 9 	#
	move $a0, $t6 	#
	syscall 	#
	la $t3, 0($v0) 	#
	la $a1, 0($fp) 	#
	add $a1,  $a1, $t8 	#
loop6:
	lb $t6, 0($a1) 	#
	sb $t6, 0($v0) 	#
	beqz $t8, exit6 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t8,  $t8, 1 	#
	j loop6 	#
exit6:
	sw $t3, 4($fp) 	#Save substring
	lw $t1, 4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, Object 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t6, Int 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, -4($fp) 	#Obtain value from source dir
	lw $t8, 0($fp) 	#Dir of instance of attribute to set
	sw $t3, 0($t8) 	#Save value in attribute of index 0
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Bool 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, -4($fp) 	#Obtain value from source dir
	lw $t6, 0($fp) 	#Dir of instance of attribute to set
	sw $t9, 0($t6) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, String 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, -4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t4, 0($t9) 	#Save value in attribute of index 0
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type List
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t4, List 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_isNil:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 44 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Typeof
	lw $t0, -4($t2) 	#
	sw $t0, 4($fp) 	#Save type value in destination
	la $t1, data_11_eol 	#LOAD
	sw $t1, 12($fp) 	#Save loaded value in destination
	lw $t5, 12($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_12_under 	#LOAD
	sw $t1, 20($fp) 	#Save loaded value in destination
	lw $t0, 20($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_13_meth 	#LOAD
	sw $t4, 28($fp) 	#Save loaded value in destination
	lw $t6, 28($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t8) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 8($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 32($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 0($t4) 	#Get method of index 0
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	li $t5, 1 	#Load Int
	sw $t5, 36($fp) 	#Save loaded value in destination
	lw $t6, 36($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -44 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_cons:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 44 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Cons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 4($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	lw $t9, 0($fp) 	#Typeof
	lw $t4, -4($t9) 	#
	sw $t4, 12($fp) 	#Save type value in destination
	la $t9, data_11_eol 	#LOAD
	sw $t9, 20($fp) 	#Save loaded value in destination
	lw $t6, 20($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_12_under 	#LOAD
	sw $t9, 28($fp) 	#Save loaded value in destination
	lw $t1, 28($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_14_meth 	#LOAD
	sw $t5, 36($fp) 	#Save loaded value in destination
	lw $t7, 36($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 12($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t0) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 16($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 32($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 40($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 24($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 12($fp) 	#get type dir for Dynamic Call
	lw $t1, 64($t0) 	#Get method of index 16
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t2, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -44 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_car:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Typeof
	lw $t5, -4($t9) 	#
	sw $t5, 4($fp) 	#Save type value in destination
	la $t3, data_11_eol 	#LOAD
	sw $t3, 12($fp) 	#Save loaded value in destination
	lw $t6, 12($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_12_under 	#LOAD
	sw $t0, 20($fp) 	#Save loaded value in destination
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_13_meth 	#LOAD
	sw $t9, 28($fp) 	#Save loaded value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t5) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 8($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 24($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 32($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 4($fp) 	#get type dir for Dynamic Call
	lw $t4, 0($t1) 	#Get method of index 0
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 36($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, 36($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_cdr:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -4($fp) 	#Typeof
	lw $t1, -4($t4) 	#
	sw $t1, 4($fp) 	#Save type value in destination
	la $t6, data_11_eol 	#LOAD
	sw $t6, 12($fp) 	#Save loaded value in destination
	lw $t8, 12($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_12_under 	#LOAD
	sw $t1, 20($fp) 	#Save loaded value in destination
	lw $t4, 20($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_13_meth 	#LOAD
	sw $t4, 28($fp) 	#Save loaded value in destination
	lw $t1, 28($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t2) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 8($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 24($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 32($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 4($fp) 	#get type dir for Dynamic Call
	lw $t1, 0($t8) 	#Get method of index 0
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	jal List___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 36($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 36($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_rev:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Typeof
	lw $t3, -4($t8) 	#
	sw $t3, 4($fp) 	#Save type value in destination
	la $t4, data_11_eol 	#LOAD
	sw $t4, 12($fp) 	#Save loaded value in destination
	lw $t8, 12($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_12_under 	#LOAD
	sw $t9, 20($fp) 	#Save loaded value in destination
	lw $t6, 20($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_15_meth 	#LOAD
	sw $t8, 28($fp) 	#Save loaded value in destination
	lw $t2, 28($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t2) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 8($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 32($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 4($fp) 	#get type dir for Dynamic Call
	lw $t5, 40($t0) 	#Get method of index 10
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_sort:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Typeof
	lw $t6, -4($t2) 	#
	sw $t6, 4($fp) 	#Save type value in destination
	la $t4, data_11_eol 	#LOAD
	sw $t4, 12($fp) 	#Save loaded value in destination
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_12_under 	#LOAD
	sw $t7, 20($fp) 	#Save loaded value in destination
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_meth 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t5, 28($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t9) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 8($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 24($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 32($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 4($fp) 	#get type dir for Dynamic Call
	lw $t6, 40($t9) 	#Get method of index 10
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_insert:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -8($fp) 	#Typeof
	lw $t3, -4($t4) 	#
	sw $t3, 4($fp) 	#Save type value in destination
	la $t2, data_11_eol 	#LOAD
	sw $t2, 12($fp) 	#Save loaded value in destination
	lw $t0, 12($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_12_under 	#LOAD
	sw $t4, 20($fp) 	#Save loaded value in destination
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_15_meth 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t8, 28($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t4) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 8($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 32($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 4($fp) 	#get type dir for Dynamic Call
	lw $t4, 40($t3) 	#Get method of index 10
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_rcons:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -8($fp) 	#Typeof
	lw $t6, -4($t5) 	#
	sw $t6, 4($fp) 	#Save type value in destination
	la $t7, data_11_eol 	#LOAD
	sw $t7, 12($fp) 	#Save loaded value in destination
	lw $t3, 12($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_12_under 	#LOAD
	sw $t2, 20($fp) 	#Save loaded value in destination
	lw $t2, 20($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_15_meth 	#LOAD
	sw $t0, 28($fp) 	#Save loaded value in destination
	lw $t6, 28($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t7) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 8($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 24($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 32($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 4($fp) 	#get type dir for Dynamic Call
	lw $t4, 40($t7) 	#Get method of index 10
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
List_print_list:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Typeof
	lw $t9, -4($t7) 	#
	sw $t9, 4($fp) 	#Save type value in destination
	la $t4, data_11_eol 	#LOAD
	sw $t4, 12($fp) 	#Save loaded value in destination
	lw $t6, 12($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_12_under 	#LOAD
	sw $t4, 20($fp) 	#Save loaded value in destination
	lw $t7, 20($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_13_meth 	#LOAD
	sw $t9, 28($fp) 	#Save loaded value in destination
	lw $t0, 28($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t0) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t0, 8($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 32($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 4($fp) 	#get type dir for Dynamic Call
	lw $t5, 0($t8) 	#Get method of index 0
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Cons
	li $a0, 12 	#Save 12 bytes
	syscall 	#
	la $t9, Cons 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Cons_xcar___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain value from source dir
	lw $t9, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t9) 	#Save value in attribute of index 0
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Cons_xcdr___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 8($fp) 	#Obtain value from source dir
	lw $t5, 0($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t5) 	#Save value in attribute of index 1
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_xcar___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t8, 0 	#Load Int
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t0, 0($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_xcdr___init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_isNil:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t9, 0 	#Load Int
	sw $t9, 0($fp) 	#Save loaded value in destination
	lw $t1, 0($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_init:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, -8($fp) 	#Obtain value from source dir
	lw $t0, -12($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t0) 	#Save value in attribute of index 0
	lw $t1, -4($fp) 	#Obtain value from source dir
	lw $t6, -12($fp) 	#Dir of instance of attribute to set
	sw $t1, 4($t6) 	#Save value in attribute of index 1
	lw $t7, -12($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_car:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 0($fp) 	#Save obtained attribute in destination
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_cdr:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 4($t7) 	#Load attribute in index 1
	sw $t1, 0($fp) 	#Save obtained attribute in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_rev:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 80 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 4($t6) 	#Load attribute in index 1
	sw $t3, 8($fp) 	#Save obtained attribute in destination
	lw $t3, 8($fp) 	#Typeof
	lw $t1, -4($t3) 	#
	sw $t1, 12($fp) 	#Save type value in destination
	la $t2, data_11_eol 	#LOAD
	sw $t2, 20($fp) 	#Save loaded value in destination
	lw $t7, 20($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_12_under 	#LOAD
	sw $t0, 28($fp) 	#Save loaded value in destination
	lw $t8, 28($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_16_meth 	#LOAD
	sw $t7, 36($fp) 	#Save loaded value in destination
	lw $t5, 36($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t9) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 16($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 32($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 40($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t5, 8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 12($fp) 	#get type dir for Dynamic Call
	lw $t7, 44($t8) 	#Get method of index 11
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 44($fp) 	#Save obtained attribute in destination
	lw $t2, 4($fp) 	#Typeof
	lw $t3, -4($t2) 	#
	sw $t3, 48($fp) 	#Save type value in destination
	la $t0, data_11_eol 	#LOAD
	sw $t0, 56($fp) 	#Save loaded value in destination
	lw $t1, 56($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_12_under 	#LOAD
	sw $t2, 64($fp) 	#Save loaded value in destination
	lw $t9, 64($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_17_meth 	#LOAD
	sw $t0, 72($fp) 	#Save loaded value in destination
	lw $t1, 72($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 48($fp) 	#get type dir for Dynamic Call
	lw $t5, 4($t6) 	#Get method of index 1
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 68($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 76($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 60($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t7, 4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 44($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 48($fp) 	#get type dir for Dynamic Call
	lw $t0, 56($t3) 	#Get method of index 14
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -80 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_sort:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 80 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t6, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 4($t6) 	#Load attribute in index 1
	sw $t2, 8($fp) 	#Save obtained attribute in destination
	lw $t1, 8($fp) 	#Typeof
	lw $t5, -4($t1) 	#
	sw $t5, 12($fp) 	#Save type value in destination
	la $t2, data_11_eol 	#LOAD
	sw $t2, 20($fp) 	#Save loaded value in destination
	lw $t9, 20($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_12_under 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t8, 28($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_18_meth 	#LOAD
	sw $t3, 36($fp) 	#Save loaded value in destination
	lw $t2, 36($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 12($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t2) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 16($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 32($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 40($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 24($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t6, 8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 12($fp) 	#get type dir for Dynamic Call
	lw $t5, 48($t1) 	#Get method of index 12
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 44($fp) 	#Save obtained attribute in destination
	lw $t9, 4($fp) 	#Typeof
	lw $t8, -4($t9) 	#
	sw $t8, 48($fp) 	#Save type value in destination
	la $t0, data_11_eol 	#LOAD
	sw $t0, 56($fp) 	#Save loaded value in destination
	lw $t0, 56($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_12_under 	#LOAD
	sw $t4, 64($fp) 	#Save loaded value in destination
	lw $t4, 64($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_19_meth 	#LOAD
	sw $t8, 72($fp) 	#Save loaded value in destination
	lw $t1, 72($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 48($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t3) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 16($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 68($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 76($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 60($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t1, 4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 44($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 48($fp) 	#get type dir for Dynamic Call
	lw $t3, 52($t0) 	#Get method of index 13
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -80 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_insert:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 144 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 4($fp) 	#Save obtained attribute in destination
	lw $t8, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 8($fp) 	#Save obtained attribute in destination
	lw $t3, 8($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 12($fp) 	#Save obtained attribute in destination
	sw $t2, 12($fp) 	#Value is direction
	sw $t7, 4($fp) 	#Value is direction
	sub $t3,  $t2, $t7 	#Minus
	sw $t3, 16($fp) 	#Save result of minus
	lw $t9, 16($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t3, 0 	#Move 0 to register for comparisson
	lw $t0, 20($fp) 	#Mov comparisson value to register
	bgt $t3,  $t0, label_then_0 	#Compare values in registers and jump to label_then_0 if the second is greater than 0
	j label_else_0 	#Jump to label_else_0
label_then_0:
	jal Cons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 28($fp) 	#Typeof
	lw $t6, -4($t1) 	#
	sw $t6, 32($fp) 	#Save type value in destination
	la $t1, data_11_eol 	#LOAD
	sw $t1, 40($fp) 	#Save loaded value in destination
	lw $t1, 40($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_12_under 	#LOAD
	sw $t6, 48($fp) 	#Save loaded value in destination
	lw $t6, 48($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 52($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_14_meth 	#LOAD
	sw $t5, 56($fp) 	#Save loaded value in destination
	lw $t2, 56($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 32($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t4) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 36($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t9, 36($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 52($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 60($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 44($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t1, 28($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 32($fp) 	#get type dir for Dynamic Call
	lw $t3, 64($t0) 	#Get method of index 16
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t8, 24($fp) 	#Obtain value to assign
	sw $t8, 0($fp) 	#Assign value
	j label_continue_0 	#Jump to label_continue_0
label_else_0:
	jal Cons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 68($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t8, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 4($t8) 	#Load attribute in index 1
	sw $t6, 76($fp) 	#Save obtained attribute in destination
	lw $t5, 76($fp) 	#Typeof
	lw $t6, -4($t5) 	#
	sw $t6, 80($fp) 	#Save type value in destination
	la $t8, data_11_eol 	#LOAD
	sw $t8, 88($fp) 	#Save loaded value in destination
	lw $t0, 88($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_12_under 	#LOAD
	sw $t8, 96($fp) 	#Save loaded value in destination
	lw $t8, 96($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 100($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_19_meth 	#LOAD
	sw $t5, 104($fp) 	#Save loaded value in destination
	lw $t1, 104($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 80($fp) 	#get type dir for Dynamic Call
	lw $t2, 4($t5) 	#Get method of index 1
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 36($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 36($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 100($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 108($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 92($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	lw $t8, 76($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 80($fp) 	#get type dir for Dynamic Call
	lw $t4, 52($t9) 	#Get method of index 13
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 72($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 68($fp) 	#Typeof
	lw $t8, -4($t5) 	#
	sw $t8, 112($fp) 	#Save type value in destination
	la $t2, data_11_eol 	#LOAD
	sw $t2, 120($fp) 	#Save loaded value in destination
	lw $t5, 120($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_12_under 	#LOAD
	sw $t9, 128($fp) 	#Save loaded value in destination
	lw $t0, 128($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_14_meth 	#LOAD
	sw $t3, 136($fp) 	#Save loaded value in destination
	lw $t8, 136($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 112($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t5) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 36($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 36($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 132($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 140($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 124($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	lw $t7, 68($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 72($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 112($fp) 	#get type dir for Dynamic Call
	lw $t7, 64($t6) 	#Get method of index 16
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 64($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t0, 64($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
label_continue_0:
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -144 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_rcons:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 84 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Cons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, -8($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t2) 	#Load attribute in index 0
	sw $t0, 8($fp) 	#Save obtained attribute in destination
	lw $t3, -8($fp) 	#Dir of instance of attribute to get
	lw $t2, 4($t3) 	#Load attribute in index 1
	sw $t2, 16($fp) 	#Save obtained attribute in destination
	lw $t8, 16($fp) 	#Typeof
	lw $t3, -4($t8) 	#
	sw $t3, 20($fp) 	#Save type value in destination
	la $t8, data_11_eol 	#LOAD
	sw $t8, 28($fp) 	#Save loaded value in destination
	lw $t2, 28($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_12_under 	#LOAD
	sw $t8, 36($fp) 	#Save loaded value in destination
	lw $t6, 36($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_17_meth 	#LOAD
	sw $t2, 44($fp) 	#Save loaded value in destination
	lw $t6, 44($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 20($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t7) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 24($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 40($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 48($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 32($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t7, 16($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 20($fp) 	#get type dir for Dynamic Call
	lw $t5, 56($t0) 	#Get method of index 14
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 4($fp) 	#Typeof
	lw $t4, -4($t3) 	#
	sw $t4, 52($fp) 	#Save type value in destination
	la $t8, data_11_eol 	#LOAD
	sw $t8, 60($fp) 	#Save loaded value in destination
	lw $t2, 60($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_12_under 	#LOAD
	sw $t1, 68($fp) 	#Save loaded value in destination
	lw $t3, 68($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_14_meth 	#LOAD
	sw $t0, 76($fp) 	#Save loaded value in destination
	lw $t4, 76($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 52($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t0) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 24($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t1, 24($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 72($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 80($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 64($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	lw $t7, 4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 12($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 52($fp) 	#get type dir for Dynamic Call
	lw $t1, 64($t4) 	#Get method of index 16
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -84 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Cons_print_list:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 124 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 8($fp) 	#Save type value in destination
	la $t1, data_11_eol 	#LOAD
	sw $t1, 16($fp) 	#Save loaded value in destination
	lw $t5, 16($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_12_under 	#LOAD
	sw $t7, 24($fp) 	#Save loaded value in destination
	lw $t1, 24($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_20_meth 	#LOAD
	sw $t1, 32($fp) 	#Save loaded value in destination
	lw $t7, 32($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 8($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t6) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 12($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 28($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 36($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 20($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 8($fp) 	#get type dir for Dynamic Call
	lw $t9, 16($t2) 	#Get method of index 4
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t2, data_11_eol 	#LOAD
	sw $t2, 44($fp) 	#Save loaded value in destination
	lw $t9, 44($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 52($fp) 	#Save type value in destination
	la $t6, data_11_eol 	#LOAD
	sw $t6, 60($fp) 	#Save loaded value in destination
	lw $t8, 60($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_12_under 	#LOAD
	sw $t4, 68($fp) 	#Save loaded value in destination
	lw $t2, 68($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t0, data_21_meth 	#LOAD
	sw $t0, 76($fp) 	#Save loaded value in destination
	lw $t5, 76($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 52($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t2) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 72($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 80($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 64($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 48($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 52($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t2) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 40($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 4($t9) 	#Load attribute in index 1
	sw $t0, 88($fp) 	#Save obtained attribute in destination
	lw $t3, 88($fp) 	#Typeof
	lw $t4, -4($t3) 	#
	sw $t4, 92($fp) 	#Save type value in destination
	la $t2, data_11_eol 	#LOAD
	sw $t2, 100($fp) 	#Save loaded value in destination
	lw $t0, 100($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_12_under 	#LOAD
	sw $t1, 108($fp) 	#Save loaded value in destination
	lw $t2, 108($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t4, data_22_meth 	#LOAD
	sw $t4, 116($fp) 	#Save loaded value in destination
	lw $t1, 116($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 92($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t5) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t6, 12($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 112($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 120($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 104($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t8, 88($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 92($fp) 	#get type dir for Dynamic Call
	lw $t1, 60($t3) 	#Get method of index 15
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 84($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, 84($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -124 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil___init:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Nil
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t4, Nil 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_isNil:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t4, 1 	#Load Int
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_rev:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t7, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_sort:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_insert:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 36 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t0, -8($fp) 	#Typeof
	lw $t5, -4($t0) 	#
	sw $t5, 4($fp) 	#Save type value in destination
	la $t6, data_11_eol 	#LOAD
	sw $t6, 12($fp) 	#Save loaded value in destination
	lw $t1, 12($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_12_under 	#LOAD
	sw $t1, 20($fp) 	#Save loaded value in destination
	lw $t6, 20($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_17_meth 	#LOAD
	sw $t6, 28($fp) 	#Save loaded value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#get type dir for Dynamic Call
	lw $t4, 4($t9) 	#Get method of index 1
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 8($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 8($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 24($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 32($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 16($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t7, -8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 4($fp) 	#get type dir for Dynamic Call
	lw $t0, 56($t4) 	#Get method of index 14
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -36 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_rcons:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 40 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Cons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t9, 4($fp) 	#Typeof
	lw $t1, -4($t9) 	#
	sw $t1, 8($fp) 	#Save type value in destination
	la $t6, data_11_eol 	#LOAD
	sw $t6, 16($fp) 	#Save loaded value in destination
	lw $t1, 16($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_12_under 	#LOAD
	sw $t2, 24($fp) 	#Save loaded value in destination
	lw $t5, 24($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_14_meth 	#LOAD
	sw $t3, 32($fp) 	#Save loaded value in destination
	lw $t1, 32($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 36($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 8($fp) 	#get type dir for Dynamic Call
	lw $t7, 4($t9) 	#Get method of index 1
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 12($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 12($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 28($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 36($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 20($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 8($fp) 	#get type dir for Dynamic Call
	lw $t4, 64($t0) 	#Get method of index 16
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -40 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Nil_print_list:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t6, 1 	#Load Int
	sw $t6, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, Main 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_l___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain value from source dir
	lw $t4, 0($fp) 	#Dir of instance of attribute to set
	sw $t5, 0($t4) 	#Save value in attribute of index 0
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_l___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_iota:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 100 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Nil___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t1, 0($fp) 	#Obtain value from source dir
	lw $t2, -8($fp) 	#Dir of instance of attribute to set
	sw $t1, 0($t2) 	#Save value in attribute of index 0
	li $t6, 0 	#Load Int
	sw $t6, 8($fp) 	#Save loaded value in destination
	lw $t3, 8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#Obtain value to assign
	sw $t9, 4($fp) 	#Assign value
label_while_label_0:
	lw $t5, 4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 16($fp) 	#Save obtained attribute in destination
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 20($fp) 	#Save obtained attribute in destination
	sw $t1, 20($fp) 	#Value is direction
	sw $t5, 16($fp) 	#Value is direction
	sub $t8,  $t1, $t5 	#Minus
	sw $t8, 24($fp) 	#Save result of minus
	lw $t4, 24($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 28($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t0, 0 	#Move 0 to register for comparisson
	lw $t7, 28($fp) 	#Mov comparisson value to register
	bgt $t0,  $t7, label_loop_label_0 	#Compare values in registers and jump to label_loop_label_0 if the second is greater than 0
	j label_pool_label_0 	#Jump to label_pool_label_0
label_loop_label_0:
	jal Cons___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 36($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t7, -8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 40($fp) 	#Save obtained attribute in destination
	lw $t8, 36($fp) 	#Typeof
	lw $t7, -4($t8) 	#
	sw $t7, 44($fp) 	#Save type value in destination
	la $t5, data_11_eol 	#LOAD
	sw $t5, 52($fp) 	#Save loaded value in destination
	lw $t5, 52($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_12_under 	#LOAD
	sw $t9, 60($fp) 	#Save loaded value in destination
	lw $t1, 60($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_14_meth 	#LOAD
	sw $t8, 68($fp) 	#Save loaded value in destination
	lw $t9, 68($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 44($fp) 	#get type dir for Dynamic Call
	lw $t8, 4($t7) 	#Get method of index 1
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t7, 48($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 64($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t8, 72($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 56($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	lw $t8, 36($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 40($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 44($fp) 	#get type dir for Dynamic Call
	lw $t4, 64($t6) 	#Get method of index 16
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t4, 32($fp) 	#Obtain value to assign
	sw $t4, 40($fp) 	#Assign value
	lw $t9, 4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t9) 	#Load attribute in index 0
	sw $t4, 76($fp) 	#Save obtained attribute in destination
	li $t4, 1 	#Load Int
	sw $t4, 80($fp) 	#Save loaded value in destination
	lw $t9, 80($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 84($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t8) 	#Load attribute in index 0
	sw $t0, 88($fp) 	#Save obtained attribute in destination
	lw $t9, 88($fp) 	#
	lw $t3, 76($fp) 	#
	add $t1,  $t9, $t3 	#Plus
	sw $t1, 92($fp) 	#Save result of plus
	lw $t2, 92($fp) 	#Obtain value to assign
	sw $t2, 4($fp) 	#Assign value
	j label_while_label_0 	#Jump to label_while_label_0
label_pool_label_0:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 96($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t8, 40($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -100 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 224 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t6, data_23_string 	#LOAD
	sw $t6, 4($fp) 	#Save loaded value in destination
	lw $t5, 4($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t6, -4($t8) 	#
	sw $t6, 12($fp) 	#Save type value in destination
	la $t3, data_11_eol 	#LOAD
	sw $t3, 20($fp) 	#Save loaded value in destination
	lw $t8, 20($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_12_under 	#LOAD
	sw $t9, 28($fp) 	#Save loaded value in destination
	lw $t9, 28($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t5, data_21_meth 	#LOAD
	sw $t5, 36($fp) 	#Save loaded value in destination
	lw $t5, 36($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 12($fp) 	#get type dir for Dynamic Call
	lw $t0, 4($t9) 	#Get method of index 1
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t3, 16($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t6, 32($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 40($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 24($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 12($fp) 	#get type dir for Dynamic Call
	lw $t0, 12($t4) 	#Get method of index 3
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 0($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, -4($fp) 	#Typeof
	lw $t9, -4($t0) 	#
	sw $t9, 64($fp) 	#Save type value in destination
	la $t4, data_11_eol 	#LOAD
	sw $t4, 72($fp) 	#Save loaded value in destination
	lw $t0, 72($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_12_under 	#LOAD
	sw $t3, 80($fp) 	#Save loaded value in destination
	lw $t9, 80($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 84($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t7, data_24_meth 	#LOAD
	sw $t7, 88($fp) 	#Save loaded value in destination
	lw $t0, 88($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 64($fp) 	#get type dir for Dynamic Call
	lw $t9, 4($t6) 	#Get method of index 1
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 84($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 92($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 76($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 64($fp) 	#get type dir for Dynamic Call
	lw $t0, 24($t5) 	#Get method of index 6
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 60($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t9, -4($fp) 	#Typeof
	lw $t8, -4($t9) 	#
	sw $t8, 96($fp) 	#Save type value in destination
	la $t3, data_11_eol 	#LOAD
	sw $t3, 104($fp) 	#Save loaded value in destination
	lw $t0, 104($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_12_under 	#LOAD
	sw $t3, 112($fp) 	#Save loaded value in destination
	lw $t3, 112($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t8, data_25_meth 	#LOAD
	sw $t8, 120($fp) 	#Save loaded value in destination
	lw $t5, 120($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 96($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t7) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t8, 16($fp) 	#
	lw $a0, 0($t8) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t9, 116($fp) 	#
	lw $a0, 0($t9) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 124($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t5, 108($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	lw $t7, -4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 60($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 96($fp) 	#get type dir for Dynamic Call
	lw $t6, 28($t0) 	#Get method of index 7
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 56($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 56($fp) 	#Typeof
	lw $t0, -4($t1) 	#
	sw $t0, 128($fp) 	#Save type value in destination
	la $t7, data_11_eol 	#LOAD
	sw $t7, 136($fp) 	#Save loaded value in destination
	lw $t8, 136($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t9, data_12_under 	#LOAD
	sw $t9, 144($fp) 	#Save loaded value in destination
	lw $t8, 144($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t2, data_16_meth 	#LOAD
	sw $t2, 152($fp) 	#Save loaded value in destination
	lw $t0, 152($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 128($fp) 	#get type dir for Dynamic Call
	lw $t1, 4($t5) 	#Get method of index 1
	jalr $t1 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t4, 16($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 148($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t7, 156($fp) 	#
	lw $a0, 0($t7) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 140($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t9, 56($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 128($fp) 	#get type dir for Dynamic Call
	lw $t9, 44($t1) 	#Get method of index 11
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 52($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 52($fp) 	#Typeof
	lw $t3, -4($t0) 	#
	sw $t3, 160($fp) 	#Save type value in destination
	la $t4, data_11_eol 	#LOAD
	sw $t4, 168($fp) 	#Save loaded value in destination
	lw $t1, 168($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_12_under 	#LOAD
	sw $t3, 176($fp) 	#Save loaded value in destination
	lw $t1, 176($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 180($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t1, data_18_meth 	#LOAD
	sw $t1, 184($fp) 	#Save loaded value in destination
	lw $t3, 184($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 160($fp) 	#get type dir for Dynamic Call
	lw $t3, 4($t4) 	#Get method of index 1
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t2, 16($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t1, 180($fp) 	#
	lw $a0, 0($t1) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t3, 188($fp) 	#
	lw $a0, 0($t3) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t0, 172($fp) 	#
	lw $a0, 0($t0) 	#
	syscall 	#
	lw $t0, 52($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 160($fp) 	#get type dir for Dynamic Call
	lw $t7, 48($t8) 	#Get method of index 12
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t3, 48($fp) 	#Typeof
	lw $t9, -4($t3) 	#
	sw $t9, 192($fp) 	#Save type value in destination
	la $t8, data_11_eol 	#LOAD
	sw $t8, 200($fp) 	#Save loaded value in destination
	lw $t7, 200($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t6, data_12_under 	#LOAD
	sw $t6, 208($fp) 	#Save loaded value in destination
	lw $t9, 208($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 212($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	la $t3, data_22_meth 	#LOAD
	sw $t3, 216($fp) 	#Save loaded value in destination
	lw $t7, 216($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 220($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 192($fp) 	#get type dir for Dynamic Call
	lw $t6, 4($t3) 	#Get method of index 1
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, 0 	#Remove Args from Stack
	li $v0, 4 	#PRINT
	lw $t5, 16($fp) 	#
	lw $a0, 0($t5) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 212($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t4, 220($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 4 	#PRINT
	lw $t2, 204($fp) 	#
	lw $a0, 0($t2) 	#
	syscall 	#
	lw $t2, 48($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 192($fp) 	#get type dir for Dynamic Call
	lw $t0, 60($t4) 	#Get method of index 15
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 44($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t1, 44($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -224 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
