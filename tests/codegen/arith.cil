.TYPE

type Object{
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
}
type IO{
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method IO.init ;
	method IO.out_string ;
	method IO.out_int ;
	method IO.in_string ;
	method IO.in_int ;
}
type Int{
	attribute int ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method Int.init ;
}
type Bool{
	attribute bool ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method Bool.init ;
}
type String{
	attribute len ;
	attribute str ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method String.init ;
	method String.length ;
	method String.concat ;
	method String.substr ;
}
type A{
	attribute var ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method A.value ;
	method A.set_var ;
	method A.method1 ;
	method A.method2 ;
	method A.method3 ;
	method A.method4 ;
	method A.method5 ;
}
type B{
	attribute var ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method A.value ;
	method A.set_var ;
	method A.method1 ;
	method A.method2 ;
	method A.method3 ;
	method A.method4 ;
	method A.method5 ;
	method B.method5 ;
}
type C{
	attribute var ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method A.value ;
	method A.set_var ;
	method A.method1 ;
	method A.method2 ;
	method A.method3 ;
	method A.method4 ;
	method A.method5 ;
	method B.method5 ;
	method C.method6 ;
	method C.method5 ;
}
type D{
	attribute var ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method A.value ;
	method A.set_var ;
	method A.method1 ;
	method A.method2 ;
	method A.method3 ;
	method A.method4 ;
	method A.method5 ;
	method B.method5 ;
	method D.method7 ;
}
type E{
	attribute var ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method A.value ;
	method A.set_var ;
	method A.method1 ;
	method A.method2 ;
	method A.method3 ;
	method A.method4 ;
	method A.method5 ;
	method B.method5 ;
	method D.method7 ;
	method E.method6 ;
}
type A2I{
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method A2I.c2i ;
	method A2I.i2c ;
	method A2I.a2i ;
	method A2I.a2i_aux ;
	method A2I.i2a ;
	method A2I.i2a_aux ;
}
type Main{
	attribute char ;
	attribute avar ;
	attribute a_var ;
	attribute flag ;
	method Object.init ;
	method Object.copy ;
	method Object.abort ;
	method Object.type_name ;
	method IO.init ;
	method IO.out_string ;
	method IO.out_int ;
	method IO.in_string ;
	method IO.in_int ;
	method Main.menu ;
	method Main.prompt ;
	method Main.get_int ;
	method Main.is_even ;
	method Main.class_type ;
	method Main.print ;
	method Main.main ;
}

.DATA


.CODE

function main {
	LOCAL main_add ;
	LOCAL main_return ;
	main_add = ALLOCATE Main ;
	ARG main_add ;
	main_return = VCALL Main Main.main ;
	RETURN main_return ;
}
function Object.init {
	PARAM self ;
	RETURN self ;
}
function IO.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL Object.init ;
	RETURN self ;
}
function Int.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL Object.init ;
	RETURN self ;
}
function Bool.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL Object.init ;
	RETURN self ;
}
function String.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL Object.init ;
	RETURN self ;
}
function A.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL Object.init ;
	SETATTR self var 3 ;
	RETURN self ;
}
function B.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL A.init ;
	RETURN self ;
}
function C.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL B.init ;
	RETURN self ;
}
function D.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL B.init ;
	RETURN self ;
}
function E.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL D.init ;
	RETURN self ;
}
function A2I.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL Object.init ;
	RETURN self ;
}
function Main.init {
	PARAM self ;
	LOCAL local_0 ;
	local_0 = CALL IO.init ;
	SETATTR self flag 3 ;
	RETURN self ;
}
