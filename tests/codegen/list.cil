.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type List {
    method Object_abort;
    method List_type_name;
    method List_copy;
    method List_isNil;
    method List_head;
    method List_tail;
    method List_cons;
  }
  type Cons {
    attribute car;
    attribute cdr;
    method Object_abort;
    method Cons_type_name;
    method Cons_copy;
    method Cons_isNil;
    method Cons_head;
    method Cons_tail;
    method List_cons;
    method Cons_init;
  }
  type Main {
    attribute mylist;
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_print_list;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_List = "List";
  data_7_type_name_Cons = "Cons";
  data_8_type_name_Main = "Main";
  data_9_string = " ";
  data_10_string = "\n";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function List_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_List;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function List_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE List;
    RETURN local_copy;
  }

  function Cons_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_Cons;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Cons_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Cons;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Main;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_self;
    PARAM param_int;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_length = length(local_str_attr)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_self_str_attr;
    LOCAL local_other_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_6;

    local_self_str_attr = GETATTR param_self 0;
    local_other_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_other_str_attr)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(local_self_str_attr, local_other_str_attr, local_concat_len)
    ARG local_concat;
    local_6 = CALL String___init;
    RETURN local_6;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_i_local;
    LOCAL local_l_local;
    LOCAL local_substr;
    LOCAL local_4;

    local_self_str_local = GETATTR param_self 0;
    local_i_local = GETATTR param_i 0;
    local_l_local = GETATTR param_l 0;
    local_substr = substr(local_self_str_local, local_i_local, local_l_local)
    ARG local_substr;
    local_4 = CALL String___init;
    RETURN local_4;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function List___init {

    LOCAL local_self;

    local_self = ALLOCATE List;
    RETURN local_self;
  }

  function List_isNil {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 1;
    ARG local_0;
    local_1 = CALL Bool___init;
    RETURN local_1;
  }

  function List_head {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 0;
    local_2 = LOAD 0;
    ARG local_2;
    local_3 = CALL Int___init;
    RETURN local_3;
  }

  function List_tail {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 0;
    RETURN param_self;
  }

  function List_cons {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;

    local_1 = CALL Cons___init;
    local_2 = TYPEOF local_1;
    ARG local_1;
    ARG param_i;
    ARG param_self;
    local_0 = VCALL local_2 7;
    RETURN local_0;
  }

  function Cons___init {

    LOCAL local_self;
    LOCAL local_car;
    LOCAL local_cdr;

    local_self = ALLOCATE Cons;
    ARG local_self;
    local_car = CALL Cons_car___init;
    SETATTR local_self 0 local_car;
    ARG local_self;
    local_cdr = CALL Cons_cdr___init;
    SETATTR local_self 1 local_cdr;
    RETURN local_self;
  }

  function Cons_car___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Cons_cdr___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Void___init;
    RETURN local_0;
  }

  function Cons_isNil {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Bool___init;
    RETURN local_1;
  }

  function Cons_head {
    PARAM param_self;

    LOCAL local_car;

    local_car = GETATTR param_self 0;
    RETURN local_car;
  }

  function Cons_tail {
    PARAM param_self;

    LOCAL local_cdr;

    local_cdr = GETATTR param_self 1;
    RETURN local_cdr;
  }

  function Cons_init {
    PARAM param_self;
    PARAM param_i;
    PARAM param_rest;


    SETATTR param_self 0 param_i;
    SETATTR param_self 1 param_rest;
    RETURN param_self;
  }

  function Main___init {

    LOCAL local_self;
    LOCAL local_mylist;

    local_self = ALLOCATE Main;
    ARG local_self;
    local_mylist = CALL Main_mylist___init;
    SETATTR local_self 0 local_mylist;
    RETURN local_self;
  }

  function Main_mylist___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Void___init;
    RETURN local_0;
  }

  function Main_print_list {
    PARAM param_self;
    PARAM param_l;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;

    local_2 = TYPEOF param_l;
    ARG param_l;
    local_1 = VCALL local_2 3;
    local_3 = GETATTR local_1 0;
    IF local_3 > 0 GOTO label_then_0;
    LABEL label_else_0;
    local_6 = TYPEOF param_l;
    ARG param_l;
    local_5 = VCALL local_6 4;
    local_7 = TYPEOF param_self;
    ARG param_self;
    ARG local_5;
    local_4 = VCALL local_7 4;
    local_9 = LOAD data_9_string;
    ARG local_9;
    local_10 = CALL String___init;
    local_11 = TYPEOF param_self;
    ARG param_self;
    ARG local_10;
    local_8 = VCALL local_11 3;
    local_14 = TYPEOF param_l;
    ARG param_l;
    local_13 = VCALL local_14 5;
    local_15 = TYPEOF param_self;
    ARG param_self;
    ARG local_13;
    local_12 = VCALL local_15 7;
    local_0 = local_12;
    GOTO label_continue_0;
    LABEL label_then_0;
    local_17 = LOAD data_10_string;
    ARG local_17;
    local_18 = CALL String___init;
    local_19 = TYPEOF param_self;
    ARG param_self;
    ARG local_18;
    local_16 = VCALL local_19 3;
    local_0 = local_16;
    LABEL label_continue_0;
    RETURN local_0;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_mylist;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;

    local_5 = CALL List___init;
    local_6 = LOAD 1;
    ARG local_6;
    local_7 = CALL Int___init;
    local_8 = TYPEOF local_5;
    ARG local_5;
    ARG local_7;
    local_4 = VCALL local_8 6;
    local_9 = LOAD 2;
    ARG local_9;
    local_10 = CALL Int___init;
    local_11 = TYPEOF local_4;
    ARG local_4;
    ARG local_10;
    local_3 = VCALL local_11 6;
    local_12 = LOAD 3;
    ARG local_12;
    local_13 = CALL Int___init;
    local_14 = TYPEOF local_3;
    ARG local_3;
    ARG local_13;
    local_2 = VCALL local_14 6;
    local_15 = LOAD 4;
    ARG local_15;
    local_16 = CALL Int___init;
    local_17 = TYPEOF local_2;
    ARG local_2;
    ARG local_16;
    local_1 = VCALL local_17 6;
    local_18 = LOAD 5;
    ARG local_18;
    local_19 = CALL Int___init;
    local_20 = TYPEOF local_1;
    ARG local_1;
    ARG local_19;
    local_0 = VCALL local_20 6;
    SETATTR param_self 0 local_0;
    LABEL label_while_label_0;
    local_mylist = GETATTR param_self 0;
    local_25 = TYPEOF local_mylist;
    ARG local_mylist;
    local_23 = VCALL local_25 3;
    local_22 = GETATTR local_23 0;
    local_26 = LOAD 1;
    local_21 = local_26 - local_22
    ARG local_21;
    local_27 = CALL Bool___init;
    local_28 = GETATTR local_27 0;
    IF local_28 > 0 GOTO label_loop_label_0;
    GOTO label_pool_label_0;
    LABEL label_loop_label_0;
    local_30 = TYPEOF param_self;
    ARG param_self;
    ARG local_mylist;
    local_29 = VCALL local_30 7;
    local_32 = TYPEOF local_mylist;
    ARG local_mylist;
    local_31 = VCALL local_32 5;
    local_mylist = local_31;
    GOTO label_while_label_0;
    LABEL label_pool_label_0;
    local_33 = CALL Void___init;
    RETURN local_33;
  }

