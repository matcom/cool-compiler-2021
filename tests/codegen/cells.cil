.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type CellularAutomaton {
    attribute population_map;
    method Object_abort;
    method CellularAutomaton_type_name;
    method CellularAutomaton_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method CellularAutomaton_init;
    method CellularAutomaton_print;
    method CellularAutomaton_num_cells;
    method CellularAutomaton_cell;
    method CellularAutomaton_cell_left_neighbor;
    method CellularAutomaton_cell_right_neighbor;
    method CellularAutomaton_cell_at_next_evolution;
    method CellularAutomaton_evolve;
  }
  type Main {
    attribute cells;
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_CellularAutomaton = "CellularAutomaton";
  data_7_type_name_Main = "Main";
  data_8_default_str = "";
  data_9_string = "\n";
  data_10_string = "X";
  data_11_string = ".";
  data_12_string = "         X         ";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function CellularAutomaton_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_CellularAutomaton;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function CellularAutomaton_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE CellularAutomaton;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Main;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_self;
    PARAM param_int;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_length = length(local_str_attr)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_self_str_attr;
    LOCAL local_other_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_6;

    local_self_str_attr = GETATTR param_self 0;
    local_other_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_other_str_attr)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(local_self_str_attr, local_other_str_attr, local_concat_len)
    ARG local_concat;
    local_6 = CALL String___init;
    RETURN local_6;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_i_local;
    LOCAL local_l_local;
    LOCAL local_substr;
    LOCAL local_4;

    local_self_str_local = GETATTR param_self 0;
    local_i_local = GETATTR param_i 0;
    local_l_local = GETATTR param_l 0;
    local_substr = substr(local_self_str_local, local_i_local, local_l_local)
    ARG local_substr;
    local_4 = CALL String___init;
    RETURN local_4;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function CellularAutomaton___init {

    LOCAL local_self;
    LOCAL local_population_map;

    local_self = ALLOCATE CellularAutomaton;
    ARG local_self;
    local_population_map = CALL CellularAutomaton_population_map___init;
    SETATTR local_self 0 local_population_map;
    RETURN local_self;
  }

  function CellularAutomaton_population_map___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_default_str;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function CellularAutomaton_init {
    PARAM param_self;
    PARAM param_map;


    SETATTR param_self 0 param_map;
    RETURN param_self;
  }

  function CellularAutomaton_print {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_population_map;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;

    local_population_map = GETATTR param_self 0;
    local_3 = LOAD data_9_string;
    ARG local_3;
    local_4 = CALL String___init;
    local_5 = TYPEOF local_population_map;
    ARG local_population_map;
    ARG local_4;
    local_1 = VCALL local_5 4;
    local_6 = TYPEOF param_self;
    ARG param_self;
    ARG local_1;
    local_0 = VCALL local_6 3;
    RETURN param_self;
  }

  function CellularAutomaton_num_cells {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_population_map;
    LOCAL local_2;

    local_population_map = GETATTR param_self 0;
    local_2 = TYPEOF local_population_map;
    ARG local_population_map;
    local_0 = VCALL local_2 3;
    RETURN local_0;
  }

  function CellularAutomaton_cell {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_population_map;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;

    local_population_map = GETATTR param_self 0;
    local_2 = LOAD 1;
    ARG local_2;
    local_3 = CALL Int___init;
    local_4 = TYPEOF local_population_map;
    ARG local_population_map;
    ARG param_position;
    ARG local_3;
    local_0 = VCALL local_4 5;
    RETURN local_0;
  }

  function CellularAutomaton_cell_left_neighbor {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;

    local_1 = GETATTR param_position 0;
    local_2 = LOAD 0;
    ARG local_2;
    local_3 = CALL Int___init;
    local_4 = GETATTR local_3 0;
    local_5 = local_1 - local_4
    IF local_5 = 0 GOTO label_then_1;
    LABEL label_else_1;
    local_7 = LOAD 0;
    ARG local_7;
    local_8 = CALL Bool___init;
    local_6 = local_8;
    GOTO label_continue_1;
    LABEL label_then_1;
    local_9 = LOAD 1;
    ARG local_9;
    local_10 = CALL Bool___init;
    local_6 = local_10;
    LABEL label_continue_1;
    local_11 = GETATTR local_6 0;
    IF local_11 > 0 GOTO label_then_0;
    LABEL label_else_0;
    local_13 = GETATTR param_position 0;
    local_14 = LOAD 1;
    ARG local_14;
    local_15 = CALL Int___init;
    local_16 = GETATTR local_15 0;
    local_17 = local_13 - local_16
    ARG local_17;
    local_18 = CALL Int___init;
    local_19 = TYPEOF param_self;
    ARG param_self;
    ARG local_18;
    local_12 = VCALL local_19 10;
    local_0 = local_12;
    GOTO label_continue_0;
    LABEL label_then_0;
    local_22 = TYPEOF param_self;
    ARG param_self;
    local_21 = VCALL local_22 9;
    local_23 = GETATTR local_21 0;
    local_24 = LOAD 1;
    ARG local_24;
    local_25 = CALL Int___init;
    local_26 = GETATTR local_25 0;
    local_27 = local_23 - local_26
    ARG local_27;
    local_28 = CALL Int___init;
    local_29 = TYPEOF param_self;
    ARG param_self;
    ARG local_28;
    local_20 = VCALL local_29 10;
    local_0 = local_20;
    LABEL label_continue_0;
    RETURN local_0;
  }

  function CellularAutomaton_cell_right_neighbor {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;

    local_1 = GETATTR param_position 0;
    local_3 = TYPEOF param_self;
    ARG param_self;
    local_2 = VCALL local_3 9;
    local_4 = GETATTR local_2 0;
    local_5 = LOAD 1;
    ARG local_5;
    local_6 = CALL Int___init;
    local_7 = GETATTR local_6 0;
    local_8 = local_4 - local_7
    ARG local_8;
    local_9 = CALL Int___init;
    local_10 = GETATTR local_9 0;
    local_11 = local_1 - local_10
    IF local_11 = 0 GOTO label_then_3;
    LABEL label_else_3;
    local_13 = LOAD 0;
    ARG local_13;
    local_14 = CALL Bool___init;
    local_12 = local_14;
    GOTO label_continue_3;
    LABEL label_then_3;
    local_15 = LOAD 1;
    ARG local_15;
    local_16 = CALL Bool___init;
    local_12 = local_16;
    LABEL label_continue_3;
    local_17 = GETATTR local_12 0;
    IF local_17 > 0 GOTO label_then_2;
    LABEL label_else_2;
    local_19 = GETATTR param_position 0;
    local_20 = LOAD 1;
    ARG local_20;
    local_21 = CALL Int___init;
    local_22 = GETATTR local_21 0;
    local_23 = local_19 + local_22
    ARG local_23;
    local_24 = CALL Int___init;
    local_25 = TYPEOF param_self;
    ARG param_self;
    ARG local_24;
    local_18 = VCALL local_25 10;
    local_0 = local_18;
    GOTO label_continue_2;
    LABEL label_then_2;
    local_27 = LOAD 0;
    ARG local_27;
    local_28 = CALL Int___init;
    local_29 = TYPEOF param_self;
    ARG param_self;
    ARG local_28;
    local_26 = VCALL local_29 10;
    local_0 = local_26;
    LABEL label_continue_2;
    RETURN local_0;
  }

  function CellularAutomaton_cell_at_next_evolution {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;
    LOCAL local_51;
    LOCAL local_52;
    LOCAL local_53;
    LOCAL local_54;
    LOCAL local_55;
    LOCAL local_56;
    LOCAL local_57;
    LOCAL local_58;
    LOCAL local_59;
    LOCAL local_60;
    LOCAL local_61;
    LOCAL local_62;
    LOCAL local_63;
    LOCAL local_64;
    LOCAL local_65;

    local_3 = TYPEOF param_self;
    ARG param_self;
    ARG param_position;
    local_2 = VCALL local_3 10;
    local_4 = GETATTR local_2 0;
    local_5 = LOAD data_10_string;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = GETATTR local_6 0;
    local_8 = streq(local_4, local_7);
    ARG local_8;
    local_9 = CALL Bool___init;
    local_10 = GETATTR local_9 0;
    IF local_10 > 0 GOTO label_then_5;
    LABEL label_else_5;
    local_11 = LOAD 0;
    ARG local_11;
    local_12 = CALL Int___init;
    local_1 = local_12;
    GOTO label_continue_5;
    LABEL label_then_5;
    local_13 = LOAD 1;
    ARG local_13;
    local_14 = CALL Int___init;
    local_1 = local_14;
    LABEL label_continue_5;
    local_15 = GETATTR local_1 0;
    local_18 = TYPEOF param_self;
    ARG param_self;
    ARG param_position;
    local_17 = VCALL local_18 11;
    local_19 = GETATTR local_17 0;
    local_20 = LOAD data_10_string;
    ARG local_20;
    local_21 = CALL String___init;
    local_22 = GETATTR local_21 0;
    local_23 = streq(local_19, local_22);
    ARG local_23;
    local_24 = CALL Bool___init;
    local_25 = GETATTR local_24 0;
    IF local_25 > 0 GOTO label_then_6;
    LABEL label_else_6;
    local_26 = LOAD 0;
    ARG local_26;
    local_27 = CALL Int___init;
    local_16 = local_27;
    GOTO label_continue_6;
    LABEL label_then_6;
    local_28 = LOAD 1;
    ARG local_28;
    local_29 = CALL Int___init;
    local_16 = local_29;
    LABEL label_continue_6;
    local_30 = GETATTR local_16 0;
    local_31 = local_15 + local_30
    ARG local_31;
    local_32 = CALL Int___init;
    local_33 = GETATTR local_32 0;
    local_36 = TYPEOF param_self;
    ARG param_self;
    ARG param_position;
    local_35 = VCALL local_36 12;
    local_37 = GETATTR local_35 0;
    local_38 = LOAD data_10_string;
    ARG local_38;
    local_39 = CALL String___init;
    local_40 = GETATTR local_39 0;
    local_41 = streq(local_37, local_40);
    ARG local_41;
    local_42 = CALL Bool___init;
    local_43 = GETATTR local_42 0;
    IF local_43 > 0 GOTO label_then_7;
    LABEL label_else_7;
    local_44 = LOAD 0;
    ARG local_44;
    local_45 = CALL Int___init;
    local_34 = local_45;
    GOTO label_continue_7;
    LABEL label_then_7;
    local_46 = LOAD 1;
    ARG local_46;
    local_47 = CALL Int___init;
    local_34 = local_47;
    LABEL label_continue_7;
    local_48 = GETATTR local_34 0;
    local_49 = local_33 + local_48
    ARG local_49;
    local_50 = CALL Int___init;
    local_51 = GETATTR local_50 0;
    local_52 = LOAD 1;
    ARG local_52;
    local_53 = CALL Int___init;
    local_54 = GETATTR local_53 0;
    local_55 = local_51 - local_54
    IF local_55 = 0 GOTO label_then_8;
    LABEL label_else_8;
    local_57 = LOAD 0;
    ARG local_57;
    local_58 = CALL Bool___init;
    local_56 = local_58;
    GOTO label_continue_8;
    LABEL label_then_8;
    local_59 = LOAD 1;
    ARG local_59;
    local_60 = CALL Bool___init;
    local_56 = local_60;
    LABEL label_continue_8;
    local_61 = GETATTR local_56 0;
    IF local_61 > 0 GOTO label_then_4;
    LABEL label_else_4;
    local_62 = LOAD data_11_string;
    ARG local_62;
    local_63 = CALL String___init;
    local_0 = local_63;
    GOTO label_continue_4;
    LABEL label_then_4;
    local_64 = LOAD data_10_string;
    ARG local_64;
    local_65 = CALL String___init;
    local_0 = local_65;
    LABEL label_continue_4;
    RETURN local_0;
  }

  function CellularAutomaton_evolve {
    PARAM param_self;

    LOCAL local_position;
    LOCAL local_1;
    LOCAL local_num;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_temp;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;

    local_1 = LOAD 0;
    ARG local_1;
    local_position = CALL Int___init;
    local_4 = TYPEOF param_self;
    ARG param_self;
    local_3 = VCALL local_4 9;
    local_num = local_3;
    local_6 = LOAD data_8_default_str;
    ARG local_6;
    local_temp = CALL String___init;
    LABEL label_while_label_0;
    local_7 = GETATTR local_position 0;
    local_8 = GETATTR local_num 0;
    local_9 = local_7 - local_8
    IF local_9 < 0 GOTO label_then_9;
    LABEL label_else_9;
    local_11 = LOAD 0;
    ARG local_11;
    local_12 = CALL Bool___init;
    local_10 = local_12;
    GOTO label_continue_9;
    LABEL label_then_9;
    local_13 = LOAD 1;
    ARG local_13;
    local_14 = CALL Bool___init;
    local_10 = local_14;
    LABEL label_continue_9;
    local_15 = GETATTR local_10 0;
    IF local_15 > 0 GOTO label_loop_label_0;
    GOTO label_pool_label_0;
    LABEL label_loop_label_0;
    local_18 = TYPEOF param_self;
    ARG param_self;
    ARG local_position;
    local_17 = VCALL local_18 13;
    local_19 = TYPEOF local_temp;
    ARG local_temp;
    ARG local_17;
    local_16 = VCALL local_19 4;
    local_temp = local_16;
    local_20 = GETATTR local_position 0;
    local_21 = LOAD 1;
    ARG local_21;
    local_22 = CALL Int___init;
    local_23 = GETATTR local_22 0;
    local_24 = local_20 + local_23
    ARG local_24;
    local_25 = CALL Int___init;
    local_position = local_25;
    GOTO label_while_label_0;
    LABEL label_pool_label_0;
    local_26 = CALL Void___init;
    SETATTR param_self 0 local_temp;
    RETURN param_self;
  }

  function Main___init {

    LOCAL local_self;
    LOCAL local_cells;

    local_self = ALLOCATE Main;
    ARG local_self;
    local_cells = CALL Main_cells___init;
    SETATTR local_self 0 local_cells;
    RETURN local_self;
  }

  function Main_cells___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL Void___init;
    RETURN local_0;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_cells;
    LOCAL local_7;
    LOCAL local_countdown;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;

    local_1 = CALL CellularAutomaton___init;
    local_2 = LOAD data_12_string;
    ARG local_2;
    local_3 = CALL String___init;
    local_4 = TYPEOF local_1;
    ARG local_1;
    ARG local_3;
    local_0 = VCALL local_4 7;
    SETATTR param_self 0 local_0;
    local_cells = GETATTR param_self 0;
    local_7 = TYPEOF local_cells;
    ARG local_cells;
    local_5 = VCALL local_7 8;
    local_9 = LOAD 20;
    ARG local_9;
    local_10 = CALL Int___init;
    local_countdown = local_10;
    LABEL label_while_label_1;
    local_11 = LOAD 0;
    ARG local_11;
    local_12 = CALL Int___init;
    local_13 = GETATTR local_12 0;
    local_14 = GETATTR local_countdown 0;
    local_15 = local_13 - local_14
    IF local_15 < 0 GOTO label_then_10;
    LABEL label_else_10;
    local_17 = LOAD 0;
    ARG local_17;
    local_18 = CALL Bool___init;
    local_16 = local_18;
    GOTO label_continue_10;
    LABEL label_then_10;
    local_19 = LOAD 1;
    ARG local_19;
    local_20 = CALL Bool___init;
    local_16 = local_20;
    LABEL label_continue_10;
    local_21 = GETATTR local_16 0;
    IF local_21 > 0 GOTO label_loop_label_1;
    GOTO label_pool_label_1;
    LABEL label_loop_label_1;
    local_23 = TYPEOF local_cells;
    ARG local_cells;
    local_22 = VCALL local_23 14;
    local_25 = TYPEOF local_cells;
    ARG local_cells;
    local_24 = VCALL local_25 8;
    local_26 = GETATTR local_countdown 0;
    local_27 = LOAD 1;
    ARG local_27;
    local_28 = CALL Int___init;
    local_29 = GETATTR local_28 0;
    local_30 = local_26 - local_29
    ARG local_30;
    local_31 = CALL Int___init;
    local_countdown = local_31;
    GOTO label_while_label_1;
    LABEL label_pool_label_1;
    local_32 = CALL Void___init;
    RETURN param_self;
  }

