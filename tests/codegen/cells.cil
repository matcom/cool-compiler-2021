.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Object_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Object_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method Object_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type CellularAutomaton {
    attribute population_map;
    method Object_abort;
    method CellularAutomaton_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method CellularAutomaton_init;
    method CellularAutomaton_print;
    method CellularAutomaton_num_cells;
    method CellularAutomaton_cell;
    method CellularAutomaton_cell_left_neighbor;
    method CellularAutomaton_cell_right_neighbor;
    method CellularAutomaton_cell_at_next_evolution;
    method CellularAutomaton_evolve;
  }
  type Main {
    attribute cells;
    method Object_abort;
    method Main_type_name;
    method Object_copy;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_abort_msg = "Program Halted!";
  data_2_type_name_Object = "Object";
  data_3_type_name_Int = "Int";
  data_4_type_name_Bool = "Bool";
  data_5_type_name_String = "String";
  data_6_type_name_IO = "IO";
  data_7_type_name_CellularAutomaton = "CellularAutomaton";
  data_8_type_name_Main = "Main";
  data_9_string = "\n";
  data_10_string = "X";
  data_11_string = "X";
  data_12_string = "X";
  data_13_string = "X";
  data_14_string = ".";
  data_15_string = "         X         ";

.code

  function Void_init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main_init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Object;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Int;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_Bool;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_String;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_IO;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function CellularAutomaton_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_CellularAutomaton;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_type_name_Main;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_out_string {
    PARAM param_str;
    PARAM param_self;


    print(str, param_str
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_length;
    LOCAL local_1;

    param_self = length(local_length)
    ARG local_length;
    local_1 = CALL Int_init;
    RETURN local_1;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_4;

    local_self_len = length(param_self)
    local_other_len = length(param_other)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_4 = CALL String_init;
    RETURN local_4;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_substr;

    local_substr = substr(param_self, param_i, param_l)
    RETURN local_substr;
  }

  function Object_init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function CellularAutomaton_init {

    LOCAL local_self;
    LOCAL local_population_map;

    local_self = ALLOCATE CellularAutomaton;
    local_population_map = CALL CellularAutomaton_population_map_init;
    SETATTR local_self 0 local_population_map;
    RETURN local_self;
  }

  function CellularAutomaton_population_map_init {

    LOCAL local_0;

    local_0 = CALL Void_init;
    RETURN local_0;
  }

  function CellularAutomaton_init {
    PARAM param_self;
    PARAM param_map;

    LOCAL local_population_map;

    SETATTR param_self 0 local_population_map;
    RETURN param_self;
  }

  function CellularAutomaton_print {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_population_map;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;

    local_population_map = GETATTR param_self 0;
    local_3 = LOAD data_9_string;
    ARG local_3;
    local_4 = CALL String_init;
    local_5 = TYPEOF local_population_map;
    ARG local_population_map;
    ARG local_4;
    local_1 = VCALL local_5 4;
    local_6 = TYPEOF param_self;
    ARG param_self;
    ARG local_1;
    local_0 = VCALL local_6 3;
    RETURN param_self;
  }

  function CellularAutomaton_num_cells {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_population_map;
    LOCAL local_2;

    local_population_map = GETATTR param_self 0;
    local_2 = TYPEOF local_population_map;
    ARG local_population_map;
    local_0 = VCALL local_2 3;
    RETURN local_0;
  }

  function CellularAutomaton_cell {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_population_map;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;

    local_population_map = GETATTR param_self 0;
    local_2 = LOAD 1;
    ARG local_2;
    local_3 = CALL Int_init;
    local_4 = TYPEOF local_population_map;
    ARG local_population_map;
    ARG param_position;
    ARG local_3;
    local_0 = VCALL local_4 5;
    RETURN local_0;
  }

  function CellularAutomaton_cell_left_neighbor {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;

    local_1 = GETATTR param_position 0;
    local_2 = LOAD 0;
    ARG local_2;
    local_3 = CALL Int_init;
    local_4 = GETATTR local_3 0;
    local_5 = local_1 - local_4
    local_6 = LOAD 1;
    local_5 = local_6 - local_5
    ARG local_5;
    local_7 = CALL Bool_init;
    IF local_7 GOTO label_then_0;
    GOTO label_else_0;
    LABEL label_then_0;
    local_10 = TYPEOF param_self;
    ARG param_self;
    local_9 = VCALL local_10 9;
    local_11 = GETATTR local_9 0;
    local_12 = LOAD 1;
    ARG local_12;
    local_13 = CALL Int_init;
    local_14 = GETATTR local_13 0;
    local_15 = local_11 - local_14
    local_16 = TYPEOF param_self;
    ARG param_self;
    ARG local_15;
    local_8 = VCALL local_16 10;
    GOTO label_continue_0;
    LABEL label_else_0;
    local_18 = GETATTR param_position 0;
    local_19 = LOAD 1;
    ARG local_19;
    local_20 = CALL Int_init;
    local_21 = GETATTR local_20 0;
    local_22 = local_18 - local_21
    local_23 = TYPEOF param_self;
    ARG param_self;
    ARG local_22;
    local_17 = VCALL local_23 10;
    LABEL label_continue_0;
    RETURN local_0;
  }

  function CellularAutomaton_cell_right_neighbor {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;

    local_1 = GETATTR param_position 0;
    local_3 = TYPEOF param_self;
    ARG param_self;
    local_2 = VCALL local_3 9;
    local_4 = GETATTR local_2 0;
    local_5 = LOAD 1;
    ARG local_5;
    local_6 = CALL Int_init;
    local_7 = GETATTR local_6 0;
    local_8 = local_4 - local_7
    local_9 = GETATTR local_8 0;
    local_10 = local_1 - local_9
    local_11 = LOAD 1;
    local_10 = local_11 - local_10
    ARG local_10;
    local_12 = CALL Bool_init;
    IF local_12 GOTO label_then_1;
    GOTO label_else_1;
    LABEL label_then_1;
    local_14 = LOAD 0;
    ARG local_14;
    local_15 = CALL Int_init;
    local_16 = TYPEOF param_self;
    ARG param_self;
    ARG local_15;
    local_13 = VCALL local_16 10;
    GOTO label_continue_1;
    LABEL label_else_1;
    local_18 = GETATTR param_position 0;
    local_19 = LOAD 1;
    ARG local_19;
    local_20 = CALL Int_init;
    local_21 = GETATTR local_20 0;
    local_22 = local_18 + local_21
    local_23 = TYPEOF param_self;
    ARG param_self;
    ARG local_22;
    local_17 = VCALL local_23 10;
    LABEL label_continue_1;
    RETURN local_0;
  }

  function CellularAutomaton_cell_at_next_evolution {
    PARAM param_self;
    PARAM param_position;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;
    LOCAL local_51;
    LOCAL local_52;
    LOCAL local_53;
    LOCAL local_54;
    LOCAL local_55;
    LOCAL local_56;
    LOCAL local_57;
    LOCAL local_58;
    LOCAL local_59;

    local_3 = TYPEOF param_self;
    ARG param_self;
    ARG param_position;
    local_2 = VCALL local_3 10;
    local_4 = GETATTR local_2 0;
    local_5 = LOAD data_10_string;
    ARG local_5;
    local_6 = CALL String_init;
    local_7 = GETATTR local_6 0;
    local_8 = local_4 - local_7
    local_9 = LOAD 1;
    local_8 = local_9 - local_8
    ARG local_8;
    local_10 = CALL Bool_init;
    IF local_10 GOTO label_then_3;
    GOTO label_else_3;
    LABEL label_then_3;
    local_11 = LOAD 1;
    ARG local_11;
    local_12 = CALL Int_init;
    GOTO label_continue_3;
    LABEL label_else_3;
    local_13 = LOAD 0;
    ARG local_13;
    local_14 = CALL Int_init;
    LABEL label_continue_3;
    local_15 = GETATTR local_1 0;
    local_18 = TYPEOF param_self;
    ARG param_self;
    ARG param_position;
    local_17 = VCALL local_18 11;
    local_19 = GETATTR local_17 0;
    local_20 = LOAD data_11_string;
    ARG local_20;
    local_21 = CALL String_init;
    local_22 = GETATTR local_21 0;
    local_23 = local_19 - local_22
    local_24 = LOAD 1;
    local_23 = local_24 - local_23
    ARG local_23;
    local_25 = CALL Bool_init;
    IF local_25 GOTO label_then_4;
    GOTO label_else_4;
    LABEL label_then_4;
    local_26 = LOAD 1;
    ARG local_26;
    local_27 = CALL Int_init;
    GOTO label_continue_4;
    LABEL label_else_4;
    local_28 = LOAD 0;
    ARG local_28;
    local_29 = CALL Int_init;
    LABEL label_continue_4;
    local_30 = GETATTR local_16 0;
    local_31 = local_15 + local_30
    local_32 = GETATTR local_31 0;
    local_35 = TYPEOF param_self;
    ARG param_self;
    ARG param_position;
    local_34 = VCALL local_35 12;
    local_36 = GETATTR local_34 0;
    local_37 = LOAD data_12_string;
    ARG local_37;
    local_38 = CALL String_init;
    local_39 = GETATTR local_38 0;
    local_40 = local_36 - local_39
    local_41 = LOAD 1;
    local_40 = local_41 - local_40
    ARG local_40;
    local_42 = CALL Bool_init;
    IF local_42 GOTO label_then_5;
    GOTO label_else_5;
    LABEL label_then_5;
    local_43 = LOAD 1;
    ARG local_43;
    local_44 = CALL Int_init;
    GOTO label_continue_5;
    LABEL label_else_5;
    local_45 = LOAD 0;
    ARG local_45;
    local_46 = CALL Int_init;
    LABEL label_continue_5;
    local_47 = GETATTR local_33 0;
    local_48 = local_32 + local_47
    local_49 = GETATTR local_48 0;
    local_50 = LOAD 1;
    ARG local_50;
    local_51 = CALL Int_init;
    local_52 = GETATTR local_51 0;
    local_53 = local_49 - local_52
    local_54 = LOAD 1;
    local_53 = local_54 - local_53
    ARG local_53;
    local_55 = CALL Bool_init;
    IF local_55 GOTO label_then_2;
    GOTO label_else_2;
    LABEL label_then_2;
    local_56 = LOAD data_13_string;
    ARG local_56;
    local_57 = CALL String_init;
    GOTO label_continue_2;
    LABEL label_else_2;
    local_58 = LOAD data_14_string;
    ARG local_58;
    local_59 = CALL String_init;
    LABEL label_continue_2;
    RETURN local_0;
  }

  function CellularAutomaton_evolve {
    PARAM param_self;

    LOCAL local_position;
    LOCAL local_num;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_temp;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_population_map;

    local_position = CALL Void_init;
    local_3 = TYPEOF param_self;
    ARG param_self;
    local_2 = VCALL local_3 9;
    local_temp = CALL Void_init;
    LABEL label_while_label_0;
    local_5 = GETATTR local_position 0;
    local_6 = GETATTR local_num 0;
    local_7 = local_6 - local_5
    ARG local_7;
    local_8 = CALL Bool_init;
    IF local_8 GOTO label_loop_label_0;
    GOTO label_pool_label_0;
    LABEL label_loop_label_0;
    local_11 = TYPEOF param_self;
    ARG param_self;
    ARG local_position;
    local_10 = VCALL local_11 13;
    local_12 = TYPEOF local_temp;
    ARG local_temp;
    ARG local_10;
    local_9 = VCALL local_12 4;
    local_13 = GETATTR local_position 0;
    local_14 = LOAD 1;
    ARG local_14;
    local_15 = CALL Int_init;
    local_16 = GETATTR local_15 0;
    local_17 = local_13 + local_16
    GOTO label_while_label_0;
    LABEL label_pool_label_0;
    SETATTR param_self 0 local_population_map;
    RETURN param_self;
  }

  function Main_init {

    LOCAL local_self;
    LOCAL local_cells;

    local_self = ALLOCATE Main;
    local_cells = CALL Main_cells_init;
    SETATTR local_self 0 local_cells;
    RETURN local_self;
  }

  function Main_cells_init {

    LOCAL local_0;

    local_0 = CALL Void_init;
    RETURN local_0;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_cells;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_countdown;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;

    local_1 = CALL CellularAutomaton_init;
    local_2 = LOAD data_15_string;
    ARG local_2;
    local_3 = CALL String_init;
    local_4 = TYPEOF local_1;
    ARG local_1;
    ARG local_3;
    local_0 = VCALL local_4 7;
    SETATTR param_self 0 local_cells;
    local_7 = TYPEOF local_cells;
    ARG local_cells;
    local_6 = VCALL local_7 8;
    local_9 = LOAD 20;
    ARG local_9;
    local_10 = CALL Int_init;
    LABEL label_while_label_1;
    local_11 = LOAD 0;
    ARG local_11;
    local_12 = CALL Int_init;
    local_13 = GETATTR local_12 0;
    local_14 = GETATTR local_countdown 0;
    local_15 = local_14 - local_13
    ARG local_15;
    local_16 = CALL Bool_init;
    IF local_16 GOTO label_loop_label_1;
    GOTO label_pool_label_1;
    LABEL label_loop_label_1;
    local_18 = TYPEOF local_cells;
    ARG local_cells;
    local_17 = VCALL local_18 14;
    local_20 = TYPEOF local_cells;
    ARG local_cells;
    local_19 = VCALL local_20 8;
    local_21 = GETATTR local_countdown 0;
    local_22 = LOAD 1;
    ARG local_22;
    local_23 = CALL Int_init;
    local_24 = GETATTR local_23 0;
    local_25 = local_21 - local_24
    GOTO label_while_label_1;
    LABEL label_pool_label_1;
    RETURN param_self;
  }

