.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Object_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Object_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method Object_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Main {
    method Object_abort;
    method Main_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_main;
    method Main_fib;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_abort_msg = "Program Halted!";
  data_2_type_name_Object = "Object";
  data_3_type_name_Int = "Int";
  data_4_type_name_Bool = "Bool";
  data_5_type_name_String = "String";
  data_6_type_name_IO = "IO";
  data_7_type_name_Main = "Main";
  data_8_string = "Enter n to find nth fibonacci number!\n";
  data_9_string = "\n";

.code

  function Void_init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main_init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Object;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Int;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_Bool;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_String;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_IO;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_Main;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_out_string {
    PARAM param_str;
    PARAM param_self;


    print(str, param_str
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_length;
    LOCAL local_1;

    param_self = length(local_length)
    ARG local_length;
    local_1 = CALL Int_init;
    RETURN local_1;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_4;

    local_self_len = length(param_self)
    local_other_len = length(param_other)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_4 = CALL String_init;
    RETURN local_4;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_substr;

    local_substr = substr(param_self, param_i, param_l)
    RETURN local_substr;
  }

  function Object_init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Main_init {

    LOCAL local_self;

    local_self = ALLOCATE Main;
    RETURN local_self;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;

    local_1 = LOAD data_8_string;
    ARG local_1;
    local_2 = CALL String_init;
    local_3 = TYPEOF param_self;
    ARG param_self;
    ARG local_2;
    local_0 = VCALL local_3 3;
    local_7 = TYPEOF param_self;
    ARG param_self;
    local_6 = VCALL local_7 6;
    local_8 = TYPEOF param_self;
    ARG param_self;
    ARG local_6;
    local_5 = VCALL local_8 8;
    local_9 = TYPEOF param_self;
    ARG param_self;
    ARG local_5;
    local_4 = VCALL local_9 4;
    local_11 = LOAD data_9_string;
    ARG local_11;
    local_12 = CALL String_init;
    local_13 = TYPEOF param_self;
    ARG param_self;
    ARG local_12;
    local_10 = VCALL local_13 3;
    RETURN local_10;
  }

  function Main_fib {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_a;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_b;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_c;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_i;

    local_1 = LOAD 1;
    ARG local_1;
    local_2 = CALL Int_init;
    local_4 = LOAD 0;
    ARG local_4;
    local_5 = CALL Int_init;
    local_7 = LOAD 0;
    ARG local_7;
    local_8 = CALL Int_init;
    LABEL label_while_label_0;
    local_10 = GETATTR param_i 0;
    local_11 = LOAD 0;
    ARG local_11;
    local_12 = CALL Int_init;
    local_13 = GETATTR local_12 0;
    local_14 = local_10 - local_13
    local_15 = LOAD 1;
    local_14 = local_15 - local_14
    ARG local_14;
    local_16 = CALL Bool_init;
    local_17 = LOAD 1;
    local_9 = local_17 - local_16
    ARG local_9;
    local_18 = CALL Bool_init;
    IF local_18 GOTO label_loop_label_0;
    GOTO label_pool_label_0;
    LABEL label_loop_label_0;
    local_19 = GETATTR local_a 0;
    local_20 = GETATTR local_b 0;
    local_21 = local_19 + local_20
    local_22 = GETATTR param_i 0;
    local_23 = LOAD 1;
    ARG local_23;
    local_24 = CALL Int_init;
    local_25 = GETATTR local_24 0;
    local_26 = local_22 - local_25
    GOTO label_while_label_0;
    LABEL label_pool_label_0;
    RETURN local_c;
  }

