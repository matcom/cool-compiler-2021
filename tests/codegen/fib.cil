.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Main {
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_main;
    method Main_fib;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_Main = "Main";
  data_7_sep_cat = " ++ ";
  data_8_string = "Enter n to find nth fibonacci number!\n";
  data_9_eol = "\n";
  data_10_under = "_";
  data_11_meth = "out_string";
  data_12_meth = "in_int";
  data_13_meth = "fib";
  data_14_meth = "out_int";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Main;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_str_attr = length(local_length)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_self_str_attr;
    LOCAL local_other_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_8;

    local_0 = LOAD data_7_sep_cat;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, param_self)
    print(str, local_1)
    print(str, param_other)
    local_self_str_attr = GETATTR param_self 0;
    local_other_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_other_str_attr)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(local_self_str_attr, local_other_str_attr, local_concat_len)
    ARG local_concat;
    local_8 = CALL String___init;
    RETURN local_8;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_i_local;
    LOCAL local_l_local;
    LOCAL local_substr;
    LOCAL local_4;

    local_self_str_local = GETATTR param_self 0;
    local_i_local = GETATTR param_i 0;
    local_l_local = GETATTR param_l 0;
    local_substr = substr(local_self_str_local, local_i_local, local_l_local)
    ARG local_substr;
    local_4 = CALL String___init;
    RETURN local_4;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Main___init {

    LOCAL local_self;

    local_self = ALLOCATE Main;
    RETURN local_self;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_tname_local;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_tname_local;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_tname_local;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_tname_local;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_tname_local;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;

    local_1 = LOAD data_8_string;
    ARG local_1;
    local_2 = CALL String___init;
    local_3 = TYPEOF param_self;
    local_5 = LOAD data_9_eol;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = LOAD data_10_under;
    ARG local_7;
    local_8 = CALL String___init;
    local_9 = LOAD data_11_meth;
    ARG local_9;
    local_10 = CALL String___init;
    local_tname_local = VCALL local_3 1;
    print(str, local_tname_local)
    print(str, local_8)
    print(str, local_10)
    print(str, local_6)
    ARG param_self;
    ARG local_2;
    local_0 = VCALL local_3 3;
    local_14 = TYPEOF param_self;
    local_16 = LOAD data_9_eol;
    ARG local_16;
    local_17 = CALL String___init;
    local_18 = LOAD data_10_under;
    ARG local_18;
    local_19 = CALL String___init;
    local_20 = LOAD data_12_meth;
    ARG local_20;
    local_21 = CALL String___init;
    local_tname_local = VCALL local_14 1;
    print(str, local_tname_local)
    print(str, local_19)
    print(str, local_21)
    print(str, local_17)
    ARG param_self;
    local_13 = VCALL local_14 6;
    local_22 = TYPEOF param_self;
    local_24 = LOAD data_9_eol;
    ARG local_24;
    local_25 = CALL String___init;
    local_26 = LOAD data_10_under;
    ARG local_26;
    local_27 = CALL String___init;
    local_28 = LOAD data_13_meth;
    ARG local_28;
    local_29 = CALL String___init;
    local_tname_local = VCALL local_22 1;
    print(str, local_tname_local)
    print(str, local_27)
    print(str, local_29)
    print(str, local_25)
    ARG param_self;
    ARG local_13;
    local_12 = VCALL local_22 8;
    local_30 = TYPEOF param_self;
    local_32 = LOAD data_9_eol;
    ARG local_32;
    local_33 = CALL String___init;
    local_34 = LOAD data_10_under;
    ARG local_34;
    local_35 = CALL String___init;
    local_36 = LOAD data_14_meth;
    ARG local_36;
    local_37 = CALL String___init;
    local_tname_local = VCALL local_30 1;
    print(str, local_tname_local)
    print(str, local_35)
    print(str, local_37)
    print(str, local_33)
    ARG param_self;
    ARG local_12;
    local_11 = VCALL local_30 4;
    local_39 = LOAD data_9_eol;
    ARG local_39;
    local_40 = CALL String___init;
    local_41 = TYPEOF param_self;
    local_43 = LOAD data_9_eol;
    ARG local_43;
    local_44 = CALL String___init;
    local_45 = LOAD data_10_under;
    ARG local_45;
    local_46 = CALL String___init;
    local_47 = LOAD data_11_meth;
    ARG local_47;
    local_48 = CALL String___init;
    local_tname_local = VCALL local_41 1;
    print(str, local_tname_local)
    print(str, local_46)
    print(str, local_48)
    print(str, local_44)
    ARG param_self;
    ARG local_40;
    local_38 = VCALL local_41 3;
    RETURN local_38;
  }

  function Main_fib {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_a;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_b;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_c;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;

    local_1 = LOAD 1;
    ARG local_1;
    local_2 = CALL Int___init;
    local_a = local_2;
    local_4 = LOAD 0;
    ARG local_4;
    local_5 = CALL Int___init;
    local_b = local_5;
    local_7 = LOAD 0;
    ARG local_7;
    local_8 = CALL Int___init;
    local_c = local_8;
    LABEL label_while_label_0;
    local_11 = GETATTR param_i 0;
    local_12 = LOAD 0;
    ARG local_12;
    local_13 = CALL Int___init;
    local_14 = GETATTR local_13 0;
    local_15 = local_11 - local_14
    local_15 = local_15 * local_15
    local_16 = LOAD 1;
    local_15 = local_16 - local_15
    ARG local_15;
    local_17 = CALL Bool___init;
    local_10 = GETATTR local_17 0;
    local_18 = LOAD 1;
    local_9 = local_18 - local_10
    ARG local_9;
    local_19 = CALL Bool___init;
    local_20 = GETATTR local_19 0;
    IF local_20 GOTO label_loop_label_0;
    GOTO label_pool_label_0;
    LABEL label_loop_label_0;
    local_21 = GETATTR local_a 0;
    local_22 = GETATTR local_b 0;
    local_23 = local_21 + local_22
    local_c = local_23;
    local_24 = GETATTR param_i 0;
    local_25 = LOAD 1;
    ARG local_25;
    local_26 = CALL Int___init;
    local_27 = GETATTR local_26 0;
    local_28 = local_24 - local_27
    param_i = local_28;
    local_b = local_a;
    local_a = local_c;
    GOTO label_while_label_0;
    LABEL label_pool_label_0;
    local_29 = CALL Void___init;
    RETURN local_c;
  }

