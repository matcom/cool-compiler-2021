.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Object_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Object_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method Object_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Main {
    method Object_abort;
    method Main_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_main;
  }
  type Complex {
    attribute x;
    attribute y;
    method Object_abort;
    method Complex_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Complex_init;
    method Complex_print;
    method Complex_reflect_0;
    method Complex_reflect_X;
    method Complex_reflect_Y;
    method Complex_equal;
    method Complex_x_value;
    method Complex_y_value;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_abort_msg = "Program Halted!";
  data_2_type_name_Object = "Object";
  data_3_type_name_Int = "Int";
  data_4_type_name_Bool = "Bool";
  data_5_type_name_String = "String";
  data_6_type_name_IO = "IO";
  data_7_type_name_Main = "Main";
  data_8_type_name_Complex = "Complex";
  data_9_string = "=)\n";
  data_10_string = "=(\n";
  data_11_string = "=)\n";
  data_12_string = "=(\n";
  data_13_string = "+";
  data_14_string = "I";

.code

  function Void_init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main_init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Object;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Int;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_Bool;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_String;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_IO;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_Main;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Complex_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_type_name_Complex;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_out_string {
    PARAM param_str;
    PARAM param_self;


    print(str, param_str
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_length;
    LOCAL local_1;

    param_self = length(local_length)
    ARG local_length;
    local_1 = CALL Int_init;
    RETURN local_1;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_4;

    local_self_len = length(param_self)
    local_other_len = length(param_other)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_4 = CALL String_init;
    RETURN local_4;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_substr;

    local_substr = substr(param_self, param_i, param_l)
    RETURN local_substr;
  }

  function Object_init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Main_init {

    LOCAL local_self;

    local_self = ALLOCATE Main;
    RETURN local_self;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_c;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;

    local_2 = CALL Complex_init;
    local_3 = LOAD 1;
    ARG local_3;
    local_4 = CALL Int_init;
    local_5 = LOAD 1;
    ARG local_5;
    local_6 = CALL Int_init;
    local_7 = TYPEOF local_2;
    ARG local_2;
    ARG local_4;
    ARG local_6;
    local_1 = VCALL local_7 7;
    local_10 = TYPEOF local_c;
    ARG local_c;
    local_9 = VCALL local_10 10;
    local_11 = GETATTR local_9 0;
    local_13 = TYPEOF local_c;
    ARG local_c;
    local_12 = VCALL local_13 9;
    local_14 = GETATTR local_12 0;
    local_15 = local_11 - local_14
    local_16 = LOAD 1;
    local_15 = local_16 - local_15
    ARG local_15;
    local_17 = CALL Bool_init;
    IF local_17 GOTO label_then_0;
    GOTO label_else_0;
    LABEL label_then_0;
    local_19 = LOAD data_9_string;
    ARG local_19;
    local_20 = CALL String_init;
    local_21 = TYPEOF param_self;
    ARG param_self;
    ARG local_20;
    local_18 = VCALL local_21 3;
    GOTO label_continue_0;
    LABEL label_else_0;
    local_23 = LOAD data_10_string;
    ARG local_23;
    local_24 = CALL String_init;
    local_25 = TYPEOF param_self;
    ARG param_self;
    ARG local_24;
    local_22 = VCALL local_25 3;
    LABEL label_continue_0;
    local_30 = TYPEOF local_c;
    ARG local_c;
    local_29 = VCALL local_30 10;
    local_31 = TYPEOF local_29;
    ARG local_29;
    local_28 = VCALL local_31 11;
    local_33 = TYPEOF local_c;
    ARG local_c;
    local_32 = VCALL local_33 9;
    local_34 = TYPEOF local_28;
    ARG local_28;
    ARG local_32;
    local_27 = VCALL local_34 12;
    IF local_27 GOTO label_then_1;
    GOTO label_else_1;
    LABEL label_then_1;
    local_36 = LOAD data_11_string;
    ARG local_36;
    local_37 = CALL String_init;
    local_38 = TYPEOF param_self;
    ARG param_self;
    ARG local_37;
    local_35 = VCALL local_38 3;
    GOTO label_continue_1;
    LABEL label_else_1;
    local_40 = LOAD data_12_string;
    ARG local_40;
    local_41 = CALL String_init;
    local_42 = TYPEOF param_self;
    ARG param_self;
    ARG local_41;
    local_39 = VCALL local_42 3;
    LABEL label_continue_1;
    RETURN local_26;
  }

  function Complex_init {

    LOCAL local_self;
    LOCAL local_x;
    LOCAL local_y;

    local_self = ALLOCATE Complex;
    local_x = CALL Complex_x_init;
    SETATTR local_self 0 local_x;
    local_y = CALL Complex_y_init;
    SETATTR local_self 1 local_y;
    RETURN local_self;
  }



  function Complex_init {
    PARAM param_self;
    PARAM param_a;
    PARAM param_b;

    LOCAL local_x;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_y;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;

    local_x = GETATTR param_self 0;
    local_1 = GETATTR local_x 0;
    local_2 = GETATTR param_a 0;
    local_3 = local_1 - local_2
    local_4 = LOAD 1;
    local_3 = local_4 - local_3
    ARG local_3;
    local_5 = CALL Bool_init;
    local_y = GETATTR param_self 1;
    local_7 = GETATTR local_y 0;
    local_8 = GETATTR param_b 0;
    local_9 = local_7 - local_8
    local_10 = LOAD 1;
    local_9 = local_10 - local_9
    ARG local_9;
    local_11 = CALL Bool_init;
    RETURN param_self;
  }

  function Complex_print {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_y;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_x;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;

    local_y = GETATTR param_self 1;
    local_2 = GETATTR local_y 0;
    local_3 = LOAD 0;
    ARG local_3;
    local_4 = CALL Int_init;
    local_5 = GETATTR local_4 0;
    local_6 = local_2 - local_5
    local_7 = LOAD 1;
    local_6 = local_7 - local_6
    ARG local_6;
    local_8 = CALL Bool_init;
    IF local_8 GOTO label_then_2;
    GOTO label_else_2;
    LABEL label_then_2;
    local_x = GETATTR param_self 0;
    local_11 = TYPEOF param_self;
    ARG param_self;
    ARG local_x;
    local_9 = VCALL local_11 4;
    GOTO label_continue_2;
    LABEL label_else_2;
    local_16 = TYPEOF param_self;
    ARG param_self;
    ARG local_x;
    local_15 = VCALL local_16 4;
    local_17 = LOAD data_13_string;
    ARG local_17;
    local_18 = CALL String_init;
    local_19 = TYPEOF local_15;
    ARG local_15;
    ARG local_18;
    local_14 = VCALL local_19 3;
    local_20 = TYPEOF local_14;
    ARG local_14;
    ARG local_y;
    local_13 = VCALL local_20 4;
    local_21 = LOAD data_14_string;
    ARG local_21;
    local_22 = CALL String_init;
    local_23 = TYPEOF local_13;
    ARG local_13;
    ARG local_22;
    local_12 = VCALL local_23 3;
    LABEL label_continue_2;
    RETURN local_0;
  }

  function Complex_reflect_0 {
    PARAM param_self;

    LOCAL local_x;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_y;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;

    local_x = GETATTR param_self 0;
    local_1 = GETATTR local_x 0;
    local_3 = LOAD 1;
    local_2 = local_3 - local_x
    local_4 = GETATTR local_2 0;
    local_5 = local_1 - local_4
    local_6 = LOAD 1;
    local_5 = local_6 - local_5
    ARG local_5;
    local_7 = CALL Bool_init;
    local_y = GETATTR param_self 1;
    local_9 = GETATTR local_y 0;
    local_11 = LOAD 1;
    local_10 = local_11 - local_y
    local_12 = GETATTR local_10 0;
    local_13 = local_9 - local_12
    local_14 = LOAD 1;
    local_13 = local_14 - local_13
    ARG local_13;
    local_15 = CALL Bool_init;
    RETURN param_self;
  }

  function Complex_reflect_X {
    PARAM param_self;

    LOCAL local_y;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;

    local_y = GETATTR param_self 1;
    local_1 = GETATTR local_y 0;
    local_3 = LOAD 1;
    local_2 = local_3 - local_y
    local_4 = GETATTR local_2 0;
    local_5 = local_1 - local_4
    local_6 = LOAD 1;
    local_5 = local_6 - local_5
    ARG local_5;
    local_7 = CALL Bool_init;
    RETURN param_self;
  }

  function Complex_reflect_Y {
    PARAM param_self;

    LOCAL local_x;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;

    local_x = GETATTR param_self 0;
    local_1 = GETATTR local_x 0;
    local_3 = LOAD 1;
    local_2 = local_3 - local_x
    local_4 = GETATTR local_2 0;
    local_5 = local_1 - local_4
    local_6 = LOAD 1;
    local_5 = local_6 - local_5
    ARG local_5;
    local_7 = CALL Bool_init;
    RETURN param_self;
  }

  function Complex_equal {
    PARAM param_self;
    PARAM param_d;

    LOCAL local_0;
    LOCAL local_x;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_y;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;

    local_x = GETATTR param_self 0;
    local_2 = GETATTR local_x 0;
    local_4 = TYPEOF param_d;
    ARG param_d;
    local_3 = VCALL local_4 13;
    local_5 = GETATTR local_3 0;
    local_6 = local_2 - local_5
    local_7 = LOAD 1;
    local_6 = local_7 - local_6
    ARG local_6;
    local_8 = CALL Bool_init;
    IF local_8 GOTO label_then_3;
    GOTO label_else_3;
    LABEL label_then_3;
    local_y = GETATTR param_self 1;
    local_11 = GETATTR local_y 0;
    local_13 = TYPEOF param_d;
    ARG param_d;
    local_12 = VCALL local_13 14;
    local_14 = GETATTR local_12 0;
    local_15 = local_11 - local_14
    local_16 = LOAD 1;
    local_15 = local_16 - local_15
    ARG local_15;
    local_17 = CALL Bool_init;
    IF local_17 GOTO label_then_4;
    GOTO label_else_4;
    LABEL label_then_4;
    local_18 = LOAD 1;
    ARG local_18;
    local_19 = CALL Bool_init;
    GOTO label_continue_4;
    LABEL label_else_4;
    local_20 = LOAD 0;
    ARG local_20;
    local_21 = CALL Bool_init;
    LABEL label_continue_4;
    GOTO label_continue_3;
    LABEL label_else_3;
    local_22 = LOAD 0;
    ARG local_22;
    local_23 = CALL Bool_init;
    LABEL label_continue_3;
    RETURN local_0;
  }

  function Complex_x_value {
    PARAM param_self;

    LOCAL local_x;

    local_x = GETATTR param_self 0;
    RETURN local_x;
  }

  function Complex_y_value {
    PARAM param_self;

    LOCAL local_y;

    local_y = GETATTR param_self 1;
    RETURN local_y;
  }

