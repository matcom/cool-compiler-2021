.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Main {
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_main;
  }
  type Complex {
    attribute x;
    attribute y;
    method Object_abort;
    method Complex_type_name;
    method Complex_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Complex_init;
    method Complex_print;
    method Complex_reflect_0;
    method Complex_reflect_X;
    method Complex_reflect_Y;
    method Complex_equal;
    method Complex_x_value;
    method Complex_y_value;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_Main = "Main";
  data_7_type_name_Complex = "Complex";
  data_8_string = "=(\n";
  data_9_string = "=)\n";
  data_10_string = "+";
  data_11_string = "I";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Main;
    RETURN local_copy;
  }

  function Complex_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_Complex;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Complex_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Complex;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_self;
    PARAM param_int;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_length = length(local_str_attr)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_self_str_attr;
    LOCAL local_other_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_6;

    local_self_str_attr = GETATTR param_self 0;
    local_other_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_other_str_attr)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(local_self_str_attr, local_other_str_attr, local_concat_len)
    ARG local_concat;
    local_6 = CALL String___init;
    RETURN local_6;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_i_local;
    LOCAL local_l_local;
    LOCAL local_substr;
    LOCAL local_4;

    local_self_str_local = GETATTR param_self 0;
    local_i_local = GETATTR param_i 0;
    local_l_local = GETATTR param_l 0;
    local_substr = substr(local_self_str_local, local_i_local, local_l_local)
    ARG local_substr;
    local_4 = CALL String___init;
    RETURN local_4;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function IO___init {

    LOCAL local_self;

    local_self = ALLOCATE IO;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Main___init {

    LOCAL local_self;

    local_self = ALLOCATE Main;
    RETURN local_self;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_c;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;

    local_2 = CALL Complex___init;
    local_3 = LOAD 1;
    ARG local_3;
    local_4 = CALL Int___init;
    local_5 = LOAD 1;
    ARG local_5;
    local_6 = CALL Int___init;
    local_7 = TYPEOF local_2;
    ARG local_2;
    ARG local_4;
    ARG local_6;
    local_1 = VCALL local_7 7;
    local_c = local_1;
    local_10 = TYPEOF local_c;
    ARG local_c;
    local_9 = VCALL local_10 10;
    local_11 = GETATTR local_9 0;
    local_13 = TYPEOF local_c;
    ARG local_c;
    local_12 = VCALL local_13 9;
    local_14 = GETATTR local_12 0;
    local_15 = local_11 - local_14
    IF local_15 = 0 GOTO label_then_1;
    LABEL label_else_1;
    local_17 = LOAD 0;
    ARG local_17;
    local_18 = CALL Bool___init;
    local_16 = local_18;
    GOTO label_continue_1;
    LABEL label_then_1;
    local_19 = LOAD 1;
    ARG local_19;
    local_20 = CALL Bool___init;
    local_16 = local_20;
    LABEL label_continue_1;
    local_21 = GETATTR local_16 0;
    IF local_21 > 0 GOTO label_then_0;
    LABEL label_else_0;
    local_23 = LOAD data_8_string;
    ARG local_23;
    local_24 = CALL String___init;
    local_25 = TYPEOF param_self;
    ARG param_self;
    ARG local_24;
    local_22 = VCALL local_25 3;
    local_8 = local_22;
    GOTO label_continue_0;
    LABEL label_then_0;
    local_27 = LOAD data_9_string;
    ARG local_27;
    local_28 = CALL String___init;
    local_29 = TYPEOF param_self;
    ARG param_self;
    ARG local_28;
    local_26 = VCALL local_29 3;
    local_8 = local_26;
    LABEL label_continue_0;
    local_34 = TYPEOF local_c;
    ARG local_c;
    local_33 = VCALL local_34 10;
    local_35 = TYPEOF local_33;
    ARG local_33;
    local_32 = VCALL local_35 11;
    local_37 = TYPEOF local_c;
    ARG local_c;
    local_36 = VCALL local_37 9;
    local_38 = TYPEOF local_32;
    ARG local_32;
    ARG local_36;
    local_31 = VCALL local_38 12;
    local_39 = GETATTR local_31 0;
    IF local_39 > 0 GOTO label_then_2;
    LABEL label_else_2;
    local_41 = LOAD data_8_string;
    ARG local_41;
    local_42 = CALL String___init;
    local_43 = TYPEOF param_self;
    ARG param_self;
    ARG local_42;
    local_40 = VCALL local_43 3;
    local_30 = local_40;
    GOTO label_continue_2;
    LABEL label_then_2;
    local_45 = LOAD data_9_string;
    ARG local_45;
    local_46 = CALL String___init;
    local_47 = TYPEOF param_self;
    ARG param_self;
    ARG local_46;
    local_44 = VCALL local_47 3;
    local_30 = local_44;
    LABEL label_continue_2;
    RETURN local_30;
  }

  function Complex___init {

    LOCAL local_self;
    LOCAL local_x;
    LOCAL local_y;

    local_self = ALLOCATE Complex;
    ARG local_self;
    local_x = CALL Complex_x___init;
    SETATTR local_self 0 local_x;
    ARG local_self;
    local_y = CALL Complex_y___init;
    SETATTR local_self 1 local_y;
    RETURN local_self;
  }

  function Complex_x___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Complex_y___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Complex_init {
    PARAM param_self;
    PARAM param_a;
    PARAM param_b;

    LOCAL local_x;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_y;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;

    local_x = GETATTR param_self 0;
    local_1 = GETATTR local_x 0;
    local_2 = GETATTR param_a 0;
    local_3 = local_1 - local_2
    IF local_3 = 0 GOTO label_then_3;
    LABEL label_else_3;
    local_5 = LOAD 0;
    ARG local_5;
    local_6 = CALL Bool___init;
    local_4 = local_6;
    GOTO label_continue_3;
    LABEL label_then_3;
    local_7 = LOAD 1;
    ARG local_7;
    local_8 = CALL Bool___init;
    local_4 = local_8;
    LABEL label_continue_3;
    local_y = GETATTR param_self 1;
    local_10 = GETATTR local_y 0;
    local_11 = GETATTR param_b 0;
    local_12 = local_10 - local_11
    IF local_12 = 0 GOTO label_then_4;
    LABEL label_else_4;
    local_14 = LOAD 0;
    ARG local_14;
    local_15 = CALL Bool___init;
    local_13 = local_15;
    GOTO label_continue_4;
    LABEL label_then_4;
    local_16 = LOAD 1;
    ARG local_16;
    local_17 = CALL Bool___init;
    local_13 = local_17;
    LABEL label_continue_4;
    RETURN param_self;
  }

  function Complex_print {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_y;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_x;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;

    local_y = GETATTR param_self 1;
    local_2 = GETATTR local_y 0;
    local_3 = LOAD 0;
    ARG local_3;
    local_4 = CALL Int___init;
    local_5 = GETATTR local_4 0;
    local_6 = local_2 - local_5
    IF local_6 = 0 GOTO label_then_6;
    LABEL label_else_6;
    local_8 = LOAD 0;
    ARG local_8;
    local_9 = CALL Bool___init;
    local_7 = local_9;
    GOTO label_continue_6;
    LABEL label_then_6;
    local_10 = LOAD 1;
    ARG local_10;
    local_11 = CALL Bool___init;
    local_7 = local_11;
    LABEL label_continue_6;
    local_12 = GETATTR local_7 0;
    IF local_12 > 0 GOTO label_then_5;
    LABEL label_else_5;
    local_x = GETATTR param_self 0;
    local_18 = TYPEOF param_self;
    ARG param_self;
    ARG local_x;
    local_16 = VCALL local_18 4;
    local_19 = LOAD data_10_string;
    ARG local_19;
    local_20 = CALL String___init;
    local_21 = TYPEOF local_16;
    ARG local_16;
    ARG local_20;
    local_15 = VCALL local_21 3;
    local_22 = TYPEOF local_15;
    ARG local_15;
    ARG local_y;
    local_14 = VCALL local_22 4;
    local_23 = LOAD data_11_string;
    ARG local_23;
    local_24 = CALL String___init;
    local_25 = TYPEOF local_14;
    ARG local_14;
    ARG local_24;
    local_13 = VCALL local_25 3;
    local_0 = local_13;
    GOTO label_continue_5;
    LABEL label_then_5;
    local_27 = TYPEOF param_self;
    ARG param_self;
    ARG local_x;
    local_26 = VCALL local_27 4;
    local_0 = local_26;
    LABEL label_continue_5;
    RETURN local_0;
  }

  function Complex_reflect_0 {
    PARAM param_self;

    LOCAL local_x;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_y;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;

    local_x = GETATTR param_self 0;
    local_1 = GETATTR local_x 0;
    local_3 = GETATTR local_x 0;
    local_4 = LOAD 1;
    local_2 = local_4 - local_3
    ARG local_2;
    local_5 = CALL Bool___init;
    local_6 = GETATTR local_5 0;
    local_7 = local_1 - local_6
    IF local_7 = 0 GOTO label_then_7;
    LABEL label_else_7;
    local_9 = LOAD 0;
    ARG local_9;
    local_10 = CALL Bool___init;
    local_8 = local_10;
    GOTO label_continue_7;
    LABEL label_then_7;
    local_11 = LOAD 1;
    ARG local_11;
    local_12 = CALL Bool___init;
    local_8 = local_12;
    LABEL label_continue_7;
    local_y = GETATTR param_self 1;
    local_14 = GETATTR local_y 0;
    local_16 = GETATTR local_y 0;
    local_17 = LOAD 1;
    local_15 = local_17 - local_16
    ARG local_15;
    local_18 = CALL Bool___init;
    local_19 = GETATTR local_18 0;
    local_20 = local_14 - local_19
    IF local_20 = 0 GOTO label_then_8;
    LABEL label_else_8;
    local_22 = LOAD 0;
    ARG local_22;
    local_23 = CALL Bool___init;
    local_21 = local_23;
    GOTO label_continue_8;
    LABEL label_then_8;
    local_24 = LOAD 1;
    ARG local_24;
    local_25 = CALL Bool___init;
    local_21 = local_25;
    LABEL label_continue_8;
    RETURN param_self;
  }

  function Complex_reflect_X {
    PARAM param_self;

    LOCAL local_y;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;

    local_y = GETATTR param_self 1;
    local_1 = GETATTR local_y 0;
    local_3 = GETATTR local_y 0;
    local_4 = LOAD 1;
    local_2 = local_4 - local_3
    ARG local_2;
    local_5 = CALL Bool___init;
    local_6 = GETATTR local_5 0;
    local_7 = local_1 - local_6
    IF local_7 = 0 GOTO label_then_9;
    LABEL label_else_9;
    local_9 = LOAD 0;
    ARG local_9;
    local_10 = CALL Bool___init;
    local_8 = local_10;
    GOTO label_continue_9;
    LABEL label_then_9;
    local_11 = LOAD 1;
    ARG local_11;
    local_12 = CALL Bool___init;
    local_8 = local_12;
    LABEL label_continue_9;
    RETURN param_self;
  }

  function Complex_reflect_Y {
    PARAM param_self;

    LOCAL local_x;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;

    local_x = GETATTR param_self 0;
    local_1 = GETATTR local_x 0;
    local_3 = GETATTR local_x 0;
    local_4 = LOAD 1;
    local_2 = local_4 - local_3
    ARG local_2;
    local_5 = CALL Bool___init;
    local_6 = GETATTR local_5 0;
    local_7 = local_1 - local_6
    IF local_7 = 0 GOTO label_then_10;
    LABEL label_else_10;
    local_9 = LOAD 0;
    ARG local_9;
    local_10 = CALL Bool___init;
    local_8 = local_10;
    GOTO label_continue_10;
    LABEL label_then_10;
    local_11 = LOAD 1;
    ARG local_11;
    local_12 = CALL Bool___init;
    local_8 = local_12;
    LABEL label_continue_10;
    RETURN param_self;
  }

  function Complex_equal {
    PARAM param_self;
    PARAM param_d;

    LOCAL local_0;
    LOCAL local_x;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_y;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;

    local_x = GETATTR param_self 0;
    local_2 = GETATTR local_x 0;
    local_4 = TYPEOF param_d;
    ARG param_d;
    local_3 = VCALL local_4 13;
    local_5 = GETATTR local_3 0;
    local_6 = local_2 - local_5
    IF local_6 = 0 GOTO label_then_12;
    LABEL label_else_12;
    local_8 = LOAD 0;
    ARG local_8;
    local_9 = CALL Bool___init;
    local_7 = local_9;
    GOTO label_continue_12;
    LABEL label_then_12;
    local_10 = LOAD 1;
    ARG local_10;
    local_11 = CALL Bool___init;
    local_7 = local_11;
    LABEL label_continue_12;
    local_12 = GETATTR local_7 0;
    IF local_12 > 0 GOTO label_then_11;
    LABEL label_else_11;
    local_13 = LOAD 0;
    ARG local_13;
    local_14 = CALL Bool___init;
    local_0 = local_14;
    GOTO label_continue_11;
    LABEL label_then_11;
    local_y = GETATTR param_self 1;
    local_17 = GETATTR local_y 0;
    local_19 = TYPEOF param_d;
    ARG param_d;
    local_18 = VCALL local_19 14;
    local_20 = GETATTR local_18 0;
    local_21 = local_17 - local_20
    IF local_21 = 0 GOTO label_then_14;
    LABEL label_else_14;
    local_23 = LOAD 0;
    ARG local_23;
    local_24 = CALL Bool___init;
    local_22 = local_24;
    GOTO label_continue_14;
    LABEL label_then_14;
    local_25 = LOAD 1;
    ARG local_25;
    local_26 = CALL Bool___init;
    local_22 = local_26;
    LABEL label_continue_14;
    local_27 = GETATTR local_22 0;
    IF local_27 > 0 GOTO label_then_13;
    LABEL label_else_13;
    local_28 = LOAD 0;
    ARG local_28;
    local_29 = CALL Bool___init;
    local_15 = local_29;
    GOTO label_continue_13;
    LABEL label_then_13;
    local_30 = LOAD 1;
    ARG local_30;
    local_31 = CALL Bool___init;
    local_15 = local_31;
    LABEL label_continue_13;
    local_0 = local_15;
    LABEL label_continue_11;
    RETURN local_0;
  }

  function Complex_x_value {
    PARAM param_self;

    LOCAL local_x;

    local_x = GETATTR param_self 0;
    RETURN local_x;
  }

  function Complex_y_value {
    PARAM param_self;

    LOCAL local_y;

    local_y = GETATTR param_self 1;
    RETURN local_y;
  }

