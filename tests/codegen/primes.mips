.data
	
	################
	# DATA SECTION #
	################

	####################
	# Types declaration #
	####################

	type_Object: .word 24
	type_Object_inherits_from: .word 0
	type_Object_name_address: .word type_Object_name_size
	type_Object___init__: .word function___init___at_Object
	type_Object_abort: .word function_abort_at_Object
	type_Object_type_name: .word function_type_name_at_Object
	type_Object_copy: .word function_copy_at_Object
	
	type_IO: .word 40
	type_IO_inherits_from: .word type_Object
	type_IO_name_address: .word type_IO_name_size
	type_IO___init__: .word function___init___at_IO
	type_IO_abort: .word function_abort_at_Object
	type_IO_type_name: .word function_type_name_at_Object
	type_IO_copy: .word function_copy_at_Object
	type_IO_out_string: .word function_out_string_at_IO
	type_IO_out_int: .word function_out_int_at_IO
	type_IO_in_string: .word function_in_string_at_IO
	type_IO_in_int: .word function_in_int_at_IO
	
	type_String: .word 36
	type_String_inherits_from: .word type_Object
	type_String_name_address: .word type_String_name_size
	type_String___init__: .word function___init___at_String
	type_String_abort: .word function_abort_at_Object
	type_String_type_name: .word function_type_name_at_Object
	type_String_copy: .word function_copy_at_Object
	type_String_length: .word function_length_at_String
	type_String_concat: .word function_concat_at_String
	type_String_substr: .word function_substr_at_String
	
	type_Int: .word 24
	type_Int_inherits_from: .word type_Object
	type_Int_name_address: .word type_Int_name_size
	type_Int___init__: .word function___init___at_Int
	type_Int_abort: .word function_abort_at_Object
	type_Int_type_name: .word function_type_name_at_Object
	type_Int_copy: .word function_copy_at_Object
	
	type_Bool: .word 24
	type_Bool_inherits_from: .word type_Object
	type_Bool_name_address: .word type_Bool_name_size
	type_Bool___init__: .word function___init___at_Bool
	type_Bool_abort: .word function_abort_at_Object
	type_Bool_type_name: .word function_type_name_at_Object
	type_Bool_copy: .word function_copy_at_Object
	
	type_Main: .word 64
	type_Main_inherits_from: .word type_IO
	type_Main_name_address: .word type_Main_name_size
	type_Main___init__: .word function___init___at_Main
	type_Main_abort: .word function_abort_at_Object
	type_Main_type_name: .word function_type_name_at_Object
	type_Main_copy: .word function_copy_at_Object
	type_Main_out_string: .word function_out_string_at_IO
	type_Main_out_int: .word function_out_int_at_IO
	type_Main_in_string: .word function_in_string_at_IO
	type_Main_in_int: .word function_in_int_at_IO
	type_Main_main: .word function_main_at_Main
	
	type_Object_name_size: .word 6
	type_Object_name: .asciiz "Object"
	
	type_IO_name_size: .word 2
	type_IO_name: .asciiz "IO"
	
	type_String_name_size: .word 6
	type_String_name: .asciiz "String"
	
	type_Int_name_size: .word 3
	type_Int_name: .asciiz "Int"
	
	type_Bool_name_size: .word 4
	type_Bool_name: .asciiz "Bool"
	
	type_Main_name_size: .word 4
	type_Main_name: .asciiz "Main"
	
	buffer_input: .space 1024
	debug_log: .asciiz "debug_log\n"

.text
	
	################
	# TEXT SECTION #
	################

	#########################
	# Functions declaration #
	#########################

	function_add:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# ADD FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		add $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_sub:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# SUB FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sub $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_mult:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# TIMES FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		mult $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_div:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# DIV FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		div $t0, $t1
		mflo $t2
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_xor:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# XOR FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		xor $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		slt $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_less_than_or_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# LESS EQ FUNCT
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sle $t2, $t0, $t1
		
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_equal:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -40
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 36($sp)
		
		# ALLOCATING NUll INTO -> internal_1
		sw $zero, 32($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 28($sp)
		
		# internal_2 <- EQUALADDRESS (a, internal_1)
		lw $t0, 44($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# internal_2 <- EQUALADDRESS (b, internal_1)
		lw $t0, 40($sp)
		lw $t1, 32($sp)
		seq $t2, $t0, $t1
		lw $t0, 28($sp)
		sw $t2, 8($t0)
		
		# IF internal_2 THEN GOTO a_is_type_object
		lw $t0, 28($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_object
		
		# internal_3 <- TYPEOF a
		lw $t0, 44($sp)
		lw $t0, 0($t0)
		sw $t0, 24($sp)
		
		# internal_4 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 20($sp)
		
		# internal_5 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 16($sp)
		
		# internal_6 <- DIRECTION OF String
		la $t0, type_String
		sw $t0, 12($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_7 <- EQUALADDRESS (internal_3, internal_4)
		lw $t0, 24($sp)
		lw $t1, 20($sp)
		seq $t2, $t0, $t1
		lw $t0, 8($sp)
		sw $t2, 8($t0)
		
		# internal_8 <- EQUALADDRESS (internal_3, internal_5)
		lw $t0, 24($sp)
		lw $t1, 16($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_9 <- EQUALADDRESS (internal_3, internal_6)
		lw $t0, 24($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_7 THEN GOTO a_is_type_int_or_bool
		lw $t0, 8($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_8 THEN GOTO a_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_int_or_bool
		
		# IF internal_9 THEN GOTO a_is_type_string
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, a_is_type_string
		
		# JUMP TO a_is_type_object
		j a_is_type_object
		
		a_is_type_int_or_bool:
		
		# internal_0 <- EQUALINT (a, b)
		lw $t0, 44($sp)
		lw $t0, 8($t0)
		lw $t1, 40($sp)
		lw $t1, 8($t1)
		seq $t2, $t0, $t1
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_string:
		
		# internal_0 <- EQUALSTRING (a, b)
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		addi $t0, $t0, 8
		addi $t1, $t1, 8
		
		addi $t4, $zero, 1
		lw $t5, 36($sp)
		sw $t4, 8($t5)
		
		while_compare_strings_start:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, while_compare_strings_update
		
		lw $t5, 36($sp)
		sw $zero, 8($t5)
		j while_compare_strings_end
		
		while_compare_strings_update:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, $zero, while_compare_strings_end
		beq $t3, $zero, while_compare_strings_end
		j while_compare_strings_start
		while_compare_strings_end:
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		a_is_type_object:
		
		# EQUAL FUNCT
		lw $t0, 44($sp)
		lw $t1, 40($sp)
		seq $t2, $t0, $t1
		
		lw $t0, 36($sp)
		sw $t2, 8($t0)
		
		# JUMP TO end_of_equal
		j end_of_equal
		
		end_of_equal:
		
		lw $v1, 36($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 40
		
		jr $ra
		
	function_assign:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -28
		
		# ALLOCATING NUll INTO -> internal_0
		sw $zero, 24($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 20($sp)
		
		# internal_1 <- EQUALADDRESS (source, internal_0)
		lw $t0, 28($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# internal_1 <- EQUALADDRESS (dest, internal_0)
		lw $t0, 32($sp)
		lw $t1, 24($sp)
		seq $t2, $t0, $t1
		lw $t0, 20($sp)
		sw $t2, 8($t0)
		
		# IF internal_1 THEN GOTO source_is_type_object
		lw $t0, 20($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_object
		
		# internal_2 <- TYPEOF source
		lw $t0, 28($sp)
		lw $t0, 0($t0)
		sw $t0, 16($sp)
		
		# internal_3 <- DIRECTION OF Int
		la $t0, type_Int
		sw $t0, 12($sp)
		
		# internal_4 <- DIRECTION OF Bool
		la $t0, type_Bool
		sw $t0, 8($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_5 <- EQUALADDRESS (internal_2, internal_3)
		lw $t0, 16($sp)
		lw $t1, 12($sp)
		seq $t2, $t0, $t1
		lw $t0, 4($sp)
		sw $t2, 8($t0)
		
		# internal_6 <- EQUALADDRESS (internal_2, internal_4)
		lw $t0, 16($sp)
		lw $t1, 8($sp)
		seq $t2, $t0, $t1
		lw $t0, 0($sp)
		sw $t2, 8($t0)
		
		# IF internal_5 THEN GOTO source_is_type_int_or_bool
		lw $t0, 4($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# IF internal_6 THEN GOTO source_is_type_int_or_bool
		lw $t0, 0($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, source_is_type_int_or_bool
		
		# JUMP TO source_is_type_object
		j source_is_type_object
		
		source_is_type_int_or_bool:
		
		# dest <- source WHERE source IS AN INT
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		lw $t0, 28($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t0)
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		sw $t2, 8($v0)
		sw $v0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_is_type_object:
		
		# dest <- source
		lw $t0, 28($sp)
		sw $t0, 32($sp)
		
		# JUMP TO source_end_of_equal
		j source_end_of_equal
		
		source_end_of_equal:
		
		lw $v1, 32($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 28
		
		jr $ra
		
	function___init___at_Object:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_abort_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -24
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 33
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 33
		sw $t0, 4($v0)
		
		addi $t0, $zero, 65
		sb $t0, 8($v0)
		
		addi $t0, $zero, 98
		sb $t0, 9($v0)
		
		addi $t0, $zero, 111
		sb $t0, 10($v0)
		
		addi $t0, $zero, 114
		sb $t0, 11($v0)
		
		addi $t0, $zero, 116
		sb $t0, 12($v0)
		
		addi $t0, $zero, 32
		sb $t0, 13($v0)
		
		addi $t0, $zero, 99
		sb $t0, 14($v0)
		
		addi $t0, $zero, 97
		sb $t0, 15($v0)
		
		addi $t0, $zero, 108
		sb $t0, 16($v0)
		
		addi $t0, $zero, 108
		sb $t0, 17($v0)
		
		addi $t0, $zero, 101
		sb $t0, 18($v0)
		
		addi $t0, $zero, 100
		sb $t0, 19($v0)
		
		addi $t0, $zero, 32
		sb $t0, 20($v0)
		
		addi $t0, $zero, 102
		sb $t0, 21($v0)
		
		addi $t0, $zero, 114
		sb $t0, 22($v0)
		
		addi $t0, $zero, 111
		sb $t0, 23($v0)
		
		addi $t0, $zero, 109
		sb $t0, 24($v0)
		
		addi $t0, $zero, 32
		sb $t0, 25($v0)
		
		addi $t0, $zero, 99
		sb $t0, 26($v0)
		
		addi $t0, $zero, 108
		sb $t0, 27($v0)
		
		addi $t0, $zero, 97
		sb $t0, 28($v0)
		
		addi $t0, $zero, 115
		sb $t0, 29($v0)
		
		addi $t0, $zero, 115
		sb $t0, 30($v0)
		
		addi $t0, $zero, 32
		sb $t0, 31($v0)
		
		sb $zero, 32($v0)
		
		sw $v0, 20($sp)
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 10
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 10
		sw $t0, 4($v0)
		
		addi $t0, $zero, 10
		sb $t0, 8($v0)
		
		sb $zero, 9($v0)
		
		sw $v0, 8($sp)
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD type_name OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [self]
		lw $t0, 32($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 32($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_1]
		lw $t0, 28($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD concat OF String
		lw $t0, 24($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_2]
		lw $t0, 24($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_3]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_5
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 24($sp)
		addi $sp, $sp, 12
		
		lw $t0, 12($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: internal_2
		li $v0, 4
		move $a0, $t0
		syscall
		
		# EXIT!
		li $v0, 10
		syscall
		
		lw $v1, 24($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 24
		
		jr $ra
		
	function_type_name_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- NAME OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 8($t1)
		la $t3, 4($t2)
		lw $t2, 0($t2)
		
		addi $t2, $t2, 9
		li $v0, 9
		move $a0, $t2
		syscall
		addi $t2, $t2, -9
		
		la $t4, type_String
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		
		addi $t4, $v0, 0
		addi $t4, $t4, 8
		xor $t5, $t5, $t5
		while_copy_name_start:
		beq $t5, $t2, while_copy_name_end
		lb $t6, 0($t3)
		sb $t6, 0($t4)
		addi $t4, $t4, 1
		addi $t3, $t3, 1
		addi $t5, $t5, 1
		j while_copy_name_start
		while_copy_name_end:
		
		sb $zero, 0($t4)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_copy_at_Object:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- COPY OF self
		lw $t0, 4($sp)
		lw $t1, 0($t0)
		lw $t2, 4($t0)
		
		li $v0, 9
		move $a0, $t2
		syscall
		move $t3, $v0
		sw $t1, 0($v0)
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		addi $t3, $t3, 8
		addi $t2, $2, -8
		xor $t4, $t4, $t4
		
		while_copy_start:
		beq $t4, $t2, while_copy_end
		lb $t5, 0($t0)
		sb $t5, 0($t3)
		addi $t0, $t0, 1
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_start
		while_copy_end:
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_IO:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_out_string_at_IO:
		lw $t0, 0($sp)
		addi $t0, $t0, 8
		
		# PRINTING STRING: x
		li $v0, 4
		move $a0, $t0
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_out_int_at_IO:
		# PRINTING INT: x
		li $v0, 1
		lw $a0, 0($sp)
		lw $a0, 8($a0)
		syscall
		
		lw $v1, 4($sp)
		
		jr $ra
		
	function_in_string_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		li $v0, 8
		la $a0, buffer_input
		li $a1, 1024
		syscall
		
		xor $t0, $t0, $t0
		while_read_start:
		lb $t1, buffer_input($t0)
		addi $t2, $zero, 10
		beq $t1, $t2, while_read_end
		addi $t2, $zero, 13
		beq $t1, $t2, while_read_end
		addi $t0, $t0, 1
		j while_read_start
		while_read_end:
		
		addi $t0, $t0, 9
		li $v0, 9
		move $a0, $t0
		syscall
		addi $t0, $t0, -9
		la $t2, type_String
		sw $t2, 0($v0)
		sw $a0, 4($v0)
		
		addi $t3, $v0, 8
		xor $t4, $t4, $t4
		
		while_copy_from_buffer_start:
		beq $t4, $t0, while_copy_from_buffer_end
		lb $t5, buffer_input($t4)
		sb $t5, 0($t3)
		addi $t3, $t3, 1
		addi $t4, $t4, 1
		j while_copy_from_buffer_start
		while_copy_from_buffer_end:
		
		sb $zero, 0($t3)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_in_int_at_IO:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		li $v0, 5
		syscall
		lw $t0, 0($sp)
		sw $v0, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_String:
		lw $v1, 0($sp)
		
		jr $ra
		
	function_length_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		# internal_0 <- LENGTH (self)
		lw $t0, 4($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t0, 0($sp)
		sw $t1, 8($t0)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_concat_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self + s
		lw $t0, 8($sp)
		lw $t1, 4($sp)
		lw $t2, 4($t0)
		lw $t3, 4($t1)
		addi $t2, $t2, -9
		addi $t3, $t3, -9
		add $t4, $t2, $t3
		addi $t4, $t4, 9
		
		li $v0, 9
		move $a0, $t4
		syscall
		addi $t4, $t4, -9
		add $t5, $zero, $v0
		addi $t5, $t5, 8
		
		la $t8, type_String
		sw $t8, 0($v0)
		
		sw $a0, 4($v0)
		
		xor $t6, $t6, $t6
		while_copy_str1_start:
		beq $t6, $t2, while_copy_str1_end
		lb $t7, 8($t0)
		sb $t7, 0($t5)
		add $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str1_start
		while_copy_str1_end:
		
		while_copy_str2_start:
		beq $t6, $t4, while_copy_str2_end
		lb $t7, 8($t1)
		sb $t7, 0($t5)
		add $t1, $t1, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_str2_start
		while_copy_str2_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function_substr_at_String:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# internal_0 <- self[i:i + l]
		lw $t0, 12($sp)
		lw $t1, 4($t0)
		addi $t1, $t1, -9
		lw $t2, 8($sp)
		lw $t2, 8($t2)
		lw $t3, 4($sp)
		lw $t3, 8($t3)
		add $t4, $t2, $t3
		
		bgt $t4, $t1, substring_out_of_bounds
		
		addi $t3, $t3, 9
		li $v0, 9
		move $a0, $t3
		syscall
		addi $t3, $t3, -9
		
		la $t5, type_String
		sw $t5, 0($v0)
		
		sw $a0, 4($v0)
		
		addi $t0, $t0, 8
		add $t0, $t0, $t2
		move $t5, $v0
		add $t5, $t5, 8
		xor $t6, $t6, $t6
		while_copy_substr_start:
		beq $t6, $t3, while_copy_substr_end
		lb $t7, 0($t0)
		sb $t7, 0($t5)
		addi $t0, $t0, 1
		add $t5, $t5, 1
		addi $t6, $t6, 1
		j while_copy_substr_start
		while_copy_substr_end:
		
		sb $zero, 0($t5)
		
		sw $v0, 0($sp)
		j substring_not_out_of_bounds
		
		substring_out_of_bounds:
		li $v0, 17
		addi $a0, $zero, 1
		syscall
		
		substring_not_out_of_bounds:
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	function___init___at_Int:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Bool:
		lw $v1, 0($sp)
		
		jr $ra
		
	function___init___at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -264
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 31
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 31
		sw $t0, 4($v0)
		
		addi $t0, $zero, 50
		sb $t0, 8($v0)
		
		addi $t0, $zero, 32
		sb $t0, 9($v0)
		
		addi $t0, $zero, 105
		sb $t0, 10($v0)
		
		addi $t0, $zero, 115
		sb $t0, 11($v0)
		
		addi $t0, $zero, 32
		sb $t0, 12($v0)
		
		addi $t0, $zero, 116
		sb $t0, 13($v0)
		
		addi $t0, $zero, 114
		sb $t0, 14($v0)
		
		addi $t0, $zero, 105
		sb $t0, 15($v0)
		
		addi $t0, $zero, 118
		sb $t0, 16($v0)
		
		addi $t0, $zero, 105
		sb $t0, 17($v0)
		
		addi $t0, $zero, 97
		sb $t0, 18($v0)
		
		addi $t0, $zero, 108
		sb $t0, 19($v0)
		
		addi $t0, $zero, 108
		sb $t0, 20($v0)
		
		addi $t0, $zero, 121
		sb $t0, 21($v0)
		
		addi $t0, $zero, 32
		sb $t0, 22($v0)
		
		addi $t0, $zero, 112
		sb $t0, 23($v0)
		
		addi $t0, $zero, 114
		sb $t0, 24($v0)
		
		addi $t0, $zero, 105
		sb $t0, 25($v0)
		
		addi $t0, $zero, 109
		sb $t0, 26($v0)
		
		addi $t0, $zero, 101
		sb $t0, 27($v0)
		
		addi $t0, $zero, 46
		sb $t0, 28($v0)
		
		addi $t0, $zero, 10
		sb $t0, 29($v0)
		
		sb $zero, 30($v0)
		
		sw $v0, 260($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 252($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 264($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 252($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 248($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 276($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 272($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 260($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 268($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 244($sp)
		
		# SET ATTRIBUTE out OF self
		lw $t0, 264($sp)
		lw $t1, 244($sp)
		beq $t1, $zero, object_set_attribute_8760027235292
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027235292
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027235292
		j object_set_attribute_8760027235292
		int_set_attribute_8760027235292:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8760027235292
		bool_set_attribute_8760027235292:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8760027235292
		object_set_attribute_8760027235292:
		sw $t1, 8($t0)
		end_set_attribute_8760027235292:
		
		# GET ATTRIBUTE out OF self
		lw $t0, 264($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027237187
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027237187
		j object_get_attribute_8760027237187
		int_get_attribute_8760027237187:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp)
		j end_get_attribute_8760027237187
		bool_get_attribute_8760027237187:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 240($sp)
		j end_get_attribute_8760027237187
		object_get_attribute_8760027237187:
		sw $t1, 240($sp)
		end_get_attribute_8760027237187:
		
		# SET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 240($sp)
		beq $t1, $zero, object_set_attribute_8760027235304
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027235304
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027235304
		j object_set_attribute_8760027235304
		int_set_attribute_8760027235304:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8760027235304
		bool_set_attribute_8760027235304:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8760027235304
		object_set_attribute_8760027235304:
		sw $t1, 12($t0)
		end_set_attribute_8760027235304:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 236($sp)
		
		# SET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 236($sp)
		beq $t1, $zero, object_set_attribute_8760027237199
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027237199
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027237199
		j object_set_attribute_8760027237199
		int_set_attribute_8760027237199:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8760027237199
		bool_set_attribute_8760027237199:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8760027237199
		object_set_attribute_8760027237199:
		sw $t1, 16($t0)
		end_set_attribute_8760027237199:
		
		# ALLOCATING INT -> 500
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 500
		sw $t0, 8($v0)
		sw $v0, 232($sp)
		
		# SET ATTRIBUTE stop OF self
		lw $t0, 264($sp)
		lw $t1, 232($sp)
		beq $t1, $zero, object_set_attribute_8760027237220
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027237220
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027237220
		j object_set_attribute_8760027237220
		int_set_attribute_8760027237220:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8760027237220
		bool_set_attribute_8760027237220:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 20($t0)
		j end_set_attribute_8760027237220
		object_set_attribute_8760027237220:
		sw $t1, 20($t0)
		end_set_attribute_8760027237220:
		
		# ALLOCATING NUll INTO -> internal_8
		sw $zero, 228($sp)
		
		while_start_8760027228763:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 224($sp)
		
		# IF internal_9 THEN GOTO while_body_8760027228763
		lw $t0, 224($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8760027228763
		
		# JUMP TO while_end_8760027228763
		j while_end_8760027228763
		
		while_body_8760027228763:
		
		# GET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027237392
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027237392
		j object_get_attribute_8760027237392
		int_get_attribute_8760027237392:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 220($sp)
		j end_get_attribute_8760027237392
		bool_get_attribute_8760027237392:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 220($sp)
		j end_get_attribute_8760027237392
		object_get_attribute_8760027237392:
		sw $t1, 220($sp)
		end_get_attribute_8760027237392:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 216($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_10]
		lw $t0, 232($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_11]
		lw $t0, 228($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 224($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 212($sp)
		beq $t1, $zero, object_set_attribute_8760027237358
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027237358
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027237358
		j object_set_attribute_8760027237358
		int_set_attribute_8760027237358:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8760027237358
		bool_set_attribute_8760027237358:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 12($t0)
		j end_set_attribute_8760027237358
		object_set_attribute_8760027237358:
		sw $t1, 12($t0)
		end_set_attribute_8760027237358:
		
		# ALLOCATING INT -> 2
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 2
		sw $t0, 8($v0)
		sw $v0, 208($sp)
		
		# SET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 208($sp)
		beq $t1, $zero, object_set_attribute_8760027237431
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027237431
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027237431
		j object_set_attribute_8760027237431
		int_set_attribute_8760027237431:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8760027237431
		bool_set_attribute_8760027237431:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8760027237431
		object_set_attribute_8760027237431:
		sw $t1, 16($t0)
		end_set_attribute_8760027237431:
		
		# ALLOCATING NUll INTO -> internal_14
		sw $zero, 204($sp)
		
		while_start_8760027230543:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 196($sp)
		
		# GET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027237551
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027237551
		j object_get_attribute_8760027237551
		int_get_attribute_8760027237551:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 192($sp)
		j end_get_attribute_8760027237551
		bool_get_attribute_8760027237551:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 192($sp)
		j end_get_attribute_8760027237551
		object_get_attribute_8760027237551:
		sw $t1, 192($sp)
		end_get_attribute_8760027237551:
		
		# GET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027237578
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027237578
		j object_get_attribute_8760027237578
		int_get_attribute_8760027237578:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 188($sp)
		j end_get_attribute_8760027237578
		bool_get_attribute_8760027237578:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 188($sp)
		j end_get_attribute_8760027237578
		object_get_attribute_8760027237578:
		sw $t1, 188($sp)
		end_get_attribute_8760027237578:
		
		# GET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027237590
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027237590
		j object_get_attribute_8760027237590
		int_get_attribute_8760027237590:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 184($sp)
		j end_get_attribute_8760027237590
		bool_get_attribute_8760027237590:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 184($sp)
		j end_get_attribute_8760027237590
		object_get_attribute_8760027237590:
		sw $t1, 184($sp)
		end_get_attribute_8760027237590:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_18]
		lw $t0, 200($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_19]
		lw $t0, 196($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 192($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_17]
		lw $t0, 204($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_20]
		lw $t0, 192($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 188($sp)
		addi $sp, $sp, 12
		
		# internal_16 <- internal_21
		lw $t0, 176($sp)
		sw $t0, 196($sp)
		
		# IF internal_16 THEN GOTO then_8760027230555
		lw $t0, 196($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8760027230555
		
		# JUMP TO else_8760027230555
		j else_8760027230555
		
		then_8760027230555:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 172($sp)
		
		# internal_15 <- internal_22
		lw $t0, 172($sp)
		sw $t0, 200($sp)
		
		# JUMP TO endif_8760027230555
		j endif_8760027230555
		
		else_8760027230555:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 164($sp)
		
		# GET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027239051
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027239051
		j object_get_attribute_8760027239051
		int_get_attribute_8760027239051:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 160($sp)
		j end_get_attribute_8760027239051
		bool_get_attribute_8760027239051:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 160($sp)
		j end_get_attribute_8760027239051
		object_get_attribute_8760027239051:
		sw $t1, 160($sp)
		end_get_attribute_8760027239051:
		
		# GET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027239078
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027239078
		j object_get_attribute_8760027239078
		int_get_attribute_8760027239078:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 156($sp)
		j end_get_attribute_8760027239078
		bool_get_attribute_8760027239078:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 156($sp)
		j end_get_attribute_8760027239078
		object_get_attribute_8760027239078:
		sw $t1, 156($sp)
		end_get_attribute_8760027239078:
		
		# GET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027239105
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027239105
		j object_get_attribute_8760027239105
		int_get_attribute_8760027239105:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 152($sp)
		j end_get_attribute_8760027239105
		bool_get_attribute_8760027239105:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 152($sp)
		j end_get_attribute_8760027239105
		object_get_attribute_8760027239105:
		sw $t1, 152($sp)
		end_get_attribute_8760027239105:
		
		# GET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027239117
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027239117
		j object_get_attribute_8760027239117
		int_get_attribute_8760027239117:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 148($sp)
		j end_get_attribute_8760027239117
		bool_get_attribute_8760027239117:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 148($sp)
		j end_get_attribute_8760027239117
		object_get_attribute_8760027239117:
		sw $t1, 148($sp)
		end_get_attribute_8760027239117:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_27]
		lw $t0, 164($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_28]
		lw $t0, 160($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_div
		jal function_div
		lw $ra, 8($sp)
		sw $v1, 156($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_26]
		lw $t0, 168($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_29]
		lw $t0, 156($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 152($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_25]
		lw $t0, 172($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_30]
		lw $t0, 152($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_sub
		jal function_sub
		lw $ra, 8($sp)
		sw $v1, 148($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 132($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_31]
		lw $t0, 148($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_32]
		lw $t0, 144($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_equal
		jal function_equal
		lw $ra, 8($sp)
		sw $v1, 140($sp)
		addi $sp, $sp, 12
		
		# internal_24 <- internal_33
		lw $t0, 128($sp)
		sw $t0, 164($sp)
		
		# IF internal_24 THEN GOTO then_8760027230615
		lw $t0, 164($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8760027230615
		
		# JUMP TO else_8760027230615
		j else_8760027230615
		
		then_8760027230615:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 124($sp)
		
		# internal_23 <- internal_34
		lw $t0, 124($sp)
		sw $t0, 168($sp)
		
		# JUMP TO endif_8760027230615
		j endif_8760027230615
		
		else_8760027230615:
		
		# ALLOCATING BOOL -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 120($sp)
		
		# internal_23 <- internal_35
		lw $t0, 120($sp)
		sw $t0, 168($sp)
		
		# JUMP TO endif_8760027230615
		j endif_8760027230615
		
		endif_8760027230615:
		
		# internal_15 <- internal_23
		lw $t0, 168($sp)
		sw $t0, 200($sp)
		
		# JUMP TO endif_8760027230555
		j endif_8760027230555
		
		endif_8760027230555:
		
		# IF internal_15 THEN GOTO while_body_8760027230543
		lw $t0, 200($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, while_body_8760027230543
		
		# JUMP TO while_end_8760027230543
		j while_end_8760027230543
		
		while_body_8760027230543:
		
		# GET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027239355
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027239355
		j object_get_attribute_8760027239355
		int_get_attribute_8760027239355:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 116($sp)
		j end_get_attribute_8760027239355
		bool_get_attribute_8760027239355:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 116($sp)
		j end_get_attribute_8760027239355
		object_get_attribute_8760027239355:
		sw $t1, 116($sp)
		end_get_attribute_8760027239355:
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 112($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_36]
		lw $t0, 128($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_37]
		lw $t0, 124($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_add
		jal function_add
		lw $ra, 8($sp)
		sw $v1, 120($sp)
		addi $sp, $sp, 12
		
		# SET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 108($sp)
		beq $t1, $zero, object_set_attribute_8760027239325
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027239325
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027239325
		j object_set_attribute_8760027239325
		int_set_attribute_8760027239325:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8760027239325
		bool_set_attribute_8760027239325:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 16($t0)
		j end_set_attribute_8760027239325
		object_set_attribute_8760027239325:
		sw $t1, 16($t0)
		end_set_attribute_8760027239325:
		
		# JUMP TO while_start_8760027230543
		j while_start_8760027230543
		
		while_end_8760027230543:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 100($sp)
		
		# GET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027239964
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027239964
		j object_get_attribute_8760027239964
		int_get_attribute_8760027239964:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 96($sp)
		j end_get_attribute_8760027239964
		bool_get_attribute_8760027239964:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 96($sp)
		j end_get_attribute_8760027239964
		object_get_attribute_8760027239964:
		sw $t1, 96($sp)
		end_get_attribute_8760027239964:
		
		# GET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027239991
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027239991
		j object_get_attribute_8760027239991
		int_get_attribute_8760027239991:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 92($sp)
		j end_get_attribute_8760027239991
		bool_get_attribute_8760027239991:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 92($sp)
		j end_get_attribute_8760027239991
		object_get_attribute_8760027239991:
		sw $t1, 92($sp)
		end_get_attribute_8760027239991:
		
		# GET ATTRIBUTE divisor OF self
		lw $t0, 264($sp)
		lw $t1, 16($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027240003
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027240003
		j object_get_attribute_8760027240003
		int_get_attribute_8760027240003:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 88($sp)
		j end_get_attribute_8760027240003
		bool_get_attribute_8760027240003:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 88($sp)
		j end_get_attribute_8760027240003
		object_get_attribute_8760027240003:
		sw $t1, 88($sp)
		end_get_attribute_8760027240003:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_42]
		lw $t0, 104($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_43]
		lw $t0, 100($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_mult
		jal function_mult
		lw $ra, 8($sp)
		sw $v1, 96($sp)
		addi $sp, $sp, 12
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_41]
		lw $t0, 108($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_44]
		lw $t0, 96($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than
		jal function_less_than
		lw $ra, 8($sp)
		sw $v1, 92($sp)
		addi $sp, $sp, 12
		
		# internal_40 <- internal_45
		lw $t0, 80($sp)
		sw $t0, 100($sp)
		
		# IF internal_40 THEN GOTO then_8760027230621
		lw $t0, 100($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8760027230621
		
		# JUMP TO else_8760027230621
		j else_8760027230621
		
		then_8760027230621:
		
		# GET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027240108
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027240108
		j object_get_attribute_8760027240108
		int_get_attribute_8760027240108:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 76($sp)
		j end_get_attribute_8760027240108
		bool_get_attribute_8760027240108:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 76($sp)
		j end_get_attribute_8760027240108
		object_get_attribute_8760027240108:
		sw $t1, 76($sp)
		end_get_attribute_8760027240108:
		
		# SET ATTRIBUTE out OF self
		lw $t0, 264($sp)
		lw $t1, 76($sp)
		beq $t1, $zero, object_set_attribute_8760027240093
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027240093
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027240093
		j object_set_attribute_8760027240093
		int_set_attribute_8760027240093:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8760027240093
		bool_set_attribute_8760027240093:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 8($t0)
		j end_set_attribute_8760027240093
		object_set_attribute_8760027240093:
		sw $t1, 8($t0)
		end_set_attribute_8760027240093:
		
		# GET ATTRIBUTE out OF self
		lw $t0, 264($sp)
		lw $t1, 8($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027240135
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027240135
		j object_get_attribute_8760027240135
		int_get_attribute_8760027240135:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8760027240135
		bool_get_attribute_8760027240135:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 72($sp)
		j end_get_attribute_8760027240135
		object_get_attribute_8760027240135:
		sw $t1, 72($sp)
		end_get_attribute_8760027240135:
		
		# ALLOCATING INT -> 5
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 5
		sw $t0, 8($v0)
		sw $v0, 64($sp)
		
		# GET METHOD out_int OF Main
		lw $t0, 264($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 64($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 60($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 276($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_47]
		lw $t0, 84($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_50
		lw $t0, 72($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 80($sp)
		addi $sp, $sp, 12
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 20
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 20
		sw $t0, 4($v0)
		
		addi $t0, $zero, 32
		sb $t0, 8($v0)
		
		addi $t0, $zero, 105
		sb $t0, 9($v0)
		
		addi $t0, $zero, 115
		sb $t0, 10($v0)
		
		addi $t0, $zero, 32
		sb $t0, 11($v0)
		
		addi $t0, $zero, 112
		sb $t0, 12($v0)
		
		addi $t0, $zero, 114
		sb $t0, 13($v0)
		
		addi $t0, $zero, 105
		sb $t0, 14($v0)
		
		addi $t0, $zero, 109
		sb $t0, 15($v0)
		
		addi $t0, $zero, 101
		sb $t0, 16($v0)
		
		addi $t0, $zero, 46
		sb $t0, 17($v0)
		
		addi $t0, $zero, 10
		sb $t0, 18($v0)
		
		sb $zero, 19($v0)
		
		sw $v0, 56($sp)
		
		# ALLOCATING INT -> 4
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 4
		sw $t0, 8($v0)
		sw $v0, 48($sp)
		
		# GET METHOD out_string OF Main
		lw $t0, 264($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 48($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 44($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [self]
		lw $t0, 276($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_51]
		lw $t0, 68($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_54
		lw $t0, 56($sp)
		jalr $t0
		lw $ra, 8($sp)
		sw $v1, 64($sp)
		addi $sp, $sp, 12
		
		# internal_39 <- internal_52
		lw $t0, 52($sp)
		sw $t0, 104($sp)
		
		# JUMP TO endif_8760027230621
		j endif_8760027230621
		
		else_8760027230621:
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 40($sp)
		
		# internal_39 <- internal_55
		lw $t0, 40($sp)
		sw $t0, 104($sp)
		
		# JUMP TO endif_8760027230621
		j endif_8760027230621
		
		endif_8760027230621:
		
		# ALLOCATING BOOL -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Bool
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 32($sp)
		
		# GET ATTRIBUTE stop OF self
		lw $t0, 264($sp)
		lw $t1, 20($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027207810
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027207810
		j object_get_attribute_8760027207810
		int_get_attribute_8760027207810:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8760027207810
		bool_get_attribute_8760027207810:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 28($sp)
		j end_get_attribute_8760027207810
		object_get_attribute_8760027207810:
		sw $t1, 28($sp)
		end_get_attribute_8760027207810:
		
		# GET ATTRIBUTE testee OF self
		lw $t0, 264($sp)
		lw $t1, 12($t0)
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_get_attribute_8760027207822
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_get_attribute_8760027207822
		j object_get_attribute_8760027207822
		int_get_attribute_8760027207822:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp)
		j end_get_attribute_8760027207822
		bool_get_attribute_8760027207822:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($sp)
		j end_get_attribute_8760027207822
		object_get_attribute_8760027207822:
		sw $t1, 24($sp)
		end_get_attribute_8760027207822:
		
		# FUNCTION ARG
		addi $sp, $sp, -12
		sw $ra, 8($sp)
		
		# ARGUMENT [internal_58]
		lw $t0, 40($sp)
		sw $t0, 4($sp)
		
		# ARGUMENT [internal_59]
		lw $t0, 36($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function_less_than_or_equal
		jal function_less_than_or_equal
		lw $ra, 8($sp)
		sw $v1, 32($sp)
		addi $sp, $sp, 12
		
		# internal_57 <- internal_60
		lw $t0, 20($sp)
		sw $t0, 32($sp)
		
		# IF internal_57 THEN GOTO then_8760027224836
		lw $t0, 32($sp)
		lw $t0, 8($t0)
		addi $t1, $zero, 1
		beq $t0, $t1, then_8760027224836
		
		# JUMP TO else_8760027224836
		j else_8760027224836
		
		then_8760027224836:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 13
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 13
		sw $t0, 4($v0)
		
		addi $t0, $zero, 104
		sb $t0, 8($v0)
		
		addi $t0, $zero, 97
		sb $t0, 9($v0)
		
		addi $t0, $zero, 108
		sb $t0, 10($v0)
		
		addi $t0, $zero, 116
		sb $t0, 11($v0)
		
		sb $zero, 12($v0)
		
		sw $v0, 16($sp)
		
		# ALLOCATING INT -> 1
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 1
		sw $t0, 8($v0)
		sw $v0, 8($sp)
		
		# GET METHOD abort OF String
		lw $t0, 16($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 8($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 4($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_61]
		lw $t0, 24($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_64
		lw $t0, 12($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# internal_56 <- internal_62
		lw $t0, 12($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8760027224836
		j endif_8760027224836
		
		else_8760027224836:
		
		# ALLOCATING STRING
		li $v0, 9
		addi $a0, $zero, 17
		syscall
		
		la $t0, type_String
		sw $t0, 0($v0)
		
		addi $t0, $zero, 17
		sw $t0, 4($v0)
		
		addi $t0, $zero, 99
		sb $t0, 8($v0)
		
		addi $t0, $zero, 111
		sb $t0, 9($v0)
		
		addi $t0, $zero, 110
		sb $t0, 10($v0)
		
		addi $t0, $zero, 116
		sb $t0, 11($v0)
		
		addi $t0, $zero, 105
		sb $t0, 12($v0)
		
		addi $t0, $zero, 110
		sb $t0, 13($v0)
		
		addi $t0, $zero, 117
		sb $t0, 14($v0)
		
		addi $t0, $zero, 101
		sb $t0, 15($v0)
		
		sb $zero, 16($v0)
		
		sw $v0, 0($sp)
		
		# internal_56 <- internal_65
		lw $t0, 0($sp)
		sw $t0, 36($sp)
		
		# JUMP TO endif_8760027224836
		j endif_8760027224836
		
		endif_8760027224836:
		
		# JUMP TO while_start_8760027228763
		j while_start_8760027228763
		
		while_end_8760027228763:
		
		# SET ATTRIBUTE m OF self
		lw $t0, 264($sp)
		lw $t1, 228($sp)
		beq $t1, $zero, object_set_attribute_8760027237244
		lw $t2, 0($t1)
		la $t3, type_Int
		la $t4, type_Bool
		addi $t5, $zero, 1
		seq $t6, $t2, $t3
		beq $t6, $t5, int_set_attribute_8760027237244
		seq $t6, $t2, $t4
		beq $t6, $t5, bool_set_attribute_8760027237244
		j object_set_attribute_8760027237244
		int_set_attribute_8760027237244:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t3, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8760027237244
		bool_set_attribute_8760027237244:
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		sw $t4, 0($v0)
		sw $a0, 4($v0)
		lw $t5, 8($t1)
		sw $t5, 8($v0)
		sw $v0, 24($t0)
		j end_set_attribute_8760027237244
		object_set_attribute_8760027237244:
		sw $t1, 24($t0)
		end_set_attribute_8760027237244:
		
		lw $v1, 264($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 264
		
		jr $ra
		
	function_main_at_Main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -4
		
		# ALLOCATING INT -> 0
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 0
		sw $t0, 8($v0)
		sw $v0, 0($sp)
		
		lw $v1, 0($sp)
		
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, 4
		
		jr $ra
		
	main:
		# SPACE FOR LOCAL VARIABLES
		addi $sp, $sp, -16
		
		# ALLOCATING -> Main
		li $v0, 9
		lw $a0, type_Main
		syscall
		la $t0, type_Main
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		sw $v0, 12($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING STATIC FUNCTION function___init___at_Main
		jal function___init___at_Main
		lw $ra, 4($sp)
		sw $v1, 20($sp)
		addi $sp, $sp, 8
		
		# ALLOCATING INT -> 8
		li $v0, 9
		addi $a0, $zero, 12
		syscall
		
		la $t0, type_Int
		sw $t0, 0($v0)
		sw $a0, 4($v0)
		addi $t0, $zero, 8
		sw $t0, 8($v0)
		sw $v0, 4($sp)
		
		# GET METHOD main OF Main
		lw $t0, 12($sp)
		lw $t0, 0($t0)
		addi $t0, $t0, 12
		lw $t1, 4($sp)
		lw $t1, 8($t1)
		sll $t1, $t1, 2
		add $t0, $t0, $t1
		lw $t0, 0($t0)
		sw $t0, 0($sp)
		
		# FUNCTION ARG
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		
		# ARGUMENT [internal_0]
		lw $t0, 20($sp)
		sw $t0, 0($sp)
		
		# CALLING DYNAMIC FUNCTION -> internal_3
		lw $t0, 8($sp)
		jalr $t0
		lw $ra, 4($sp)
		sw $v1, 16($sp)
		addi $sp, $sp, 8
		
		# EXIT!
		li $v0, 10
		syscall
		
		