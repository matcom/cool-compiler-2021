.data
div_zero: .asciiz "Runtime Error: Division by zero"
dispatch_void: .asciiz "Runtime Error: A dispatch with void"
case_void: .asciiz "Runtime Error: A case with void"
case_no_match: .asciiz "Runtime Error: Execution of a case statement without a matching branch"
heap: .asciiz "Runtime Error: Heap overflow"
substr: .asciiz "Runtime Error: Index for substring out of range"
input_str: .space 2048
void: .word 0
Object_name: .asciiz "Object"
Object_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
Int_name: .asciiz "Int"
Int_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
String_name: .asciiz "String"
String_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word String.length
.word String.concat
.word String.substr
Bool_name: .asciiz "Bool"
Bool_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
Main_name: .asciiz "Main"
Main_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Main.main
msg_0: .asciiz "Abort called from class "
msg_1: .asciiz "
"
empty_str: .asciiz ""
msg_3: .asciiz "2 is trivially prime.
"
msg_4: .asciiz " is prime.
"
msg_5: .asciiz "continue"
msg_6: .asciiz "halt"
.text
div_zero_error:
la $a0, div_zero
li $v0, 4
syscall
li $v0, 10
syscall
dispatch_void_error:
la $a0, dispatch_void
li $v0, 4
syscall
li $v0, 10
syscall
case_void_error:
la $a0, case_void
li $v0, 4
syscall
li $v0, 10
syscall
case_no_match_error:
la $a0, case_no_match
li $v0, 4
syscall
li $v0, 10
syscall
heap_error:
la $a0, heap
li $v0, 4
syscall
li $v0, 10
syscall
substr_error:
la $a0, substr
li $v0, 4
syscall
li $v0, 10
syscall
main:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 2:tag Main:Class_name 9:Class_size
li $a0, 36
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, Main_name
sw $t1, 4($t0)
li $t1, 9
sw $t1, 8($t0)
la $t1, Main_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Main_init
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main_init
sw $a1, 8($sp)
#CallNode Main.main
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main.main
sw $a1, 8($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Object_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Object.abort:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_0
la $t0, msg_0
sw $t0, 4($sp)
#PrintString msg_0
lw $a0, 4($sp)
li $v0, 4
syscall
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 8($sp)
#PrintString class_name_1
lw $a0, 8($sp)
li $v0, 4
syscall
#LoadStr msg_1
la $t0, msg_1
sw $t0, 12($sp)
#PrintString eol_2
lw $a0, 12($sp)
li $v0, 4
syscall
#Abort
li $v0, 10
syscall
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.type_name:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg class_name_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.copy:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#Copy self
lw $t0, 8($sp)
lw $a0, 8($t0)
mul $a0, $a0, 4
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t1, $v0
li $a0, 0
lw $t3, 8($t0)
copy_object:
lw $t2, 0($t0)
sw $t2, 0($t1)
addi $t0, $t0, 4
addi $t1, $t1, 4
addi $a0, $a0, 1
blt $a0, $t3, copy_object
sw $v0, 4($sp)
#Return object_copy_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
IO_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
IO.out_string:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = String.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintString v_0
lw $a0, 4($sp)
li $v0, 4
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.out_int:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = Int.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintInteger v_0
li $v0, 1
lw $a0, 4($sp)
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.in_string:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadString read_string_0
la $a0, input_str
li $a1, 2048
li $v0, 8
syscall
move $t0, $a0
read_char:
li $t1, 0
lb $t1, 0($t0)
beqz $t1, remove_characters_str_end
addi $t0, $t0, 1
j read_char
remove_characters_str_end:
addi $t0, $t0, -1
li $t1, 0
lb $t1, 0($t0)
bne $t1, 10, rcs_end
sb $0, 0($t0)
addi $t0, $t0, -1
lb $t1, 0($t0)
bne $t1, 13, rcs_end
sb $0, 0($t0)
j remove_characters_str_end
rcs_end:
sw $a0, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg read_string_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
IO.in_int:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadInteger read_int_0
li $v0, 5
syscall
sw $v0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg read_int_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Int_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Intvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Stringvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String.length:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Length of self
lw $t0, 16($sp)
lw $t0, 16($t0)
li $a0, 0
count:
lb $t1, 0($t0)
beqz $t1, end
addi $t0, $t0, 1
addi $a0, $a0, 1
j count
end:
sw $a0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg length_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
String.concat:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#CallNode String.length
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 8($sp)
#GetAttr str2_2 = String.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#CallNode String.length
move $t0, $sp
# Arg s
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 16($sp)
#GetAttr len1_value_4 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr len2_value_5 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#Concat str1_0 str2_2
lw $a0, 20($sp)
lw $t0, 24($sp)
add $a0, $a0, $t0
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t3, $v0
lw $t0, 4($sp)
lw $t1, 12($sp)
copy_str:
lb $t2, 0($t0)
sb $t2, 0($v0)
beqz $t2, concat_str
addi $t0, $t0, 1
addi $v0, $v0, 1
j copy_str
concat_str:
lb $t2, 0($t1)
sb $t2, 0($v0)
beqz $t2, end_concat_str
addi $t1, $t1, 1
addi $v0, $v0, 1
j concat_str
end_concat_str:
sb $0, ($v0)
sw $t3, 28($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg result_string_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#Return instance_7
lw $a1, 32($sp)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
String.substr:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr i_value_0 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr l_value_1 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Substr self:string i_value_0:index l_value_1:length
lw $a0, 8($sp)
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
lw $t0, 4($sp)
lw $t1, 8($sp)
lw $t4, 24($sp)
lw $t2, 16($t4)
bltz $t0, substr_error
li $a0, 0
skip_char:
beq $a0, $t0, end_skip
addi $a0, $a0, 1
addi $t2, $t2, 1
beq $t2, $zero, substr_error
j skip_char
end_skip:
li $a0, 0
move $t3, $v0
substr_copy:
beq $a0, $t1, end_substr_copy
li $t0, 0
lb $t0, 0($t2)
sb $t0, 0($v0)
addi $t2, $t2, 1
beq $t2, $zero, substr_error
addi $v0, $v0, 1
addi $a0, $a0, 1
j substr_copy
end_substr_copy:
sb $0, ($v0)
sw $t3, 12($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode String_init
move $t0, $sp
# Arg substr_result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 20($sp)
#Return instance_3
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Bool_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Boolvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_equals:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr str2_1 = String.value
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#StringEquals str1_0 = str2_1
lw $t1, 4($sp)
lw $t2, 8($sp)
compare_str:
li $t3, 0
lb $t3, 0($t1)
li $t4, 0
lb $t4, 0($t2)
seq $a0, $t3, $t4
beqz $a0, end_compare_str
beqz $t3, end_compare_str
beqz $t4, end_compare_str
addi $t1, $t1, 1
addi $t2, $t2, 1
j compare_str
end_compare_str:
sw $a0, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Main_init:
addi $sp, $sp, -540
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#LoadStr msg_3
la $t0, msg_3
sw $t0, 12($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode String_init
move $t0, $sp
# Arg l_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 20($sp)
#VCall out_string
move $t0, $sp
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 8($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 24($sp)
#LoadInt 2
li $t0, 2
sw $t0, 28($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 32($sp)
#SetAttr Mainout = instance_5
lw $t0, 544($sp)
lw $t1, 24($sp)
sw $t1, 16($t0)
#GetAttr Main.out = Main.out
lw $t0, 544($sp)
lw $t1, 16($t0)
sw $t1, 464($sp)
#SetAttr Maintestee = Main.out
lw $t0, 544($sp)
lw $t1, 464($sp)
sw $t1, 20($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 40($sp)
#LoadInt 0
li $t0, 0
sw $t0, 44($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 48($sp)
#SetAttr Maindivisor = instance_9
lw $t0, 544($sp)
lw $t1, 40($sp)
sw $t1, 24($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 52($sp)
#LoadInt 500
li $t0, 500
sw $t0, 56($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 60($sp)
#SetAttr Mainstop = instance_12
lw $t0, 544($sp)
lw $t1, 52($sp)
sw $t1, 28($t0)
#LabelNode label_1
label_1:
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 68($sp)
#LoadInt 1
li $t0, 1
sw $t0, 72($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 76($sp)
# IFGoto instance_16 -> label_2
lw $t0, 68($sp)
lw $a0, 16($t0)
bnez $a0, label_2
#Goto label_3
b label_3
#LabelNode label_2
label_2:
#GetAttr Main.testee = Main.testee
lw $t0, 544($sp)
lw $t1, 20($t0)
sw $t1, 508($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 100($sp)
#LoadInt 1
li $t0, 1
sw $t0, 104($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 108($sp)
#GetAttr left_21 = Int.value
lw $t0, 508($sp)
lw $t1, 16($t0)
sw $t1, 88($sp)
#GetAttr right_22 = Int.value
lw $t0, 100($sp)
lw $t1, 16($t0)
sw $t1, 92($sp)
#BinaryOperator left_21 + right_22
lw $a0, 88($sp)
lw $t1, 92($sp)
add $a0, $a0, $t1
sw $a0, 84($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 80($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 112($sp)
#SetAttr Maintestee = result_19
lw $t0, 544($sp)
lw $t1, 80($sp)
sw $t1, 20($t0)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 120($sp)
#LoadInt 2
li $t0, 2
sw $t0, 124($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_30
lw $t1, 124($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_29
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 128($sp)
#SetAttr Maindivisor = instance_29
lw $t0, 544($sp)
lw $t1, 120($sp)
sw $t1, 24($t0)
#LabelNode label_4
label_4:
#GetAttr Main.testee = Main.testee
lw $t0, 544($sp)
lw $t1, 20($t0)
sw $t1, 508($sp)
#GetAttr Main.divisor = Main.divisor
lw $t0, 544($sp)
lw $t1, 24($t0)
sw $t1, 428($sp)
#GetAttr Main.divisor = Main.divisor
lw $t0, 544($sp)
lw $t1, 24($t0)
sw $t1, 428($sp)
#GetAttr left_42 = Int.value
lw $t0, 428($sp)
lw $t1, 16($t0)
sw $t1, 172($sp)
#GetAttr right_43 = Int.value
lw $t0, 428($sp)
lw $t1, 16($t0)
sw $t1, 176($sp)
#BinaryOperator left_42 * right_43
lw $a0, 172($sp)
lw $t1, 176($sp)
mul $a0, $a0, $t1
sw $a0, 168($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 164($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_41
lw $t1, 168($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_40
lw $t1, 164($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 188($sp)
#GetAttr left_37 = Int.value
lw $t0, 508($sp)
lw $t1, 16($t0)
sw $t1, 152($sp)
#GetAttr right_38 = Int.value
lw $t0, 164($sp)
lw $t1, 16($t0)
sw $t1, 156($sp)
#BinaryOperator left_37 < right_38
lw $a0, 152($sp)
lw $t1, 156($sp)
slt $a0, $a0, $t1
sw $a0, 148($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 144($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_36
lw $t1, 148($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_35
lw $t1, 144($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 192($sp)
# IFGoto result_35 -> label_7
lw $t0, 144($sp)
lw $a0, 16($t0)
bnez $a0, label_7
#GetAttr Main.testee = Main.testee
lw $t0, 544($sp)
lw $t1, 20($t0)
sw $t1, 508($sp)
#GetAttr Main.divisor = Main.divisor
lw $t0, 544($sp)
lw $t1, 24($t0)
sw $t1, 428($sp)
#GetAttr Main.testee = Main.testee
lw $t0, 544($sp)
lw $t1, 20($t0)
sw $t1, 508($sp)
#GetAttr Main.divisor = Main.divisor
lw $t0, 544($sp)
lw $t1, 24($t0)
sw $t1, 428($sp)
#GetAttr left_65 = Int.value
lw $t0, 508($sp)
lw $t1, 16($t0)
sw $t1, 264($sp)
#GetAttr right_66 = Int.value
lw $t0, 428($sp)
lw $t1, 16($t0)
sw $t1, 268($sp)
#BinaryOperator left_65 / right_66
lw $a0, 264($sp)
lw $t1, 268($sp)
beq $t1, 0, div_zero_error
div $a0, $a0, $t1
sw $a0, 260($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 256($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_64
lw $t1, 260($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_63
lw $t1, 256($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 280($sp)
#GetAttr left_60 = Int.value
lw $t0, 428($sp)
lw $t1, 16($t0)
sw $t1, 244($sp)
#GetAttr right_61 = Int.value
lw $t0, 256($sp)
lw $t1, 16($t0)
sw $t1, 248($sp)
#BinaryOperator left_60 * right_61
lw $a0, 244($sp)
lw $t1, 248($sp)
mul $a0, $a0, $t1
sw $a0, 240($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 236($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_59
lw $t1, 240($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_58
lw $t1, 236($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 284($sp)
#GetAttr left_55 = Int.value
lw $t0, 508($sp)
lw $t1, 16($t0)
sw $t1, 224($sp)
#GetAttr right_56 = Int.value
lw $t0, 236($sp)
lw $t1, 16($t0)
sw $t1, 228($sp)
#BinaryOperator left_55 - right_56
lw $a0, 224($sp)
lw $t1, 228($sp)
sub $a0, $a0, $t1
sw $a0, 220($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 216($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_54
lw $t1, 220($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_53
lw $t1, 216($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 288($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 292($sp)
#LoadInt 0
li $t0, 0
sw $t0, 296($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_73
lw $t1, 296($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_72
lw $t1, 292($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 300($sp)
#GetAttr left_51 = Int.value
lw $t0, 216($sp)
lw $t1, 16($t0)
sw $t1, 208($sp)
#GetAttr right_52 = Int.value
lw $t0, 292($sp)
lw $t1, 16($t0)
sw $t1, 212($sp)
#BinaryOperator left_51 = right_52
lw $a0, 208($sp)
lw $t1, 212($sp)
seq $a0, $a0, $t1
sw $a0, 204($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 200($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_50
lw $t1, 204($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_49
lw $t1, 200($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 304($sp)
# IFGoto result_49 -> label_8
lw $t0, 200($sp)
lw $a0, 16($t0)
bnez $a0, label_8
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 308($sp)
#LoadInt 1
li $t0, 1
sw $t0, 312($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_77
lw $t1, 312($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_76
lw $t1, 308($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 316($sp)
#AssignNode result_48 = instance_76
lw $t1, 308($sp)
sw $t1, 196($sp)
#Goto label_9
b label_9
#LabelNode label_8
label_8:
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 320($sp)
#LoadInt 0
li $t0, 0
sw $t0, 324($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_80
lw $t1, 324($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_79
lw $t1, 320($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 328($sp)
#AssignNode result_48 = instance_79
lw $t1, 320($sp)
sw $t1, 196($sp)
#LabelNode label_9
label_9:
#AssignNode result_34 = result_48
lw $t1, 196($sp)
sw $t1, 140($sp)
#Goto label_10
b label_10
#LabelNode label_7
label_7:
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 332($sp)
#LoadInt 0
li $t0, 0
sw $t0, 336($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_83
lw $t1, 336($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_82
lw $t1, 332($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 340($sp)
#AssignNode result_34 = instance_82
lw $t1, 332($sp)
sw $t1, 140($sp)
#LabelNode label_10
label_10:
# IFGoto result_34 -> label_5
lw $t0, 140($sp)
lw $a0, 16($t0)
bnez $a0, label_5
#Goto label_6
b label_6
#LabelNode label_5
label_5:
#GetAttr Main.divisor = Main.divisor
lw $t0, 544($sp)
lw $t1, 24($t0)
sw $t1, 428($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 364($sp)
#LoadInt 1
li $t0, 1
sw $t0, 368($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_91
lw $t1, 368($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_90
lw $t1, 364($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 372($sp)
#GetAttr left_87 = Int.value
lw $t0, 428($sp)
lw $t1, 16($t0)
sw $t1, 352($sp)
#GetAttr right_88 = Int.value
lw $t0, 364($sp)
lw $t1, 16($t0)
sw $t1, 356($sp)
#BinaryOperator left_87 + right_88
lw $a0, 352($sp)
lw $t1, 356($sp)
add $a0, $a0, $t1
sw $a0, 348($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 344($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_86
lw $t1, 348($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_85
lw $t1, 344($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 376($sp)
#SetAttr Maindivisor = result_85
lw $t0, 544($sp)
lw $t1, 344($sp)
sw $t1, 24($t0)
#Goto label_4
b label_4
#LabelNode label_6
label_6:
#GetAttr Main.testee = Main.testee
lw $t0, 544($sp)
lw $t1, 20($t0)
sw $t1, 508($sp)
#GetAttr Main.divisor = Main.divisor
lw $t0, 544($sp)
lw $t1, 24($t0)
sw $t1, 428($sp)
#GetAttr Main.divisor = Main.divisor
lw $t0, 544($sp)
lw $t1, 24($t0)
sw $t1, 428($sp)
#GetAttr left_103 = Int.value
lw $t0, 428($sp)
lw $t1, 16($t0)
sw $t1, 416($sp)
#GetAttr right_104 = Int.value
lw $t0, 428($sp)
lw $t1, 16($t0)
sw $t1, 420($sp)
#BinaryOperator left_103 * right_104
lw $a0, 416($sp)
lw $t1, 420($sp)
mul $a0, $a0, $t1
sw $a0, 412($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 408($sp)
#CallNode Int_init
move $t0, $sp
# Arg op_102
lw $t1, 412($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_101
lw $t1, 408($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 432($sp)
#GetAttr left_98 = Int.value
lw $t0, 508($sp)
lw $t1, 16($t0)
sw $t1, 396($sp)
#GetAttr right_99 = Int.value
lw $t0, 408($sp)
lw $t1, 16($t0)
sw $t1, 400($sp)
#BinaryOperator left_98 < right_99
lw $a0, 396($sp)
lw $t1, 400($sp)
slt $a0, $a0, $t1
sw $a0, 392($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 388($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_97
lw $t1, 392($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_96
lw $t1, 388($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 436($sp)
# IFGoto result_96 -> label_11
lw $t0, 388($sp)
lw $a0, 16($t0)
bnez $a0, label_11
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 440($sp)
#LoadInt 0
li $t0, 0
sw $t0, 444($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_110
lw $t1, 444($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_109
lw $t1, 440($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 448($sp)
#AssignNode result_95 = instance_109
lw $t1, 440($sp)
sw $t1, 384($sp)
#Goto label_12
b label_12
#LabelNode label_11
label_11:
#GetAttr Main.testee = Main.testee
lw $t0, 544($sp)
lw $t1, 20($t0)
sw $t1, 508($sp)
#SetAttr Mainout = Main.testee
lw $t0, 544($sp)
lw $t1, 508($sp)
sw $t1, 16($t0)
#GetAttr Main.out = Main.out
lw $t0, 544($sp)
lw $t1, 16($t0)
sw $t1, 464($sp)
#VCall out_int
move $t0, $sp
# Arg Main.out
lw $t1, 464($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 16($t2)
jal $t3
sw $a1, 460($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 472($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 476($sp)
#CallNode String_init
move $t0, $sp
# Arg l_117
lw $t1, 472($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_118
lw $t1, 476($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 480($sp)
#VCall out_string
move $t0, $sp
# Arg instance_118
lw $t1, 476($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 544($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 544($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 468($sp)
#AssignNode result_95 = result_116
lw $t1, 468($sp)
sw $t1, 384($sp)
#LabelNode label_12
label_12:
#GetAttr Main.stop = Main.stop
lw $t0, 544($sp)
lw $t1, 28($t0)
sw $t1, 504($sp)
#GetAttr Main.testee = Main.testee
lw $t0, 544($sp)
lw $t1, 20($t0)
sw $t1, 508($sp)
#GetAttr left_123 = Int.value
lw $t0, 504($sp)
lw $t1, 16($t0)
sw $t1, 496($sp)
#GetAttr right_124 = Int.value
lw $t0, 508($sp)
lw $t1, 16($t0)
sw $t1, 500($sp)
#BinaryOperator left_123 <= right_124
lw $a0, 496($sp)
lw $t1, 500($sp)
sle $a0, $a0, $t1
sw $a0, 492($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 488($sp)
#CallNode Bool_init
move $t0, $sp
# Arg op_122
lw $t1, 492($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_121
lw $t1, 488($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 512($sp)
# IFGoto result_121 -> label_13
lw $t0, 488($sp)
lw $a0, 16($t0)
bnez $a0, label_13
#LoadStr msg_5
la $t0, msg_5
sw $t0, 516($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 520($sp)
#CallNode String_init
move $t0, $sp
# Arg l_128
lw $t1, 516($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_129
lw $t1, 520($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 524($sp)
#AssignNode result_120 = instance_129
lw $t1, 520($sp)
sw $t1, 484($sp)
#Goto label_14
b label_14
#LabelNode label_13
label_13:
#LoadStr msg_6
la $t0, msg_6
sw $t0, 532($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 536($sp)
#CallNode String_init
move $t0, $sp
# Arg l_132
lw $t1, 532($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_133
lw $t1, 536($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 540($sp)
#VCall abort
move $t0, $sp
# Arg instance_133
lw $t1, 536($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 536($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 528($sp)
#AssignNode result_120 = result_131
lw $t1, 528($sp)
sw $t1, 484($sp)
#LabelNode label_14
label_14:
#Goto label_1
b label_1
#LabelNode label_3
label_3:
#SetAttr Mainm = result_15
lw $t0, 544($sp)
lw $t1, 64($sp)
sw $t1, 32($t0)
lw $ra, 0($sp)
addi $sp, $sp, 548
jr $ra
Main.main:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra