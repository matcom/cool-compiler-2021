.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type A {
    attribute io;
    method Object_abort;
    method A_type_name;
    method A_copy;
    method A_out_a;
  }
  type B {
    attribute io;
    method Object_abort;
    method B_type_name;
    method B_copy;
    method A_out_a;
    method B_out_b;
  }
  type C {
    method Object_abort;
    method C_type_name;
    method C_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method C_out_c;
  }
  type D {
    method Object_abort;
    method D_type_name;
    method D_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method C_out_c;
    method D_out_d;
  }
  type Main {
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_A = "A";
  data_7_type_name_B = "B";
  data_8_type_name_C = "C";
  data_9_type_name_D = "D";
  data_10_type_name_Main = "Main";
  data_11_sep_cat = " ++ ";
  data_12_string = "A: Hello world\n";
  data_13_eol = "\n";
  data_14_under = "_";
  data_15_meth = "out_string";
  data_16_string = "B: Hello world\n";
  data_17_string = "C: Hello world\n";
  data_18_string = "D: Hello world\n";
  data_19_meth = "out_a";
  data_20_meth = "out_b";
  data_21_meth = "out_c";
  data_22_meth = "out_d";
  data_23_string = "Done.\n";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function A_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_A;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function A_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE A;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    RETURN local_copy;
  }

  function B_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_B;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function B_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE B;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    RETURN local_copy;
  }

  function C_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_type_name_C;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function C_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE C;
    RETURN local_copy;
  }

  function D_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_9_type_name_D;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function D_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE D;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_10_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Main;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_str_attr = length(local_length)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_self_str_attr;
    LOCAL local_other_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_8;

    local_0 = LOAD data_11_sep_cat;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, param_self)
    print(str, local_1)
    print(str, param_other)
    local_self_str_attr = GETATTR param_self 0;
    local_other_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_other_len)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_8 = CALL String___init;
    RETURN local_8;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_substr;
    LOCAL local_2;

    local_self_str_local = GETATTR param_self 0;
    local_substr = substr(local_self_str_local, param_i, param_l)
    ARG local_substr;
    local_2 = CALL String___init;
    RETURN local_2;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function A___init {

    LOCAL local_self;
    LOCAL local_io;

    local_self = ALLOCATE A;
    ARG local_self;
    local_io = CALL A_io___init;
    SETATTR local_self 0 local_io;
    RETURN local_self;
  }

  function A_io___init {
    PARAM param_self;

    LOCAL local_0;

    local_0 = CALL IO___init;
    RETURN local_0;
  }

  function A_out_a {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_io;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_tname_local;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;

    local_io = GETATTR param_self 0;
    local_2 = LOAD data_12_string;
    ARG local_2;
    local_3 = CALL String___init;
    local_4 = TYPEOF local_io;
    local_6 = LOAD data_13_eol;
    ARG local_6;
    local_7 = CALL String___init;
    local_8 = LOAD data_14_under;
    ARG local_8;
    local_9 = CALL String___init;
    local_10 = LOAD data_15_meth;
    ARG local_10;
    local_11 = CALL String___init;
    local_tname_local = VCALL local_4 1;
    print(str, local_tname_local)
    print(str, local_9)
    print(str, local_11)
    print(str, local_7)
    ARG local_io;
    ARG local_3;
    local_0 = VCALL local_4 3;
    RETURN local_0;
  }

  function B___init {

    LOCAL local_self;
    LOCAL local_io;

    local_self = ALLOCATE B;
    ARG local_self;
    local_io = CALL A_io___init;
    SETATTR local_self 0 local_io;
    RETURN local_self;
  }

  function B_out_b {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_io;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_tname_local;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;

    local_io = GETATTR param_self 0;
    local_2 = LOAD data_16_string;
    ARG local_2;
    local_3 = CALL String___init;
    local_4 = TYPEOF local_io;
    local_6 = LOAD data_13_eol;
    ARG local_6;
    local_7 = CALL String___init;
    local_8 = LOAD data_14_under;
    ARG local_8;
    local_9 = CALL String___init;
    local_10 = LOAD data_15_meth;
    ARG local_10;
    local_11 = CALL String___init;
    local_tname_local = VCALL local_4 1;
    print(str, local_tname_local)
    print(str, local_9)
    print(str, local_11)
    print(str, local_7)
    ARG local_io;
    ARG local_3;
    local_0 = VCALL local_4 3;
    RETURN local_0;
  }

  function C___init {

    LOCAL local_self;

    local_self = ALLOCATE C;
    RETURN local_self;
  }

  function C_out_c {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_tname_local;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;

    local_1 = LOAD data_17_string;
    ARG local_1;
    local_2 = CALL String___init;
    local_3 = TYPEOF param_self;
    local_5 = LOAD data_13_eol;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = LOAD data_14_under;
    ARG local_7;
    local_8 = CALL String___init;
    local_9 = LOAD data_15_meth;
    ARG local_9;
    local_10 = CALL String___init;
    local_tname_local = VCALL local_3 1;
    print(str, local_tname_local)
    print(str, local_8)
    print(str, local_10)
    print(str, local_6)
    ARG param_self;
    ARG local_2;
    local_0 = VCALL local_3 3;
    RETURN local_0;
  }

  function D___init {

    LOCAL local_self;

    local_self = ALLOCATE D;
    RETURN local_self;
  }

  function D_out_d {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_tname_local;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;

    local_1 = LOAD data_18_string;
    ARG local_1;
    local_2 = CALL String___init;
    local_3 = TYPEOF param_self;
    local_5 = LOAD data_13_eol;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = LOAD data_14_under;
    ARG local_7;
    local_8 = CALL String___init;
    local_9 = LOAD data_15_meth;
    ARG local_9;
    local_10 = CALL String___init;
    local_tname_local = VCALL local_3 1;
    print(str, local_tname_local)
    print(str, local_8)
    print(str, local_10)
    print(str, local_6)
    ARG param_self;
    ARG local_2;
    local_0 = VCALL local_3 3;
    RETURN local_0;
  }

  function Main___init {

    LOCAL local_self;

    local_self = ALLOCATE Main;
    RETURN local_self;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_tname_local;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_tname_local;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_tname_local;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_tname_local;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_tname_local;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;

    local_1 = CALL A___init;
    local_2 = TYPEOF local_1;
    local_4 = LOAD data_13_eol;
    ARG local_4;
    local_5 = CALL String___init;
    local_6 = LOAD data_14_under;
    ARG local_6;
    local_7 = CALL String___init;
    local_8 = LOAD data_19_meth;
    ARG local_8;
    local_9 = CALL String___init;
    local_tname_local = VCALL local_2 1;
    print(str, local_tname_local)
    print(str, local_7)
    print(str, local_9)
    print(str, local_5)
    ARG local_1;
    local_0 = VCALL local_2 3;
    local_11 = CALL B___init;
    local_12 = TYPEOF local_11;
    local_14 = LOAD data_13_eol;
    ARG local_14;
    local_15 = CALL String___init;
    local_16 = LOAD data_14_under;
    ARG local_16;
    local_17 = CALL String___init;
    local_18 = LOAD data_20_meth;
    ARG local_18;
    local_19 = CALL String___init;
    local_tname_local = VCALL local_12 1;
    print(str, local_tname_local)
    print(str, local_17)
    print(str, local_19)
    print(str, local_15)
    ARG local_11;
    local_10 = VCALL local_12 4;
    local_21 = CALL C___init;
    local_22 = TYPEOF local_21;
    local_24 = LOAD data_13_eol;
    ARG local_24;
    local_25 = CALL String___init;
    local_26 = LOAD data_14_under;
    ARG local_26;
    local_27 = CALL String___init;
    local_28 = LOAD data_21_meth;
    ARG local_28;
    local_29 = CALL String___init;
    local_tname_local = VCALL local_22 1;
    print(str, local_tname_local)
    print(str, local_27)
    print(str, local_29)
    print(str, local_25)
    ARG local_21;
    local_20 = VCALL local_22 7;
    local_31 = CALL D___init;
    local_32 = TYPEOF local_31;
    local_34 = LOAD data_13_eol;
    ARG local_34;
    local_35 = CALL String___init;
    local_36 = LOAD data_14_under;
    ARG local_36;
    local_37 = CALL String___init;
    local_38 = LOAD data_22_meth;
    ARG local_38;
    local_39 = CALL String___init;
    local_tname_local = VCALL local_32 1;
    print(str, local_tname_local)
    print(str, local_37)
    print(str, local_39)
    print(str, local_35)
    ARG local_31;
    local_30 = VCALL local_32 8;
    local_41 = LOAD data_23_string;
    ARG local_41;
    local_42 = CALL String___init;
    local_43 = TYPEOF param_self;
    local_45 = LOAD data_13_eol;
    ARG local_45;
    local_46 = CALL String___init;
    local_47 = LOAD data_14_under;
    ARG local_47;
    local_48 = CALL String___init;
    local_49 = LOAD data_15_meth;
    ARG local_49;
    local_50 = CALL String___init;
    local_tname_local = VCALL local_43 1;
    print(str, local_tname_local)
    print(str, local_48)
    print(str, local_50)
    print(str, local_46)
    ARG param_self;
    ARG local_42;
    local_40 = VCALL local_43 3;
    RETURN local_40;
  }

