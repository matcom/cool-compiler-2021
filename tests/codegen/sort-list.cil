.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Object_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Object_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method Object_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type List {
    method Object_abort;
    method List_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method List_isNil;
    method List_cons;
    method List_car;
    method List_cdr;
    method List_rev;
    method List_sort;
    method List_insert;
    method List_rcons;
    method List_print_list;
  }
  type Cons {
    attribute xcar;
    attribute xcdr;
    method Object_abort;
    method Cons_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Cons_isNil;
    method List_cons;
    method Cons_car;
    method Cons_cdr;
    method Cons_rev;
    method Cons_sort;
    method Cons_insert;
    method Cons_rcons;
    method Cons_print_list;
    method Cons_init;
  }
  type Nil {
    method Object_abort;
    method Nil_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Nil_isNil;
    method List_cons;
    method List_car;
    method List_cdr;
    method Nil_rev;
    method Nil_sort;
    method Nil_insert;
    method Nil_rcons;
    method Nil_print_list;
  }
  type Main {
    attribute l;
    method Object_abort;
    method Main_type_name;
    method Object_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_iota;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_abort_msg = "Program Halted!";
  data_2_type_name_Object = "Object";
  data_3_type_name_Int = "Int";
  data_4_type_name_Bool = "Bool";
  data_5_type_name_String = "String";
  data_6_type_name_IO = "IO";
  data_7_type_name_List = "List";
  data_8_type_name_Cons = "Cons";
  data_9_type_name_Nil = "Nil";
  data_10_type_name_Main = "Main";
  data_11_string = "\n";
  data_12_string = "How many numbers to sort? ";

.code

  function Void_init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main_init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_abort_msg;
    ARG local_0;
    local_1 = CALL String_init;
    print(str, local_1
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Object;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Int;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_Bool;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_String;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_IO;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function List_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_7_type_name_List;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Cons_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_8_type_name_Cons;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Nil_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_9_type_name_Nil;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_10_type_name_Main;
    ARG local_0;
    local_1 = CALL String_init;
    RETURN local_1;
  }

  function IO_out_string {
    PARAM param_str;
    PARAM param_self;


    print(str, param_str
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_length;
    LOCAL local_1;

    param_self = length(local_length)
    ARG local_length;
    local_1 = CALL Int_init;
    RETURN local_1;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_4;

    local_self_len = length(param_self)
    local_other_len = length(param_other)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(param_self, param_other, local_concat_len)
    ARG local_concat;
    local_4 = CALL String_init;
    RETURN local_4;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_substr;

    local_substr = substr(param_self, param_i, param_l)
    RETURN local_substr;
  }

  function Object_init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String_init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function List_init {

    LOCAL local_self;

    local_self = ALLOCATE List;
    RETURN local_self;
  }

  function List_isNil {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 0;
    local_2 = LOAD 1;
    ARG local_2;
    local_3 = CALL Bool_init;
    RETURN local_3;
  }

  function List_cons {
    PARAM param_self;
    PARAM param_hd;

    LOCAL local_new_cell;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;

    local_1 = CALL Cons_init;
    local_3 = TYPEOF local_new_cell;
    ARG local_new_cell;
    ARG param_hd;
    ARG param_self;
    local_2 = VCALL local_3 16;
    RETURN local_2;
  }

  function List_car {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 0;
    local_3 = LOAD 0;
    ARG local_3;
    local_2 = CALL Int_init;
    RETURN local_2;
  }

  function List_cdr {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 0;
    local_2 = CALL List_init;
    RETURN local_2;
  }

  function List_rev {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 10;
    RETURN local_0;
  }

  function List_sort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 10;
    RETURN local_0;
  }

  function List_insert {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_1;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 10;
    RETURN local_0;
  }

  function List_rcons {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_1;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 10;
    RETURN local_0;
  }

  function List_print_list {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_1 = TYPEOF param_self;
    ARG param_self;
    local_0 = VCALL local_1 0;
    RETURN local_0;
  }

  function Cons_init {

    LOCAL local_self;
    LOCAL local_xcar;
    LOCAL local_xcdr;

    local_self = ALLOCATE Cons;
    local_xcar = CALL Cons_xcar_init;
    SETATTR local_self 0 local_xcar;
    local_xcdr = CALL Cons_xcdr_init;
    SETATTR local_self 1 local_xcdr;
    RETURN local_self;
  }



  function Cons_isNil {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Bool_init;
    RETURN local_1;
  }

  function Cons_init {
    PARAM param_self;
    PARAM param_hd;
    PARAM param_tl;

    LOCAL local_xcar;
    LOCAL local_xcdr;

    SETATTR param_self 0 local_xcar;
    SETATTR param_self 1 local_xcdr;
    RETURN param_self;
  }

  function Cons_car {
    PARAM param_self;

    LOCAL local_xcar;

    local_xcar = GETATTR param_self 0;
    RETURN local_xcar;
  }

  function Cons_cdr {
    PARAM param_self;

    LOCAL local_xcdr;

    local_xcdr = GETATTR param_self 1;
    RETURN local_xcdr;
  }

  function Cons_rev {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_xcdr;
    LOCAL local_3;
    LOCAL local_xcar;
    LOCAL local_5;

    local_xcdr = GETATTR param_self 1;
    local_3 = TYPEOF local_xcdr;
    ARG local_xcdr;
    local_1 = VCALL local_3 11;
    local_xcar = GETATTR param_self 0;
    local_5 = TYPEOF local_1;
    ARG local_1;
    ARG local_xcar;
    local_0 = VCALL local_5 14;
    RETURN local_0;
  }

  function Cons_sort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_xcdr;
    LOCAL local_3;
    LOCAL local_xcar;
    LOCAL local_5;

    local_xcdr = GETATTR param_self 1;
    local_3 = TYPEOF local_xcdr;
    ARG local_xcdr;
    local_1 = VCALL local_3 12;
    local_xcar = GETATTR param_self 0;
    local_5 = TYPEOF local_1;
    ARG local_1;
    ARG local_xcar;
    local_0 = VCALL local_5 13;
    RETURN local_0;
  }

  function Cons_insert {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_xcar;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_xcdr;
    LOCAL local_13;
    LOCAL local_14;

    local_1 = GETATTR param_i 0;
    local_xcar = GETATTR param_self 0;
    local_3 = GETATTR local_xcar 0;
    local_4 = local_3 - local_1
    ARG local_4;
    local_5 = CALL Bool_init;
    IF local_5 GOTO label_then_0;
    GOTO label_else_0;
    LABEL label_then_0;
    local_7 = CALL Cons_init;
    local_8 = TYPEOF local_7;
    ARG local_7;
    ARG param_i;
    ARG param_self;
    local_6 = VCALL local_8 16;
    GOTO label_continue_0;
    LABEL label_else_0;
    local_10 = CALL Cons_init;
    local_xcdr = GETATTR param_self 1;
    local_13 = TYPEOF local_xcdr;
    ARG local_xcdr;
    ARG param_i;
    local_11 = VCALL local_13 13;
    local_14 = TYPEOF local_10;
    ARG local_10;
    ARG local_xcar;
    ARG local_11;
    local_9 = VCALL local_14 16;
    LABEL label_continue_0;
    RETURN local_0;
  }

  function Cons_rcons {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_xcar;
    LOCAL local_3;
    LOCAL local_xcdr;
    LOCAL local_5;
    LOCAL local_6;

    local_1 = CALL Cons_init;
    local_xcar = GETATTR param_self 0;
    local_xcdr = GETATTR param_self 1;
    local_5 = TYPEOF local_xcdr;
    ARG local_xcdr;
    ARG param_i;
    local_3 = VCALL local_5 14;
    local_6 = TYPEOF local_1;
    ARG local_1;
    ARG local_xcar;
    ARG local_3;
    local_0 = VCALL local_6 16;
    RETURN local_0;
  }

  function Cons_print_list {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_xcar;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_xcdr;
    LOCAL local_9;

    local_xcar = GETATTR param_self 0;
    local_2 = TYPEOF param_self;
    ARG param_self;
    ARG local_xcar;
    local_0 = VCALL local_2 4;
    local_4 = LOAD data_11_string;
    ARG local_4;
    local_5 = CALL String_init;
    local_6 = TYPEOF param_self;
    ARG param_self;
    ARG local_5;
    local_3 = VCALL local_6 3;
    local_xcdr = GETATTR param_self 1;
    local_9 = TYPEOF local_xcdr;
    ARG local_xcdr;
    local_7 = VCALL local_9 15;
    RETURN local_7;
  }

  function Nil_init {

    LOCAL local_self;

    local_self = ALLOCATE Nil;
    RETURN local_self;
  }

  function Nil_isNil {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 1;
    ARG local_0;
    local_1 = CALL Bool_init;
    RETURN local_1;
  }

  function Nil_rev {
    PARAM param_self;


    RETURN param_self;
  }

  function Nil_sort {
    PARAM param_self;


    RETURN param_self;
  }

  function Nil_insert {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_1;

    local_1 = TYPEOF param_self;
    ARG param_self;
    ARG param_i;
    local_0 = VCALL local_1 14;
    RETURN local_0;
  }

  function Nil_rcons {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;

    local_1 = CALL Cons_init;
    local_2 = TYPEOF local_1;
    ARG local_1;
    ARG param_i;
    ARG param_self;
    local_0 = VCALL local_2 16;
    RETURN local_0;
  }

  function Nil_print_list {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 1;
    ARG local_0;
    local_1 = CALL Bool_init;
    RETURN local_1;
  }

  function Main_init {

    LOCAL local_self;
    LOCAL local_l;

    local_self = ALLOCATE Main;
    local_l = CALL Main_l_init;
    SETATTR local_self 0 local_l;
    RETURN local_self;
  }


  function Main_iota {
    PARAM param_self;
    PARAM param_i;

    LOCAL local_0;
    LOCAL local_l;
    LOCAL local_j;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_14;
    LOCAL local_15;
    LOCAL local_16;

    local_0 = CALL Nil_init;
    SETATTR param_self 0 local_l;
    local_3 = LOAD 0;
    ARG local_3;
    local_4 = CALL Int_init;
    LABEL label_while_label_0;
    local_5 = GETATTR local_j 0;
    local_6 = GETATTR param_i 0;
    local_7 = local_6 - local_5
    ARG local_7;
    local_8 = CALL Bool_init;
    IF local_8 GOTO label_loop_label_0;
    GOTO label_pool_label_0;
    LABEL label_loop_label_0;
    local_10 = CALL Cons_init;
    local_11 = TYPEOF local_10;
    ARG local_10;
    ARG local_j;
    ARG local_l;
    local_9 = VCALL local_11 16;
    local_12 = GETATTR local_j 0;
    local_13 = LOAD 1;
    ARG local_13;
    local_14 = CALL Int_init;
    local_15 = GETATTR local_14 0;
    local_16 = local_12 + local_15
    GOTO label_while_label_0;
    LABEL label_pool_label_0;
    RETURN local_l;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;

    local_1 = LOAD data_12_string;
    ARG local_1;
    local_2 = CALL String_init;
    local_3 = TYPEOF param_self;
    ARG param_self;
    ARG local_2;
    local_0 = VCALL local_3 3;
    local_9 = TYPEOF param_self;
    ARG param_self;
    local_8 = VCALL local_9 6;
    local_10 = TYPEOF param_self;
    ARG param_self;
    ARG local_8;
    local_7 = VCALL local_10 7;
    local_11 = TYPEOF local_7;
    ARG local_7;
    local_6 = VCALL local_11 11;
    local_12 = TYPEOF local_6;
    ARG local_6;
    local_5 = VCALL local_12 12;
    local_13 = TYPEOF local_5;
    ARG local_5;
    local_4 = VCALL local_13 15;
    RETURN local_4;
  }

