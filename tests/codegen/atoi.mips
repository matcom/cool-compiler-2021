	.globl main

	.data
data_0_abort_msg: .asciiz "Program Halted!"
data_1_type_name_Object: .asciiz "Object"
data_2_type_name_Int: .asciiz "Int"
data_3_type_name_Bool: .asciiz "Bool"
data_4_type_name_String: .asciiz "String"
data_5_type_name_IO: .asciiz "IO"
data_6_type_name_A2I: .asciiz "A2I"
data_7_type_name_Main: .asciiz "Main"
data_8_string: .asciiz "0"
data_9_string: .asciiz "1"
data_10_string: .asciiz "2"
data_11_string: .asciiz "3"
data_12_string: .asciiz "4"
data_13_string: .asciiz "5"
data_14_string: .asciiz "6"
data_15_string: .asciiz "7"
data_16_string: .asciiz "8"
data_17_string: .asciiz "9"
data_18_string: .asciiz ""
data_19_string: .asciiz "-"
data_20_string: .asciiz "+"
data_21_string: .asciiz "678987"
data_22_string: .asciiz " == "
data_23_string: .asciiz "\n"
Object: .word Object_abort,Object_type_name,Object_copy
Int: .word Object_abort,Int_type_name,Int_copy
Bool: .word Object_abort,Bool_type_name,Bool_copy
String: .word Object_abort,String_type_name,String_copy,String_length,String_concat,String_substr
IO: .word Object_abort,IO_type_name,IO_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int
A2I: .word Object_abort,A2I_type_name,A2I_copy,A2I_c2i,A2I_i2c,A2I_a2i,A2I_a2i_aux,A2I_i2a,A2I_i2a_aux
Main: .word Object_abort,Main_type_name,Main_copy,IO_out_string,IO_out_int,IO_in_string,IO_in_int,Main_main

	.text
Void___init:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Void
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	li $t2, 0 	#Save value 0 in register
	sw $t2, 0($v0) 	#Save value 0 in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t3, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
main:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal Main___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 0($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Main_main 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 10 	#EXIT
	syscall 	#
Object_abort:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t8, data_0_abort_msg 	#LOAD
	sw $t8, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $v0, 4 	#PRINT
	lw $t4, 4($fp) 	#
	lw $a0, 0($t4) 	#
	syscall 	#
	li $v0, 10 	#EXIT
	syscall 	#
Object_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_1_type_name_Object 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t4, 0($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object_copy:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t3, Object 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_type_name:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t4, data_2_type_name_Int 	#LOAD
	sw $t4, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int_copy:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t0, Int 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_type_name:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t2, data_3_type_name_Bool 	#LOAD
	sw $t2, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool_copy:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t2, Bool 	#Save type address in register
	sw $t2, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_type_name:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t5, data_4_type_name_String 	#LOAD
	sw $t5, 0($fp) 	#Save loaded value in destination
	lw $t8, 0($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_copy:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t5, String 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_type_name:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t3, data_5_type_name_IO 	#LOAD
	sw $t3, 0($fp) 	#Save loaded value in destination
	lw $t5, 0($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type IO
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t6, IO 	#Save type address in register
	sw $t6, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t4, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_type_name:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t7, data_6_type_name_A2I 	#LOAD
	sw $t7, 0($fp) 	#Save loaded value in destination
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_copy:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A2I
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t3, A2I 	#Save type address in register
	sw $t3, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_type_name:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 8 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	la $t0, data_7_type_name_Main 	#LOAD
	sw $t0, 0($fp) 	#Save loaded value in destination
	lw $t2, 0($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 4($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 4($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -8 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_copy:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t9, Main 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_string:
	move $t3, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 4 	#PRINT
	lw $t6, -4($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t5, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_out_int:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 0 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 1 	#PRINT
	lw $t6, -4($fp) 	#
	lw $a0, 0($t6) 	#
	syscall 	#
	lw $t3, -8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, 0 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_string:
	move $t4, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t4, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
IO_in_int:
	move $t2, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t1, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_length:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 12 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 0($fp) 	#Save obtained attribute in destination
	lw $a0, 0($fp) 	#Calculate Lenght
	li $t4, 0 	#
loop1:
	lb $t5, 0($a0) 	#
	beqz $t5, exit1 	#
	addi $a0,  $a0, 1 	#
	addi $t4,  $t4, 1 	#
	j loop1 	#
exit1:
	sw $t4, 4($fp) 	#Save Calculated Length
	lw $t7, 4($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 8($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -12 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_concat:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 28 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t4, -8($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 0($fp) 	#Save obtained attribute in destination
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 4($fp) 	#Save obtained attribute in destination
	lw $a0, 0($fp) 	#Calculate Lenght
	li $t0, 0 	#
loop2:
	lb $t2, 0($a0) 	#
	beqz $t2, exit2 	#
	addi $a0,  $a0, 1 	#
	addi $t0,  $t0, 1 	#
	j loop2 	#
exit2:
	sw $t0, 12($fp) 	#Save Calculated Length
	lw $a0, 4($fp) 	#Calculate Lenght
	li $t4, 0 	#
loop3:
	lb $t9, 0($a0) 	#
	beqz $t9, exit3 	#
	addi $a0,  $a0, 1 	#
	addi $t4,  $t4, 1 	#
	j loop3 	#
exit3:
	sw $t4, 16($fp) 	#Save Calculated Length
	lw $t6, 16($fp) 	#
	lw $t9, 12($fp) 	#
	add $t0,  $t6, $t9 	#Plus
	sw $t0, 20($fp) 	#Save result of plus
	lw $t8, 20($fp) 	#Concat two Strings
	addi $t8,  $t8, 1 	#
	li $v0, 9 	#
	move $a0, $t8 	#
	syscall 	#
	la $t3, 0($v0) 	#
	lw $a1, 0($fp) 	#
	lw $a2, 4($fp) 	#
loop4:
	lb $t8, 0($a1) 	#
	beqz $t8, exit4 	#
	sb $t8, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	j loop4 	#
exit4:
loop5:
	lb $t8, 0($a2) 	#
	sb $t8, 0($v0) 	#
	beqz $t8, exit5 	#
	addi $v0,  $v0, 1 	#
	addi $a2,  $a2, 1 	#
	j loop5 	#
exit5:
	sw $t3, 8($fp) 	#Save concated Strings
	lw $t7, 8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 24($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -28 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String_substr:
	move $t1, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 20 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t1, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -12($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 0($fp) 	#Save obtained attribute in destination
	lw $t6, -8($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 4($fp) 	#Save obtained attribute in destination
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t0) 	#Load attribute in index 0
	sw $t9, 8($fp) 	#Save obtained attribute in destination
	lw $t0, 8($fp) 	#Obtain substring
	move $t2, $t0 	#
	addi $t2,  $t2, 1 	#
	li $v0, 9 	#
	move $a0, $t2 	#
	syscall 	#
	la $t8, 0($v0) 	#
	lw $t6, 4($fp) 	#
	lw $a1, 0($fp) 	#
	add $a1,  $a1, $t6 	#
loop6:
	lb $t7, 0($a1) 	#
	beqz $t0, exit6 	#
	sb $t7, 0($v0) 	#
	addi $v0,  $v0, 1 	#
	addi $a1,  $a1, 1 	#
	addi $t0,  $t0, -1 	#
	j loop6 	#
exit6:
	li $t7, 0 	#
	sb $t7, 0($v0) 	#
	sw $t8, 12($fp) 	#Save substring
	lw $t5, 12($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 16($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -20 	#Remove locals from Stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Object___init:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Object
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, Object 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Int___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Int
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t9, Int 	#Save type address in register
	sw $t9, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, -4($fp) 	#Obtain value from source dir
	lw $t2, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t2) 	#Save value in attribute of index 0
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Bool___init:
	move $t8, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Bool
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t4, Bool 	#Save type address in register
	sw $t4, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t6, -4($fp) 	#Obtain value from source dir
	lw $t7, 0($fp) 	#Dir of instance of attribute to set
	sw $t6, 0($t7) 	#Save value in attribute of index 0
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
String___init:
	move $t7, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type String
	li $a0, 8 	#Save 8 bytes
	syscall 	#
	la $t5, String 	#Save type address in register
	sw $t5, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, -4($fp) 	#Obtain value from source dir
	lw $t3, 0($fp) 	#Dir of instance of attribute to set
	sw $t0, 0($t3) 	#Save value in attribute of index 0
	lw $t8, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t8, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type A2I
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t0, A2I 	#Save type address in register
	sw $t0, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_c2i:
	move $t6, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 416 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t8) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	la $t3, data_8_string 	#LOAD
	sw $t3, 8($fp) 	#Save loaded value in destination
	lw $t4, 8($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 12($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 16($fp) 	#Save obtained attribute in destination
	lw $t5, 4($fp) 	#
	lw $t7, 16($fp) 	#
loop7:
	lb $t0, 0($t5) 	#
	lb $t3, 0($t7) 	#
	beqz $t0, exit7 	#
	beqz $t3, exit8 	#
	addi $t5,  $t5, 1 	#
	addi $t7,  $t7, 1 	#
	beq $t0, $t3, loop7 	#
	j exit10 	#
exit7:
	beqz $t3, exit9 	#
	j exit10 	#
exit8:
	beqz $t0, exit9 	#
	j exit10 	#
exit9:
	li $t4, 1 	#
	j exit11 	#
exit10:
	li $t4, 0 	#
	j exit11 	#
exit11:
	sw $t4, 20($fp) 	#
	lw $t7, 20($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 24($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 24($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t1) 	#Load attribute in index 0
	sw $t4, 28($fp) 	#Save obtained attribute in destination
	lw $t4, 28($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_0 	#Compare values in registers and jump to label_then_0 if the second is greater than 0
label_else_0:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t5) 	#Load attribute in index 0
	sw $t6, 36($fp) 	#Save obtained attribute in destination
	la $t6, data_9_string 	#LOAD
	sw $t6, 40($fp) 	#Save loaded value in destination
	lw $t3, 40($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 44($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 44($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t0) 	#Load attribute in index 0
	sw $t1, 48($fp) 	#Save obtained attribute in destination
	lw $t6, 36($fp) 	#
	lw $t1, 48($fp) 	#
loop8:
	lb $t5, 0($t6) 	#
	lb $t3, 0($t1) 	#
	beqz $t5, exit12 	#
	beqz $t3, exit13 	#
	addi $t6,  $t6, 1 	#
	addi $t1,  $t1, 1 	#
	beq $t5, $t3, loop8 	#
	j exit15 	#
exit12:
	beqz $t3, exit14 	#
	j exit15 	#
exit13:
	beqz $t5, exit14 	#
	j exit15 	#
exit14:
	li $t7, 1 	#
	j exit16 	#
exit15:
	li $t7, 0 	#
	j exit16 	#
exit16:
	sw $t7, 52($fp) 	#
	lw $t2, 52($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 56($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 60($fp) 	#Save obtained attribute in destination
	lw $t0, 60($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_1 	#Compare values in registers and jump to label_then_1 if the second is greater than 0
label_else_1:
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 68($fp) 	#Save obtained attribute in destination
	la $t1, data_10_string 	#LOAD
	sw $t1, 72($fp) 	#Save loaded value in destination
	lw $t3, 72($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 76($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 80($fp) 	#Save obtained attribute in destination
	lw $t3, 68($fp) 	#
	lw $t9, 80($fp) 	#
loop9:
	lb $t1, 0($t3) 	#
	lb $t8, 0($t9) 	#
	beqz $t1, exit17 	#
	beqz $t8, exit18 	#
	addi $t3,  $t3, 1 	#
	addi $t9,  $t9, 1 	#
	beq $t1, $t8, loop9 	#
	j exit20 	#
exit17:
	beqz $t8, exit19 	#
	j exit20 	#
exit18:
	beqz $t1, exit19 	#
	j exit20 	#
exit19:
	li $t0, 1 	#
	j exit21 	#
exit20:
	li $t0, 0 	#
	j exit21 	#
exit21:
	sw $t0, 84($fp) 	#
	lw $t5, 84($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 88($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 92($fp) 	#Save obtained attribute in destination
	lw $t8, 92($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_2 	#Compare values in registers and jump to label_then_2 if the second is greater than 0
label_else_2:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 100($fp) 	#Save obtained attribute in destination
	la $t5, data_11_string 	#LOAD
	sw $t5, 104($fp) 	#Save loaded value in destination
	lw $t5, 104($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 108($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t6) 	#Load attribute in index 0
	sw $t2, 112($fp) 	#Save obtained attribute in destination
	lw $t8, 100($fp) 	#
	lw $t1, 112($fp) 	#
loop10:
	lb $t6, 0($t8) 	#
	lb $t2, 0($t1) 	#
	beqz $t6, exit22 	#
	beqz $t2, exit23 	#
	addi $t8,  $t8, 1 	#
	addi $t1,  $t1, 1 	#
	beq $t6, $t2, loop10 	#
	j exit25 	#
exit22:
	beqz $t2, exit24 	#
	j exit25 	#
exit23:
	beqz $t6, exit24 	#
	j exit25 	#
exit24:
	li $t7, 1 	#
	j exit26 	#
exit25:
	li $t7, 0 	#
	j exit26 	#
exit26:
	sw $t7, 116($fp) 	#
	lw $t6, 116($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 120($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 120($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 124($fp) 	#Save obtained attribute in destination
	lw $t4, 124($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_3 	#Compare values in registers and jump to label_then_3 if the second is greater than 0
label_else_3:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t4) 	#Load attribute in index 0
	sw $t7, 132($fp) 	#Save obtained attribute in destination
	la $t5, data_12_string 	#LOAD
	sw $t5, 136($fp) 	#Save loaded value in destination
	lw $t1, 136($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 140($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 140($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t5) 	#Load attribute in index 0
	sw $t4, 144($fp) 	#Save obtained attribute in destination
	lw $t5, 132($fp) 	#
	lw $t4, 144($fp) 	#
loop11:
	lb $t7, 0($t5) 	#
	lb $t8, 0($t4) 	#
	beqz $t7, exit27 	#
	beqz $t8, exit28 	#
	addi $t5,  $t5, 1 	#
	addi $t4,  $t4, 1 	#
	beq $t7, $t8, loop11 	#
	j exit30 	#
exit27:
	beqz $t8, exit29 	#
	j exit30 	#
exit28:
	beqz $t7, exit29 	#
	j exit30 	#
exit29:
	li $t2, 1 	#
	j exit31 	#
exit30:
	li $t2, 0 	#
	j exit31 	#
exit31:
	sw $t2, 148($fp) 	#
	lw $t4, 148($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 152($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 152($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 156($fp) 	#Save obtained attribute in destination
	lw $t7, 156($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_4 	#Compare values in registers and jump to label_then_4 if the second is greater than 0
label_else_4:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 164($fp) 	#Save obtained attribute in destination
	la $t2, data_13_string 	#LOAD
	sw $t2, 168($fp) 	#Save loaded value in destination
	lw $t1, 168($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 172($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t1) 	#Load attribute in index 0
	sw $t4, 176($fp) 	#Save obtained attribute in destination
	lw $t9, 164($fp) 	#
	lw $t0, 176($fp) 	#
loop12:
	lb $t1, 0($t9) 	#
	lb $t4, 0($t0) 	#
	beqz $t1, exit32 	#
	beqz $t4, exit33 	#
	addi $t9,  $t9, 1 	#
	addi $t0,  $t0, 1 	#
	beq $t1, $t4, loop12 	#
	j exit35 	#
exit32:
	beqz $t4, exit34 	#
	j exit35 	#
exit33:
	beqz $t1, exit34 	#
	j exit35 	#
exit34:
	li $t3, 1 	#
	j exit36 	#
exit35:
	li $t3, 0 	#
	j exit36 	#
exit36:
	sw $t3, 180($fp) 	#
	lw $t9, 180($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 184($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 188($fp) 	#Save obtained attribute in destination
	lw $t6, 188($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_5 	#Compare values in registers and jump to label_then_5 if the second is greater than 0
label_else_5:
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 196($fp) 	#Save obtained attribute in destination
	la $t3, data_14_string 	#LOAD
	sw $t3, 200($fp) 	#Save loaded value in destination
	lw $t0, 200($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 204($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t6) 	#Load attribute in index 0
	sw $t1, 208($fp) 	#Save obtained attribute in destination
	lw $t5, 196($fp) 	#
	lw $t2, 208($fp) 	#
loop13:
	lb $t0, 0($t5) 	#
	lb $t7, 0($t2) 	#
	beqz $t0, exit37 	#
	beqz $t7, exit38 	#
	addi $t5,  $t5, 1 	#
	addi $t2,  $t2, 1 	#
	beq $t0, $t7, loop13 	#
	j exit40 	#
exit37:
	beqz $t7, exit39 	#
	j exit40 	#
exit38:
	beqz $t0, exit39 	#
	j exit40 	#
exit39:
	li $t6, 1 	#
	j exit41 	#
exit40:
	li $t6, 0 	#
	j exit41 	#
exit41:
	sw $t6, 212($fp) 	#
	lw $t2, 212($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 216($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 216($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t9) 	#Load attribute in index 0
	sw $t7, 220($fp) 	#Save obtained attribute in destination
	lw $t1, 220($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_6 	#Compare values in registers and jump to label_then_6 if the second is greater than 0
label_else_6:
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 228($fp) 	#Save obtained attribute in destination
	la $t8, data_15_string 	#LOAD
	sw $t8, 232($fp) 	#Save loaded value in destination
	lw $t7, 232($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 236($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 236($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 240($fp) 	#Save obtained attribute in destination
	lw $t8, 228($fp) 	#
	lw $t5, 240($fp) 	#
loop14:
	lb $t9, 0($t8) 	#
	lb $t1, 0($t5) 	#
	beqz $t9, exit42 	#
	beqz $t1, exit43 	#
	addi $t8,  $t8, 1 	#
	addi $t5,  $t5, 1 	#
	beq $t9, $t1, loop14 	#
	j exit45 	#
exit42:
	beqz $t1, exit44 	#
	j exit45 	#
exit43:
	beqz $t9, exit44 	#
	j exit45 	#
exit44:
	li $t4, 1 	#
	j exit46 	#
exit45:
	li $t4, 0 	#
	j exit46 	#
exit46:
	sw $t4, 244($fp) 	#
	lw $t5, 244($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 248($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 248($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t7) 	#Load attribute in index 0
	sw $t5, 252($fp) 	#Save obtained attribute in destination
	lw $t6, 252($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_7 	#Compare values in registers and jump to label_then_7 if the second is greater than 0
label_else_7:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t4) 	#Load attribute in index 0
	sw $t6, 260($fp) 	#Save obtained attribute in destination
	la $t7, data_16_string 	#LOAD
	sw $t7, 264($fp) 	#Save loaded value in destination
	lw $t3, 264($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 268($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 268($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t9) 	#Load attribute in index 0
	sw $t1, 272($fp) 	#Save obtained attribute in destination
	lw $t5, 260($fp) 	#
	lw $t4, 272($fp) 	#
loop15:
	lb $t0, 0($t5) 	#
	lb $t7, 0($t4) 	#
	beqz $t0, exit47 	#
	beqz $t7, exit48 	#
	addi $t5,  $t5, 1 	#
	addi $t4,  $t4, 1 	#
	beq $t0, $t7, loop15 	#
	j exit50 	#
exit47:
	beqz $t7, exit49 	#
	j exit50 	#
exit48:
	beqz $t0, exit49 	#
	j exit50 	#
exit49:
	li $t2, 1 	#
	j exit51 	#
exit50:
	li $t2, 0 	#
	j exit51 	#
exit51:
	sw $t2, 276($fp) 	#
	lw $t9, 276($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 280($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t3) 	#Load attribute in index 0
	sw $t6, 284($fp) 	#Save obtained attribute in destination
	lw $t3, 284($fp) 	#Mov comparisson value to register
	bgtz $t3, label_then_8 	#Compare values in registers and jump to label_then_8 if the second is greater than 0
label_else_8:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 292($fp) 	#Save obtained attribute in destination
	la $t3, data_17_string 	#LOAD
	sw $t3, 296($fp) 	#Save loaded value in destination
	lw $t9, 296($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 300($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t5) 	#Load attribute in index 0
	sw $t9, 304($fp) 	#Save obtained attribute in destination
	lw $t4, 292($fp) 	#
	lw $t0, 304($fp) 	#
loop16:
	lb $t5, 0($t4) 	#
	lb $t2, 0($t0) 	#
	beqz $t5, exit52 	#
	beqz $t2, exit53 	#
	addi $t4,  $t4, 1 	#
	addi $t0,  $t0, 1 	#
	beq $t5, $t2, loop16 	#
	j exit55 	#
exit52:
	beqz $t2, exit54 	#
	j exit55 	#
exit53:
	beqz $t5, exit54 	#
	j exit55 	#
exit54:
	li $t1, 1 	#
	j exit56 	#
exit55:
	li $t1, 0 	#
	j exit56 	#
exit56:
	sw $t1, 308($fp) 	#
	lw $t7, 308($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 312($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 312($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t0) 	#Load attribute in index 0
	sw $t1, 316($fp) 	#Save obtained attribute in destination
	lw $t1, 316($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_9 	#Compare values in registers and jump to label_then_9 if the second is greater than 0
label_else_9:
	lw $t0, -8($fp) 	#Typeof
	lw $t8, -4($t0) 	#
	sw $t8, 324($fp) 	#Save type value in destination
	lw $t9, -8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 324($fp) 	#get type dir for Dynamic Call
	lw $t5, 0($t0) 	#Get method of index 0
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 320($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	li $t3, 0 	#Load Int
	sw $t3, 328($fp) 	#Save loaded value in destination
	lw $t4, 328($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 332($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 332($fp) 	#Obtain value to assign
	sw $t9, 288($fp) 	#Assign value
	j label_continue_9 	#Jump to label_continue_9
label_then_9:
	li $t7, 9 	#Load Int
	sw $t7, 336($fp) 	#Save loaded value in destination
	lw $t3, 336($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 340($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 340($fp) 	#Obtain value to assign
	sw $t1, 288($fp) 	#Assign value
label_continue_9:
	lw $t2, 288($fp) 	#Obtain value to assign
	sw $t2, 256($fp) 	#Assign value
	j label_continue_8 	#Jump to label_continue_8
label_then_8:
	li $t7, 8 	#Load Int
	sw $t7, 344($fp) 	#Save loaded value in destination
	lw $t1, 344($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 348($fp) 	#Obtain value to assign
	sw $t2, 256($fp) 	#Assign value
label_continue_8:
	lw $t3, 256($fp) 	#Obtain value to assign
	sw $t3, 224($fp) 	#Assign value
	j label_continue_7 	#Jump to label_continue_7
label_then_7:
	li $t7, 7 	#Load Int
	sw $t7, 352($fp) 	#Save loaded value in destination
	lw $t7, 352($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 356($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 356($fp) 	#Obtain value to assign
	sw $t7, 224($fp) 	#Assign value
label_continue_7:
	lw $t8, 224($fp) 	#Obtain value to assign
	sw $t8, 192($fp) 	#Assign value
	j label_continue_6 	#Jump to label_continue_6
label_then_6:
	li $t9, 6 	#Load Int
	sw $t9, 360($fp) 	#Save loaded value in destination
	lw $t1, 360($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 364($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 364($fp) 	#Obtain value to assign
	sw $t1, 192($fp) 	#Assign value
label_continue_6:
	lw $t8, 192($fp) 	#Obtain value to assign
	sw $t8, 160($fp) 	#Assign value
	j label_continue_5 	#Jump to label_continue_5
label_then_5:
	li $t0, 5 	#Load Int
	sw $t0, 368($fp) 	#Save loaded value in destination
	lw $t2, 368($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 372($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 372($fp) 	#Obtain value to assign
	sw $t5, 160($fp) 	#Assign value
label_continue_5:
	lw $t1, 160($fp) 	#Obtain value to assign
	sw $t1, 128($fp) 	#Assign value
	j label_continue_4 	#Jump to label_continue_4
label_then_4:
	li $t5, 4 	#Load Int
	sw $t5, 376($fp) 	#Save loaded value in destination
	lw $t0, 376($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 380($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 380($fp) 	#Obtain value to assign
	sw $t5, 128($fp) 	#Assign value
label_continue_4:
	lw $t1, 128($fp) 	#Obtain value to assign
	sw $t1, 96($fp) 	#Assign value
	j label_continue_3 	#Jump to label_continue_3
label_then_3:
	li $t5, 3 	#Load Int
	sw $t5, 384($fp) 	#Save loaded value in destination
	lw $t0, 384($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 388($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 388($fp) 	#Obtain value to assign
	sw $t9, 96($fp) 	#Assign value
label_continue_3:
	lw $t4, 96($fp) 	#Obtain value to assign
	sw $t4, 64($fp) 	#Assign value
	j label_continue_2 	#Jump to label_continue_2
label_then_2:
	li $t3, 2 	#Load Int
	sw $t3, 392($fp) 	#Save loaded value in destination
	lw $t3, 392($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 396($fp) 	#Obtain value to assign
	sw $t7, 64($fp) 	#Assign value
label_continue_2:
	lw $t8, 64($fp) 	#Obtain value to assign
	sw $t8, 32($fp) 	#Assign value
	j label_continue_1 	#Jump to label_continue_1
label_then_1:
	li $t7, 1 	#Load Int
	sw $t7, 400($fp) 	#Save loaded value in destination
	lw $t1, 400($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 404($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 404($fp) 	#Obtain value to assign
	sw $t9, 32($fp) 	#Assign value
label_continue_1:
	lw $t1, 32($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	j label_continue_0 	#Jump to label_continue_0
label_then_0:
	li $t4, 0 	#Load Int
	sw $t4, 408($fp) 	#Save loaded value in destination
	lw $t3, 408($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 412($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 412($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
label_continue_0:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -416 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2c:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 576 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 4($fp) 	#Save obtained attribute in destination
	li $t6, 0 	#Load Int
	sw $t6, 8($fp) 	#Save loaded value in destination
	lw $t6, 8($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 12($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t7) 	#Load attribute in index 0
	sw $t0, 16($fp) 	#Save obtained attribute in destination
	lw $t7, 16($fp) 	#
	lw $t9, 4($fp) 	#
	sub $t1,  $t9, $t7 	#Minus
	sw $t1, 20($fp) 	#Save result of minus
	lw $t7, 20($fp) 	#Mov comparisson value to register
	beqz $t7, label_then_11 	#Compare values in registers and jump to label_then_11 if the second is greater than 0
label_else_11:
	li $t7, 0 	#Load Int
	sw $t7, 28($fp) 	#Save loaded value in destination
	lw $t4, 28($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 32($fp) 	#Obtain value to assign
	sw $t4, 24($fp) 	#Assign value
	j label_continue_11 	#Jump to label_continue_11
label_then_11:
	li $t0, 1 	#Load Int
	sw $t0, 36($fp) 	#Save loaded value in destination
	lw $t3, 36($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 40($fp) 	#Obtain value to assign
	sw $t1, 24($fp) 	#Assign value
label_continue_11:
	lw $t8, 24($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t8) 	#Load attribute in index 0
	sw $t4, 44($fp) 	#Save obtained attribute in destination
	lw $t8, 44($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_10 	#Compare values in registers and jump to label_then_10 if the second is greater than 0
label_else_10:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 52($fp) 	#Save obtained attribute in destination
	li $t9, 1 	#Load Int
	sw $t9, 56($fp) 	#Save loaded value in destination
	lw $t8, 56($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 60($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t3) 	#Load attribute in index 0
	sw $t4, 64($fp) 	#Save obtained attribute in destination
	lw $t3, 64($fp) 	#
	lw $t7, 52($fp) 	#
	sub $t4,  $t7, $t3 	#Minus
	sw $t4, 68($fp) 	#Save result of minus
	lw $t6, 68($fp) 	#Mov comparisson value to register
	beqz $t6, label_then_13 	#Compare values in registers and jump to label_then_13 if the second is greater than 0
label_else_13:
	li $t8, 0 	#Load Int
	sw $t8, 76($fp) 	#Save loaded value in destination
	lw $t0, 76($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 80($fp) 	#Obtain value to assign
	sw $t9, 72($fp) 	#Assign value
	j label_continue_13 	#Jump to label_continue_13
label_then_13:
	li $t5, 1 	#Load Int
	sw $t5, 84($fp) 	#Save loaded value in destination
	lw $t7, 84($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 88($fp) 	#Obtain value to assign
	sw $t1, 72($fp) 	#Assign value
label_continue_13:
	lw $t3, 72($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 92($fp) 	#Save obtained attribute in destination
	lw $t5, 92($fp) 	#Mov comparisson value to register
	bgtz $t5, label_then_12 	#Compare values in registers and jump to label_then_12 if the second is greater than 0
label_else_12:
	lw $t1, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 100($fp) 	#Save obtained attribute in destination
	li $t6, 2 	#Load Int
	sw $t6, 104($fp) 	#Save loaded value in destination
	lw $t3, 104($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 108($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 108($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t8) 	#Load attribute in index 0
	sw $t7, 112($fp) 	#Save obtained attribute in destination
	lw $t5, 112($fp) 	#
	lw $t7, 100($fp) 	#
	sub $t8,  $t7, $t5 	#Minus
	sw $t8, 116($fp) 	#Save result of minus
	lw $t4, 116($fp) 	#Mov comparisson value to register
	beqz $t4, label_then_15 	#Compare values in registers and jump to label_then_15 if the second is greater than 0
label_else_15:
	li $t0, 0 	#Load Int
	sw $t0, 124($fp) 	#Save loaded value in destination
	lw $t8, 124($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 128($fp) 	#Obtain value to assign
	sw $t6, 120($fp) 	#Assign value
	j label_continue_15 	#Jump to label_continue_15
label_then_15:
	li $t6, 1 	#Load Int
	sw $t6, 132($fp) 	#Save loaded value in destination
	lw $t7, 132($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 136($fp) 	#Obtain value to assign
	sw $t8, 120($fp) 	#Assign value
label_continue_15:
	lw $t5, 120($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 140($fp) 	#Save obtained attribute in destination
	lw $t6, 140($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_14 	#Compare values in registers and jump to label_then_14 if the second is greater than 0
label_else_14:
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t7) 	#Load attribute in index 0
	sw $t9, 148($fp) 	#Save obtained attribute in destination
	li $t9, 3 	#Load Int
	sw $t9, 152($fp) 	#Save loaded value in destination
	lw $t9, 152($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 156($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t3) 	#Load attribute in index 0
	sw $t9, 160($fp) 	#Save obtained attribute in destination
	lw $t4, 160($fp) 	#
	lw $t5, 148($fp) 	#
	sub $t3,  $t5, $t4 	#Minus
	sw $t3, 164($fp) 	#Save result of minus
	lw $t2, 164($fp) 	#Mov comparisson value to register
	beqz $t2, label_then_17 	#Compare values in registers and jump to label_then_17 if the second is greater than 0
label_else_17:
	li $t0, 0 	#Load Int
	sw $t0, 172($fp) 	#Save loaded value in destination
	lw $t2, 172($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 176($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 176($fp) 	#Obtain value to assign
	sw $t9, 168($fp) 	#Assign value
	j label_continue_17 	#Jump to label_continue_17
label_then_17:
	li $t0, 1 	#Load Int
	sw $t0, 180($fp) 	#Save loaded value in destination
	lw $t6, 180($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 184($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 184($fp) 	#Obtain value to assign
	sw $t8, 168($fp) 	#Assign value
label_continue_17:
	lw $t5, 168($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t5) 	#Load attribute in index 0
	sw $t4, 188($fp) 	#Save obtained attribute in destination
	lw $t9, 188($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_16 	#Compare values in registers and jump to label_then_16 if the second is greater than 0
label_else_16:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t4, 0($t0) 	#Load attribute in index 0
	sw $t4, 196($fp) 	#Save obtained attribute in destination
	li $t3, 4 	#Load Int
	sw $t3, 200($fp) 	#Save loaded value in destination
	lw $t3, 200($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 204($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 204($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 208($fp) 	#Save obtained attribute in destination
	lw $t8, 208($fp) 	#
	lw $t3, 196($fp) 	#
	sub $t7,  $t3, $t8 	#Minus
	sw $t7, 212($fp) 	#Save result of minus
	lw $t8, 212($fp) 	#Mov comparisson value to register
	beqz $t8, label_then_19 	#Compare values in registers and jump to label_then_19 if the second is greater than 0
label_else_19:
	li $t7, 0 	#Load Int
	sw $t7, 220($fp) 	#Save loaded value in destination
	lw $t6, 220($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 224($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 224($fp) 	#Obtain value to assign
	sw $t5, 216($fp) 	#Assign value
	j label_continue_19 	#Jump to label_continue_19
label_then_19:
	li $t7, 1 	#Load Int
	sw $t7, 228($fp) 	#Save loaded value in destination
	lw $t2, 228($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 232($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 232($fp) 	#Obtain value to assign
	sw $t0, 216($fp) 	#Assign value
label_continue_19:
	lw $t7, 216($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t7) 	#Load attribute in index 0
	sw $t8, 236($fp) 	#Save obtained attribute in destination
	lw $t1, 236($fp) 	#Mov comparisson value to register
	bgtz $t1, label_then_18 	#Compare values in registers and jump to label_then_18 if the second is greater than 0
label_else_18:
	lw $t5, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 244($fp) 	#Save obtained attribute in destination
	li $t9, 5 	#Load Int
	sw $t9, 248($fp) 	#Save loaded value in destination
	lw $t5, 248($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 252($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t3) 	#Load attribute in index 0
	sw $t0, 256($fp) 	#Save obtained attribute in destination
	lw $t7, 256($fp) 	#
	lw $t2, 244($fp) 	#
	sub $t9,  $t2, $t7 	#Minus
	sw $t9, 260($fp) 	#Save result of minus
	lw $t3, 260($fp) 	#Mov comparisson value to register
	beqz $t3, label_then_21 	#Compare values in registers and jump to label_then_21 if the second is greater than 0
label_else_21:
	li $t8, 0 	#Load Int
	sw $t8, 268($fp) 	#Save loaded value in destination
	lw $t1, 268($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 272($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 272($fp) 	#Obtain value to assign
	sw $t6, 264($fp) 	#Assign value
	j label_continue_21 	#Jump to label_continue_21
label_then_21:
	li $t0, 1 	#Load Int
	sw $t0, 276($fp) 	#Save loaded value in destination
	lw $t9, 276($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 280($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 280($fp) 	#Obtain value to assign
	sw $t6, 264($fp) 	#Assign value
label_continue_21:
	lw $t1, 264($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 284($fp) 	#Save obtained attribute in destination
	lw $t3, 284($fp) 	#Mov comparisson value to register
	bgtz $t3, label_then_20 	#Compare values in registers and jump to label_then_20 if the second is greater than 0
label_else_20:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 292($fp) 	#Save obtained attribute in destination
	li $t4, 6 	#Load Int
	sw $t4, 296($fp) 	#Save loaded value in destination
	lw $t9, 296($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 300($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t5) 	#Load attribute in index 0
	sw $t7, 304($fp) 	#Save obtained attribute in destination
	lw $t6, 304($fp) 	#
	lw $t5, 292($fp) 	#
	sub $t7,  $t5, $t6 	#Minus
	sw $t7, 308($fp) 	#Save result of minus
	lw $t2, 308($fp) 	#Mov comparisson value to register
	beqz $t2, label_then_23 	#Compare values in registers and jump to label_then_23 if the second is greater than 0
label_else_23:
	li $t5, 0 	#Load Int
	sw $t5, 316($fp) 	#Save loaded value in destination
	lw $t8, 316($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 320($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 320($fp) 	#Obtain value to assign
	sw $t5, 312($fp) 	#Assign value
	j label_continue_23 	#Jump to label_continue_23
label_then_23:
	li $t2, 1 	#Load Int
	sw $t2, 324($fp) 	#Save loaded value in destination
	lw $t4, 324($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 328($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 328($fp) 	#Obtain value to assign
	sw $t5, 312($fp) 	#Assign value
label_continue_23:
	lw $t3, 312($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t3) 	#Load attribute in index 0
	sw $t5, 332($fp) 	#Save obtained attribute in destination
	lw $t0, 332($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_22 	#Compare values in registers and jump to label_then_22 if the second is greater than 0
label_else_22:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 340($fp) 	#Save obtained attribute in destination
	li $t7, 7 	#Load Int
	sw $t7, 344($fp) 	#Save loaded value in destination
	lw $t5, 344($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 348($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 348($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 352($fp) 	#Save obtained attribute in destination
	lw $t9, 352($fp) 	#
	lw $t0, 340($fp) 	#
	sub $t2,  $t0, $t9 	#Minus
	sw $t2, 356($fp) 	#Save result of minus
	lw $t2, 356($fp) 	#Mov comparisson value to register
	beqz $t2, label_then_25 	#Compare values in registers and jump to label_then_25 if the second is greater than 0
label_else_25:
	li $t1, 0 	#Load Int
	sw $t1, 364($fp) 	#Save loaded value in destination
	lw $t4, 364($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 368($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 368($fp) 	#Obtain value to assign
	sw $t4, 360($fp) 	#Assign value
	j label_continue_25 	#Jump to label_continue_25
label_then_25:
	li $t0, 1 	#Load Int
	sw $t0, 372($fp) 	#Save loaded value in destination
	lw $t2, 372($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 376($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 376($fp) 	#Obtain value to assign
	sw $t8, 360($fp) 	#Assign value
label_continue_25:
	lw $t3, 360($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t3) 	#Load attribute in index 0
	sw $t1, 380($fp) 	#Save obtained attribute in destination
	lw $t6, 380($fp) 	#Mov comparisson value to register
	bgtz $t6, label_then_24 	#Compare values in registers and jump to label_then_24 if the second is greater than 0
label_else_24:
	lw $t7, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 388($fp) 	#Save obtained attribute in destination
	li $t9, 8 	#Load Int
	sw $t9, 392($fp) 	#Save loaded value in destination
	lw $t1, 392($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 396($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 396($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t5) 	#Load attribute in index 0
	sw $t1, 400($fp) 	#Save obtained attribute in destination
	lw $t6, 400($fp) 	#
	lw $t2, 388($fp) 	#
	sub $t4,  $t2, $t6 	#Minus
	sw $t4, 404($fp) 	#Save result of minus
	lw $t4, 404($fp) 	#Mov comparisson value to register
	beqz $t4, label_then_27 	#Compare values in registers and jump to label_then_27 if the second is greater than 0
label_else_27:
	li $t8, 0 	#Load Int
	sw $t8, 412($fp) 	#Save loaded value in destination
	lw $t1, 412($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 416($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 416($fp) 	#Obtain value to assign
	sw $t9, 408($fp) 	#Assign value
	j label_continue_27 	#Jump to label_continue_27
label_then_27:
	li $t7, 1 	#Load Int
	sw $t7, 420($fp) 	#Save loaded value in destination
	lw $t2, 420($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 424($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 424($fp) 	#Obtain value to assign
	sw $t4, 408($fp) 	#Assign value
label_continue_27:
	lw $t9, 408($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 428($fp) 	#Save obtained attribute in destination
	lw $t9, 428($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_26 	#Compare values in registers and jump to label_then_26 if the second is greater than 0
label_else_26:
	lw $t0, -4($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t0) 	#Load attribute in index 0
	sw $t5, 436($fp) 	#Save obtained attribute in destination
	li $t8, 9 	#Load Int
	sw $t8, 440($fp) 	#Save loaded value in destination
	lw $t9, 440($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 444($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 444($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 448($fp) 	#Save obtained attribute in destination
	lw $t9, 448($fp) 	#
	lw $t1, 436($fp) 	#
	sub $t7,  $t1, $t9 	#Minus
	sw $t7, 452($fp) 	#Save result of minus
	lw $t9, 452($fp) 	#Mov comparisson value to register
	beqz $t9, label_then_29 	#Compare values in registers and jump to label_then_29 if the second is greater than 0
label_else_29:
	li $t8, 0 	#Load Int
	sw $t8, 460($fp) 	#Save loaded value in destination
	lw $t6, 460($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 464($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 464($fp) 	#Obtain value to assign
	sw $t3, 456($fp) 	#Assign value
	j label_continue_29 	#Jump to label_continue_29
label_then_29:
	li $t4, 1 	#Load Int
	sw $t4, 468($fp) 	#Save loaded value in destination
	lw $t6, 468($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 472($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 472($fp) 	#Obtain value to assign
	sw $t9, 456($fp) 	#Assign value
label_continue_29:
	lw $t2, 456($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 476($fp) 	#Save obtained attribute in destination
	lw $t0, 476($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_28 	#Compare values in registers and jump to label_then_28 if the second is greater than 0
label_else_28:
	lw $t2, -8($fp) 	#Typeof
	lw $t9, -4($t2) 	#
	sw $t9, 484($fp) 	#Save type value in destination
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 484($fp) 	#get type dir for Dynamic Call
	lw $t6, 0($t4) 	#Get method of index 0
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 480($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	la $t6, data_18_string 	#LOAD
	sw $t6, 488($fp) 	#Save loaded value in destination
	lw $t7, 488($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 492($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 492($fp) 	#Obtain value to assign
	sw $t6, 432($fp) 	#Assign value
	j label_continue_28 	#Jump to label_continue_28
label_then_28:
	la $t9, data_17_string 	#LOAD
	sw $t9, 496($fp) 	#Save loaded value in destination
	lw $t5, 496($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 500($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 500($fp) 	#Obtain value to assign
	sw $t2, 432($fp) 	#Assign value
label_continue_28:
	lw $t6, 432($fp) 	#Obtain value to assign
	sw $t6, 384($fp) 	#Assign value
	j label_continue_26 	#Jump to label_continue_26
label_then_26:
	la $t9, data_16_string 	#LOAD
	sw $t9, 504($fp) 	#Save loaded value in destination
	lw $t9, 504($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 508($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 508($fp) 	#Obtain value to assign
	sw $t7, 384($fp) 	#Assign value
label_continue_26:
	lw $t8, 384($fp) 	#Obtain value to assign
	sw $t8, 336($fp) 	#Assign value
	j label_continue_24 	#Jump to label_continue_24
label_then_24:
	la $t3, data_15_string 	#LOAD
	sw $t3, 512($fp) 	#Save loaded value in destination
	lw $t7, 512($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 516($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 516($fp) 	#Obtain value to assign
	sw $t4, 336($fp) 	#Assign value
label_continue_24:
	lw $t7, 336($fp) 	#Obtain value to assign
	sw $t7, 288($fp) 	#Assign value
	j label_continue_22 	#Jump to label_continue_22
label_then_22:
	la $t4, data_14_string 	#LOAD
	sw $t4, 520($fp) 	#Save loaded value in destination
	lw $t3, 520($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 524($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 524($fp) 	#Obtain value to assign
	sw $t2, 288($fp) 	#Assign value
label_continue_22:
	lw $t8, 288($fp) 	#Obtain value to assign
	sw $t8, 240($fp) 	#Assign value
	j label_continue_20 	#Jump to label_continue_20
label_then_20:
	la $t2, data_13_string 	#LOAD
	sw $t2, 528($fp) 	#Save loaded value in destination
	lw $t4, 528($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 532($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 532($fp) 	#Obtain value to assign
	sw $t3, 240($fp) 	#Assign value
label_continue_20:
	lw $t4, 240($fp) 	#Obtain value to assign
	sw $t4, 192($fp) 	#Assign value
	j label_continue_18 	#Jump to label_continue_18
label_then_18:
	la $t1, data_12_string 	#LOAD
	sw $t1, 536($fp) 	#Save loaded value in destination
	lw $t7, 536($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 540($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 540($fp) 	#Obtain value to assign
	sw $t9, 192($fp) 	#Assign value
label_continue_18:
	lw $t2, 192($fp) 	#Obtain value to assign
	sw $t2, 144($fp) 	#Assign value
	j label_continue_16 	#Jump to label_continue_16
label_then_16:
	la $t0, data_11_string 	#LOAD
	sw $t0, 544($fp) 	#Save loaded value in destination
	lw $t4, 544($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 548($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 548($fp) 	#Obtain value to assign
	sw $t1, 144($fp) 	#Assign value
label_continue_16:
	lw $t7, 144($fp) 	#Obtain value to assign
	sw $t7, 96($fp) 	#Assign value
	j label_continue_14 	#Jump to label_continue_14
label_then_14:
	la $t1, data_10_string 	#LOAD
	sw $t1, 552($fp) 	#Save loaded value in destination
	lw $t0, 552($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 556($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 556($fp) 	#Obtain value to assign
	sw $t3, 96($fp) 	#Assign value
label_continue_14:
	lw $t2, 96($fp) 	#Obtain value to assign
	sw $t2, 48($fp) 	#Assign value
	j label_continue_12 	#Jump to label_continue_12
label_then_12:
	la $t1, data_9_string 	#LOAD
	sw $t1, 560($fp) 	#Save loaded value in destination
	lw $t7, 560($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 564($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 564($fp) 	#Obtain value to assign
	sw $t4, 48($fp) 	#Assign value
label_continue_12:
	lw $t2, 48($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_10 	#Jump to label_continue_10
label_then_10:
	la $t8, data_8_string 	#LOAD
	sw $t8, 568($fp) 	#Save loaded value in destination
	lw $t3, 568($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 572($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 572($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
label_continue_10:
	lw $t5, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -576 	#Remove locals from Stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_a2i:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 312 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t3, -4($fp) 	#Typeof
	lw $t2, -4($t3) 	#
	sw $t2, 8($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 8($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t8) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t7, 4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t7) 	#Load attribute in index 0
	sw $t6, 12($fp) 	#Save obtained attribute in destination
	li $t8, 0 	#Load Int
	sw $t8, 16($fp) 	#Save loaded value in destination
	lw $t7, 16($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 20($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 20($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t3) 	#Load attribute in index 0
	sw $t8, 24($fp) 	#Save obtained attribute in destination
	lw $t8, 24($fp) 	#
	lw $t0, 12($fp) 	#
	sub $t1,  $t0, $t8 	#Minus
	sw $t1, 28($fp) 	#Save result of minus
	lw $t4, 28($fp) 	#Mov comparisson value to register
	beqz $t4, label_then_31 	#Compare values in registers and jump to label_then_31 if the second is greater than 0
label_else_31:
	li $t7, 0 	#Load Int
	sw $t7, 36($fp) 	#Save loaded value in destination
	lw $t8, 36($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 40($fp) 	#Obtain value to assign
	sw $t2, 32($fp) 	#Assign value
	j label_continue_31 	#Jump to label_continue_31
label_then_31:
	li $t3, 1 	#Load Int
	sw $t3, 44($fp) 	#Save loaded value in destination
	lw $t8, 44($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 48($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 48($fp) 	#Obtain value to assign
	sw $t1, 32($fp) 	#Assign value
label_continue_31:
	lw $t1, 32($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t1) 	#Load attribute in index 0
	sw $t0, 52($fp) 	#Save obtained attribute in destination
	lw $t8, 52($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_30 	#Compare values in registers and jump to label_then_30 if the second is greater than 0
label_else_30:
	li $t1, 0 	#Load Int
	sw $t1, 64($fp) 	#Save loaded value in destination
	lw $t6, 64($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 68($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t5, 1 	#Load Int
	sw $t5, 72($fp) 	#Save loaded value in destination
	lw $t2, 72($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 76($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, -4($fp) 	#Typeof
	lw $t0, -4($t1) 	#
	sw $t0, 80($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 68($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 76($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 80($fp) 	#get type dir for Dynamic Call
	lw $t0, 20($t3) 	#Get method of index 5
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 60($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t2, 60($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 84($fp) 	#Save obtained attribute in destination
	la $t5, data_19_string 	#LOAD
	sw $t5, 88($fp) 	#Save loaded value in destination
	lw $t0, 88($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 92($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 96($fp) 	#Save obtained attribute in destination
	lw $t0, 84($fp) 	#
	lw $t8, 96($fp) 	#
loop17:
	lb $t1, 0($t0) 	#
	lb $t6, 0($t8) 	#
	beqz $t1, exit57 	#
	beqz $t6, exit58 	#
	addi $t0,  $t0, 1 	#
	addi $t8,  $t8, 1 	#
	beq $t1, $t6, loop17 	#
	j exit60 	#
exit57:
	beqz $t6, exit59 	#
	j exit60 	#
exit58:
	beqz $t1, exit59 	#
	j exit60 	#
exit59:
	li $t9, 1 	#
	j exit61 	#
exit60:
	li $t9, 0 	#
	j exit61 	#
exit61:
	sw $t9, 100($fp) 	#
	lw $t5, 100($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 104($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t3) 	#Load attribute in index 0
	sw $t5, 108($fp) 	#Save obtained attribute in destination
	lw $t8, 108($fp) 	#Mov comparisson value to register
	bgtz $t8, label_then_32 	#Compare values in registers and jump to label_then_32 if the second is greater than 0
label_else_32:
	li $t2, 0 	#Load Int
	sw $t2, 120($fp) 	#Save loaded value in destination
	lw $t4, 120($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 124($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	li $t1, 1 	#Load Int
	sw $t1, 128($fp) 	#Save loaded value in destination
	lw $t4, 128($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -4($fp) 	#Typeof
	lw $t7, -4($t0) 	#
	sw $t7, 136($fp) 	#Save type value in destination
	lw $t0, -4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 124($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 132($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 136($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t0) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 116($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t2, 116($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 140($fp) 	#Save obtained attribute in destination
	la $t7, data_20_string 	#LOAD
	sw $t7, 144($fp) 	#Save loaded value in destination
	lw $t4, 144($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 148($fp) 	#Dir of instance of attribute to get
	lw $t8, 0($t7) 	#Load attribute in index 0
	sw $t8, 152($fp) 	#Save obtained attribute in destination
	lw $t7, 140($fp) 	#
	lw $t3, 152($fp) 	#
loop18:
	lb $t5, 0($t7) 	#
	lb $t6, 0($t3) 	#
	beqz $t5, exit62 	#
	beqz $t6, exit63 	#
	addi $t7,  $t7, 1 	#
	addi $t3,  $t3, 1 	#
	beq $t5, $t6, loop18 	#
	j exit65 	#
exit62:
	beqz $t6, exit64 	#
	j exit65 	#
exit63:
	beqz $t5, exit64 	#
	j exit65 	#
exit64:
	li $t2, 1 	#
	j exit66 	#
exit65:
	li $t2, 0 	#
	j exit66 	#
exit66:
	sw $t2, 156($fp) 	#
	lw $t5, 156($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 160($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 160($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t6) 	#Load attribute in index 0
	sw $t9, 164($fp) 	#Save obtained attribute in destination
	lw $t4, 164($fp) 	#Mov comparisson value to register
	bgtz $t4, label_then_33 	#Compare values in registers and jump to label_then_33 if the second is greater than 0
label_else_33:
	lw $t1, -8($fp) 	#Typeof
	lw $t6, -4($t1) 	#
	sw $t6, 172($fp) 	#Save type value in destination
	lw $t8, -8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, -4($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 172($fp) 	#get type dir for Dynamic Call
	lw $t8, 24($t3) 	#Get method of index 6
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 168($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 168($fp) 	#Obtain value to assign
	sw $t7, 112($fp) 	#Assign value
	j label_continue_33 	#Jump to label_continue_33
label_then_33:
	li $t9, 1 	#Load Int
	sw $t9, 184($fp) 	#Save loaded value in destination
	lw $t7, 184($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 188($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, -4($fp) 	#Typeof
	lw $t1, -4($t9) 	#
	sw $t1, 196($fp) 	#Save type value in destination
	lw $t6, -4($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 196($fp) 	#get type dir for Dynamic Call
	lw $t2, 12($t1) 	#Get method of index 3
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 192($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t0, 192($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t0) 	#Load attribute in index 0
	sw $t2, 200($fp) 	#Save obtained attribute in destination
	li $t0, 1 	#Load Int
	sw $t0, 204($fp) 	#Save loaded value in destination
	lw $t6, 204($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 208($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 208($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 212($fp) 	#Save obtained attribute in destination
	lw $t2, 212($fp) 	#
	lw $t5, 200($fp) 	#
	sub $t8,  $t5, $t2 	#Minus
	sw $t8, 216($fp) 	#Save result of minus
	lw $t2, 216($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 220($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t2, -4($t8) 	#
	sw $t2, 224($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 188($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 220($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 224($fp) 	#get type dir for Dynamic Call
	lw $t4, 20($t7) 	#Get method of index 5
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 180($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t0, -8($fp) 	#Typeof
	lw $t2, -4($t0) 	#
	sw $t2, 228($fp) 	#Save type value in destination
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 180($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 228($fp) 	#get type dir for Dynamic Call
	lw $t5, 24($t7) 	#Get method of index 6
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 176($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t0, 176($fp) 	#Obtain value to assign
	sw $t0, 112($fp) 	#Assign value
label_continue_33:
	lw $t4, 112($fp) 	#Obtain value to assign
	sw $t4, 56($fp) 	#Assign value
	j label_continue_32 	#Jump to label_continue_32
label_then_32:
	li $t4, 1 	#Load Int
	sw $t4, 248($fp) 	#Save loaded value in destination
	lw $t5, 248($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 252($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -4($fp) 	#Typeof
	lw $t5, -4($t3) 	#
	sw $t5, 260($fp) 	#Save type value in destination
	lw $t4, -4($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 260($fp) 	#get type dir for Dynamic Call
	lw $t4, 12($t2) 	#Get method of index 3
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 256($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t4, 256($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t4) 	#Load attribute in index 0
	sw $t1, 264($fp) 	#Save obtained attribute in destination
	li $t1, 1 	#Load Int
	sw $t1, 268($fp) 	#Save loaded value in destination
	lw $t4, 268($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 272($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 272($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t8) 	#Load attribute in index 0
	sw $t5, 276($fp) 	#Save obtained attribute in destination
	lw $t6, 276($fp) 	#
	lw $t7, 264($fp) 	#
	sub $t3,  $t7, $t6 	#Minus
	sw $t3, 280($fp) 	#Save result of minus
	lw $t4, 280($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 284($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Typeof
	lw $t7, -4($t2) 	#
	sw $t7, 288($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 252($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 284($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 288($fp) 	#get type dir for Dynamic Call
	lw $t0, 20($t8) 	#Get method of index 5
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 244($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t7, -8($fp) 	#Typeof
	lw $t5, -4($t7) 	#
	sw $t5, 292($fp) 	#Save type value in destination
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 244($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 292($fp) 	#get type dir for Dynamic Call
	lw $t0, 24($t5) 	#Get method of index 6
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 240($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 240($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t5) 	#Load attribute in index 0
	sw $t6, 236($fp) 	#Save obtained attribute in destination
	li $t7, 1 	#Load Int
	sw $t7, 296($fp) 	#Save loaded value in destination
	lw $t1, 236($fp) 	#
	lw $t7, 296($fp) 	#
	sub $t6,  $t7, $t1 	#Minus
	sw $t6, 232($fp) 	#Save result of minus
	lw $t0, 232($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 300($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 300($fp) 	#Obtain value to assign
	sw $t4, 56($fp) 	#Assign value
label_continue_32:
	lw $t1, 56($fp) 	#Obtain value to assign
	sw $t1, 0($fp) 	#Assign value
	j label_continue_30 	#Jump to label_continue_30
label_then_30:
	li $t6, 0 	#Load Int
	sw $t6, 304($fp) 	#Save loaded value in destination
	lw $t0, 304($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 308($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 308($fp) 	#Obtain value to assign
	sw $t7, 0($fp) 	#Assign value
label_continue_30:
	lw $t2, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -312 	#Remove locals from Stack
	sw $t2, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_a2i_aux:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 164 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $t7, 0 	#Load Int
	sw $t7, 4($fp) 	#Save loaded value in destination
	lw $t0, 4($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 8($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 8($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	lw $t5, -4($fp) 	#Typeof
	lw $t3, -4($t5) 	#
	sw $t3, 20($fp) 	#Save type value in destination
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 20($fp) 	#get type dir for Dynamic Call
	lw $t3, 12($t7) 	#Get method of index 3
	jalr $t3 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 16($fp) 	#Save return value in destination
	addi $sp,  $sp, -4 	#Remove Args from Stack
	lw $t2, 16($fp) 	#Obtain value to assign
	sw $t2, 12($fp) 	#Assign value
	li $t2, 0 	#Load Int
	sw $t2, 28($fp) 	#Save loaded value in destination
	lw $t0, 28($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, 32($fp) 	#Obtain value to assign
	sw $t8, 24($fp) 	#Assign value
label_while_label_0:
	lw $t5, 24($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 36($fp) 	#Save obtained attribute in destination
	lw $t6, 12($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t6) 	#Load attribute in index 0
	sw $t0, 40($fp) 	#Save obtained attribute in destination
	lw $t2, 40($fp) 	#
	lw $t3, 36($fp) 	#
	sub $t6,  $t3, $t2 	#Minus
	sw $t6, 44($fp) 	#Save result of minus
	lw $t8, 44($fp) 	#Mov comparisson value to register
	bltz $t8, label_then_34 	#Compare values in registers and jump to label_then_34 if the second is greater than 0
label_else_34:
	li $t1, 0 	#Load Int
	sw $t1, 52($fp) 	#Save loaded value in destination
	lw $t4, 52($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 56($fp) 	#Obtain value to assign
	sw $t2, 48($fp) 	#Assign value
	j label_continue_34 	#Jump to label_continue_34
label_then_34:
	li $t9, 1 	#Load Int
	sw $t9, 60($fp) 	#Save loaded value in destination
	lw $t1, 60($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 64($fp) 	#Obtain value to assign
	sw $t5, 48($fp) 	#Assign value
label_continue_34:
	lw $t9, 48($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t9) 	#Load attribute in index 0
	sw $t0, 68($fp) 	#Save obtained attribute in destination
	lw $t5, 68($fp) 	#Mov comparisson value to register
	bgtz $t5, label_loop_label_0 	#Compare values in registers and jump to label_loop_label_0 if the second is greater than 0
	j label_pool_label_0 	#Jump to label_pool_label_0
label_loop_label_0:
	lw $t4, 0($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t4) 	#Load attribute in index 0
	sw $t5, 72($fp) 	#Save obtained attribute in destination
	li $t6, 10 	#Load Int
	sw $t6, 76($fp) 	#Save loaded value in destination
	lw $t9, 76($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 80($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t9) 	#Load attribute in index 0
	sw $t5, 84($fp) 	#Save obtained attribute in destination
	lw $t3, 84($fp) 	#
	lw $t8, 72($fp) 	#
	mult $t3, $t8 	#Mult
	mflo $t3 	#
	sw $t3, 88($fp) 	#Save result of Mult
	lw $t5, 88($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 92($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 92($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t6) 	#Load attribute in index 0
	sw $t5, 96($fp) 	#Save obtained attribute in destination
	li $t2, 1 	#Load Int
	sw $t2, 108($fp) 	#Save loaded value in destination
	lw $t1, 108($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 112($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t8, -4($fp) 	#Typeof
	lw $t6, -4($t8) 	#
	sw $t6, 116($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 24($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 112($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 116($fp) 	#get type dir for Dynamic Call
	lw $t5, 20($t7) 	#Get method of index 5
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 104($fp) 	#Save return value in destination
	addi $sp,  $sp, -12 	#Remove Args from Stack
	lw $t7, -8($fp) 	#Typeof
	lw $t2, -4($t7) 	#
	sw $t2, 120($fp) 	#Save type value in destination
	lw $t5, -8($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 104($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 120($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t7) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 100($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t1, 100($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t1) 	#Load attribute in index 0
	sw $t6, 124($fp) 	#Save obtained attribute in destination
	lw $t3, 124($fp) 	#
	lw $t7, 96($fp) 	#
	add $t6,  $t3, $t7 	#Plus
	sw $t6, 128($fp) 	#Save result of plus
	lw $t9, 128($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 132($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 132($fp) 	#Obtain value to assign
	sw $t0, 0($fp) 	#Assign value
	lw $t2, 24($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t2) 	#Load attribute in index 0
	sw $t9, 136($fp) 	#Save obtained attribute in destination
	li $t6, 1 	#Load Int
	sw $t6, 140($fp) 	#Save loaded value in destination
	lw $t7, 140($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 144($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t4) 	#Load attribute in index 0
	sw $t2, 148($fp) 	#Save obtained attribute in destination
	lw $t5, 148($fp) 	#
	lw $t0, 136($fp) 	#
	add $t7,  $t5, $t0 	#Plus
	sw $t7, 152($fp) 	#Save result of plus
	lw $t8, 152($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 156($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 156($fp) 	#Obtain value to assign
	sw $t4, 24($fp) 	#Assign value
	j label_while_label_0 	#Jump to label_while_label_0
label_pool_label_0:
	jal Void___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 160($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	lw $t0, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -164 	#Remove locals from Stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2a:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 176 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t8, -4($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t8) 	#Load attribute in index 0
	sw $t6, 4($fp) 	#Save obtained attribute in destination
	li $t2, 0 	#Load Int
	sw $t2, 8($fp) 	#Save loaded value in destination
	lw $t7, 8($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 12($fp) 	#Dir of instance of attribute to get
	lw $t6, 0($t2) 	#Load attribute in index 0
	sw $t6, 16($fp) 	#Save obtained attribute in destination
	lw $t5, 16($fp) 	#
	lw $t3, 4($fp) 	#
	sub $t9,  $t3, $t5 	#Minus
	sw $t9, 20($fp) 	#Save result of minus
	lw $t3, 20($fp) 	#Mov comparisson value to register
	beqz $t3, label_then_36 	#Compare values in registers and jump to label_then_36 if the second is greater than 0
label_else_36:
	li $t4, 0 	#Load Int
	sw $t4, 28($fp) 	#Save loaded value in destination
	lw $t5, 28($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 32($fp) 	#Obtain value to assign
	sw $t9, 24($fp) 	#Assign value
	j label_continue_36 	#Jump to label_continue_36
label_then_36:
	li $t8, 1 	#Load Int
	sw $t8, 36($fp) 	#Save loaded value in destination
	lw $t5, 36($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, 40($fp) 	#Obtain value to assign
	sw $t2, 24($fp) 	#Assign value
label_continue_36:
	lw $t4, 24($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t4) 	#Load attribute in index 0
	sw $t9, 44($fp) 	#Save obtained attribute in destination
	lw $t7, 44($fp) 	#Mov comparisson value to register
	bgtz $t7, label_then_35 	#Compare values in registers and jump to label_then_35 if the second is greater than 0
label_else_35:
	li $t8, 0 	#Load Int
	sw $t8, 52($fp) 	#Save loaded value in destination
	lw $t1, 52($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 56($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 56($fp) 	#Dir of instance of attribute to get
	lw $t0, 0($t5) 	#Load attribute in index 0
	sw $t0, 60($fp) 	#Save obtained attribute in destination
	lw $t3, -4($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t3) 	#Load attribute in index 0
	sw $t9, 64($fp) 	#Save obtained attribute in destination
	lw $t3, 64($fp) 	#
	lw $t1, 60($fp) 	#
	sub $t9,  $t1, $t3 	#Minus
	sw $t9, 68($fp) 	#Save result of minus
	lw $t3, 68($fp) 	#Mov comparisson value to register
	bltz $t3, label_then_38 	#Compare values in registers and jump to label_then_38 if the second is greater than 0
label_else_38:
	li $t6, 0 	#Load Int
	sw $t6, 76($fp) 	#Save loaded value in destination
	lw $t2, 76($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 80($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 80($fp) 	#Obtain value to assign
	sw $t0, 72($fp) 	#Assign value
	j label_continue_38 	#Jump to label_continue_38
label_then_38:
	li $t5, 1 	#Load Int
	sw $t5, 84($fp) 	#Save loaded value in destination
	lw $t2, 84($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 88($fp) 	#Obtain value to assign
	sw $t4, 72($fp) 	#Assign value
label_continue_38:
	lw $t3, 72($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 92($fp) 	#Save obtained attribute in destination
	lw $t9, 92($fp) 	#Mov comparisson value to register
	bgtz $t9, label_then_37 	#Compare values in registers and jump to label_then_37 if the second is greater than 0
label_else_37:
	la $t8, data_19_string 	#LOAD
	sw $t8, 100($fp) 	#Save loaded value in destination
	lw $t7, 100($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t1, 0($t2) 	#Load attribute in index 0
	sw $t1, 112($fp) 	#Save obtained attribute in destination
	li $t3, 1 	#Load Int
	sw $t3, 124($fp) 	#Save loaded value in destination
	lw $t4, 124($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 128($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t1) 	#Load attribute in index 0
	sw $t9, 120($fp) 	#Save obtained attribute in destination
	li $t0, 1 	#Load Int
	sw $t0, 132($fp) 	#Save loaded value in destination
	lw $t9, 120($fp) 	#
	lw $t5, 132($fp) 	#
	sub $t7,  $t5, $t9 	#Minus
	sw $t7, 116($fp) 	#Save result of minus
	lw $t6, 116($fp) 	#Obtain alue of Arg
	sw $t6, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 136($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, 136($fp) 	#Dir of instance of attribute to get
	lw $t9, 0($t3) 	#Load attribute in index 0
	sw $t9, 140($fp) 	#Save obtained attribute in destination
	lw $t7, 140($fp) 	#
	lw $t9, 112($fp) 	#
	mult $t7, $t9 	#Mult
	mflo $t7 	#
	sw $t7, 144($fp) 	#Save result of Mult
	lw $t7, 144($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 148($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t3, -8($fp) 	#Typeof
	lw $t7, -4($t3) 	#
	sw $t7, 152($fp) 	#Save type value in destination
	lw $t3, -8($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 148($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 152($fp) 	#get type dir for Dynamic Call
	lw $t0, 32($t3) 	#Get method of index 8
	jalr $t0 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 108($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t7, 104($fp) 	#Typeof
	lw $t0, -4($t7) 	#
	sw $t0, 156($fp) 	#Save type value in destination
	lw $t1, 104($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, 108($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 156($fp) 	#get type dir for Dynamic Call
	lw $t4, 16($t5) 	#Get method of index 4
	jalr $t4 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 96($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 96($fp) 	#Obtain value to assign
	sw $t3, 48($fp) 	#Assign value
	j label_continue_37 	#Jump to label_continue_37
label_then_37:
	lw $t1, -8($fp) 	#Typeof
	lw $t8, -4($t1) 	#
	sw $t8, 164($fp) 	#Save type value in destination
	lw $t0, -8($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t1, -4($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 164($fp) 	#get type dir for Dynamic Call
	lw $t6, 32($t3) 	#Get method of index 8
	jalr $t6 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 160($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t4, 160($fp) 	#Obtain value to assign
	sw $t4, 48($fp) 	#Assign value
label_continue_37:
	lw $t2, 48($fp) 	#Obtain value to assign
	sw $t2, 0($fp) 	#Assign value
	j label_continue_35 	#Jump to label_continue_35
label_then_35:
	la $t2, data_8_string 	#LOAD
	sw $t2, 168($fp) 	#Save loaded value in destination
	lw $t9, 168($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 172($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 172($fp) 	#Obtain value to assign
	sw $t4, 0($fp) 	#Assign value
label_continue_35:
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -176 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
A2I_i2a_aux:
	move $t0, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 148 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t0, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	lw $t9, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t9) 	#Load attribute in index 0
	sw $t3, 4($fp) 	#Save obtained attribute in destination
	li $t4, 0 	#Load Int
	sw $t4, 8($fp) 	#Save loaded value in destination
	lw $t9, 8($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 12($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, 12($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t0) 	#Load attribute in index 0
	sw $t3, 16($fp) 	#Save obtained attribute in destination
	lw $t5, 16($fp) 	#
	lw $t7, 4($fp) 	#
	sub $t9,  $t7, $t5 	#Minus
	sw $t9, 20($fp) 	#Save result of minus
	lw $t5, 20($fp) 	#Mov comparisson value to register
	beqz $t5, label_then_40 	#Compare values in registers and jump to label_then_40 if the second is greater than 0
label_else_40:
	li $t5, 0 	#Load Int
	sw $t5, 28($fp) 	#Save loaded value in destination
	lw $t2, 28($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 32($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t4, 32($fp) 	#Obtain value to assign
	sw $t4, 24($fp) 	#Assign value
	j label_continue_40 	#Jump to label_continue_40
label_then_40:
	li $t1, 1 	#Load Int
	sw $t1, 36($fp) 	#Save loaded value in destination
	lw $t8, 36($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Bool___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, 40($fp) 	#Obtain value to assign
	sw $t6, 24($fp) 	#Assign value
label_continue_40:
	lw $t3, 24($fp) 	#Dir of instance of attribute to get
	lw $t7, 0($t3) 	#Load attribute in index 0
	sw $t7, 44($fp) 	#Save obtained attribute in destination
	lw $t0, 44($fp) 	#Mov comparisson value to register
	bgtz $t0, label_then_39 	#Compare values in registers and jump to label_then_39 if the second is greater than 0
label_else_39:
	lw $t4, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t4) 	#Load attribute in index 0
	sw $t3, 52($fp) 	#Save obtained attribute in destination
	li $t8, 10 	#Load Int
	sw $t8, 56($fp) 	#Save loaded value in destination
	lw $t7, 56($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t0, 0($sp) 	#Obtain return value from stack
	sw $t0, 60($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 60($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t5) 	#Load attribute in index 0
	sw $t2, 64($fp) 	#Save obtained attribute in destination
	lw $t2, 64($fp) 	#
	lw $t0, 52($fp) 	#
	div $t0, $t2 	#Div
	mflo $t2 	#
	sw $t2, 68($fp) 	#Save result of Div
	lw $t7, 68($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 72($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 72($fp) 	#Obtain value to assign
	sw $t9, 48($fp) 	#Assign value
	lw $t8, -8($fp) 	#Typeof
	lw $t5, -4($t8) 	#
	sw $t5, 84($fp) 	#Save type value in destination
	lw $t8, -8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 48($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t6, 84($fp) 	#get type dir for Dynamic Call
	lw $t9, 32($t6) 	#Get method of index 8
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 80($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t2, -4($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t2) 	#Load attribute in index 0
	sw $t3, 92($fp) 	#Save obtained attribute in destination
	lw $t5, 48($fp) 	#Dir of instance of attribute to get
	lw $t3, 0($t5) 	#Load attribute in index 0
	sw $t3, 96($fp) 	#Save obtained attribute in destination
	li $t3, 10 	#Load Int
	sw $t3, 100($fp) 	#Save loaded value in destination
	lw $t1, 100($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 104($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t1, 104($fp) 	#Dir of instance of attribute to get
	lw $t5, 0($t1) 	#Load attribute in index 0
	sw $t5, 108($fp) 	#Save obtained attribute in destination
	lw $t7, 108($fp) 	#
	lw $t8, 96($fp) 	#
	mult $t7, $t8 	#Mult
	mflo $t7 	#
	sw $t7, 112($fp) 	#Save result of Mult
	lw $t5, 112($fp) 	#Obtain alue of Arg
	sw $t5, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 116($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 116($fp) 	#Dir of instance of attribute to get
	lw $t2, 0($t9) 	#Load attribute in index 0
	sw $t2, 120($fp) 	#Save obtained attribute in destination
	lw $t3, 120($fp) 	#
	lw $t9, 92($fp) 	#
	sub $t4,  $t9, $t3 	#Minus
	sw $t4, 124($fp) 	#Save result of minus
	lw $t3, 124($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 128($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t0, -8($fp) 	#Typeof
	lw $t1, -4($t0) 	#
	sw $t1, 132($fp) 	#Save type value in destination
	lw $t1, -8($fp) 	#Obtain alue of Arg
	sw $t1, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 128($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 132($fp) 	#get type dir for Dynamic Call
	lw $t2, 16($t8) 	#Get method of index 4
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 88($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 80($fp) 	#Typeof
	lw $t8, -4($t3) 	#
	sw $t8, 136($fp) 	#Save type value in destination
	lw $t4, 80($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 88($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 136($fp) 	#get type dir for Dynamic Call
	lw $t5, 16($t7) 	#Get method of index 4
	jalr $t5 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t7, 0($sp) 	#Obtain return value from stack
	sw $t7, 76($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 76($fp) 	#Obtain value to assign
	sw $t3, 0($fp) 	#Assign value
	j label_continue_39 	#Jump to label_continue_39
label_then_39:
	la $t6, data_18_string 	#LOAD
	sw $t6, 140($fp) 	#Save loaded value in destination
	lw $t0, 140($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t1, 0($sp) 	#Obtain return value from stack
	sw $t1, 144($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t9, 144($fp) 	#Obtain value to assign
	sw $t9, 0($fp) 	#Assign value
label_continue_39:
	lw $t6, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -148 	#Remove locals from Stack
	sw $t6, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main___init:
	move $t5, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 4 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t5, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	li $v0, 9 	#Allocating instance of type Main
	li $a0, 4 	#Save 4 bytes
	syscall 	#
	la $t8, Main 	#Save type address in register
	sw $t8, 0($v0) 	#Save type address in firts position of memory allocated
	addi $v0,  $v0, 4 	#Move offset of instance (type addres is in index -1)
	sw $v0, 0($fp) 	#Save instance address in destination
	lw $t7, 0($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -4 	#Remove locals from Stack
	sw $t7, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
Main_main:
	move $t9, $fp 	#save previous FP value
	move $fp, $sp 	#FP <- SP
	addi $sp,  $sp, 96 	#push local vars
	sw $ra, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $ra in stack
	sw $t9, 0($sp) 	#
	addi $sp,  $sp, 4 	#Push prev $fp in stack
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t6, 0($sp) 	#Obtain return value from stack
	sw $t6, 8($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	la $t5, data_21_string 	#LOAD
	sw $t5, 12($fp) 	#Save loaded value in destination
	lw $t9, 12($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t3, 0($sp) 	#Obtain return value from stack
	sw $t3, 16($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t5, 8($fp) 	#Typeof
	lw $t2, -4($t5) 	#
	sw $t2, 20($fp) 	#Save type value in destination
	lw $t8, 8($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 16($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 20($fp) 	#get type dir for Dynamic Call
	lw $t2, 20($t4) 	#Get method of index 5
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 4($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 4($fp) 	#Obtain value to assign
	sw $t5, 0($fp) 	#Assign value
	jal A2I___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 32($fp) 	#
	addi $sp,  $sp, 0 	#Remove args from stack
	li $t3, 678987 	#Load Int
	sw $t3, 36($fp) 	#Save loaded value in destination
	lw $t8, 36($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal Int___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t9, 0($sp) 	#Obtain return value from stack
	sw $t9, 40($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t7, 32($fp) 	#Typeof
	lw $t5, -4($t7) 	#
	sw $t5, 44($fp) 	#Save type value in destination
	lw $t4, 32($fp) 	#Obtain alue of Arg
	sw $t4, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 40($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t4, 44($fp) 	#get type dir for Dynamic Call
	lw $t2, 28($t4) 	#Get method of index 7
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t4, 0($sp) 	#Obtain return value from stack
	sw $t4, 28($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t5, 28($fp) 	#Obtain value to assign
	sw $t5, 24($fp) 	#Assign value
	lw $t8, -4($fp) 	#Typeof
	lw $t1, -4($t8) 	#
	sw $t1, 52($fp) 	#Save type value in destination
	lw $t3, -4($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t3, 0($fp) 	#Obtain alue of Arg
	sw $t3, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 52($fp) 	#get type dir for Dynamic Call
	lw $t2, 16($t5) 	#Get method of index 4
	jalr $t2 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 48($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t5, data_22_string 	#LOAD
	sw $t5, 60($fp) 	#Save loaded value in destination
	lw $t8, 60($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 64($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 68($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t9, 64($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t8, 68($fp) 	#get type dir for Dynamic Call
	lw $t7, 12($t8) 	#Get method of index 3
	jalr $t7 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t8, 0($sp) 	#Obtain return value from stack
	sw $t8, 56($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t6, -4($fp) 	#Typeof
	lw $t2, -4($t6) 	#
	sw $t2, 76($fp) 	#Save type value in destination
	lw $t9, -4($fp) 	#Obtain alue of Arg
	sw $t9, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t0, 24($fp) 	#Obtain alue of Arg
	sw $t0, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t5, 76($fp) 	#get type dir for Dynamic Call
	lw $t8, 12($t5) 	#Get method of index 3
	jalr $t8 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t5, 0($sp) 	#Obtain return value from stack
	sw $t5, 72($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	la $t8, data_23_string 	#LOAD
	sw $t8, 84($fp) 	#Save loaded value in destination
	lw $t8, 84($fp) 	#Obtain alue of Arg
	sw $t8, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	jal String___init 	#Jump to function and save link
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 88($fp) 	#
	addi $sp,  $sp, -4 	#Remove args from stack
	lw $t6, -4($fp) 	#Typeof
	lw $t5, -4($t6) 	#
	sw $t5, 92($fp) 	#Save type value in destination
	lw $t2, -4($fp) 	#Obtain alue of Arg
	sw $t2, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t7, 88($fp) 	#Obtain alue of Arg
	sw $t7, 0($sp) 	#Save Arg in Stack
	addi $sp,  $sp, 4 	#Move Stack
	lw $t2, 92($fp) 	#get type dir for Dynamic Call
	lw $t9, 12($t2) 	#Get method of index 3
	jalr $t9 	#Jump to function
	addi $sp,  $sp, -4 	#
	lw $t2, 0($sp) 	#Obtain return value from stack
	sw $t2, 80($fp) 	#Save return value in destination
	addi $sp,  $sp, -8 	#Remove Args from Stack
	lw $t3, 80($fp) 	#Obtain return value
	addi $sp,  $sp, -4 	#remove prev $fp from stack
	lw $fp, 0($sp) 	#
	addi $sp,  $sp, -4 	#remove prev $ra from stack
	lw $ra, 0($sp) 	#
	addi $sp,  $sp, -96 	#Remove locals from Stack
	sw $t3, 0($sp) 	#
	addi $sp,  $sp, 4 	#Save return value in Stack
	jr $ra 	#RETURN
