.types

  type Object {
    method Object_abort;
    method Object_type_name;
    method Object_copy;
  }
  type Int {
    method Object_abort;
    method Int_type_name;
    method Int_copy;
  }
  type Bool {
    method Object_abort;
    method Bool_type_name;
    method Bool_copy;
  }
  type String {
    method Object_abort;
    method String_type_name;
    method String_copy;
    method String_length;
    method String_concat;
    method String_substr;
  }
  type IO {
    method Object_abort;
    method IO_type_name;
    method IO_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
  }
  type Main {
    attribute out;
    attribute testee;
    attribute divisor;
    attribute stop;
    attribute m;
    method Object_abort;
    method Main_type_name;
    method Main_copy;
    method IO_out_string;
    method IO_out_int;
    method IO_in_string;
    method IO_in_int;
    method Main_main;
  }

.data

  data_0_abort_msg = "Program Halted!";
  data_1_type_name_Object = "Object";
  data_2_type_name_Int = "Int";
  data_3_type_name_Bool = "Bool";
  data_4_type_name_String = "String";
  data_5_type_name_IO = "IO";
  data_6_type_name_Main = "Main";
  data_7_sep_cat = " ++ ";
  data_8_string = "2 is trivially prime.\n";
  data_9_eol = "\n";
  data_10_under = "_";
  data_11_meth = "out_string";
  data_12_meth = "out_int";
  data_13_string = " is prime.\n";
  data_14_string = "halt";
  data_15_meth = "abort";
  data_16_string = "continue";

.code

  function Void___init {

    LOCAL local_self;

    local_self = ALLOCATE Void;
    RETURN local_self;
  }

  function main {

    LOCAL local_0;
    LOCAL local_1;

    local_0 = CALL Main___init;
    ARG local_0;
    local_1 = CALL Main_main;
  }

  function Object_abort {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_0_abort_msg;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, local_1)
  }

  function Object_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_1_type_name_Object;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Object_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Object;
    RETURN local_copy;
  }

  function Int_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_2_type_name_Int;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Int_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Int;
    RETURN local_copy;
  }

  function Bool_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_3_type_name_Bool;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Bool_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE Bool;
    RETURN local_copy;
  }

  function String_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_4_type_name_String;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function String_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE String;
    RETURN local_copy;
  }

  function IO_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_5_type_name_IO;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function IO_copy {
    PARAM param_self;

    LOCAL local_copy;

    local_copy = ALLOCATE IO;
    RETURN local_copy;
  }

  function Main_type_name {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD data_6_type_name_Main;
    ARG local_0;
    local_1 = CALL String___init;
    RETURN local_1;
  }

  function Main_copy {
    PARAM param_self;

    LOCAL local_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;
    LOCAL local_attr_copy;

    local_copy = ALLOCATE Main;
    local_attr_copy = GETATTR param_self 0;
    SETATTR local_copy 0 local_attr_copy;
    local_attr_copy = GETATTR param_self 1;
    SETATTR local_copy 1 local_attr_copy;
    local_attr_copy = GETATTR param_self 2;
    SETATTR local_copy 2 local_attr_copy;
    local_attr_copy = GETATTR param_self 3;
    SETATTR local_copy 3 local_attr_copy;
    local_attr_copy = GETATTR param_self 4;
    SETATTR local_copy 4 local_attr_copy;
    RETURN local_copy;
  }

  function IO_out_string {
    PARAM param_self;
    PARAM param_str;


    print(str, param_str)
    RETURN param_self;
  }

  function IO_out_int {
    PARAM param_int;
    PARAM param_self;


    print(int, param_int)
    RETURN param_self;
  }

  function IO_in_string {
    PARAM param_self;

    LOCAL local_str;

    local_str = read(str)
    RETURN local_str;
  }

  function IO_in_int {
    PARAM param_self;

    LOCAL local_int;

    local_int = read(int)
    RETURN local_int;
  }

  function String_length {
    PARAM param_self;

    LOCAL local_str_attr;
    LOCAL local_length;
    LOCAL local_2;

    local_str_attr = GETATTR param_self 0;
    local_str_attr = length(local_length)
    ARG local_length;
    local_2 = CALL Int___init;
    RETURN local_2;
  }

  function String_concat {
    PARAM param_self;
    PARAM param_other;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_self_str_attr;
    LOCAL local_other_str_attr;
    LOCAL local_concat;
    LOCAL local_self_len;
    LOCAL local_other_len;
    LOCAL local_concat_len;
    LOCAL local_8;

    local_0 = LOAD data_7_sep_cat;
    ARG local_0;
    local_1 = CALL String___init;
    print(str, param_self)
    print(str, local_1)
    print(str, param_other)
    local_self_str_attr = GETATTR param_self 0;
    local_other_str_attr = GETATTR param_other 0;
    local_self_len = length(local_self_str_attr)
    local_other_len = length(local_other_str_attr)
    local_concat_len = local_self_len + local_other_len
    local_concat = concat(local_self_str_attr, local_other_str_attr, local_concat_len)
    ARG local_concat;
    local_8 = CALL String___init;
    RETURN local_8;
  }

  function String_substr {
    PARAM param_self;
    PARAM param_i;
    PARAM param_l;

    LOCAL local_self_str_local;
    LOCAL local_i_local;
    LOCAL local_l_local;
    LOCAL local_substr;
    LOCAL local_4;

    local_self_str_local = GETATTR param_self 0;
    local_i_local = GETATTR param_i 0;
    local_l_local = GETATTR param_l 0;
    local_substr = substr(local_self_str_local, local_i_local, local_l_local)
    ARG local_substr;
    local_4 = CALL String___init;
    RETURN local_4;
  }

  function Object___init {

    LOCAL local_self;

    local_self = ALLOCATE Object;
    RETURN local_self;
  }

  function Int___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Int;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Bool___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE Bool;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function String___init {
    PARAM param_value;

    LOCAL local_self;

    local_self = ALLOCATE String;
    SETATTR local_self 0 param_value;
    RETURN local_self;
  }

  function Main___init {

    LOCAL local_self;
    LOCAL local_out;
    LOCAL local_testee;
    LOCAL local_divisor;
    LOCAL local_stop;
    LOCAL local_m;

    local_self = ALLOCATE Main;
    ARG local_self;
    local_out = CALL Main_out___init;
    SETATTR local_self 0 local_out;
    ARG local_self;
    local_testee = CALL Main_testee___init;
    SETATTR local_self 1 local_testee;
    ARG local_self;
    local_divisor = CALL Main_divisor___init;
    SETATTR local_self 2 local_divisor;
    ARG local_self;
    local_stop = CALL Main_stop___init;
    SETATTR local_self 3 local_stop;
    ARG local_self;
    local_m = CALL Main_m___init;
    SETATTR local_self 4 local_m;
    RETURN local_self;
  }

  function Main_main {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Main_out___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_3;
    LOCAL local_tname_local;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;

    local_1 = LOAD data_8_string;
    ARG local_1;
    local_2 = CALL String___init;
    local_3 = TYPEOF param_self;
    local_5 = LOAD data_9_eol;
    ARG local_5;
    local_6 = CALL String___init;
    local_7 = LOAD data_10_under;
    ARG local_7;
    local_8 = CALL String___init;
    local_9 = LOAD data_11_meth;
    ARG local_9;
    local_10 = CALL String___init;
    local_tname_local = VCALL local_3 1;
    print(str, local_tname_local)
    print(str, local_8)
    print(str, local_10)
    print(str, local_6)
    ARG param_self;
    ARG local_2;
    local_0 = VCALL local_3 3;
    local_11 = LOAD 2;
    ARG local_11;
    local_12 = CALL Int___init;
    RETURN local_12;
  }

  function Main_testee___init {
    PARAM param_self;

    LOCAL local_out;

    local_out = GETATTR param_self 0;
    RETURN local_out;
  }

  function Main_divisor___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 0;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Main_stop___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;

    local_0 = LOAD 500;
    ARG local_0;
    local_1 = CALL Int___init;
    RETURN local_1;
  }

  function Main_m___init {
    PARAM param_self;

    LOCAL local_0;
    LOCAL local_1;
    LOCAL local_2;
    LOCAL local_testee;
    LOCAL local_4;
    LOCAL local_5;
    LOCAL local_6;
    LOCAL local_7;
    LOCAL local_8;
    LOCAL local_9;
    LOCAL local_10;
    LOCAL local_11;
    LOCAL local_12;
    LOCAL local_13;
    LOCAL local_divisor;
    LOCAL local_15;
    LOCAL local_16;
    LOCAL local_17;
    LOCAL local_18;
    LOCAL local_19;
    LOCAL local_20;
    LOCAL local_21;
    LOCAL local_22;
    LOCAL local_23;
    LOCAL local_24;
    LOCAL local_25;
    LOCAL local_26;
    LOCAL local_27;
    LOCAL local_28;
    LOCAL local_29;
    LOCAL local_30;
    LOCAL local_31;
    LOCAL local_32;
    LOCAL local_33;
    LOCAL local_34;
    LOCAL local_35;
    LOCAL local_36;
    LOCAL local_37;
    LOCAL local_38;
    LOCAL local_39;
    LOCAL local_40;
    LOCAL local_41;
    LOCAL local_42;
    LOCAL local_43;
    LOCAL local_44;
    LOCAL local_45;
    LOCAL local_46;
    LOCAL local_47;
    LOCAL local_48;
    LOCAL local_49;
    LOCAL local_50;
    LOCAL local_51;
    LOCAL local_52;
    LOCAL local_53;
    LOCAL local_54;
    LOCAL local_55;
    LOCAL local_56;
    LOCAL local_57;
    LOCAL local_58;
    LOCAL local_59;
    LOCAL local_60;
    LOCAL local_61;
    LOCAL local_62;
    LOCAL local_63;
    LOCAL local_64;
    LOCAL local_65;
    LOCAL local_out;
    LOCAL local_67;
    LOCAL local_tname_local;
    LOCAL local_69;
    LOCAL local_70;
    LOCAL local_71;
    LOCAL local_72;
    LOCAL local_73;
    LOCAL local_74;
    LOCAL local_75;
    LOCAL local_76;
    LOCAL local_77;
    LOCAL local_78;
    LOCAL local_tname_local;
    LOCAL local_80;
    LOCAL local_81;
    LOCAL local_82;
    LOCAL local_83;
    LOCAL local_84;
    LOCAL local_85;
    LOCAL local_86;
    LOCAL local_87;
    LOCAL local_88;
    LOCAL local_stop;
    LOCAL local_90;
    LOCAL local_91;
    LOCAL local_92;
    LOCAL local_93;
    LOCAL local_94;
    LOCAL local_95;
    LOCAL local_96;
    LOCAL local_97;
    LOCAL local_98;
    LOCAL local_tname_local;
    LOCAL local_100;
    LOCAL local_101;
    LOCAL local_102;
    LOCAL local_103;
    LOCAL local_104;
    LOCAL local_105;
    LOCAL local_106;
    LOCAL local_107;
    LOCAL local_108;

    LABEL label_while_label_0;
    local_0 = LOAD 1;
    ARG local_0;
    local_1 = CALL Bool___init;
    local_2 = GETATTR local_1 0;
    IF local_2 GOTO label_loop_label_0;
    GOTO label_pool_label_0;
    LABEL label_loop_label_0;
    local_testee = GETATTR param_self 1;
    local_4 = GETATTR local_testee 0;
    local_5 = LOAD 1;
    ARG local_5;
    local_6 = CALL Int___init;
    local_7 = GETATTR local_6 0;
    local_8 = local_4 + local_7
    ARG local_8;
    local_9 = CALL Int___init;
    local_testee = local_9;
    local_10 = LOAD 2;
    ARG local_10;
    local_11 = CALL Int___init;
    SETATTR param_self 2 local_11;
    LABEL label_while_label_1;
    local_13 = GETATTR local_testee 0;
    local_divisor = GETATTR param_self 2;
    local_15 = GETATTR local_divisor 0;
    local_16 = GETATTR local_divisor 0;
    local_17 = local_15 * local_16
    ARG local_17;
    local_18 = CALL Int___init;
    local_19 = GETATTR local_18 0;
    local_20 = local_19 - local_13
    ARG local_20;
    local_21 = CALL Bool___init;
    IF local_21 GOTO label_then_0;
    GOTO label_else_0;
    LABEL label_then_0;
    local_22 = LOAD 0;
    ARG local_22;
    local_23 = CALL Bool___init;
    local_12 = local_23;
    GOTO label_continue_0;
    LABEL label_else_0;
    local_25 = GETATTR local_testee 0;
    local_26 = GETATTR local_divisor 0;
    local_27 = GETATTR local_testee 0;
    local_28 = GETATTR local_divisor 0;
    local_29 = local_27 / local_28
    ARG local_29;
    local_30 = CALL Int___init;
    local_31 = GETATTR local_30 0;
    local_32 = local_26 * local_31
    ARG local_32;
    local_33 = CALL Int___init;
    local_34 = GETATTR local_33 0;
    local_35 = local_25 - local_34
    ARG local_35;
    local_36 = CALL Int___init;
    local_37 = GETATTR local_36 0;
    local_38 = LOAD 0;
    ARG local_38;
    local_39 = CALL Int___init;
    local_40 = GETATTR local_39 0;
    local_41 = local_37 - local_40
    local_41 = local_41 * local_41
    local_42 = LOAD 1;
    local_41 = local_42 - local_41
    ARG local_41;
    local_43 = CALL Bool___init;
    IF local_43 GOTO label_then_1;
    GOTO label_else_1;
    LABEL label_then_1;
    local_44 = LOAD 0;
    ARG local_44;
    local_45 = CALL Bool___init;
    local_24 = local_45;
    GOTO label_continue_1;
    LABEL label_else_1;
    local_46 = LOAD 1;
    ARG local_46;
    local_47 = CALL Bool___init;
    local_24 = local_47;
    LABEL label_continue_1;
    local_12 = local_24;
    LABEL label_continue_0;
    local_48 = GETATTR local_12 0;
    IF local_48 GOTO label_loop_label_1;
    GOTO label_pool_label_1;
    LABEL label_loop_label_1;
    local_49 = GETATTR local_divisor 0;
    local_50 = LOAD 1;
    ARG local_50;
    local_51 = CALL Int___init;
    local_52 = GETATTR local_51 0;
    local_53 = local_49 + local_52
    ARG local_53;
    local_54 = CALL Int___init;
    local_divisor = local_54;
    GOTO label_while_label_1;
    LABEL label_pool_label_1;
    local_55 = CALL Void___init;
    local_57 = GETATTR local_testee 0;
    local_58 = GETATTR local_divisor 0;
    local_59 = GETATTR local_divisor 0;
    local_60 = local_58 * local_59
    ARG local_60;
    local_61 = CALL Int___init;
    local_62 = GETATTR local_61 0;
    local_63 = local_62 - local_57
    ARG local_63;
    local_64 = CALL Bool___init;
    IF local_64 GOTO label_then_2;
    GOTO label_else_2;
    LABEL label_then_2;
    SETATTR param_self 0 local_testee;
    local_out = GETATTR param_self 0;
    local_67 = TYPEOF param_self;
    local_69 = LOAD data_9_eol;
    ARG local_69;
    local_70 = CALL String___init;
    local_71 = LOAD data_10_under;
    ARG local_71;
    local_72 = CALL String___init;
    local_73 = LOAD data_12_meth;
    ARG local_73;
    local_74 = CALL String___init;
    local_tname_local = VCALL local_67 1;
    print(str, local_tname_local)
    print(str, local_72)
    print(str, local_74)
    print(str, local_70)
    ARG param_self;
    ARG local_out;
    local_65 = VCALL local_67 4;
    local_76 = LOAD data_13_string;
    ARG local_76;
    local_77 = CALL String___init;
    local_78 = TYPEOF param_self;
    local_80 = LOAD data_9_eol;
    ARG local_80;
    local_81 = CALL String___init;
    local_82 = LOAD data_10_under;
    ARG local_82;
    local_83 = CALL String___init;
    local_84 = LOAD data_11_meth;
    ARG local_84;
    local_85 = CALL String___init;
    local_tname_local = VCALL local_78 1;
    print(str, local_tname_local)
    print(str, local_83)
    print(str, local_85)
    print(str, local_81)
    ARG param_self;
    ARG local_77;
    local_75 = VCALL local_78 3;
    local_56 = local_75;
    GOTO label_continue_2;
    LABEL label_else_2;
    local_86 = LOAD 0;
    ARG local_86;
    local_87 = CALL Int___init;
    local_56 = local_87;
    LABEL label_continue_2;
    local_stop = GETATTR param_self 3;
    local_90 = GETATTR local_stop 0;
    local_91 = GETATTR local_testee 0;
    local_92 = local_91 - local_90
    local_93 = LOAD 1;
    local_92 = local_92 + local_93
    ARG local_92;
    local_94 = CALL Bool___init;
    IF local_94 GOTO label_then_3;
    GOTO label_else_3;
    LABEL label_then_3;
    local_96 = LOAD data_14_string;
    ARG local_96;
    local_97 = CALL String___init;
    local_98 = TYPEOF local_97;
    local_100 = LOAD data_9_eol;
    ARG local_100;
    local_101 = CALL String___init;
    local_102 = LOAD data_10_under;
    ARG local_102;
    local_103 = CALL String___init;
    local_104 = LOAD data_15_meth;
    ARG local_104;
    local_105 = CALL String___init;
    local_tname_local = VCALL local_98 1;
    print(str, local_tname_local)
    print(str, local_103)
    print(str, local_105)
    print(str, local_101)
    ARG local_97;
    local_95 = VCALL local_98 0;
    local_88 = local_95;
    GOTO label_continue_3;
    LABEL label_else_3;
    local_106 = LOAD data_16_string;
    ARG local_106;
    local_107 = CALL String___init;
    local_88 = local_107;
    LABEL label_continue_3;
    GOTO label_while_label_0;
    LABEL label_pool_label_0;
    local_108 = CALL Void___init;
    RETURN local_108;
  }

