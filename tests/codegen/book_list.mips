.data
div_zero: .asciiz "Runtime Error: Division by zero"
dispatch_void: .asciiz "Runtime Error: A dispatch with void"
case_void: .asciiz "Runtime Error: A case with void"
case_no_match: .asciiz "Runtime Error: Execution of a case statement without a matching branch"
heap: .asciiz "Runtime Error: Heap overflow"
substr: .asciiz "Runtime Error: Index for substring out of range"
input_str: .space 2048
void: .word 0
Object_name: .asciiz "Object"
Object_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
Int_name: .asciiz "Int"
Int_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
String_name: .asciiz "String"
String_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word String.length
.word String.concat
.word String.substr
Bool_name: .asciiz "Bool"
Bool_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
IO_name: .asciiz "IO"
IO_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
Book_name: .asciiz "Book"
Book_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Book.initBook
.word Book.print
Article_name: .asciiz "Article"
Article_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Book.initBook
.word Article.print
.word Article.initArticle
BookList_name: .asciiz "BookList"
BookList_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word BookList.isNil
.word BookList.cons
.word BookList.car
.word BookList.cdr
.word BookList.print_list
Cons_name: .asciiz "Cons"
Cons_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Cons.isNil
.word BookList.cons
.word Cons.car
.word Cons.cdr
.word Cons.print_list
.word Cons.init
Nil_name: .asciiz "Nil"
Nil_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word IO.out_string
.word IO.out_int
.word IO.in_string
.word IO.in_int
.word Nil.isNil
.word BookList.cons
.word BookList.car
.word BookList.cdr
.word Nil.print_list
Main_name: .asciiz "Main"
Main_methods:
.word Object.abort
.word Object.type_name
.word Object.copy
.word Main.main
msg_0: .asciiz "Abort called from class "
msg_1: .asciiz "
"
empty_str: .asciiz ""
msg_3: .asciiz "title:      "
msg_4: .asciiz "author:     "
msg_5: .asciiz "periodical:  "
msg_6: .asciiz "- dynamic type was Article -
"
msg_7: .asciiz "- dynamic type was Book -
"
msg_8: .asciiz "Aho, Sethi, and Ullman"
msg_9: .asciiz "Compilers, Principles, Techniques, and Tools"
msg_10: .asciiz "PC Magazine"
msg_11: .asciiz "Ulanoff"
msg_12: .asciiz "The Top 100 CD_ROMs"
.text
div_zero_error:
la $a0, div_zero
li $v0, 4
syscall
li $v0, 10
syscall
dispatch_void_error:
la $a0, dispatch_void
li $v0, 4
syscall
li $v0, 10
syscall
case_void_error:
la $a0, case_void
li $v0, 4
syscall
li $v0, 10
syscall
case_no_match_error:
la $a0, case_no_match
li $v0, 4
syscall
li $v0, 10
syscall
heap_error:
la $a0, heap
li $v0, 4
syscall
li $v0, 10
syscall
substr_error:
la $a0, substr
li $v0, 4
syscall
li $v0, 10
syscall
main:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 5:tag Main:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Main_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Main_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Main_init
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main_init
sw $a1, 8($sp)
#CallNode Main.main
move $t0, $sp
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Main.main
sw $a1, 8($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Object_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
Object.abort:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_0
la $t0, msg_0
sw $t0, 4($sp)
#PrintString msg_0
lw $a0, 4($sp)
li $v0, 4
syscall
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 8($sp)
#PrintString class_name_1
lw $a0, 8($sp)
li $v0, 4
syscall
#LoadStr msg_1
la $t0, msg_1
sw $t0, 12($sp)
#PrintString eol_2
lw $a0, 12($sp)
li $v0, 4
syscall
#Abort
li $v0, 10
syscall
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.type_name:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#TypeOf self
lw $t0, 16($sp)
lw $t1, 4($t0)
sw $t1, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg class_name_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Object.copy:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#Copy self
lw $t0, 8($sp)
lw $a0, 8($t0)
mul $a0, $a0, 4
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t1, $v0
li $a0, 0
lw $t3, 8($t0)
copy_object:
lw $t2, 0($t0)
sw $t2, 0($t1)
addi $t0, $t0, 4
addi $t1, $t1, 4
addi $a0, $a0, 1
blt $a0, $t3, copy_object
sw $v0, 4($sp)
#Return object_copy_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
IO_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 8
jr $ra
IO.out_string:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = String.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintString v_0
lw $a0, 4($sp)
li $v0, 4
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.out_int:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr v_0 = Int.value
lw $t0, 12($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#PrintInteger v_0
li $v0, 1
lw $a0, 4($sp)
syscall
#Return self
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 16
jr $ra
IO.in_string:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadString read_string_0
la $a0, input_str
li $a1, 2048
li $v0, 8
syscall
move $t0, $a0
read_char:
li $t1, 0
lb $t1, 0($t0)
beqz $t1, remove_characters_str_end
addi $t0, $t0, 1
j read_char
remove_characters_str_end:
addi $t0, $t0, -1
li $t1, 0
lb $t1, 0($t0)
bne $t1, 10, rcs_end
sb $0, 0($t0)
addi $t0, $t0, -1
lb $t1, 0($t0)
bne $t1, 13, rcs_end
sb $0, 0($t0)
j remove_characters_str_end
rcs_end:
sw $a0, 4($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode String_init
move $t0, $sp
# Arg read_string_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
IO.in_int:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#ReadInteger read_int_0
li $v0, 5
syscall
sw $v0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg read_int_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Int_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Intvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Stringvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String.length:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Length of self
lw $t0, 16($sp)
lw $t0, 16($t0)
li $a0, 0
count:
lb $t1, 0($t0)
beqz $t1, end
addi $t0, $t0, 1
addi $a0, $a0, 1
j count
end:
sw $a0, 4($sp)
#Allocate 4:tag Int:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Int_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Int_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Int_init
move $t0, $sp
# Arg length_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Int_init
sw $a1, 12($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
String.concat:
addi $sp, $sp, -36
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 40($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#CallNode String.length
move $t0, $sp
# Arg self
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 8($sp)
#GetAttr str2_2 = String.value
lw $t0, 44($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#CallNode String.length
move $t0, $sp
# Arg s
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String.length
sw $a1, 16($sp)
#GetAttr len1_value_4 = Int.value
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 20($sp)
#GetAttr len2_value_5 = Int.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 24($sp)
#Concat str1_0 str2_2
lw $a0, 20($sp)
lw $t0, 24($sp)
add $a0, $a0, $t0
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t3, $v0
lw $t0, 4($sp)
lw $t1, 12($sp)
copy_str:
lb $t2, 0($t0)
sb $t2, 0($v0)
beqz $t2, concat_str
addi $t0, $t0, 1
addi $v0, $v0, 1
j copy_str
concat_str:
lb $t2, 0($t1)
sb $t2, 0($v0)
beqz $t2, end_concat_str
addi $t1, $t1, 1
addi $v0, $v0, 1
j concat_str
end_concat_str:
sb $0, ($v0)
sw $t3, 28($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg result_string_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#Return instance_7
lw $a1, 32($sp)
lw $ra, 0($sp)
addi $sp, $sp, 48
jr $ra
String.substr:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr i_value_0 = Int.value
lw $t0, 28($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr l_value_1 = Int.value
lw $t0, 32($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#Substr self:string i_value_0:index l_value_1:length
lw $a0, 8($sp)
addi $a0, $a0, 1
li $v0, 9
syscall
bge $v0, $sp, heap_error
lw $t0, 4($sp)
lw $t1, 8($sp)
lw $t4, 24($sp)
lw $t2, 16($t4)
bltz $t0, substr_error
li $a0, 0
skip_char:
beq $a0, $t0, end_skip
addi $a0, $a0, 1
addi $t2, $t2, 1
beq $t2, $zero, substr_error
j skip_char
end_skip:
li $a0, 0
move $t3, $v0
substr_copy:
beq $a0, $t1, end_substr_copy
li $t0, 0
lb $t0, 0($t2)
sb $t0, 0($v0)
addi $t2, $t2, 1
beq $t2, $zero, substr_error
addi $v0, $v0, 1
addi $a0, $a0, 1
j substr_copy
end_substr_copy:
sb $0, ($v0)
sw $t3, 12($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 16($sp)
#CallNode String_init
move $t0, $sp
# Arg substr_result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 20($sp)
#Return instance_3
lw $a1, 16($sp)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Bool_init:
addi $sp, $sp, 0
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Boolvalue = v
lw $t0, 4($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
String_equals:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr str1_0 = String.value
lw $t0, 16($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#GetAttr str2_1 = String.value
lw $t0, 20($sp)
lw $t1, 16($t0)
sw $t1, 8($sp)
#StringEquals str1_0 = str2_1
lw $t1, 4($sp)
lw $t2, 8($sp)
compare_str:
li $t3, 0
lb $t3, 0($t1)
li $t4, 0
lb $t4, 0($t2)
seq $a0, $t3, $t4
beqz $a0, end_compare_str
beqz $t3, end_compare_str
beqz $t4, end_compare_str
addi $t1, $t1, 1
addi $t2, $t2, 1
j compare_str
end_compare_str:
sw $a0, 12($sp)
#Return result_2
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Book_init:
addi $sp, $sp, -28
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 12($sp)
#CallNode String_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 16($sp)
#SetAttr Booktitle = instance_1
lw $t0, 32($sp)
lw $t1, 8($sp)
sw $t1, 16($t0)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 24($sp)
#CallNode String_init
move $t0, $sp
# Arg value_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 28($sp)
#SetAttr Bookauthor = instance_4
lw $t0, 32($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 36
jr $ra
Book.initBook:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Booktitle = title_p
lw $t0, 12($sp)
lw $t1, 16($sp)
sw $t1, 16($t0)
#SetAttr Bookauthor = author_p
lw $t0, 12($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#Return self
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Book.print:
addi $sp, $sp, -80
addi $sp, $sp, -4
sw $ra, 0($sp)
#LoadStr msg_3
la $t0, msg_3
sw $t0, 16($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#CallNode String_init
move $t0, $sp
# Arg l_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 24($sp)
#VCall out_string
move $t0, $sp
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 84($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 12($sp)
#GetAttr Book.title = Book.title
lw $t0, 84($sp)
lw $t1, 16($t0)
sw $t1, 28($sp)
#VCall out_string
move $t0, $sp
# Arg Book.title
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 8($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 32($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 36($sp)
#CallNode String_init
move $t0, $sp
# Arg l_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 40($sp)
#VCall out_string
move $t0, $sp
# Arg instance_8
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 4($sp)
#LoadStr msg_4
la $t0, msg_4
sw $t0, 56($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode String_init
move $t0, $sp
# Arg l_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 64($sp)
#VCall out_string
move $t0, $sp
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 84($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 52($sp)
#GetAttr Book.author = Book.author
lw $t0, 84($sp)
lw $t1, 20($t0)
sw $t1, 68($sp)
#VCall out_string
move $t0, $sp
# Arg Book.author
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_12
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 52($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 48($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 72($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 76($sp)
#CallNode String_init
move $t0, $sp
# Arg l_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 80($sp)
#VCall out_string
move $t0, $sp
# Arg instance_18
lw $t1, 76($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 48($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 44($sp)
#Return self
lw $a1, 84($sp)
lw $ra, 0($sp)
addi $sp, $sp, 88
jr $ra
Article_init:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Book_init
move $t0, $sp
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Book_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadStr empty_str
la $t0, empty_str
sw $t0, 12($sp)
#CallNode String_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 16($sp)
#SetAttr Articleper_title = instance_1
lw $t0, 20($sp)
lw $t1, 8($sp)
sw $t1, 24($t0)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Article.initArticle:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall initBook
move $t0, $sp
# Arg author_p
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg title_p
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 4($sp)
#SetAttr Articleper_title = per_title_p
lw $t0, 12($sp)
lw $t1, 24($sp)
sw $t1, 24($t0)
#Return self
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 28
jr $ra
Article.print:
addi $sp, $sp, -48
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 2:tag Book:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, Book_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Book_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#VCall print
move $t0, $sp
# Arg self
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 4($sp)
#LoadStr msg_5
la $t0, msg_5
sw $t0, 24($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode String_init
move $t0, $sp
# Arg l_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 32($sp)
#VCall out_string
move $t0, $sp
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 52($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 52($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 20($sp)
#GetAttr Article.per_title = Article.per_title
lw $t0, 52($sp)
lw $t1, 24($t0)
sw $t1, 36($sp)
#VCall out_string
move $t0, $sp
# Arg Article.per_title
lw $t1, 36($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 16($sp)
#LoadStr msg_1
la $t0, msg_1
sw $t0, 40($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 44($sp)
#CallNode String_init
move $t0, $sp
# Arg l_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 48($sp)
#VCall out_string
move $t0, $sp
# Arg instance_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 12($sp)
#Return self
lw $a1, 52($sp)
lw $ra, 0($sp)
addi $sp, $sp, 56
jr $ra
BookList_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode IO_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal IO_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
BookList.isNil:
addi $sp, $sp, -16
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 20($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#LoadInt 1
li $t0, 1
sw $t0, 12($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 16($sp)
#Return instance_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
BookList.cons:
addi $sp, $sp, -20
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 4:tag Cons:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 4
sw $t1, 0($t0)
la $t1, Cons_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Cons_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#CallNode Cons_init
move $t0, $sp
# Arg result_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Cons_init
sw $a1, 8($sp)
#AssignNode new_cell_2 = result_0
lw $t1, 4($sp)
sw $t1, 12($sp)
#VCall init
move $t0, $sp
# Arg self
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg hd
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg new_cell_2
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 48($t2)
jal $t3
sw $a1, 16($sp)
#AssignNode result_4 = result_3
lw $t1, 16($sp)
sw $t1, 20($sp)
#Return result_4
lw $a1, 20($sp)
lw $ra, 0($sp)
addi $sp, $sp, 32
jr $ra
BookList.car:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Allocate 2:tag Book:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, Book_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Book_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Book_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Book_init
sw $a1, 12($sp)
#Return result_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
BookList.cdr:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 16($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Allocate 3:tag BookList:Class_name 4:Class_size
li $a0, 16
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, BookList_name
sw $t1, 4($t0)
li $t1, 4
sw $t1, 8($t0)
la $t1, BookList_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode BookList_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal BookList_init
sw $a1, 12($sp)
#Return result_1
lw $a1, 8($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
BookList.print_list:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#VCall abort
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 0($t2)
jal $t3
sw $a1, 4($sp)
#Return result_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Cons_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode BookList_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal BookList_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr Consxcar = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 16($t0)
#SetAttr Consxcdr = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 20($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Cons.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 0
li $t0, 0
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Cons.init:
addi $sp, $sp, -8
addi $sp, $sp, -4
sw $ra, 0($sp)
#SetAttr Consxcar = hd
lw $t0, 12($sp)
lw $t1, 16($sp)
sw $t1, 16($t0)
#SetAttr Consxcdr = tl
lw $t0, 12($sp)
lw $t1, 20($sp)
sw $t1, 20($t0)
#Return self
lw $a1, 12($sp)
lw $ra, 0($sp)
addi $sp, $sp, 24
jr $ra
Cons.car:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 8($sp)
lw $t1, 16($t0)
sw $t1, 4($sp)
#Return Cons.xcar
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Cons.cdr:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 8($sp)
lw $t1, 20($t0)
sw $t1, 4($sp)
#Return Cons.xcdr
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Cons.print_list:
addi $sp, $sp, -60
addi $sp, $sp, -4
sw $ra, 0($sp)
#GetAttr Cons.xcar = Cons.xcar
lw $t0, 64($sp)
lw $t1, 16($t0)
sw $t1, 12($sp)
#VCall print
move $t0, $sp
# Arg Cons.xcar
lw $t1, 12($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 12($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 8($sp)
#Case result_1
lw $t0, 8($sp)
lw $t1, 0($t0)
la $a0, void
bne $t1, $a0, label_1
b case_void_error
#LabelNode label_1
label_1:
#Action
blt $t1, 3, label_3
bgt $t1, 3, label_3
#AssignNode dummy_3 = result_1
lw $t1, 8($sp)
sw $t1, 16($sp)
#LoadStr msg_6
la $t0, msg_6
sw $t0, 24($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 28($sp)
#CallNode String_init
move $t0, $sp
# Arg l_5
lw $t1, 24($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 32($sp)
#VCall out_string
move $t0, $sp
# Arg instance_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 64($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 20($sp)
#AssignNode result_0 = result_4
lw $t1, 20($sp)
sw $t1, 4($sp)
#Goto label_2
b label_2
#LabelNode label_3
label_3:
#Action
blt $t1, 2, label_4
bgt $t1, 3, label_4
#AssignNode dummy_8 = result_1
lw $t1, 8($sp)
sw $t1, 36($sp)
#LoadStr msg_7
la $t0, msg_7
sw $t0, 44($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode String_init
move $t0, $sp
# Arg l_10
lw $t1, 44($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 52($sp)
#VCall out_string
move $t0, $sp
# Arg instance_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg self
lw $t1, 64($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 64($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 12($t2)
jal $t3
sw $a1, 40($sp)
#AssignNode result_0 = result_9
lw $t1, 40($sp)
sw $t1, 4($sp)
#Goto label_2
b label_2
#LabelNode label_4
label_4:
#Goto case_no_match_error
b case_no_match_error
#LabelNode label_2
label_2:
#GetAttr Cons.xcdr = Cons.xcdr
lw $t0, 64($sp)
lw $t1, 20($t0)
sw $t1, 60($sp)
#VCall print_list
move $t0, $sp
# Arg Cons.xcdr
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 60($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 56($sp)
#Return result_13
lw $a1, 56($sp)
lw $ra, 0($sp)
addi $sp, $sp, 68
jr $ra
Nil_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode BookList_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal BookList_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Nil.isNil:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 1
li $t0, 1
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Nil.print_list:
addi $sp, $sp, -12
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 3:tag Bool:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Bool_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, Bool_methods
sw $t1, 12($t0)
sw $t0, 4($sp)
#LoadInt 1
li $t0, 1
sw $t0, 8($sp)
#CallNode Bool_init
move $t0, $sp
# Arg value_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_0
lw $t1, 4($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Bool_init
sw $a1, 12($sp)
#Return instance_0
lw $a1, 4($sp)
lw $ra, 0($sp)
addi $sp, $sp, 20
jr $ra
Main_init:
addi $sp, $sp, -4
addi $sp, $sp, -4
sw $ra, 0($sp)
#CallNode Object_init
move $t0, $sp
# Arg self
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Object_init
sw $a1, 4($sp)
#Return None
move $a1, $zero
#SetAttr Mainbooks = void
lw $t0, 8($sp)
la $t1, void
sw $t1, 16($t0)
lw $ra, 0($sp)
addi $sp, $sp, 12
jr $ra
Main.main:
addi $sp, $sp, -128
addi $sp, $sp, -4
sw $ra, 0($sp)
#Allocate 2:tag Book:Class_name 6:Class_size
li $a0, 24
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, Book_name
sw $t1, 4($t0)
li $t1, 6
sw $t1, 8($t0)
la $t1, Book_methods
sw $t1, 12($t0)
sw $t0, 8($sp)
#CallNode Book_init
move $t0, $sp
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Book_init
sw $a1, 12($sp)
#LoadStr msg_8
la $t0, msg_8
sw $t0, 16($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 20($sp)
#CallNode String_init
move $t0, $sp
# Arg l_3
lw $t1, 16($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 24($sp)
#LoadStr msg_9
la $t0, msg_9
sw $t0, 28($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 32($sp)
#CallNode String_init
move $t0, $sp
# Arg l_6
lw $t1, 28($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 36($sp)
#VCall initBook
move $t0, $sp
# Arg instance_4
lw $t1, 20($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_7
lw $t1, 32($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_1
lw $t1, 8($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 8($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 28($t2)
jal $t3
sw $a1, 4($sp)
#AssignNode a_book_9 = result_0
lw $t1, 4($sp)
sw $t1, 40($sp)
#Allocate 3:tag Article:Class_name 7:Class_size
li $a0, 28
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 3
sw $t1, 0($t0)
la $t1, Article_name
sw $t1, 4($t0)
li $t1, 7
sw $t1, 8($t0)
la $t1, Article_methods
sw $t1, 12($t0)
sw $t0, 48($sp)
#CallNode Article_init
move $t0, $sp
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Article_init
sw $a1, 52($sp)
#LoadStr msg_10
la $t0, msg_10
sw $t0, 56($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 60($sp)
#CallNode String_init
move $t0, $sp
# Arg l_13
lw $t1, 56($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 64($sp)
#LoadStr msg_11
la $t0, msg_11
sw $t0, 68($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 72($sp)
#CallNode String_init
move $t0, $sp
# Arg l_16
lw $t1, 68($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 76($sp)
#LoadStr msg_12
la $t0, msg_12
sw $t0, 80($sp)
#Allocate 2:tag String:Class_name 5:Class_size
li $a0, 20
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 2
sw $t1, 0($t0)
la $t1, String_name
sw $t1, 4($t0)
li $t1, 5
sw $t1, 8($t0)
la $t1, String_methods
sw $t1, 12($t0)
sw $t0, 84($sp)
#CallNode String_init
move $t0, $sp
# Arg l_19
lw $t1, 80($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal String_init
sw $a1, 88($sp)
#VCall initArticle
move $t0, $sp
# Arg instance_14
lw $t1, 60($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_17
lw $t1, 72($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg instance_20
lw $t1, 84($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_11
lw $t1, 48($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 48($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 36($t2)
jal $t3
sw $a1, 44($sp)
#AssignNode an_article_22 = result_10
lw $t1, 44($sp)
sw $t1, 92($sp)
#Allocate 5:tag Nil:Class_name 4:Class_size
li $a0, 16
li $v0, 9
syscall
bge $v0, $sp, heap_error
move $t0, $v0
li $t1, 5
sw $t1, 0($t0)
la $t1, Nil_name
sw $t1, 4($t0)
li $t1, 4
sw $t1, 8($t0)
la $t1, Nil_methods
sw $t1, 12($t0)
sw $t0, 104($sp)
#CallNode Nil_init
move $t0, $sp
# Arg result_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
jal Nil_init
sw $a1, 108($sp)
#VCall cons
move $t0, $sp
# Arg a_book_9
lw $t1, 40($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_25
lw $t1, 104($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 104($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 100($sp)
#VCall cons
move $t0, $sp
# Arg an_article_22
lw $t1, 92($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
# Arg result_24
lw $t1, 100($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 100($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 32($t2)
jal $t3
sw $a1, 96($sp)
#SetAttr Mainbooks = result_23
lw $t0, 132($sp)
lw $t1, 96($sp)
sw $t1, 16($t0)
#GetAttr Main.books = Main.books
lw $t0, 132($sp)
lw $t1, 16($t0)
sw $t1, 120($sp)
#VCall print_list
move $t0, $sp
# Arg Main.books
lw $t1, 120($t0)
addi $sp, $sp, -4
sw $t1, 0($sp)
lw $t1, 120($t0)
la $t0, void
beq $t1, $t0, dispatch_void_error
lw $t2, 12($t1)
lw $t3, 44($t2)
jal $t3
sw $a1, 116($sp)
#AssignNode result_30 = result_28
lw $t1, 116($sp)
sw $t1, 124($sp)
#AssignNode result_31 = result_30
lw $t1, 124($sp)
sw $t1, 128($sp)
#Return result_31
lw $a1, 128($sp)
lw $ra, 0($sp)
addi $sp, $sp, 136
jr $ra